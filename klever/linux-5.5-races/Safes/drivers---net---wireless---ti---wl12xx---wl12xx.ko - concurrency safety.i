/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/acx.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 40 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_114 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_114 seqlock_t;
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_nodemask_t_115 {
   unsigned long bits[16U] ;
};
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_nodemask_t_115 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_126 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_127 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_125 {
   struct __anonstruct_126 __anonCompField___anonunion_125_28 ;
   struct __anonstruct_127 __anonCompField___anonunion_125_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_125 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_128 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_128 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_130 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_131 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct list_head slab_list ;
   struct __anonstruct_134 __anonCompField___anonunion_133_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_136 __anonCompField___anonunion_135_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   union __anonunion_133 __anonCompField___anonstruct_132_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_135 __anonCompField___anonstruct_132_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_140 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_140 __anonCompField___anonstruct_139_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_31 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_32 ;
   struct __anonstruct_132 __anonCompField___anonunion_129_37 ;
   struct __anonstruct_137 __anonCompField___anonunion_129_38 ;
   struct __anonstruct_138 __anonCompField___anonunion_129_39 ;
   struct __anonstruct_139 __anonCompField___anonunion_129_41 ;
   struct __anonstruct_141 __anonCompField___anonunion_129_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_129 __anonCompField_page_43 ;
   union __anonunion_142 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_143 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_143 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_144 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_144 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct vmem_altmap;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_248 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_248 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_249 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_249 kgid_t;
#line 140 
struct dentry;
#line 141 
struct iattr;
#line 142 
struct super_block;
#line 143 
struct poll_table_struct;
#line 144 
struct fs_context;
#line 146 
struct kernfs_open_node;
#line 147 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_250 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_250 __anonCompField_kernfs_node_49 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 51 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_291 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_291 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_292 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_293 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_294 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_295 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_298 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_299 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_297 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_298 _addr_bnd ;
   struct __anonstruct__addr_pkey_299 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_296 {
   void *_addr ;
   union __anonunion_297 __anonCompField___anonstruct__sigfault_296_50 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_300 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_301 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_292 _kill ;
   struct __anonstruct__timer_293 _timer ;
   struct __anonstruct__rt_294 _rt ;
   struct __anonstruct__sigchld_295 _sigchld ;
   struct __anonstruct__sigfault_296 _sigfault ;
   struct __anonstruct__sigpoll_300 _sigpoll ;
   struct __anonstruct__sigsys_301 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_306 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_306 __anonCompField_kernel_siginfo_53 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_311 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_311 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_313 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_313 __anonCompField_task_struct_55 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct pdev_archdata {
   };
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct mfd_cell;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_device {
   char *name ;
   int id ;
   bool id_auto ;
   struct device dev ;
   u64 dma_mask ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id *id_entry ;
   char *driver_override ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
#line 347 
struct percpu_ref;
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_404 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_403 {
   struct __anonstruct_404 __anonCompField___anonunion_403_56 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_403 __anonCompField_lockref_57 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_406 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_405 {
   struct __anonstruct_406 __anonCompField___anonunion_405_58 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_405 __anonCompField_qstr_59 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_407 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_408 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_407 __anonCompField_dentry_60 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_408 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_416 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_416 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_417 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_418 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_417 __anonCompField_io_cq_61 ;
   union __anonunion_418 __anonCompField_io_cq_62 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 293 
struct iov_iter;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_419 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_419 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_420 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_420 __anonCompField_kqid_63 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_422 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_421 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_422 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_421 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_425 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_426 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_427 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_428 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_425 __anonCompField_inode_64 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_426 __anonCompField_inode_65 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_427 __anonCompField_inode_66 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_428 __anonCompField_inode_67 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_429 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_429 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_431 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_430 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_431 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_430 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_445 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_447 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_446 {
   unsigned long nr_segs ;
   struct __anonstruct_447 __anonCompField___anonunion_446_69 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_445 __anonCompField_iov_iter_68 ;
   union __anonunion_446 __anonCompField_iov_iter_70 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_9783 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_9783 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_466 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_466 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_467 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_467 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_478 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_479 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_480 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_481 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_478 ports ;
   struct __anonstruct_icmpt_479 icmpt ;
   struct __anonstruct_dnports_480 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_481 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_482 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_482 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_489 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_488 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_489 __anonCompField___anonstruct_488_85 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_487 {
   struct __anonstruct_488 __anonCompField___anonunion_487_86 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_490 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_491 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_493 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_492 {
   struct __anonstruct_493 __anonCompField___anonunion_492_90 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_495 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_494 {
   __wsum csum ;
   struct __anonstruct_495 __anonCompField___anonunion_494_92 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_496 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_497 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_498 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_487 __anonCompField_sk_buff_87 ;
   union __anonunion_490 __anonCompField_sk_buff_88 ;
   union __anonunion_491 __anonCompField_sk_buff_89 ;
   char cb[48U] ;
   union __anonunion_492 __anonCompField_sk_buff_91 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_494 __anonCompField_sk_buff_93 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_496 __anonCompField_sk_buff_94 ;
   __u32 secmark ;
   union __anonunion_497 __anonCompField_sk_buff_95 ;
   union __anonunion_498 __anonCompField_sk_buff_96 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_528 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_528 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_529 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_529 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_530 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_530 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_531 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_531 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_532 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_532 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_533 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_533 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_534 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_534 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_535 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_535 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_536 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_537 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_536 ifr_ifrn ;
   union __anonunion_ifr_ifru_537 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_647 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_646 {
   struct __anonstruct_647 __anonCompField___anonunion_646_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_646 __anonCompField_sock_cgroup_data_152 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14568 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14569 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14568 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14569 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 1227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_p2p_noa_desc {
   u8 count ;
   __le32 duration ;
   __le32 interval ;
   __le32 start_time ;
} __attribute__((__packed__));
#line 1234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_p2p_noa_attr {
   u8 index ;
   u8 oppps_ctwindow ;
   struct ieee80211_p2p_noa_desc desc[4U] ;
} __attribute__((__packed__));
#line 1276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_mcs_info {
   u8 rx_mask[10U] ;
   __le16 rx_highest ;
   u8 tx_params ;
   u8 reserved[3U] ;
} __attribute__((__packed__));
#line 1310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_ht_cap {
   __le16 cap_info ;
   u8 ampdu_params_info ;
   struct ieee80211_mcs_info mcs ;
   __le16 extended_ht_cap_info ;
   __le32 tx_BF_cap_info ;
   u8 antenna_selection_info ;
} __attribute__((__packed__));
#line 1483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_mcs_info {
   __le16 rx_mcs_map ;
   __le16 rx_highest ;
   __le16 tx_mcs_map ;
   __le16 tx_highest ;
} __attribute__((__packed__));
#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_cap {
   __le32 vht_cap_info ;
   struct ieee80211_vht_mcs_info supp_mcs ;
} __attribute__((__packed__));
#line 1569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_cap_elem {
   u8 mac_cap_info[6U] ;
   u8 phy_cap_info[11U] ;
} __attribute__((__packed__));
#line 1616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_mcs_nss_supp {
   __le16 rx_mcs_80 ;
   __le16 tx_mcs_80 ;
   __le16 rx_mcs_160 ;
   __le16 tx_mcs_160 ;
   __le16 rx_mcs_80p80 ;
   __le16 tx_mcs_80p80 ;
} __attribute__((__packed__));
#line 1631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_operation {
   __le32 he_oper_params ;
   __le16 he_mcs_nss_set ;
   u8 optional[0U] ;
} __attribute__((__packed__));
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
enum nl80211_iftype {
    NL80211_IFTYPE_UNSPECIFIED = 0,
    NL80211_IFTYPE_ADHOC = 1,
    NL80211_IFTYPE_STATION = 2,
    NL80211_IFTYPE_AP = 3,
    NL80211_IFTYPE_AP_VLAN = 4,
    NL80211_IFTYPE_WDS = 5,
    NL80211_IFTYPE_MONITOR = 6,
    NL80211_IFTYPE_MESH_POINT = 7,
    NL80211_IFTYPE_P2P_CLIENT = 8,
    NL80211_IFTYPE_P2P_GO = 9,
    NL80211_IFTYPE_P2P_DEVICE = 10,
    NL80211_IFTYPE_OCB = 11,
    NL80211_IFTYPE_NAN = 12,
    NUM_NL80211_IFTYPES = 13,
    NL80211_IFTYPE_MAX = 12
};
#line 3263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
enum nl80211_reg_initiator {
    NL80211_REGDOM_SET_BY_CORE = 0,
    NL80211_REGDOM_SET_BY_USER = 1,
    NL80211_REGDOM_SET_BY_DRIVER = 2,
    NL80211_REGDOM_SET_BY_COUNTRY_IE = 3
};
#line 3320 
enum nl80211_dfs_regions {
    NL80211_DFS_UNSET = 0,
    NL80211_DFS_FCC = 1,
    NL80211_DFS_ETSI = 2,
    NL80211_DFS_JP = 3
};
#line 3327 
enum nl80211_user_reg_hint_type {
    NL80211_USER_REG_HINT_USER = 0,
    NL80211_USER_REG_HINT_CELL_BASE = 1,
    NL80211_USER_REG_HINT_INDOOR = 2
};
#line 3439 
enum nl80211_channel_type {
    NL80211_CHAN_NO_HT = 0,
    NL80211_CHAN_HT20 = 1,
    NL80211_CHAN_HT40MINUS = 2,
    NL80211_CHAN_HT40PLUS = 3
};
#line 3446 
enum nl80211_key_mode {
    NL80211_KEY_RX_TX = 0,
    NL80211_KEY_NO_TX = 1,
    NL80211_KEY_SET_TX = 2
};
#line 3452 
enum nl80211_chan_width {
    NL80211_CHAN_WIDTH_20_NOHT = 0,
    NL80211_CHAN_WIDTH_20 = 1,
    NL80211_CHAN_WIDTH_40 = 2,
    NL80211_CHAN_WIDTH_80 = 3,
    NL80211_CHAN_WIDTH_80P80 = 4,
    NL80211_CHAN_WIDTH_160 = 5,
    NL80211_CHAN_WIDTH_5 = 6,
    NL80211_CHAN_WIDTH_10 = 7
};
#line 3463 
enum nl80211_bss_scan_width {
    NL80211_BSS_CHAN_WIDTH_20 = 0,
    NL80211_BSS_CHAN_WIDTH_10 = 1,
    NL80211_BSS_CHAN_WIDTH_5 = 2
};
#line 3500 
enum nl80211_auth_type {
    NL80211_AUTHTYPE_OPEN_SYSTEM = 0,
    NL80211_AUTHTYPE_SHARED_KEY = 1,
    NL80211_AUTHTYPE_FT = 2,
    NL80211_AUTHTYPE_NETWORK_EAP = 3,
    NL80211_AUTHTYPE_SAE = 4,
    NL80211_AUTHTYPE_FILS_SK = 5,
    NL80211_AUTHTYPE_FILS_SK_PFS = 6,
    NL80211_AUTHTYPE_FILS_PK = 7,
    __NL80211_AUTHTYPE_NUM = 8,
    NL80211_AUTHTYPE_MAX = 7,
    NL80211_AUTHTYPE_AUTOMATIC = 8
};
#line 3521 
enum nl80211_mfp {
    NL80211_MFP_NO = 0,
    NL80211_MFP_REQUIRED = 1,
    NL80211_MFP_OPTIONAL = 2
};
#line 4599 
enum nl80211_band {
    NL80211_BAND_2GHZ = 0,
    NL80211_BAND_5GHZ = 1,
    NL80211_BAND_60GHZ = 2,
    NL80211_BAND_6GHZ = 3,
    NUM_NL80211_BANDS = 4
};
#line 4633 
enum nl80211_tx_power_setting {
    NL80211_TX_POWER_AUTOMATIC = 0,
    NL80211_TX_POWER_LIMITED = 1,
    NL80211_TX_POWER_FIXED = 2
};
#line 4914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_seq {
   __u32 start ;
   __u32 offset ;
   __u32 len ;
};
#line 4925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token {
   __u32 offset ;
   __u32 len ;
   __u8 token_stream[] ;
};
#line 4936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token_feature {
   __u32 min_len ;
   __u32 max_len ;
   __u32 bufsize ;
};
#line 5237 
enum nl80211_dfs_state {
    NL80211_DFS_USABLE = 0,
    NL80211_DFS_UNAVAILABLE = 1,
    NL80211_DFS_AVAILABLE = 2
};
#line 5847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_vendor_cmd_info {
   __u32 vendor_id ;
   __u32 subcmd ;
};
#line 5903 
enum nl80211_bss_select_attr {
    __NL80211_BSS_SELECT_ATTR_INVALID = 0,
    NL80211_BSS_SELECT_ATTR_RSSI = 1,
    NL80211_BSS_SELECT_ATTR_BAND_PREF = 2,
    NL80211_BSS_SELECT_ATTR_RSSI_ADJUST = 3,
    __NL80211_BSS_SELECT_ATTR_AFTER_LAST = 4,
    NL80211_BSS_SELECT_ATTR_MAX = 3
};
#line 6138 
enum environment_cap {
    ENVIRON_ANY = 0,
    ENVIRON_INDOOR = 1,
    ENVIRON_OUTDOOR = 2
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct regulatory_request {
   struct callback_head callback_head ;
   int wiphy_idx ;
   enum nl80211_reg_initiator initiator ;
   enum nl80211_user_reg_hint_type user_reg_hint_type ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   bool intersect ;
   bool processed ;
   enum environment_cap country_ie_env ;
   struct list_head list ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_freq_range {
   u32 start_freq_khz ;
   u32 end_freq_khz ;
   u32 max_bandwidth_khz ;
};
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_power_rule {
   u32 max_antenna_gain ;
   u32 max_eirp ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_ac {
   u16 cw_min ;
   u16 cw_max ;
   u16 cot ;
   u8 aifsn ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_rule {
   struct ieee80211_wmm_ac client[4U] ;
   struct ieee80211_wmm_ac ap[4U] ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_reg_rule {
   struct ieee80211_freq_range freq_range ;
   struct ieee80211_power_rule power_rule ;
   struct ieee80211_wmm_rule wmm_rule ;
   u32 flags ;
   u32 dfs_cac_ms ;
   bool has_wmm ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_regdomain {
   struct callback_head callback_head ;
   u32 n_reg_rules ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   struct ieee80211_reg_rule reg_rules[] ;
};
#line 233 
struct wiphy;
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_channel {
   enum nl80211_band band ;
   u32 center_freq ;
   u16 hw_value ;
   u32 flags ;
   int max_antenna_gain ;
   int max_power ;
   int max_reg_power ;
   bool beacon_found ;
   u32 orig_flags ;
   int orig_mag ;
   int orig_mpwr ;
   enum nl80211_dfs_state dfs_state ;
   unsigned long dfs_state_entered ;
   unsigned int dfs_cac_ms ;
};
#line 172 
enum ieee80211_bss_type {
    IEEE80211_BSS_TYPE_ESS = 0,
    IEEE80211_BSS_TYPE_PBSS = 1,
    IEEE80211_BSS_TYPE_IBSS = 2,
    IEEE80211_BSS_TYPE_MBSS = 3,
    IEEE80211_BSS_TYPE_ANY = 4
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_rate {
   u32 flags ;
   u16 bitrate ;
   u16 hw_value ;
   u16 hw_value_short ;
};
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_he_obss_pd {
   bool enable ;
   u8 min_offset ;
   u8 max_offset ;
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_ht_cap {
   u16 cap ;
   bool ht_supported ;
   u8 ampdu_factor ;
   u8 ampdu_density ;
   struct ieee80211_mcs_info mcs ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_vht_cap {
   bool vht_supported ;
   u32 cap ;
   struct ieee80211_vht_mcs_info vht_mcs ;
};
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_he_cap {
   bool has_he ;
   struct ieee80211_he_cap_elem he_cap_elem ;
   struct ieee80211_he_mcs_nss_supp he_mcs_nss_supp ;
   u8 ppe_thres[25U] ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sband_iftype_data {
   u16 types_mask ;
   struct ieee80211_sta_he_cap he_cap ;
};
#line 332 
enum ieee80211_edmg_bw_config {
    IEEE80211_EDMG_BW_CONFIG_4 = 4,
    IEEE80211_EDMG_BW_CONFIG_5 = 5,
    IEEE80211_EDMG_BW_CONFIG_6 = 6,
    IEEE80211_EDMG_BW_CONFIG_7 = 7,
    IEEE80211_EDMG_BW_CONFIG_8 = 8,
    IEEE80211_EDMG_BW_CONFIG_9 = 9,
    IEEE80211_EDMG_BW_CONFIG_10 = 10,
    IEEE80211_EDMG_BW_CONFIG_11 = 11,
    IEEE80211_EDMG_BW_CONFIG_12 = 12,
    IEEE80211_EDMG_BW_CONFIG_13 = 13,
    IEEE80211_EDMG_BW_CONFIG_14 = 14,
    IEEE80211_EDMG_BW_CONFIG_15 = 15
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_edmg {
   u8 channels ;
   enum ieee80211_edmg_bw_config bw_config ;
};
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_supported_band {
   struct ieee80211_channel *channels ;
   struct ieee80211_rate *bitrates ;
   enum nl80211_band band ;
   int n_channels ;
   int n_bitrates ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_edmg edmg_cap ;
   u16 n_iftype_data ;
   struct ieee80211_sband_iftype_data *iftype_data ;
};
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct key_params {
   u8 *key ;
   u8 *seq ;
   int key_len ;
   int seq_len ;
   u16 vlan_id ;
   u32 cipher ;
   enum nl80211_key_mode mode ;
};
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_chan_def {
   struct ieee80211_channel *chan ;
   enum nl80211_chan_width width ;
   u32 center_freq1 ;
   u32 center_freq2 ;
   struct ieee80211_edmg edmg ;
};
#line 853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_crypto_settings {
   u32 wpa_versions ;
   u32 cipher_group ;
   int n_ciphers_pairwise ;
   u32 ciphers_pairwise[5U] ;
   int n_akm_suites ;
   u32 akm_suites[2U] ;
   bool control_port ;
   __be16 control_port_ethertype ;
   bool control_port_no_encrypt ;
   bool control_port_over_nl80211 ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
   u8 *psk ;
   u8 *sae_pwd ;
   u8 sae_pwd_len ;
};
#line 917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct mac_address {
   u8 addr[6U] ;
};
#line 1885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ssid {
   u8 ssid[32U] ;
   u8 ssid_len ;
};
#line 1899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_scan_info {
   u64 scan_start_tsf ;
   u8 tsf_bssid[6U] ;
   bool aborted ;
};
#line 1934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_scan_request {
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 *ie ;
   size_t ie_len ;
   u16 duration ;
   bool duration_mandatory ;
   u32 flags ;
   u32 rates[4U] ;
   struct wireless_dev *wdev ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   u8 bssid[6U] ;
   struct wiphy *wiphy ;
   unsigned long scan_start ;
   struct cfg80211_scan_info info ;
   bool notified ;
   bool no_cck ;
   struct ieee80211_channel *channels[0U] ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_match_set {
   struct cfg80211_ssid ssid ;
   u8 bssid[6U] ;
   s32 rssi_thold ;
   s32 per_band_rssi_thold[4U] ;
};
#line 2007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_plan {
   u32 interval ;
   u32 iterations ;
};
#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_select_adjust {
   enum nl80211_band band ;
   s8 delta ;
};
#line 2073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_request {
   u64 reqid ;
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 *ie ;
   size_t ie_len ;
   u32 flags ;
   struct cfg80211_match_set *match_sets ;
   int n_match_sets ;
   s32 min_rssi_thold ;
   u32 delay ;
   struct cfg80211_sched_scan_plan *scan_plans ;
   int n_scan_plans ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   bool relative_rssi_set ;
   s8 relative_rssi ;
   struct cfg80211_bss_select_adjust rssi_adjust ;
   struct wiphy *wiphy ;
   struct net_device *dev ;
   unsigned long scan_start ;
   bool report_results ;
   struct callback_head callback_head ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   struct list_head list ;
   struct ieee80211_channel *channels[0U] ;
};
#line 2109 
enum cfg80211_signal_type {
    CFG80211_SIGNAL_TYPE_NONE = 0,
    CFG80211_SIGNAL_TYPE_MBM = 1,
    CFG80211_SIGNAL_TYPE_UNSPEC = 2
};
#line 2432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ibss_params {
   u8 *ssid ;
   u8 *bssid ;
   struct cfg80211_chan_def chandef ;
   u8 *ie ;
   u8 ssid_len ;
   u8 ie_len ;
   u16 beacon_interval ;
   u32 basic_rates ;
   bool channel_fixed ;
   bool privacy ;
   bool control_port ;
   bool control_port_over_nl80211 ;
   bool userspace_handles_dfs ;
   int mcast_rate[4U] ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
union __anonunion_param_733 {
   enum nl80211_band band_pref ;
   struct cfg80211_bss_select_adjust adjust ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_selection {
   enum nl80211_bss_select_attr behaviour ;
   union __anonunion_param_733 param ;
};
#line 2531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_connect_params {
   struct ieee80211_channel *channel ;
   struct ieee80211_channel *channel_hint ;
   u8 *bssid ;
   u8 *bssid_hint ;
   u8 *ssid ;
   size_t ssid_len ;
   enum nl80211_auth_type auth_type ;
   u8 *ie ;
   size_t ie_len ;
   bool privacy ;
   enum nl80211_mfp mfp ;
   struct cfg80211_crypto_settings crypto ;
   u8 *key ;
   u8 key_len ;
   u8 key_idx ;
   u32 flags ;
   int bg_scan_period ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct ieee80211_vht_cap vht_capa ;
   struct ieee80211_vht_cap vht_capa_mask ;
   bool pbss ;
   struct cfg80211_bss_selection bss_select ;
   u8 *prev_bssid ;
   u8 *fils_erp_username ;
   size_t fils_erp_username_len ;
   u8 *fils_erp_realm ;
   size_t fils_erp_realm_len ;
   u16 fils_erp_next_seq_num ;
   u8 *fils_erp_rrk ;
   size_t fils_erp_rrk_len ;
   bool want_1x ;
   struct ieee80211_edmg edmg ;
};
#line 2656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pkt_pattern {
   u8 *mask ;
   u8 *pattern ;
   int pattern_len ;
   int pkt_offset ;
};
#line 2681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan_tcp {
   struct socket *sock ;
   __be32 src ;
   __be32 dst ;
   u16 src_port ;
   u16 dst_port ;
   u8 dst_mac[6U] ;
   int payload_len ;
   u8 *payload ;
   struct nl80211_wowlan_tcp_data_seq payload_seq ;
   u32 data_interval ;
   u32 wake_len ;
   u8 *wake_data ;
   u8 *wake_mask ;
   u32 tokens_size ;
   struct nl80211_wowlan_tcp_data_token payload_tok ;
};
#line 2715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan {
   bool any ;
   bool disconnect ;
   bool magic_pkt ;
   bool gtk_rekey_failure ;
   bool eap_identity_req ;
   bool four_way_handshake ;
   bool rfkill_release ;
   struct cfg80211_pkt_pattern *patterns ;
   struct cfg80211_wowlan_tcp *tcp ;
   int n_patterns ;
   struct cfg80211_sched_scan_request *nd_config ;
};
#line 4043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_limit {
   u16 max ;
   u16 types ;
};
#line 4107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_combination {
   struct ieee80211_iface_limit *limits ;
   u32 num_different_channels ;
   u16 max_interfaces ;
   u8 n_limits ;
   bool beacon_int_infra_match ;
   u8 radar_detect_widths ;
   u8 radar_detect_regions ;
   u32 beacon_int_min_gcd ;
};
#line 4165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_txrx_stypes {
   u16 tx ;
   u16 rx ;
};
#line 4198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_tcp_support {
   struct nl80211_wowlan_tcp_data_token_feature *tok ;
   u32 data_payload_max ;
   u32 data_interval_max ;
   u32 wake_payload_max ;
   bool seq ;
};
#line 4221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_support {
   u32 flags ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
   int max_nd_match_sets ;
   struct wiphy_wowlan_tcp_support *tcp ;
};
#line 4241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_coalesce_support {
   int n_rules ;
   int max_delay ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
};
#line 4312 
struct nla_policy;
#line 4312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_vendor_command {
   struct nl80211_vendor_cmd_info info ;
   u32 flags ;
   int (*doit)(struct wiphy *, struct wireless_dev *, void *, int ) ;
   int (*dumpit)(struct wiphy *, struct wireless_dev *, struct sk_buff *, void *, int , unsigned long *) ;
   struct nla_policy *policy ;
   unsigned int maxattr ;
};
#line 4335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_iftype_ext_capab {
   enum nl80211_iftype iftype ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_ftm_735 {
   u32 preambles ;
   u32 bandwidths ;
   s8 max_bursts_exponent ;
   u8 max_ftms_per_burst ;
   u8 supported : 1 ;
   u8 asap : 1 ;
   u8 non_asap : 1 ;
   u8 request_lci : 1 ;
   u8 request_civicloc : 1 ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_capabilities {
   unsigned int max_peers ;
   u8 report_ap_tsf : 1 ;
   u8 randomize_mac_addr : 1 ;
   struct __anonstruct_ftm_735 ftm ;
};
#line 4552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy {
   u8 perm_addr[6U] ;
   u8 addr_mask[6U] ;
   struct mac_address *addresses ;
   struct ieee80211_txrx_stypes *mgmt_stypes ;
   struct ieee80211_iface_combination *iface_combinations ;
   int n_iface_combinations ;
   u16 software_iftypes ;
   u16 n_addresses ;
   u16 interface_modes ;
   u16 max_acl_mac_addrs ;
   u32 flags ;
   u32 regulatory_flags ;
   u32 features ;
   u8 ext_features[6U] ;
   u32 ap_sme_capa ;
   enum cfg80211_signal_type signal_type ;
   int bss_priv_size ;
   u8 max_scan_ssids ;
   u8 max_sched_scan_reqs ;
   u8 max_sched_scan_ssids ;
   u8 max_match_sets ;
   u16 max_scan_ie_len ;
   u16 max_sched_scan_ie_len ;
   u32 max_sched_scan_plans ;
   u32 max_sched_scan_plan_interval ;
   u32 max_sched_scan_plan_iterations ;
   int n_cipher_suites ;
   u32 *cipher_suites ;
   int n_akm_suites ;
   u32 *akm_suites ;
   u8 retry_short ;
   u8 retry_long ;
   u32 frag_threshold ;
   u32 rts_threshold ;
   u8 coverage_class ;
   char fw_version[32U] ;
   u32 hw_version ;
   struct wiphy_wowlan_support *wowlan ;
   struct cfg80211_wowlan *wowlan_config ;
   u16 max_remain_on_channel_duration ;
   u8 max_num_pmkids ;
   u32 available_antennas_tx ;
   u32 available_antennas_rx ;
   u32 probe_resp_offload ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
   struct wiphy_iftype_ext_capab *iftype_ext_capab ;
   unsigned int num_iftype_ext_capab ;
   void *privid ;
   struct ieee80211_supported_band *bands[4U] ;
   void (*reg_notifier)(struct wiphy *, struct regulatory_request *) ;
   struct ieee80211_regdomain *regd ;
   struct device dev ;
   bool registered ;
   struct dentry *debugfsdir ;
   struct ieee80211_ht_cap *ht_capa_mod_mask ;
   struct ieee80211_vht_cap *vht_capa_mod_mask ;
   struct list_head wdev_list ;
   possible_net_t _net ;
   struct iw_handler_def *wext ;
   struct wiphy_coalesce_support *coalesce ;
   struct wiphy_vendor_command *vendor_commands ;
   struct nl80211_vendor_cmd_info *vendor_events ;
   int n_vendor_commands ;
   int n_vendor_events ;
   u16 max_ap_assoc_sta ;
   u8 max_num_csa_counters ;
   u8 max_adj_channel_rssi_comp ;
   u32 bss_select_support ;
   u8 nan_supported_bands ;
   u32 txq_limit ;
   u32 txq_memory_limit ;
   u32 txq_quantum ;
   u8 support_mbssid : 1 ;
   u8 support_only_he_mbssid : 1 ;
   struct cfg80211_pmsr_capabilities *pmsr_capa ;
   char priv[0U] ;
};
#line 4826 
struct cfg80211_conn;
#line 4827 
struct cfg80211_internal_bss;
#line 4828 
struct cfg80211_cached_keys;
#line 4829 
struct cfg80211_cqm_config;
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_wext_736 {
   struct cfg80211_ibss_params ibss ;
   struct cfg80211_connect_params connect ;
   struct cfg80211_cached_keys *keys ;
   u8 *ie ;
   size_t ie_len ;
   u8 bssid[6U] ;
   u8 prev_bssid[6U] ;
   u8 ssid[32U] ;
   s8 default_key ;
   s8 default_mgmt_key ;
   bool prev_bssid_valid ;
};
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wireless_dev {
   struct wiphy *wiphy ;
   enum nl80211_iftype iftype ;
   struct list_head list ;
   struct net_device *netdev ;
   u32 identifier ;
   struct list_head mgmt_registrations ;
   spinlock_t mgmt_registrations_lock ;
   struct mutex mtx ;
   bool use_4addr ;
   bool is_running ;
   u8 address[6U] ;
   u8 ssid[32U] ;
   u8 ssid_len ;
   u8 mesh_id_len ;
   u8 mesh_id_up_len ;
   struct cfg80211_conn *conn ;
   struct cfg80211_cached_keys *connect_keys ;
   enum ieee80211_bss_type conn_bss_type ;
   u32 conn_owner_nlportid ;
   struct work_struct disconnect_wk ;
   u8 disconnect_bssid[6U] ;
   struct list_head event_list ;
   spinlock_t event_lock ;
   struct cfg80211_internal_bss *current_bss ;
   struct cfg80211_chan_def preset_chandef ;
   struct cfg80211_chan_def chandef ;
   bool ibss_fixed ;
   bool ibss_dfs_possible ;
   bool ps ;
   int ps_timeout ;
   int beacon_interval ;
   u32 ap_unexpected_nlportid ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   bool cac_started ;
   unsigned long cac_start_time ;
   unsigned int cac_time_ms ;
   struct __anonstruct_wext_736 wext ;
   struct cfg80211_cqm_config *cqm_config ;
   struct list_head pmsr_list ;
   spinlock_t pmsr_lock ;
   struct work_struct pmsr_free_wk ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_744 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_743 {
   void *validation_data ;
   struct __anonstruct_744 __anonCompField___anonunion_743_162 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_743 __anonCompField_nla_policy_163 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_818 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_819 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_817 {
   struct __anonstruct_818 __anonCompField___anonunion_817_165 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_819 __anonCompField___anonunion_817_166 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_817 __anonCompField_tcf_result_167 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_821 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_821 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct qdisc_walker {
   int stop ;
   int skip ;
   int count ;
   int (*fn)(struct Qdisc *, unsigned long , struct qdisc_walker *) ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_834 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_834 __anonCompField_bdi_writeback_169 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_835 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_835 __anonCompField_bio_170 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_838 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_839 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_841 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_842 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_840 {
   struct __anonstruct_elv_841 elv ;
   struct __anonstruct_flush_842 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_843 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_838 __anonCompField_request_171 ;
   union __anonunion_839 __anonCompField_request_172 ;
   union __anonunion_840 __anonCompField_request_173 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_843 __anonCompField_request_174 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_862 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_862 __anonCompField_kernel_param_175 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_863 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_863 __anonCompField_bpf_prog_176 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_885 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_885 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_887 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_886 {
   __addrpair skc_addrpair ;
   struct __anonstruct_887 __anonCompField___anonunion_886_178 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_888 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_890 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_889 {
   __portpair skc_portpair ;
   struct __anonstruct_890 __anonCompField___anonunion_889_181 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_891 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_892 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_893 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_894 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_895 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_886 __anonCompField_sock_common_179 ;
   union __anonunion_888 __anonCompField_sock_common_180 ;
   union __anonunion_889 __anonCompField_sock_common_182 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_891 __anonCompField_sock_common_183 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_892 __anonCompField_sock_common_184 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_893 __anonCompField_sock_common_185 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_894 __anonCompField_sock_common_186 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_895 __anonCompField_sock_common_187 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_896 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_897 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_898 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_896 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_897 __anonCompField_sock_188 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_898 __anonCompField_sock_189 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_933 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_933 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_chanctx_conf {
   struct cfg80211_chan_def def ;
   struct cfg80211_chan_def min_def ;
   u8 rx_chains_static ;
   u8 rx_chains_dynamic ;
   bool radar_enabled ;
   u8 drv_priv[0U] ;
};
#line 267 
struct ieee80211_vif;
#line 440 
struct ieee80211_sta;
#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_mu_group_data {
   u8 membership[8U] ;
   u8 position[16U] ;
};
#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ftm_responder_params {
   u8 *lci ;
   u8 *civicloc ;
   size_t lci_len ;
   size_t civicloc_len ;
};
#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_bss_conf {
   u8 *bssid ;
   u8 bss_color ;
   u8 htc_trig_based_pkt_ext ;
   bool multi_sta_back_32bit ;
   bool uora_exists ;
   bool ack_enabled ;
   u8 uora_ocw_range ;
   u16 frame_time_rts_th ;
   bool he_support ;
   bool twt_requester ;
   bool twt_responder ;
   bool assoc ;
   bool ibss_joined ;
   bool ibss_creator ;
   u16 aid ;
   bool use_cts_prot ;
   bool use_short_preamble ;
   bool use_short_slot ;
   bool enable_beacon ;
   u8 dtim_period ;
   u16 beacon_int ;
   u16 assoc_capability ;
   u64 sync_tsf ;
   u32 sync_device_ts ;
   u8 sync_dtim_count ;
   u32 basic_rates ;
   struct ieee80211_rate *beacon_rate ;
   int mcast_rate[4U] ;
   u16 ht_operation_mode ;
   s32 cqm_rssi_thold ;
   u32 cqm_rssi_hyst ;
   s32 cqm_rssi_low ;
   s32 cqm_rssi_high ;
   struct cfg80211_chan_def chandef ;
   struct ieee80211_mu_group_data mu_group ;
   __be32 arp_addr_list[4U] ;
   int arp_addr_cnt ;
   bool qos ;
   bool idle ;
   bool ps ;
   u8 ssid[32U] ;
   size_t ssid_len ;
   bool hidden_ssid ;
   int txpower ;
   enum nl80211_tx_power_setting txpower_type ;
   struct ieee80211_p2p_noa_attr p2p_noa_attr ;
   bool allow_p2p_go_ps ;
   u16 max_idle_period ;
   bool protected_keep_alive ;
   bool ftm_responder ;
   struct ieee80211_ftm_responder_params *ftmr_params ;
   bool nontransmitted ;
   u8 transmitter_bssid[6U] ;
   u8 bssid_index ;
   u8 bssid_indicator ;
   bool ema_ap ;
   u8 profile_periodicity ;
   struct ieee80211_he_operation he_operation ;
   struct ieee80211_he_obss_pd he_obss_pd ;
};
#line 1004 
struct ieee80211_key_conf;
#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_scan_ies {
   u8 *ies[4U] ;
   size_t len[4U] ;
   u8 *common_ies ;
   size_t common_ie_len ;
};
#line 1430 
enum ieee80211_smps_mode {
    IEEE80211_SMPS_AUTOMATIC = 0,
    IEEE80211_SMPS_OFF = 1,
    IEEE80211_SMPS_STATIC = 2,
    IEEE80211_SMPS_DYNAMIC = 3,
    IEEE80211_SMPS_NUM_MODES = 4
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_conf {
   u32 flags ;
   int power_level ;
   int dynamic_ps_timeout ;
   u16 listen_interval ;
   u8 ps_dtim_period ;
   u8 long_frame_max_tx_count ;
   u8 short_frame_max_tx_count ;
   struct cfg80211_chan_def chandef ;
   bool radar_enabled ;
   enum ieee80211_smps_mode smps_mode ;
};
#line 1556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_channel_switch {
   u64 timestamp ;
   u32 device_timestamp ;
   bool block_tx ;
   struct cfg80211_chan_def chandef ;
   u8 count ;
   u32 delay ;
};
#line 1627 
struct ieee80211_txq;
#line 1627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_vif {
   enum nl80211_iftype type ;
   struct ieee80211_bss_conf bss_conf ;
   u8 addr[6U] ;
   bool p2p ;
   bool csa_active ;
   bool mu_mimo_owner ;
   u8 cab_queue ;
   u8 hw_queue[4U] ;
   struct ieee80211_txq *txq ;
   struct ieee80211_chanctx_conf *chanctx_conf ;
   u32 driver_flags ;
   struct dentry *debugfs_dir ;
   unsigned int probe_req_reg ;
   bool txqs_stopped[4U] ;
   u8 drv_priv[0U] ;
};
#line 1772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_key_conf {
   atomic64_t tx_pn ;
   u32 cipher ;
   u8 icv_len ;
   u8 iv_len ;
   u8 hw_key_idx ;
   s8 keyidx ;
   u16 flags ;
   u8 keylen ;
   u8 key[0U] ;
};
#line 1846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_cipher_scheme {
   u32 cipher ;
   u16 iftype ;
   u8 hdr_len ;
   u8 pn_len ;
   u8 pn_off ;
   u8 key_idx_off ;
   u8 key_idx_mask ;
   u8 key_idx_shift ;
   u8 mic_len ;
};
#line 1857 
enum set_key_cmd {
    SET_KEY = 0,
    DISABLE_KEY = 1
};
#line 1870 
enum ieee80211_sta_rx_bandwidth {
    IEEE80211_STA_RX_BW_20 = 0,
    IEEE80211_STA_RX_BW_40 = 1,
    IEEE80211_STA_RX_BW_80 = 2,
    IEEE80211_STA_RX_BW_160 = 3
};
#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_rate_1020 {
   s8 idx ;
   u8 count ;
   u8 count_cts ;
   u8 count_rts ;
   u16 flags ;
};
#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta_rates {
   struct callback_head callback_head ;
   struct __anonstruct_rate_1020 rate[4U] ;
};
#line 1939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta_txpwr {
   s16 power ;
   enum nl80211_tx_power_setting type ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta {
   u32 supp_rates[4U] ;
   u8 addr[6U] ;
   u16 aid ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_sta_he_cap he_cap ;
   u16 max_rx_aggregation_subframes ;
   bool wme ;
   u8 uapsd_queues ;
   u8 max_sp ;
   u8 rx_nss ;
   enum ieee80211_sta_rx_bandwidth bandwidth ;
   enum ieee80211_smps_mode smps_mode ;
   struct ieee80211_sta_rates *rates ;
   bool tdls ;
   bool tdls_initiator ;
   bool mfp ;
   u8 max_amsdu_subframes ;
   u16 max_amsdu_len ;
   bool support_p2p_ps ;
   u16 max_rc_amsdu_len ;
   u16 max_tid_amsdu_len[16U] ;
   struct ieee80211_sta_txpwr txpwr ;
   struct ieee80211_txq *txq[17U] ;
   u8 drv_priv[0U] ;
};
#line 2074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_txq {
   struct ieee80211_vif *vif ;
   struct ieee80211_sta *sta ;
   u8 tid ;
   u8 ac ;
   u8 drv_priv[0U] ;
};
#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_radiotap_timestamp_1021 {
   int units_pos ;
   s16 accuracy ;
};
#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_hw {
   struct ieee80211_conf conf ;
   struct wiphy *wiphy ;
   char *rate_control_algorithm ;
   void *priv ;
   unsigned long flags[1U] ;
   unsigned int extra_tx_headroom ;
   unsigned int extra_beacon_tailroom ;
   int vif_data_size ;
   int sta_data_size ;
   int chanctx_data_size ;
   int txq_data_size ;
   u16 queues ;
   u16 max_listen_interval ;
   s8 max_signal ;
   u8 max_rates ;
   u8 max_report_rates ;
   u8 max_rate_tries ;
   u16 max_rx_aggregation_subframes ;
   u16 max_tx_aggregation_subframes ;
   u8 max_tx_fragments ;
   u8 offchannel_tx_hw_queue ;
   u8 radiotap_mcs_details ;
   u16 radiotap_vht_details ;
   struct __anonstruct_radiotap_timestamp_1021 radiotap_timestamp ;
   netdev_features_t netdev_features ;
   u8 uapsd_queues ;
   u8 uapsd_max_sp_len ;
   u8 n_cipher_schemes ;
   struct ieee80211_cipher_scheme *cipher_schemes ;
   u8 max_nan_de_entries ;
   u8 tx_sk_pacing_shift ;
   u8 weight_multiplier ;
   u32 max_mtu ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_sg_settings {
   u32 params[67U] ;
   u8 state ;
} __attribute__((__packed__));
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_rx_settings {
   u32 rx_msdu_life_time ;
   u32 packet_detection_threshold ;
   u16 ps_poll_timeout ;
   u16 upsd_timeout ;
   u16 rts_threshold ;
   u16 rx_cca_threshold ;
   u16 irq_blk_threshold ;
   u16 irq_pkt_threshold ;
   u16 irq_timeout ;
   u8 queue_type ;
} __attribute__((__packed__));
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_tx_rate_class {
   u32 enabled_rates ;
   u8 short_retry_limit ;
   u8 long_retry_limit ;
   u8 aflags ;
} __attribute__((__packed__));
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_tx_ac_category {
   u8 ac ;
   u8 cw_min ;
   u16 cw_max ;
   u8 aifsn ;
   u16 tx_op_limit ;
} __attribute__((__packed__));
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_tx_tid {
   u8 queue_id ;
   u8 channel_type ;
   u8 tsid ;
   u8 ps_scheme ;
   u8 ack_policy ;
   u32 apsd_conf[2U] ;
} __attribute__((__packed__));
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_tx_settings {
   u8 tx_energy_detection ;
   struct conf_tx_rate_class sta_rc_conf ;
   u8 ac_conf_count ;
   struct conf_tx_ac_category ac_conf[4U] ;
   u8 max_tx_retries ;
   u16 ap_aging_period ;
   u8 tid_conf_count ;
   struct conf_tx_tid tid_conf[8U] ;
   u16 frag_threshold ;
   u16 tx_compl_timeout ;
   u16 tx_compl_threshold ;
   u32 basic_rate ;
   u32 basic_rate_5 ;
   u8 tmpl_short_retry_limit ;
   u8 tmpl_long_retry_limit ;
   u32 tx_watchdog_timeout ;
   u8 slow_link_thold ;
   u8 fast_link_thold ;
} __attribute__((__packed__));
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_bcn_filt_rule {
   u8 ie ;
   u8 rule ;
   u8 oui[3U] ;
   u8 type ;
   u8 version[2U] ;
} __attribute__((__packed__));
#line 545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_sig_weights {
   u8 rssi_bcn_avg_weight ;
   u8 rssi_pkt_avg_weight ;
   u8 snr_bcn_avg_weight ;
   u8 snr_pkt_avg_weight ;
} __attribute__((__packed__));
#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_conn_settings {
   u8 wake_up_event ;
   u8 listen_interval ;
   u8 suspend_wake_up_event ;
   u8 suspend_listen_interval ;
   u8 bcn_filt_mode ;
   u8 bcn_filt_ie_count ;
   struct conf_bcn_filt_rule bcn_filt_ie[32U] ;
   u32 synch_fail_thold ;
   u32 bss_lose_timeout ;
   u32 beacon_rx_timeout ;
   u32 broadcast_timeout ;
   u8 rx_broadcast_in_ps ;
   u8 ps_poll_threshold ;
   struct conf_sig_weights sig_weights ;
   u8 bet_enable ;
   u8 bet_max_consecutive ;
   u8 psm_entry_retries ;
   u8 psm_exit_retries ;
   u8 psm_entry_nullfunc_retries ;
   u16 dynamic_ps_timeout ;
   u8 forced_ps ;
   u32 keep_alive_interval ;
   u8 max_listen_interval ;
   u8 sta_sleep_auth ;
   u8 suspend_rx_ba_activity ;
} __attribute__((__packed__));
#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_itrim_settings {
   u8 enable ;
   u32 timeout ;
} __attribute__((__packed__));
#line 795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_pm_config_settings {
   u32 host_clk_settling_time ;
   u8 host_fast_wakeup_support ;
} __attribute__((__packed__));
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_roam_trigger_settings {
   u16 trigger_pacing ;
   u8 avg_weight_rssi_beacon ;
   u8 avg_weight_rssi_data ;
   u8 avg_weight_snr_beacon ;
   u8 avg_weight_snr_data ;
} __attribute__((__packed__));
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_scan_settings {
   u32 min_dwell_time_active ;
   u32 max_dwell_time_active ;
   u32 min_dwell_time_active_long ;
   u32 max_dwell_time_active_long ;
   u32 dwell_time_passive ;
   u32 dwell_time_dfs ;
   u16 num_probe_reqs ;
   u32 split_scan_timeout ;
} __attribute__((__packed__));
#line 908  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_sched_scan_settings {
   u32 base_dwell_time ;
   u32 max_dwell_time_delta ;
   u32 dwell_time_delta_per_probe ;
   u32 dwell_time_delta_per_probe_5 ;
   u32 dwell_time_passive ;
   u32 dwell_time_dfs ;
   u8 num_probe_reqs ;
   s8 rssi_threshold ;
   s8 snr_threshold ;
   u8 num_short_intervals ;
   u16 long_interval ;
} __attribute__((__packed__));
#line 955  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_ht_setting {
   u8 rx_ba_win_size ;
   u8 tx_ba_win_size ;
   u16 inactivity_timeout ;
   u8 tx_ba_tid_bitmap ;
} __attribute__((__packed__));
#line 964  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_memory_settings {
   u8 num_stations ;
   u8 ssid_profiles ;
   u8 rx_block_num ;
   u8 tx_min_block_num ;
   u8 dynamic_memory ;
   u8 min_req_tx_blocks ;
   u8 min_req_rx_blocks ;
   u8 tx_min ;
} __attribute__((__packed__));
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_fm_coex {
   u8 enable ;
   u8 swallow_period ;
   u8 n_divider_fref_set_1 ;
   u8 n_divider_fref_set_2 ;
   u16 m_divider_fref_set_1 ;
   u16 m_divider_fref_set_2 ;
   u32 coex_pll_stabilization_time ;
   u16 ldo_stabilization_time ;
   u8 fm_disturbed_band_margin ;
   u8 swallow_clk_diff ;
} __attribute__((__packed__));
#line 1017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_rx_streaming_settings {
   u32 duration ;
   u8 queues ;
   u8 interval ;
   u8 always ;
} __attribute__((__packed__));
#line 1049  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_fwlog {
   u8 mode ;
   u8 mem_blocks ;
   u8 severity ;
   u8 timestamp ;
   u8 output ;
   u8 threshold ;
} __attribute__((__packed__));
#line 1074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_rate_policy_settings {
   u16 rate_retry_score ;
   u16 per_add ;
   u16 per_th1 ;
   u16 per_th2 ;
   u16 max_per ;
   u8 inverse_curiosity_factor ;
   u8 tx_fail_low_th ;
   u8 tx_fail_high_th ;
   u8 per_alpha_shift ;
   u8 per_add_shift ;
   u8 per_beta1_shift ;
   u8 per_beta2_shift ;
   u8 rate_check_up ;
   u8 rate_check_down ;
   u8 rate_retry_policy[13U] ;
} __attribute__((__packed__));
#line 1092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_hangover_settings {
   u32 recover_time ;
   u8 hangover_period ;
   u8 dynamic_mode ;
   u8 early_termination_mode ;
   u8 max_period ;
   u8 min_period ;
   u8 increase_delta ;
   u8 decrease_delta ;
   u8 quiet_time ;
   u8 increase_time ;
   u8 window_size ;
} __attribute__((__packed__));
#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_recovery_settings {
   u8 bug_on_recovery ;
   u8 no_recovery ;
} __attribute__((__packed__));
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct wlcore_conf {
   struct conf_sg_settings sg ;
   struct conf_rx_settings rx ;
   struct conf_tx_settings tx ;
   struct conf_conn_settings conn ;
   struct conf_itrim_settings itrim ;
   struct conf_pm_config_settings pm_config ;
   struct conf_roam_trigger_settings roam_trigger ;
   struct conf_scan_settings scan ;
   struct conf_sched_scan_settings sched_scan ;
   struct conf_ht_setting ht ;
   struct conf_memory_settings mem ;
   struct conf_fm_coex fm_coex ;
   struct conf_rx_streaming_settings rx_streaming ;
   struct conf_fwlog fwlog ;
   struct conf_rate_policy_settings rate ;
   struct conf_hangover_settings hangover ;
   struct conf_recovery_settings recovery ;
} __attribute__((__packed__));
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
enum wlcore_state {
    WLCORE_STATE_OFF = 0,
    WLCORE_STATE_RESTARTING = 1,
    WLCORE_STATE_ON = 2
};
#line 35 
enum wl12xx_fw_type {
    WL12XX_FW_TYPE_NONE = 0,
    WL12XX_FW_TYPE_NORMAL = 1,
    WL12XX_FW_TYPE_MULTI = 2,
    WL12XX_FW_TYPE_PLT = 3
};
#line 42 
struct wl1271;
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct wl1271_chip {
   u32 id ;
   char fw_ver_str[32U] ;
   unsigned int fw_ver[5U] ;
   char phy_fw_ver_str[32U] ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct __anonstruct_counters_1027 {
   u8 *tx_released_pkts ;
   u8 *tx_lnk_free_pkts ;
   u8 tx_voice_released_blks ;
   u8 tx_last_rate ;
   u8 tx_last_rate_mbps ;
   u8 hlid ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct wl_fw_status {
   u32 intr ;
   u8 fw_rx_counter ;
   u8 drv_rx_counter ;
   u8 tx_results_counter ;
   __le32 *rx_pkt_descs ;
   u32 fw_localtime ;
   u32 link_ps_bitmap ;
   u32 link_fast_bitmap ;
   u32 total_released_blks ;
   u32 tx_total ;
   struct __anonstruct_counters_1027 counters ;
   u32 log_start_addr ;
   void *priv ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct wl1271_scan {
   struct cfg80211_scan_request *req ;
   unsigned long scanned_ch[1U] ;
   bool failed ;
   u8 state ;
   u8 ssid[33U] ;
   size_t ssid_len ;
};
#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct wl1271_if_operations {
   int (*read)(struct device *, int , void *, size_t , bool ) ;
   int (*write)(struct device *, int , void *, size_t , bool ) ;
   void (*reset)(struct device *) ;
   void (*init)(struct device *) ;
   int (*power)(struct device *, bool ) ;
   void (*set_block_size)(struct device *, unsigned int ) ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct wl1271_ap_key {
   u8 id ;
   u8 key_type ;
   u8 key_size ;
   u8 key[32U] ;
   u8 hlid ;
   u32 tx_seq_32 ;
   u16 tx_seq_16 ;
};
#line 251 
struct wl12xx_vif;
#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct wl1271_link {
   struct sk_buff_head tx_queue[4U] ;
   u8 allocated_pkts ;
   u8 prev_freed_pkts ;
   u8 addr[6U] ;
   u8 ba_bitmap ;
   u8 fw_rate_idx ;
   u8 fw_rate_mbps ;
   struct wl12xx_vif *wlvif ;
   u64 total_freed_pkts ;
};
#line 289 
enum plt_mode {
    PLT_OFF = 0,
    PLT_ON = 1,
    PLT_FEM_DETECT = 2,
    PLT_CHIP_AWAKE = 3
};
#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct __anonstruct_sta_1029 {
   u8 hlid ;
   u8 basic_rate_idx ;
   u8 ap_rate_idx ;
   u8 p2p_rate_idx ;
   u8 klv_template_id ;
   bool qos ;
   enum nl80211_channel_type role_chan_type ;
};
#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct __anonstruct_ap_1030 {
   u8 global_hlid ;
   u8 bcast_hlid ;
   unsigned long sta_hlid_map[1U] ;
   struct wl1271_ap_key *recorded_keys[14U] ;
   u8 mgmt_rate_idx ;
   u8 bcast_rate_idx ;
   u8 ucast_rate_idx[4U] ;
};
#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
union __anonunion_1028 {
   struct __anonstruct_sta_1029 sta ;
   struct __anonstruct_ap_1030 ap ;
};
#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct __anonstruct_1031 {
   u8 persistent[0U] ;
};
#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct wl12xx_vif {
   struct wl1271 *wl ;
   struct list_head list ;
   unsigned long flags ;
   u8 bss_type ;
   u8 p2p ;
   u8 role_id ;
   u8 dev_role_id ;
   u8 dev_hlid ;
   union __anonunion_1028 __anonCompField_wl12xx_vif_197 ;
   int last_tx_hlid ;
   int tx_queue_count[4U] ;
   unsigned long links_map[1U] ;
   u8 ssid[33U] ;
   u8 ssid_len ;
   enum nl80211_band band ;
   int channel ;
   enum nl80211_channel_type channel_type ;
   u32 bitrate_masks[2U] ;
   u32 basic_rate_set ;
   u32 basic_rate ;
   u32 rate_set ;
   struct sk_buff *probereq ;
   u32 beacon_int ;
   u32 default_key ;
   u16 aid ;
   u8 psm_entry_retry ;
   int power_level ;
   int rssi_thold ;
   int last_rssi_event ;
   u8 encryption_type ;
   __be32 ip_addr ;
   bool ba_support ;
   bool ba_allowed ;
   bool wmm_enabled ;
   bool radar_enabled ;
   struct work_struct rx_streaming_enable_work ;
   struct work_struct rx_streaming_disable_work ;
   struct timer_list rx_streaming_timer ;
   struct delayed_work channel_switch_work ;
   struct delayed_work connection_loss_work ;
   int inconn_count ;
   int hw_queue_base ;
   bool ap_pending_auth_reply ;
   unsigned long pending_auth_reply_time ;
   struct delayed_work pending_auth_complete_work ;
   enum ieee80211_sta_rx_bandwidth rc_update_bw ;
   struct ieee80211_sta_ht_cap rc_ht_cap ;
   struct work_struct rc_update_work ;
   u64 total_freed_pkts ;
   struct __anonstruct_1031 __anonCompField_wl12xx_vif_198 ;
};
#line 549 
enum wlcore_wait_event {
    WLCORE_EVENT_ROLE_STOP_COMPLETE = 0,
    WLCORE_EVENT_PEER_REMOVE_COMPLETE = 1,
    WLCORE_EVENT_DFS_CONFIG_COMPLETE = 2
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/boot.h"
struct wl1271_static_data {
   u8 mac_address[6U] ;
   u8 padding[2U] ;
   u8 fw_version[20U] ;
   u32 hw_version ;
   u8 tx_power_table[8U][4U] ;
   u8 priv[0U] ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore.h"
struct wlcore_ops {
   int (*setup)(struct wl1271 *) ;
   int (*identify_chip)(struct wl1271 *) ;
   int (*identify_fw)(struct wl1271 *) ;
   int (*boot)(struct wl1271 *) ;
   int (*plt_init)(struct wl1271 *) ;
   int (*trigger_cmd)(struct wl1271 *, int , void *, size_t ) ;
   int (*ack_event)(struct wl1271 *) ;
   int (*wait_for_event)(struct wl1271 *, enum wlcore_wait_event , bool *) ;
   int (*process_mailbox_events)(struct wl1271 *) ;
   u32 (*calc_tx_blocks)(struct wl1271 *, u32 , u32 ) ;
   void (*set_tx_desc_blocks)(struct wl1271 *, struct wl1271_tx_hw_descr *, u32 , u32 ) ;
   void (*set_tx_desc_data_len)(struct wl1271 *, struct wl1271_tx_hw_descr *, struct sk_buff *) ;
   int (*get_rx_buf_align)(struct wl1271 *, u32 ) ;
   int (*prepare_read)(struct wl1271 *, u32 , u32 ) ;
   u32 (*get_rx_packet_len)(struct wl1271 *, void *, u32 ) ;
   int (*tx_delayed_compl)(struct wl1271 *) ;
   void (*tx_immediate_compl)(struct wl1271 *) ;
   int (*hw_init)(struct wl1271 *) ;
   int (*init_vif)(struct wl1271 *, struct wl12xx_vif *) ;
   void (*convert_fw_status)(struct wl1271 *, void *, struct wl_fw_status *) ;
   u32 (*sta_get_ap_rate_mask)(struct wl1271 *, struct wl12xx_vif *) ;
   int (*get_pg_ver)(struct wl1271 *, s8 *) ;
   int (*get_mac)(struct wl1271 *) ;
   void (*set_tx_desc_csum)(struct wl1271 *, struct wl1271_tx_hw_descr *, struct sk_buff *) ;
   void (*set_rx_csum)(struct wl1271 *, struct wl1271_rx_descriptor *, struct sk_buff *) ;
   u32 (*ap_get_mimo_wide_rate_mask)(struct wl1271 *, struct wl12xx_vif *) ;
   int (*debugfs_init)(struct wl1271 *, struct dentry *) ;
   int (*handle_static_data)(struct wl1271 *, struct wl1271_static_data *) ;
   int (*scan_start)(struct wl1271 *, struct wl12xx_vif *, struct cfg80211_scan_request *) ;
   int (*scan_stop)(struct wl1271 *, struct wl12xx_vif *) ;
   int (*sched_scan_start)(struct wl1271 *, struct wl12xx_vif *, struct cfg80211_sched_scan_request *, struct ieee80211_scan_ies *) ;
   void (*sched_scan_stop)(struct wl1271 *, struct wl12xx_vif *) ;
   int (*get_spare_blocks)(struct wl1271 *, bool ) ;
   int (*set_key)(struct wl1271 *, enum set_key_cmd , struct ieee80211_vif *, struct ieee80211_sta *, struct ieee80211_key_conf *) ;
   int (*channel_switch)(struct wl1271 *, struct wl12xx_vif *, struct ieee80211_channel_switch *) ;
   u32 (*pre_pkt_send)(struct wl1271 *, u32 , u32 ) ;
   void (*sta_rc_update)(struct wl1271 *, struct wl12xx_vif *) ;
   int (*set_peer_cap)(struct wl1271 *, struct ieee80211_sta_ht_cap *, bool , u32 , u8 ) ;
   u32 (*convert_hwaddr)(struct wl1271 *, u32 ) ;
   bool (*lnk_high_prio)(struct wl1271 *, u8 , struct wl1271_link *) ;
   bool (*lnk_low_prio)(struct wl1271 *, u8 , struct wl1271_link *) ;
   int (*interrupt_notify)(struct wl1271 *, bool ) ;
   int (*rx_ba_filter)(struct wl1271 *, bool ) ;
   int (*ap_sleep)(struct wl1271 *) ;
   int (*smart_config_start)(struct wl1271 *, u32 ) ;
   int (*smart_config_stop)(struct wl1271 *) ;
   int (*smart_config_set_group_key)(struct wl1271 *, u16 , u8 , u8 *) ;
   int (*set_cac)(struct wl1271 *, struct wl12xx_vif *, bool ) ;
   int (*dfs_master_restart)(struct wl1271 *, struct wl12xx_vif *) ;
};
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore.h"
struct wlcore_partition {
   u32 size ;
   u32 start ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore.h"
struct wlcore_partition_set {
   struct wlcore_partition mem ;
   struct wlcore_partition reg ;
   struct wlcore_partition mem2 ;
   struct wlcore_partition mem3 ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore.h"
struct wl1271_stats {
   void *fw_stats ;
   unsigned long fw_stats_update ;
   size_t fw_stats_len ;
   unsigned int retry_count ;
   unsigned int excessive_retries ;
};
#line 175 
struct wl1271_acx_mem_map;
#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore.h"
struct wl1271 {
   bool initialized ;
   struct ieee80211_hw *hw ;
   bool mac80211_registered ;
   struct device *dev ;
   struct platform_device *pdev ;
   void *if_priv ;
   struct wl1271_if_operations *if_ops ;
   int irq ;
   int wakeirq ;
   int irq_flags ;
   int wakeirq_flags ;
   spinlock_t wl_lock ;
   enum wlcore_state state ;
   enum wl12xx_fw_type fw_type ;
   bool plt ;
   enum plt_mode plt_mode ;
   u8 fem_manuf ;
   u8 last_vif_count ;
   struct mutex mutex ;
   unsigned long flags ;
   struct wlcore_partition_set curr_part ;
   struct wl1271_chip chip ;
   int cmd_box_addr ;
   u8 *fw ;
   size_t fw_len ;
   void *nvs ;
   size_t nvs_len ;
   s8 hw_pg_ver ;
   u32 fuse_oui_addr ;
   u32 fuse_nic_addr ;
   struct mac_address addresses[3U] ;
   int channel ;
   u8 system_hlid ;
   unsigned long links_map[1U] ;
   unsigned long roles_map[1U] ;
   unsigned long roc_map[1U] ;
   unsigned long rate_policies_map[1U] ;
   unsigned long klv_templates_map[1U] ;
   u8 session_ids[16U] ;
   struct list_head wlvif_list ;
   u8 sta_count ;
   u8 ap_count ;
   struct wl1271_acx_mem_map *target_mem_map ;
   u32 tx_blocks_freed ;
   u32 tx_blocks_available ;
   u32 tx_allocated_blocks ;
   u32 tx_results_count ;
   u32 tx_pkts_freed[4U] ;
   u32 tx_allocated_pkts[4U] ;
   u32 tx_packets_count ;
   s64 time_offset ;
   int tx_queue_count[4U] ;
   unsigned long queue_stop_reasons[12U] ;
   struct sk_buff_head deferred_rx_queue ;
   struct sk_buff_head deferred_tx_queue ;
   struct work_struct tx_work ;
   struct workqueue_struct *freezable_wq ;
   unsigned long tx_frames_map[1U] ;
   struct sk_buff *tx_frames[32U] ;
   int tx_frames_cnt ;
   u32 rx_counter ;
   u8 *aggr_buf ;
   u32 aggr_buf_size ;
   struct sk_buff *dummy_packet ;
   struct work_struct netstack_work ;
   u8 *fwlog ;
   ssize_t fwlog_size ;
   u32 fwlog_end ;
   u32 fw_mem_block_size ;
   struct work_struct recovery_work ;
   bool watchdog_recovery ;
   unsigned long reg_ch_conf_last[1U] ;
   unsigned long reg_ch_conf_pending[1U] ;
   void *mbox ;
   u32 event_mask ;
   u32 ap_event_mask ;
   u32 mbox_size ;
   u32 mbox_ptr[2U] ;
   struct wl12xx_vif *scan_wlvif ;
   struct wl1271_scan scan ;
   struct delayed_work scan_complete_work ;
   struct ieee80211_vif *roc_vif ;
   struct delayed_work roc_complete_work ;
   struct wl12xx_vif *sched_vif ;
   enum nl80211_band band ;
   struct completion *elp_compl ;
   int power_level ;
   struct wl1271_stats stats ;
   __le32 *buffer_32 ;
   u32 buffer_cmd ;
   u32 buffer_busyword[1U] ;
   void *raw_fw_status ;
   struct wl_fw_status *fw_status ;
   struct wl1271_tx_hw_res_if *tx_res_if ;
   struct wlcore_conf conf ;
   bool sg_enabled ;
   bool enable_11a ;
   int recovery_count ;
   s8 noise ;
   struct ieee80211_supported_band bands[2U] ;
   bool wow_enabled ;
   bool irq_wake_enabled ;
   struct wl1271_link links[16U] ;
   int active_link_count ;
   unsigned long fw_fast_lnk_map ;
   unsigned long ap_fw_ps_map ;
   unsigned long ap_ps_map ;
   unsigned int quirks ;
   int ba_rx_session_count ;
   int ba_rx_session_count_max ;
   int active_sta_count ;
   bool ofdm_only_ap ;
   struct wl12xx_vif *last_wlvif ;
   struct delayed_work tx_watchdog_work ;
   struct wlcore_ops *ops ;
   struct wlcore_partition_set *ptable ;
   int *rtable ;
   char *plt_fw_name ;
   char *sr_fw_name ;
   char *mr_fw_name ;
   u8 scan_templ_id_2_4 ;
   u8 scan_templ_id_5 ;
   u8 sched_scan_templ_id_2_4 ;
   u8 sched_scan_templ_id_5 ;
   u8 max_channels_5 ;
   void *priv ;
   u32 num_tx_desc ;
   u32 num_rx_desc ;
   u8 num_links ;
   u8 max_ap_stations ;
   u8 **band_rate_to_idx ;
   u8 hw_tx_rate_tbl_size ;
   u8 hw_min_ht_rate ;
   struct ieee80211_sta_ht_cap ht_cap[2U] ;
   enum nl80211_dfs_regions dfs_region ;
   bool radar_debug_mode ;
   size_t fw_status_len ;
   size_t fw_status_priv_len ;
   unsigned long rx_filter_enabled[1U] ;
   size_t static_data_priv_len ;
   enum nl80211_channel_type channel_type ;
   struct mutex flush_mutex ;
   int sleep_auth ;
   int num_mac_addr ;
   unsigned int min_sr_fw_ver[5U] ;
   unsigned int min_mr_fw_ver[5U] ;
   struct completion nvs_loading_complete ;
   struct ieee80211_iface_combination *iface_combinations ;
   u8 n_iface_combinations ;
   u32 dynamic_fw_traces ;
   u8 zone_master_mac_addr[6U] ;
};
#line 541 
struct acx_header;
#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/cmd.h"
struct wl1271_cmd_header {
   __le16 id ;
   __le16 status ;
   u8 data[0U] ;
} __attribute__((__packed__));
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/acx.h"
struct acx_header {
   struct wl1271_cmd_header cmd ;
   __le16 id ;
   __le16 len ;
} __attribute__((__packed__));
#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/acx.h"
struct wl1271_acx_mem_map {
   struct acx_header header ;
   __le32 code_start ;
   __le32 code_end ;
   __le32 wep_defkey_start ;
   __le32 wep_defkey_end ;
   __le32 sta_table_start ;
   __le32 sta_table_end ;
   __le32 packet_template_start ;
   __le32 packet_template_end ;
   __le32 tx_result ;
   __le32 tx_result_queue_start ;
   __le32 queue_memory_start ;
   __le32 queue_memory_end ;
   __le32 packet_memory_pool_start ;
   __le32 packet_memory_pool_end ;
   __le32 debug_buffer1_start ;
   __le32 debug_buffer1_end ;
   __le32 debug_buffer2_start ;
   __le32 debug_buffer2_end ;
   __le32 num_tx_mem_blocks ;
   __le32 num_rx_mem_blocks ;
   u8 *tx_cbuf ;
   u8 *rx_cbuf ;
   __le32 rx_ctrl ;
   __le32 tx_ctrl ;
} __attribute__((__packed__));
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/acx.h"
struct wl1271_acx_host_config_bitmap {
   struct acx_header header ;
   __le32 host_cfg_bitmap ;
} __attribute__((__packed__));
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_1045 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_1045 key ;
} __attribute__((__aligned__(8)));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/ini.h"
struct wl1271_ini_general_params {
   u8 ref_clock ;
   u8 settling_time ;
   u8 clk_valid_on_wakeup ;
   u8 dc2dc_mode ;
   u8 dual_mode_select ;
   u8 tx_bip_fem_auto_detect ;
   u8 tx_bip_fem_manufacturer ;
   u8 general_settings ;
   u8 sr_state ;
   u8 srf1[16U] ;
   u8 srf2[16U] ;
   u8 srf3[16U] ;
} __attribute__((__packed__));
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/ini.h"
struct wl128x_ini_general_params {
   u8 ref_clock ;
   u8 settling_time ;
   u8 clk_valid_on_wakeup ;
   u8 tcxo_ref_clock ;
   u8 tcxo_settling_time ;
   u8 tcxo_valid_on_wakeup ;
   u8 tcxo_ldo_voltage ;
   u8 xtal_itrim_val ;
   u8 platform_conf ;
   u8 dual_mode_select ;
   u8 tx_bip_fem_auto_detect ;
   u8 tx_bip_fem_manufacturer ;
   u8 general_settings[4U] ;
   u8 sr_state ;
   u8 srf1[16U] ;
   u8 srf2[16U] ;
   u8 srf3[16U] ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/ini.h"
struct wl1271_ini_band_params_2 {
   u8 rx_trace_insertion_loss ;
   u8 tx_trace_loss ;
   u8 rx_rssi_process_compens[15U] ;
} __attribute__((__packed__));
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/ini.h"
struct wl128x_ini_band_params_2 {
   u8 rx_trace_insertion_loss ;
   u8 tx_trace_loss[14U] ;
   u8 rx_rssi_process_compens[15U] ;
} __attribute__((__packed__));
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/ini.h"
struct wl1271_ini_fem_params_2 {
   __le16 tx_bip_ref_pd_voltage ;
   u8 tx_bip_ref_power ;
   u8 tx_bip_ref_offset ;
   u8 tx_per_rate_pwr_limits_normal[6U] ;
   u8 tx_per_rate_pwr_limits_degraded[6U] ;
   u8 tx_per_rate_pwr_limits_extreme[6U] ;
   u8 tx_per_chan_pwr_limits_11b[14U] ;
   u8 tx_per_chan_pwr_limits_ofdm[14U] ;
   u8 tx_pd_vs_rate_offsets[6U] ;
   u8 tx_ibias[6U] ;
   u8 rx_fem_insertion_loss ;
   u8 degraded_low_to_normal_thr ;
   u8 normal_to_degraded_high_thr ;
} __attribute__((__packed__));
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/ini.h"
struct wl128x_ini_fem_params_2 {
   __le16 tx_bip_ref_pd_voltage ;
   u8 tx_bip_ref_power ;
   u8 tx_bip_ref_offset ;
   u8 tx_per_rate_pwr_limits_normal[7U] ;
   u8 tx_per_rate_pwr_limits_degraded[7U] ;
   u8 tx_per_rate_pwr_limits_extreme[7U] ;
   u8 tx_per_chan_pwr_limits_11b[14U] ;
   u8 tx_per_chan_pwr_limits_ofdm[14U] ;
   u8 tx_pd_vs_rate_offsets[7U] ;
   u8 tx_ibias[8U] ;
   u8 tx_pd_vs_chan_offsets[14U] ;
   u8 tx_pd_vs_temperature[2U] ;
   u8 rx_fem_insertion_loss ;
   u8 degraded_low_to_normal_thr ;
   u8 normal_to_degraded_high_thr ;
} __attribute__((__packed__));
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/ini.h"
struct wl1271_ini_band_params_5 {
   u8 rx_trace_insertion_loss[7U] ;
   u8 tx_trace_loss[7U] ;
   u8 rx_rssi_process_compens[15U] ;
} __attribute__((__packed__));
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/ini.h"
struct wl128x_ini_band_params_5 {
   u8 rx_trace_insertion_loss[7U] ;
   u8 tx_trace_loss[35U] ;
   u8 rx_rssi_process_compens[15U] ;
} __attribute__((__packed__));
#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/ini.h"
struct wl1271_ini_fem_params_5 {
   __le16 tx_bip_ref_pd_voltage[7U] ;
   u8 tx_bip_ref_power[7U] ;
   u8 tx_bip_ref_offset[7U] ;
   u8 tx_per_rate_pwr_limits_normal[6U] ;
   u8 tx_per_rate_pwr_limits_degraded[6U] ;
   u8 tx_per_rate_pwr_limits_extreme[6U] ;
   u8 tx_per_chan_pwr_limits_ofdm[35U] ;
   u8 tx_pd_vs_rate_offsets[6U] ;
   u8 tx_ibias[6U] ;
   u8 rx_fem_insertion_loss[7U] ;
   u8 degraded_low_to_normal_thr ;
   u8 normal_to_degraded_high_thr ;
} __attribute__((__packed__));
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/ini.h"
struct wl128x_ini_fem_params_5 {
   __le16 tx_bip_ref_pd_voltage[7U] ;
   u8 tx_bip_ref_power[7U] ;
   u8 tx_bip_ref_offset[7U] ;
   u8 tx_per_rate_pwr_limits_normal[7U] ;
   u8 tx_per_rate_pwr_limits_degraded[7U] ;
   u8 tx_per_rate_pwr_limits_extreme[7U] ;
   u8 tx_per_chan_pwr_limits_ofdm[35U] ;
   u8 tx_pd_vs_rate_offsets[7U] ;
   u8 tx_ibias[7U] ;
   u8 tx_pd_vs_chan_offsets[35U] ;
   u8 tx_pd_vs_temperature[14U] ;
   u8 rx_fem_insertion_loss[7U] ;
   u8 degraded_low_to_normal_thr ;
   u8 normal_to_degraded_high_thr ;
} __attribute__((__packed__));
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/ini.h"
struct __anonstruct_dyn_radio_params_2_2059 {
   struct wl1271_ini_fem_params_2 params ;
   u8 padding ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/ini.h"
struct __anonstruct_dyn_radio_params_5_2060 {
   struct wl1271_ini_fem_params_5 params ;
   u8 padding ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/ini.h"
struct wl1271_nvs_file {
   u8 nvs[468U] ;
   struct wl1271_ini_general_params general_params ;
   u8 padding1 ;
   struct wl1271_ini_band_params_2 stat_radio_params_2 ;
   u8 padding2 ;
   struct __anonstruct_dyn_radio_params_2_2059 dyn_radio_params_2[2U] ;
   struct wl1271_ini_band_params_5 stat_radio_params_5 ;
   u8 padding3 ;
   struct __anonstruct_dyn_radio_params_5_2060 dyn_radio_params_5[2U] ;
} __attribute__((__packed__));
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/ini.h"
struct __anonstruct_dyn_radio_params_2_2061 {
   struct wl128x_ini_fem_params_2 params ;
   u8 padding ;
};
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/ini.h"
struct __anonstruct_dyn_radio_params_5_2062 {
   struct wl128x_ini_fem_params_5 params ;
   u8 padding ;
};
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/ini.h"
struct wl128x_nvs_file {
   u8 nvs[468U] ;
   struct wl128x_ini_general_params general_params ;
   u8 fem_vendor_and_options ;
   struct wl128x_ini_band_params_2 stat_radio_params_2 ;
   u8 padding2 ;
   struct __anonstruct_dyn_radio_params_2_2061 dyn_radio_params_2[2U] ;
   struct wl128x_ini_band_params_5 stat_radio_params_5 ;
   u8 padding3 ;
   struct __anonstruct_dyn_radio_params_5_2062 dyn_radio_params_5[2U] ;
} __attribute__((__packed__));
#line 508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/cmd.h"
struct wl1271_cmd_test_header {
   u8 id ;
   u8 padding[3U] ;
} __attribute__((__packed__));
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/conf.h"
struct wl12xx_conf_rf {
   u8 tx_per_channel_power_compensation_2[7U] ;
   u8 tx_per_channel_power_compensation_5[18U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/conf.h"
struct wl12xx_priv_conf {
   struct wl12xx_conf_rf rf ;
   struct conf_memory_settings mem_wl127x ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/wl12xx.h"
struct wl127x_rx_mem_pool_addr {
   u32 addr ;
   u32 addr_extra ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/wl12xx.h"
struct wl12xx_priv {
   struct wl12xx_priv_conf conf ;
   int ref_clock ;
   int tcxo_clock ;
   struct wl127x_rx_mem_pool_addr *rx_mem_addr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.h"
struct wl1271_general_parms_cmd {
   struct wl1271_cmd_header header ;
   struct wl1271_cmd_test_header test ;
   struct wl1271_ini_general_params general_params ;
   u8 sr_debug_table[16U] ;
   u8 sr_sen_n_p ;
   u8 sr_sen_n_p_gain ;
   u8 sr_sen_nrn ;
   u8 sr_sen_prn ;
   u8 padding[3U] ;
} __attribute__((__packed__));
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.h"
struct wl128x_general_parms_cmd {
   struct wl1271_cmd_header header ;
   struct wl1271_cmd_test_header test ;
   struct wl128x_ini_general_params general_params ;
   u8 sr_debug_table[16U] ;
   u8 sr_sen_n_p ;
   u8 sr_sen_n_p_gain ;
   u8 sr_sen_nrn ;
   u8 sr_sen_prn ;
   u8 padding[3U] ;
} __attribute__((__packed__));
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.h"
struct wl1271_radio_parms_cmd {
   struct wl1271_cmd_header header ;
   struct wl1271_cmd_test_header test ;
   struct wl1271_ini_band_params_2 static_params_2 ;
   struct wl1271_ini_band_params_5 static_params_5 ;
   struct wl1271_ini_fem_params_2 dyn_params_2 ;
   u8 padding2 ;
   struct wl1271_ini_fem_params_5 dyn_params_5 ;
   u8 padding3[2U] ;
} __attribute__((__packed__));
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.h"
struct wl128x_radio_parms_cmd {
   struct wl1271_cmd_header header ;
   struct wl1271_cmd_test_header test ;
   struct wl128x_ini_band_params_2 static_params_2 ;
   struct wl128x_ini_band_params_5 static_params_5 ;
   u8 fem_vendor_and_options ;
   struct wl128x_ini_fem_params_2 dyn_params_2 ;
   u8 padding2 ;
   struct wl128x_ini_fem_params_5 dyn_params_5 ;
} __attribute__((__packed__));
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.h"
struct wl1271_ext_radio_parms_cmd {
   struct wl1271_cmd_header header ;
   struct wl1271_cmd_test_header test ;
   u8 tx_per_channel_power_compensation_2[7U] ;
   u8 tx_per_channel_power_compensation_5[18U] ;
   u8 padding[3U] ;
} __attribute__((__packed__));
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.h"
struct wl12xx_cmd_channel_switch {
   struct wl1271_cmd_header header ;
   u8 role_id ;
   u8 channel ;
   u8 switch_time ;
   u8 stop_tx ;
   u8 post_switch_tx_disable ;
   u8 padding[3U] ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/scan.h"
struct wl1271_cmd_trigger_scan_to {
   struct wl1271_cmd_header header ;
   __le32 timeout ;
} __attribute__((__packed__));
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/scan.h"
struct conn_scan_ch_params {
   __le16 min_duration ;
   __le16 max_duration ;
   __le16 passive_duration ;
   u8 channel ;
   u8 tx_power_att ;
   u8 flags ;
   u8 padding[3U] ;
} __attribute__((__packed__));
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/scan.h"
struct wlcore_scan_channels {
   u8 passive[3U] ;
   u8 active[3U] ;
   u8 dfs ;
   u8 passive_active ;
   struct conn_scan_ch_params channels_2[14U] ;
   struct conn_scan_ch_params channels_5[42U] ;
   struct conn_scan_ch_params channels_4[4U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.h"
struct basic_scan_params {
   __le16 scan_options ;
   u8 role_id ;
   u8 n_ch ;
   u8 n_probe_reqs ;
   u8 tid_trigger ;
   u8 ssid_len ;
   u8 use_ssid_list ;
   __le32 tx_rate ;
   u8 ssid[32U] ;
   u8 band ;
   u8 scan_tag ;
   u8 padding2[2U] ;
} __attribute__((__packed__));
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.h"
struct basic_scan_channel_params {
   __le32 min_duration ;
   __le32 max_duration ;
   __le32 bssid_lsb ;
   __le16 bssid_msb ;
   u8 early_termination ;
   u8 tx_power_att ;
   u8 channel ;
   u8 dfs_candidate ;
   u8 activity_detected ;
   u8 pad ;
} __attribute__((__packed__));
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.h"
struct wl1271_cmd_scan {
   struct wl1271_cmd_header header ;
   struct basic_scan_params params ;
   struct basic_scan_channel_params channels[24U] ;
   u8 addr[6U] ;
   u8 padding[2U] ;
} __attribute__((__packed__));
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.h"
struct wl1271_cmd_sched_scan_config {
   struct wl1271_cmd_header header ;
   __le32 intervals[16U] ;
   s8 rssi_threshold ;
   s8 snr_threshold ;
   u8 cycles ;
   u8 report_after ;
   u8 terminate ;
   u8 tag ;
   u8 bss_type ;
   u8 filter_type ;
   u8 ssid_len ;
   u8 ssid[32U] ;
   u8 n_probe_reqs ;
   u8 passive[3U] ;
   u8 active[3U] ;
   u8 dfs ;
   u8 n_pactive_ch ;
   u8 role_id ;
   u8 padding[1U] ;
   struct conn_scan_ch_params channels_2[14U] ;
   struct conn_scan_ch_params channels_5[23U] ;
   struct conn_scan_ch_params channels_4[4U] ;
} __attribute__((__packed__));
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.h"
struct wl1271_cmd_sched_scan_start {
   struct wl1271_cmd_header header ;
   u8 tag ;
   u8 role_id ;
   u8 padding[2U] ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.h"
struct wl1271_cmd_sched_scan_stop {
   struct wl1271_cmd_header header ;
   u8 tag ;
   u8 role_id ;
   u8 padding[2U] ;
} __attribute__((__packed__));
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
struct wl127x_tx_mem {
   u8 extra_blocks ;
   u8 total_mem_blocks ;
} __attribute__((__packed__));
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
struct wl128x_tx_mem {
   u8 total_mem_blocks ;
   u8 extra_bytes ;
} __attribute__((__packed__));
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
struct wl18xx_tx_mem {
   u8 total_mem_blocks ;
   u8 ctrl ;
} __attribute__((__packed__));
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
union __anonunion_3109 {
   struct wl127x_tx_mem wl127x_mem ;
   struct wl128x_tx_mem wl128x_mem ;
   struct wl18xx_tx_mem wl18xx_mem ;
} __attribute__((__packed__));
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
union __anonunion_3110 {
   u8 wl12xx_reserved ;
   u8 wl18xx_checksum_data ;
} __attribute__((__packed__));
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
struct wl1271_tx_hw_descr {
   __le16 length ;
   union __anonunion_3109 __anonCompField_wl1271_tx_hw_descr_200 ;
   __le32 start_time ;
   __le16 life_time ;
   __le16 tx_attr ;
   u8 id ;
   u8 tid ;
   u8 hlid ;
   union __anonunion_3110 __anonCompField_wl1271_tx_hw_descr_201 ;
} __attribute__((__packed__));
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
struct wl1271_tx_hw_res_descr {
   u8 id ;
   u8 status ;
   __le16 medium_usage ;
   __le32 fw_handling_time ;
   __le32 medium_delay ;
   u8 tx_security_sequence_number_lsb ;
   u8 ack_failures ;
   u8 rate_class_index ;
   u8 spare ;
} __attribute__((__packed__));
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
struct wl1271_tx_hw_res_if {
   __le32 tx_result_fw_counter ;
   __le32 tx_result_host_counter ;
   struct wl1271_tx_hw_res_descr tx_results_queue[16U] ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/event.h"
struct wl12xx_event_mailbox {
   __le32 events_vector ;
   __le32 events_mask ;
   __le32 reserved_1 ;
   __le32 reserved_2 ;
   u8 number_of_scan_results ;
   u8 scan_tag ;
   u8 completed_scan_status ;
   u8 reserved_3 ;
   u8 soft_gemini_sense_info ;
   u8 soft_gemini_protective_info ;
   s8 rssi_snr_trigger_metric[8U] ;
   u8 change_auto_mode_timeout ;
   u8 scheduled_scan_status ;
   u8 reserved4 ;
   u8 roc_channel ;
   __le16 hlid_removed_bitmap ;
   __le16 sta_aging_status ;
   __le16 sta_tx_retry_exceeded ;
   u8 discovery_tag ;
   u8 number_of_preq_results ;
   u8 number_of_prsp_results ;
   u8 reserved_5 ;
   u8 role_id ;
   u8 rx_ba_allowed ;
   u8 reserved_6[2U] ;
   u8 channel_switch_role_id ;
   u8 channel_switch_status ;
   u8 reserved_7[2U] ;
   u8 ps_poll_delivery_failure_role_ids ;
   u8 stopped_role_ids ;
   u8 started_role_ids ;
   u8 reserved_8[9U] ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/acx.h"
struct wl12xx_acx_tx_statistics {
   __le32 internal_desc_overflow ;
} __attribute__((__packed__));
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/acx.h"
struct wl12xx_acx_rx_statistics {
   __le32 out_of_mem ;
   __le32 hdr_overflow ;
   __le32 hw_stuck ;
   __le32 dropped ;
   __le32 fcs_err ;
   __le32 xfr_hint_trig ;
   __le32 path_reset ;
   __le32 reset_counter ;
} __attribute__((__packed__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/acx.h"
struct wl12xx_acx_dma_statistics {
   __le32 rx_requested ;
   __le32 rx_errors ;
   __le32 tx_requested ;
   __le32 tx_errors ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/acx.h"
struct wl12xx_acx_isr_statistics {
   __le32 cmd_cmplt ;
   __le32 fiqs ;
   __le32 rx_headers ;
   __le32 rx_completes ;
   __le32 rx_mem_overflow ;
   __le32 rx_rdys ;
   __le32 irqs ;
   __le32 tx_procs ;
   __le32 decrypt_done ;
   __le32 dma0_done ;
   __le32 dma1_done ;
   __le32 tx_exch_complete ;
   __le32 commands ;
   __le32 rx_procs ;
   __le32 hw_pm_mode_changes ;
   __le32 host_acknowledges ;
   __le32 pci_pm ;
   __le32 wakeups ;
   __le32 low_rssi ;
} __attribute__((__packed__));
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/acx.h"
struct wl12xx_acx_wep_statistics {
   __le32 addr_key_count ;
   __le32 default_key_count ;
   __le32 reserved ;
   __le32 key_not_found ;
   __le32 decrypt_fail ;
   __le32 packets ;
   __le32 interrupt ;
} __attribute__((__packed__));
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/acx.h"
struct wl12xx_acx_pwr_statistics {
   __le32 ps_enter ;
   __le32 elp_enter ;
   __le32 missing_bcns ;
   __le32 wake_on_host ;
   __le32 wake_on_timer_exp ;
   __le32 tx_with_ps ;
   __le32 tx_without_ps ;
   __le32 rcvd_beacons ;
   __le32 power_save_off ;
   __le16 enable_ps ;
   __le16 disable_ps ;
   __le32 fix_tsf_ps ;
   __le32 cont_miss_bcns_spread[10U] ;
   __le32 rcvd_awake_beacons ;
} __attribute__((__packed__));
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/acx.h"
struct wl12xx_acx_mic_statistics {
   __le32 rx_pkts ;
   __le32 calc_failure ;
} __attribute__((__packed__));
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/acx.h"
struct wl12xx_acx_aes_statistics {
   __le32 encrypt_fail ;
   __le32 decrypt_fail ;
   __le32 encrypt_packets ;
   __le32 decrypt_packets ;
   __le32 encrypt_interrupt ;
   __le32 decrypt_interrupt ;
} __attribute__((__packed__));
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/acx.h"
struct wl12xx_acx_event_statistics {
   __le32 heart_beat ;
   __le32 calibration ;
   __le32 rx_mismatch ;
   __le32 rx_mem_empty ;
   __le32 rx_pool ;
   __le32 oom_late ;
   __le32 phy_transmit_error ;
   __le32 tx_stuck ;
} __attribute__((__packed__));
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/acx.h"
struct wl12xx_acx_ps_statistics {
   __le32 pspoll_timeouts ;
   __le32 upsd_timeouts ;
   __le32 upsd_max_sptime ;
   __le32 upsd_max_apturn ;
   __le32 pspoll_max_apturn ;
   __le32 pspoll_utilization ;
   __le32 upsd_utilization ;
} __attribute__((__packed__));
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/acx.h"
struct wl12xx_acx_rxpipe_statistics {
   __le32 rx_prep_beacon_drop ;
   __le32 descr_host_int_trig_rx_data ;
   __le32 beacon_buffer_thres_host_int_trig_rx_data ;
   __le32 missed_beacon_host_int_trig_rx_data ;
   __le32 tx_xfr_host_int_trig_rx_data ;
} __attribute__((__packed__));
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/acx.h"
struct wl12xx_acx_statistics {
   struct acx_header header ;
   struct wl12xx_acx_tx_statistics tx ;
   struct wl12xx_acx_rx_statistics rx ;
   struct wl12xx_acx_dma_statistics dma ;
   struct wl12xx_acx_isr_statistics isr ;
   struct wl12xx_acx_wep_statistics wep ;
   struct wl12xx_acx_pwr_statistics pwr ;
   struct wl12xx_acx_aes_statistics aes ;
   struct wl12xx_acx_mic_statistics mic ;
   struct wl12xx_acx_event_statistics event ;
   struct wl12xx_acx_ps_statistics ps ;
   struct wl12xx_acx_rxpipe_statistics rxpipe ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_driver {
   int (*probe)(struct platform_device *) ;
   int (*remove)(struct platform_device *) ;
   void (*shutdown)(struct platform_device *) ;
   int (*suspend)(struct platform_device *, pm_message_t ) ;
   int (*resume)(struct platform_device *) ;
   struct device_driver driver ;
   struct platform_device_id *id_table ;
   bool prevent_deferred_probe ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct wilink_family_data {
   char *name ;
   char *nvs_name ;
   char *cfg_name ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct wlcore_platdev_data {
   struct wl1271_if_operations *if_ops ;
   struct wilink_family_data *family ;
   bool ref_clock_xtal ;
   u32 ref_clock_freq ;
   u32 tcxo_clock_freq ;
   bool pwr_in_suspend ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/rx.h"
struct wl1271_rx_descriptor {
   __le16 length ;
   u8 status ;
   u8 flags ;
   u8 rate ;
   u8 channel ;
   s8 rssi ;
   u8 snr ;
   __le32 timestamp ;
   u8 packet_class ;
   u8 hlid ;
   u8 pad_len ;
   u8 reserved ;
} __attribute__((__packed__));
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/wl12xx.h"
struct wl12xx_clock {
   u32 freq ;
   bool xtal ;
   u8 hw_idx ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/wl12xx.h"
struct wl12xx_fw_packet_counters {
   u8 tx_released_pkts[4U] ;
   u8 tx_lnk_free_pkts[12U] ;
   u8 tx_voice_released_blks ;
   u8 tx_last_rate ;
   u8 padding[2U] ;
} __attribute__((__packed__));
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/wl12xx.h"
struct wl12xx_fw_status {
   __le32 intr ;
   u8 fw_rx_counter ;
   u8 drv_rx_counter ;
   u8 reserved ;
   u8 tx_results_counter ;
   __le32 rx_pkt_descs[8U] ;
   __le32 fw_localtime ;
   __le32 link_ps_bitmap ;
   __le32 link_fast_bitmap ;
   __le32 total_released_blks ;
   __le32 tx_total ;
   struct wl12xx_fw_packet_counters counters ;
   __le32 log_start_addr ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_8001 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_8001 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_8002 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_8002 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_8018 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_8018 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_8022 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_8022 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_8023 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_8024 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_8023 __anonCompField_media_link_90 ;
   union __anonunion_8024 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_8026 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_8025 {
   struct __anonstruct_dev_8026 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_8025 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_8040 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_8041 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_8039 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_8040 i2c ;
   struct __anonstruct_custom_8041 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_8039 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_8942 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_8942 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 15  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 {
   struct file_operations *arg0 ;
   int signal_pending ;
};
#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_platform_instance_wl12xx_driver_84 {
   struct platform_driver *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 668 
#line 479  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/acx.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/cmd.h"
#line 34 
int wl1271_cmd_configure(struct wl1271 *, u16, void *, size_t);
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/acx.h"
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/acx.c"
int wl1271_acx_host_if_cfg_bitmap(struct wl1271 *wl, u32 host_cfg_bitmap);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/acx.c"
int wl1271_acx_host_if_cfg_bitmap(struct wl1271 *wl, u32 host_cfg_bitmap)
{
  #line 17 
  struct wl1271_acx_host_config_bitmap *bitmap_conf;
  #line 18 
  int ret;
  #line 20 
  bitmap_conf = (struct wl1271_acx_host_config_bitmap *)kzalloc(12UL,3264U);
  #line 21 
  if (bitmap_conf == (struct wl1271_acx_host_config_bitmap *)0) {
    #line 22 
    ret = -12;
    #line 23 
    goto out;
  }
  #line 26 
  bitmap_conf->host_cfg_bitmap = host_cfg_bitmap;
  #line 28 
  ret = wl1271_cmd_configure(wl,(unsigned short)57,(void *)bitmap_conf,12UL);
  #line 30 
  if (ret < 0) {
    #line 31 
    printk((char *)"\001",ret);
    #line 32 
    goto out;
  }
  #line 35 
  out: 
       #line 35 
  ;
  #line 36 
  kfree((void *)bitmap_conf);
  #line 38 
  return ret;
}

#line 479  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/acx.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 482 
  return ldv_kzalloc(size,flags);
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 56 
void __dynamic_pr_debug(struct _ddebug *, char * , ...);
#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 487 
void print_hex_dump(char *, char *, int, int, int, void *, size_t, bool);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 479  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/cmd.h"
#line 18 
int wl1271_cmd_send(struct wl1271 *, u16, void *, size_t, size_t);
#line 31 
#line 31 
int wl1271_cmd_test(struct wl1271 *, void *, size_t, u8);
#line 86 
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.c"
int wl12xx_cmd_channel_switch(struct wl1271 *wl, struct wl12xx_vif *wlvif, struct ieee80211_channel_switch *ch_switch);
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/debug.h"
#line 46 
extern u32 wl12xx_debug_level;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.h"
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.c"
int wl1271_cmd_general_parms(struct wl1271 *wl);
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.h"
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.c"
int wl128x_cmd_general_parms(struct wl1271 *wl);
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.h"
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.c"
int wl1271_cmd_radio_parms(struct wl1271 *wl);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.h"
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.c"
int wl128x_cmd_radio_parms(struct wl1271 *wl);
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.h"
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.c"
int wl1271_cmd_ext_radio_parms(struct wl1271 *wl);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.c"
int wl1271_cmd_ext_radio_parms(struct wl1271 *wl)
{
  #line 17 
  struct wl1271_ext_radio_parms_cmd *ext_radio_parms;
  #line 20 
  int ret;
  #line 18 
  struct wl12xx_priv *priv = (struct wl12xx_priv *)wl->priv;
  #line 19 
  struct wl12xx_conf_rf *rf = & priv->conf.rf;
  #line 22 
  if (wl->nvs == (void *)0) 
                            #line 23 
                            return -19;
  #line 25 
  ext_radio_parms = (struct wl1271_ext_radio_parms_cmd *)kzalloc_0(36UL,3264U);
  #line 26 
  if (ext_radio_parms == (struct wl1271_ext_radio_parms_cmd *)0) 
                                                                 #line 27 
                                                                 return -12;
  #line 29 
  ext_radio_parms->test.id = (unsigned char)38U;
  #line 31 
  memcpy((void *)(& ext_radio_parms->tx_per_channel_power_compensation_2),(void *)(& rf->tx_per_channel_power_compensation_2),7UL);
  #line 34 
  memcpy((void *)(& ext_radio_parms->tx_per_channel_power_compensation_5),(void *)(& rf->tx_per_channel_power_compensation_5),18UL);
  #line 38 
  if ((wl12xx_debug_level & 4096U) != 0U) {
    #line 38 
    bool branch;
    #line 38 
    struct _ddebug __UNIQUE_ID_ddebug557 = {.modname = (char *)"wl12xx", .function = (char *)"wl1271_cmd_ext_radio_parms", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.c", .format = (char *)"wlcore", .lineno = (unsigned int)38U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 38 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug557.key.dd_key_false.key,(_Bool)0);
    #line 38 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 38 
                                                print_hex_dump((char *)"\001",(char *)"wlcore",2,16,1,(void *)ext_radio_parms,36UL,(_Bool)0);
  }
  #line 41 
  ret = wl1271_cmd_test(wl,(void *)ext_radio_parms,36UL,(unsigned char)0);
  #line 42 
  if (ret < 0) 
               #line 43 
               printk((char *)"\001");
  #line 45 
  kfree((void *)ext_radio_parms);
  #line 46 
  return ret;
}

#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.c"
int wl1271_cmd_general_parms(struct wl1271 *wl)
{
  #line 51 
  struct wl1271_general_parms_cmd *gen_parms;
  #line 56 
  int ret;
  #line 52 
  struct wl1271_ini_general_params *gp = & ((struct wl1271_nvs_file *)wl->nvs)->general_params;
  #line 54 
  struct wl12xx_priv *priv = (struct wl12xx_priv *)wl->priv;
  #line 55 
  bool answer = (_Bool)0;
  #line 58 
  if (wl->nvs == (void *)0) 
                            #line 59 
                            return -19;
  #line 61 
  if ((unsigned int)gp->tx_bip_fem_manufacturer > 3U) {
    #line 62 
    printk((char *)"\001");
    #line 63 
    return -22;
  }
  #line 66 
  gen_parms = (struct wl1271_general_parms_cmd *)kzalloc_0(88UL,3264U);
  #line 67 
  if (gen_parms == (struct wl1271_general_parms_cmd *)0) 
                                                         #line 68 
                                                         return -12;
  #line 70 
  gen_parms->test.id = (unsigned char)30U;
  #line 72 
  memcpy((void *)(& gen_parms->general_params),(void *)gp,57UL);
  #line 75 
  if (wl->plt_mode == (unsigned int)PLT_FEM_DETECT) 
                                                    #line 76 
                                                    gen_parms->general_params.tx_bip_fem_auto_detect = (unsigned char)1U;
  #line 78 
  if ((unsigned int)gen_parms->general_params.tx_bip_fem_auto_detect != 0U) 
    #line 79 
    answer = (_Bool)1;
  #line 82 
  gen_parms->general_params.ref_clock = (unsigned char)priv->ref_clock;
  #line 84 
  ret = wl1271_cmd_test(wl,(void *)gen_parms,88UL,(unsigned char)((int)answer));
  #line 85 
  if (ret < 0) {
    #line 86 
    printk((char *)"\001");
    #line 87 
    goto out;
  }
  #line 90 
  gp->tx_bip_fem_manufacturer = gen_parms->general_params.tx_bip_fem_manufacturer;
  #line 93 
  if ((unsigned int)gp->tx_bip_fem_manufacturer > 3U) {
    #line 94 
    printk((char *)"\001");
    #line 95 
    ret = -22;
    #line 96 
    goto out;
  }
  #line 100 
  if (wl->plt_mode == (unsigned int)PLT_FEM_DETECT) 
                                                    #line 101 
                                                    wl->fem_manuf = gp->tx_bip_fem_manufacturer;
  #line 103 
  if ((long)((wl12xx_debug_level & 4096U) != 0U) != 0L) {
    #line 103 
    bool branch;
    #line 103 
    struct _ddebug __UNIQUE_ID_ddebug558 = {.modname = (char *)"wl12xx", .function = (char *)"wl1271_cmd_general_parms", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.c", .format = (char *)"wlcore", .lineno = (unsigned int)103U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 103 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug558.key.dd_key_false.key,(_Bool)0);
    #line 103 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 103 
      char *tmp_1;
      #line 103 
      ;
      #line 103 
      if (! answer) 
                    #line 103 
                    tmp_1 = (char *)"manual";
      else {
        #line 103 
        char *tmp_0;
        #line 103 
        if (wl->plt_mode == (unsigned int)PLT_FEM_DETECT) 
                                                          #line 103 
                                                          tmp_0 = (char *)"calibrator_fem_detect"; else 
                                                                    #line 103 
                                                                    tmp_0 = (char *)"auto";
        #line 103 
        tmp_1 = tmp_0;
      }
      #line 103 
      __dynamic_pr_debug(& __UNIQUE_ID_ddebug558,(char *)"wlcore",tmp_1,(int)gp->tx_bip_fem_manufacturer);
    }
  }
  #line 111 
  out: 
       #line 111 
  ;
  #line 112 
  kfree((void *)gen_parms);
  #line 113 
  return ret;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.c"
int wl128x_cmd_general_parms(struct wl1271 *wl)
{
  #line 118 
  struct wl128x_general_parms_cmd *gen_parms;
  #line 123 
  int ret;
  #line 119 
  struct wl128x_ini_general_params *gp = & ((struct wl128x_nvs_file *)wl->nvs)->general_params;
  #line 121 
  struct wl12xx_priv *priv = (struct wl12xx_priv *)wl->priv;
  #line 122 
  bool answer = (_Bool)0;
  #line 125 
  if (wl->nvs == (void *)0) 
                            #line 126 
                            return -19;
  #line 128 
  if ((unsigned int)gp->tx_bip_fem_manufacturer > 3U) {
    #line 129 
    printk((char *)"\001");
    #line 130 
    return -22;
  }
  #line 133 
  gen_parms = (struct wl128x_general_parms_cmd *)kzalloc_0(96UL,3264U);
  #line 134 
  if (gen_parms == (struct wl128x_general_parms_cmd *)0) 
                                                         #line 135 
                                                         return -12;
  #line 137 
  gen_parms->test.id = (unsigned char)30U;
  #line 139 
  memcpy((void *)(& gen_parms->general_params),(void *)gp,65UL);
  #line 142 
  if (wl->plt_mode == (unsigned int)PLT_FEM_DETECT) 
                                                    #line 143 
                                                    gen_parms->general_params.tx_bip_fem_auto_detect = (unsigned char)1U;
  #line 145 
  if ((unsigned int)gen_parms->general_params.tx_bip_fem_auto_detect != 0U) 
    #line 146 
    answer = (_Bool)1;
  #line 149 
  gen_parms->general_params.ref_clock = (unsigned char)priv->ref_clock;
  #line 150 
  gen_parms->general_params.tcxo_ref_clock = (unsigned char)priv->tcxo_clock;
  #line 152 
  ret = wl1271_cmd_test(wl,(void *)gen_parms,96UL,(unsigned char)((int)answer));
  #line 153 
  if (ret < 0) {
    #line 154 
    printk((char *)"\001");
    #line 155 
    goto out;
  }
  #line 158 
  gp->tx_bip_fem_manufacturer = gen_parms->general_params.tx_bip_fem_manufacturer;
  #line 161 
  if ((unsigned int)gp->tx_bip_fem_manufacturer > 3U) {
    #line 162 
    printk((char *)"\001");
    #line 163 
    ret = -22;
    #line 164 
    goto out;
  }
  #line 168 
  if (wl->plt_mode == (unsigned int)PLT_FEM_DETECT) 
                                                    #line 169 
                                                    wl->fem_manuf = gp->tx_bip_fem_manufacturer;
  #line 171 
  if ((long)((wl12xx_debug_level & 4096U) != 0U) != 0L) {
    #line 171 
    bool branch;
    #line 171 
    struct _ddebug __UNIQUE_ID_ddebug559 = {.modname = (char *)"wl12xx", .function = (char *)"wl128x_cmd_general_parms", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.c", .format = (char *)"wlcore", .lineno = (unsigned int)171U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 171 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug559.key.dd_key_false.key,(_Bool)0);
    #line 171 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 171 
      char *tmp_1;
      #line 171 
      ;
      #line 171 
      if (! answer) 
                    #line 171 
                    tmp_1 = (char *)"manual";
      else {
        #line 171 
        char *tmp_0;
        #line 171 
        if (wl->plt_mode == (unsigned int)PLT_FEM_DETECT) 
                                                          #line 171 
                                                          tmp_0 = (char *)"calibrator_fem_detect"; else 
                                                                    #line 171 
                                                                    tmp_0 = (char *)"auto";
        #line 171 
        tmp_1 = tmp_0;
      }
      #line 171 
      __dynamic_pr_debug(& __UNIQUE_ID_ddebug559,(char *)"wlcore",tmp_1,(int)gp->tx_bip_fem_manufacturer);
    }
  }
  #line 179 
  out: 
       #line 179 
  ;
  #line 180 
  kfree((void *)gen_parms);
  #line 181 
  return ret;
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.c"
int wl1271_cmd_radio_parms(struct wl1271 *wl)
{
  #line 187 
  struct wl1271_radio_parms_cmd *radio_parms;
  #line 189 
  int ret;
  #line 189 
  int fem_idx;
  #line 186 
  struct wl1271_nvs_file *nvs = (struct wl1271_nvs_file *)wl->nvs;
  #line 188 
  struct wl1271_ini_general_params *gp = & nvs->general_params;
  #line 191 
  if (wl->nvs == (void *)0) 
                            #line 192 
                            return -19;
  #line 194 
  radio_parms = (struct wl1271_radio_parms_cmd *)kzalloc_0(224UL,3264U);
  #line 195 
  if (radio_parms == (struct wl1271_radio_parms_cmd *)0) 
                                                         #line 196 
                                                         return -12;
  #line 198 
  radio_parms->test.id = (unsigned char)25U;
  #line 200 
  fem_idx = (unsigned int)gp->tx_bip_fem_manufacturer == 1U;
  #line 203 
  memcpy((void *)(& radio_parms->static_params_2),(void *)(& nvs->stat_radio_params_2),17UL);
  #line 205 
  memcpy((void *)(& radio_parms->dyn_params_2),(void *)(& nvs->dyn_radio_params_2[fem_idx].params),65UL);
  #line 210 
  memcpy((void *)(& radio_parms->static_params_5),(void *)(& nvs->stat_radio_params_5),29UL);
  #line 213 
  memcpy((void *)(& radio_parms->dyn_params_5),(void *)(& nvs->dyn_radio_params_5[fem_idx].params),102UL);
  #line 217 
  if ((wl12xx_debug_level & 4096U) != 0U) {
    #line 217 
    bool branch;
    #line 217 
    struct _ddebug __UNIQUE_ID_ddebug562 = {.modname = (char *)"wl12xx", .function = (char *)"wl1271_cmd_radio_parms", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.c", .format = (char *)"wlcore", .lineno = (unsigned int)217U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 217 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug562.key.dd_key_false.key,(_Bool)0);
    #line 217 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 217 
                                                print_hex_dump((char *)"\001",(char *)"wlcore",2,16,1,(void *)radio_parms,224UL,(_Bool)0);
  }
  #line 220 
  ret = wl1271_cmd_test(wl,(void *)radio_parms,224UL,(unsigned char)0);
  #line 221 
  if (ret < 0) 
               #line 222 
               printk((char *)"\001");
  #line 224 
  kfree((void *)radio_parms);
  #line 225 
  return ret;
}

#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.c"
int wl128x_cmd_radio_parms(struct wl1271 *wl)
{
  #line 231 
  struct wl128x_radio_parms_cmd *radio_parms;
  #line 233 
  int ret;
  #line 233 
  int fem_idx;
  #line 230 
  struct wl128x_nvs_file *nvs = (struct wl128x_nvs_file *)wl->nvs;
  #line 232 
  struct wl128x_ini_general_params *gp = & nvs->general_params;
  #line 235 
  if (wl->nvs == (void *)0) 
                            #line 236 
                            return -19;
  #line 238 
  radio_parms = (struct wl128x_radio_parms_cmd *)kzalloc_0(340UL,3264U);
  #line 239 
  if (radio_parms == (struct wl128x_radio_parms_cmd *)0) 
                                                         #line 240 
                                                         return -12;
  #line 242 
  radio_parms->test.id = (unsigned char)25U;
  #line 244 
  fem_idx = (unsigned int)gp->tx_bip_fem_manufacturer == 1U;
  #line 247 
  memcpy((void *)(& radio_parms->static_params_2),(void *)(& nvs->stat_radio_params_2),30UL);
  #line 249 
  memcpy((void *)(& radio_parms->dyn_params_2),(void *)(& nvs->dyn_radio_params_2[fem_idx].params),87UL);
  #line 254 
  memcpy((void *)(& radio_parms->static_params_5),(void *)(& nvs->stat_radio_params_5),57UL);
  #line 257 
  memcpy((void *)(& radio_parms->dyn_params_5),(void *)(& nvs->dyn_radio_params_5[fem_idx].params),156UL);
  #line 261 
  radio_parms->fem_vendor_and_options = nvs->fem_vendor_and_options;
  #line 263 
  if ((wl12xx_debug_level & 4096U) != 0U) {
    #line 263 
    bool branch;
    #line 263 
    struct _ddebug __UNIQUE_ID_ddebug565 = {.modname = (char *)"wl12xx", .function = (char *)"wl128x_cmd_radio_parms", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.c", .format = (char *)"wlcore", .lineno = (unsigned int)263U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 263 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug565.key.dd_key_false.key,(_Bool)0);
    #line 263 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 263 
                                                print_hex_dump((char *)"\001",(char *)"wlcore",2,16,1,(void *)radio_parms,340UL,(_Bool)0);
  }
  #line 266 
  ret = wl1271_cmd_test(wl,(void *)radio_parms,340UL,(unsigned char)0);
  #line 267 
  if (ret < 0) 
               #line 268 
               printk((char *)"\001");
  #line 270 
  kfree((void *)radio_parms);
  #line 271 
  return ret;
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.c"
int wl12xx_cmd_channel_switch(struct wl1271 *wl, struct wl12xx_vif *wlvif, struct ieee80211_channel_switch *ch_switch)
{
  #line 278 
  struct wl12xx_cmd_channel_switch *cmd;
  #line 279 
  int ret;
  #line 281 
  if ((long)((wl12xx_debug_level & 8192U) != 0U) != 0L) {
    #line 281 
    bool branch;
    #line 281 
    struct _ddebug __UNIQUE_ID_ddebug566 = {.modname = (char *)"wl12xx", .function = (char *)"wl12xx_cmd_channel_switch", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/cmd.c", .format = (char *)"wlcore", .lineno = (unsigned int)281U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 281 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug566.key.dd_key_false.key,(_Bool)0);
    #line 281 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 281 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug566,(char *)"wlcore");
  }
  #line 283 
  cmd = (struct wl12xx_cmd_channel_switch *)kzalloc_0(12UL,3264U);
  #line 284 
  if (cmd == (struct wl12xx_cmd_channel_switch *)0) {
    #line 285 
    ret = -12;
    #line 286 
    goto out;
  }
  #line 289 
  cmd->role_id = wlvif->role_id;
  #line 290 
  cmd->channel = (unsigned char)(ch_switch->chandef.chan)->hw_value;
  #line 291 
  cmd->switch_time = ch_switch->count;
  #line 292 
  cmd->stop_tx = (unsigned char)ch_switch->block_tx;
  #line 296 
  cmd->post_switch_tx_disable = (unsigned char)0U;
  #line 298 
  ret = wl1271_cmd_send(wl,(unsigned short)20,(void *)cmd,12UL,0UL);
  #line 299 
  if (ret < 0) {
    #line 300 
    printk((char *)"\001");
    #line 301 
    goto out_free;
  }
  #line 304 
  out_free: 
            #line 304 
  ;
  #line 305 
  kfree((void *)cmd);
  #line 307 
  out: 
       #line 307 
  ;
  #line 308 
  return ret;
}

#line 479  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 482 
  return ldv_kzalloc(size,flags);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/scan.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 18 
void *memset(void *, int, size_t);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 465 
bool cancel_delayed_work(struct delayed_work *);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 413  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/scan.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags);
#line 5383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 5383 
void ieee80211_queue_delayed_work(struct ieee80211_hw *, struct delayed_work *, unsigned long);
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
__inline static struct ieee80211_vif *wl12xx_wlvif_to_vif(struct wl12xx_vif *wlvif)
{
  #line 501 
  void *__mptr;
  #line 501 
  __mptr = (void *)wlvif;
  #line 501 
  return ((struct ieee80211_vif *)(__mptr + 18446744073709551216U));
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
__inline static bool wlcore_is_p2p_mgmt(struct wl12xx_vif *wlvif)
{
  #line 506 
  ;
  #line 506 
  return (_Bool)(wl12xx_wlvif_to_vif(wlvif)->type == (unsigned int)NL80211_IFTYPE_P2P_DEVICE);
}

#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/cmd.h"
#line 48 
int wl12xx_cmd_build_probe_req(struct wl1271 *, struct wl12xx_vif *, u8, u8, u8 *, size_t, u8 *, size_t, u8 *, size_t, bool);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/scan.h"
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
void wl1271_scan_stm(struct wl1271 *wl, struct wl12xx_vif *wlvif);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/scan.h"
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
int wl1271_scan_sched_scan_config(struct wl1271 *wl, struct wl12xx_vif *wlvif, struct cfg80211_sched_scan_request *req, struct ieee80211_scan_ies *ies);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/scan.h"
#line 414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
int wl1271_scan_sched_scan_start(struct wl1271 *wl, struct wl12xx_vif *wlvif);
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/scan.h"
#line 152 
bool wlcore_set_scan_chan_params(struct wl1271 *, struct wlcore_scan_channels *, struct ieee80211_channel **, u32, u32, int);
#line 160 
#line 160 
int wlcore_scan_sched_scan_ssid_list(struct wl1271 *, struct wl12xx_vif *, struct cfg80211_sched_scan_request *);
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.h"
#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
int wl12xx_scan_start(struct wl1271 *wl, struct wl12xx_vif *wlvif, struct cfg80211_scan_request *req);
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.h"
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
int wl12xx_scan_stop(struct wl1271 *wl, struct wl12xx_vif *wlvif);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.h"
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
void wl12xx_scan_completed(struct wl1271 *wl, struct wl12xx_vif *wlvif);
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.h"
#line 447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
int wl12xx_sched_scan_start(struct wl1271 *wl, struct wl12xx_vif *wlvif, struct cfg80211_sched_scan_request *req, struct ieee80211_scan_ies *ies);
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.h"
#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
void wl12xx_scan_sched_scan_stop(struct wl1271 *wl, struct wl12xx_vif *wlvif);
#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
#line 238 
u32 wl1271_tx_min_rate_get(struct wl1271 *, u32);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
static int wl1271_get_scan_channels(struct wl1271 *wl, struct cfg80211_scan_request *req, struct basic_scan_channel_params *channels, enum nl80211_band band, bool passive)
{
  #line 19 
  int i;
  #line 19 
  int j;
  #line 20 
  u32 flags;
  #line 18 
  struct conf_scan_settings *c = & wl->conf.scan;
  #line 22 
  i = 0;
  #line 22 
  j = 0;
  #line 22 
  while (req->n_channels > (unsigned int)i && j <= 23) {
    {
      #line 25 
      flags = (req->channels[i])->flags;
      #line 27 
      if (! test_bit((long)i,(unsigned long *)(& wl->scan.scanned_ch))) 
        #line 27 
        if ((flags & 1U) == 0U) 
          #line 28 
          if ((req->channels[i])->band == band) 
            #line 29 
            if ((int)passive != 0 || (flags & 2U) == 0U) {
              #line 37 
              if ((long)((wl12xx_debug_level & 256U) != 0U) != 0L) {
                #line 37 
                bool branch;
                #line 37 
                struct _ddebug __UNIQUE_ID_ddebug555 = {.modname = (char *)"wl12xx", .function = (char *)"wl1271_get_scan_channels", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c", .format = (char *)"wlcore", .lineno = (unsigned int)37U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
                #line 37 
                branch = arch_static_branch(& __UNIQUE_ID_ddebug555.key.dd_key_false.key,(_Bool)0);
                #line 37 
                if ((long)((long)((int)branch != 0)) != 0L) 
                                                            #line 37 
                                                            __dynamic_pr_debug(& __UNIQUE_ID_ddebug555,(char *)"wlcore",(unsigned int)(req->channels[i])->band,(req->channels[i])->center_freq);
              }
              #line 40 
              if ((long)((wl12xx_debug_level & 256U) != 0U) != 0L) {
                #line 40 
                bool branch_0;
                #line 40 
                struct _ddebug __UNIQUE_ID_ddebug556 = {.modname = (char *)"wl12xx", .function = (char *)"wl1271_get_scan_channels", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c", .format = (char *)"wlcore", .lineno = (unsigned int)40U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
                #line 40 
                branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug556.key.dd_key_false.key,(_Bool)0);
                #line 40 
                if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                              #line 40 
                                                              __dynamic_pr_debug(& __UNIQUE_ID_ddebug556,(char *)"wlcore",(int)(req->channels[i])->hw_value,(req->channels[i])->flags);
              }
              #line 43 
              if ((long)((wl12xx_debug_level & 256U) != 0U) != 0L) {
                #line 43 
                bool branch_1;
                #line 43 
                struct _ddebug __UNIQUE_ID_ddebug557 = {.modname = (char *)"wl12xx", .function = (char *)"wl1271_get_scan_channels", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c", .format = (char *)"wlcore", .lineno = (unsigned int)43U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
                #line 43 
                branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug557.key.dd_key_false.key,(_Bool)0);
                #line 43 
                if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                              #line 43 
                                                              __dynamic_pr_debug(& __UNIQUE_ID_ddebug557,(char *)"wlcore",(req->channels[i])->max_antenna_gain,(req->channels[i])->max_power);
              }
              #line 47 
              if ((long)((wl12xx_debug_level & 256U) != 0U) != 0L) {
                #line 47 
                bool branch_2;
                #line 47 
                struct _ddebug __UNIQUE_ID_ddebug558 = {.modname = (char *)"wl12xx", .function = (char *)"wl1271_get_scan_channels", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c", .format = (char *)"wlcore", .lineno = (unsigned int)47U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
                #line 47 
                branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug558.key.dd_key_false.key,(_Bool)0);
                #line 47 
                if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                              #line 47 
                                                              __dynamic_pr_debug(& __UNIQUE_ID_ddebug558,(char *)"wlcore",(int)(req->channels[i])->beacon_found);
              }
              #line 50 
              if (! passive) {
                #line 51 
                (channels + (unsigned long)j)->min_duration = c->min_dwell_time_active;
                #line 53 
                (channels + (unsigned long)j)->max_duration = c->max_dwell_time_active;
              }
              else {
                #line 56 
                (channels + (unsigned long)j)->min_duration = c->dwell_time_passive;
                #line 58 
                (channels + (unsigned long)j)->max_duration = c->dwell_time_passive;
              }
              #line 61 
              (channels + (unsigned long)j)->early_termination = (unsigned char)0U;
              #line 62 
              (channels + (unsigned long)j)->tx_power_att = (unsigned char)(req->channels[i])->max_power;
              #line 63 
              (channels + (unsigned long)j)->channel = (unsigned char)(req->channels[i])->hw_value;
              #line 65 
              memset((void *)(& (channels + (unsigned long)j)->bssid_lsb),255,4UL);
              #line 66 
              memset((void *)(& (channels + (unsigned long)j)->bssid_msb),255,2UL);
              #line 69 
              cif_set_bit((long)i,(unsigned long *)(& wl->scan.scanned_ch));
              #line 71 
              j ++;
            }
    }
    #line 23 
    i ++;
  }
  #line 75 
  return j;
}

#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
static int wl1271_scan_send(struct wl1271 *wl, struct wl12xx_vif *wlvif, enum nl80211_band band, bool passive, u32 basic_rate)
{
  #line 113 
  int __ret_warn_on;
  #line 85 
  struct wl1271_cmd_scan *cmd;
  #line 86 
  struct wl1271_cmd_trigger_scan_to *trigger;
  #line 87 
  int ret;
  #line 84 
  struct ieee80211_vif *vif = wl12xx_wlvif_to_vif(wlvif);
  #line 88 
  u16 scan_options = (unsigned short)0U;
  #line 91 
  if (! passive && (wl->scan.req)->n_ssids == 0) 
                                                 #line 92 
                                                 return 1;
  #line 94 
  cmd = (struct wl1271_cmd_scan *)kzalloc_1(540UL,3264U);
  #line 95 
  trigger = (struct wl1271_cmd_trigger_scan_to *)kzalloc_1(8UL,3264U);
  #line 96 
  if (cmd == (struct wl1271_cmd_scan *)0 || trigger == (struct wl1271_cmd_trigger_scan_to *)0) {
    #line 97 
    ret = -12;
    #line 98 
    goto out;
  }
  #line 101 
  if (wl->conf.scan.split_scan_timeout != 0U) 
                                              #line 102 
                                              scan_options = (unsigned short)((unsigned int)scan_options | 2U);
  #line 104 
  if ((int)passive != 0) 
                         #line 105 
                         scan_options = (unsigned short)((unsigned int)scan_options | 1U);
  #line 108 
  if ((int)wlcore_is_p2p_mgmt(wlvif) != 0) 
                                           #line 109 
                                           cmd->params.role_id = wlvif->dev_role_id; else 
                                                                    #line 111 
                                                                    cmd->params.role_id = wlvif->role_id;
  #line 113 
  __ret_warn_on = (unsigned int)cmd->params.role_id == 255U;
  #line 113 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 114 
    ldv_inline_asm();
    #line 115 
    ldv_inline_asm();
  }
  #line 113 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) {
    #line 114 
    ret = -22;
    #line 115 
    goto out;
  }
  #line 118 
  cmd->params.scan_options = scan_options;
  #line 120 
  cmd->params.n_ch = (unsigned char)wl1271_get_scan_channels(wl,wl->scan.req,
                                 (struct basic_scan_channel_params *)(& cmd->channels),
                                 band,(_Bool)((bool)((int)passive) != 0));
  #line 123 
  if ((unsigned int)cmd->params.n_ch == 0U) {
    #line 124 
    ret = 1;
    #line 125 
    goto out;
  }
  #line 128 
  cmd->params.tx_rate = basic_rate;
  #line 129 
  cmd->params.n_probe_reqs = (unsigned char)wl->conf.scan.num_probe_reqs;
  #line 130 
  cmd->params.tid_trigger = (unsigned char)255U;
  #line 131 
  cmd->params.scan_tag = (unsigned char)1U;
  #line 133 
  if (band == (unsigned int)NL80211_BAND_2GHZ) 
                                               #line 134 
                                               cmd->params.band = (unsigned char)0U; else 
                                                                    #line 136 
                                                                    cmd->params.band = (unsigned char)1U;
  #line 138 
  if (wl->scan.ssid_len != 0UL) {
    #line 139 
    cmd->params.ssid_len = (unsigned char)wl->scan.ssid_len;
    #line 140 
    memcpy((void *)(& cmd->params.ssid),(void *)(& wl->scan.ssid),wl->scan.ssid_len);
  }
  #line 143 
  memcpy((void *)(& cmd->addr),(void *)(& vif->addr),6UL);
  #line 145 
  ret = wl12xx_cmd_build_probe_req(wl,wlvif,(unsigned char)((int)cmd->params.role_id),(unsigned char)((int)((unsigned char)band)),(u8 *)(& wl->scan.ssid),wl->scan.ssid_len,(wl->scan.req)->ie,(wl->scan.req)->ie_len,(u8 *)0U,0UL,(_Bool)0);
  #line 150 
  if (ret < 0) {
    #line 151 
    printk((char *)"\001");
    #line 152 
    goto out;
  }
  #line 155 
  trigger->timeout = wl->conf.scan.split_scan_timeout;
  #line 156 
  ret = wl1271_cmd_send(wl,(unsigned short)26,(void *)trigger,8UL,0UL);
  #line 158 
  if (ret < 0) {
    #line 159 
    printk((char *)"\001");
    #line 160 
    goto out;
  }
  #line 163 
  if ((wl12xx_debug_level & 256U) != 0U) {
    #line 163 
    bool branch;
    #line 163 
    struct _ddebug __UNIQUE_ID_ddebug562 = {.modname = (char *)"wl12xx", .function = (char *)"wl1271_scan_send", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c", .format = (char *)"wlcore", .lineno = (unsigned int)163U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 163 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug562.key.dd_key_false.key,(_Bool)0);
    #line 163 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 163 
                                                print_hex_dump((char *)"\001",(char *)"wlcore",2,16,1,(void *)cmd,540UL,(_Bool)0);
  }
  #line 165 
  ret = wl1271_cmd_send(wl,(unsigned short)7,(void *)cmd,540UL,0UL);
  #line 166 
  if (ret < 0) {
    #line 167 
    printk((char *)"\001");
    #line 168 
    goto out;
  }
  #line 171 
  out: 
       #line 171 
  ;
  #line 172 
  kfree((void *)cmd);
  #line 173 
  kfree((void *)trigger);
  #line 174 
  return ret;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
int wl12xx_scan_stop(struct wl1271 *wl, struct wl12xx_vif *wlvif)
{
  #line 182 
  int __ret_warn_on;
  #line 179 
  struct wl1271_cmd_header *cmd = (struct wl1271_cmd_header *)0;
  #line 180 
  int ret = 0;
  #line 182 
  __ret_warn_on = (unsigned int)wl->scan.state == 0U;
  #line 182 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 183 
    ldv_inline_asm();
    #line 184 
    ldv_inline_asm();
  }
  #line 182 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 183 
                                                return -22;
  #line 185 
  if ((long)((wl12xx_debug_level & 4096U) != 0U) != 0L) {
    #line 185 
    bool branch;
    #line 185 
    struct _ddebug __UNIQUE_ID_ddebug564 = {.modname = (char *)"wl12xx", .function = (char *)"wl12xx_scan_stop", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c", .format = (char *)"wlcore", .lineno = (unsigned int)185U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 185 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug564.key.dd_key_false.key,(_Bool)0);
    #line 185 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 185 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug564,(char *)"wlcore");
  }
  #line 187 
  cmd = (struct wl1271_cmd_header *)kzalloc_1(4UL,3264U);
  #line 188 
  if (cmd == (struct wl1271_cmd_header *)0) {
    #line 189 
    ret = -12;
    #line 190 
    goto out;
  }
  #line 193 
  ret = wl1271_cmd_send(wl,(unsigned short)8,(void *)cmd,4UL,0UL);
  #line 195 
  if (ret < 0) {
    #line 196 
    printk((char *)"\001");
    #line 197 
    goto out;
  }
  #line 199 
  out: 
       #line 199 
  ;
  #line 200 
  kfree((void *)cmd);
  #line 201 
  return ret;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
void wl1271_scan_stm(struct wl1271 *wl, struct wl12xx_vif *wlvif)
{
  #line 207 
  enum nl80211_band band;
  #line 208 
  u32 rate;
  #line 208 
  u32 mask;
  #line 206 
  int ret = 0;
  #line 210 
  switch ((int)wl->scan.state) {
    #line 211 
    case 0: 
            #line 211 
    ;
    #line 212 
    break;
    #line 214 
    case 1: 
            #line 214 
    ;
    #line 215 
    band = NL80211_BAND_2GHZ;
    #line 216 
    mask = wlvif->bitrate_masks[(unsigned int)band];
    #line 217 
    if ((int)(wl->scan.req)->no_cck != 0) {
      #line 218 
      mask &= 4294967256U;
      #line 219 
      if (mask == 0U) 
                      #line 220 
                      mask = 8U;
    }
    #line 222 
    rate = wl1271_tx_min_rate_get(wl,mask);
    #line 223 
    ret = wl1271_scan_send(wl,wlvif,band,(_Bool)0,rate);
    #line 224 
    if (ret == 1) {
      #line 225 
      wl->scan.state = (unsigned char)2U;
      #line 226 
      wl1271_scan_stm(wl,wlvif);
    }
    #line 229 
    break;
    #line 231 
    case 2: 
            #line 231 
    ;
    #line 232 
    band = NL80211_BAND_2GHZ;
    #line 233 
    mask = wlvif->bitrate_masks[(unsigned int)band];
    #line 234 
    if ((int)(wl->scan.req)->no_cck != 0) {
      #line 235 
      mask &= 4294967256U;
      #line 236 
      if (mask == 0U) 
                      #line 237 
                      mask = 8U;
    }
    #line 239 
    rate = wl1271_tx_min_rate_get(wl,mask);
    #line 240 
    ret = wl1271_scan_send(wl,wlvif,band,(_Bool)1,rate);
    #line 241 
    if (ret == 1) {
      #line 242 
      if ((int)wl->enable_11a != 0) 
                                    #line 243 
                                    wl->scan.state = (unsigned char)3U; else 
                                                                    #line 245 
                                                                    wl->scan.state = (unsigned char)5U;
      #line 246 
      wl1271_scan_stm(wl,wlvif);
    }
    #line 249 
    break;
    #line 251 
    case 3: 
            #line 251 
    ;
    #line 252 
    band = NL80211_BAND_5GHZ;
    #line 253 
    rate = wl1271_tx_min_rate_get(wl,wlvif->bitrate_masks[(unsigned int)band]);
    #line 254 
    ret = wl1271_scan_send(wl,wlvif,band,(_Bool)0,rate);
    #line 255 
    if (ret == 1) {
      #line 256 
      wl->scan.state = (unsigned char)4U;
      #line 257 
      wl1271_scan_stm(wl,wlvif);
    }
    #line 260 
    break;
    #line 262 
    case 4: 
            #line 262 
    ;
    #line 263 
    band = NL80211_BAND_5GHZ;
    #line 264 
    rate = wl1271_tx_min_rate_get(wl,wlvif->bitrate_masks[(unsigned int)band]);
    #line 265 
    ret = wl1271_scan_send(wl,wlvif,band,(_Bool)1,rate);
    #line 266 
    if (ret == 1) {
      #line 267 
      wl->scan.state = (unsigned char)5U;
      #line 268 
      wl1271_scan_stm(wl,wlvif);
    }
    #line 271 
    break;
    #line 273 
    case 5: 
            #line 273 
    ;
    #line 274 
    wl->scan.failed = (_Bool)0;
    #line 275 
    cancel_delayed_work(& wl->scan_complete_work);
    #line 276 
    ;
    #line 276 
    ;
    #line 276 
    ieee80211_queue_delayed_work(wl->hw,& wl->scan_complete_work,msecs_to_jiffies(0U));
    #line 278 
    break;
    #line 280 
    default: 
             #line 280 
    ;
    #line 281 
    printk((char *)"\001");
    #line 282 
    break;
  }
  #line 285 
  if (ret < 0) {
    #line 286 
    cancel_delayed_work(& wl->scan_complete_work);
    #line 287 
    ;
    #line 287 
    ;
    #line 287 
    ieee80211_queue_delayed_work(wl->hw,& wl->scan_complete_work,msecs_to_jiffies(0U));
  }
  #line 290 
  return;
}

#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
static void wl12xx_adjust_channels(struct wl1271_cmd_sched_scan_config *cmd, struct wlcore_scan_channels *cmd_channels)
{
  #line 295 
  memcpy((void *)(& cmd->passive),(void *)(& cmd_channels->passive),3UL);
  #line 296 
  memcpy((void *)(& cmd->active),(void *)(& cmd_channels->active),3UL);
  #line 297 
  cmd->dfs = cmd_channels->dfs;
  #line 298 
  cmd->n_pactive_ch = cmd_channels->passive_active;
  #line 300 
  memcpy((void *)(& cmd->channels_2),(void *)(& cmd_channels->channels_2),168UL);
  #line 302 
  memcpy((void *)(& cmd->channels_5),(void *)(& cmd_channels->channels_5),276UL);
  #line 303 
  return;
}

#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
int wl1271_scan_sched_scan_config(struct wl1271 *wl, struct wl12xx_vif *wlvif, struct cfg80211_sched_scan_request *req, struct ieee80211_scan_ies *ies)
{
  #line 315 
  int i;
  #line 315 
  int ret;
  #line 312 
  struct wl1271_cmd_sched_scan_config *cfg = (struct wl1271_cmd_sched_scan_config *)0;
  #line 313 
  struct wlcore_scan_channels *cfg_channels = (struct wlcore_scan_channels *)0;
  #line 314 
  struct conf_sched_scan_settings *c = & wl->conf.sched_scan;
  #line 316 
  bool force_passive = (_Bool)(req->n_ssids == 0);
  #line 318 
  if ((long)((wl12xx_debug_level & 4096U) != 0U) != 0L) {
    #line 318 
    bool branch;
    #line 318 
    struct _ddebug __UNIQUE_ID_ddebug565 = {.modname = (char *)"wl12xx", .function = (char *)"wl1271_scan_sched_scan_config", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c", .format = (char *)"wlcore", .lineno = (unsigned int)318U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 318 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug565.key.dd_key_false.key,(_Bool)0);
    #line 318 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 318 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug565,(char *)"wlcore");
  }
  #line 320 
  cfg = (struct wl1271_cmd_sched_scan_config *)kzalloc_1(612UL,3264U);
  #line 321 
  if (cfg == (struct wl1271_cmd_sched_scan_config *)0) 
                                                       #line 322 
                                                       return -12;
  #line 324 
  cfg->role_id = wlvif->role_id;
  #line 325 
  cfg->rssi_threshold = c->rssi_threshold;
  #line 326 
  cfg->snr_threshold = c->snr_threshold;
  #line 327 
  cfg->n_probe_reqs = c->num_probe_reqs;
  #line 329 
  cfg->cycles = (unsigned char)0U;
  #line 331 
  cfg->report_after = (unsigned char)1U;
  #line 333 
  cfg->terminate = (unsigned char)0U;
  #line 334 
  cfg->tag = (unsigned char)1U;
  #line 336 
  cfg->bss_type = (unsigned char)2U;
  #line 338 
  i = 0;
  #line 338 
  while (i <= 15) {
    #line 339 
    cfg->intervals[i] = (req->scan_plans)->interval * 1000U;
    #line 338 
    i ++;
  }
  #line 342 
  cfg->ssid_len = (unsigned char)0U;
  #line 343 
  ret = wlcore_scan_sched_scan_ssid_list(wl,wlvif,req);
  #line 344 
  if (ret < 0) 
               #line 345 
               goto out;
  #line 347 
  cfg->filter_type = (unsigned char)ret;
  #line 349 
  if ((long)((wl12xx_debug_level & 256U) != 0U) != 0L) {
    #line 349 
    bool branch_0;
    #line 349 
    struct _ddebug __UNIQUE_ID_ddebug566 = {.modname = (char *)"wl12xx", .function = (char *)"wl1271_scan_sched_scan_config", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c", .format = (char *)"wlcore", .lineno = (unsigned int)349U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 349 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug566.key.dd_key_false.key,(_Bool)0);
    #line 349 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 349 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug566,(char *)"wlcore",(int)cfg->filter_type);
  }
  #line 351 
  cfg_channels = (struct wlcore_scan_channels *)kzalloc_1(728UL,3264U);
  #line 352 
  if (cfg_channels == (struct wlcore_scan_channels *)0) {
    #line 353 
    ret = -12;
    #line 354 
    goto out;
  }
  #line 357 
  if (! wlcore_set_scan_chan_params(wl,cfg_channels,
                                    (struct ieee80211_channel **)(& req->channels),
                                    req->n_channels,
                                    (unsigned int)req->n_ssids,1)) {
    #line 360 
    printk((char *)"\001");
    #line 361 
    ret = -22;
    #line 362 
    goto out;
  }
  #line 364 
  wl12xx_adjust_channels(cfg,cfg_channels);
  #line 366 
  if (! force_passive && (unsigned int)cfg->active[0] != 0U) {
    #line 367 
    u8 band = (unsigned char)0U;
    #line 368 
    ret = wl12xx_cmd_build_probe_req(wl,wlvif,(unsigned char)((int)wlvif->role_id),(unsigned char)((int)band),(u8 *)(& (req->ssids)->ssid),(unsigned long)(req->ssids)->ssid_len,ies->ies[(int)band],ies->len[(int)band],ies->common_ies,ies->common_ie_len,(_Bool)1);
    #line 377 
    if (ret < 0) {
      #line 378 
      printk((char *)"\001");
      #line 379 
      goto out;
    }
  }
  #line 383 
  if (! force_passive && (unsigned int)cfg->active[1] != 0U) {
    #line 384 
    u8 band_0 = (unsigned char)1U;
    #line 385 
    ret = wl12xx_cmd_build_probe_req(wl,wlvif,(unsigned char)((int)wlvif->role_id),(unsigned char)((int)band_0),(u8 *)(& (req->ssids)->ssid),(unsigned long)(req->ssids)->ssid_len,ies->ies[(int)band_0],ies->len[(int)band_0],ies->common_ies,ies->common_ie_len,(_Bool)1);
    #line 394 
    if (ret < 0) {
      #line 395 
      printk((char *)"\001");
      #line 396 
      goto out;
    }
  }
  #line 400 
  if ((wl12xx_debug_level & 256U) != 0U) {
    #line 400 
    bool branch_1;
    #line 400 
    struct _ddebug __UNIQUE_ID_ddebug569 = {.modname = (char *)"wl12xx", .function = (char *)"wl1271_scan_sched_scan_config", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c", .format = (char *)"wlcore", .lineno = (unsigned int)400U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 400 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug569.key.dd_key_false.key,(_Bool)0);
    #line 400 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 400 
                                                  print_hex_dump((char *)"\001",(char *)"wlcore",2,16,1,(void *)cfg,612UL,(_Bool)0);
  }
  #line 402 
  ret = wl1271_cmd_send(wl,(unsigned short)27,(void *)cfg,612UL,0UL);
  #line 404 
  if (ret < 0) {
    #line 405 
    printk((char *)"\001");
    #line 406 
    goto out;
  }
  #line 408 
  out: 
       #line 408 
  ;
  #line 409 
  kfree((void *)cfg_channels);
  #line 410 
  kfree((void *)cfg);
  #line 411 
  return ret;
}

#line 414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
int wl1271_scan_sched_scan_start(struct wl1271 *wl, struct wl12xx_vif *wlvif)
{
  #line 416 
  struct wl1271_cmd_sched_scan_start *start;
  #line 417 
  int ret = 0;
  #line 419 
  if ((long)((wl12xx_debug_level & 4096U) != 0U) != 0L) {
    #line 419 
    bool branch;
    #line 419 
    struct _ddebug __UNIQUE_ID_ddebug570 = {.modname = (char *)"wl12xx", .function = (char *)"wl1271_scan_sched_scan_start", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c", .format = (char *)"wlcore", .lineno = (unsigned int)419U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 419 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug570.key.dd_key_false.key,(_Bool)0);
    #line 419 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 419 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug570,(char *)"wlcore");
  }
  #line 421 
  if ((unsigned int)wlvif->bss_type != 2U) 
                                           #line 422 
                                           return -95;
  #line 424 
  if (((unsigned long)wl->quirks & 512UL) != 0UL) {
    #line 424 
    if ((int)test_bit(11L,& wlvif->flags) != 0) 
                                                #line 426 
                                                return -16;
  }
  #line 428 
  start = (struct wl1271_cmd_sched_scan_start *)kzalloc_1(8UL,3264U);
  #line 429 
  if (start == (struct wl1271_cmd_sched_scan_start *)0) 
                                                        #line 430 
                                                        return -12;
  #line 432 
  start->role_id = wlvif->role_id;
  #line 433 
  start->tag = (unsigned char)1U;
  #line 435 
  ret = wl1271_cmd_send(wl,(unsigned short)29,(void *)start,8UL,0UL);
  #line 437 
  if (ret < 0) {
    #line 438 
    printk((char *)"\001");
    #line 439 
    goto out_free;
  }
  #line 442 
  out_free: 
            #line 442 
  ;
  #line 443 
  kfree((void *)start);
  #line 444 
  return ret;
}

#line 447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
int wl12xx_sched_scan_start(struct wl1271 *wl, struct wl12xx_vif *wlvif, struct cfg80211_sched_scan_request *req, struct ieee80211_scan_ies *ies)
{
  #line 451 
  int ret;
  #line 453 
  ret = wl1271_scan_sched_scan_config(wl,wlvif,req,ies);
  #line 454 
  if (ret < 0) 
               #line 455 
               return ret;
  #line 457 
  return wl1271_scan_sched_scan_start(wl,wlvif);
}

#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
void wl12xx_scan_sched_scan_stop(struct wl1271 *wl, struct wl12xx_vif *wlvif)
{
  #line 462 
  struct wl1271_cmd_sched_scan_stop *stop;
  #line 463 
  int ret = 0;
  #line 465 
  if ((long)((wl12xx_debug_level & 4096U) != 0U) != 0L) {
    #line 465 
    bool branch;
    #line 465 
    struct _ddebug __UNIQUE_ID_ddebug571 = {.modname = (char *)"wl12xx", .function = (char *)"wl12xx_scan_sched_scan_stop", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c", .format = (char *)"wlcore", .lineno = (unsigned int)465U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 465 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug571.key.dd_key_false.key,(_Bool)0);
    #line 465 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 465 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug571,(char *)"wlcore");
  }
  #line 468 
  stop = (struct wl1271_cmd_sched_scan_stop *)kzalloc_1(8UL,3264U);
  #line 469 
  if (stop == (struct wl1271_cmd_sched_scan_stop *)0) {
    #line 470 
    printk((char *)"\001");
    #line 471 
    return;
  }
  #line 474 
  stop->role_id = wlvif->role_id;
  #line 475 
  stop->tag = (unsigned char)1U;
  #line 477 
  ret = wl1271_cmd_send(wl,(unsigned short)30,(void *)stop,8UL,0UL);
  #line 479 
  if (ret < 0) {
    #line 480 
    printk((char *)"\001");
    #line 481 
    goto out_free;
  }
  #line 484 
  out_free: 
            #line 484 
  ;
  #line 485 
  kfree((void *)stop);
  #line 486 
  return;
}

#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
int wl12xx_scan_start(struct wl1271 *wl, struct wl12xx_vif *wlvif, struct cfg80211_scan_request *req)
{
  #line 491 
  wl1271_scan_stm(wl,wlvif);
  #line 492 
  return 0;
}

#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/scan.c"
void wl12xx_scan_completed(struct wl1271 *wl, struct wl12xx_vif *wlvif)
{
  #line 497 
  wl1271_scan_stm(wl,wlvif);
  #line 498 
  return;
}

#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/scan.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 116 
  ldv_set_bit(nr,addr);
  #line 117 
  return;
}

#line 413  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/scan.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  #line 416 
  return ldv_kzalloc(size,flags);
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/event.h"
#line 66 
void wlcore_event_soft_gemini_sense(struct wl1271 *, u8);
#line 67 
#line 67 
void wlcore_event_sched_scan_completed(struct wl1271 *, u8);
#line 69 
#line 69 
void wlcore_event_ba_rx_constraint(struct wl1271 *, unsigned long, unsigned long);
#line 72 
#line 72 
void wlcore_event_channel_switch(struct wl1271 *, unsigned long, bool);
#line 75 
#line 75 
void wlcore_event_beacon_loss(struct wl1271 *, unsigned long);
#line 76 
#line 76 
void wlcore_event_dummy_packet(struct wl1271 *);
#line 77 
#line 77 
void wlcore_event_max_tx_failure(struct wl1271 *, unsigned long);
#line 78 
#line 78 
void wlcore_event_inactive_sta(struct wl1271 *, unsigned long);
#line 79 
#line 79 
void wlcore_event_roc_complete(struct wl1271 *);
#line 80 
#line 80 
void wlcore_event_rssi_trigger(struct wl1271 *, s8 *);
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/event.h"
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/event.c"
int wl12xx_wait_for_event(struct wl1271 *wl, enum wlcore_wait_event event, bool *timeout);
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/event.h"
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/event.c"
int wl12xx_process_mailbox_events(struct wl1271 *wl);
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/cmd.h"
#line 94 
int wlcore_cmd_wait_for_event_or_timeout(struct wl1271 *, u32, bool *);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/scan.h"
#line 28 
void wlcore_scan_sched_scan_results(struct wl1271 *);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/event.c"
int wl12xx_wait_for_event(struct wl1271 *wl, enum wlcore_wait_event event, bool *timeout)
{
  #line 16 
  u32 local_event;
  #line 18 
  switch ((unsigned int)event) {
    #line 19 
    case (unsigned int)0: 
                          #line 19 
    ;
    #line 20 
    local_event = 32768U;
    #line 21 
    break;
    #line 23 
    case (unsigned int)1: 
                          #line 23 
    ;
    #line 24 
    local_event = 134217728U;
    #line 25 
    break;
    #line 27 
    default: 
             #line 27 
    ;
    #line 29 
    return 0;
  }
  #line 31 
  return wlcore_cmd_wait_for_event_or_timeout(wl,local_event,timeout);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/event.c"
int wl12xx_process_mailbox_events(struct wl1271 *wl)
{
  #line 37 
  u32 vector;
  #line 36 
  struct wl12xx_event_mailbox *mbox = (struct wl12xx_event_mailbox *)wl->mbox;
  #line 40 
  vector = mbox->events_vector;
  #line 41 
  vector = ~ mbox->events_mask & vector;
  #line 43 
  if ((long)((wl12xx_debug_level & 32U) != 0U) != 0L) {
    #line 43 
    bool branch;
    #line 43 
    struct _ddebug __UNIQUE_ID_ddebug555 = {.modname = (char *)"wl12xx", .function = (char *)"wl12xx_process_mailbox_events", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/event.c", .format = (char *)"wlcore", .lineno = (unsigned int)43U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 43 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug555.key.dd_key_false.key,(_Bool)0);
    #line 43 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 43 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug555,(char *)"wlcore",vector);
  }
  #line 45 
  if ((vector & 1024U) != 0U) {
    #line 46 
    if ((long)((wl12xx_debug_level & 32U) != 0U) != 0L) {
      #line 46 
      bool branch_0;
      #line 46 
      struct _ddebug __UNIQUE_ID_ddebug556 = {.modname = (char *)"wl12xx", .function = (char *)"wl12xx_process_mailbox_events", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/event.c", .format = (char *)"wlcore", .lineno = (unsigned int)46U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 46 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug556.key.dd_key_false.key,(_Bool)0);
      #line 46 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 46 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug556,(char *)"wlcore",(int)mbox->scheduled_scan_status);
    }
    #line 49 
    if (wl->scan_wlvif != (struct wl12xx_vif *)0) 
                                                  #line 50 
                                                  wl12xx_scan_completed(wl,wl->scan_wlvif);
  }
  #line 53 
  if ((vector & 536870912U) != 0U) {
    #line 54 
    if ((long)((wl12xx_debug_level & 32U) != 0U) != 0L) {
      #line 54 
      bool branch_1;
      #line 54 
      struct _ddebug __UNIQUE_ID_ddebug557 = {.modname = (char *)"wl12xx", .function = (char *)"wl12xx_process_mailbox_events", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/event.c", .format = (char *)"wlcore", .lineno = (unsigned int)54U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 54 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug557.key.dd_key_false.key,(_Bool)0);
      #line 54 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 54 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug557,(char *)"wlcore",(int)mbox->scheduled_scan_status);
    }
    #line 58 
    wlcore_scan_sched_scan_results(wl);
  }
  #line 61 
  if ((vector & 268435456U) != 0U) 
                                   #line 62 
                                   wlcore_event_sched_scan_completed(wl,(unsigned char)((int)mbox->scheduled_scan_status));
  #line 64 
  if ((vector & 4194304U) != 0U) 
                                 #line 65 
                                 wlcore_event_soft_gemini_sense(wl,(unsigned char)((int)mbox->soft_gemini_sense_info));
  #line 68 
  if ((vector & 262144U) != 0U) 
                                #line 69 
                                wlcore_event_beacon_loss(wl,255UL);
  #line 71 
  if ((vector & 1U) != 0U) 
                           #line 72 
                           wlcore_event_rssi_trigger(wl,(s8 *)(& mbox->rssi_snr_trigger_metric));
  #line 74 
  if ((vector & 1073741824U) != 0U) 
                                    #line 75 
                                    wlcore_event_ba_rx_constraint(wl,1UL << (int)mbox->role_id,(unsigned long)mbox->rx_ba_allowed);
  #line 79 
  if ((vector & 131072U) != 0U) 
                                #line 80 
                                wlcore_event_channel_switch(wl,255UL,(_Bool)((unsigned int)mbox->channel_switch_status != 0U));
  #line 83 
  if ((vector & 2097152U) != 0U) 
                                 #line 84 
                                 wlcore_event_dummy_packet(wl);
  #line 90 
  if ((vector & 1048576U) != 0U) 
                                 #line 91 
                                 wlcore_event_max_tx_failure(wl,(unsigned long)mbox->sta_tx_retry_exceeded);
  #line 94 
  if ((vector & 67108864U) != 0U) 
                                  #line 95 
                                  wlcore_event_inactive_sta(wl,(unsigned long)mbox->sta_aging_status);
  #line 98 
  if ((vector & 2147483648U) != 0U) 
                                    #line 99 
                                    wlcore_event_roc_complete(wl);
  #line 101 
  return 0;
}

#line 3135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
#line 3135 
loff_t generic_file_llseek(struct file *, loff_t, int);
#line 3300 
#line 3300 
int simple_open(struct inode *, struct file *);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 1264  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 1256  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/debugfs.h"
#line 15 
int wl1271_format_buffer(char *, size_t, loff_t *, char * , ...);
#line 21 
#line 21 
void wl1271_debugfs_update_stats(struct wl1271 *);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.h"
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
int wl12xx_debugfs_add_files(struct wl1271 *wl, struct dentry *rootdir);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t tx_internal_desc_overflow_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 19 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 19 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 19 
  wl1271_debugfs_update_stats(wl);
  #line 19 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.internal_desc_overflow);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations tx_internal_desc_overflow_ops = {.llseek = & generic_file_llseek, .read = & tx_internal_desc_overflow_read, .open = & simple_open};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t rx_out_of_mem_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 21 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 21 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 21 
  wl1271_debugfs_update_stats(wl);
  #line 21 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.out_of_mem);
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations rx_out_of_mem_ops = {.llseek = & generic_file_llseek, .read = & rx_out_of_mem_read, .open = & simple_open};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t rx_hdr_overflow_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 22 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 22 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 22 
  wl1271_debugfs_update_stats(wl);
  #line 22 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.hdr_overflow);
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations rx_hdr_overflow_ops = {.llseek = & generic_file_llseek, .read = & rx_hdr_overflow_read, .open = & simple_open};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t rx_hw_stuck_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 23 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 23 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 23 
  wl1271_debugfs_update_stats(wl);
  #line 23 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.hw_stuck);
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations rx_hw_stuck_ops = {.llseek = & generic_file_llseek, .read = & rx_hw_stuck_read, .open = & simple_open};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t rx_dropped_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 24 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 24 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 24 
  wl1271_debugfs_update_stats(wl);
  #line 24 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",stats->rx.dropped);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations rx_dropped_ops = {.llseek = & generic_file_llseek, .read = & rx_dropped_read, .open = & simple_open};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t rx_fcs_err_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 25 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 25 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 25 
  wl1271_debugfs_update_stats(wl);
  #line 25 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",stats->rx.fcs_err);
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations rx_fcs_err_ops = {.llseek = & generic_file_llseek, .read = & rx_fcs_err_read, .open = & simple_open};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t rx_xfr_hint_trig_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 26 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 26 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 26 
  wl1271_debugfs_update_stats(wl);
  #line 26 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.xfr_hint_trig);
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations rx_xfr_hint_trig_ops = {.llseek = & generic_file_llseek, .read = & rx_xfr_hint_trig_read, .open = & simple_open};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t rx_path_reset_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 27 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 27 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 27 
  wl1271_debugfs_update_stats(wl);
  #line 27 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.path_reset);
}

#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations rx_path_reset_ops = {.llseek = & generic_file_llseek, .read = & rx_path_reset_read, .open = & simple_open};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t rx_reset_counter_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 28 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 28 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 28 
  wl1271_debugfs_update_stats(wl);
  #line 28 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.reset_counter);
}

#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations rx_reset_counter_ops = {.llseek = & generic_file_llseek, .read = & rx_reset_counter_read, .open = & simple_open};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t dma_rx_requested_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 30 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 30 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 30 
  wl1271_debugfs_update_stats(wl);
  #line 30 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->dma.rx_requested);
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations dma_rx_requested_ops = {.llseek = & generic_file_llseek, .read = & dma_rx_requested_read, .open = & simple_open};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t dma_rx_errors_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 31 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 31 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 31 
  wl1271_debugfs_update_stats(wl);
  #line 31 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->dma.rx_errors);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations dma_rx_errors_ops = {.llseek = & generic_file_llseek, .read = & dma_rx_errors_read, .open = & simple_open};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t dma_tx_requested_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 32 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 32 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 32 
  wl1271_debugfs_update_stats(wl);
  #line 32 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->dma.tx_requested);
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations dma_tx_requested_ops = {.llseek = & generic_file_llseek, .read = & dma_tx_requested_read, .open = & simple_open};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t dma_tx_errors_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 33 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 33 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 33 
  wl1271_debugfs_update_stats(wl);
  #line 33 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->dma.tx_errors);
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations dma_tx_errors_ops = {.llseek = & generic_file_llseek, .read = & dma_tx_errors_read, .open = & simple_open};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t isr_cmd_cmplt_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 35 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 35 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 35 
  wl1271_debugfs_update_stats(wl);
  #line 35 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->isr.cmd_cmplt);
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations isr_cmd_cmplt_ops = {.llseek = & generic_file_llseek, .read = & isr_cmd_cmplt_read, .open = & simple_open};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t isr_fiqs_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 36 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 36 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 36 
  wl1271_debugfs_update_stats(wl);
  #line 36 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",stats->isr.fiqs);
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations isr_fiqs_ops = {.llseek = & generic_file_llseek, .read = & isr_fiqs_read, .open = & simple_open};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t isr_rx_headers_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 37 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 37 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 37 
  wl1271_debugfs_update_stats(wl);
  #line 37 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->isr.rx_headers);
}

#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations isr_rx_headers_ops = {.llseek = & generic_file_llseek, .read = & isr_rx_headers_read, .open = & simple_open};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t isr_rx_mem_overflow_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 38 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 38 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 38 
  wl1271_debugfs_update_stats(wl);
  #line 38 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->isr.rx_mem_overflow);
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations isr_rx_mem_overflow_ops = {.llseek = & generic_file_llseek, .read = & isr_rx_mem_overflow_read, .open = & simple_open};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t isr_rx_rdys_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 39 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 39 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 39 
  wl1271_debugfs_update_stats(wl);
  #line 39 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->isr.rx_rdys);
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations isr_rx_rdys_ops = {.llseek = & generic_file_llseek, .read = & isr_rx_rdys_read, .open = & simple_open};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t isr_irqs_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 40 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 40 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 40 
  wl1271_debugfs_update_stats(wl);
  #line 40 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",stats->isr.irqs);
}

#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations isr_irqs_ops = {.llseek = & generic_file_llseek, .read = & isr_irqs_read, .open = & simple_open};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t isr_tx_procs_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 41 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 41 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 41 
  wl1271_debugfs_update_stats(wl);
  #line 41 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->isr.tx_procs);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations isr_tx_procs_ops = {.llseek = & generic_file_llseek, .read = & isr_tx_procs_read, .open = & simple_open};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t isr_decrypt_done_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 42 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 42 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 42 
  wl1271_debugfs_update_stats(wl);
  #line 42 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->isr.decrypt_done);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations isr_decrypt_done_ops = {.llseek = & generic_file_llseek, .read = & isr_decrypt_done_read, .open = & simple_open};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t isr_dma0_done_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 43 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 43 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 43 
  wl1271_debugfs_update_stats(wl);
  #line 43 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->isr.dma0_done);
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations isr_dma0_done_ops = {.llseek = & generic_file_llseek, .read = & isr_dma0_done_read, .open = & simple_open};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t isr_dma1_done_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 44 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 44 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 44 
  wl1271_debugfs_update_stats(wl);
  #line 44 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->isr.dma1_done);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations isr_dma1_done_ops = {.llseek = & generic_file_llseek, .read = & isr_dma1_done_read, .open = & simple_open};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t isr_tx_exch_complete_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 45 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 45 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 45 
  wl1271_debugfs_update_stats(wl);
  #line 45 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->isr.tx_exch_complete);
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations isr_tx_exch_complete_ops = {.llseek = & generic_file_llseek, .read = & isr_tx_exch_complete_read, .open = & simple_open};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t isr_commands_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 46 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 46 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 46 
  wl1271_debugfs_update_stats(wl);
  #line 46 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->isr.commands);
}

#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations isr_commands_ops = {.llseek = & generic_file_llseek, .read = & isr_commands_read, .open = & simple_open};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t isr_rx_procs_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 47 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 47 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 47 
  wl1271_debugfs_update_stats(wl);
  #line 47 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->isr.rx_procs);
}

#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations isr_rx_procs_ops = {.llseek = & generic_file_llseek, .read = & isr_rx_procs_read, .open = & simple_open};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t isr_hw_pm_mode_changes_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 48 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 48 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 48 
  wl1271_debugfs_update_stats(wl);
  #line 48 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->isr.hw_pm_mode_changes);
}

#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations isr_hw_pm_mode_changes_ops = {.llseek = & generic_file_llseek, .read = & isr_hw_pm_mode_changes_read, .open = & simple_open};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t isr_host_acknowledges_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 49 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 49 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 49 
  wl1271_debugfs_update_stats(wl);
  #line 49 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->isr.host_acknowledges);
}

#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations isr_host_acknowledges_ops = {.llseek = & generic_file_llseek, .read = & isr_host_acknowledges_read, .open = & simple_open};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t isr_pci_pm_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 50 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 50 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 50 
  wl1271_debugfs_update_stats(wl);
  #line 50 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",stats->isr.pci_pm);
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations isr_pci_pm_ops = {.llseek = & generic_file_llseek, .read = & isr_pci_pm_read, .open = & simple_open};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t isr_wakeups_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 51 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 51 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 51 
  wl1271_debugfs_update_stats(wl);
  #line 51 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->isr.wakeups);
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations isr_wakeups_ops = {.llseek = & generic_file_llseek, .read = & isr_wakeups_read, .open = & simple_open};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t isr_low_rssi_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 52 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 52 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 52 
  wl1271_debugfs_update_stats(wl);
  #line 52 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->isr.low_rssi);
}

#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations isr_low_rssi_ops = {.llseek = & generic_file_llseek, .read = & isr_low_rssi_read, .open = & simple_open};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t wep_addr_key_count_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 54 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 54 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 54 
  wl1271_debugfs_update_stats(wl);
  #line 54 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->wep.addr_key_count);
}

#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations wep_addr_key_count_ops = {.llseek = & generic_file_llseek, .read = & wep_addr_key_count_read, .open = & simple_open};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t wep_default_key_count_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 55 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 55 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 55 
  wl1271_debugfs_update_stats(wl);
  #line 55 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->wep.default_key_count);
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations wep_default_key_count_ops = {.llseek = & generic_file_llseek, .read = & wep_default_key_count_read, .open = & simple_open};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t wep_key_not_found_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 57 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 57 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 57 
  wl1271_debugfs_update_stats(wl);
  #line 57 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->wep.key_not_found);
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations wep_key_not_found_ops = {.llseek = & generic_file_llseek, .read = & wep_key_not_found_read, .open = & simple_open};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t wep_decrypt_fail_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 58 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 58 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 58 
  wl1271_debugfs_update_stats(wl);
  #line 58 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->wep.decrypt_fail);
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations wep_decrypt_fail_ops = {.llseek = & generic_file_llseek, .read = & wep_decrypt_fail_read, .open = & simple_open};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t wep_packets_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 59 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 59 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 59 
  wl1271_debugfs_update_stats(wl);
  #line 59 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->wep.packets);
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations wep_packets_ops = {.llseek = & generic_file_llseek, .read = & wep_packets_read, .open = & simple_open};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t wep_interrupt_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 60 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 60 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 60 
  wl1271_debugfs_update_stats(wl);
  #line 60 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->wep.interrupt);
}

#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations wep_interrupt_ops = {.llseek = & generic_file_llseek, .read = & wep_interrupt_read, .open = & simple_open};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t pwr_ps_enter_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 62 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 62 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 62 
  wl1271_debugfs_update_stats(wl);
  #line 62 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.ps_enter);
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations pwr_ps_enter_ops = {.llseek = & generic_file_llseek, .read = & pwr_ps_enter_read, .open = & simple_open};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t pwr_elp_enter_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 63 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 63 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 63 
  wl1271_debugfs_update_stats(wl);
  #line 63 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.elp_enter);
}

#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations pwr_elp_enter_ops = {.llseek = & generic_file_llseek, .read = & pwr_elp_enter_read, .open = & simple_open};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t pwr_missing_bcns_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 64 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 64 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 64 
  wl1271_debugfs_update_stats(wl);
  #line 64 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.missing_bcns);
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations pwr_missing_bcns_ops = {.llseek = & generic_file_llseek, .read = & pwr_missing_bcns_read, .open = & simple_open};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t pwr_wake_on_host_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 65 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 65 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 65 
  wl1271_debugfs_update_stats(wl);
  #line 65 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.wake_on_host);
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations pwr_wake_on_host_ops = {.llseek = & generic_file_llseek, .read = & pwr_wake_on_host_read, .open = & simple_open};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t pwr_wake_on_timer_exp_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 66 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 66 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 66 
  wl1271_debugfs_update_stats(wl);
  #line 66 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.wake_on_timer_exp);
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations pwr_wake_on_timer_exp_ops = {.llseek = & generic_file_llseek, .read = & pwr_wake_on_timer_exp_read, .open = & simple_open};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t pwr_tx_with_ps_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 67 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 67 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 67 
  wl1271_debugfs_update_stats(wl);
  #line 67 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.tx_with_ps);
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations pwr_tx_with_ps_ops = {.llseek = & generic_file_llseek, .read = & pwr_tx_with_ps_read, .open = & simple_open};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t pwr_tx_without_ps_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 68 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 68 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 68 
  wl1271_debugfs_update_stats(wl);
  #line 68 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.tx_without_ps);
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations pwr_tx_without_ps_ops = {.llseek = & generic_file_llseek, .read = & pwr_tx_without_ps_read, .open = & simple_open};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t pwr_rcvd_beacons_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 69 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 69 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 69 
  wl1271_debugfs_update_stats(wl);
  #line 69 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.rcvd_beacons);
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations pwr_rcvd_beacons_ops = {.llseek = & generic_file_llseek, .read = & pwr_rcvd_beacons_read, .open = & simple_open};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t pwr_power_save_off_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 70 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 70 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 70 
  wl1271_debugfs_update_stats(wl);
  #line 70 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.power_save_off);
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations pwr_power_save_off_ops = {.llseek = & generic_file_llseek, .read = & pwr_power_save_off_read, .open = & simple_open};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t pwr_enable_ps_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 71 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 71 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 71 
  wl1271_debugfs_update_stats(wl);
  #line 71 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           (int)stats->pwr.enable_ps);
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations pwr_enable_ps_ops = {.llseek = & generic_file_llseek, .read = & pwr_enable_ps_read, .open = & simple_open};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t pwr_disable_ps_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 72 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 72 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 72 
  wl1271_debugfs_update_stats(wl);
  #line 72 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           (int)stats->pwr.disable_ps);
}

#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations pwr_disable_ps_ops = {.llseek = & generic_file_llseek, .read = & pwr_disable_ps_read, .open = & simple_open};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t pwr_fix_tsf_ps_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 73 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 73 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 73 
  wl1271_debugfs_update_stats(wl);
  #line 73 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.fix_tsf_ps);
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations pwr_fix_tsf_ps_ops = {.llseek = & generic_file_llseek, .read = & pwr_fix_tsf_ps_read, .open = & simple_open};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t pwr_rcvd_awake_beacons_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 75 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 75 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 75 
  wl1271_debugfs_update_stats(wl);
  #line 75 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.rcvd_awake_beacons);
}

#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations pwr_rcvd_awake_beacons_ops = {.llseek = & generic_file_llseek, .read = & pwr_rcvd_awake_beacons_read, .open = & simple_open};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t mic_rx_pkts_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 77 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 77 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 77 
  wl1271_debugfs_update_stats(wl);
  #line 77 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->mic.rx_pkts);
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations mic_rx_pkts_ops = {.llseek = & generic_file_llseek, .read = & mic_rx_pkts_read, .open = & simple_open};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t mic_calc_failure_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 78 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 78 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 78 
  wl1271_debugfs_update_stats(wl);
  #line 78 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->mic.calc_failure);
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations mic_calc_failure_ops = {.llseek = & generic_file_llseek, .read = & mic_calc_failure_read, .open = & simple_open};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t aes_encrypt_fail_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 80 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 80 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 80 
  wl1271_debugfs_update_stats(wl);
  #line 80 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->aes.encrypt_fail);
}

#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations aes_encrypt_fail_ops = {.llseek = & generic_file_llseek, .read = & aes_encrypt_fail_read, .open = & simple_open};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t aes_decrypt_fail_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 81 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 81 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 81 
  wl1271_debugfs_update_stats(wl);
  #line 81 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->aes.decrypt_fail);
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations aes_decrypt_fail_ops = {.llseek = & generic_file_llseek, .read = & aes_decrypt_fail_read, .open = & simple_open};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t aes_encrypt_packets_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 82 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 82 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 82 
  wl1271_debugfs_update_stats(wl);
  #line 82 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->aes.encrypt_packets);
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations aes_encrypt_packets_ops = {.llseek = & generic_file_llseek, .read = & aes_encrypt_packets_read, .open = & simple_open};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t aes_decrypt_packets_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 83 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 83 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 83 
  wl1271_debugfs_update_stats(wl);
  #line 83 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->aes.decrypt_packets);
}

#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations aes_decrypt_packets_ops = {.llseek = & generic_file_llseek, .read = & aes_decrypt_packets_read, .open = & simple_open};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t aes_encrypt_interrupt_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 84 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 84 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 84 
  wl1271_debugfs_update_stats(wl);
  #line 84 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->aes.encrypt_interrupt);
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations aes_encrypt_interrupt_ops = {.llseek = & generic_file_llseek, .read = & aes_encrypt_interrupt_read, .open = & simple_open};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t aes_decrypt_interrupt_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 85 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 85 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 85 
  wl1271_debugfs_update_stats(wl);
  #line 85 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->aes.decrypt_interrupt);
}

#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations aes_decrypt_interrupt_ops = {.llseek = & generic_file_llseek, .read = & aes_decrypt_interrupt_read, .open = & simple_open};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t event_heart_beat_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 87 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 87 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 87 
  wl1271_debugfs_update_stats(wl);
  #line 87 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->event.heart_beat);
}

#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations event_heart_beat_ops = {.llseek = & generic_file_llseek, .read = & event_heart_beat_read, .open = & simple_open};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t event_calibration_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 88 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 88 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 88 
  wl1271_debugfs_update_stats(wl);
  #line 88 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->event.calibration);
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations event_calibration_ops = {.llseek = & generic_file_llseek, .read = & event_calibration_read, .open = & simple_open};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t event_rx_mismatch_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 89 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 89 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 89 
  wl1271_debugfs_update_stats(wl);
  #line 89 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->event.rx_mismatch);
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations event_rx_mismatch_ops = {.llseek = & generic_file_llseek, .read = & event_rx_mismatch_read, .open = & simple_open};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t event_rx_mem_empty_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 90 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 90 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 90 
  wl1271_debugfs_update_stats(wl);
  #line 90 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->event.rx_mem_empty);
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations event_rx_mem_empty_ops = {.llseek = & generic_file_llseek, .read = & event_rx_mem_empty_read, .open = & simple_open};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t event_rx_pool_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 91 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 91 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 91 
  wl1271_debugfs_update_stats(wl);
  #line 91 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->event.rx_pool);
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations event_rx_pool_ops = {.llseek = & generic_file_llseek, .read = & event_rx_pool_read, .open = & simple_open};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t event_oom_late_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 92 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 92 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 92 
  wl1271_debugfs_update_stats(wl);
  #line 92 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->event.oom_late);
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations event_oom_late_ops = {.llseek = & generic_file_llseek, .read = & event_oom_late_read, .open = & simple_open};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t event_phy_transmit_error_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 93 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 93 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 93 
  wl1271_debugfs_update_stats(wl);
  #line 93 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->event.phy_transmit_error);
}

#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations event_phy_transmit_error_ops = {.llseek = & generic_file_llseek, .read = & event_phy_transmit_error_read, .open = & simple_open};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t event_tx_stuck_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 94 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 94 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 94 
  wl1271_debugfs_update_stats(wl);
  #line 94 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->event.tx_stuck);
}

#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations event_tx_stuck_ops = {.llseek = & generic_file_llseek, .read = & event_tx_stuck_read, .open = & simple_open};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t ps_pspoll_timeouts_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 96 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 96 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 96 
  wl1271_debugfs_update_stats(wl);
  #line 96 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->ps.pspoll_timeouts);
}

#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations ps_pspoll_timeouts_ops = {.llseek = & generic_file_llseek, .read = & ps_pspoll_timeouts_read, .open = & simple_open};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t ps_upsd_timeouts_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 97 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 97 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 97 
  wl1271_debugfs_update_stats(wl);
  #line 97 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->ps.upsd_timeouts);
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations ps_upsd_timeouts_ops = {.llseek = & generic_file_llseek, .read = & ps_upsd_timeouts_read, .open = & simple_open};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t ps_upsd_max_sptime_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 98 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 98 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 98 
  wl1271_debugfs_update_stats(wl);
  #line 98 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->ps.upsd_max_sptime);
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations ps_upsd_max_sptime_ops = {.llseek = & generic_file_llseek, .read = & ps_upsd_max_sptime_read, .open = & simple_open};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t ps_upsd_max_apturn_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 99 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 99 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 99 
  wl1271_debugfs_update_stats(wl);
  #line 99 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->ps.upsd_max_apturn);
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations ps_upsd_max_apturn_ops = {.llseek = & generic_file_llseek, .read = & ps_upsd_max_apturn_read, .open = & simple_open};
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t ps_pspoll_max_apturn_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 100 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 100 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 100 
  wl1271_debugfs_update_stats(wl);
  #line 100 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->ps.pspoll_max_apturn);
}

#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations ps_pspoll_max_apturn_ops = {.llseek = & generic_file_llseek, .read = & ps_pspoll_max_apturn_read, .open = & simple_open};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t ps_pspoll_utilization_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 101 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 101 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 101 
  wl1271_debugfs_update_stats(wl);
  #line 101 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->ps.pspoll_utilization);
}

#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations ps_pspoll_utilization_ops = {.llseek = & generic_file_llseek, .read = & ps_pspoll_utilization_read, .open = & simple_open};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t ps_upsd_utilization_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 102 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 102 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 102 
  wl1271_debugfs_update_stats(wl);
  #line 102 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->ps.upsd_utilization);
}

#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations ps_upsd_utilization_ops = {.llseek = & generic_file_llseek, .read = & ps_upsd_utilization_read, .open = & simple_open};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t rxpipe_rx_prep_beacon_drop_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 104 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 104 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 104 
  wl1271_debugfs_update_stats(wl);
  #line 104 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rxpipe.rx_prep_beacon_drop);
}

#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations rxpipe_rx_prep_beacon_drop_ops = {.llseek = & generic_file_llseek, .read = & rxpipe_rx_prep_beacon_drop_read, .open = & simple_open};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t rxpipe_descr_host_int_trig_rx_data_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 105 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 105 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 105 
  wl1271_debugfs_update_stats(wl);
  #line 105 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rxpipe.descr_host_int_trig_rx_data);
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations rxpipe_descr_host_int_trig_rx_data_ops = {.llseek = & generic_file_llseek, .read = & rxpipe_descr_host_int_trig_rx_data_read, .open = & simple_open};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t rxpipe_beacon_buffer_thres_host_int_trig_rx_data_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 106 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 106 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 106 
  wl1271_debugfs_update_stats(wl);
  #line 106 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rxpipe.beacon_buffer_thres_host_int_trig_rx_data);
}

#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops = {.llseek = & generic_file_llseek, .read = & rxpipe_beacon_buffer_thres_host_int_trig_rx_data_read, .open = & simple_open};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t rxpipe_missed_beacon_host_int_trig_rx_data_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 108 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 108 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 108 
  wl1271_debugfs_update_stats(wl);
  #line 108 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rxpipe.missed_beacon_host_int_trig_rx_data);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations rxpipe_missed_beacon_host_int_trig_rx_data_ops = {.llseek = & generic_file_llseek, .read = & rxpipe_missed_beacon_host_int_trig_rx_data_read, .open = & simple_open};
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static ssize_t rxpipe_tx_xfr_host_int_trig_rx_data_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 109 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 109 
  struct wl12xx_acx_statistics *stats = (struct wl12xx_acx_statistics *)wl->stats.fw_stats;
  #line 109 
  wl1271_debugfs_update_stats(wl);
  #line 109 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rxpipe.tx_xfr_host_int_trig_rx_data);
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
static struct file_operations rxpipe_tx_xfr_host_int_trig_rx_data_ops = {.llseek = & generic_file_llseek, .read = & rxpipe_tx_xfr_host_int_trig_rx_data_read, .open = & simple_open};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/debugfs.c"
int wl12xx_debugfs_add_files(struct wl1271 *wl, struct dentry *rootdir)
{
  #line 114 
  struct dentry *stats;
  #line 114 
  struct dentry *moddir;
  #line 116 
  moddir = cif_debugfs_create_dir((char *)"wl12xx",rootdir);
  #line 117 
  stats = cif_debugfs_create_dir((char *)"fw_stats",moddir);
  #line 119 
  cif_debugfs_create_file((char *)"tx_internal_desc_overflow",(unsigned short)256,stats,(void *)wl,& tx_internal_desc_overflow_ops);
  #line 121 
  cif_debugfs_create_file((char *)"rx_out_of_mem",(unsigned short)256,stats,(void *)wl,& rx_out_of_mem_ops);
  #line 122 
  cif_debugfs_create_file((char *)"rx_hdr_overflow",(unsigned short)256,stats,(void *)wl,& rx_hdr_overflow_ops);
  #line 123 
  cif_debugfs_create_file((char *)"rx_hw_stuck",(unsigned short)256,stats,(void *)wl,& rx_hw_stuck_ops);
  #line 124 
  cif_debugfs_create_file((char *)"rx_dropped",(unsigned short)256,stats,(void *)wl,& rx_dropped_ops);
  #line 125 
  cif_debugfs_create_file((char *)"rx_fcs_err",(unsigned short)256,stats,(void *)wl,& rx_fcs_err_ops);
  #line 126 
  cif_debugfs_create_file((char *)"rx_xfr_hint_trig",(unsigned short)256,stats,(void *)wl,& rx_xfr_hint_trig_ops);
  #line 127 
  cif_debugfs_create_file((char *)"rx_path_reset",(unsigned short)256,stats,(void *)wl,& rx_path_reset_ops);
  #line 128 
  cif_debugfs_create_file((char *)"rx_reset_counter",(unsigned short)256,stats,(void *)wl,& rx_reset_counter_ops);
  #line 130 
  cif_debugfs_create_file((char *)"dma_rx_requested",(unsigned short)256,stats,(void *)wl,& dma_rx_requested_ops);
  #line 131 
  cif_debugfs_create_file((char *)"dma_rx_errors",(unsigned short)256,stats,(void *)wl,& dma_rx_errors_ops);
  #line 132 
  cif_debugfs_create_file((char *)"dma_tx_requested",(unsigned short)256,stats,(void *)wl,& dma_tx_requested_ops);
  #line 133 
  cif_debugfs_create_file((char *)"dma_tx_errors",(unsigned short)256,stats,(void *)wl,& dma_tx_errors_ops);
  #line 135 
  cif_debugfs_create_file((char *)"isr_cmd_cmplt",(unsigned short)256,stats,(void *)wl,& isr_cmd_cmplt_ops);
  #line 136 
  cif_debugfs_create_file((char *)"isr_fiqs",(unsigned short)256,stats,(void *)wl,& isr_fiqs_ops);
  #line 137 
  cif_debugfs_create_file((char *)"isr_rx_headers",(unsigned short)256,stats,(void *)wl,& isr_rx_headers_ops);
  #line 138 
  cif_debugfs_create_file((char *)"isr_rx_mem_overflow",(unsigned short)256,stats,(void *)wl,& isr_rx_mem_overflow_ops);
  #line 139 
  cif_debugfs_create_file((char *)"isr_rx_rdys",(unsigned short)256,stats,(void *)wl,& isr_rx_rdys_ops);
  #line 140 
  cif_debugfs_create_file((char *)"isr_irqs",(unsigned short)256,stats,(void *)wl,& isr_irqs_ops);
  #line 141 
  cif_debugfs_create_file((char *)"isr_tx_procs",(unsigned short)256,stats,(void *)wl,& isr_tx_procs_ops);
  #line 142 
  cif_debugfs_create_file((char *)"isr_decrypt_done",(unsigned short)256,stats,(void *)wl,& isr_decrypt_done_ops);
  #line 143 
  cif_debugfs_create_file((char *)"isr_dma0_done",(unsigned short)256,stats,(void *)wl,& isr_dma0_done_ops);
  #line 144 
  cif_debugfs_create_file((char *)"isr_dma1_done",(unsigned short)256,stats,(void *)wl,& isr_dma1_done_ops);
  #line 145 
  cif_debugfs_create_file((char *)"isr_tx_exch_complete",(unsigned short)256,stats,(void *)wl,& isr_tx_exch_complete_ops);
  #line 146 
  cif_debugfs_create_file((char *)"isr_commands",(unsigned short)256,stats,(void *)wl,& isr_commands_ops);
  #line 147 
  cif_debugfs_create_file((char *)"isr_rx_procs",(unsigned short)256,stats,(void *)wl,& isr_rx_procs_ops);
  #line 148 
  cif_debugfs_create_file((char *)"isr_hw_pm_mode_changes",(unsigned short)256,stats,(void *)wl,& isr_hw_pm_mode_changes_ops);
  #line 149 
  cif_debugfs_create_file((char *)"isr_host_acknowledges",(unsigned short)256,stats,(void *)wl,& isr_host_acknowledges_ops);
  #line 150 
  cif_debugfs_create_file((char *)"isr_pci_pm",(unsigned short)256,stats,(void *)wl,& isr_pci_pm_ops);
  #line 151 
  cif_debugfs_create_file((char *)"isr_wakeups",(unsigned short)256,stats,(void *)wl,& isr_wakeups_ops);
  #line 152 
  cif_debugfs_create_file((char *)"isr_low_rssi",(unsigned short)256,stats,(void *)wl,& isr_low_rssi_ops);
  #line 154 
  cif_debugfs_create_file((char *)"wep_addr_key_count",(unsigned short)256,stats,(void *)wl,& wep_addr_key_count_ops);
  #line 155 
  cif_debugfs_create_file((char *)"wep_default_key_count",(unsigned short)256,stats,(void *)wl,& wep_default_key_count_ops);
  #line 157 
  cif_debugfs_create_file((char *)"wep_key_not_found",(unsigned short)256,stats,(void *)wl,& wep_key_not_found_ops);
  #line 158 
  cif_debugfs_create_file((char *)"wep_decrypt_fail",(unsigned short)256,stats,(void *)wl,& wep_decrypt_fail_ops);
  #line 159 
  cif_debugfs_create_file((char *)"wep_packets",(unsigned short)256,stats,(void *)wl,& wep_packets_ops);
  #line 160 
  cif_debugfs_create_file((char *)"wep_interrupt",(unsigned short)256,stats,(void *)wl,& wep_interrupt_ops);
  #line 162 
  cif_debugfs_create_file((char *)"pwr_ps_enter",(unsigned short)256,stats,(void *)wl,& pwr_ps_enter_ops);
  #line 163 
  cif_debugfs_create_file((char *)"pwr_elp_enter",(unsigned short)256,stats,(void *)wl,& pwr_elp_enter_ops);
  #line 164 
  cif_debugfs_create_file((char *)"pwr_missing_bcns",(unsigned short)256,stats,(void *)wl,& pwr_missing_bcns_ops);
  #line 165 
  cif_debugfs_create_file((char *)"pwr_wake_on_host",(unsigned short)256,stats,(void *)wl,& pwr_wake_on_host_ops);
  #line 166 
  cif_debugfs_create_file((char *)"pwr_wake_on_timer_exp",(unsigned short)256,stats,(void *)wl,& pwr_wake_on_timer_exp_ops);
  #line 167 
  cif_debugfs_create_file((char *)"pwr_tx_with_ps",(unsigned short)256,stats,(void *)wl,& pwr_tx_with_ps_ops);
  #line 168 
  cif_debugfs_create_file((char *)"pwr_tx_without_ps",(unsigned short)256,stats,(void *)wl,& pwr_tx_without_ps_ops);
  #line 169 
  cif_debugfs_create_file((char *)"pwr_rcvd_beacons",(unsigned short)256,stats,(void *)wl,& pwr_rcvd_beacons_ops);
  #line 170 
  cif_debugfs_create_file((char *)"pwr_power_save_off",(unsigned short)256,stats,(void *)wl,& pwr_power_save_off_ops);
  #line 171 
  cif_debugfs_create_file((char *)"pwr_enable_ps",(unsigned short)256,stats,(void *)wl,& pwr_enable_ps_ops);
  #line 172 
  cif_debugfs_create_file((char *)"pwr_disable_ps",(unsigned short)256,stats,(void *)wl,& pwr_disable_ps_ops);
  #line 173 
  cif_debugfs_create_file((char *)"pwr_fix_tsf_ps",(unsigned short)256,stats,(void *)wl,& pwr_fix_tsf_ps_ops);
  #line 175 
  cif_debugfs_create_file((char *)"pwr_rcvd_awake_beacons",(unsigned short)256,stats,(void *)wl,& pwr_rcvd_awake_beacons_ops);
  #line 177 
  cif_debugfs_create_file((char *)"mic_rx_pkts",(unsigned short)256,stats,(void *)wl,& mic_rx_pkts_ops);
  #line 178 
  cif_debugfs_create_file((char *)"mic_calc_failure",(unsigned short)256,stats,(void *)wl,& mic_calc_failure_ops);
  #line 180 
  cif_debugfs_create_file((char *)"aes_encrypt_fail",(unsigned short)256,stats,(void *)wl,& aes_encrypt_fail_ops);
  #line 181 
  cif_debugfs_create_file((char *)"aes_decrypt_fail",(unsigned short)256,stats,(void *)wl,& aes_decrypt_fail_ops);
  #line 182 
  cif_debugfs_create_file((char *)"aes_encrypt_packets",(unsigned short)256,stats,(void *)wl,& aes_encrypt_packets_ops);
  #line 183 
  cif_debugfs_create_file((char *)"aes_decrypt_packets",(unsigned short)256,stats,(void *)wl,& aes_decrypt_packets_ops);
  #line 184 
  cif_debugfs_create_file((char *)"aes_encrypt_interrupt",(unsigned short)256,stats,(void *)wl,& aes_encrypt_interrupt_ops);
  #line 185 
  cif_debugfs_create_file((char *)"aes_decrypt_interrupt",(unsigned short)256,stats,(void *)wl,& aes_decrypt_interrupt_ops);
  #line 187 
  cif_debugfs_create_file((char *)"event_heart_beat",(unsigned short)256,stats,(void *)wl,& event_heart_beat_ops);
  #line 188 
  cif_debugfs_create_file((char *)"event_calibration",(unsigned short)256,stats,(void *)wl,& event_calibration_ops);
  #line 189 
  cif_debugfs_create_file((char *)"event_rx_mismatch",(unsigned short)256,stats,(void *)wl,& event_rx_mismatch_ops);
  #line 190 
  cif_debugfs_create_file((char *)"event_rx_mem_empty",(unsigned short)256,stats,(void *)wl,& event_rx_mem_empty_ops);
  #line 191 
  cif_debugfs_create_file((char *)"event_rx_pool",(unsigned short)256,stats,(void *)wl,& event_rx_pool_ops);
  #line 192 
  cif_debugfs_create_file((char *)"event_oom_late",(unsigned short)256,stats,(void *)wl,& event_oom_late_ops);
  #line 193 
  cif_debugfs_create_file((char *)"event_phy_transmit_error",(unsigned short)256,stats,(void *)wl,& event_phy_transmit_error_ops);
  #line 194 
  cif_debugfs_create_file((char *)"event_tx_stuck",(unsigned short)256,stats,(void *)wl,& event_tx_stuck_ops);
  #line 196 
  cif_debugfs_create_file((char *)"ps_pspoll_timeouts",(unsigned short)256,stats,(void *)wl,& ps_pspoll_timeouts_ops);
  #line 197 
  cif_debugfs_create_file((char *)"ps_upsd_timeouts",(unsigned short)256,stats,(void *)wl,& ps_upsd_timeouts_ops);
  #line 198 
  cif_debugfs_create_file((char *)"ps_upsd_max_sptime",(unsigned short)256,stats,(void *)wl,& ps_upsd_max_sptime_ops);
  #line 199 
  cif_debugfs_create_file((char *)"ps_upsd_max_apturn",(unsigned short)256,stats,(void *)wl,& ps_upsd_max_apturn_ops);
  #line 200 
  cif_debugfs_create_file((char *)"ps_pspoll_max_apturn",(unsigned short)256,stats,(void *)wl,& ps_pspoll_max_apturn_ops);
  #line 201 
  cif_debugfs_create_file((char *)"ps_pspoll_utilization",(unsigned short)256,stats,(void *)wl,& ps_pspoll_utilization_ops);
  #line 202 
  cif_debugfs_create_file((char *)"ps_upsd_utilization",(unsigned short)256,stats,(void *)wl,& ps_upsd_utilization_ops);
  #line 204 
  cif_debugfs_create_file((char *)"rxpipe_rx_prep_beacon_drop",(unsigned short)256,stats,(void *)wl,& rxpipe_rx_prep_beacon_drop_ops);
  #line 205 
  cif_debugfs_create_file((char *)"rxpipe_descr_host_int_trig_rx_data",(unsigned short)256,stats,(void *)wl,& rxpipe_descr_host_int_trig_rx_data_ops);
  #line 206 
  cif_debugfs_create_file((char *)"rxpipe_beacon_buffer_thres_host_int_trig_rx_data",(unsigned short)256,stats,(void *)wl,& rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops);
  #line 207 
  cif_debugfs_create_file((char *)"rxpipe_missed_beacon_host_int_trig_rx_data",(unsigned short)256,stats,(void *)wl,& rxpipe_missed_beacon_host_int_trig_rx_data_ops);
  #line 208 
  cif_debugfs_create_file((char *)"rxpipe_tx_xfr_host_int_trig_rx_data",(unsigned short)256,stats,(void *)wl,& rxpipe_tx_xfr_host_int_trig_rx_data_ops);
  #line 210 
  return 0;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_aes_decrypt_fail_ops = & aes_decrypt_fail_ops;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_aes_decrypt_interrupt_ops = & aes_decrypt_interrupt_ops;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_aes_decrypt_packets_ops = & aes_decrypt_packets_ops;
#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_aes_encrypt_fail_ops = & aes_encrypt_fail_ops;
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_aes_encrypt_interrupt_ops = & aes_encrypt_interrupt_ops;
#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_aes_encrypt_packets_ops = & aes_encrypt_packets_ops;
#line 99  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_dma_rx_errors_ops = & dma_rx_errors_ops;
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_dma_rx_requested_ops = & dma_rx_requested_ops;
#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_dma_tx_errors_ops = & dma_tx_errors_ops;
#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_dma_tx_requested_ops = & dma_tx_requested_ops;
#line 103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_event_calibration_ops = & event_calibration_ops;
#line 104  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_event_heart_beat_ops = & event_heart_beat_ops;
#line 105  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_event_oom_late_ops = & event_oom_late_ops;
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_event_phy_transmit_error_ops = & event_phy_transmit_error_ops;
#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_event_rx_mem_empty_ops = & event_rx_mem_empty_ops;
#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_event_rx_mismatch_ops = & event_rx_mismatch_ops;
#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_event_rx_pool_ops = & event_rx_pool_ops;
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_event_tx_stuck_ops = & event_tx_stuck_ops;
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_cmd_cmplt_ops = & isr_cmd_cmplt_ops;
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_commands_ops = & isr_commands_ops;
#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_decrypt_done_ops = & isr_decrypt_done_ops;
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_dma0_done_ops = & isr_dma0_done_ops;
#line 115  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_dma1_done_ops = & isr_dma1_done_ops;
#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_fiqs_ops = & isr_fiqs_ops;
#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_host_acknowledges_ops = & isr_host_acknowledges_ops;
#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_hw_pm_mode_changes_ops = & isr_hw_pm_mode_changes_ops;
#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_irqs_ops = & isr_irqs_ops;
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_low_rssi_ops = & isr_low_rssi_ops;
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_pci_pm_ops = & isr_pci_pm_ops;
#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_rx_headers_ops = & isr_rx_headers_ops;
#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_rx_mem_overflow_ops = & isr_rx_mem_overflow_ops;
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_rx_procs_ops = & isr_rx_procs_ops;
#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_rx_rdys_ops = & isr_rx_rdys_ops;
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_tx_exch_complete_ops = & isr_tx_exch_complete_ops;
#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_tx_procs_ops = & isr_tx_procs_ops;
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_wakeups_ops = & isr_wakeups_ops;
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_mic_calc_failure_ops = & mic_calc_failure_ops;
#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_mic_rx_pkts_ops = & mic_rx_pkts_ops;
#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_ps_pspoll_max_apturn_ops = & ps_pspoll_max_apturn_ops;
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_ps_pspoll_timeouts_ops = & ps_pspoll_timeouts_ops;
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_ps_pspoll_utilization_ops = & ps_pspoll_utilization_ops;
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_ps_upsd_max_apturn_ops = & ps_upsd_max_apturn_ops;
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_ps_upsd_max_sptime_ops = & ps_upsd_max_sptime_ops;
#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_ps_upsd_timeouts_ops = & ps_upsd_timeouts_ops;
#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_ps_upsd_utilization_ops = & ps_upsd_utilization_ops;
#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_disable_ps_ops = & pwr_disable_ps_ops;
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_elp_enter_ops = & pwr_elp_enter_ops;
#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_enable_ps_ops = & pwr_enable_ps_ops;
#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_fix_tsf_ps_ops = & pwr_fix_tsf_ps_ops;
#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_missing_bcns_ops = & pwr_missing_bcns_ops;
#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_power_save_off_ops = & pwr_power_save_off_ops;
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_ps_enter_ops = & pwr_ps_enter_ops;
#line 145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_rcvd_awake_beacons_ops = & pwr_rcvd_awake_beacons_ops;
#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_rcvd_beacons_ops = & pwr_rcvd_beacons_ops;
#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_tx_with_ps_ops = & pwr_tx_with_ps_ops;
#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_tx_without_ps_ops = & pwr_tx_without_ps_ops;
#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_wake_on_host_ops = & pwr_wake_on_host_ops;
#line 150  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_wake_on_timer_exp_ops = & pwr_wake_on_timer_exp_ops;
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_dropped_ops = & rx_dropped_ops;
#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_fcs_err_ops = & rx_fcs_err_ops;
#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_hdr_overflow_ops = & rx_hdr_overflow_ops;
#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_hw_stuck_ops = & rx_hw_stuck_ops;
#line 155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_out_of_mem_ops = & rx_out_of_mem_ops;
#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_path_reset_ops = & rx_path_reset_ops;
#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_reset_counter_ops = & rx_reset_counter_ops;
#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_xfr_hint_trig_ops = & rx_xfr_hint_trig_ops;
#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops = & rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops;
#line 160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rxpipe_descr_host_int_trig_rx_data_ops = & rxpipe_descr_host_int_trig_rx_data_ops;
#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rxpipe_missed_beacon_host_int_trig_rx_data_ops = & rxpipe_missed_beacon_host_int_trig_rx_data_ops;
#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rxpipe_rx_prep_beacon_drop_ops = & rxpipe_rx_prep_beacon_drop_ops;
#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rxpipe_tx_xfr_host_int_trig_rx_data_ops = & rxpipe_tx_xfr_host_int_trig_rx_data_ops;
#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_internal_desc_overflow_ops = & tx_internal_desc_overflow_ops;
#line 165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_wep_addr_key_count_ops = & wep_addr_key_count_ops;
#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_wep_decrypt_fail_ops = & wep_decrypt_fail_ops;
#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_wep_default_key_count_ops = & wep_default_key_count_ops;
#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_wep_interrupt_ops = & wep_interrupt_ops;
#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_wep_key_not_found_ops = & wep_key_not_found_ops;
#line 170  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_wep_packets_ops = & wep_packets_ops;
#line 174 
#line 174 
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1);
#line 175 
#line 175 
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);
#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_aes_decrypt_fail_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 181 
  return aes_decrypt_fail_read(arg0,arg1,arg2,arg3);
}

#line 185  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_aes_decrypt_interrupt_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 186 
  return aes_decrypt_interrupt_read(arg0,arg1,arg2,arg3);
}

#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_aes_decrypt_packets_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 191 
  return aes_decrypt_packets_read(arg0,arg1,arg2,arg3);
}

#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_aes_encrypt_fail_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 196 
  return aes_encrypt_fail_read(arg0,arg1,arg2,arg3);
}

#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_aes_encrypt_interrupt_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 201 
  return aes_encrypt_interrupt_read(arg0,arg1,arg2,arg3);
}

#line 205  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_aes_encrypt_packets_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 206 
  return aes_encrypt_packets_read(arg0,arg1,arg2,arg3);
}

#line 210  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_dma_rx_errors_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 211 
  return dma_rx_errors_read(arg0,arg1,arg2,arg3);
}

#line 215  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_dma_rx_requested_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 216 
  return dma_rx_requested_read(arg0,arg1,arg2,arg3);
}

#line 220  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_dma_tx_errors_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 221 
  return dma_tx_errors_read(arg0,arg1,arg2,arg3);
}

#line 225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_dma_tx_requested_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 226 
  return dma_tx_requested_read(arg0,arg1,arg2,arg3);
}

#line 230  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_event_calibration_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 231 
  return event_calibration_read(arg0,arg1,arg2,arg3);
}

#line 235  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_event_heart_beat_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 236 
  return event_heart_beat_read(arg0,arg1,arg2,arg3);
}

#line 240  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_event_oom_late_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 241 
  return event_oom_late_read(arg0,arg1,arg2,arg3);
}

#line 245  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_event_phy_transmit_error_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 246 
  return event_phy_transmit_error_read(arg0,arg1,arg2,arg3);
}

#line 250  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_event_rx_mem_empty_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 251 
  return event_rx_mem_empty_read(arg0,arg1,arg2,arg3);
}

#line 255  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_event_rx_mismatch_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 256 
  return event_rx_mismatch_read(arg0,arg1,arg2,arg3);
}

#line 260  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_event_rx_pool_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 261 
  return event_rx_pool_read(arg0,arg1,arg2,arg3);
}

#line 265  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_event_tx_stuck_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 266 
  return event_tx_stuck_read(arg0,arg1,arg2,arg3);
}

#line 270  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_cmd_cmplt_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 271 
  return isr_cmd_cmplt_read(arg0,arg1,arg2,arg3);
}

#line 275  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_commands_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 276 
  return isr_commands_read(arg0,arg1,arg2,arg3);
}

#line 280  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_decrypt_done_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 281 
  return isr_decrypt_done_read(arg0,arg1,arg2,arg3);
}

#line 285  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_dma0_done_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 286 
  return isr_dma0_done_read(arg0,arg1,arg2,arg3);
}

#line 290  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_dma1_done_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 291 
  return isr_dma1_done_read(arg0,arg1,arg2,arg3);
}

#line 295  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_fiqs_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 296 
  return isr_fiqs_read(arg0,arg1,arg2,arg3);
}

#line 300  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_host_acknowledges_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 301 
  return isr_host_acknowledges_read(arg0,arg1,arg2,arg3);
}

#line 305  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_hw_pm_mode_changes_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 306 
  return isr_hw_pm_mode_changes_read(arg0,arg1,arg2,arg3);
}

#line 310  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_irqs_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 311 
  return isr_irqs_read(arg0,arg1,arg2,arg3);
}

#line 315  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_low_rssi_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 316 
  return isr_low_rssi_read(arg0,arg1,arg2,arg3);
}

#line 320  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_pci_pm_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 321 
  return isr_pci_pm_read(arg0,arg1,arg2,arg3);
}

#line 325  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_rx_headers_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 326 
  return isr_rx_headers_read(arg0,arg1,arg2,arg3);
}

#line 330  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_rx_mem_overflow_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 331 
  return isr_rx_mem_overflow_read(arg0,arg1,arg2,arg3);
}

#line 335  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_rx_procs_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 336 
  return isr_rx_procs_read(arg0,arg1,arg2,arg3);
}

#line 340  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_rx_rdys_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 341 
  return isr_rx_rdys_read(arg0,arg1,arg2,arg3);
}

#line 345  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_tx_exch_complete_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 346 
  return isr_tx_exch_complete_read(arg0,arg1,arg2,arg3);
}

#line 350  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_tx_procs_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 351 
  return isr_tx_procs_read(arg0,arg1,arg2,arg3);
}

#line 355  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_wakeups_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 356 
  return isr_wakeups_read(arg0,arg1,arg2,arg3);
}

#line 360  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_mic_calc_failure_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 361 
  return mic_calc_failure_read(arg0,arg1,arg2,arg3);
}

#line 365  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_mic_rx_pkts_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 366 
  return mic_rx_pkts_read(arg0,arg1,arg2,arg3);
}

#line 370  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_ps_pspoll_max_apturn_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 371 
  return ps_pspoll_max_apturn_read(arg0,arg1,arg2,arg3);
}

#line 375  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_ps_pspoll_timeouts_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 376 
  return ps_pspoll_timeouts_read(arg0,arg1,arg2,arg3);
}

#line 380  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_ps_pspoll_utilization_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 381 
  return ps_pspoll_utilization_read(arg0,arg1,arg2,arg3);
}

#line 385  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_ps_upsd_max_apturn_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 386 
  return ps_upsd_max_apturn_read(arg0,arg1,arg2,arg3);
}

#line 390  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_ps_upsd_max_sptime_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 391 
  return ps_upsd_max_sptime_read(arg0,arg1,arg2,arg3);
}

#line 395  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_ps_upsd_timeouts_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 396 
  return ps_upsd_timeouts_read(arg0,arg1,arg2,arg3);
}

#line 400  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_ps_upsd_utilization_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 401 
  return ps_upsd_utilization_read(arg0,arg1,arg2,arg3);
}

#line 405  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_disable_ps_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 406 
  return pwr_disable_ps_read(arg0,arg1,arg2,arg3);
}

#line 410  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_elp_enter_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 411 
  return pwr_elp_enter_read(arg0,arg1,arg2,arg3);
}

#line 415  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_enable_ps_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 416 
  return pwr_enable_ps_read(arg0,arg1,arg2,arg3);
}

#line 420  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_fix_tsf_ps_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 421 
  return pwr_fix_tsf_ps_read(arg0,arg1,arg2,arg3);
}

#line 425  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_missing_bcns_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 426 
  return pwr_missing_bcns_read(arg0,arg1,arg2,arg3);
}

#line 430  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_power_save_off_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 431 
  return pwr_power_save_off_read(arg0,arg1,arg2,arg3);
}

#line 435  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_ps_enter_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 436 
  return pwr_ps_enter_read(arg0,arg1,arg2,arg3);
}

#line 440  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_rcvd_awake_beacons_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 441 
  return pwr_rcvd_awake_beacons_read(arg0,arg1,arg2,arg3);
}

#line 445  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_rcvd_beacons_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 446 
  return pwr_rcvd_beacons_read(arg0,arg1,arg2,arg3);
}

#line 450  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_tx_with_ps_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 451 
  return pwr_tx_with_ps_read(arg0,arg1,arg2,arg3);
}

#line 455  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_tx_without_ps_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 456 
  return pwr_tx_without_ps_read(arg0,arg1,arg2,arg3);
}

#line 460  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_wake_on_host_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 461 
  return pwr_wake_on_host_read(arg0,arg1,arg2,arg3);
}

#line 465  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_wake_on_timer_exp_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 466 
  return pwr_wake_on_timer_exp_read(arg0,arg1,arg2,arg3);
}

#line 470  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_dropped_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 471 
  return rx_dropped_read(arg0,arg1,arg2,arg3);
}

#line 475  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_fcs_err_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 476 
  return rx_fcs_err_read(arg0,arg1,arg2,arg3);
}

#line 480  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_hdr_overflow_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 481 
  return rx_hdr_overflow_read(arg0,arg1,arg2,arg3);
}

#line 485  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_hw_stuck_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 486 
  return rx_hw_stuck_read(arg0,arg1,arg2,arg3);
}

#line 490  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_out_of_mem_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 491 
  return rx_out_of_mem_read(arg0,arg1,arg2,arg3);
}

#line 495  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_path_reset_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 496 
  return rx_path_reset_read(arg0,arg1,arg2,arg3);
}

#line 500  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_reset_counter_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 501 
  return rx_reset_counter_read(arg0,arg1,arg2,arg3);
}

#line 505  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_xfr_hint_trig_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 506 
  return rx_xfr_hint_trig_read(arg0,arg1,arg2,arg3);
}

#line 510  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rxpipe_beacon_buffer_thres_host_int_trig_rx_data_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 511 
  return rxpipe_beacon_buffer_thres_host_int_trig_rx_data_read(arg0,arg1,arg2,
                                                            arg3);
}

#line 515  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rxpipe_descr_host_int_trig_rx_data_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 516 
  return rxpipe_descr_host_int_trig_rx_data_read(arg0,arg1,arg2,arg3);
}

#line 520  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rxpipe_missed_beacon_host_int_trig_rx_data_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 521 
  return rxpipe_missed_beacon_host_int_trig_rx_data_read(arg0,arg1,arg2,arg3);
}

#line 525  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rxpipe_rx_prep_beacon_drop_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 526 
  return rxpipe_rx_prep_beacon_drop_read(arg0,arg1,arg2,arg3);
}

#line 530  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rxpipe_tx_xfr_host_int_trig_rx_data_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 531 
  return rxpipe_tx_xfr_host_int_trig_rx_data_read(arg0,arg1,arg2,arg3);
}

#line 535  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_internal_desc_overflow_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 536 
  return tx_internal_desc_overflow_read(arg0,arg1,arg2,arg3);
}

#line 540  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_wep_addr_key_count_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 541 
  return wep_addr_key_count_read(arg0,arg1,arg2,arg3);
}

#line 545  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_wep_decrypt_fail_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 546 
  return wep_decrypt_fail_read(arg0,arg1,arg2,arg3);
}

#line 550  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_wep_default_key_count_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 551 
  return wep_default_key_count_read(arg0,arg1,arg2,arg3);
}

#line 555  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_wep_interrupt_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 556 
  return wep_interrupt_read(arg0,arg1,arg2,arg3);
}

#line 560  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_wep_key_not_found_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 561 
  return wep_key_not_found_read(arg0,arg1,arg2,arg3);
}

#line 565  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_wep_packets_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 566 
  return wep_packets_read(arg0,arg1,arg2,arg3);
}

#line 1256  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent)
{
  #line 1260 
  return emg_debugfs_create_dir(name,parent);
}

#line 1264  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 1268 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 821  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif_strcmp(char *cs, char *ct);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 227  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 234  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static bool IS_ERR(void *ptr);
#line 26 
#line 814 
static void cif_mutex_lock_mutex_of_wl1271(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 26 
int ldv_strcmp(char *cs, char *ct);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 807  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_mutex_unlock_mutex_of_wl1271(struct mutex *lock);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 292 
#line 292 
unsigned int jiffies_to_usecs(unsigned long);
#line 375 
#line 375 
unsigned long __usecs_to_jiffies(unsigned int);
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _usecs_to_jiffies(unsigned int u)
{
  #line 379 
  return (unsigned long)(((long)u + 3999L) / 4000L);
}

#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long usecs_to_jiffies(unsigned int u)
{
  #line 413 
  if (0 != 0) {
    #line 414 
    ;
    #line 414 
    if (jiffies_to_usecs(4611686018427387902UL) < u) 
                                                     #line 415 
                                                     return 4611686018427387902UL;
    #line 416 
    return _usecs_to_jiffies(u);
  }
  else {
    #line 418 
    return __usecs_to_jiffies(u);
  }
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_platdata(struct device *dev)
{
  #line 1583 
  return dev->platform_data;
}

#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 828  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif___platform_driver_register(struct platform_driver *ldv_func_arg1, struct module *ldv_func_arg2);
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 836  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_platform_driver_unregister(struct platform_driver *ldv_func_arg1);
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
__inline static void *platform_get_drvdata(struct platform_device *pdev)
{
  #line 228 
  return dev_get_drvdata(& pdev->dev);
}

#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 467  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/boot.h"
#line 15 
int wlcore_boot_upload_firmware(struct wl1271 *);
#line 16 
#line 16 
int wlcore_boot_upload_nvs(struct wl1271 *);
#line 17 
#line 17 
int wlcore_boot_run_firmware(struct wl1271 *);
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore.h"
#line 499 
int wlcore_probe(struct wl1271 *, struct platform_device *);
#line 500 
#line 500 
int wlcore_remove(struct platform_device *);
#line 501 
#line 501 
struct ieee80211_hw *wlcore_alloc_hw(size_t, u32, u32);
#line 503 
#line 503 
int wlcore_free_hw(struct wl1271 *);
#line 504 
#line 504 
int wlcore_set_key(struct wl1271 *, enum set_key_cmd, struct ieee80211_vif *, struct ieee80211_sta *, struct ieee80211_key_conf *);
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore.h"
__inline static void wlcore_set_ht_cap(struct wl1271 *wl, enum nl80211_band band, struct ieee80211_sta_ht_cap *ht_cap)
{
  #line 516 
  memcpy((void *)(& wl->ht_cap[(unsigned int)band]),(void *)ht_cap,22UL);
  #line 517 
  return;
}

#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore.h"
__inline static void wlcore_set_min_fw_ver(struct wl1271 *wl, unsigned int chip, unsigned int iftype_sr, unsigned int major_sr, unsigned int subtype_sr, unsigned int minor_sr, unsigned int iftype_mr, unsigned int major_mr, unsigned int subtype_mr, unsigned int minor_mr)
{
  #line 529 
  wl->min_sr_fw_ver[0] = chip;
  #line 530 
  wl->min_sr_fw_ver[1] = iftype_sr;
  #line 531 
  wl->min_sr_fw_ver[2] = major_sr;
  #line 532 
  wl->min_sr_fw_ver[3] = subtype_sr;
  #line 533 
  wl->min_sr_fw_ver[4] = minor_sr;
  #line 535 
  wl->min_mr_fw_ver[0] = chip;
  #line 536 
  wl->min_mr_fw_ver[1] = iftype_mr;
  #line 537 
  wl->min_mr_fw_ver[2] = major_mr;
  #line 538 
  wl->min_mr_fw_ver[3] = subtype_mr;
  #line 539 
  wl->min_mr_fw_ver[4] = minor_mr;
  #line 540 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
#line 34 
void wlcore_disable_interrupts(struct wl1271 *);
#line 36 
#line 36 
void wlcore_enable_interrupts(struct wl1271 *);
#line 41 
#line 41 
int wlcore_translate_addr(struct wl1271 *, int);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_raw_write(struct wl1271 *wl, int addr, void *buf, size_t len, bool fixed)
{
  #line 48 
  int ret;
  #line 50 
  if ((int)test_bit(13L,& wl->flags) != 0) 
                                           #line 53 
                                           return -5;
  else {
    #line 51 
    int __ret_warn_on;
    {
      #line 51 
      int tmp_1;
      #line 51 
      if ((int)test_bit(3L,& wl->flags) != 0) 
        #line 51 
        if (addr != 131068) 
                            #line 51 
                            tmp_1 = 1; else 
                                            #line 51 
                                            tmp_1 = 0;
      else 
           #line 51 
           tmp_1 = 0;
      #line 51 
      __ret_warn_on = tmp_1;
      #line 51 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 52 
        ldv_inline_asm();
        #line 53 
        ldv_inline_asm();
      }
      }
    #line 50 
    if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                  #line 53 
                                                  return -5;
  }
  #line 55 
  ret = (*((wl->if_ops)->write))(wl->dev,addr,buf,len,(_Bool)((bool)((int)fixed) != 0));
  #line 56 
  if (ret != 0 && wl->state != (unsigned int)WLCORE_STATE_OFF) 
                                                               #line 57 
                                                               cif_set_bit_0(13L,& wl->flags);
  #line 59 
  return ret;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_raw_read(struct wl1271 *wl, int addr, void *buf, size_t len, bool fixed)
{
  #line 66 
  int ret;
  #line 68 
  if ((int)test_bit(13L,& wl->flags) != 0) 
                                           #line 71 
                                           return -5;
  else {
    #line 69 
    int __ret_warn_on;
    {
      #line 69 
      int tmp_1;
      #line 69 
      if ((int)test_bit(3L,& wl->flags) != 0) 
        #line 69 
        if (addr != 131068) 
                            #line 69 
                            tmp_1 = 1; else 
                                            #line 69 
                                            tmp_1 = 0;
      else 
           #line 69 
           tmp_1 = 0;
      #line 69 
      __ret_warn_on = tmp_1;
      #line 69 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 70 
        ldv_inline_asm();
        #line 71 
        ldv_inline_asm();
      }
      }
    #line 68 
    if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                  #line 71 
                                                  return -5;
  }
  #line 73 
  ret = (*((wl->if_ops)->read))(wl->dev,addr,buf,len,(_Bool)((bool)((int)fixed) != 0));
  #line 74 
  if (ret != 0 && wl->state != (unsigned int)WLCORE_STATE_OFF) 
                                                               #line 75 
                                                               cif_set_bit_0(13L,& wl->flags);
  #line 77 
  return ret;
}

#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_raw_read32(struct wl1271 *wl, int addr, u32 *val)
{
  #line 97 
  int ret;
  #line 99 
  ret = wlcore_raw_read(wl,addr,(void *)wl->buffer_32,4UL,(_Bool)0);
  #line 101 
  if (ret < 0) 
               #line 102 
               return ret;
  #line 104 
  if (val != (u32 *)0U) 
                        #line 105 
                        *val = *(wl->buffer_32);
  #line 107 
  return 0;
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_raw_write32(struct wl1271 *wl, int addr, u32 val)
{
  #line 113 
  *(wl->buffer_32) = val;
  #line 114 
  return wlcore_raw_write(wl,addr,(void *)wl->buffer_32,4UL,(_Bool)0);
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_write(struct wl1271 *wl, int addr, void *buf, size_t len, bool fixed)
{
  #line 131 
  int physical;
  #line 133 
  physical = wlcore_translate_addr(wl,addr);
  #line 135 
  return wlcore_raw_write(wl,physical,buf,len,(_Bool)((bool)((int)fixed) != 0));
}

#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_read32(struct wl1271 *wl, int addr, u32 *val)
{
  #line 170 
  ;
  #line 170 
  ;
  #line 170 
  return wlcore_raw_read32(wl,wlcore_translate_addr(wl,addr),val);
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_write32(struct wl1271 *wl, int addr, u32 val)
{
  #line 176 
  ;
  #line 176 
  ;
  #line 176 
  return wlcore_raw_write32(wl,wlcore_translate_addr(wl,addr),val);
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_read_reg(struct wl1271 *wl, int reg, u32 *val)
{
  #line 182 
  ;
  #line 182 
  ;
  #line 182 
  return wlcore_raw_read32(wl,
                          wlcore_translate_addr(wl,*(wl->rtable + (unsigned long)reg)),
                          val);
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_write_reg(struct wl1271 *wl, int reg, u32 val)
{
  #line 190 
  ;
  #line 190 
  ;
  #line 190 
  return wlcore_raw_write32(wl,
                           wlcore_translate_addr(wl,*(wl->rtable + (unsigned long)reg)),
                           val);
}

#line 220 
#line 220 
int wlcore_set_partition(struct wl1271 *, struct wlcore_partition_set *);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/cmd.h"
#line 37 
int wl1271_cmd_data_path(struct wl1271 *, bool);
#line 1032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/acx.h"
#line 1032 
int wl1271_acx_sleep_auth(struct wl1271 *, u8);
#line 1076 
#line 1076 
int wl12xx_acx_mem_cfg(struct wl1271 *);
#line 1077 
#line 1077 
int wl1271_acx_init_mem_config(struct wl1271 *);
#line 1084 
#line 1084 
int wl1271_acx_pm_config(struct wl1271 *);
#line 1093 
#line 1093 
int wl1271_acx_set_ht_capabilities(struct wl1271 *, struct ieee80211_sta_ht_cap *, bool, u8);
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
#line 231 
int wlcore_tx_complete(struct wl1271 *);
#line 245 
#line 245 
unsigned int wlcore_calc_packet_alignment(struct wl1271 *, unsigned int);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static char *fref_param;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static char *tcxo_param;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static struct wlcore_conf wl12xx_conf = {.sg = {.params = {10U, 180U, 10U, 180U, 10U, 80U, 10U, 80U, 8U, 8U, 20U, 20U, 20U, 35U, 16U, 35U, 32U, 50U, 28U, 50U, 10U, 20U, 75U, 15U, 27U, 17U, 170U, 50U, 100U, 800U, 200U, 200U, [35] = 1U, [37] = 60U, 5000U, 1200U, 1000U, 1U, 3U, 6U, 10U, 10U, 2U, 5U, 30U, 3U, 10U, 2U, [53] = 25U, 25U}, .state = (unsigned char)1U}, .rx = {.rx_msdu_life_time = 512000U, .ps_poll_timeout = (unsigned short)15U, .upsd_timeout = (unsigned short)15U, .rts_threshold = (unsigned short)2353U, .irq_blk_threshold = (unsigned short)65535U, .irq_timeout = (unsigned short)600U}, .tx = {.sta_rc_conf = {.short_retry_limit = (unsigned char)10U, .long_retry_limit = (unsigned char)10U}, .ac_conf_count = (unsigned char)4U, .ac_conf = {{.cw_min = (unsigned char)15U, .cw_max = (unsigned short)63U, .aifsn = (unsigned char)3U}, {.ac = (unsigned char)1U, .cw_min = (unsigned char)15U, .cw_max = (unsigned short)63U, .aifsn = (unsigned char)7U}, {.ac = (unsigned char)2U, .cw_min = (unsigned char)15U, .cw_max = (unsigned short)63U, .aifsn = (unsigned char)1U, .tx_op_limit = (unsigned short)3008U}, {.ac = (unsigned char)3U, .cw_min = (unsigned char)15U, .cw_max = (unsigned short)63U, .aifsn = (unsigned char)1U, .tx_op_limit = (unsigned short)1504U}}, .max_tx_retries = (unsigned char)100U, .ap_aging_period = (unsigned short)300U, .tid_conf_count = (unsigned char)4U, .tid_conf = {{.channel_type = (unsigned char)1U}, {.queue_id = (unsigned char)1U, .channel_type = (unsigned char)1U, .tsid = (unsigned char)1U}, {.queue_id = (unsigned char)2U, .channel_type = (unsigned char)1U, .tsid = (unsigned char)2U}, {.queue_id = (unsigned char)3U, .channel_type = (unsigned char)1U, .tsid = (unsigned char)3U}}, .frag_threshold = (unsigned short)2352U, .tx_compl_timeout = (unsigned short)700U, .tx_compl_threshold = (unsigned short)4U, .basic_rate = 1U, .basic_rate_5 = 8U, .tmpl_short_retry_limit = (unsigned char)10U, .tmpl_long_retry_limit = (unsigned char)10U, .tx_watchdog_timeout = 5000U, .slow_link_thold = (unsigned char)3U, .fast_link_thold = (unsigned char)10U}, .conn = {.wake_up_event = (unsigned char)2U, .listen_interval = (unsigned char)1U, .suspend_wake_up_event = (unsigned char)4U, .suspend_listen_interval = (unsigned char)3U, .bcn_filt_mode = (unsigned char)1U, .bcn_filt_ie_count = (unsigned char)3U, .bcn_filt_ie = {{.ie = (unsigned char)37U, .rule = (unsigned char)2U}, {.ie = (unsigned char)61U, .rule = (unsigned char)1U}, {.ie = (unsigned char)42U, .rule = (unsigned char)1U}}, .synch_fail_thold = 12U, .bss_lose_timeout = 400U, .beacon_rx_timeout = 10000U, .broadcast_timeout = 20000U, .rx_broadcast_in_ps = (unsigned char)1U, .ps_poll_threshold = (unsigned char)10U, .bet_enable = (unsigned char)1U, .bet_max_consecutive = (unsigned char)50U, .psm_entry_retries = (unsigned char)8U, .psm_exit_retries = (unsigned char)16U, .psm_entry_nullfunc_retries = (unsigned char)3U, .dynamic_ps_timeout = (unsigned short)1500U, .keep_alive_interval = 55000U, .max_listen_interval = (unsigned char)20U, .sta_sleep_auth = (unsigned char)255U}, .itrim = {.timeout = 50000U}, .pm_config = {.host_clk_settling_time = 5000U, .host_fast_wakeup_support = (unsigned char)1U}, .roam_trigger = {.trigger_pacing = (unsigned short)1U, .avg_weight_rssi_beacon = (unsigned char)20U, .avg_weight_rssi_data = (unsigned char)10U, .avg_weight_snr_beacon = (unsigned char)20U, .avg_weight_snr_data = (unsigned char)10U}, .scan = {.min_dwell_time_active = 7500U, .max_dwell_time_active = 30000U, .min_dwell_time_active_long = 25000U, .max_dwell_time_active_long = 50000U, .dwell_time_passive = 100000U, .dwell_time_dfs = 150000U, .num_probe_reqs = (unsigned short)2U, .split_scan_timeout = 50000U}, .sched_scan = {.base_dwell_time = 7500U, .max_dwell_time_delta = 22500U, .dwell_time_delta_per_probe = 2000U, .dwell_time_delta_per_probe_5 = 350U, .dwell_time_passive = 100000U, .dwell_time_dfs = 150000U, .num_probe_reqs = (unsigned char)2U, .rssi_threshold = (signed char)(-90)}, .ht = {.rx_ba_win_size = (unsigned char)8U, .tx_ba_win_size = (unsigned char)64U, .inactivity_timeout = (unsigned short)10000U, .tx_ba_tid_bitmap = (unsigned char)63U}, .mem = {.num_stations = (unsigned char)1U, .ssid_profiles = (unsigned char)1U, .rx_block_num = (unsigned char)40U, .tx_min_block_num = (unsigned char)40U, .dynamic_memory = (unsigned char)1U, .min_req_tx_blocks = (unsigned char)45U, .min_req_rx_blocks = (unsigned char)22U, .tx_min = (unsigned char)27U}, .fm_coex = {.enable = (unsigned char)1U, .swallow_period = (unsigned char)5U, .n_divider_fref_set_1 = (unsigned char)255U, .n_divider_fref_set_2 = (unsigned char)12U, .m_divider_fref_set_1 = (unsigned short)65535U, .m_divider_fref_set_2 = (unsigned short)148U, .coex_pll_stabilization_time = 4294967295U, .ldo_stabilization_time = (unsigned short)65535U, .fm_disturbed_band_margin = (unsigned char)255U, .swallow_clk_diff = (unsigned char)255U}, .rx_streaming = {.duration = 150U, .queues = (unsigned char)1U, .interval = (unsigned char)20U}, .fwlog = {.mem_blocks = (unsigned char)2U, .output = (unsigned char)1U}, .rate = {.rate_retry_score = (unsigned short)32000U, .per_add = (unsigned short)8192U, .per_th1 = (unsigned short)2048U, .per_th2 = (unsigned short)4096U, .max_per = (unsigned short)8100U, .inverse_curiosity_factor = (unsigned char)5U, .tx_fail_low_th = (unsigned char)4U, .tx_fail_high_th = (unsigned char)10U, .per_alpha_shift = (unsigned char)4U, .per_add_shift = (unsigned char)13U, .per_beta1_shift = (unsigned char)10U, .per_beta2_shift = (unsigned char)8U, .rate_check_up = (unsigned char)2U, .rate_check_down = (unsigned char)12U}, .hangover = {.hangover_period = (unsigned char)20U, .dynamic_mode = (unsigned char)1U, .early_termination_mode = (unsigned char)1U, .max_period = (unsigned char)20U, .min_period = (unsigned char)1U, .increase_delta = (unsigned char)1U, .decrease_delta = (unsigned char)2U, .quiet_time = (unsigned char)4U, .increase_time = (unsigned char)1U, .window_size = (unsigned char)16U}};
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static struct wl12xx_priv_conf wl12xx_default_priv_conf = {.mem_wl127x = {.num_stations = (unsigned char)1U, .ssid_profiles = (unsigned char)1U, .rx_block_num = (unsigned char)70U, .tx_min_block_num = (unsigned char)40U, .dynamic_memory = (unsigned char)1U, .min_req_tx_blocks = (unsigned char)100U, .min_req_rx_blocks = (unsigned char)22U, .tx_min = (unsigned char)27U}};
#line 398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static u8 wl12xx_rate_to_idx_2ghz[22U] = {(unsigned char)7U, (unsigned char)7U, (unsigned char)6U, (unsigned char)5U, (unsigned char)4U, (unsigned char)3U, (unsigned char)2U, (unsigned char)1U, [9] = (unsigned char)11U, (unsigned char)10U, (unsigned char)9U, (unsigned char)8U, (unsigned char)255U, (unsigned char)7U, (unsigned char)6U, (unsigned char)3U, (unsigned char)5U, (unsigned char)4U, (unsigned char)2U, (unsigned char)1U};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static u8 wl12xx_rate_to_idx_5ghz[22U] = {(unsigned char)7U, (unsigned char)7U, (unsigned char)6U, (unsigned char)5U, (unsigned char)4U, (unsigned char)3U, (unsigned char)2U, (unsigned char)1U, [9] = (unsigned char)7U, (unsigned char)6U, (unsigned char)5U, (unsigned char)4U, (unsigned char)255U, (unsigned char)3U, (unsigned char)2U, (unsigned char)255U, (unsigned char)1U, [19] = (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static u8 *wl12xx_band_rate_to_idx[2U] = {(u8 *)(& wl12xx_rate_to_idx_2ghz), (u8 *)(& wl12xx_rate_to_idx_5ghz)};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static struct wlcore_partition_set wl12xx_ptable[6U] = {{.mem = {.size = 96192U}, .reg = {.size = 34816U, .start = 3145728U}}, {.mem = {.size = 85952U, .start = 262144U}, .reg = {.size = 40960U, .start = 3145728U}, .mem2 = {.size = 4U, .start = 3147000U}, .mem3 = {.size = 263172U}}, {.mem = {.size = 85952U, .start = 262144U}, .reg = {.size = 34816U, .start = 3145728U}}, {.mem = {.size = 85952U, .start = 262144U}, .reg = {.size = 24576U, .start = 3211264U}}};
#line 568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_rtable[13U] = {3147780, 3146984, 3146992, 3167752, 3167756, 3146868, 3146972, 3167768, 3167860, 264116, 3145752, 3145736, 126912};
#line 597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl127x_prepare_read(struct wl1271 *wl, u32 rx_desc, u32 len)
{
  #line 599 
  int ret;
  #line 601 
  if (wl->chip.id != 84082961U) {
    #line 602 
    struct wl1271_acx_mem_map *wl_mem_map = wl->target_mem_map;
    #line 603 
    struct wl12xx_priv *priv = (struct wl12xx_priv *)wl->priv;
    #line 610 
    u32 mem_block = rx_desc & 255U;
    #line 612 
    (priv->rx_mem_addr)->addr = (mem_block << 8) + wl_mem_map->packet_memory_pool_start;
    #line 615 
    (priv->rx_mem_addr)->addr_extra = (priv->rx_mem_addr)->addr + 4U;
    #line 617 
    ret = wlcore_write(wl,3145736,(void *)priv->rx_mem_addr,8UL,(_Bool)0);
    #line 619 
    if (ret < 0) 
                 #line 620 
                 return ret;
  }
  #line 623 
  return 0;
}

#line 626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_identify_chip(struct wl1271 *wl)
{
  #line 628 
  int ret = 0;
  #line 630 
  switch (wl->chip.id) {
    #line 631 
    case (u32)67305729: 
                        #line 631 
    ;
    #line 632 
    printk((char *)"\001",wl->chip.id);
    #line 635 
    wl->quirks |= 5410U;
    #line 640 
    wl->sr_fw_name = (char *)"ti-connectivity/wl127x-fw-5-sr.bin";
    #line 641 
    wl->mr_fw_name = (char *)"ti-connectivity/wl127x-fw-5-mr.bin";
    #line 642 
    memcpy((void *)(& wl->conf.mem),(void *)(& wl12xx_default_priv_conf.mem_wl127x),8UL);
    #line 646 
    (wl->ops)->prepare_read = & wl127x_prepare_read;
    #line 648 
    wlcore_set_min_fw_ver(wl,6U,3U,10U,4294967295U,133U,5U,7U,4294967295U,42U);
    #line 653 
    break;
    #line 655 
    case (u32)67305745: 
                        #line 655 
    ;
    #line 656 
    if ((long)((wl12xx_debug_level & 4U) != 0U) != 0L) {
      #line 656 
      bool branch;
      #line 656 
      struct _ddebug __UNIQUE_ID_ddebug557 = {.modname = (char *)"wl12xx", .function = (char *)"wl12xx_identify_chip", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)656U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 656 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug557.key.dd_key_false.key,(_Bool)0);
      #line 656 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 656 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug557,(char *)"wlcore",wl->chip.id);
    }
    #line 659 
    wl->quirks |= 5410U;
    #line 664 
    wl->plt_fw_name = (char *)"ti-connectivity/wl127x-fw-5-plt.bin";
    #line 665 
    wl->sr_fw_name = (char *)"ti-connectivity/wl127x-fw-5-sr.bin";
    #line 666 
    wl->mr_fw_name = (char *)"ti-connectivity/wl127x-fw-5-mr.bin";
    #line 667 
    memcpy((void *)(& wl->conf.mem),(void *)(& wl12xx_default_priv_conf.mem_wl127x),8UL);
    #line 671 
    (wl->ops)->prepare_read = & wl127x_prepare_read;
    #line 673 
    wlcore_set_min_fw_ver(wl,6U,3U,10U,4294967295U,133U,5U,7U,4294967295U,42U);
    #line 678 
    break;
    #line 680 
    case (u32)84082961: 
                        #line 680 
    ;
    #line 681 
    if ((long)((wl12xx_debug_level & 4U) != 0U) != 0L) {
      #line 681 
      bool branch_0;
      #line 681 
      struct _ddebug __UNIQUE_ID_ddebug558 = {.modname = (char *)"wl12xx", .function = (char *)"wl12xx_identify_chip", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)681U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 681 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug558.key.dd_key_false.key,(_Bool)0);
      #line 681 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 681 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug558,(char *)"wlcore",wl->chip.id);
    }
    #line 683 
    wl->plt_fw_name = (char *)"ti-connectivity/wl128x-fw-5-plt.bin";
    #line 684 
    wl->sr_fw_name = (char *)"ti-connectivity/wl128x-fw-5-sr.bin";
    #line 685 
    wl->mr_fw_name = (char *)"ti-connectivity/wl128x-fw-5-mr.bin";
    #line 688 
    wl->quirks |= 5382U;
    #line 694 
    wlcore_set_min_fw_ver(wl,7U,3U,10U,4294967295U,133U,5U,7U,4294967295U,42U);
    #line 699 
    break;
    #line 700 
    case (u32)84082945: 
                        #line 700 
    ;
    #line 701 
    default: 
             #line 701 
    ;
    #line 702 
    printk((char *)"\001",wl->chip.id);
    #line 703 
    ret = -19;
    #line 704 
    goto out;
  }
  #line 707 
  wl->fw_mem_block_size = 256U;
  #line 708 
  wl->fwlog_end = 33554432U;
  #line 711 
  wl->scan_templ_id_2_4 = (unsigned char)9U;
  #line 712 
  wl->scan_templ_id_5 = (unsigned char)10U;
  #line 713 
  wl->sched_scan_templ_id_2_4 = (unsigned char)2U;
  #line 714 
  wl->sched_scan_templ_id_5 = (unsigned char)3U;
  #line 715 
  wl->max_channels_5 = (unsigned char)23U;
  #line 716 
  wl->ba_rx_session_count_max = 3;
  #line 717 
  out: 
       #line 717 
  ;
  #line 718 
  return ret;
}

#line 721  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_top_reg_write(struct wl1271 *wl, int addr, u16 val)
{
  #line 724 
  int ret;
  #line 727 
  addr = (addr >> 1) + 196608;
  #line 728 
  ret = wlcore_write32(wl,3148212,(unsigned int)addr);
  #line 729 
  if (ret < 0) 
               #line 730 
               goto out;
  #line 733 
  ret = wlcore_write32(wl,3148216,(unsigned int)val);
  #line 734 
  if (ret < 0) 
               #line 735 
               goto out;
  #line 738 
  ret = wlcore_write32(wl,3148224,1U);
  #line 739 
  if (ret < 0) 
               #line 740 
               goto out;
  #line 742 
  out: 
       #line 742 
  ;
  #line 743 
  return ret;
}

#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_top_reg_read(struct wl1271 *wl, int addr, u16 *out)
{
  #line 749 
  u32 val;
  #line 751 
  int ret;
  #line 750 
  int timeout = 32;
  #line 754 
  addr = (addr >> 1) + 196608;
  #line 755 
  ret = wlcore_write32(wl,3148212,(unsigned int)addr);
  #line 756 
  if (ret < 0) 
               #line 757 
               return ret;
  #line 760 
  ret = wlcore_write32(wl,3148224,2U);
  #line 761 
  if (ret < 0) 
               #line 762 
               return ret;
  #line 765 
  while (1) {
    #line 766 
    ret = wlcore_read32(wl,3148220,& val);
    #line 767 
    if (ret < 0) 
                 #line 768 
                 return ret;
    #line 769 
    if (((unsigned long)val & 262144UL) == 0UL) {
      #line 769 
      timeout --;
      #line 769 
      if (! (timeout != 0)) 
                            #line 765 
                            break;
    }
    else 
         #line 765 
         break;
  }
  #line 771 
  if (timeout == 0) {
    #line 772 
    printk((char *)"\001");
    #line 773 
    return -110;
  }
  #line 777 
  if (((unsigned long)val & 196608UL) != 65536UL) {
    #line 778 
    printk((char *)"\001");
    #line 779 
    return -5;
  }
  #line 782 
  if (out != (u16 *)0U) 
                        #line 783 
                        *out = (unsigned short)val;
  #line 785 
  return 0;
}

#line 788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl128x_switch_tcxo_to_fref(struct wl1271 *wl)
{
  #line 790 
  u16 spare_reg;
  #line 791 
  int ret;
  #line 794 
  ret = wl12xx_top_reg_read(wl,8992,& spare_reg);
  #line 795 
  if (ret < 0) 
               #line 796 
               return ret;
  #line 798 
  if ((unsigned int)spare_reg == 65535U) 
                                         #line 799 
                                         return -14;
  #line 800 
  spare_reg = (unsigned short)((unsigned int)spare_reg | 104U);
  #line 801 
  ret = wl12xx_top_reg_write(wl,8992,(unsigned short)((int)spare_reg));
  #line 802 
  if (ret < 0) 
               #line 803 
               return ret;
  #line 806 
  ret = wl12xx_top_reg_write(wl,8704,(unsigned short)13);
  #line 808 
  if (ret < 0) 
               #line 809 
               return ret;
  {
    #line 812 
    unsigned long __ms = 15UL;
    #line 812 
    while (1) {
      #line 812 
      unsigned long tmp;
      #line 812 
      tmp = __ms;
      #line 812 
      __ms --;
      #line 812 
      ;
      #line 812 
      if (! (tmp != 0UL)) 
                          #line 812 
                          break;
      #line 812 
      __const_udelay(4295000UL);
    }
  }
  #line 814 
  return 0;
}

#line 817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static bool wl128x_is_tcxo_valid(struct wl1271 *wl)
{
  #line 819 
  u16 tcxo_detection;
  #line 820 
  int ret;
  #line 822 
  ret = wl12xx_top_reg_read(wl,8806,& tcxo_detection);
  #line 823 
  if (ret < 0) 
               #line 824 
               return (_Bool)0;
  #line 826 
  if (((unsigned long)tcxo_detection & 16UL) != 0UL) 
                                                     #line 827 
                                                     return (_Bool)0;
  #line 829 
  return (_Bool)1;
}

#line 832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static bool wl128x_is_fref_valid(struct wl1271 *wl)
{
  #line 834 
  u16 fref_detection;
  #line 835 
  int ret;
  #line 837 
  ret = wl12xx_top_reg_read(wl,8326,& fref_detection);
  #line 838 
  if (ret < 0) 
               #line 839 
               return (_Bool)0;
  #line 841 
  if (((unsigned long)fref_detection & 16UL) != 0UL) 
                                                     #line 842 
                                                     return (_Bool)0;
  #line 844 
  return (_Bool)1;
}

#line 847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl128x_manually_configure_mcs_pll(struct wl1271 *wl)
{
  #line 849 
  int ret;
  #line 851 
  ret = wl12xx_top_reg_write(wl,3476,(unsigned short)200);
  #line 852 
  if (ret < 0) 
               #line 853 
               goto out;
  #line 855 
  ret = wl12xx_top_reg_write(wl,3478,(unsigned short)7);
  #line 856 
  if (ret < 0) 
               #line 857 
               goto out;
  #line 859 
  ret = wl12xx_top_reg_write(wl,3474,(unsigned short)115);
  #line 862 
  out: 
       #line 862 
  ;
  #line 863 
  return ret;
}

#line 866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl128x_configure_mcs_pll(struct wl1271 *wl, int clk)
{
  #line 868 
  u16 spare_reg;
  #line 869 
  u16 pll_config;
  #line 870 
  u8 input_freq;
  #line 872 
  int ret;
  #line 871 
  struct wl12xx_priv *priv = (struct wl12xx_priv *)wl->priv;
  #line 875 
  ret = wl12xx_top_reg_read(wl,8992,& spare_reg);
  #line 876 
  if (ret < 0) 
               #line 877 
               return ret;
  #line 879 
  if ((unsigned int)spare_reg == 65535U) 
                                         #line 880 
                                         return -14;
  #line 881 
  spare_reg = (unsigned short)((unsigned int)spare_reg | 4U);
  #line 882 
  ret = wl12xx_top_reg_write(wl,8992,(unsigned short)((int)spare_reg));
  #line 883 
  if (ret < 0) 
               #line 884 
               return ret;
  #line 887 
  if ((unsigned int)priv->tcxo_clock + 4294967290U <= 1U) {
    #line 889 
    return wl128x_manually_configure_mcs_pll(wl);
  }
  #line 892 
  input_freq = (unsigned char)(((unsigned int)((unsigned char)clk) & 1U) + 1U);
  #line 894 
  ret = wl12xx_top_reg_read(wl,3474,& pll_config);
  #line 895 
  if (ret < 0) 
               #line 896 
               return ret;
  #line 898 
  if ((unsigned int)pll_config == 65535U) 
                                          #line 899 
                                          return -14;
  #line 900 
  pll_config = (unsigned short)(((int)input_freq << 4) | (int)pll_config);
  #line 901 
  pll_config = (unsigned short)((unsigned int)pll_config | 3U);
  #line 902 
  ret = wl12xx_top_reg_write(wl,3474,(unsigned short)((int)pll_config));
  #line 904 
  return ret;
}

#line 914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl128x_boot_clk(struct wl1271 *wl, int *selected_clock)
{
  #line 917 
  u16 sys_clk_cfg;
  #line 918 
  int ret;
  #line 916 
  struct wl12xx_priv *priv = (struct wl12xx_priv *)wl->priv;
  #line 921 
  if ((unsigned int)priv->ref_clock + 4294967292U <= 1U) {
    #line 923 
    if (wl128x_switch_tcxo_to_fref(wl) == 0) 
                                             #line 924 
                                             return -22;
    #line 925 
    goto fref_clk;
  }
  #line 929 
  ret = wl12xx_top_reg_read(wl,8704,& sys_clk_cfg);
  #line 930 
  if (ret < 0) 
               #line 931 
               return ret;
  #line 933 
  if ((unsigned int)sys_clk_cfg == 65535U) 
                                           #line 934 
                                           return -22;
  #line 935 
  if (((unsigned long)sys_clk_cfg & 16UL) != 0UL) 
                                                  #line 936 
                                                  goto fref_clk;
  #line 939 
  if ((unsigned int)priv->tcxo_clock + 4294967292U <= 1U) {
    #line 941 
    if (wl128x_switch_tcxo_to_fref(wl) == 0) 
                                             #line 942 
                                             return -22;
    #line 943 
    goto fref_clk;
  }
  #line 947 
  if (! wl128x_is_tcxo_valid(wl)) 
                                  #line 948 
                                  return -22;
  #line 949 
  *selected_clock = priv->tcxo_clock;
  #line 950 
  goto config_mcs_pll;
  #line 952 
  fref_clk: 
            #line 952 
  ;
  #line 954 
  if (! wl128x_is_fref_valid(wl)) 
                                  #line 955 
                                  return -22;
  #line 956 
  *selected_clock = priv->ref_clock;
  #line 958 
  config_mcs_pll: 
                  #line 958 
  ;
  #line 959 
  return wl128x_configure_mcs_pll(wl,*selected_clock);
}

#line 962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl127x_boot_clk(struct wl1271 *wl)
{
  #line 965 
  u32 pause;
  #line 966 
  u32 clk;
  #line 967 
  int ret;
  #line 964 
  struct wl12xx_priv *priv = (struct wl12xx_priv *)wl->priv;
  #line 969 
  if (((int)wl->hw_pg_ver & 3) <= 2) 
                                     #line 970 
                                     wl->quirks |= 1U;
  #line 972 
  if ((priv->ref_clock == 0 || priv->ref_clock == 2) || priv->ref_clock == 4) 
    #line 976 
    clk = 3U;
  else 
    #line 977 
    if ((priv->ref_clock == 1 || priv->ref_clock == 5) || priv->ref_clock == 3) 
      #line 981 
      clk = 5U; else 
                     #line 983 
                     return -22;
  #line 985 
  if (priv->ref_clock != 0) {
    #line 986 
    u16 val;
    #line 988 
    ret = wl12xx_top_reg_read(wl,1096,& val);
    #line 989 
    if (ret < 0) 
                 #line 990 
                 goto out;
    #line 992 
    val = (unsigned short)((unsigned int)val & 65151U);
    #line 993 
    ret = wl12xx_top_reg_write(wl,1096,(unsigned short)((int)val));
    #line 994 
    if (ret < 0) 
                 #line 995 
                 goto out;
    #line 998 
    ret = wl12xx_top_reg_read(wl,3252,& val);
    #line 999 
    if (ret < 0) 
                 #line 1000 
                 goto out;
    #line 1002 
    val = (unsigned short)((unsigned int)val | 49152U);
    #line 1003 
    ret = wl12xx_top_reg_write(wl,3252,(unsigned short)((int)val));
    #line 1004 
    if (ret < 0) 
                 #line 1005 
                 goto out;
  }
  else {
    #line 1007 
    u16 val_0;
    #line 1009 
    ret = wl12xx_top_reg_read(wl,3250,& val_0);
    #line 1010 
    if (ret < 0) 
                 #line 1011 
                 goto out;
    #line 1013 
    val_0 = (unsigned short)((unsigned int)val_0 & 63743U);
    #line 1014 
    val_0 = (unsigned short)((unsigned int)val_0 | 1792U);
    #line 1015 
    ret = wl12xx_top_reg_write(wl,3250,(unsigned short)((int)val_0));
    #line 1016 
    if (ret < 0) 
                 #line 1017 
                 goto out;
  }
  #line 1020 
  ret = wlcore_write32(wl,3170368,clk);
  #line 1021 
  if (ret < 0) 
               #line 1022 
               goto out;
  #line 1024 
  ret = wlcore_read32(wl,3170368,& pause);
  #line 1025 
  if (ret < 0) 
               #line 1026 
               goto out;
  #line 1028 
  if ((long)((wl12xx_debug_level & 4U) != 0U) != 0L) {
    #line 1028 
    bool branch;
    #line 1028 
    struct _ddebug __UNIQUE_ID_ddebug559 = {.modname = (char *)"wl12xx", .function = (char *)"wl127x_boot_clk", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)1028U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1028 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug559.key.dd_key_false.key,(_Bool)0);
    #line 1028 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1028 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug559,(char *)"wlcore",pause);
  }
  #line 1030 
  pause &= 4294966272U;
  #line 1031 
  pause |= 1023U;
  #line 1032 
  ret = wlcore_write32(wl,3170312,pause);
  #line 1034 
  out: 
       #line 1034 
  ;
  #line 1035 
  return ret;
}

#line 1038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl1271_boot_soft_reset(struct wl1271 *wl)
{
  #line 1040 
  unsigned long timeout;
  #line 1041 
  u32 boot_data;
  #line 1042 
  int ret = 0;
  #line 1045 
  ret = wlcore_write32(wl,3145728,2U);
  #line 1046 
  if (ret < 0) 
               #line 1047 
               goto out;
  #line 1050 
  timeout = usecs_to_jiffies(1000000U) + jiffies;
  #line 1051 
  while (1) {
    {
      #line 1052 
      ret = wlcore_read32(wl,3145728,& boot_data);
      #line 1053 
      if (ret < 0) 
                   #line 1054 
                   goto out;
      #line 1056 
      if ((long)((wl12xx_debug_level & 4U) != 0U) != 0L) {
        #line 1056 
        bool branch;
        #line 1056 
        struct _ddebug __UNIQUE_ID_ddebug560 = {.modname = (char *)"wl12xx", .function = (char *)"wl1271_boot_soft_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)1056U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1056 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug560.key.dd_key_false.key,(_Bool)0);
        #line 1056 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 1056 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug560,(char *)"wlcore",boot_data);
      }
      #line 1057 
      if (((unsigned long)boot_data & 2UL) == 0UL) 
                                                   #line 1058 
                                                   break;
      {
        #line 1060 
        unsigned long __dummy;
        #line 1060 
        unsigned long __dummy2;
        }
      #line 1060 
      if (1 != 0) {
        {
          #line 1060 
          unsigned long __dummy_0;
          #line 1060 
          unsigned long __dummy2_0;
          }
        #line 1060 
        if (1 != 0) 
          #line 1060 
          if ((long)(timeout - jiffies) < 0L) {
            #line 1063 
            printk((char *)"\001");
            #line 1064 
            return -1;
          }
      }
      #line 1067 
      __const_udelay(4295000UL);
    }
  }
  #line 1071 
  ret = wlcore_write32(wl,3167312,0U);
  #line 1072 
  if (ret < 0) 
               #line 1073 
               goto out;
  #line 1076 
  ret = wlcore_write32(wl,3148184,65535U);
  #line 1078 
  out: 
       #line 1078 
  ;
  #line 1079 
  return ret;
}

#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_pre_boot(struct wl1271 *wl)
{
  #line 1086 
  u32 clk;
  #line 1084 
  struct wl12xx_priv *priv = (struct wl12xx_priv *)wl->priv;
  #line 1085 
  int ret = 0;
  #line 1087 
  int selected_clock = -1;
  #line 1089 
  if (wl->chip.id == 84082961U) {
    #line 1090 
    ret = wl128x_boot_clk(wl,& selected_clock);
    #line 1091 
    if (ret < 0) 
                 #line 1092 
                 goto out;
  }
  else {
    #line 1094 
    ret = wl127x_boot_clk(wl);
    #line 1095 
    if (ret < 0) 
                 #line 1096 
                 goto out;
  }
  #line 1100 
  ret = wlcore_write32(wl,3170560,4U);
  #line 1101 
  if (ret < 0) 
               #line 1102 
               goto out;
  #line 1104 
  __const_udelay(2147500UL);
  #line 1106 
  ret = wlcore_set_partition(wl,wl->ptable + 3U);
  #line 1107 
  if (ret < 0) 
               #line 1108 
               goto out;
  #line 1114 
  ret = wlcore_read32(wl,3211308,& clk);
  #line 1115 
  if (ret < 0) 
               #line 1116 
               goto out;
  #line 1118 
  if ((long)((wl12xx_debug_level & 4U) != 0U) != 0L) {
    #line 1118 
    bool branch;
    #line 1118 
    struct _ddebug __UNIQUE_ID_ddebug561 = {.modname = (char *)"wl12xx", .function = (char *)"wl12xx_pre_boot", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)1118U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1118 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug561.key.dd_key_false.key,(_Bool)0);
    #line 1118 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1118 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug561,(char *)"wlcore",clk);
  }
  #line 1120 
  if (wl->chip.id == 84082961U) 
                                #line 1121 
                                clk = ((unsigned int)(selected_clock << 5) & 96U) | clk; else 
                                                                    #line 1123 
                                                                    clk = (unsigned int)(priv->ref_clock << 5) | clk;
  #line 1125 
  ret = wlcore_write32(wl,3211308,clk);
  #line 1126 
  if (ret < 0) 
               #line 1127 
               goto out;
  #line 1129 
  ret = wlcore_set_partition(wl,wl->ptable + 1U);
  #line 1130 
  if (ret < 0) 
               #line 1131 
               goto out;
  #line 1134 
  ret = wlcore_write_reg(wl,6,4294967295U);
  #line 1135 
  if (ret < 0) 
               #line 1136 
               goto out;
  #line 1138 
  ret = wl1271_boot_soft_reset(wl);
  #line 1139 
  if (ret < 0) 
               #line 1140 
               goto out;
  #line 1142 
  out: 
       #line 1142 
  ;
  #line 1143 
  return ret;
}

#line 1146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_pre_upload(struct wl1271 *wl)
{
  #line 1148 
  u32 tmp;
  #line 1149 
  u16 polarity;
  #line 1150 
  int ret;
  #line 1154 
  if ((long)((wl12xx_debug_level & 4U) != 0U) != 0L) {
    #line 1154 
    bool branch;
    #line 1154 
    struct _ddebug __UNIQUE_ID_ddebug562 = {.modname = (char *)"wl12xx", .function = (char *)"wl12xx_pre_upload", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)1154U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1154 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug562.key.dd_key_false.key,(_Bool)0);
    #line 1154 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1154 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug562,(char *)"wlcore");
  }
  #line 1156 
  ret = wlcore_write32(wl,3167768,3167768U);
  #line 1157 
  if (ret < 0) 
               #line 1158 
               goto out;
  #line 1160 
  ret = wlcore_read_reg(wl,8,& tmp);
  #line 1161 
  if (ret < 0) 
               #line 1162 
               goto out;
  #line 1164 
  if ((long)((wl12xx_debug_level & 4U) != 0U) != 0L) {
    #line 1164 
    bool branch_0;
    #line 1164 
    struct _ddebug __UNIQUE_ID_ddebug563 = {.modname = (char *)"wl12xx", .function = (char *)"wl12xx_pre_upload", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)1164U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1164 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug563.key.dd_key_false.key,(_Bool)0);
    #line 1164 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 1164 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug563,(char *)"wlcore",tmp);
  }
  #line 1167 
  ret = wlcore_read32(wl,3167760,& tmp);
  #line 1168 
  if (ret < 0) 
               #line 1169 
               goto out;
  #line 1174 
  if (wl->chip.id == 84082961U) {
    #line 1175 
    ret = wl12xx_top_reg_write(wl,3348,(unsigned short)2);
    #line 1176 
    if (ret < 0) 
                 #line 1177 
                 goto out;
  }
  #line 1181 
  ret = wl12xx_top_reg_read(wl,100,& polarity);
  #line 1182 
  if (ret < 0) 
               #line 1183 
               goto out;
  #line 1186 
  polarity = (unsigned short)((unsigned int)polarity & 65533U);
  #line 1187 
  ret = wl12xx_top_reg_write(wl,100,(unsigned short)((int)polarity));
  #line 1189 
  out: 
       #line 1189 
  ;
  #line 1190 
  return ret;
}

#line 1193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_enable_interrupts(struct wl1271 *wl)
{
  #line 1195 
  int ret;
  #line 1197 
  ret = wlcore_write_reg(wl,6,127U);
  #line 1199 
  if (ret < 0) 
               #line 1200 
               goto out;
  #line 1202 
  wlcore_enable_interrupts(wl);
  #line 1203 
  ret = wlcore_write_reg(wl,6,4294967186U);
  #line 1205 
  if (ret < 0) 
               #line 1206 
               goto disable_interrupts;
  #line 1208 
  ret = wlcore_write32(wl,3147784,60U);
  #line 1209 
  if (ret < 0) 
               #line 1210 
               goto disable_interrupts;
  #line 1212 
  return ret;
  #line 1214 
  disable_interrupts: 
                      #line 1214 
  ;
  #line 1215 
  wlcore_disable_interrupts(wl);
  #line 1217 
  out: 
       #line 1217 
  ;
  #line 1218 
  return ret;
}

#line 1221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_boot(struct wl1271 *wl)
{
  #line 1223 
  int ret;
  #line 1225 
  ret = wl12xx_pre_boot(wl);
  #line 1226 
  if (ret < 0) 
               #line 1227 
               goto out;
  #line 1229 
  ret = wlcore_boot_upload_nvs(wl);
  #line 1230 
  if (ret < 0) 
               #line 1231 
               goto out;
  #line 1233 
  ret = wl12xx_pre_upload(wl);
  #line 1234 
  if (ret < 0) 
               #line 1235 
               goto out;
  #line 1237 
  ret = wlcore_boot_upload_firmware(wl);
  #line 1238 
  if (ret < 0) 
               #line 1239 
               goto out;
  #line 1241 
  wl->event_mask = 4235117569U;
  #line 1257 
  wl->ap_event_mask = 1048576U;
  #line 1259 
  ret = wlcore_boot_run_firmware(wl);
  #line 1260 
  if (ret < 0) 
               #line 1261 
               goto out;
  #line 1263 
  ret = wl12xx_enable_interrupts(wl);
  #line 1265 
  out: 
       #line 1265 
  ;
  #line 1266 
  return ret;
}

#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_trigger_cmd(struct wl1271 *wl, int cmd_box_addr, void *buf, size_t len)
{
  #line 1272 
  int ret;
  #line 1274 
  ret = wlcore_write(wl,cmd_box_addr,buf,len,(_Bool)0);
  #line 1275 
  if (ret < 0) 
               #line 1276 
               return ret;
  #line 1278 
  ret = wlcore_write_reg(wl,5,1U);
  #line 1280 
  return ret;
}

#line 1283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_ack_event(struct wl1271 *wl)
{
  #line 1285 
  return wlcore_write_reg(wl,5,2U);
}

#line 1289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static u32 wl12xx_calc_tx_blocks(struct wl1271 *wl, u32 len, u32 spare_blks)
{
  #line 1291 
  u32 blk_size = 252U;
  #line 1292 
  u32 align_len = wlcore_calc_packet_alignment(wl,len);
  #line 1294 
  return ((align_len + blk_size) + 4294967295U) / blk_size + spare_blks;
}

#line 1298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static void wl12xx_set_tx_desc_blocks(struct wl1271 *wl, struct wl1271_tx_hw_descr *desc, u32 blks, u32 spare_blks)
{
  #line 1301 
  if (wl->chip.id == 84082961U) 
                                #line 1302 
                                desc->__anonCompField_wl1271_tx_hw_descr_200.wl128x_mem.total_mem_blocks = (unsigned char)blks;
  else {
    #line 1304 
    desc->__anonCompField_wl1271_tx_hw_descr_200.wl127x_mem.extra_blocks = (unsigned char)spare_blks;
    #line 1305 
    desc->__anonCompField_wl1271_tx_hw_descr_200.wl127x_mem.total_mem_blocks = (unsigned char)blks;
  }
  #line 1307 
  return;
}

#line 1310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static void wl12xx_set_tx_desc_data_len(struct wl1271 *wl, struct wl1271_tx_hw_descr *desc, struct sk_buff *skb)
{
  #line 1313 
  u32 aligned_len = wlcore_calc_packet_alignment(wl,skb->len);
  #line 1315 
  if (wl->chip.id == 84082961U) {
    #line 1316 
    desc->__anonCompField_wl1271_tx_hw_descr_200.wl128x_mem.extra_bytes = (unsigned char)((int)((unsigned char)aligned_len) - (int)((unsigned char)skb->len));
    #line 1317 
    desc->length = (unsigned short)(aligned_len >> 2);
    #line 1319 
    if ((long)((wl12xx_debug_level & 64U) != 0U) != 0L) {
      #line 1319 
      bool branch;
      #line 1319 
      struct _ddebug __UNIQUE_ID_ddebug564 = {.modname = (char *)"wl12xx", .function = (char *)"wl12xx_set_tx_desc_data_len", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)1319U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1319 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug564.key.dd_key_false.key,(_Bool)0);
      #line 1319 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1319 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug564,(char *)"wlcore",(int)desc->hlid,(int)desc->length,(int)desc->life_time,(int)desc->__anonCompField_wl1271_tx_hw_descr_200.wl128x_mem.total_mem_blocks,(int)desc->__anonCompField_wl1271_tx_hw_descr_200.wl128x_mem.extra_bytes);
    }
  }
  else {
    #line 1328 
    int pad = (int)(aligned_len - skb->len);
    #line 1329 
    desc->tx_attr = (unsigned short)((int)desc->tx_attr | ((int)((unsigned short)pad) << 10U));
    #line 1333 
    desc->length = (unsigned short)(aligned_len >> 2);
    #line 1335 
    if ((long)((wl12xx_debug_level & 64U) != 0U) != 0L) {
      #line 1335 
      bool branch_0;
      #line 1335 
      struct _ddebug __UNIQUE_ID_ddebug565 = {.modname = (char *)"wl12xx", .function = (char *)"wl12xx_set_tx_desc_data_len", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)1335U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1335 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug565.key.dd_key_false.key,(_Bool)0);
      #line 1335 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1335 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug565,(char *)"wlcore",pad,(int)desc->hlid,(int)desc->length,(int)desc->life_time,(int)desc->__anonCompField_wl1271_tx_hw_descr_200.wl127x_mem.total_mem_blocks);
    }
  }
  #line 1338 
  return;
}

#line 1345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_get_rx_buf_align(struct wl1271 *wl, u32 rx_desc)
{
  #line 1347 
  if (((unsigned long)rx_desc & 1048576UL) != 0UL) 
                                                   #line 1348 
                                                   return 1;
  #line 1350 
  return 0;
}

#line 1353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static u32 wl12xx_get_rx_packet_len(struct wl1271 *wl, void *rx_data, u32 data_len)
{
  #line 1356 
  struct wl1271_rx_descriptor *desc = (struct wl1271_rx_descriptor *)rx_data;
  #line 1359 
  if (data_len <= 15U || (unsigned long)data_len < (unsigned long)desc->pad_len + 16UL) 
    #line 1361 
    return 0U;
  #line 1363 
  return (data_len - (unsigned int)desc->pad_len) + 4294967280U;
}

#line 1366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_tx_delayed_compl(struct wl1271 *wl)
{
  #line 1368 
  if ((unsigned int)(wl->fw_status)->tx_results_counter == (wl->tx_results_count & 255U)) 
    #line 1370 
    return 0;
  #line 1372 
  return wlcore_tx_complete(wl);
}

#line 1375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_hw_init(struct wl1271 *wl)
{
  #line 1377 
  int ret;
  #line 1379 
  if (wl->chip.id == 84082961U) {
    #line 1380 
    u32 host_cfg_bitmap = 1U;
    #line 1382 
    ret = wl128x_cmd_general_parms(wl);
    #line 1383 
    if (ret < 0) 
                 #line 1384 
                 goto out;
    #line 1390 
    if (wl->plt_mode == (unsigned int)PLT_FEM_DETECT) 
                                                      #line 1391 
                                                      goto out;
    #line 1393 
    ret = wl128x_cmd_radio_parms(wl);
    #line 1394 
    if (ret < 0) 
                 #line 1395 
                 goto out;
    #line 1397 
    if (((unsigned long)wl->quirks & 4UL) != 0UL) 
                                                  #line 1399 
                                                  host_cfg_bitmap |= 8U;
    #line 1402 
    ret = wl1271_acx_host_if_cfg_bitmap(wl,host_cfg_bitmap);
    #line 1403 
    if (ret < 0) 
                 #line 1404 
                 goto out;
  }
  else {
    #line 1406 
    ret = wl1271_cmd_general_parms(wl);
    #line 1407 
    if (ret < 0) 
                 #line 1408 
                 goto out;
    #line 1414 
    if (wl->plt_mode == (unsigned int)PLT_FEM_DETECT) 
                                                      #line 1415 
                                                      goto out;
    #line 1417 
    ret = wl1271_cmd_radio_parms(wl);
    #line 1418 
    if (ret < 0) 
                 #line 1419 
                 goto out;
    #line 1420 
    ret = wl1271_cmd_ext_radio_parms(wl);
    #line 1421 
    if (ret < 0) 
                 #line 1422 
                 goto out;
  }
  #line 1424 
  out: 
       #line 1424 
  ;
  #line 1425 
  return ret;
}

#line 1428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static void wl12xx_convert_fw_status(struct wl1271 *wl, void *raw_fw_status, struct wl_fw_status *fw_status)
{
  #line 1431 
  struct wl12xx_fw_status *int_fw_status = (struct wl12xx_fw_status *)raw_fw_status;
  #line 1433 
  fw_status->intr = int_fw_status->intr;
  #line 1434 
  fw_status->fw_rx_counter = int_fw_status->fw_rx_counter;
  #line 1435 
  fw_status->drv_rx_counter = int_fw_status->drv_rx_counter;
  #line 1436 
  fw_status->tx_results_counter = int_fw_status->tx_results_counter;
  #line 1437 
  fw_status->rx_pkt_descs = (__le32 *)(& int_fw_status->rx_pkt_descs);
  #line 1439 
  fw_status->fw_localtime = int_fw_status->fw_localtime;
  #line 1440 
  fw_status->link_ps_bitmap = int_fw_status->link_ps_bitmap;
  #line 1441 
  fw_status->link_fast_bitmap = int_fw_status->link_fast_bitmap;
  #line 1443 
  fw_status->total_released_blks = int_fw_status->total_released_blks;
  #line 1445 
  fw_status->tx_total = int_fw_status->tx_total;
  #line 1447 
  fw_status->counters.tx_released_pkts = (u8 *)(& int_fw_status->counters.tx_released_pkts);
  #line 1449 
  fw_status->counters.tx_lnk_free_pkts = (u8 *)(& int_fw_status->counters.tx_lnk_free_pkts);
  #line 1451 
  fw_status->counters.tx_voice_released_blks = int_fw_status->counters.tx_voice_released_blks;
  #line 1453 
  fw_status->counters.tx_last_rate = int_fw_status->counters.tx_last_rate;
  #line 1456 
  fw_status->log_start_addr = int_fw_status->log_start_addr;
  #line 1457 
  return;
}

#line 1459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static u32 wl12xx_sta_get_ap_rate_mask(struct wl1271 *wl, struct wl12xx_vif *wlvif)
{
  #line 1462 
  return wlvif->rate_set;
}

#line 1465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static void wl12xx_conf_init(struct wl1271 *wl)
{
  #line 1467 
  struct wl12xx_priv *priv = (struct wl12xx_priv *)wl->priv;
  #line 1470 
  memcpy((void *)(& wl->conf),(void *)(& wl12xx_conf),924UL);
  #line 1473 
  memcpy((void *)(& priv->conf),(void *)(& wl12xx_default_priv_conf),33UL);
  #line 1474 
  return;
}

#line 1476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static bool wl12xx_mac_in_fuse(struct wl1271 *wl)
{
  #line 1479 
  u8 major;
  #line 1479 
  u8 minor;
  #line 1478 
  bool supported = (_Bool)0;
  #line 1481 
  if (wl->chip.id == 84082961U) {
    #line 1482 
    major = (unsigned char)((unsigned int)((unsigned char)((int)wl->hw_pg_ver >> 2)) & 3U);
    #line 1483 
    minor = (unsigned char)((unsigned int)((unsigned char)wl->hw_pg_ver) & 3U);
    #line 1486 
    if ((unsigned int)major > 2U || (unsigned int)major == 2U && (unsigned int)minor != 0U) 
      #line 1487 
      supported = (_Bool)1;
  }
  else {
    #line 1489 
    major = (unsigned char)((unsigned int)((unsigned char)wl->hw_pg_ver) & 3U);
    #line 1490 
    minor = (unsigned char)((unsigned int)((unsigned char)((int)wl->hw_pg_ver >> 2)) & 3U);
    #line 1493 
    if ((unsigned int)major == 3U && (unsigned int)minor != 0U) 
                                                                #line 1494 
                                                                supported = (_Bool)1;
  }
  #line 1497 
  if ((long)((wl12xx_debug_level & 262144U) != 0U) != 0L) {
    #line 1497 
    bool branch;
    #line 1497 
    struct _ddebug __UNIQUE_ID_ddebug566 = {.modname = (char *)"wl12xx", .function = (char *)"wl12xx_mac_in_fuse", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)1497U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1497 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug566.key.dd_key_false.key,(_Bool)0);
    #line 1497 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1497 
      char *tmp;
      #line 1497 
      if ((int)supported != 0) 
                               #line 1497 
                               tmp = (char *)"is"; else 
                                                        #line 1497 
                                                        tmp = (char *)"is not";
      #line 1497 
      ;
      #line 1497 
      ;
      #line 1497 
      __dynamic_pr_debug(& __UNIQUE_ID_ddebug566,(char *)"wlcore",(int)major,(int)minor,tmp);
    }
  }
  #line 1501 
  return supported;
}

#line 1504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_get_fuse_mac(struct wl1271 *wl)
{
  #line 1506 
  u32 mac1;
  #line 1506 
  u32 mac2;
  #line 1507 
  int ret;
  #line 1509 
  ret = wlcore_set_partition(wl,wl->ptable + 3U);
  #line 1510 
  if (ret < 0) 
               #line 1511 
               goto out;
  #line 1513 
  ret = wlcore_read32(wl,3215028,& mac1);
  #line 1514 
  if (ret < 0) 
               #line 1515 
               goto out;
  #line 1517 
  ret = wlcore_read32(wl,3215032,& mac2);
  #line 1518 
  if (ret < 0) 
               #line 1519 
               goto out;
  #line 1522 
  wl->fuse_oui_addr = ((mac2 << 8) & 16776960U) + (mac1 >> 24);
  #line 1524 
  wl->fuse_nic_addr = mac1 & 16777215U;
  #line 1526 
  ret = wlcore_set_partition(wl,wl->ptable);
  #line 1528 
  out: 
       #line 1528 
  ;
  #line 1529 
  return ret;
}

#line 1532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_get_pg_ver(struct wl1271 *wl, s8 *ver)
{
  #line 1534 
  u16 die_info;
  #line 1535 
  int ret;
  #line 1537 
  if (wl->chip.id == 84082961U) 
                                #line 1538 
                                ret = wl12xx_top_reg_read(wl,8530,& die_info); else 
                                                                    #line 1541 
                                                                    ret = wl12xx_top_reg_read(wl,1290,& die_info);
  #line 1544 
  if (ret >= 0 && ver != (s8 *)0) 
                                  #line 1545 
                                  *ver = (signed char)((int)((signed char)((int)die_info >> 2)) & 15);
  #line 1547 
  return ret;
}

#line 1550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_get_mac(struct wl1271 *wl)
{
  #line 1552 
  if ((int)wl12xx_mac_in_fuse(wl) != 0) {
    #line 1553 
    return wl12xx_get_fuse_mac(wl);
  }
  #line 1555 
  return 0;
}

#line 1558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static void wl12xx_set_tx_desc_csum(struct wl1271 *wl, struct wl1271_tx_hw_descr *desc, struct sk_buff *skb)
{
  #line 1562 
  desc->__anonCompField_wl1271_tx_hw_descr_201.wl12xx_reserved = (unsigned char)0U;
  #line 1563 
  return;
}

#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_plt_init(struct wl1271 *wl)
{
  #line 1567 
  int ret;
  #line 1569 
  ret = (*((wl->ops)->boot))(wl);
  #line 1570 
  if (ret < 0) 
               #line 1571 
               goto out;
  #line 1573 
  ret = (*((wl->ops)->hw_init))(wl);
  #line 1574 
  if (ret < 0) 
               #line 1575 
               goto out_irq_disable;
  #line 1581 
  if (wl->plt_mode == (unsigned int)PLT_FEM_DETECT) 
                                                    #line 1582 
                                                    goto out;
  #line 1584 
  ret = wl1271_acx_init_mem_config(wl);
  #line 1585 
  if (ret < 0) 
               #line 1586 
               goto out_irq_disable;
  #line 1588 
  ret = wl12xx_acx_mem_cfg(wl);
  #line 1589 
  if (ret < 0) 
               #line 1590 
               goto out_free_memmap;
  #line 1593 
  ret = wl1271_cmd_data_path(wl,(_Bool)1);
  #line 1594 
  if (ret < 0) 
               #line 1595 
               goto out_free_memmap;
  #line 1598 
  ret = wl1271_acx_sleep_auth(wl,(unsigned char)0);
  #line 1599 
  if (ret < 0) 
               #line 1600 
               goto out_free_memmap;
  #line 1603 
  ret = wl1271_acx_pm_config(wl);
  #line 1604 
  if (ret < 0) 
               #line 1605 
               goto out_free_memmap;
  #line 1607 
  goto out;
  #line 1609 
  out_free_memmap: 
                   #line 1609 
  ;
  #line 1610 
  kfree((void *)wl->target_mem_map);
  #line 1611 
  wl->target_mem_map = (struct wl1271_acx_mem_map *)0;
  #line 1613 
  out_irq_disable: 
                   #line 1613 
  ;
  #line 1614 
  cif_mutex_unlock_mutex_of_wl1271(& wl->mutex);
  #line 1622 
  wlcore_disable_interrupts(wl);
  #line 1623 
  cif_mutex_lock_mutex_of_wl1271(& wl->mutex);
  #line 1624 
  out: 
       #line 1624 
  ;
  #line 1625 
  return ret;
}

#line 1628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_get_spare_blocks(struct wl1271 *wl, bool is_gem)
{
  #line 1630 
  if ((int)is_gem != 0) 
                        #line 1631 
                        return 2;
  #line 1633 
  return 1;
}

#line 1636  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_set_key(struct wl1271 *wl, enum set_key_cmd cmd, struct ieee80211_vif *vif, struct ieee80211_sta *sta, struct ieee80211_key_conf *key_conf)
{
  #line 1641 
  return wlcore_set_key(wl,cmd,vif,sta,key_conf);
}

#line 1644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_set_peer_cap(struct wl1271 *wl, struct ieee80211_sta_ht_cap *ht_cap, bool allow_ht_operation, u32 rate_set, u8 hlid)
{
  #line 1649 
  return wl1271_acx_set_ht_capabilities(wl,ht_cap,
                                     (_Bool)((bool)((int)allow_ht_operation) != 0),
                                     (unsigned char)((int)hlid));
}

#line 1653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static bool wl12xx_lnk_high_prio(struct wl1271 *wl, u8 hlid, struct wl1271_link *lnk)
{
  #line 1656 
  u8 thold;
  #line 1658 
  if ((int)test_bit((long)hlid,& wl->fw_fast_lnk_map) != 0) 
                                                            #line 1659 
                                                            thold = wl->conf.tx.fast_link_thold; else 
                                                                    #line 1661 
                                                                    thold = wl->conf.tx.slow_link_thold;
  #line 1663 
  return (_Bool)((int)lnk->allocated_pkts < (int)thold);
}

#line 1666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static bool wl12xx_lnk_low_prio(struct wl1271 *wl, u8 hlid, struct wl1271_link *lnk)
{
  #line 1670 
  return (_Bool)1;
}

#line 1673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static u32 wl12xx_convert_hwaddr(struct wl1271 *wl, u32 hwaddr)
{
  #line 1675 
  return hwaddr << 5;
}

#line 1678 
#line 1793 
static int wl12xx_setup(struct wl1271 *wl);
#line 1680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static struct wlcore_ops wl12xx_ops = {.setup = & wl12xx_setup, .identify_chip = & wl12xx_identify_chip, .boot = & wl12xx_boot, .plt_init = & wl12xx_plt_init, .trigger_cmd = & wl12xx_trigger_cmd, .ack_event = & wl12xx_ack_event, .wait_for_event = & wl12xx_wait_for_event, .process_mailbox_events = & wl12xx_process_mailbox_events, .calc_tx_blocks = & wl12xx_calc_tx_blocks, .set_tx_desc_blocks = & wl12xx_set_tx_desc_blocks, .set_tx_desc_data_len = & wl12xx_set_tx_desc_data_len, .get_rx_buf_align = & wl12xx_get_rx_buf_align, .get_rx_packet_len = & wl12xx_get_rx_packet_len, .tx_delayed_compl = & wl12xx_tx_delayed_compl, .hw_init = & wl12xx_hw_init, .convert_fw_status = & wl12xx_convert_fw_status, .sta_get_ap_rate_mask = & wl12xx_sta_get_ap_rate_mask, .get_pg_ver = & wl12xx_get_pg_ver, .get_mac = & wl12xx_get_mac, .set_tx_desc_csum = & wl12xx_set_tx_desc_csum, .debugfs_init = & wl12xx_debugfs_add_files, .scan_start = & wl12xx_scan_start, .scan_stop = & wl12xx_scan_stop, .sched_scan_start = & wl12xx_sched_scan_start, .sched_scan_stop = & wl12xx_scan_sched_scan_stop, .get_spare_blocks = & wl12xx_get_spare_blocks, .set_key = & wl12xx_set_key, .channel_switch = & wl12xx_cmd_channel_switch, .set_peer_cap = & wl12xx_set_peer_cap, .convert_hwaddr = & wl12xx_convert_hwaddr, .lnk_high_prio = & wl12xx_lnk_high_prio, .lnk_low_prio = & wl12xx_lnk_low_prio};
#line 1723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static struct ieee80211_sta_ht_cap wl12xx_ht_cap = {.cap = (unsigned short)304U, .ht_supported = (_Bool)1, .ampdu_density = (unsigned char)6U, .mcs = {.rx_mask = {(unsigned char)255U}, .rx_highest = (unsigned short)72U, .tx_params = (unsigned char)1U}};
#line 1736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static struct ieee80211_iface_limit wl12xx_iface_limits[2U] = {{.max = (unsigned short)3U, .types = (unsigned short)4U}, {.max = (unsigned short)1U, .types = (unsigned short)776U}};
#line 1750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static struct ieee80211_iface_combination wl12xx_iface_combinations[1U] = {{.limits = (struct ieee80211_iface_limit *)(& wl12xx_iface_limits), .num_different_channels = 1U, .max_interfaces = (unsigned short)3U, .n_limits = (unsigned char)2U}};
#line 1759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static struct wl12xx_clock wl12xx_refclock_table[7U] = {{.freq = 19200000U}, {.freq = 26000000U, .hw_idx = (unsigned char)1U}, {.freq = 26000000U, .xtal = (_Bool)1, .hw_idx = (unsigned char)5U}, {.freq = 38400000U, .hw_idx = (unsigned char)2U}, {.freq = 38400000U, .xtal = (_Bool)1, .hw_idx = (unsigned char)4U}, {.freq = 52000000U, .hw_idx = (unsigned char)3U}};
#line 1769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static struct wl12xx_clock wl12xx_tcxoclock_table[9U] = {{.freq = 16368000U, .xtal = (_Bool)1, .hw_idx = (unsigned char)4U}, {.freq = 16800000U, .xtal = (_Bool)1, .hw_idx = (unsigned char)6U}, {.freq = 19200000U, .xtal = (_Bool)1}, {.freq = 26000000U, .xtal = (_Bool)1, .hw_idx = (unsigned char)1U}, {.freq = 32736000U, .xtal = (_Bool)1, .hw_idx = (unsigned char)5U}, {.freq = 33600000U, .xtal = (_Bool)1, .hw_idx = (unsigned char)7U}, {.freq = 38400000U, .xtal = (_Bool)1, .hw_idx = (unsigned char)2U}, {.freq = 52000000U, .xtal = (_Bool)1, .hw_idx = (unsigned char)3U}};
#line 1781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_get_clock_idx(struct wl12xx_clock *table, u32 freq, bool xtal)
{
  #line 1784 
  int i;
  #line 1786 
  i = 0;
  #line 1786 
  while ((table + (unsigned long)i)->freq != 0U) {
    #line 1787 
    if ((table + (unsigned long)i)->freq == freq && (int)(table + (unsigned long)i)->xtal == (xtal != 0)) 
      #line 1788 
      return (int)(table + (unsigned long)i)->hw_idx;
    #line 1786 
    i ++;
  }
  #line 1790 
  return -22;
}

#line 1793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_setup(struct wl1271 *wl)
{
  #line 1795 
  struct wl12xx_priv *priv = (struct wl12xx_priv *)wl->priv;
  #line 1796 
  struct wlcore_platdev_data *pdev_data = dev_get_platdata(& (wl->pdev)->dev);
  #line 1802 
  wl->rtable = (int *)(& wl12xx_rtable);
  #line 1803 
  wl->num_tx_desc = 16U;
  #line 1804 
  wl->num_rx_desc = 8U;
  #line 1805 
  wl->num_links = (unsigned char)12U;
  #line 1806 
  wl->max_ap_stations = (unsigned char)8U;
  #line 1807 
  wl->iface_combinations = (struct ieee80211_iface_combination *)(& wl12xx_iface_combinations);
  #line 1808 
  wl->n_iface_combinations = (unsigned char)1U;
  #line 1809 
  wl->num_mac_addr = 2;
  #line 1810 
  wl->band_rate_to_idx = (u8 **)(& wl12xx_band_rate_to_idx);
  #line 1811 
  wl->hw_tx_rate_tbl_size = (unsigned char)22U;
  #line 1812 
  wl->hw_min_ht_rate = (unsigned char)8U;
  #line 1813 
  wl->fw_status_len = 84UL;
  #line 1814 
  wl->fw_status_priv_len = 0UL;
  #line 1815 
  wl->stats.fw_stats_len = 364UL;
  #line 1816 
  wl->ofdm_only_ap = (_Bool)1;
  #line 1817 
  wlcore_set_ht_cap(wl,(enum nl80211_band)NL80211_BAND_2GHZ,& wl12xx_ht_cap);
  #line 1818 
  wlcore_set_ht_cap(wl,(enum nl80211_band)NL80211_BAND_5GHZ,& wl12xx_ht_cap);
  #line 1819 
  wl12xx_conf_init(wl);
  #line 1821 
  if (fref_param == (char *)0) {
    #line 1822 
    priv->ref_clock = wl12xx_get_clock_idx((struct wl12xx_clock *)(& wl12xx_refclock_table),pdev_data->ref_clock_freq,(_Bool)((bool)((int)pdev_data->ref_clock_xtal) != 0));
    #line 1825 
    if (priv->ref_clock < 0) {
      #line 1826 
      char *tmp_0;
      #line 1826 
      if ((int)pdev_data->ref_clock_xtal != 0) 
                                               #line 1826 
                                               tmp_0 = (char *)"XTAL"; else 
                                                                    #line 1826 
                                                                    tmp_0 = (char *)"not XTAL";
      #line 1826 
      ;
      #line 1826 
      printk((char *)"\001",pdev_data->ref_clock_freq,tmp_0);
      #line 1831 
      return priv->ref_clock;
    }
  }
  else {
    #line 1834 
    if (cif_strcmp(fref_param,(char *)"19.2") == 0) 
                                                    #line 1835 
                                                    priv->ref_clock = 0;
    else {
      #line 1836 
      if (cif_strcmp(fref_param,(char *)"26") == 0) 
                                                    #line 1837 
                                                    priv->ref_clock = 1;
      else {
        #line 1838 
        if (cif_strcmp(fref_param,(char *)"26x") == 0) 
                                                       #line 1839 
                                                       priv->ref_clock = 5;
        else {
          #line 1840 
          if (cif_strcmp(fref_param,(char *)"38.4") == 0) 
                                                          #line 1841 
                                                          priv->ref_clock = 2;
          else {
            #line 1842 
            if (cif_strcmp(fref_param,(char *)"38.4x") == 0) 
                                                             #line 1843 
                                                             priv->ref_clock = 4;
            else {
              #line 1844 
              if (cif_strcmp(fref_param,(char *)"52") == 0) 
                                                            #line 1845 
                                                            priv->ref_clock = 3; else 
                                                                    #line 1847 
                                                                    printk((char *)"\001",fref_param);
            }
          }
        }
      }
    }
  }
  #line 1850 
  if (tcxo_param == (char *)0 && pdev_data->tcxo_clock_freq != 0U) {
    #line 1851 
    priv->tcxo_clock = wl12xx_get_clock_idx((struct wl12xx_clock *)(& wl12xx_tcxoclock_table),pdev_data->tcxo_clock_freq,(_Bool)1);
    #line 1854 
    if (priv->tcxo_clock < 0) {
      #line 1855 
      printk((char *)"\001",pdev_data->tcxo_clock_freq);
      #line 1858 
      return priv->tcxo_clock;
    }
  }
  else 
    #line 1860 
    if (tcxo_param != (char *)0) {
      #line 1861 
      if (cif_strcmp(tcxo_param,(char *)"19.2") == 0) 
                                                      #line 1862 
                                                      priv->tcxo_clock = 0;
      else {
        #line 1863 
        if (cif_strcmp(tcxo_param,(char *)"26") == 0) 
                                                      #line 1864 
                                                      priv->tcxo_clock = 1;
        else {
          #line 1865 
          if (cif_strcmp(tcxo_param,(char *)"38.4") == 0) 
                                                          #line 1866 
                                                          priv->tcxo_clock = 2;
          else {
            #line 1867 
            if (cif_strcmp(tcxo_param,(char *)"52") == 0) 
                                                          #line 1868 
                                                          priv->tcxo_clock = 3;
            else {
              #line 1869 
              if (cif_strcmp(tcxo_param,(char *)"16.368") == 0) 
                                                                #line 1870 
                                                                priv->tcxo_clock = 4;
              else {
                #line 1871 
                if (cif_strcmp(tcxo_param,(char *)"32.736") == 0) 
                                                                  #line 1872 
                                                                  priv->tcxo_clock = 5;
                else {
                  #line 1873 
                  if (cif_strcmp(tcxo_param,(char *)"16.8") == 0) 
                                                                  #line 1874 
                                                                  priv->tcxo_clock = 6;
                  else {
                    #line 1875 
                    if (cif_strcmp(tcxo_param,(char *)"33.6") == 0) 
                                                                    #line 1876 
                                                                    priv->tcxo_clock = 7; else 
                                                                    #line 1878 
                                                                    printk((char *)"\001",tcxo_param);
                  }
                }
              }
            }
          }
        }
      }
    }
  #line 1881 
  priv->rx_mem_addr = (struct wl127x_rx_mem_pool_addr *)kmalloc(8UL,3264U);
  #line 1882 
  if (priv->rx_mem_addr == (struct wl127x_rx_mem_pool_addr *)0) 
                                                                #line 1883 
                                                                return -12;
  #line 1885 
  return 0;
}

#line 1888  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_probe(struct platform_device *pdev)
{
  #line 1890 
  struct wl1271 *wl;
  #line 1891 
  struct ieee80211_hw *hw;
  #line 1892 
  int ret;
  #line 1894 
  hw = wlcore_alloc_hw(56UL,16384U,64U);
  #line 1897 
  if ((int)IS_ERR((void *)hw) != 0) {
    #line 1898 
    printk((char *)"\001");
    #line 1899 
    ret = (int)PTR_ERR((void *)hw);
    #line 1900 
    goto out;
  }
  #line 1903 
  wl = (struct wl1271 *)hw->priv;
  #line 1904 
  wl->ops = & wl12xx_ops;
  #line 1905 
  wl->ptable = (struct wlcore_partition_set *)(& wl12xx_ptable);
  #line 1906 
  ret = wlcore_probe(wl,pdev);
  #line 1907 
  if (ret != 0) 
                #line 1908 
                goto out_free;
  #line 1910 
  return ret;
  #line 1912 
  out_free: 
            #line 1912 
  ;
  #line 1913 
  wlcore_free_hw(wl);
  #line 1914 
  out: 
       #line 1914 
  ;
  #line 1915 
  return ret;
}

#line 1918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_remove(struct platform_device *pdev)
{
  #line 1921 
  struct wl12xx_priv *priv;
  #line 1920 
  struct wl1271 *wl = platform_get_drvdata(pdev);
  #line 1923 
  if (wl == (struct wl1271 *)0) 
                                #line 1924 
                                goto out;
  #line 1925 
  priv = (struct wl12xx_priv *)wl->priv;
  #line 1927 
  kfree((void *)priv->rx_mem_addr);
  #line 1929 
  out: 
       #line 1929 
  ;
  #line 1930 
  return wlcore_remove(pdev);
}

#line 1933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static struct platform_device_id wl12xx_id_table[2U] = {{.name = {(char)'w', (char)'l', (char)'1', (char)'2', (char)'x', (char)'x'}}};
#line 1937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
struct platform_device_id __mod_platform__wl12xx_id_table_device_table[2U];
#line 1939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static struct platform_driver wl12xx_driver = {.probe = & wl12xx_probe, .remove = & wl12xx_remove, .driver = {.name = (char *)"wl12xx_driver"}, .id_table = (struct platform_device_id *)(& wl12xx_id_table)};
#line 1948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static int wl12xx_driver_init(void)
{
  #line 1948 
  return cif___platform_driver_register(& wl12xx_driver,& __this_module);
}

#line 1948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl12xx/main.c"
static void wl12xx_driver_exit(void)
{
  #line 1948 
  cif_platform_driver_unregister(& wl12xx_driver);
  #line 1949 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
struct platform_driver *emg_alias_wl12xx_driver = & wl12xx_driver;
#line 96 
#line 96 
int emg___platform_driver_register(struct platform_driver *arg0, struct module *arg1);
#line 99 
#line 99 
void emg_platform_driver_unregister(struct platform_driver *arg0);
#line 103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_wl12xx_probe(struct platform_device *arg0)
{
  #line 104 
  return wl12xx_probe(arg0);
}

#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_wl12xx_remove(struct platform_device *arg0)
{
  #line 109 
  return wl12xx_remove(arg0);
}

#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wl12xx_driver_exit(void)
{
  #line 114 
  wl12xx_driver_exit();
  #line 115 
  return;
}

#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wl12xx_driver_init(void)
{
  #line 118 
  return wl12xx_driver_init();
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 139 
  ldv_set_bit(nr,addr);
  #line 140 
  return;
}

#line 227  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 230 
  return ldv_ptr_err(ptr);
}

#line 234  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 237 
  return ldv_is_err(ptr);
}

#line 467  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 470 
  return ldv_kmalloc(size,flags);
}

#line 807  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_mutex_unlock_mutex_of_wl1271(struct mutex *lock)
{
  #line 810 
  ldv_mutex_model_unlock(lock,(char *)"mutex_of_wl1271");
  #line 811 
  return;
}

#line 814  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_mutex_lock_mutex_of_wl1271(struct mutex *lock)
{
  #line 817 
  ldv_mutex_model_lock(lock,(char *)"mutex_of_wl1271");
  #line 818 
  return;
}

#line 821  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif_strcmp(char *cs, char *ct)
{
  #line 824 
  return ldv_strcmp(cs,ct);
}

#line 828  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif___platform_driver_register(struct platform_driver *ldv_func_arg1, struct module *ldv_func_arg2)
{
  #line 832 
  return emg___platform_driver_register(ldv_func_arg1,ldv_func_arg2);
}

#line 836  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_platform_driver_unregister(struct platform_driver *ldv_func_arg1)
{
  #line 840 
  emg_platform_driver_unregister(ldv_func_arg1);
  #line 841 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static void *ERR_PTR(long error)
{
  #line 26 
  return (void *)error;
}

#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
#line 1008 
void emg_dispatch_deregister_5(struct platform_driver *arg0);
#line 196 
#line 364 
void emg_dispatch_register_2(struct platform_driver *arg0);
#line 197 
#line 375 
void emg_dispatch_register_4(struct file_operations *arg0);
#line 198 
#line 15264 
void *emg_entry_point_insmod(void *arg0);
#line 199 
#line 1017 
void *emg_file_operations_character_driver_scenario_aes_decrypt_fail_ops(void *arg0);
#line 200 
#line 1196 
void *emg_file_operations_character_driver_scenario_aes_decrypt_interrupt_ops(void *arg0);
#line 201 
#line 1375 
void *emg_file_operations_character_driver_scenario_aes_decrypt_packets_ops(void *arg0);
#line 202 
#line 1554 
void *emg_file_operations_character_driver_scenario_aes_encrypt_fail_ops(void *arg0);
#line 203 
#line 1733 
void *emg_file_operations_character_driver_scenario_aes_encrypt_interrupt_ops(void *arg0);
#line 204 
#line 1912 
void *emg_file_operations_character_driver_scenario_aes_encrypt_packets_ops(void *arg0);
#line 205 
#line 2091 
void *emg_file_operations_character_driver_scenario_dma_rx_errors_ops(void *arg0);
#line 206 
#line 2270 
void *emg_file_operations_character_driver_scenario_dma_rx_requested_ops(void *arg0);
#line 207 
#line 2449 
void *emg_file_operations_character_driver_scenario_dma_tx_errors_ops(void *arg0);
#line 208 
#line 2628 
void *emg_file_operations_character_driver_scenario_dma_tx_requested_ops(void *arg0);
#line 209 
#line 2807 
void *emg_file_operations_character_driver_scenario_event_calibration_ops(void *arg0);
#line 210 
#line 2986 
void *emg_file_operations_character_driver_scenario_event_heart_beat_ops(void *arg0);
#line 211 
#line 3165 
void *emg_file_operations_character_driver_scenario_event_oom_late_ops(void *arg0);
#line 212 
#line 3344 
void *emg_file_operations_character_driver_scenario_event_phy_transmit_error_ops(void *arg0);
#line 213 
#line 3523 
void *emg_file_operations_character_driver_scenario_event_rx_mem_empty_ops(void *arg0);
#line 214 
#line 3702 
void *emg_file_operations_character_driver_scenario_event_rx_mismatch_ops(void *arg0);
#line 215 
#line 3881 
void *emg_file_operations_character_driver_scenario_event_rx_pool_ops(void *arg0);
#line 216 
#line 4060 
void *emg_file_operations_character_driver_scenario_event_tx_stuck_ops(void *arg0);
#line 217 
#line 4239 
void *emg_file_operations_character_driver_scenario_isr_cmd_cmplt_ops(void *arg0);
#line 218 
#line 4418 
void *emg_file_operations_character_driver_scenario_isr_commands_ops(void *arg0);
#line 219 
#line 4597 
void *emg_file_operations_character_driver_scenario_isr_decrypt_done_ops(void *arg0);
#line 220 
#line 4776 
void *emg_file_operations_character_driver_scenario_isr_dma0_done_ops(void *arg0);
#line 221 
#line 4955 
void *emg_file_operations_character_driver_scenario_isr_dma1_done_ops(void *arg0);
#line 222 
#line 5134 
void *emg_file_operations_character_driver_scenario_isr_fiqs_ops(void *arg0);
#line 223 
#line 5313 
void *emg_file_operations_character_driver_scenario_isr_host_acknowledges_ops(void *arg0);
#line 224 
#line 5492 
void *emg_file_operations_character_driver_scenario_isr_hw_pm_mode_changes_ops(void *arg0);
#line 225 
#line 5671 
void *emg_file_operations_character_driver_scenario_isr_irqs_ops(void *arg0);
#line 226 
#line 5850 
void *emg_file_operations_character_driver_scenario_isr_low_rssi_ops(void *arg0);
#line 227 
#line 6029 
void *emg_file_operations_character_driver_scenario_isr_pci_pm_ops(void *arg0);
#line 228 
#line 6208 
void *emg_file_operations_character_driver_scenario_isr_rx_headers_ops(void *arg0);
#line 229 
#line 6387 
void *emg_file_operations_character_driver_scenario_isr_rx_mem_overflow_ops(void *arg0);
#line 230 
#line 6566 
void *emg_file_operations_character_driver_scenario_isr_rx_procs_ops(void *arg0);
#line 231 
#line 6745 
void *emg_file_operations_character_driver_scenario_isr_rx_rdys_ops(void *arg0);
#line 232 
#line 6924 
void *emg_file_operations_character_driver_scenario_isr_tx_exch_complete_ops(void *arg0);
#line 233 
#line 7103 
void *emg_file_operations_character_driver_scenario_isr_tx_procs_ops(void *arg0);
#line 234 
#line 7282 
void *emg_file_operations_character_driver_scenario_isr_wakeups_ops(void *arg0);
#line 235 
#line 7461 
void *emg_file_operations_character_driver_scenario_mic_calc_failure_ops(void *arg0);
#line 236 
#line 7640 
void *emg_file_operations_character_driver_scenario_mic_rx_pkts_ops(void *arg0);
#line 237 
#line 7819 
void *emg_file_operations_character_driver_scenario_ps_pspoll_max_apturn_ops(void *arg0);
#line 238 
#line 7998 
void *emg_file_operations_character_driver_scenario_ps_pspoll_timeouts_ops(void *arg0);
#line 239 
#line 8177 
void *emg_file_operations_character_driver_scenario_ps_pspoll_utilization_ops(void *arg0);
#line 240 
#line 8356 
void *emg_file_operations_character_driver_scenario_ps_upsd_max_apturn_ops(void *arg0);
#line 241 
#line 8535 
void *emg_file_operations_character_driver_scenario_ps_upsd_max_sptime_ops(void *arg0);
#line 242 
#line 8714 
void *emg_file_operations_character_driver_scenario_ps_upsd_timeouts_ops(void *arg0);
#line 243 
#line 8893 
void *emg_file_operations_character_driver_scenario_ps_upsd_utilization_ops(void *arg0);
#line 244 
#line 9072 
void *emg_file_operations_character_driver_scenario_pwr_disable_ps_ops(void *arg0);
#line 245 
#line 9251 
void *emg_file_operations_character_driver_scenario_pwr_elp_enter_ops(void *arg0);
#line 246 
#line 9430 
void *emg_file_operations_character_driver_scenario_pwr_enable_ps_ops(void *arg0);
#line 247 
#line 9609 
void *emg_file_operations_character_driver_scenario_pwr_fix_tsf_ps_ops(void *arg0);
#line 248 
#line 9788 
void *emg_file_operations_character_driver_scenario_pwr_missing_bcns_ops(void *arg0);
#line 249 
#line 9967 
void *emg_file_operations_character_driver_scenario_pwr_power_save_off_ops(void *arg0);
#line 250 
#line 10146 
void *emg_file_operations_character_driver_scenario_pwr_ps_enter_ops(void *arg0);
#line 251 
#line 10325 
void *emg_file_operations_character_driver_scenario_pwr_rcvd_awake_beacons_ops(void *arg0);
#line 252 
#line 10504 
void *emg_file_operations_character_driver_scenario_pwr_rcvd_beacons_ops(void *arg0);
#line 253 
#line 10683 
void *emg_file_operations_character_driver_scenario_pwr_tx_with_ps_ops(void *arg0);
#line 254 
#line 10862 
void *emg_file_operations_character_driver_scenario_pwr_tx_without_ps_ops(void *arg0);
#line 255 
#line 11041 
void *emg_file_operations_character_driver_scenario_pwr_wake_on_host_ops(void *arg0);
#line 256 
#line 11220 
void *emg_file_operations_character_driver_scenario_pwr_wake_on_timer_exp_ops(void *arg0);
#line 257 
#line 11399 
void *emg_file_operations_character_driver_scenario_rx_dropped_ops(void *arg0);
#line 258 
#line 11578 
void *emg_file_operations_character_driver_scenario_rx_fcs_err_ops(void *arg0);
#line 259 
#line 11757 
void *emg_file_operations_character_driver_scenario_rx_hdr_overflow_ops(void *arg0);
#line 260 
#line 11936 
void *emg_file_operations_character_driver_scenario_rx_hw_stuck_ops(void *arg0);
#line 261 
#line 12115 
void *emg_file_operations_character_driver_scenario_rx_out_of_mem_ops(void *arg0);
#line 262 
#line 12294 
void *emg_file_operations_character_driver_scenario_rx_path_reset_ops(void *arg0);
#line 263 
#line 12473 
void *emg_file_operations_character_driver_scenario_rx_reset_counter_ops(void *arg0);
#line 264 
#line 12652 
void *emg_file_operations_character_driver_scenario_rx_xfr_hint_trig_ops(void *arg0);
#line 265 
#line 12831 
void *emg_file_operations_character_driver_scenario_rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops(void *arg0);
#line 266 
#line 13010 
void *emg_file_operations_character_driver_scenario_rxpipe_descr_host_int_trig_rx_data_ops(void *arg0);
#line 267 
#line 13189 
void *emg_file_operations_character_driver_scenario_rxpipe_missed_beacon_host_int_trig_rx_data_ops(void *arg0);
#line 268 
#line 13368 
void *emg_file_operations_character_driver_scenario_rxpipe_rx_prep_beacon_drop_ops(void *arg0);
#line 269 
#line 13547 
void *emg_file_operations_character_driver_scenario_rxpipe_tx_xfr_host_int_trig_rx_data_ops(void *arg0);
#line 270 
#line 13726 
void *emg_file_operations_character_driver_scenario_tx_internal_desc_overflow_ops(void *arg0);
#line 271 
#line 13905 
void *emg_file_operations_character_driver_scenario_wep_addr_key_count_ops(void *arg0);
#line 272 
#line 14084 
void *emg_file_operations_character_driver_scenario_wep_decrypt_fail_ops(void *arg0);
#line 273 
#line 14263 
void *emg_file_operations_character_driver_scenario_wep_default_key_count_ops(void *arg0);
#line 274 
#line 14442 
void *emg_file_operations_character_driver_scenario_wep_interrupt_ops(void *arg0);
#line 275 
#line 14621 
void *emg_file_operations_character_driver_scenario_wep_key_not_found_ops(void *arg0);
#line 276 
#line 14800 
void *emg_file_operations_character_driver_scenario_wep_packets_ops(void *arg0);
#line 278 
#line 14979 
void *emg_platform_platform_instance_wl12xx_driver(void *arg0);
#line 279 
#line 15293 
int main(void);
#line 282  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_10;
#line 283  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_11;
#line 284  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_12;
#line 285  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 286  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 287  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 288  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 289  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 290  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 291  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 292  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 293  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_21;
#line 294  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_22;
#line 295  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_23;
#line 296  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_24;
#line 297  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_25;
#line 298  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_26;
#line 299  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_27;
#line 300  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_28;
#line 301  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_29;
#line 302  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_30;
#line 303  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_31;
#line 304  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_32;
#line 305  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_33;
#line 306  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_34;
#line 307  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_35;
#line 308  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_36;
#line 309  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_37;
#line 310  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_38;
#line 311  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_39;
#line 312  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_40;
#line 313  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_41;
#line 314  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_42;
#line 315  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_43;
#line 316  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_44;
#line 317  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_45;
#line 318  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_46;
#line 319  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_47;
#line 320  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_48;
#line 321  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_49;
#line 322  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_50;
#line 323  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_51;
#line 324  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_52;
#line 325  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_53;
#line 326  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_54;
#line 327  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_55;
#line 328  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_56;
#line 329  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_57;
#line 330  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_58;
#line 331  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_59;
#line 332  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_6;
#line 333  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_60;
#line 334  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_61;
#line 335  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_62;
#line 336  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_63;
#line 337  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_64;
#line 338  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_65;
#line 339  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_66;
#line 340  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_67;
#line 341  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_68;
#line 342  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_69;
#line 343  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_7;
#line 344  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_70;
#line 345  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_71;
#line 346  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_72;
#line 347  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_73;
#line 348  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_74;
#line 349  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_75;
#line 350  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_76;
#line 351  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_77;
#line 352  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_78;
#line 353  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_79;
#line 354  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_8;
#line 355  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_80;
#line 356  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_81;
#line 357  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_82;
#line 358  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_83;
#line 359  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_84;
#line 360  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_9;
#line 364  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct platform_driver *arg0)
{
  #line 365 
  int ret;
  #line 366 
  struct emg_struct_platform_instance_wl12xx_driver_84 *cf_arg_84;
  #line 367 
  cf_arg_84 = (struct emg_struct_platform_instance_wl12xx_driver_84 *)ldv_xmalloc(16UL);
  #line 368 
  cf_arg_84->arg0 = arg0;
  #line 369 
  ret = pthread_create(& emg_thread_84,(pthread_attr_t *)0,& emg_platform_platform_instance_wl12xx_driver,(void *)cf_arg_84);
  #line 370 
  __VERIFIER_assume(ret == 0);
  #line 371 
  return;
}

#line 375  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_4(struct file_operations *arg0)
{
  #line 376 
  int ret;
  #line 377 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_10;
  #line 378 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_11;
  #line 379 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_12;
  #line 380 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_13;
  #line 381 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_14;
  #line 382 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_15;
  #line 383 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_16;
  #line 384 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_17;
  #line 385 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_18;
  #line 386 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_19;
  #line 387 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_20;
  #line 388 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_21;
  #line 389 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_22;
  #line 390 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_23;
  #line 391 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_24;
  #line 392 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_25;
  #line 393 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_26;
  #line 394 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_27;
  #line 395 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_28;
  #line 396 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_29;
  #line 397 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_30;
  #line 398 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_31;
  #line 399 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_32;
  #line 400 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_33;
  #line 401 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_34;
  #line 402 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_35;
  #line 403 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_36;
  #line 404 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_37;
  #line 405 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_38;
  #line 406 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_39;
  #line 407 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_40;
  #line 408 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_41;
  #line 409 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_42;
  #line 410 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_43;
  #line 411 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_44;
  #line 412 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_45;
  #line 413 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_46;
  #line 414 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_47;
  #line 415 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_48;
  #line 416 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_49;
  #line 417 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_50;
  #line 418 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_51;
  #line 419 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_52;
  #line 420 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_53;
  #line 421 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_54;
  #line 422 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_55;
  #line 423 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_56;
  #line 424 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_57;
  #line 425 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_58;
  #line 426 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_59;
  #line 427 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_6;
  #line 428 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_60;
  #line 429 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_61;
  #line 430 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_62;
  #line 431 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_63;
  #line 432 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_64;
  #line 433 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_65;
  #line 434 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_66;
  #line 435 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_67;
  #line 436 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_68;
  #line 437 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_69;
  #line 438 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_7;
  #line 439 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_70;
  #line 440 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_71;
  #line 441 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_72;
  #line 442 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_73;
  #line 443 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_74;
  #line 444 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_75;
  #line 445 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_76;
  #line 446 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_77;
  #line 447 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_78;
  #line 448 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_79;
  #line 449 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_8;
  #line 450 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_80;
  #line 451 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_81;
  #line 452 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_82;
  #line 453 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_83;
  #line 454 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *cf_arg_9;
  #line 455 
  switch (ldv_undef_int()) {
    #line 456 
    case 0: 
            #line 456 
    ;
    #line 457 
    cf_arg_10 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 458 
    cf_arg_10->arg0 = arg0;
    #line 459 
    ret = pthread_create(& emg_thread_10,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_aes_encrypt_interrupt_ops,(void *)cf_arg_10);
    #line 460 
    __VERIFIER_assume(ret == 0);
    #line 461 
    break;
    #line 463 
    case 1: 
            #line 463 
    ;
    #line 464 
    cf_arg_11 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 465 
    cf_arg_11->arg0 = arg0;
    #line 466 
    ret = pthread_create(& emg_thread_11,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_aes_encrypt_packets_ops,(void *)cf_arg_11);
    #line 467 
    __VERIFIER_assume(ret == 0);
    #line 468 
    break;
    #line 470 
    case 2: 
            #line 470 
    ;
    #line 471 
    cf_arg_12 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 472 
    cf_arg_12->arg0 = arg0;
    #line 473 
    ret = pthread_create(& emg_thread_12,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_dma_rx_errors_ops,(void *)cf_arg_12);
    #line 474 
    __VERIFIER_assume(ret == 0);
    #line 475 
    break;
    #line 477 
    case 3: 
            #line 477 
    ;
    #line 478 
    cf_arg_13 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 479 
    cf_arg_13->arg0 = arg0;
    #line 480 
    ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_dma_rx_requested_ops,(void *)cf_arg_13);
    #line 481 
    __VERIFIER_assume(ret == 0);
    #line 482 
    break;
    #line 484 
    case 4: 
            #line 484 
    ;
    #line 485 
    cf_arg_14 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 486 
    cf_arg_14->arg0 = arg0;
    #line 487 
    ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_dma_tx_errors_ops,(void *)cf_arg_14);
    #line 488 
    __VERIFIER_assume(ret == 0);
    #line 489 
    break;
    #line 491 
    case 5: 
            #line 491 
    ;
    #line 492 
    cf_arg_15 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 493 
    cf_arg_15->arg0 = arg0;
    #line 494 
    ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_dma_tx_requested_ops,(void *)cf_arg_15);
    #line 495 
    __VERIFIER_assume(ret == 0);
    #line 496 
    break;
    #line 498 
    case 6: 
            #line 498 
    ;
    #line 499 
    cf_arg_16 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 500 
    cf_arg_16->arg0 = arg0;
    #line 501 
    ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_event_calibration_ops,(void *)cf_arg_16);
    #line 502 
    __VERIFIER_assume(ret == 0);
    #line 503 
    break;
    #line 505 
    case 7: 
            #line 505 
    ;
    #line 506 
    cf_arg_17 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 507 
    cf_arg_17->arg0 = arg0;
    #line 508 
    ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_event_heart_beat_ops,(void *)cf_arg_17);
    #line 509 
    __VERIFIER_assume(ret == 0);
    #line 510 
    break;
    #line 512 
    case 8: 
            #line 512 
    ;
    #line 513 
    cf_arg_18 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 514 
    cf_arg_18->arg0 = arg0;
    #line 515 
    ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_event_oom_late_ops,(void *)cf_arg_18);
    #line 516 
    __VERIFIER_assume(ret == 0);
    #line 517 
    break;
    #line 519 
    case 9: 
            #line 519 
    ;
    #line 520 
    cf_arg_19 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 521 
    cf_arg_19->arg0 = arg0;
    #line 522 
    ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_event_phy_transmit_error_ops,(void *)cf_arg_19);
    #line 523 
    __VERIFIER_assume(ret == 0);
    #line 524 
    break;
    #line 526 
    case 10: 
             #line 526 
    ;
    #line 527 
    cf_arg_20 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 528 
    cf_arg_20->arg0 = arg0;
    #line 529 
    ret = pthread_create(& emg_thread_20,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_event_rx_mem_empty_ops,(void *)cf_arg_20);
    #line 530 
    __VERIFIER_assume(ret == 0);
    #line 531 
    break;
    #line 533 
    case 11: 
             #line 533 
    ;
    #line 534 
    cf_arg_21 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 535 
    cf_arg_21->arg0 = arg0;
    #line 536 
    ret = pthread_create(& emg_thread_21,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_event_rx_mismatch_ops,(void *)cf_arg_21);
    #line 537 
    __VERIFIER_assume(ret == 0);
    #line 538 
    break;
    #line 540 
    case 12: 
             #line 540 
    ;
    #line 541 
    cf_arg_22 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 542 
    cf_arg_22->arg0 = arg0;
    #line 543 
    ret = pthread_create(& emg_thread_22,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_event_rx_pool_ops,(void *)cf_arg_22);
    #line 544 
    __VERIFIER_assume(ret == 0);
    #line 545 
    break;
    #line 547 
    case 13: 
             #line 547 
    ;
    #line 548 
    cf_arg_23 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 549 
    cf_arg_23->arg0 = arg0;
    #line 550 
    ret = pthread_create(& emg_thread_23,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_event_tx_stuck_ops,(void *)cf_arg_23);
    #line 551 
    __VERIFIER_assume(ret == 0);
    #line 552 
    break;
    #line 554 
    case 14: 
             #line 554 
    ;
    #line 555 
    cf_arg_24 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 556 
    cf_arg_24->arg0 = arg0;
    #line 557 
    ret = pthread_create(& emg_thread_24,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_cmd_cmplt_ops,(void *)cf_arg_24);
    #line 558 
    __VERIFIER_assume(ret == 0);
    #line 559 
    break;
    #line 561 
    case 15: 
             #line 561 
    ;
    #line 562 
    cf_arg_25 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 563 
    cf_arg_25->arg0 = arg0;
    #line 564 
    ret = pthread_create(& emg_thread_25,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_commands_ops,(void *)cf_arg_25);
    #line 565 
    __VERIFIER_assume(ret == 0);
    #line 566 
    break;
    #line 568 
    case 16: 
             #line 568 
    ;
    #line 569 
    cf_arg_26 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 570 
    cf_arg_26->arg0 = arg0;
    #line 571 
    ret = pthread_create(& emg_thread_26,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_decrypt_done_ops,(void *)cf_arg_26);
    #line 572 
    __VERIFIER_assume(ret == 0);
    #line 573 
    break;
    #line 575 
    case 17: 
             #line 575 
    ;
    #line 576 
    cf_arg_27 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 577 
    cf_arg_27->arg0 = arg0;
    #line 578 
    ret = pthread_create(& emg_thread_27,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_dma0_done_ops,(void *)cf_arg_27);
    #line 579 
    __VERIFIER_assume(ret == 0);
    #line 580 
    break;
    #line 582 
    case 18: 
             #line 582 
    ;
    #line 583 
    cf_arg_28 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 584 
    cf_arg_28->arg0 = arg0;
    #line 585 
    ret = pthread_create(& emg_thread_28,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_dma1_done_ops,(void *)cf_arg_28);
    #line 586 
    __VERIFIER_assume(ret == 0);
    #line 587 
    break;
    #line 589 
    case 19: 
             #line 589 
    ;
    #line 590 
    cf_arg_29 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 591 
    cf_arg_29->arg0 = arg0;
    #line 592 
    ret = pthread_create(& emg_thread_29,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_fiqs_ops,(void *)cf_arg_29);
    #line 593 
    __VERIFIER_assume(ret == 0);
    #line 594 
    break;
    #line 596 
    case 20: 
             #line 596 
    ;
    #line 597 
    cf_arg_30 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 598 
    cf_arg_30->arg0 = arg0;
    #line 599 
    ret = pthread_create(& emg_thread_30,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_host_acknowledges_ops,(void *)cf_arg_30);
    #line 600 
    __VERIFIER_assume(ret == 0);
    #line 601 
    break;
    #line 603 
    case 21: 
             #line 603 
    ;
    #line 604 
    cf_arg_31 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 605 
    cf_arg_31->arg0 = arg0;
    #line 606 
    ret = pthread_create(& emg_thread_31,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_hw_pm_mode_changes_ops,(void *)cf_arg_31);
    #line 607 
    __VERIFIER_assume(ret == 0);
    #line 608 
    break;
    #line 610 
    case 22: 
             #line 610 
    ;
    #line 611 
    cf_arg_32 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 612 
    cf_arg_32->arg0 = arg0;
    #line 613 
    ret = pthread_create(& emg_thread_32,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_irqs_ops,(void *)cf_arg_32);
    #line 614 
    __VERIFIER_assume(ret == 0);
    #line 615 
    break;
    #line 617 
    case 23: 
             #line 617 
    ;
    #line 618 
    cf_arg_33 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 619 
    cf_arg_33->arg0 = arg0;
    #line 620 
    ret = pthread_create(& emg_thread_33,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_low_rssi_ops,(void *)cf_arg_33);
    #line 621 
    __VERIFIER_assume(ret == 0);
    #line 622 
    break;
    #line 624 
    case 24: 
             #line 624 
    ;
    #line 625 
    cf_arg_34 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 626 
    cf_arg_34->arg0 = arg0;
    #line 627 
    ret = pthread_create(& emg_thread_34,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_pci_pm_ops,(void *)cf_arg_34);
    #line 628 
    __VERIFIER_assume(ret == 0);
    #line 629 
    break;
    #line 631 
    case 25: 
             #line 631 
    ;
    #line 632 
    cf_arg_35 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 633 
    cf_arg_35->arg0 = arg0;
    #line 634 
    ret = pthread_create(& emg_thread_35,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_rx_headers_ops,(void *)cf_arg_35);
    #line 635 
    __VERIFIER_assume(ret == 0);
    #line 636 
    break;
    #line 638 
    case 26: 
             #line 638 
    ;
    #line 639 
    cf_arg_36 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 640 
    cf_arg_36->arg0 = arg0;
    #line 641 
    ret = pthread_create(& emg_thread_36,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_rx_mem_overflow_ops,(void *)cf_arg_36);
    #line 642 
    __VERIFIER_assume(ret == 0);
    #line 643 
    break;
    #line 645 
    case 27: 
             #line 645 
    ;
    #line 646 
    cf_arg_37 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 647 
    cf_arg_37->arg0 = arg0;
    #line 648 
    ret = pthread_create(& emg_thread_37,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_rx_procs_ops,(void *)cf_arg_37);
    #line 649 
    __VERIFIER_assume(ret == 0);
    #line 650 
    break;
    #line 652 
    case 28: 
             #line 652 
    ;
    #line 653 
    cf_arg_38 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 654 
    cf_arg_38->arg0 = arg0;
    #line 655 
    ret = pthread_create(& emg_thread_38,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_rx_rdys_ops,(void *)cf_arg_38);
    #line 656 
    __VERIFIER_assume(ret == 0);
    #line 657 
    break;
    #line 659 
    case 29: 
             #line 659 
    ;
    #line 660 
    cf_arg_39 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 661 
    cf_arg_39->arg0 = arg0;
    #line 662 
    ret = pthread_create(& emg_thread_39,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_tx_exch_complete_ops,(void *)cf_arg_39);
    #line 663 
    __VERIFIER_assume(ret == 0);
    #line 664 
    break;
    #line 666 
    case 30: 
             #line 666 
    ;
    #line 667 
    cf_arg_40 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 668 
    cf_arg_40->arg0 = arg0;
    #line 669 
    ret = pthread_create(& emg_thread_40,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_tx_procs_ops,(void *)cf_arg_40);
    #line 670 
    __VERIFIER_assume(ret == 0);
    #line 671 
    break;
    #line 673 
    case 31: 
             #line 673 
    ;
    #line 674 
    cf_arg_41 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 675 
    cf_arg_41->arg0 = arg0;
    #line 676 
    ret = pthread_create(& emg_thread_41,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_wakeups_ops,(void *)cf_arg_41);
    #line 677 
    __VERIFIER_assume(ret == 0);
    #line 678 
    break;
    #line 680 
    case 32: 
             #line 680 
    ;
    #line 681 
    cf_arg_42 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 682 
    cf_arg_42->arg0 = arg0;
    #line 683 
    ret = pthread_create(& emg_thread_42,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mic_calc_failure_ops,(void *)cf_arg_42);
    #line 684 
    __VERIFIER_assume(ret == 0);
    #line 685 
    break;
    #line 687 
    case 33: 
             #line 687 
    ;
    #line 688 
    cf_arg_43 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 689 
    cf_arg_43->arg0 = arg0;
    #line 690 
    ret = pthread_create(& emg_thread_43,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mic_rx_pkts_ops,(void *)cf_arg_43);
    #line 691 
    __VERIFIER_assume(ret == 0);
    #line 692 
    break;
    #line 694 
    case 34: 
             #line 694 
    ;
    #line 695 
    cf_arg_44 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 696 
    cf_arg_44->arg0 = arg0;
    #line 697 
    ret = pthread_create(& emg_thread_44,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_ps_pspoll_max_apturn_ops,(void *)cf_arg_44);
    #line 698 
    __VERIFIER_assume(ret == 0);
    #line 699 
    break;
    #line 701 
    case 35: 
             #line 701 
    ;
    #line 702 
    cf_arg_45 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 703 
    cf_arg_45->arg0 = arg0;
    #line 704 
    ret = pthread_create(& emg_thread_45,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_ps_pspoll_timeouts_ops,(void *)cf_arg_45);
    #line 705 
    __VERIFIER_assume(ret == 0);
    #line 706 
    break;
    #line 708 
    case 36: 
             #line 708 
    ;
    #line 709 
    cf_arg_46 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 710 
    cf_arg_46->arg0 = arg0;
    #line 711 
    ret = pthread_create(& emg_thread_46,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_ps_pspoll_utilization_ops,(void *)cf_arg_46);
    #line 712 
    __VERIFIER_assume(ret == 0);
    #line 713 
    break;
    #line 715 
    case 37: 
             #line 715 
    ;
    #line 716 
    cf_arg_47 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 717 
    cf_arg_47->arg0 = arg0;
    #line 718 
    ret = pthread_create(& emg_thread_47,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_ps_upsd_max_apturn_ops,(void *)cf_arg_47);
    #line 719 
    __VERIFIER_assume(ret == 0);
    #line 720 
    break;
    #line 722 
    case 38: 
             #line 722 
    ;
    #line 723 
    cf_arg_48 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 724 
    cf_arg_48->arg0 = arg0;
    #line 725 
    ret = pthread_create(& emg_thread_48,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_ps_upsd_max_sptime_ops,(void *)cf_arg_48);
    #line 726 
    __VERIFIER_assume(ret == 0);
    #line 727 
    break;
    #line 729 
    case 39: 
             #line 729 
    ;
    #line 730 
    cf_arg_49 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 731 
    cf_arg_49->arg0 = arg0;
    #line 732 
    ret = pthread_create(& emg_thread_49,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_ps_upsd_timeouts_ops,(void *)cf_arg_49);
    #line 733 
    __VERIFIER_assume(ret == 0);
    #line 734 
    break;
    #line 736 
    case 40: 
             #line 736 
    ;
    #line 737 
    cf_arg_50 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 738 
    cf_arg_50->arg0 = arg0;
    #line 739 
    ret = pthread_create(& emg_thread_50,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_ps_upsd_utilization_ops,(void *)cf_arg_50);
    #line 740 
    __VERIFIER_assume(ret == 0);
    #line 741 
    break;
    #line 743 
    case 41: 
             #line 743 
    ;
    #line 744 
    cf_arg_51 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 745 
    cf_arg_51->arg0 = arg0;
    #line 746 
    ret = pthread_create(& emg_thread_51,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_disable_ps_ops,(void *)cf_arg_51);
    #line 747 
    __VERIFIER_assume(ret == 0);
    #line 748 
    break;
    #line 750 
    case 42: 
             #line 750 
    ;
    #line 751 
    cf_arg_52 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 752 
    cf_arg_52->arg0 = arg0;
    #line 753 
    ret = pthread_create(& emg_thread_52,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_elp_enter_ops,(void *)cf_arg_52);
    #line 754 
    __VERIFIER_assume(ret == 0);
    #line 755 
    break;
    #line 757 
    case 43: 
             #line 757 
    ;
    #line 758 
    cf_arg_53 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 759 
    cf_arg_53->arg0 = arg0;
    #line 760 
    ret = pthread_create(& emg_thread_53,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_enable_ps_ops,(void *)cf_arg_53);
    #line 761 
    __VERIFIER_assume(ret == 0);
    #line 762 
    break;
    #line 764 
    case 44: 
             #line 764 
    ;
    #line 765 
    cf_arg_54 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 766 
    cf_arg_54->arg0 = arg0;
    #line 767 
    ret = pthread_create(& emg_thread_54,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_fix_tsf_ps_ops,(void *)cf_arg_54);
    #line 768 
    __VERIFIER_assume(ret == 0);
    #line 769 
    break;
    #line 771 
    case 45: 
             #line 771 
    ;
    #line 772 
    cf_arg_55 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 773 
    cf_arg_55->arg0 = arg0;
    #line 774 
    ret = pthread_create(& emg_thread_55,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_missing_bcns_ops,(void *)cf_arg_55);
    #line 775 
    __VERIFIER_assume(ret == 0);
    #line 776 
    break;
    #line 778 
    case 46: 
             #line 778 
    ;
    #line 779 
    cf_arg_56 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 780 
    cf_arg_56->arg0 = arg0;
    #line 781 
    ret = pthread_create(& emg_thread_56,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_power_save_off_ops,(void *)cf_arg_56);
    #line 782 
    __VERIFIER_assume(ret == 0);
    #line 783 
    break;
    #line 785 
    case 47: 
             #line 785 
    ;
    #line 786 
    cf_arg_57 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 787 
    cf_arg_57->arg0 = arg0;
    #line 788 
    ret = pthread_create(& emg_thread_57,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_ps_enter_ops,(void *)cf_arg_57);
    #line 789 
    __VERIFIER_assume(ret == 0);
    #line 790 
    break;
    #line 792 
    case 48: 
             #line 792 
    ;
    #line 793 
    cf_arg_58 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 794 
    cf_arg_58->arg0 = arg0;
    #line 795 
    ret = pthread_create(& emg_thread_58,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_rcvd_awake_beacons_ops,(void *)cf_arg_58);
    #line 796 
    __VERIFIER_assume(ret == 0);
    #line 797 
    break;
    #line 799 
    case 49: 
             #line 799 
    ;
    #line 800 
    cf_arg_59 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 801 
    cf_arg_59->arg0 = arg0;
    #line 802 
    ret = pthread_create(& emg_thread_59,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_rcvd_beacons_ops,(void *)cf_arg_59);
    #line 803 
    __VERIFIER_assume(ret == 0);
    #line 804 
    break;
    #line 806 
    case 50: 
             #line 806 
    ;
    #line 807 
    cf_arg_6 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 808 
    cf_arg_6->arg0 = arg0;
    #line 809 
    ret = pthread_create(& emg_thread_6,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_aes_decrypt_fail_ops,(void *)cf_arg_6);
    #line 810 
    __VERIFIER_assume(ret == 0);
    #line 811 
    break;
    #line 813 
    case 51: 
             #line 813 
    ;
    #line 814 
    cf_arg_60 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 815 
    cf_arg_60->arg0 = arg0;
    #line 816 
    ret = pthread_create(& emg_thread_60,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_tx_with_ps_ops,(void *)cf_arg_60);
    #line 817 
    __VERIFIER_assume(ret == 0);
    #line 818 
    break;
    #line 820 
    case 52: 
             #line 820 
    ;
    #line 821 
    cf_arg_61 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 822 
    cf_arg_61->arg0 = arg0;
    #line 823 
    ret = pthread_create(& emg_thread_61,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_tx_without_ps_ops,(void *)cf_arg_61);
    #line 824 
    __VERIFIER_assume(ret == 0);
    #line 825 
    break;
    #line 827 
    case 53: 
             #line 827 
    ;
    #line 828 
    cf_arg_62 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 829 
    cf_arg_62->arg0 = arg0;
    #line 830 
    ret = pthread_create(& emg_thread_62,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_wake_on_host_ops,(void *)cf_arg_62);
    #line 831 
    __VERIFIER_assume(ret == 0);
    #line 832 
    break;
    #line 834 
    case 54: 
             #line 834 
    ;
    #line 835 
    cf_arg_63 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 836 
    cf_arg_63->arg0 = arg0;
    #line 837 
    ret = pthread_create(& emg_thread_63,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_wake_on_timer_exp_ops,(void *)cf_arg_63);
    #line 838 
    __VERIFIER_assume(ret == 0);
    #line 839 
    break;
    #line 841 
    case 55: 
             #line 841 
    ;
    #line 842 
    cf_arg_64 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 843 
    cf_arg_64->arg0 = arg0;
    #line 844 
    ret = pthread_create(& emg_thread_64,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_dropped_ops,(void *)cf_arg_64);
    #line 845 
    __VERIFIER_assume(ret == 0);
    #line 846 
    break;
    #line 848 
    case 56: 
             #line 848 
    ;
    #line 849 
    cf_arg_65 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 850 
    cf_arg_65->arg0 = arg0;
    #line 851 
    ret = pthread_create(& emg_thread_65,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_fcs_err_ops,(void *)cf_arg_65);
    #line 852 
    __VERIFIER_assume(ret == 0);
    #line 853 
    break;
    #line 855 
    case 57: 
             #line 855 
    ;
    #line 856 
    cf_arg_66 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 857 
    cf_arg_66->arg0 = arg0;
    #line 858 
    ret = pthread_create(& emg_thread_66,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_hdr_overflow_ops,(void *)cf_arg_66);
    #line 859 
    __VERIFIER_assume(ret == 0);
    #line 860 
    break;
    #line 862 
    case 58: 
             #line 862 
    ;
    #line 863 
    cf_arg_67 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 864 
    cf_arg_67->arg0 = arg0;
    #line 865 
    ret = pthread_create(& emg_thread_67,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_hw_stuck_ops,(void *)cf_arg_67);
    #line 866 
    __VERIFIER_assume(ret == 0);
    #line 867 
    break;
    #line 869 
    case 59: 
             #line 869 
    ;
    #line 870 
    cf_arg_68 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 871 
    cf_arg_68->arg0 = arg0;
    #line 872 
    ret = pthread_create(& emg_thread_68,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_out_of_mem_ops,(void *)cf_arg_68);
    #line 873 
    __VERIFIER_assume(ret == 0);
    #line 874 
    break;
    #line 876 
    case 60: 
             #line 876 
    ;
    #line 877 
    cf_arg_69 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 878 
    cf_arg_69->arg0 = arg0;
    #line 879 
    ret = pthread_create(& emg_thread_69,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_path_reset_ops,(void *)cf_arg_69);
    #line 880 
    __VERIFIER_assume(ret == 0);
    #line 881 
    break;
    #line 883 
    case 61: 
             #line 883 
    ;
    #line 884 
    cf_arg_7 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 885 
    cf_arg_7->arg0 = arg0;
    #line 886 
    ret = pthread_create(& emg_thread_7,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_aes_decrypt_interrupt_ops,(void *)cf_arg_7);
    #line 887 
    __VERIFIER_assume(ret == 0);
    #line 888 
    break;
    #line 890 
    case 62: 
             #line 890 
    ;
    #line 891 
    cf_arg_70 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 892 
    cf_arg_70->arg0 = arg0;
    #line 893 
    ret = pthread_create(& emg_thread_70,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_reset_counter_ops,(void *)cf_arg_70);
    #line 894 
    __VERIFIER_assume(ret == 0);
    #line 895 
    break;
    #line 897 
    case 63: 
             #line 897 
    ;
    #line 898 
    cf_arg_71 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 899 
    cf_arg_71->arg0 = arg0;
    #line 900 
    ret = pthread_create(& emg_thread_71,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_xfr_hint_trig_ops,(void *)cf_arg_71);
    #line 901 
    __VERIFIER_assume(ret == 0);
    #line 902 
    break;
    #line 904 
    case 64: 
             #line 904 
    ;
    #line 905 
    cf_arg_72 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 906 
    cf_arg_72->arg0 = arg0;
    #line 907 
    ret = pthread_create(& emg_thread_72,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops,(void *)cf_arg_72);
    #line 908 
    __VERIFIER_assume(ret == 0);
    #line 909 
    break;
    #line 911 
    case 65: 
             #line 911 
    ;
    #line 912 
    cf_arg_73 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 913 
    cf_arg_73->arg0 = arg0;
    #line 914 
    ret = pthread_create(& emg_thread_73,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rxpipe_descr_host_int_trig_rx_data_ops,(void *)cf_arg_73);
    #line 915 
    __VERIFIER_assume(ret == 0);
    #line 916 
    break;
    #line 918 
    case 66: 
             #line 918 
    ;
    #line 919 
    cf_arg_74 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 920 
    cf_arg_74->arg0 = arg0;
    #line 921 
    ret = pthread_create(& emg_thread_74,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rxpipe_missed_beacon_host_int_trig_rx_data_ops,(void *)cf_arg_74);
    #line 922 
    __VERIFIER_assume(ret == 0);
    #line 923 
    break;
    #line 925 
    case 67: 
             #line 925 
    ;
    #line 926 
    cf_arg_75 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 927 
    cf_arg_75->arg0 = arg0;
    #line 928 
    ret = pthread_create(& emg_thread_75,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rxpipe_rx_prep_beacon_drop_ops,(void *)cf_arg_75);
    #line 929 
    __VERIFIER_assume(ret == 0);
    #line 930 
    break;
    #line 932 
    case 68: 
             #line 932 
    ;
    #line 933 
    cf_arg_76 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 934 
    cf_arg_76->arg0 = arg0;
    #line 935 
    ret = pthread_create(& emg_thread_76,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rxpipe_tx_xfr_host_int_trig_rx_data_ops,(void *)cf_arg_76);
    #line 936 
    __VERIFIER_assume(ret == 0);
    #line 937 
    break;
    #line 939 
    case 69: 
             #line 939 
    ;
    #line 940 
    cf_arg_77 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 941 
    cf_arg_77->arg0 = arg0;
    #line 942 
    ret = pthread_create(& emg_thread_77,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_internal_desc_overflow_ops,(void *)cf_arg_77);
    #line 943 
    __VERIFIER_assume(ret == 0);
    #line 944 
    break;
    #line 946 
    case 70: 
             #line 946 
    ;
    #line 947 
    cf_arg_78 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 948 
    cf_arg_78->arg0 = arg0;
    #line 949 
    ret = pthread_create(& emg_thread_78,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_wep_addr_key_count_ops,(void *)cf_arg_78);
    #line 950 
    __VERIFIER_assume(ret == 0);
    #line 951 
    break;
    #line 953 
    case 71: 
             #line 953 
    ;
    #line 954 
    cf_arg_79 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 955 
    cf_arg_79->arg0 = arg0;
    #line 956 
    ret = pthread_create(& emg_thread_79,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_wep_decrypt_fail_ops,(void *)cf_arg_79);
    #line 957 
    __VERIFIER_assume(ret == 0);
    #line 958 
    break;
    #line 960 
    case 72: 
             #line 960 
    ;
    #line 961 
    cf_arg_8 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 962 
    cf_arg_8->arg0 = arg0;
    #line 963 
    ret = pthread_create(& emg_thread_8,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_aes_decrypt_packets_ops,(void *)cf_arg_8);
    #line 964 
    __VERIFIER_assume(ret == 0);
    #line 965 
    break;
    #line 967 
    case 73: 
             #line 967 
    ;
    #line 968 
    cf_arg_80 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 969 
    cf_arg_80->arg0 = arg0;
    #line 970 
    ret = pthread_create(& emg_thread_80,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_wep_default_key_count_ops,(void *)cf_arg_80);
    #line 971 
    __VERIFIER_assume(ret == 0);
    #line 972 
    break;
    #line 974 
    case 74: 
             #line 974 
    ;
    #line 975 
    cf_arg_81 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 976 
    cf_arg_81->arg0 = arg0;
    #line 977 
    ret = pthread_create(& emg_thread_81,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_wep_interrupt_ops,(void *)cf_arg_81);
    #line 978 
    __VERIFIER_assume(ret == 0);
    #line 979 
    break;
    #line 981 
    case 75: 
             #line 981 
    ;
    #line 982 
    cf_arg_82 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 983 
    cf_arg_82->arg0 = arg0;
    #line 984 
    ret = pthread_create(& emg_thread_82,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_wep_key_not_found_ops,(void *)cf_arg_82);
    #line 985 
    __VERIFIER_assume(ret == 0);
    #line 986 
    break;
    #line 988 
    case 76: 
             #line 988 
    ;
    #line 989 
    cf_arg_83 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 990 
    cf_arg_83->arg0 = arg0;
    #line 991 
    ret = pthread_create(& emg_thread_83,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_wep_packets_ops,(void *)cf_arg_83);
    #line 992 
    __VERIFIER_assume(ret == 0);
    #line 993 
    break;
    #line 995 
    case 77: 
             #line 995 
    ;
    #line 996 
    cf_arg_9 = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)ldv_xmalloc(16UL);
    #line 997 
    cf_arg_9->arg0 = arg0;
    #line 998 
    ret = pthread_create(& emg_thread_9,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_aes_encrypt_fail_ops,(void *)cf_arg_9);
    #line 999 
    __VERIFIER_assume(ret == 0);
    #line 1000 
    break;
    #line 1002 
    default: 
             #line 1002 
    ;
    #line 1002 
    __VERIFIER_assume(0);
  }
  #line 1004 
  return;
}

#line 1008  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_5(struct platform_driver *arg0)
{
  #line 1009 
  int ret;
  #line 1010 
  struct emg_struct_platform_instance_wl12xx_driver_84 *cf_arg_84;
  #line 1011 
  ret = pthread_join(emg_thread_84,(void **)0);
  #line 1012 
  __VERIFIER_assume(ret == 0);
  #line 1013 
  return;
}

#line 1017  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_aes_decrypt_fail_ops(void *arg0)
{
  #line 1020 
  struct file_operations *emg_6_container;
  #line 1021 
  long long emg_6_emg_param_1_0;
  #line 1022 
  char *emg_6_emg_param_1_2;
  #line 1023 
  char *emg_6_emg_param_1_4;
  #line 1024 
  int emg_6_emg_param_2_1;
  #line 1025 
  long long *emg_6_emg_param_3_3;
  #line 1026 
  long long *emg_6_emg_param_3_5;
  #line 1027 
  struct file *emg_6_resource_0;
  #line 1028 
  struct inode *emg_6_resource_1;
  #line 1029 
  int emg_6_ret;
  #line 1030 
  unsigned long emg_6_size_cnt;
  #line 1031 
  int emg_repeat_cnt_main_6_0 = 1;
  #line 1032 
  int emg_repeat_cnt_call_6 = 1;
  #line 1033 
  int emg_repeat_cnt_main_6_1 = 1;
  #line 1035 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 1039 
  emg_6_ret = ldv_undef_int();
  #line 1040 
  emg_6_container = emg_alias_aes_decrypt_fail_ops;
  #line 1041 
  emg_6_ret = ldv_undef_int();
  #line 1043 
  __VERIFIER_assume(data->arg0 == emg_alias_aes_decrypt_fail_ops);
  #line 1045 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 1046 
    emg_6_container = data->arg0;
    #line 1047 
    ldv_free((void *)data);
  }
  #line 1052 
  emg_6_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1053 
  emg_6_size_cnt = (unsigned long)ldv_undef_int();
  #line 1057 
  goto emg_main_6;
  #line 1061 
  return (void *)0;
  #line 1064 
  emg_call_6: 
              #line 1064 
  ;
  #line 1065 
  if (ldv_undef_int() != 0) {
    #line 1066 
    switch (ldv_undef_int()) {
      #line 1067 
      case 0: 
              #line 1067 
      ;
      #line 1069 
      emg_6_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1069 
      emg_6_emg_param_1_2 = emg_6_emg_param_1_2;
      #line 1070 
      emg_6_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1070 
      emg_6_emg_param_3_3 = emg_6_emg_param_3_3;
      #line 1074 
      emg_wrapper_aes_decrypt_fail_read(emg_6_resource_0,emg_6_emg_param_1_2,emg_6_size_cnt,emg_6_emg_param_3_3);
      #line 1078 
      ldv_free((void *)emg_6_emg_param_1_2);
      #line 1079 
      ldv_free((void *)emg_6_emg_param_3_3);
      #line 1081 
      break;
      #line 1083 
      case 1: 
              #line 1083 
      ;
      #line 1085 
      generic_file_llseek(emg_6_resource_0,emg_6_emg_param_1_0,emg_6_emg_param_2_1);
      #line 1087 
      break;
      #line 1089 
      case 2: 
              #line 1089 
      ;
      #line 1096 
      __VERIFIER_assume(emg_6_size_cnt <= 2147479552UL);
      #line 1097 
      emg_6_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1097 
      emg_6_emg_param_1_4 = emg_6_emg_param_1_4;
      #line 1098 
      emg_6_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1098 
      emg_6_emg_param_3_5 = emg_6_emg_param_3_5;
      #line 1102 
      if (emg_6_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1103 
        (*(emg_6_container->write))(emg_6_resource_0,emg_6_emg_param_1_4,emg_6_size_cnt,emg_6_emg_param_3_5);
      #line 1108 
      ldv_free((void *)emg_6_emg_param_1_4);
      #line 1109 
      ldv_free((void *)emg_6_emg_param_3_5);
      #line 1111 
      break;
      #line 1113 
      default: 
               #line 1113 
      ;
      #line 1113 
      __VERIFIER_assume(0);
    }
    #line 1116 
    if (emg_repeat_cnt_call_6 > 0) {
      #line 1117 
      emg_repeat_cnt_call_6 --;
      #line 1119 
      goto emg_call_6;
    }
    else 
         #line 1121 
         __VERIFIER_assume(0);
  }
  else {
    #line 1127 
    if (emg_6_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1128 
      (*(emg_6_container->release))(emg_6_resource_1,emg_6_resource_0);
    #line 1132 
    if (emg_repeat_cnt_main_6_1 > 0) {
      #line 1133 
      emg_repeat_cnt_main_6_1 --;
      #line 1135 
      goto emg_main_6;
    }
    else 
         #line 1137 
         __VERIFIER_assume(0);
  }
  #line 1143 
  return (void *)0;
  #line 1146 
  emg_main_6: 
              #line 1146 
  ;
  #line 1147 
  if (ldv_undef_int() != 0) {
    #line 1149 
    emg_6_ret = simple_open(emg_6_resource_1,emg_6_resource_0);
    #line 1154 
    emg_6_ret = ldv_filter_err_code(emg_6_ret);
    #line 1157 
    if (ldv_undef_int() != 0) {
      #line 1159 
      __VERIFIER_assume(emg_6_ret == 0);
      #line 1163 
      goto emg_call_6;
    }
    else {
      #line 1168 
      __VERIFIER_assume(emg_6_ret != 0);
      #line 1171 
      if (emg_repeat_cnt_main_6_0 > 0) {
        #line 1172 
        emg_repeat_cnt_main_6_0 --;
        #line 1174 
        goto emg_main_6;
      }
      else 
           #line 1176 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1183 
       ldv_free((void *)emg_6_resource_0);
  #line 1191 
  return (void *)0;
}

#line 1196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_aes_decrypt_interrupt_ops(void *arg0)
{
  #line 1199 
  struct file_operations *emg_7_container;
  #line 1200 
  long long emg_7_emg_param_1_0;
  #line 1201 
  char *emg_7_emg_param_1_2;
  #line 1202 
  char *emg_7_emg_param_1_4;
  #line 1203 
  int emg_7_emg_param_2_1;
  #line 1204 
  long long *emg_7_emg_param_3_3;
  #line 1205 
  long long *emg_7_emg_param_3_5;
  #line 1206 
  struct file *emg_7_resource_0;
  #line 1207 
  struct inode *emg_7_resource_1;
  #line 1208 
  int emg_7_ret;
  #line 1209 
  unsigned long emg_7_size_cnt;
  #line 1210 
  int emg_repeat_cnt_call_7 = 1;
  #line 1211 
  int emg_repeat_cnt_main_7_1 = 1;
  #line 1212 
  int emg_repeat_cnt_main_7_0 = 1;
  #line 1214 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 1218 
  emg_7_ret = ldv_undef_int();
  #line 1219 
  emg_7_container = emg_alias_aes_decrypt_interrupt_ops;
  #line 1220 
  emg_7_ret = ldv_undef_int();
  #line 1222 
  __VERIFIER_assume(data->arg0 == emg_alias_aes_decrypt_interrupt_ops);
  #line 1224 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 1225 
    emg_7_container = data->arg0;
    #line 1226 
    ldv_free((void *)data);
  }
  #line 1231 
  emg_7_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1232 
  emg_7_size_cnt = (unsigned long)ldv_undef_int();
  #line 1236 
  goto emg_main_7;
  #line 1240 
  return (void *)0;
  #line 1243 
  emg_call_7: 
              #line 1243 
  ;
  #line 1244 
  if (ldv_undef_int() != 0) {
    #line 1245 
    switch (ldv_undef_int()) {
      #line 1246 
      case 0: 
              #line 1246 
      ;
      #line 1248 
      emg_7_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1248 
      emg_7_emg_param_1_2 = emg_7_emg_param_1_2;
      #line 1249 
      emg_7_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1249 
      emg_7_emg_param_3_3 = emg_7_emg_param_3_3;
      #line 1253 
      emg_wrapper_aes_decrypt_interrupt_read(emg_7_resource_0,emg_7_emg_param_1_2,emg_7_size_cnt,emg_7_emg_param_3_3);
      #line 1257 
      ldv_free((void *)emg_7_emg_param_1_2);
      #line 1258 
      ldv_free((void *)emg_7_emg_param_3_3);
      #line 1260 
      break;
      #line 1262 
      case 1: 
              #line 1262 
      ;
      #line 1264 
      generic_file_llseek(emg_7_resource_0,emg_7_emg_param_1_0,emg_7_emg_param_2_1);
      #line 1266 
      break;
      #line 1268 
      case 2: 
              #line 1268 
      ;
      #line 1275 
      __VERIFIER_assume(emg_7_size_cnt <= 2147479552UL);
      #line 1276 
      emg_7_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1276 
      emg_7_emg_param_1_4 = emg_7_emg_param_1_4;
      #line 1277 
      emg_7_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1277 
      emg_7_emg_param_3_5 = emg_7_emg_param_3_5;
      #line 1281 
      if (emg_7_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1282 
        (*(emg_7_container->write))(emg_7_resource_0,emg_7_emg_param_1_4,emg_7_size_cnt,emg_7_emg_param_3_5);
      #line 1287 
      ldv_free((void *)emg_7_emg_param_1_4);
      #line 1288 
      ldv_free((void *)emg_7_emg_param_3_5);
      #line 1290 
      break;
      #line 1292 
      default: 
               #line 1292 
      ;
      #line 1292 
      __VERIFIER_assume(0);
    }
    #line 1295 
    if (emg_repeat_cnt_call_7 > 0) {
      #line 1296 
      emg_repeat_cnt_call_7 --;
      #line 1298 
      goto emg_call_7;
    }
    else 
         #line 1300 
         __VERIFIER_assume(0);
  }
  else {
    #line 1306 
    if (emg_7_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1307 
      (*(emg_7_container->release))(emg_7_resource_1,emg_7_resource_0);
    #line 1311 
    if (emg_repeat_cnt_main_7_0 > 0) {
      #line 1312 
      emg_repeat_cnt_main_7_0 --;
      #line 1314 
      goto emg_main_7;
    }
    else 
         #line 1316 
         __VERIFIER_assume(0);
  }
  #line 1322 
  return (void *)0;
  #line 1325 
  emg_main_7: 
              #line 1325 
  ;
  #line 1326 
  if (ldv_undef_int() != 0) {
    #line 1328 
    emg_7_ret = simple_open(emg_7_resource_1,emg_7_resource_0);
    #line 1333 
    emg_7_ret = ldv_filter_err_code(emg_7_ret);
    #line 1336 
    if (ldv_undef_int() != 0) {
      #line 1338 
      __VERIFIER_assume(emg_7_ret == 0);
      #line 1342 
      goto emg_call_7;
    }
    else {
      #line 1347 
      __VERIFIER_assume(emg_7_ret != 0);
      #line 1350 
      if (emg_repeat_cnt_main_7_1 > 0) {
        #line 1351 
        emg_repeat_cnt_main_7_1 --;
        #line 1353 
        goto emg_main_7;
      }
      else 
           #line 1355 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1362 
       ldv_free((void *)emg_7_resource_0);
  #line 1370 
  return (void *)0;
}

#line 1375  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_aes_decrypt_packets_ops(void *arg0)
{
  #line 1378 
  struct file_operations *emg_8_container;
  #line 1379 
  long long emg_8_emg_param_1_0;
  #line 1380 
  char *emg_8_emg_param_1_2;
  #line 1381 
  char *emg_8_emg_param_1_4;
  #line 1382 
  int emg_8_emg_param_2_1;
  #line 1383 
  long long *emg_8_emg_param_3_3;
  #line 1384 
  long long *emg_8_emg_param_3_5;
  #line 1385 
  struct file *emg_8_resource_0;
  #line 1386 
  struct inode *emg_8_resource_1;
  #line 1387 
  int emg_8_ret;
  #line 1388 
  unsigned long emg_8_size_cnt;
  #line 1389 
  int emg_repeat_cnt_main_8_1 = 1;
  #line 1390 
  int emg_repeat_cnt_main_8_0 = 1;
  #line 1391 
  int emg_repeat_cnt_call_8 = 1;
  #line 1393 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 1397 
  emg_8_ret = ldv_undef_int();
  #line 1398 
  emg_8_container = emg_alias_aes_decrypt_packets_ops;
  #line 1399 
  emg_8_ret = ldv_undef_int();
  #line 1401 
  __VERIFIER_assume(data->arg0 == emg_alias_aes_decrypt_packets_ops);
  #line 1403 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 1404 
    emg_8_container = data->arg0;
    #line 1405 
    ldv_free((void *)data);
  }
  #line 1410 
  emg_8_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1411 
  emg_8_size_cnt = (unsigned long)ldv_undef_int();
  #line 1415 
  goto emg_main_8;
  #line 1419 
  return (void *)0;
  #line 1422 
  emg_call_8: 
              #line 1422 
  ;
  #line 1423 
  if (ldv_undef_int() != 0) {
    #line 1424 
    switch (ldv_undef_int()) {
      #line 1425 
      case 0: 
              #line 1425 
      ;
      #line 1427 
      emg_8_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1427 
      emg_8_emg_param_1_2 = emg_8_emg_param_1_2;
      #line 1428 
      emg_8_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1428 
      emg_8_emg_param_3_3 = emg_8_emg_param_3_3;
      #line 1432 
      emg_wrapper_aes_decrypt_packets_read(emg_8_resource_0,emg_8_emg_param_1_2,emg_8_size_cnt,emg_8_emg_param_3_3);
      #line 1436 
      ldv_free((void *)emg_8_emg_param_1_2);
      #line 1437 
      ldv_free((void *)emg_8_emg_param_3_3);
      #line 1439 
      break;
      #line 1441 
      case 1: 
              #line 1441 
      ;
      #line 1443 
      generic_file_llseek(emg_8_resource_0,emg_8_emg_param_1_0,emg_8_emg_param_2_1);
      #line 1445 
      break;
      #line 1447 
      case 2: 
              #line 1447 
      ;
      #line 1454 
      __VERIFIER_assume(emg_8_size_cnt <= 2147479552UL);
      #line 1455 
      emg_8_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1455 
      emg_8_emg_param_1_4 = emg_8_emg_param_1_4;
      #line 1456 
      emg_8_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1456 
      emg_8_emg_param_3_5 = emg_8_emg_param_3_5;
      #line 1460 
      if (emg_8_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1461 
        (*(emg_8_container->write))(emg_8_resource_0,emg_8_emg_param_1_4,emg_8_size_cnt,emg_8_emg_param_3_5);
      #line 1466 
      ldv_free((void *)emg_8_emg_param_1_4);
      #line 1467 
      ldv_free((void *)emg_8_emg_param_3_5);
      #line 1469 
      break;
      #line 1471 
      default: 
               #line 1471 
      ;
      #line 1471 
      __VERIFIER_assume(0);
    }
    #line 1474 
    if (emg_repeat_cnt_call_8 > 0) {
      #line 1475 
      emg_repeat_cnt_call_8 --;
      #line 1477 
      goto emg_call_8;
    }
    else 
         #line 1479 
         __VERIFIER_assume(0);
  }
  else {
    #line 1485 
    if (emg_8_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1486 
      (*(emg_8_container->release))(emg_8_resource_1,emg_8_resource_0);
    #line 1490 
    if (emg_repeat_cnt_main_8_0 > 0) {
      #line 1491 
      emg_repeat_cnt_main_8_0 --;
      #line 1493 
      goto emg_main_8;
    }
    else 
         #line 1495 
         __VERIFIER_assume(0);
  }
  #line 1501 
  return (void *)0;
  #line 1504 
  emg_main_8: 
              #line 1504 
  ;
  #line 1505 
  if (ldv_undef_int() != 0) {
    #line 1507 
    emg_8_ret = simple_open(emg_8_resource_1,emg_8_resource_0);
    #line 1512 
    emg_8_ret = ldv_filter_err_code(emg_8_ret);
    #line 1515 
    if (ldv_undef_int() != 0) {
      #line 1517 
      __VERIFIER_assume(emg_8_ret == 0);
      #line 1521 
      goto emg_call_8;
    }
    else {
      #line 1526 
      __VERIFIER_assume(emg_8_ret != 0);
      #line 1529 
      if (emg_repeat_cnt_main_8_1 > 0) {
        #line 1530 
        emg_repeat_cnt_main_8_1 --;
        #line 1532 
        goto emg_main_8;
      }
      else 
           #line 1534 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1541 
       ldv_free((void *)emg_8_resource_0);
  #line 1549 
  return (void *)0;
}

#line 1554  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_aes_encrypt_fail_ops(void *arg0)
{
  #line 1557 
  struct file_operations *emg_9_container;
  #line 1558 
  long long emg_9_emg_param_1_0;
  #line 1559 
  char *emg_9_emg_param_1_2;
  #line 1560 
  char *emg_9_emg_param_1_4;
  #line 1561 
  int emg_9_emg_param_2_1;
  #line 1562 
  long long *emg_9_emg_param_3_3;
  #line 1563 
  long long *emg_9_emg_param_3_5;
  #line 1564 
  struct file *emg_9_resource_0;
  #line 1565 
  struct inode *emg_9_resource_1;
  #line 1566 
  int emg_9_ret;
  #line 1567 
  unsigned long emg_9_size_cnt;
  #line 1568 
  int emg_repeat_cnt_main_9_0 = 1;
  #line 1569 
  int emg_repeat_cnt_call_9 = 1;
  #line 1570 
  int emg_repeat_cnt_main_9_1 = 1;
  #line 1572 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 1576 
  emg_9_ret = ldv_undef_int();
  #line 1577 
  emg_9_container = emg_alias_aes_encrypt_fail_ops;
  #line 1578 
  emg_9_ret = ldv_undef_int();
  #line 1580 
  __VERIFIER_assume(data->arg0 == emg_alias_aes_encrypt_fail_ops);
  #line 1582 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 1583 
    emg_9_container = data->arg0;
    #line 1584 
    ldv_free((void *)data);
  }
  #line 1589 
  emg_9_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1590 
  emg_9_size_cnt = (unsigned long)ldv_undef_int();
  #line 1594 
  goto emg_main_9;
  #line 1598 
  return (void *)0;
  #line 1601 
  emg_call_9: 
              #line 1601 
  ;
  #line 1602 
  if (ldv_undef_int() != 0) {
    #line 1603 
    switch (ldv_undef_int()) {
      #line 1604 
      case 0: 
              #line 1604 
      ;
      #line 1606 
      emg_9_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1606 
      emg_9_emg_param_1_2 = emg_9_emg_param_1_2;
      #line 1607 
      emg_9_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1607 
      emg_9_emg_param_3_3 = emg_9_emg_param_3_3;
      #line 1611 
      emg_wrapper_aes_encrypt_fail_read(emg_9_resource_0,emg_9_emg_param_1_2,emg_9_size_cnt,emg_9_emg_param_3_3);
      #line 1615 
      ldv_free((void *)emg_9_emg_param_1_2);
      #line 1616 
      ldv_free((void *)emg_9_emg_param_3_3);
      #line 1618 
      break;
      #line 1620 
      case 1: 
              #line 1620 
      ;
      #line 1622 
      generic_file_llseek(emg_9_resource_0,emg_9_emg_param_1_0,emg_9_emg_param_2_1);
      #line 1624 
      break;
      #line 1626 
      case 2: 
              #line 1626 
      ;
      #line 1633 
      __VERIFIER_assume(emg_9_size_cnt <= 2147479552UL);
      #line 1634 
      emg_9_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1634 
      emg_9_emg_param_1_4 = emg_9_emg_param_1_4;
      #line 1635 
      emg_9_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1635 
      emg_9_emg_param_3_5 = emg_9_emg_param_3_5;
      #line 1639 
      if (emg_9_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1640 
        (*(emg_9_container->write))(emg_9_resource_0,emg_9_emg_param_1_4,emg_9_size_cnt,emg_9_emg_param_3_5);
      #line 1645 
      ldv_free((void *)emg_9_emg_param_1_4);
      #line 1646 
      ldv_free((void *)emg_9_emg_param_3_5);
      #line 1648 
      break;
      #line 1650 
      default: 
               #line 1650 
      ;
      #line 1650 
      __VERIFIER_assume(0);
    }
    #line 1653 
    if (emg_repeat_cnt_call_9 > 0) {
      #line 1654 
      emg_repeat_cnt_call_9 --;
      #line 1656 
      goto emg_call_9;
    }
    else 
         #line 1658 
         __VERIFIER_assume(0);
  }
  else {
    #line 1664 
    if (emg_9_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1665 
      (*(emg_9_container->release))(emg_9_resource_1,emg_9_resource_0);
    #line 1669 
    if (emg_repeat_cnt_main_9_0 > 0) {
      #line 1670 
      emg_repeat_cnt_main_9_0 --;
      #line 1672 
      goto emg_main_9;
    }
    else 
         #line 1674 
         __VERIFIER_assume(0);
  }
  #line 1680 
  return (void *)0;
  #line 1683 
  emg_main_9: 
              #line 1683 
  ;
  #line 1684 
  if (ldv_undef_int() != 0) {
    #line 1686 
    emg_9_ret = simple_open(emg_9_resource_1,emg_9_resource_0);
    #line 1691 
    emg_9_ret = ldv_filter_err_code(emg_9_ret);
    #line 1694 
    if (ldv_undef_int() != 0) {
      #line 1696 
      __VERIFIER_assume(emg_9_ret == 0);
      #line 1700 
      goto emg_call_9;
    }
    else {
      #line 1705 
      __VERIFIER_assume(emg_9_ret != 0);
      #line 1708 
      if (emg_repeat_cnt_main_9_1 > 0) {
        #line 1709 
        emg_repeat_cnt_main_9_1 --;
        #line 1711 
        goto emg_main_9;
      }
      else 
           #line 1713 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1720 
       ldv_free((void *)emg_9_resource_0);
  #line 1728 
  return (void *)0;
}

#line 1733  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_aes_encrypt_interrupt_ops(void *arg0)
{
  #line 1736 
  struct file_operations *emg_10_container;
  #line 1737 
  long long emg_10_emg_param_1_0;
  #line 1738 
  char *emg_10_emg_param_1_2;
  #line 1739 
  char *emg_10_emg_param_1_4;
  #line 1740 
  int emg_10_emg_param_2_1;
  #line 1741 
  long long *emg_10_emg_param_3_3;
  #line 1742 
  long long *emg_10_emg_param_3_5;
  #line 1743 
  struct file *emg_10_resource_0;
  #line 1744 
  struct inode *emg_10_resource_1;
  #line 1745 
  int emg_10_ret;
  #line 1746 
  unsigned long emg_10_size_cnt;
  #line 1747 
  int emg_repeat_cnt_call_10 = 1;
  #line 1748 
  int emg_repeat_cnt_main_10_1 = 1;
  #line 1749 
  int emg_repeat_cnt_main_10_0 = 1;
  #line 1751 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 1755 
  emg_10_ret = ldv_undef_int();
  #line 1756 
  emg_10_container = emg_alias_aes_encrypt_interrupt_ops;
  #line 1757 
  emg_10_ret = ldv_undef_int();
  #line 1759 
  __VERIFIER_assume(data->arg0 == emg_alias_aes_encrypt_interrupt_ops);
  #line 1761 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 1762 
    emg_10_container = data->arg0;
    #line 1763 
    ldv_free((void *)data);
  }
  #line 1768 
  emg_10_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1769 
  emg_10_size_cnt = (unsigned long)ldv_undef_int();
  #line 1773 
  goto emg_main_10;
  #line 1777 
  return (void *)0;
  #line 1780 
  emg_call_10: 
               #line 1780 
  ;
  #line 1781 
  if (ldv_undef_int() != 0) {
    #line 1782 
    switch (ldv_undef_int()) {
      #line 1783 
      case 0: 
              #line 1783 
      ;
      #line 1785 
      emg_10_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1785 
      emg_10_emg_param_1_2 = emg_10_emg_param_1_2;
      #line 1786 
      emg_10_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1786 
      emg_10_emg_param_3_3 = emg_10_emg_param_3_3;
      #line 1790 
      emg_wrapper_aes_encrypt_interrupt_read(emg_10_resource_0,emg_10_emg_param_1_2,emg_10_size_cnt,emg_10_emg_param_3_3);
      #line 1794 
      ldv_free((void *)emg_10_emg_param_1_2);
      #line 1795 
      ldv_free((void *)emg_10_emg_param_3_3);
      #line 1797 
      break;
      #line 1799 
      case 1: 
              #line 1799 
      ;
      #line 1801 
      generic_file_llseek(emg_10_resource_0,emg_10_emg_param_1_0,emg_10_emg_param_2_1);
      #line 1803 
      break;
      #line 1805 
      case 2: 
              #line 1805 
      ;
      #line 1812 
      __VERIFIER_assume(emg_10_size_cnt <= 2147479552UL);
      #line 1813 
      emg_10_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1813 
      emg_10_emg_param_1_4 = emg_10_emg_param_1_4;
      #line 1814 
      emg_10_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1814 
      emg_10_emg_param_3_5 = emg_10_emg_param_3_5;
      #line 1818 
      if (emg_10_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1819 
        (*(emg_10_container->write))(emg_10_resource_0,emg_10_emg_param_1_4,emg_10_size_cnt,emg_10_emg_param_3_5);
      #line 1824 
      ldv_free((void *)emg_10_emg_param_1_4);
      #line 1825 
      ldv_free((void *)emg_10_emg_param_3_5);
      #line 1827 
      break;
      #line 1829 
      default: 
               #line 1829 
      ;
      #line 1829 
      __VERIFIER_assume(0);
    }
    #line 1832 
    if (emg_repeat_cnt_call_10 > 0) {
      #line 1833 
      emg_repeat_cnt_call_10 --;
      #line 1835 
      goto emg_call_10;
    }
    else 
         #line 1837 
         __VERIFIER_assume(0);
  }
  else {
    #line 1843 
    if (emg_10_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1844 
      (*(emg_10_container->release))(emg_10_resource_1,emg_10_resource_0);
    #line 1848 
    if (emg_repeat_cnt_main_10_1 > 0) {
      #line 1849 
      emg_repeat_cnt_main_10_1 --;
      #line 1851 
      goto emg_main_10;
    }
    else 
         #line 1853 
         __VERIFIER_assume(0);
  }
  #line 1859 
  return (void *)0;
  #line 1862 
  emg_main_10: 
               #line 1862 
  ;
  #line 1863 
  if (ldv_undef_int() != 0) {
    #line 1865 
    emg_10_ret = simple_open(emg_10_resource_1,emg_10_resource_0);
    #line 1870 
    emg_10_ret = ldv_filter_err_code(emg_10_ret);
    #line 1873 
    if (ldv_undef_int() != 0) {
      #line 1875 
      __VERIFIER_assume(emg_10_ret == 0);
      #line 1879 
      goto emg_call_10;
    }
    else {
      #line 1884 
      __VERIFIER_assume(emg_10_ret != 0);
      #line 1887 
      if (emg_repeat_cnt_main_10_0 > 0) {
        #line 1888 
        emg_repeat_cnt_main_10_0 --;
        #line 1890 
        goto emg_main_10;
      }
      else 
           #line 1892 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1899 
       ldv_free((void *)emg_10_resource_0);
  #line 1907 
  return (void *)0;
}

#line 1912  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_aes_encrypt_packets_ops(void *arg0)
{
  #line 1915 
  struct file_operations *emg_11_container;
  #line 1916 
  long long emg_11_emg_param_1_0;
  #line 1917 
  char *emg_11_emg_param_1_2;
  #line 1918 
  char *emg_11_emg_param_1_4;
  #line 1919 
  int emg_11_emg_param_2_1;
  #line 1920 
  long long *emg_11_emg_param_3_3;
  #line 1921 
  long long *emg_11_emg_param_3_5;
  #line 1922 
  struct file *emg_11_resource_0;
  #line 1923 
  struct inode *emg_11_resource_1;
  #line 1924 
  int emg_11_ret;
  #line 1925 
  unsigned long emg_11_size_cnt;
  #line 1926 
  int emg_repeat_cnt_main_11_1 = 1;
  #line 1927 
  int emg_repeat_cnt_main_11_0 = 1;
  #line 1928 
  int emg_repeat_cnt_call_11 = 1;
  #line 1930 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 1934 
  emg_11_ret = ldv_undef_int();
  #line 1935 
  emg_11_container = emg_alias_aes_encrypt_packets_ops;
  #line 1936 
  emg_11_ret = ldv_undef_int();
  #line 1938 
  __VERIFIER_assume(data->arg0 == emg_alias_aes_encrypt_packets_ops);
  #line 1940 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 1941 
    emg_11_container = data->arg0;
    #line 1942 
    ldv_free((void *)data);
  }
  #line 1947 
  emg_11_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1948 
  emg_11_size_cnt = (unsigned long)ldv_undef_int();
  #line 1952 
  goto emg_main_11;
  #line 1956 
  return (void *)0;
  #line 1959 
  emg_call_11: 
               #line 1959 
  ;
  #line 1960 
  if (ldv_undef_int() != 0) {
    #line 1961 
    switch (ldv_undef_int()) {
      #line 1962 
      case 0: 
              #line 1962 
      ;
      #line 1964 
      emg_11_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1964 
      emg_11_emg_param_1_2 = emg_11_emg_param_1_2;
      #line 1965 
      emg_11_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1965 
      emg_11_emg_param_3_3 = emg_11_emg_param_3_3;
      #line 1969 
      emg_wrapper_aes_encrypt_packets_read(emg_11_resource_0,emg_11_emg_param_1_2,emg_11_size_cnt,emg_11_emg_param_3_3);
      #line 1973 
      ldv_free((void *)emg_11_emg_param_1_2);
      #line 1974 
      ldv_free((void *)emg_11_emg_param_3_3);
      #line 1976 
      break;
      #line 1978 
      case 1: 
              #line 1978 
      ;
      #line 1980 
      generic_file_llseek(emg_11_resource_0,emg_11_emg_param_1_0,emg_11_emg_param_2_1);
      #line 1982 
      break;
      #line 1984 
      case 2: 
              #line 1984 
      ;
      #line 1991 
      __VERIFIER_assume(emg_11_size_cnt <= 2147479552UL);
      #line 1992 
      emg_11_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1992 
      emg_11_emg_param_1_4 = emg_11_emg_param_1_4;
      #line 1993 
      emg_11_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1993 
      emg_11_emg_param_3_5 = emg_11_emg_param_3_5;
      #line 1997 
      if (emg_11_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1998 
        (*(emg_11_container->write))(emg_11_resource_0,emg_11_emg_param_1_4,emg_11_size_cnt,emg_11_emg_param_3_5);
      #line 2003 
      ldv_free((void *)emg_11_emg_param_1_4);
      #line 2004 
      ldv_free((void *)emg_11_emg_param_3_5);
      #line 2006 
      break;
      #line 2008 
      default: 
               #line 2008 
      ;
      #line 2008 
      __VERIFIER_assume(0);
    }
    #line 2011 
    if (emg_repeat_cnt_call_11 > 0) {
      #line 2012 
      emg_repeat_cnt_call_11 --;
      #line 2014 
      goto emg_call_11;
    }
    else 
         #line 2016 
         __VERIFIER_assume(0);
  }
  else {
    #line 2022 
    if (emg_11_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2023 
      (*(emg_11_container->release))(emg_11_resource_1,emg_11_resource_0);
    #line 2027 
    if (emg_repeat_cnt_main_11_0 > 0) {
      #line 2028 
      emg_repeat_cnt_main_11_0 --;
      #line 2030 
      goto emg_main_11;
    }
    else 
         #line 2032 
         __VERIFIER_assume(0);
  }
  #line 2038 
  return (void *)0;
  #line 2041 
  emg_main_11: 
               #line 2041 
  ;
  #line 2042 
  if (ldv_undef_int() != 0) {
    #line 2044 
    emg_11_ret = simple_open(emg_11_resource_1,emg_11_resource_0);
    #line 2049 
    emg_11_ret = ldv_filter_err_code(emg_11_ret);
    #line 2052 
    if (ldv_undef_int() != 0) {
      #line 2054 
      __VERIFIER_assume(emg_11_ret == 0);
      #line 2058 
      goto emg_call_11;
    }
    else {
      #line 2063 
      __VERIFIER_assume(emg_11_ret != 0);
      #line 2066 
      if (emg_repeat_cnt_main_11_1 > 0) {
        #line 2067 
        emg_repeat_cnt_main_11_1 --;
        #line 2069 
        goto emg_main_11;
      }
      else 
           #line 2071 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2078 
       ldv_free((void *)emg_11_resource_0);
  #line 2086 
  return (void *)0;
}

#line 2091  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_dma_rx_errors_ops(void *arg0)
{
  #line 2094 
  struct file_operations *emg_12_container;
  #line 2095 
  long long emg_12_emg_param_1_0;
  #line 2096 
  char *emg_12_emg_param_1_2;
  #line 2097 
  char *emg_12_emg_param_1_4;
  #line 2098 
  int emg_12_emg_param_2_1;
  #line 2099 
  long long *emg_12_emg_param_3_3;
  #line 2100 
  long long *emg_12_emg_param_3_5;
  #line 2101 
  struct file *emg_12_resource_0;
  #line 2102 
  struct inode *emg_12_resource_1;
  #line 2103 
  int emg_12_ret;
  #line 2104 
  unsigned long emg_12_size_cnt;
  #line 2105 
  int emg_repeat_cnt_main_12_0 = 1;
  #line 2106 
  int emg_repeat_cnt_main_12_1 = 1;
  #line 2107 
  int emg_repeat_cnt_call_12 = 1;
  #line 2109 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 2113 
  emg_12_ret = ldv_undef_int();
  #line 2114 
  emg_12_container = emg_alias_dma_rx_errors_ops;
  #line 2115 
  emg_12_ret = ldv_undef_int();
  #line 2117 
  __VERIFIER_assume(data->arg0 == emg_alias_dma_rx_errors_ops);
  #line 2119 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 2120 
    emg_12_container = data->arg0;
    #line 2121 
    ldv_free((void *)data);
  }
  #line 2126 
  emg_12_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2127 
  emg_12_size_cnt = (unsigned long)ldv_undef_int();
  #line 2131 
  goto emg_main_12;
  #line 2135 
  return (void *)0;
  #line 2138 
  emg_call_12: 
               #line 2138 
  ;
  #line 2139 
  if (ldv_undef_int() != 0) {
    #line 2140 
    switch (ldv_undef_int()) {
      #line 2141 
      case 0: 
              #line 2141 
      ;
      #line 2143 
      emg_12_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2143 
      emg_12_emg_param_1_2 = emg_12_emg_param_1_2;
      #line 2144 
      emg_12_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2144 
      emg_12_emg_param_3_3 = emg_12_emg_param_3_3;
      #line 2148 
      emg_wrapper_dma_rx_errors_read(emg_12_resource_0,emg_12_emg_param_1_2,emg_12_size_cnt,emg_12_emg_param_3_3);
      #line 2152 
      ldv_free((void *)emg_12_emg_param_1_2);
      #line 2153 
      ldv_free((void *)emg_12_emg_param_3_3);
      #line 2155 
      break;
      #line 2157 
      case 1: 
              #line 2157 
      ;
      #line 2159 
      generic_file_llseek(emg_12_resource_0,emg_12_emg_param_1_0,emg_12_emg_param_2_1);
      #line 2161 
      break;
      #line 2163 
      case 2: 
              #line 2163 
      ;
      #line 2170 
      __VERIFIER_assume(emg_12_size_cnt <= 2147479552UL);
      #line 2171 
      emg_12_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2171 
      emg_12_emg_param_1_4 = emg_12_emg_param_1_4;
      #line 2172 
      emg_12_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2172 
      emg_12_emg_param_3_5 = emg_12_emg_param_3_5;
      #line 2176 
      if (emg_12_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2177 
        (*(emg_12_container->write))(emg_12_resource_0,emg_12_emg_param_1_4,emg_12_size_cnt,emg_12_emg_param_3_5);
      #line 2182 
      ldv_free((void *)emg_12_emg_param_1_4);
      #line 2183 
      ldv_free((void *)emg_12_emg_param_3_5);
      #line 2185 
      break;
      #line 2187 
      default: 
               #line 2187 
      ;
      #line 2187 
      __VERIFIER_assume(0);
    }
    #line 2190 
    if (emg_repeat_cnt_call_12 > 0) {
      #line 2191 
      emg_repeat_cnt_call_12 --;
      #line 2193 
      goto emg_call_12;
    }
    else 
         #line 2195 
         __VERIFIER_assume(0);
  }
  else {
    #line 2201 
    if (emg_12_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2202 
      (*(emg_12_container->release))(emg_12_resource_1,emg_12_resource_0);
    #line 2206 
    if (emg_repeat_cnt_main_12_1 > 0) {
      #line 2207 
      emg_repeat_cnt_main_12_1 --;
      #line 2209 
      goto emg_main_12;
    }
    else 
         #line 2211 
         __VERIFIER_assume(0);
  }
  #line 2217 
  return (void *)0;
  #line 2220 
  emg_main_12: 
               #line 2220 
  ;
  #line 2221 
  if (ldv_undef_int() != 0) {
    #line 2223 
    emg_12_ret = simple_open(emg_12_resource_1,emg_12_resource_0);
    #line 2228 
    emg_12_ret = ldv_filter_err_code(emg_12_ret);
    #line 2231 
    if (ldv_undef_int() != 0) {
      #line 2233 
      __VERIFIER_assume(emg_12_ret == 0);
      #line 2237 
      goto emg_call_12;
    }
    else {
      #line 2242 
      __VERIFIER_assume(emg_12_ret != 0);
      #line 2245 
      if (emg_repeat_cnt_main_12_0 > 0) {
        #line 2246 
        emg_repeat_cnt_main_12_0 --;
        #line 2248 
        goto emg_main_12;
      }
      else 
           #line 2250 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2257 
       ldv_free((void *)emg_12_resource_0);
  #line 2265 
  return (void *)0;
}

#line 2270  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_dma_rx_requested_ops(void *arg0)
{
  #line 2273 
  struct file_operations *emg_13_container;
  #line 2274 
  long long emg_13_emg_param_1_0;
  #line 2275 
  char *emg_13_emg_param_1_2;
  #line 2276 
  char *emg_13_emg_param_1_4;
  #line 2277 
  int emg_13_emg_param_2_1;
  #line 2278 
  long long *emg_13_emg_param_3_3;
  #line 2279 
  long long *emg_13_emg_param_3_5;
  #line 2280 
  struct file *emg_13_resource_0;
  #line 2281 
  struct inode *emg_13_resource_1;
  #line 2282 
  int emg_13_ret;
  #line 2283 
  unsigned long emg_13_size_cnt;
  #line 2284 
  int emg_repeat_cnt_main_13_1 = 1;
  #line 2285 
  int emg_repeat_cnt_main_13_0 = 1;
  #line 2286 
  int emg_repeat_cnt_call_13 = 1;
  #line 2288 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 2292 
  emg_13_ret = ldv_undef_int();
  #line 2293 
  emg_13_container = emg_alias_dma_rx_requested_ops;
  #line 2294 
  emg_13_ret = ldv_undef_int();
  #line 2296 
  __VERIFIER_assume(data->arg0 == emg_alias_dma_rx_requested_ops);
  #line 2298 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 2299 
    emg_13_container = data->arg0;
    #line 2300 
    ldv_free((void *)data);
  }
  #line 2305 
  emg_13_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2306 
  emg_13_size_cnt = (unsigned long)ldv_undef_int();
  #line 2310 
  goto emg_main_13;
  #line 2314 
  return (void *)0;
  #line 2317 
  emg_call_13: 
               #line 2317 
  ;
  #line 2318 
  if (ldv_undef_int() != 0) {
    #line 2319 
    switch (ldv_undef_int()) {
      #line 2320 
      case 0: 
              #line 2320 
      ;
      #line 2322 
      emg_13_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2322 
      emg_13_emg_param_1_2 = emg_13_emg_param_1_2;
      #line 2323 
      emg_13_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2323 
      emg_13_emg_param_3_3 = emg_13_emg_param_3_3;
      #line 2327 
      emg_wrapper_dma_rx_requested_read(emg_13_resource_0,emg_13_emg_param_1_2,emg_13_size_cnt,emg_13_emg_param_3_3);
      #line 2331 
      ldv_free((void *)emg_13_emg_param_1_2);
      #line 2332 
      ldv_free((void *)emg_13_emg_param_3_3);
      #line 2334 
      break;
      #line 2336 
      case 1: 
              #line 2336 
      ;
      #line 2338 
      generic_file_llseek(emg_13_resource_0,emg_13_emg_param_1_0,emg_13_emg_param_2_1);
      #line 2340 
      break;
      #line 2342 
      case 2: 
              #line 2342 
      ;
      #line 2349 
      __VERIFIER_assume(emg_13_size_cnt <= 2147479552UL);
      #line 2350 
      emg_13_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2350 
      emg_13_emg_param_1_4 = emg_13_emg_param_1_4;
      #line 2351 
      emg_13_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2351 
      emg_13_emg_param_3_5 = emg_13_emg_param_3_5;
      #line 2355 
      if (emg_13_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2356 
        (*(emg_13_container->write))(emg_13_resource_0,emg_13_emg_param_1_4,emg_13_size_cnt,emg_13_emg_param_3_5);
      #line 2361 
      ldv_free((void *)emg_13_emg_param_1_4);
      #line 2362 
      ldv_free((void *)emg_13_emg_param_3_5);
      #line 2364 
      break;
      #line 2366 
      default: 
               #line 2366 
      ;
      #line 2366 
      __VERIFIER_assume(0);
    }
    #line 2369 
    if (emg_repeat_cnt_call_13 > 0) {
      #line 2370 
      emg_repeat_cnt_call_13 --;
      #line 2372 
      goto emg_call_13;
    }
    else 
         #line 2374 
         __VERIFIER_assume(0);
  }
  else {
    #line 2380 
    if (emg_13_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2381 
      (*(emg_13_container->release))(emg_13_resource_1,emg_13_resource_0);
    #line 2385 
    if (emg_repeat_cnt_main_13_0 > 0) {
      #line 2386 
      emg_repeat_cnt_main_13_0 --;
      #line 2388 
      goto emg_main_13;
    }
    else 
         #line 2390 
         __VERIFIER_assume(0);
  }
  #line 2396 
  return (void *)0;
  #line 2399 
  emg_main_13: 
               #line 2399 
  ;
  #line 2400 
  if (ldv_undef_int() != 0) {
    #line 2402 
    emg_13_ret = simple_open(emg_13_resource_1,emg_13_resource_0);
    #line 2407 
    emg_13_ret = ldv_filter_err_code(emg_13_ret);
    #line 2410 
    if (ldv_undef_int() != 0) {
      #line 2412 
      __VERIFIER_assume(emg_13_ret == 0);
      #line 2416 
      goto emg_call_13;
    }
    else {
      #line 2421 
      __VERIFIER_assume(emg_13_ret != 0);
      #line 2424 
      if (emg_repeat_cnt_main_13_1 > 0) {
        #line 2425 
        emg_repeat_cnt_main_13_1 --;
        #line 2427 
        goto emg_main_13;
      }
      else 
           #line 2429 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2436 
       ldv_free((void *)emg_13_resource_0);
  #line 2444 
  return (void *)0;
}

#line 2449  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_dma_tx_errors_ops(void *arg0)
{
  #line 2452 
  struct file_operations *emg_14_container;
  #line 2453 
  long long emg_14_emg_param_1_0;
  #line 2454 
  char *emg_14_emg_param_1_2;
  #line 2455 
  char *emg_14_emg_param_1_4;
  #line 2456 
  int emg_14_emg_param_2_1;
  #line 2457 
  long long *emg_14_emg_param_3_3;
  #line 2458 
  long long *emg_14_emg_param_3_5;
  #line 2459 
  struct file *emg_14_resource_0;
  #line 2460 
  struct inode *emg_14_resource_1;
  #line 2461 
  int emg_14_ret;
  #line 2462 
  unsigned long emg_14_size_cnt;
  #line 2463 
  int emg_repeat_cnt_call_14 = 1;
  #line 2464 
  int emg_repeat_cnt_main_14_0 = 1;
  #line 2465 
  int emg_repeat_cnt_main_14_1 = 1;
  #line 2467 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 2471 
  emg_14_ret = ldv_undef_int();
  #line 2472 
  emg_14_container = emg_alias_dma_tx_errors_ops;
  #line 2473 
  emg_14_ret = ldv_undef_int();
  #line 2475 
  __VERIFIER_assume(data->arg0 == emg_alias_dma_tx_errors_ops);
  #line 2477 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 2478 
    emg_14_container = data->arg0;
    #line 2479 
    ldv_free((void *)data);
  }
  #line 2484 
  emg_14_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2485 
  emg_14_size_cnt = (unsigned long)ldv_undef_int();
  #line 2489 
  goto emg_main_14;
  #line 2493 
  return (void *)0;
  #line 2496 
  emg_call_14: 
               #line 2496 
  ;
  #line 2497 
  if (ldv_undef_int() != 0) {
    #line 2498 
    switch (ldv_undef_int()) {
      #line 2499 
      case 0: 
              #line 2499 
      ;
      #line 2501 
      emg_14_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2501 
      emg_14_emg_param_1_2 = emg_14_emg_param_1_2;
      #line 2502 
      emg_14_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2502 
      emg_14_emg_param_3_3 = emg_14_emg_param_3_3;
      #line 2506 
      emg_wrapper_dma_tx_errors_read(emg_14_resource_0,emg_14_emg_param_1_2,emg_14_size_cnt,emg_14_emg_param_3_3);
      #line 2510 
      ldv_free((void *)emg_14_emg_param_1_2);
      #line 2511 
      ldv_free((void *)emg_14_emg_param_3_3);
      #line 2513 
      break;
      #line 2515 
      case 1: 
              #line 2515 
      ;
      #line 2517 
      generic_file_llseek(emg_14_resource_0,emg_14_emg_param_1_0,emg_14_emg_param_2_1);
      #line 2519 
      break;
      #line 2521 
      case 2: 
              #line 2521 
      ;
      #line 2528 
      __VERIFIER_assume(emg_14_size_cnt <= 2147479552UL);
      #line 2529 
      emg_14_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2529 
      emg_14_emg_param_1_4 = emg_14_emg_param_1_4;
      #line 2530 
      emg_14_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2530 
      emg_14_emg_param_3_5 = emg_14_emg_param_3_5;
      #line 2534 
      if (emg_14_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2535 
        (*(emg_14_container->write))(emg_14_resource_0,emg_14_emg_param_1_4,emg_14_size_cnt,emg_14_emg_param_3_5);
      #line 2540 
      ldv_free((void *)emg_14_emg_param_1_4);
      #line 2541 
      ldv_free((void *)emg_14_emg_param_3_5);
      #line 2543 
      break;
      #line 2545 
      default: 
               #line 2545 
      ;
      #line 2545 
      __VERIFIER_assume(0);
    }
    #line 2548 
    if (emg_repeat_cnt_call_14 > 0) {
      #line 2549 
      emg_repeat_cnt_call_14 --;
      #line 2551 
      goto emg_call_14;
    }
    else 
         #line 2553 
         __VERIFIER_assume(0);
  }
  else {
    #line 2559 
    if (emg_14_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2560 
      (*(emg_14_container->release))(emg_14_resource_1,emg_14_resource_0);
    #line 2564 
    if (emg_repeat_cnt_main_14_1 > 0) {
      #line 2565 
      emg_repeat_cnt_main_14_1 --;
      #line 2567 
      goto emg_main_14;
    }
    else 
         #line 2569 
         __VERIFIER_assume(0);
  }
  #line 2575 
  return (void *)0;
  #line 2578 
  emg_main_14: 
               #line 2578 
  ;
  #line 2579 
  if (ldv_undef_int() != 0) {
    #line 2581 
    emg_14_ret = simple_open(emg_14_resource_1,emg_14_resource_0);
    #line 2586 
    emg_14_ret = ldv_filter_err_code(emg_14_ret);
    #line 2589 
    if (ldv_undef_int() != 0) {
      #line 2591 
      __VERIFIER_assume(emg_14_ret == 0);
      #line 2595 
      goto emg_call_14;
    }
    else {
      #line 2600 
      __VERIFIER_assume(emg_14_ret != 0);
      #line 2603 
      if (emg_repeat_cnt_main_14_0 > 0) {
        #line 2604 
        emg_repeat_cnt_main_14_0 --;
        #line 2606 
        goto emg_main_14;
      }
      else 
           #line 2608 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2615 
       ldv_free((void *)emg_14_resource_0);
  #line 2623 
  return (void *)0;
}

#line 2628  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_dma_tx_requested_ops(void *arg0)
{
  #line 2631 
  struct file_operations *emg_15_container;
  #line 2632 
  long long emg_15_emg_param_1_0;
  #line 2633 
  char *emg_15_emg_param_1_2;
  #line 2634 
  char *emg_15_emg_param_1_4;
  #line 2635 
  int emg_15_emg_param_2_1;
  #line 2636 
  long long *emg_15_emg_param_3_3;
  #line 2637 
  long long *emg_15_emg_param_3_5;
  #line 2638 
  struct file *emg_15_resource_0;
  #line 2639 
  struct inode *emg_15_resource_1;
  #line 2640 
  int emg_15_ret;
  #line 2641 
  unsigned long emg_15_size_cnt;
  #line 2642 
  int emg_repeat_cnt_main_15_0 = 1;
  #line 2643 
  int emg_repeat_cnt_call_15 = 1;
  #line 2644 
  int emg_repeat_cnt_main_15_1 = 1;
  #line 2646 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 2650 
  emg_15_ret = ldv_undef_int();
  #line 2651 
  emg_15_container = emg_alias_dma_tx_requested_ops;
  #line 2652 
  emg_15_ret = ldv_undef_int();
  #line 2654 
  __VERIFIER_assume(data->arg0 == emg_alias_dma_tx_requested_ops);
  #line 2656 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 2657 
    emg_15_container = data->arg0;
    #line 2658 
    ldv_free((void *)data);
  }
  #line 2663 
  emg_15_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2664 
  emg_15_size_cnt = (unsigned long)ldv_undef_int();
  #line 2668 
  goto emg_main_15;
  #line 2672 
  return (void *)0;
  #line 2675 
  emg_call_15: 
               #line 2675 
  ;
  #line 2676 
  if (ldv_undef_int() != 0) {
    #line 2677 
    switch (ldv_undef_int()) {
      #line 2678 
      case 0: 
              #line 2678 
      ;
      #line 2680 
      emg_15_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2680 
      emg_15_emg_param_1_2 = emg_15_emg_param_1_2;
      #line 2681 
      emg_15_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2681 
      emg_15_emg_param_3_3 = emg_15_emg_param_3_3;
      #line 2685 
      emg_wrapper_dma_tx_requested_read(emg_15_resource_0,emg_15_emg_param_1_2,emg_15_size_cnt,emg_15_emg_param_3_3);
      #line 2689 
      ldv_free((void *)emg_15_emg_param_1_2);
      #line 2690 
      ldv_free((void *)emg_15_emg_param_3_3);
      #line 2692 
      break;
      #line 2694 
      case 1: 
              #line 2694 
      ;
      #line 2696 
      generic_file_llseek(emg_15_resource_0,emg_15_emg_param_1_0,emg_15_emg_param_2_1);
      #line 2698 
      break;
      #line 2700 
      case 2: 
              #line 2700 
      ;
      #line 2707 
      __VERIFIER_assume(emg_15_size_cnt <= 2147479552UL);
      #line 2708 
      emg_15_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2708 
      emg_15_emg_param_1_4 = emg_15_emg_param_1_4;
      #line 2709 
      emg_15_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2709 
      emg_15_emg_param_3_5 = emg_15_emg_param_3_5;
      #line 2713 
      if (emg_15_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2714 
        (*(emg_15_container->write))(emg_15_resource_0,emg_15_emg_param_1_4,emg_15_size_cnt,emg_15_emg_param_3_5);
      #line 2719 
      ldv_free((void *)emg_15_emg_param_1_4);
      #line 2720 
      ldv_free((void *)emg_15_emg_param_3_5);
      #line 2722 
      break;
      #line 2724 
      default: 
               #line 2724 
      ;
      #line 2724 
      __VERIFIER_assume(0);
    }
    #line 2727 
    if (emg_repeat_cnt_call_15 > 0) {
      #line 2728 
      emg_repeat_cnt_call_15 --;
      #line 2730 
      goto emg_call_15;
    }
    else 
         #line 2732 
         __VERIFIER_assume(0);
  }
  else {
    #line 2738 
    if (emg_15_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2739 
      (*(emg_15_container->release))(emg_15_resource_1,emg_15_resource_0);
    #line 2743 
    if (emg_repeat_cnt_main_15_0 > 0) {
      #line 2744 
      emg_repeat_cnt_main_15_0 --;
      #line 2746 
      goto emg_main_15;
    }
    else 
         #line 2748 
         __VERIFIER_assume(0);
  }
  #line 2754 
  return (void *)0;
  #line 2757 
  emg_main_15: 
               #line 2757 
  ;
  #line 2758 
  if (ldv_undef_int() != 0) {
    #line 2760 
    emg_15_ret = simple_open(emg_15_resource_1,emg_15_resource_0);
    #line 2765 
    emg_15_ret = ldv_filter_err_code(emg_15_ret);
    #line 2768 
    if (ldv_undef_int() != 0) {
      #line 2770 
      __VERIFIER_assume(emg_15_ret == 0);
      #line 2774 
      goto emg_call_15;
    }
    else {
      #line 2779 
      __VERIFIER_assume(emg_15_ret != 0);
      #line 2782 
      if (emg_repeat_cnt_main_15_1 > 0) {
        #line 2783 
        emg_repeat_cnt_main_15_1 --;
        #line 2785 
        goto emg_main_15;
      }
      else 
           #line 2787 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2794 
       ldv_free((void *)emg_15_resource_0);
  #line 2802 
  return (void *)0;
}

#line 2807  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_event_calibration_ops(void *arg0)
{
  #line 2810 
  struct file_operations *emg_16_container;
  #line 2811 
  long long emg_16_emg_param_1_0;
  #line 2812 
  char *emg_16_emg_param_1_2;
  #line 2813 
  char *emg_16_emg_param_1_4;
  #line 2814 
  int emg_16_emg_param_2_1;
  #line 2815 
  long long *emg_16_emg_param_3_3;
  #line 2816 
  long long *emg_16_emg_param_3_5;
  #line 2817 
  struct file *emg_16_resource_0;
  #line 2818 
  struct inode *emg_16_resource_1;
  #line 2819 
  int emg_16_ret;
  #line 2820 
  unsigned long emg_16_size_cnt;
  #line 2821 
  int emg_repeat_cnt_main_16_0 = 1;
  #line 2822 
  int emg_repeat_cnt_call_16 = 1;
  #line 2823 
  int emg_repeat_cnt_main_16_1 = 1;
  #line 2825 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 2829 
  emg_16_ret = ldv_undef_int();
  #line 2830 
  emg_16_container = emg_alias_event_calibration_ops;
  #line 2831 
  emg_16_ret = ldv_undef_int();
  #line 2833 
  __VERIFIER_assume(data->arg0 == emg_alias_event_calibration_ops);
  #line 2835 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 2836 
    emg_16_container = data->arg0;
    #line 2837 
    ldv_free((void *)data);
  }
  #line 2842 
  emg_16_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2843 
  emg_16_size_cnt = (unsigned long)ldv_undef_int();
  #line 2847 
  goto emg_main_16;
  #line 2851 
  return (void *)0;
  #line 2854 
  emg_call_16: 
               #line 2854 
  ;
  #line 2855 
  if (ldv_undef_int() != 0) {
    #line 2856 
    switch (ldv_undef_int()) {
      #line 2857 
      case 0: 
              #line 2857 
      ;
      #line 2859 
      emg_16_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2859 
      emg_16_emg_param_1_2 = emg_16_emg_param_1_2;
      #line 2860 
      emg_16_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2860 
      emg_16_emg_param_3_3 = emg_16_emg_param_3_3;
      #line 2864 
      emg_wrapper_event_calibration_read(emg_16_resource_0,emg_16_emg_param_1_2,emg_16_size_cnt,emg_16_emg_param_3_3);
      #line 2868 
      ldv_free((void *)emg_16_emg_param_1_2);
      #line 2869 
      ldv_free((void *)emg_16_emg_param_3_3);
      #line 2871 
      break;
      #line 2873 
      case 1: 
              #line 2873 
      ;
      #line 2875 
      generic_file_llseek(emg_16_resource_0,emg_16_emg_param_1_0,emg_16_emg_param_2_1);
      #line 2877 
      break;
      #line 2879 
      case 2: 
              #line 2879 
      ;
      #line 2886 
      __VERIFIER_assume(emg_16_size_cnt <= 2147479552UL);
      #line 2887 
      emg_16_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2887 
      emg_16_emg_param_1_4 = emg_16_emg_param_1_4;
      #line 2888 
      emg_16_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2888 
      emg_16_emg_param_3_5 = emg_16_emg_param_3_5;
      #line 2892 
      if (emg_16_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2893 
        (*(emg_16_container->write))(emg_16_resource_0,emg_16_emg_param_1_4,emg_16_size_cnt,emg_16_emg_param_3_5);
      #line 2898 
      ldv_free((void *)emg_16_emg_param_1_4);
      #line 2899 
      ldv_free((void *)emg_16_emg_param_3_5);
      #line 2901 
      break;
      #line 2903 
      default: 
               #line 2903 
      ;
      #line 2903 
      __VERIFIER_assume(0);
    }
    #line 2906 
    if (emg_repeat_cnt_call_16 > 0) {
      #line 2907 
      emg_repeat_cnt_call_16 --;
      #line 2909 
      goto emg_call_16;
    }
    else 
         #line 2911 
         __VERIFIER_assume(0);
  }
  else {
    #line 2917 
    if (emg_16_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2918 
      (*(emg_16_container->release))(emg_16_resource_1,emg_16_resource_0);
    #line 2922 
    if (emg_repeat_cnt_main_16_0 > 0) {
      #line 2923 
      emg_repeat_cnt_main_16_0 --;
      #line 2925 
      goto emg_main_16;
    }
    else 
         #line 2927 
         __VERIFIER_assume(0);
  }
  #line 2933 
  return (void *)0;
  #line 2936 
  emg_main_16: 
               #line 2936 
  ;
  #line 2937 
  if (ldv_undef_int() != 0) {
    #line 2939 
    emg_16_ret = simple_open(emg_16_resource_1,emg_16_resource_0);
    #line 2944 
    emg_16_ret = ldv_filter_err_code(emg_16_ret);
    #line 2947 
    if (ldv_undef_int() != 0) {
      #line 2949 
      __VERIFIER_assume(emg_16_ret == 0);
      #line 2953 
      goto emg_call_16;
    }
    else {
      #line 2958 
      __VERIFIER_assume(emg_16_ret != 0);
      #line 2961 
      if (emg_repeat_cnt_main_16_1 > 0) {
        #line 2962 
        emg_repeat_cnt_main_16_1 --;
        #line 2964 
        goto emg_main_16;
      }
      else 
           #line 2966 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2973 
       ldv_free((void *)emg_16_resource_0);
  #line 2981 
  return (void *)0;
}

#line 2986  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_event_heart_beat_ops(void *arg0)
{
  #line 2989 
  struct file_operations *emg_17_container;
  #line 2990 
  long long emg_17_emg_param_1_0;
  #line 2991 
  char *emg_17_emg_param_1_2;
  #line 2992 
  char *emg_17_emg_param_1_4;
  #line 2993 
  int emg_17_emg_param_2_1;
  #line 2994 
  long long *emg_17_emg_param_3_3;
  #line 2995 
  long long *emg_17_emg_param_3_5;
  #line 2996 
  struct file *emg_17_resource_0;
  #line 2997 
  struct inode *emg_17_resource_1;
  #line 2998 
  int emg_17_ret;
  #line 2999 
  unsigned long emg_17_size_cnt;
  #line 3000 
  int emg_repeat_cnt_call_17 = 1;
  #line 3001 
  int emg_repeat_cnt_main_17_0 = 1;
  #line 3002 
  int emg_repeat_cnt_main_17_1 = 1;
  #line 3004 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 3008 
  emg_17_ret = ldv_undef_int();
  #line 3009 
  emg_17_container = emg_alias_event_heart_beat_ops;
  #line 3010 
  emg_17_ret = ldv_undef_int();
  #line 3012 
  __VERIFIER_assume(data->arg0 == emg_alias_event_heart_beat_ops);
  #line 3014 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 3015 
    emg_17_container = data->arg0;
    #line 3016 
    ldv_free((void *)data);
  }
  #line 3021 
  emg_17_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3022 
  emg_17_size_cnt = (unsigned long)ldv_undef_int();
  #line 3026 
  goto emg_main_17;
  #line 3030 
  return (void *)0;
  #line 3033 
  emg_call_17: 
               #line 3033 
  ;
  #line 3034 
  if (ldv_undef_int() != 0) {
    #line 3035 
    switch (ldv_undef_int()) {
      #line 3036 
      case 0: 
              #line 3036 
      ;
      #line 3038 
      emg_17_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3038 
      emg_17_emg_param_1_2 = emg_17_emg_param_1_2;
      #line 3039 
      emg_17_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3039 
      emg_17_emg_param_3_3 = emg_17_emg_param_3_3;
      #line 3043 
      emg_wrapper_event_heart_beat_read(emg_17_resource_0,emg_17_emg_param_1_2,emg_17_size_cnt,emg_17_emg_param_3_3);
      #line 3047 
      ldv_free((void *)emg_17_emg_param_1_2);
      #line 3048 
      ldv_free((void *)emg_17_emg_param_3_3);
      #line 3050 
      break;
      #line 3052 
      case 1: 
              #line 3052 
      ;
      #line 3054 
      generic_file_llseek(emg_17_resource_0,emg_17_emg_param_1_0,emg_17_emg_param_2_1);
      #line 3056 
      break;
      #line 3058 
      case 2: 
              #line 3058 
      ;
      #line 3065 
      __VERIFIER_assume(emg_17_size_cnt <= 2147479552UL);
      #line 3066 
      emg_17_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3066 
      emg_17_emg_param_1_4 = emg_17_emg_param_1_4;
      #line 3067 
      emg_17_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3067 
      emg_17_emg_param_3_5 = emg_17_emg_param_3_5;
      #line 3071 
      if (emg_17_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 3072 
        (*(emg_17_container->write))(emg_17_resource_0,emg_17_emg_param_1_4,emg_17_size_cnt,emg_17_emg_param_3_5);
      #line 3077 
      ldv_free((void *)emg_17_emg_param_1_4);
      #line 3078 
      ldv_free((void *)emg_17_emg_param_3_5);
      #line 3080 
      break;
      #line 3082 
      default: 
               #line 3082 
      ;
      #line 3082 
      __VERIFIER_assume(0);
    }
    #line 3085 
    if (emg_repeat_cnt_call_17 > 0) {
      #line 3086 
      emg_repeat_cnt_call_17 --;
      #line 3088 
      goto emg_call_17;
    }
    else 
         #line 3090 
         __VERIFIER_assume(0);
  }
  else {
    #line 3096 
    if (emg_17_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3097 
      (*(emg_17_container->release))(emg_17_resource_1,emg_17_resource_0);
    #line 3101 
    if (emg_repeat_cnt_main_17_0 > 0) {
      #line 3102 
      emg_repeat_cnt_main_17_0 --;
      #line 3104 
      goto emg_main_17;
    }
    else 
         #line 3106 
         __VERIFIER_assume(0);
  }
  #line 3112 
  return (void *)0;
  #line 3115 
  emg_main_17: 
               #line 3115 
  ;
  #line 3116 
  if (ldv_undef_int() != 0) {
    #line 3118 
    emg_17_ret = simple_open(emg_17_resource_1,emg_17_resource_0);
    #line 3123 
    emg_17_ret = ldv_filter_err_code(emg_17_ret);
    #line 3126 
    if (ldv_undef_int() != 0) {
      #line 3128 
      __VERIFIER_assume(emg_17_ret == 0);
      #line 3132 
      goto emg_call_17;
    }
    else {
      #line 3137 
      __VERIFIER_assume(emg_17_ret != 0);
      #line 3140 
      if (emg_repeat_cnt_main_17_1 > 0) {
        #line 3141 
        emg_repeat_cnt_main_17_1 --;
        #line 3143 
        goto emg_main_17;
      }
      else 
           #line 3145 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3152 
       ldv_free((void *)emg_17_resource_0);
  #line 3160 
  return (void *)0;
}

#line 3165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_event_oom_late_ops(void *arg0)
{
  #line 3168 
  struct file_operations *emg_18_container;
  #line 3169 
  long long emg_18_emg_param_1_0;
  #line 3170 
  char *emg_18_emg_param_1_2;
  #line 3171 
  char *emg_18_emg_param_1_4;
  #line 3172 
  int emg_18_emg_param_2_1;
  #line 3173 
  long long *emg_18_emg_param_3_3;
  #line 3174 
  long long *emg_18_emg_param_3_5;
  #line 3175 
  struct file *emg_18_resource_0;
  #line 3176 
  struct inode *emg_18_resource_1;
  #line 3177 
  int emg_18_ret;
  #line 3178 
  unsigned long emg_18_size_cnt;
  #line 3179 
  int emg_repeat_cnt_call_18 = 1;
  #line 3180 
  int emg_repeat_cnt_main_18_1 = 1;
  #line 3181 
  int emg_repeat_cnt_main_18_0 = 1;
  #line 3183 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 3187 
  emg_18_ret = ldv_undef_int();
  #line 3188 
  emg_18_container = emg_alias_event_oom_late_ops;
  #line 3189 
  emg_18_ret = ldv_undef_int();
  #line 3191 
  __VERIFIER_assume(data->arg0 == emg_alias_event_oom_late_ops);
  #line 3193 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 3194 
    emg_18_container = data->arg0;
    #line 3195 
    ldv_free((void *)data);
  }
  #line 3200 
  emg_18_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3201 
  emg_18_size_cnt = (unsigned long)ldv_undef_int();
  #line 3205 
  goto emg_main_18;
  #line 3209 
  return (void *)0;
  #line 3212 
  emg_call_18: 
               #line 3212 
  ;
  #line 3213 
  if (ldv_undef_int() != 0) {
    #line 3214 
    switch (ldv_undef_int()) {
      #line 3215 
      case 0: 
              #line 3215 
      ;
      #line 3217 
      emg_18_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3217 
      emg_18_emg_param_1_2 = emg_18_emg_param_1_2;
      #line 3218 
      emg_18_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3218 
      emg_18_emg_param_3_3 = emg_18_emg_param_3_3;
      #line 3222 
      emg_wrapper_event_oom_late_read(emg_18_resource_0,emg_18_emg_param_1_2,emg_18_size_cnt,emg_18_emg_param_3_3);
      #line 3226 
      ldv_free((void *)emg_18_emg_param_1_2);
      #line 3227 
      ldv_free((void *)emg_18_emg_param_3_3);
      #line 3229 
      break;
      #line 3231 
      case 1: 
              #line 3231 
      ;
      #line 3233 
      generic_file_llseek(emg_18_resource_0,emg_18_emg_param_1_0,emg_18_emg_param_2_1);
      #line 3235 
      break;
      #line 3237 
      case 2: 
              #line 3237 
      ;
      #line 3244 
      __VERIFIER_assume(emg_18_size_cnt <= 2147479552UL);
      #line 3245 
      emg_18_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3245 
      emg_18_emg_param_1_4 = emg_18_emg_param_1_4;
      #line 3246 
      emg_18_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3246 
      emg_18_emg_param_3_5 = emg_18_emg_param_3_5;
      #line 3250 
      if (emg_18_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 3251 
        (*(emg_18_container->write))(emg_18_resource_0,emg_18_emg_param_1_4,emg_18_size_cnt,emg_18_emg_param_3_5);
      #line 3256 
      ldv_free((void *)emg_18_emg_param_1_4);
      #line 3257 
      ldv_free((void *)emg_18_emg_param_3_5);
      #line 3259 
      break;
      #line 3261 
      default: 
               #line 3261 
      ;
      #line 3261 
      __VERIFIER_assume(0);
    }
    #line 3264 
    if (emg_repeat_cnt_call_18 > 0) {
      #line 3265 
      emg_repeat_cnt_call_18 --;
      #line 3267 
      goto emg_call_18;
    }
    else 
         #line 3269 
         __VERIFIER_assume(0);
  }
  else {
    #line 3275 
    if (emg_18_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3276 
      (*(emg_18_container->release))(emg_18_resource_1,emg_18_resource_0);
    #line 3280 
    if (emg_repeat_cnt_main_18_1 > 0) {
      #line 3281 
      emg_repeat_cnt_main_18_1 --;
      #line 3283 
      goto emg_main_18;
    }
    else 
         #line 3285 
         __VERIFIER_assume(0);
  }
  #line 3291 
  return (void *)0;
  #line 3294 
  emg_main_18: 
               #line 3294 
  ;
  #line 3295 
  if (ldv_undef_int() != 0) {
    #line 3297 
    emg_18_ret = simple_open(emg_18_resource_1,emg_18_resource_0);
    #line 3302 
    emg_18_ret = ldv_filter_err_code(emg_18_ret);
    #line 3305 
    if (ldv_undef_int() != 0) {
      #line 3307 
      __VERIFIER_assume(emg_18_ret == 0);
      #line 3311 
      goto emg_call_18;
    }
    else {
      #line 3316 
      __VERIFIER_assume(emg_18_ret != 0);
      #line 3319 
      if (emg_repeat_cnt_main_18_0 > 0) {
        #line 3320 
        emg_repeat_cnt_main_18_0 --;
        #line 3322 
        goto emg_main_18;
      }
      else 
           #line 3324 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3331 
       ldv_free((void *)emg_18_resource_0);
  #line 3339 
  return (void *)0;
}

#line 3344  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_event_phy_transmit_error_ops(void *arg0)
{
  #line 3347 
  struct file_operations *emg_19_container;
  #line 3348 
  long long emg_19_emg_param_1_0;
  #line 3349 
  char *emg_19_emg_param_1_2;
  #line 3350 
  char *emg_19_emg_param_1_4;
  #line 3351 
  int emg_19_emg_param_2_1;
  #line 3352 
  long long *emg_19_emg_param_3_3;
  #line 3353 
  long long *emg_19_emg_param_3_5;
  #line 3354 
  struct file *emg_19_resource_0;
  #line 3355 
  struct inode *emg_19_resource_1;
  #line 3356 
  int emg_19_ret;
  #line 3357 
  unsigned long emg_19_size_cnt;
  #line 3358 
  int emg_repeat_cnt_call_19 = 1;
  #line 3359 
  int emg_repeat_cnt_main_19_0 = 1;
  #line 3360 
  int emg_repeat_cnt_main_19_1 = 1;
  #line 3362 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 3366 
  emg_19_ret = ldv_undef_int();
  #line 3367 
  emg_19_container = emg_alias_event_phy_transmit_error_ops;
  #line 3368 
  emg_19_ret = ldv_undef_int();
  #line 3370 
  __VERIFIER_assume(data->arg0 == emg_alias_event_phy_transmit_error_ops);
  #line 3372 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 3373 
    emg_19_container = data->arg0;
    #line 3374 
    ldv_free((void *)data);
  }
  #line 3379 
  emg_19_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3380 
  emg_19_size_cnt = (unsigned long)ldv_undef_int();
  #line 3384 
  goto emg_main_19;
  #line 3388 
  return (void *)0;
  #line 3391 
  emg_call_19: 
               #line 3391 
  ;
  #line 3392 
  if (ldv_undef_int() != 0) {
    #line 3393 
    switch (ldv_undef_int()) {
      #line 3394 
      case 0: 
              #line 3394 
      ;
      #line 3396 
      emg_19_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3396 
      emg_19_emg_param_1_2 = emg_19_emg_param_1_2;
      #line 3397 
      emg_19_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3397 
      emg_19_emg_param_3_3 = emg_19_emg_param_3_3;
      #line 3401 
      emg_wrapper_event_phy_transmit_error_read(emg_19_resource_0,emg_19_emg_param_1_2,emg_19_size_cnt,emg_19_emg_param_3_3);
      #line 3405 
      ldv_free((void *)emg_19_emg_param_1_2);
      #line 3406 
      ldv_free((void *)emg_19_emg_param_3_3);
      #line 3408 
      break;
      #line 3410 
      case 1: 
              #line 3410 
      ;
      #line 3412 
      generic_file_llseek(emg_19_resource_0,emg_19_emg_param_1_0,emg_19_emg_param_2_1);
      #line 3414 
      break;
      #line 3416 
      case 2: 
              #line 3416 
      ;
      #line 3423 
      __VERIFIER_assume(emg_19_size_cnt <= 2147479552UL);
      #line 3424 
      emg_19_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3424 
      emg_19_emg_param_1_4 = emg_19_emg_param_1_4;
      #line 3425 
      emg_19_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3425 
      emg_19_emg_param_3_5 = emg_19_emg_param_3_5;
      #line 3429 
      if (emg_19_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 3430 
        (*(emg_19_container->write))(emg_19_resource_0,emg_19_emg_param_1_4,emg_19_size_cnt,emg_19_emg_param_3_5);
      #line 3435 
      ldv_free((void *)emg_19_emg_param_1_4);
      #line 3436 
      ldv_free((void *)emg_19_emg_param_3_5);
      #line 3438 
      break;
      #line 3440 
      default: 
               #line 3440 
      ;
      #line 3440 
      __VERIFIER_assume(0);
    }
    #line 3443 
    if (emg_repeat_cnt_call_19 > 0) {
      #line 3444 
      emg_repeat_cnt_call_19 --;
      #line 3446 
      goto emg_call_19;
    }
    else 
         #line 3448 
         __VERIFIER_assume(0);
  }
  else {
    #line 3454 
    if (emg_19_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3455 
      (*(emg_19_container->release))(emg_19_resource_1,emg_19_resource_0);
    #line 3459 
    if (emg_repeat_cnt_main_19_1 > 0) {
      #line 3460 
      emg_repeat_cnt_main_19_1 --;
      #line 3462 
      goto emg_main_19;
    }
    else 
         #line 3464 
         __VERIFIER_assume(0);
  }
  #line 3470 
  return (void *)0;
  #line 3473 
  emg_main_19: 
               #line 3473 
  ;
  #line 3474 
  if (ldv_undef_int() != 0) {
    #line 3476 
    emg_19_ret = simple_open(emg_19_resource_1,emg_19_resource_0);
    #line 3481 
    emg_19_ret = ldv_filter_err_code(emg_19_ret);
    #line 3484 
    if (ldv_undef_int() != 0) {
      #line 3486 
      __VERIFIER_assume(emg_19_ret == 0);
      #line 3490 
      goto emg_call_19;
    }
    else {
      #line 3495 
      __VERIFIER_assume(emg_19_ret != 0);
      #line 3498 
      if (emg_repeat_cnt_main_19_0 > 0) {
        #line 3499 
        emg_repeat_cnt_main_19_0 --;
        #line 3501 
        goto emg_main_19;
      }
      else 
           #line 3503 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3510 
       ldv_free((void *)emg_19_resource_0);
  #line 3518 
  return (void *)0;
}

#line 3523  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_event_rx_mem_empty_ops(void *arg0)
{
  #line 3526 
  struct file_operations *emg_20_container;
  #line 3527 
  long long emg_20_emg_param_1_0;
  #line 3528 
  char *emg_20_emg_param_1_2;
  #line 3529 
  char *emg_20_emg_param_1_4;
  #line 3530 
  int emg_20_emg_param_2_1;
  #line 3531 
  long long *emg_20_emg_param_3_3;
  #line 3532 
  long long *emg_20_emg_param_3_5;
  #line 3533 
  struct file *emg_20_resource_0;
  #line 3534 
  struct inode *emg_20_resource_1;
  #line 3535 
  int emg_20_ret;
  #line 3536 
  unsigned long emg_20_size_cnt;
  #line 3537 
  int emg_repeat_cnt_main_20_0 = 1;
  #line 3538 
  int emg_repeat_cnt_call_20 = 1;
  #line 3539 
  int emg_repeat_cnt_main_20_1 = 1;
  #line 3541 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 3545 
  emg_20_ret = ldv_undef_int();
  #line 3546 
  emg_20_container = emg_alias_event_rx_mem_empty_ops;
  #line 3547 
  emg_20_ret = ldv_undef_int();
  #line 3549 
  __VERIFIER_assume(data->arg0 == emg_alias_event_rx_mem_empty_ops);
  #line 3551 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 3552 
    emg_20_container = data->arg0;
    #line 3553 
    ldv_free((void *)data);
  }
  #line 3558 
  emg_20_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3559 
  emg_20_size_cnt = (unsigned long)ldv_undef_int();
  #line 3563 
  goto emg_main_20;
  #line 3567 
  return (void *)0;
  #line 3570 
  emg_call_20: 
               #line 3570 
  ;
  #line 3571 
  if (ldv_undef_int() != 0) {
    #line 3572 
    switch (ldv_undef_int()) {
      #line 3573 
      case 0: 
              #line 3573 
      ;
      #line 3575 
      emg_20_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3575 
      emg_20_emg_param_1_2 = emg_20_emg_param_1_2;
      #line 3576 
      emg_20_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3576 
      emg_20_emg_param_3_3 = emg_20_emg_param_3_3;
      #line 3580 
      emg_wrapper_event_rx_mem_empty_read(emg_20_resource_0,emg_20_emg_param_1_2,emg_20_size_cnt,emg_20_emg_param_3_3);
      #line 3584 
      ldv_free((void *)emg_20_emg_param_1_2);
      #line 3585 
      ldv_free((void *)emg_20_emg_param_3_3);
      #line 3587 
      break;
      #line 3589 
      case 1: 
              #line 3589 
      ;
      #line 3591 
      generic_file_llseek(emg_20_resource_0,emg_20_emg_param_1_0,emg_20_emg_param_2_1);
      #line 3593 
      break;
      #line 3595 
      case 2: 
              #line 3595 
      ;
      #line 3602 
      __VERIFIER_assume(emg_20_size_cnt <= 2147479552UL);
      #line 3603 
      emg_20_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3603 
      emg_20_emg_param_1_4 = emg_20_emg_param_1_4;
      #line 3604 
      emg_20_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3604 
      emg_20_emg_param_3_5 = emg_20_emg_param_3_5;
      #line 3608 
      if (emg_20_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 3609 
        (*(emg_20_container->write))(emg_20_resource_0,emg_20_emg_param_1_4,emg_20_size_cnt,emg_20_emg_param_3_5);
      #line 3614 
      ldv_free((void *)emg_20_emg_param_1_4);
      #line 3615 
      ldv_free((void *)emg_20_emg_param_3_5);
      #line 3617 
      break;
      #line 3619 
      default: 
               #line 3619 
      ;
      #line 3619 
      __VERIFIER_assume(0);
    }
    #line 3622 
    if (emg_repeat_cnt_call_20 > 0) {
      #line 3623 
      emg_repeat_cnt_call_20 --;
      #line 3625 
      goto emg_call_20;
    }
    else 
         #line 3627 
         __VERIFIER_assume(0);
  }
  else {
    #line 3633 
    if (emg_20_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3634 
      (*(emg_20_container->release))(emg_20_resource_1,emg_20_resource_0);
    #line 3638 
    if (emg_repeat_cnt_main_20_0 > 0) {
      #line 3639 
      emg_repeat_cnt_main_20_0 --;
      #line 3641 
      goto emg_main_20;
    }
    else 
         #line 3643 
         __VERIFIER_assume(0);
  }
  #line 3649 
  return (void *)0;
  #line 3652 
  emg_main_20: 
               #line 3652 
  ;
  #line 3653 
  if (ldv_undef_int() != 0) {
    #line 3655 
    emg_20_ret = simple_open(emg_20_resource_1,emg_20_resource_0);
    #line 3660 
    emg_20_ret = ldv_filter_err_code(emg_20_ret);
    #line 3663 
    if (ldv_undef_int() != 0) {
      #line 3665 
      __VERIFIER_assume(emg_20_ret == 0);
      #line 3669 
      goto emg_call_20;
    }
    else {
      #line 3674 
      __VERIFIER_assume(emg_20_ret != 0);
      #line 3677 
      if (emg_repeat_cnt_main_20_1 > 0) {
        #line 3678 
        emg_repeat_cnt_main_20_1 --;
        #line 3680 
        goto emg_main_20;
      }
      else 
           #line 3682 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3689 
       ldv_free((void *)emg_20_resource_0);
  #line 3697 
  return (void *)0;
}

#line 3702  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_event_rx_mismatch_ops(void *arg0)
{
  #line 3705 
  struct file_operations *emg_21_container;
  #line 3706 
  long long emg_21_emg_param_1_0;
  #line 3707 
  char *emg_21_emg_param_1_2;
  #line 3708 
  char *emg_21_emg_param_1_4;
  #line 3709 
  int emg_21_emg_param_2_1;
  #line 3710 
  long long *emg_21_emg_param_3_3;
  #line 3711 
  long long *emg_21_emg_param_3_5;
  #line 3712 
  struct file *emg_21_resource_0;
  #line 3713 
  struct inode *emg_21_resource_1;
  #line 3714 
  int emg_21_ret;
  #line 3715 
  unsigned long emg_21_size_cnt;
  #line 3716 
  int emg_repeat_cnt_main_21_0 = 1;
  #line 3717 
  int emg_repeat_cnt_call_21 = 1;
  #line 3718 
  int emg_repeat_cnt_main_21_1 = 1;
  #line 3720 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 3724 
  emg_21_ret = ldv_undef_int();
  #line 3725 
  emg_21_container = emg_alias_event_rx_mismatch_ops;
  #line 3726 
  emg_21_ret = ldv_undef_int();
  #line 3728 
  __VERIFIER_assume(data->arg0 == emg_alias_event_rx_mismatch_ops);
  #line 3730 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 3731 
    emg_21_container = data->arg0;
    #line 3732 
    ldv_free((void *)data);
  }
  #line 3737 
  emg_21_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3738 
  emg_21_size_cnt = (unsigned long)ldv_undef_int();
  #line 3742 
  goto emg_main_21;
  #line 3746 
  return (void *)0;
  #line 3749 
  emg_call_21: 
               #line 3749 
  ;
  #line 3750 
  if (ldv_undef_int() != 0) {
    #line 3751 
    switch (ldv_undef_int()) {
      #line 3752 
      case 0: 
              #line 3752 
      ;
      #line 3754 
      emg_21_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3754 
      emg_21_emg_param_1_2 = emg_21_emg_param_1_2;
      #line 3755 
      emg_21_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3755 
      emg_21_emg_param_3_3 = emg_21_emg_param_3_3;
      #line 3759 
      emg_wrapper_event_rx_mismatch_read(emg_21_resource_0,emg_21_emg_param_1_2,emg_21_size_cnt,emg_21_emg_param_3_3);
      #line 3763 
      ldv_free((void *)emg_21_emg_param_1_2);
      #line 3764 
      ldv_free((void *)emg_21_emg_param_3_3);
      #line 3766 
      break;
      #line 3768 
      case 1: 
              #line 3768 
      ;
      #line 3770 
      generic_file_llseek(emg_21_resource_0,emg_21_emg_param_1_0,emg_21_emg_param_2_1);
      #line 3772 
      break;
      #line 3774 
      case 2: 
              #line 3774 
      ;
      #line 3781 
      __VERIFIER_assume(emg_21_size_cnt <= 2147479552UL);
      #line 3782 
      emg_21_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3782 
      emg_21_emg_param_1_4 = emg_21_emg_param_1_4;
      #line 3783 
      emg_21_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3783 
      emg_21_emg_param_3_5 = emg_21_emg_param_3_5;
      #line 3787 
      if (emg_21_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 3788 
        (*(emg_21_container->write))(emg_21_resource_0,emg_21_emg_param_1_4,emg_21_size_cnt,emg_21_emg_param_3_5);
      #line 3793 
      ldv_free((void *)emg_21_emg_param_1_4);
      #line 3794 
      ldv_free((void *)emg_21_emg_param_3_5);
      #line 3796 
      break;
      #line 3798 
      default: 
               #line 3798 
      ;
      #line 3798 
      __VERIFIER_assume(0);
    }
    #line 3801 
    if (emg_repeat_cnt_call_21 > 0) {
      #line 3802 
      emg_repeat_cnt_call_21 --;
      #line 3804 
      goto emg_call_21;
    }
    else 
         #line 3806 
         __VERIFIER_assume(0);
  }
  else {
    #line 3812 
    if (emg_21_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3813 
      (*(emg_21_container->release))(emg_21_resource_1,emg_21_resource_0);
    #line 3817 
    if (emg_repeat_cnt_main_21_0 > 0) {
      #line 3818 
      emg_repeat_cnt_main_21_0 --;
      #line 3820 
      goto emg_main_21;
    }
    else 
         #line 3822 
         __VERIFIER_assume(0);
  }
  #line 3828 
  return (void *)0;
  #line 3831 
  emg_main_21: 
               #line 3831 
  ;
  #line 3832 
  if (ldv_undef_int() != 0) {
    #line 3834 
    emg_21_ret = simple_open(emg_21_resource_1,emg_21_resource_0);
    #line 3839 
    emg_21_ret = ldv_filter_err_code(emg_21_ret);
    #line 3842 
    if (ldv_undef_int() != 0) {
      #line 3844 
      __VERIFIER_assume(emg_21_ret == 0);
      #line 3848 
      goto emg_call_21;
    }
    else {
      #line 3853 
      __VERIFIER_assume(emg_21_ret != 0);
      #line 3856 
      if (emg_repeat_cnt_main_21_1 > 0) {
        #line 3857 
        emg_repeat_cnt_main_21_1 --;
        #line 3859 
        goto emg_main_21;
      }
      else 
           #line 3861 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3868 
       ldv_free((void *)emg_21_resource_0);
  #line 3876 
  return (void *)0;
}

#line 3881  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_event_rx_pool_ops(void *arg0)
{
  #line 3884 
  struct file_operations *emg_22_container;
  #line 3885 
  long long emg_22_emg_param_1_0;
  #line 3886 
  char *emg_22_emg_param_1_2;
  #line 3887 
  char *emg_22_emg_param_1_4;
  #line 3888 
  int emg_22_emg_param_2_1;
  #line 3889 
  long long *emg_22_emg_param_3_3;
  #line 3890 
  long long *emg_22_emg_param_3_5;
  #line 3891 
  struct file *emg_22_resource_0;
  #line 3892 
  struct inode *emg_22_resource_1;
  #line 3893 
  int emg_22_ret;
  #line 3894 
  unsigned long emg_22_size_cnt;
  #line 3895 
  int emg_repeat_cnt_main_22_1 = 1;
  #line 3896 
  int emg_repeat_cnt_call_22 = 1;
  #line 3897 
  int emg_repeat_cnt_main_22_0 = 1;
  #line 3899 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 3903 
  emg_22_ret = ldv_undef_int();
  #line 3904 
  emg_22_container = emg_alias_event_rx_pool_ops;
  #line 3905 
  emg_22_ret = ldv_undef_int();
  #line 3907 
  __VERIFIER_assume(data->arg0 == emg_alias_event_rx_pool_ops);
  #line 3909 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 3910 
    emg_22_container = data->arg0;
    #line 3911 
    ldv_free((void *)data);
  }
  #line 3916 
  emg_22_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3917 
  emg_22_size_cnt = (unsigned long)ldv_undef_int();
  #line 3921 
  goto emg_main_22;
  #line 3925 
  return (void *)0;
  #line 3928 
  emg_call_22: 
               #line 3928 
  ;
  #line 3929 
  if (ldv_undef_int() != 0) {
    #line 3930 
    switch (ldv_undef_int()) {
      #line 3931 
      case 0: 
              #line 3931 
      ;
      #line 3933 
      emg_22_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3933 
      emg_22_emg_param_1_2 = emg_22_emg_param_1_2;
      #line 3934 
      emg_22_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3934 
      emg_22_emg_param_3_3 = emg_22_emg_param_3_3;
      #line 3938 
      emg_wrapper_event_rx_pool_read(emg_22_resource_0,emg_22_emg_param_1_2,emg_22_size_cnt,emg_22_emg_param_3_3);
      #line 3942 
      ldv_free((void *)emg_22_emg_param_1_2);
      #line 3943 
      ldv_free((void *)emg_22_emg_param_3_3);
      #line 3945 
      break;
      #line 3947 
      case 1: 
              #line 3947 
      ;
      #line 3949 
      generic_file_llseek(emg_22_resource_0,emg_22_emg_param_1_0,emg_22_emg_param_2_1);
      #line 3951 
      break;
      #line 3953 
      case 2: 
              #line 3953 
      ;
      #line 3960 
      __VERIFIER_assume(emg_22_size_cnt <= 2147479552UL);
      #line 3961 
      emg_22_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3961 
      emg_22_emg_param_1_4 = emg_22_emg_param_1_4;
      #line 3962 
      emg_22_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3962 
      emg_22_emg_param_3_5 = emg_22_emg_param_3_5;
      #line 3966 
      if (emg_22_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 3967 
        (*(emg_22_container->write))(emg_22_resource_0,emg_22_emg_param_1_4,emg_22_size_cnt,emg_22_emg_param_3_5);
      #line 3972 
      ldv_free((void *)emg_22_emg_param_1_4);
      #line 3973 
      ldv_free((void *)emg_22_emg_param_3_5);
      #line 3975 
      break;
      #line 3977 
      default: 
               #line 3977 
      ;
      #line 3977 
      __VERIFIER_assume(0);
    }
    #line 3980 
    if (emg_repeat_cnt_call_22 > 0) {
      #line 3981 
      emg_repeat_cnt_call_22 --;
      #line 3983 
      goto emg_call_22;
    }
    else 
         #line 3985 
         __VERIFIER_assume(0);
  }
  else {
    #line 3991 
    if (emg_22_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3992 
      (*(emg_22_container->release))(emg_22_resource_1,emg_22_resource_0);
    #line 3996 
    if (emg_repeat_cnt_main_22_0 > 0) {
      #line 3997 
      emg_repeat_cnt_main_22_0 --;
      #line 3999 
      goto emg_main_22;
    }
    else 
         #line 4001 
         __VERIFIER_assume(0);
  }
  #line 4007 
  return (void *)0;
  #line 4010 
  emg_main_22: 
               #line 4010 
  ;
  #line 4011 
  if (ldv_undef_int() != 0) {
    #line 4013 
    emg_22_ret = simple_open(emg_22_resource_1,emg_22_resource_0);
    #line 4018 
    emg_22_ret = ldv_filter_err_code(emg_22_ret);
    #line 4021 
    if (ldv_undef_int() != 0) {
      #line 4023 
      __VERIFIER_assume(emg_22_ret == 0);
      #line 4027 
      goto emg_call_22;
    }
    else {
      #line 4032 
      __VERIFIER_assume(emg_22_ret != 0);
      #line 4035 
      if (emg_repeat_cnt_main_22_1 > 0) {
        #line 4036 
        emg_repeat_cnt_main_22_1 --;
        #line 4038 
        goto emg_main_22;
      }
      else 
           #line 4040 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 4047 
       ldv_free((void *)emg_22_resource_0);
  #line 4055 
  return (void *)0;
}

#line 4060  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_event_tx_stuck_ops(void *arg0)
{
  #line 4063 
  struct file_operations *emg_23_container;
  #line 4064 
  long long emg_23_emg_param_1_0;
  #line 4065 
  char *emg_23_emg_param_1_2;
  #line 4066 
  char *emg_23_emg_param_1_4;
  #line 4067 
  int emg_23_emg_param_2_1;
  #line 4068 
  long long *emg_23_emg_param_3_3;
  #line 4069 
  long long *emg_23_emg_param_3_5;
  #line 4070 
  struct file *emg_23_resource_0;
  #line 4071 
  struct inode *emg_23_resource_1;
  #line 4072 
  int emg_23_ret;
  #line 4073 
  unsigned long emg_23_size_cnt;
  #line 4074 
  int emg_repeat_cnt_main_23_0 = 1;
  #line 4075 
  int emg_repeat_cnt_call_23 = 1;
  #line 4076 
  int emg_repeat_cnt_main_23_1 = 1;
  #line 4078 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 4082 
  emg_23_ret = ldv_undef_int();
  #line 4083 
  emg_23_container = emg_alias_event_tx_stuck_ops;
  #line 4084 
  emg_23_ret = ldv_undef_int();
  #line 4086 
  __VERIFIER_assume(data->arg0 == emg_alias_event_tx_stuck_ops);
  #line 4088 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 4089 
    emg_23_container = data->arg0;
    #line 4090 
    ldv_free((void *)data);
  }
  #line 4095 
  emg_23_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 4096 
  emg_23_size_cnt = (unsigned long)ldv_undef_int();
  #line 4100 
  goto emg_main_23;
  #line 4104 
  return (void *)0;
  #line 4107 
  emg_call_23: 
               #line 4107 
  ;
  #line 4108 
  if (ldv_undef_int() != 0) {
    #line 4109 
    switch (ldv_undef_int()) {
      #line 4110 
      case 0: 
              #line 4110 
      ;
      #line 4112 
      emg_23_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4112 
      emg_23_emg_param_1_2 = emg_23_emg_param_1_2;
      #line 4113 
      emg_23_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4113 
      emg_23_emg_param_3_3 = emg_23_emg_param_3_3;
      #line 4117 
      emg_wrapper_event_tx_stuck_read(emg_23_resource_0,emg_23_emg_param_1_2,emg_23_size_cnt,emg_23_emg_param_3_3);
      #line 4121 
      ldv_free((void *)emg_23_emg_param_1_2);
      #line 4122 
      ldv_free((void *)emg_23_emg_param_3_3);
      #line 4124 
      break;
      #line 4126 
      case 1: 
              #line 4126 
      ;
      #line 4128 
      generic_file_llseek(emg_23_resource_0,emg_23_emg_param_1_0,emg_23_emg_param_2_1);
      #line 4130 
      break;
      #line 4132 
      case 2: 
              #line 4132 
      ;
      #line 4139 
      __VERIFIER_assume(emg_23_size_cnt <= 2147479552UL);
      #line 4140 
      emg_23_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4140 
      emg_23_emg_param_1_4 = emg_23_emg_param_1_4;
      #line 4141 
      emg_23_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4141 
      emg_23_emg_param_3_5 = emg_23_emg_param_3_5;
      #line 4145 
      if (emg_23_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 4146 
        (*(emg_23_container->write))(emg_23_resource_0,emg_23_emg_param_1_4,emg_23_size_cnt,emg_23_emg_param_3_5);
      #line 4151 
      ldv_free((void *)emg_23_emg_param_1_4);
      #line 4152 
      ldv_free((void *)emg_23_emg_param_3_5);
      #line 4154 
      break;
      #line 4156 
      default: 
               #line 4156 
      ;
      #line 4156 
      __VERIFIER_assume(0);
    }
    #line 4159 
    if (emg_repeat_cnt_call_23 > 0) {
      #line 4160 
      emg_repeat_cnt_call_23 --;
      #line 4162 
      goto emg_call_23;
    }
    else 
         #line 4164 
         __VERIFIER_assume(0);
  }
  else {
    #line 4170 
    if (emg_23_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 4171 
      (*(emg_23_container->release))(emg_23_resource_1,emg_23_resource_0);
    #line 4175 
    if (emg_repeat_cnt_main_23_0 > 0) {
      #line 4176 
      emg_repeat_cnt_main_23_0 --;
      #line 4178 
      goto emg_main_23;
    }
    else 
         #line 4180 
         __VERIFIER_assume(0);
  }
  #line 4186 
  return (void *)0;
  #line 4189 
  emg_main_23: 
               #line 4189 
  ;
  #line 4190 
  if (ldv_undef_int() != 0) {
    #line 4192 
    emg_23_ret = simple_open(emg_23_resource_1,emg_23_resource_0);
    #line 4197 
    emg_23_ret = ldv_filter_err_code(emg_23_ret);
    #line 4200 
    if (ldv_undef_int() != 0) {
      #line 4202 
      __VERIFIER_assume(emg_23_ret == 0);
      #line 4206 
      goto emg_call_23;
    }
    else {
      #line 4211 
      __VERIFIER_assume(emg_23_ret != 0);
      #line 4214 
      if (emg_repeat_cnt_main_23_1 > 0) {
        #line 4215 
        emg_repeat_cnt_main_23_1 --;
        #line 4217 
        goto emg_main_23;
      }
      else 
           #line 4219 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 4226 
       ldv_free((void *)emg_23_resource_0);
  #line 4234 
  return (void *)0;
}

#line 4239  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_cmd_cmplt_ops(void *arg0)
{
  #line 4242 
  struct file_operations *emg_24_container;
  #line 4243 
  long long emg_24_emg_param_1_0;
  #line 4244 
  char *emg_24_emg_param_1_2;
  #line 4245 
  char *emg_24_emg_param_1_4;
  #line 4246 
  int emg_24_emg_param_2_1;
  #line 4247 
  long long *emg_24_emg_param_3_3;
  #line 4248 
  long long *emg_24_emg_param_3_5;
  #line 4249 
  struct file *emg_24_resource_0;
  #line 4250 
  struct inode *emg_24_resource_1;
  #line 4251 
  int emg_24_ret;
  #line 4252 
  unsigned long emg_24_size_cnt;
  #line 4253 
  int emg_repeat_cnt_main_24_0 = 1;
  #line 4254 
  int emg_repeat_cnt_main_24_1 = 1;
  #line 4255 
  int emg_repeat_cnt_call_24 = 1;
  #line 4257 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 4261 
  emg_24_ret = ldv_undef_int();
  #line 4262 
  emg_24_container = emg_alias_isr_cmd_cmplt_ops;
  #line 4263 
  emg_24_ret = ldv_undef_int();
  #line 4265 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_cmd_cmplt_ops);
  #line 4267 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 4268 
    emg_24_container = data->arg0;
    #line 4269 
    ldv_free((void *)data);
  }
  #line 4274 
  emg_24_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 4275 
  emg_24_size_cnt = (unsigned long)ldv_undef_int();
  #line 4279 
  goto emg_main_24;
  #line 4283 
  return (void *)0;
  #line 4286 
  emg_call_24: 
               #line 4286 
  ;
  #line 4287 
  if (ldv_undef_int() != 0) {
    #line 4288 
    switch (ldv_undef_int()) {
      #line 4289 
      case 0: 
              #line 4289 
      ;
      #line 4291 
      emg_24_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4291 
      emg_24_emg_param_1_2 = emg_24_emg_param_1_2;
      #line 4292 
      emg_24_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4292 
      emg_24_emg_param_3_3 = emg_24_emg_param_3_3;
      #line 4296 
      emg_wrapper_isr_cmd_cmplt_read(emg_24_resource_0,emg_24_emg_param_1_2,emg_24_size_cnt,emg_24_emg_param_3_3);
      #line 4300 
      ldv_free((void *)emg_24_emg_param_1_2);
      #line 4301 
      ldv_free((void *)emg_24_emg_param_3_3);
      #line 4303 
      break;
      #line 4305 
      case 1: 
              #line 4305 
      ;
      #line 4307 
      generic_file_llseek(emg_24_resource_0,emg_24_emg_param_1_0,emg_24_emg_param_2_1);
      #line 4309 
      break;
      #line 4311 
      case 2: 
              #line 4311 
      ;
      #line 4318 
      __VERIFIER_assume(emg_24_size_cnt <= 2147479552UL);
      #line 4319 
      emg_24_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4319 
      emg_24_emg_param_1_4 = emg_24_emg_param_1_4;
      #line 4320 
      emg_24_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4320 
      emg_24_emg_param_3_5 = emg_24_emg_param_3_5;
      #line 4324 
      if (emg_24_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 4325 
        (*(emg_24_container->write))(emg_24_resource_0,emg_24_emg_param_1_4,emg_24_size_cnt,emg_24_emg_param_3_5);
      #line 4330 
      ldv_free((void *)emg_24_emg_param_1_4);
      #line 4331 
      ldv_free((void *)emg_24_emg_param_3_5);
      #line 4333 
      break;
      #line 4335 
      default: 
               #line 4335 
      ;
      #line 4335 
      __VERIFIER_assume(0);
    }
    #line 4338 
    if (emg_repeat_cnt_call_24 > 0) {
      #line 4339 
      emg_repeat_cnt_call_24 --;
      #line 4341 
      goto emg_call_24;
    }
    else 
         #line 4343 
         __VERIFIER_assume(0);
  }
  else {
    #line 4349 
    if (emg_24_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 4350 
      (*(emg_24_container->release))(emg_24_resource_1,emg_24_resource_0);
    #line 4354 
    if (emg_repeat_cnt_main_24_0 > 0) {
      #line 4355 
      emg_repeat_cnt_main_24_0 --;
      #line 4357 
      goto emg_main_24;
    }
    else 
         #line 4359 
         __VERIFIER_assume(0);
  }
  #line 4365 
  return (void *)0;
  #line 4368 
  emg_main_24: 
               #line 4368 
  ;
  #line 4369 
  if (ldv_undef_int() != 0) {
    #line 4371 
    emg_24_ret = simple_open(emg_24_resource_1,emg_24_resource_0);
    #line 4376 
    emg_24_ret = ldv_filter_err_code(emg_24_ret);
    #line 4379 
    if (ldv_undef_int() != 0) {
      #line 4381 
      __VERIFIER_assume(emg_24_ret == 0);
      #line 4385 
      goto emg_call_24;
    }
    else {
      #line 4390 
      __VERIFIER_assume(emg_24_ret != 0);
      #line 4393 
      if (emg_repeat_cnt_main_24_1 > 0) {
        #line 4394 
        emg_repeat_cnt_main_24_1 --;
        #line 4396 
        goto emg_main_24;
      }
      else 
           #line 4398 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 4405 
       ldv_free((void *)emg_24_resource_0);
  #line 4413 
  return (void *)0;
}

#line 4418  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_commands_ops(void *arg0)
{
  #line 4421 
  struct file_operations *emg_25_container;
  #line 4422 
  long long emg_25_emg_param_1_0;
  #line 4423 
  char *emg_25_emg_param_1_2;
  #line 4424 
  char *emg_25_emg_param_1_4;
  #line 4425 
  int emg_25_emg_param_2_1;
  #line 4426 
  long long *emg_25_emg_param_3_3;
  #line 4427 
  long long *emg_25_emg_param_3_5;
  #line 4428 
  struct file *emg_25_resource_0;
  #line 4429 
  struct inode *emg_25_resource_1;
  #line 4430 
  int emg_25_ret;
  #line 4431 
  unsigned long emg_25_size_cnt;
  #line 4432 
  int emg_repeat_cnt_main_25_0 = 1;
  #line 4433 
  int emg_repeat_cnt_call_25 = 1;
  #line 4434 
  int emg_repeat_cnt_main_25_1 = 1;
  #line 4436 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 4440 
  emg_25_ret = ldv_undef_int();
  #line 4441 
  emg_25_container = emg_alias_isr_commands_ops;
  #line 4442 
  emg_25_ret = ldv_undef_int();
  #line 4444 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_commands_ops);
  #line 4446 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 4447 
    emg_25_container = data->arg0;
    #line 4448 
    ldv_free((void *)data);
  }
  #line 4453 
  emg_25_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 4454 
  emg_25_size_cnt = (unsigned long)ldv_undef_int();
  #line 4458 
  goto emg_main_25;
  #line 4462 
  return (void *)0;
  #line 4465 
  emg_call_25: 
               #line 4465 
  ;
  #line 4466 
  if (ldv_undef_int() != 0) {
    #line 4467 
    switch (ldv_undef_int()) {
      #line 4468 
      case 0: 
              #line 4468 
      ;
      #line 4470 
      emg_25_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4470 
      emg_25_emg_param_1_2 = emg_25_emg_param_1_2;
      #line 4471 
      emg_25_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4471 
      emg_25_emg_param_3_3 = emg_25_emg_param_3_3;
      #line 4475 
      emg_wrapper_isr_commands_read(emg_25_resource_0,emg_25_emg_param_1_2,emg_25_size_cnt,emg_25_emg_param_3_3);
      #line 4479 
      ldv_free((void *)emg_25_emg_param_1_2);
      #line 4480 
      ldv_free((void *)emg_25_emg_param_3_3);
      #line 4482 
      break;
      #line 4484 
      case 1: 
              #line 4484 
      ;
      #line 4486 
      generic_file_llseek(emg_25_resource_0,emg_25_emg_param_1_0,emg_25_emg_param_2_1);
      #line 4488 
      break;
      #line 4490 
      case 2: 
              #line 4490 
      ;
      #line 4497 
      __VERIFIER_assume(emg_25_size_cnt <= 2147479552UL);
      #line 4498 
      emg_25_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4498 
      emg_25_emg_param_1_4 = emg_25_emg_param_1_4;
      #line 4499 
      emg_25_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4499 
      emg_25_emg_param_3_5 = emg_25_emg_param_3_5;
      #line 4503 
      if (emg_25_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 4504 
        (*(emg_25_container->write))(emg_25_resource_0,emg_25_emg_param_1_4,emg_25_size_cnt,emg_25_emg_param_3_5);
      #line 4509 
      ldv_free((void *)emg_25_emg_param_1_4);
      #line 4510 
      ldv_free((void *)emg_25_emg_param_3_5);
      #line 4512 
      break;
      #line 4514 
      default: 
               #line 4514 
      ;
      #line 4514 
      __VERIFIER_assume(0);
    }
    #line 4517 
    if (emg_repeat_cnt_call_25 > 0) {
      #line 4518 
      emg_repeat_cnt_call_25 --;
      #line 4520 
      goto emg_call_25;
    }
    else 
         #line 4522 
         __VERIFIER_assume(0);
  }
  else {
    #line 4528 
    if (emg_25_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 4529 
      (*(emg_25_container->release))(emg_25_resource_1,emg_25_resource_0);
    #line 4533 
    if (emg_repeat_cnt_main_25_0 > 0) {
      #line 4534 
      emg_repeat_cnt_main_25_0 --;
      #line 4536 
      goto emg_main_25;
    }
    else 
         #line 4538 
         __VERIFIER_assume(0);
  }
  #line 4544 
  return (void *)0;
  #line 4547 
  emg_main_25: 
               #line 4547 
  ;
  #line 4548 
  if (ldv_undef_int() != 0) {
    #line 4550 
    emg_25_ret = simple_open(emg_25_resource_1,emg_25_resource_0);
    #line 4555 
    emg_25_ret = ldv_filter_err_code(emg_25_ret);
    #line 4558 
    if (ldv_undef_int() != 0) {
      #line 4560 
      __VERIFIER_assume(emg_25_ret == 0);
      #line 4564 
      goto emg_call_25;
    }
    else {
      #line 4569 
      __VERIFIER_assume(emg_25_ret != 0);
      #line 4572 
      if (emg_repeat_cnt_main_25_1 > 0) {
        #line 4573 
        emg_repeat_cnt_main_25_1 --;
        #line 4575 
        goto emg_main_25;
      }
      else 
           #line 4577 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 4584 
       ldv_free((void *)emg_25_resource_0);
  #line 4592 
  return (void *)0;
}

#line 4597  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_decrypt_done_ops(void *arg0)
{
  #line 4600 
  struct file_operations *emg_26_container;
  #line 4601 
  long long emg_26_emg_param_1_0;
  #line 4602 
  char *emg_26_emg_param_1_2;
  #line 4603 
  char *emg_26_emg_param_1_4;
  #line 4604 
  int emg_26_emg_param_2_1;
  #line 4605 
  long long *emg_26_emg_param_3_3;
  #line 4606 
  long long *emg_26_emg_param_3_5;
  #line 4607 
  struct file *emg_26_resource_0;
  #line 4608 
  struct inode *emg_26_resource_1;
  #line 4609 
  int emg_26_ret;
  #line 4610 
  unsigned long emg_26_size_cnt;
  #line 4611 
  int emg_repeat_cnt_main_26_1 = 1;
  #line 4612 
  int emg_repeat_cnt_main_26_0 = 1;
  #line 4613 
  int emg_repeat_cnt_call_26 = 1;
  #line 4615 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 4619 
  emg_26_ret = ldv_undef_int();
  #line 4620 
  emg_26_container = emg_alias_isr_decrypt_done_ops;
  #line 4621 
  emg_26_ret = ldv_undef_int();
  #line 4623 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_decrypt_done_ops);
  #line 4625 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 4626 
    emg_26_container = data->arg0;
    #line 4627 
    ldv_free((void *)data);
  }
  #line 4632 
  emg_26_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 4633 
  emg_26_size_cnt = (unsigned long)ldv_undef_int();
  #line 4637 
  goto emg_main_26;
  #line 4641 
  return (void *)0;
  #line 4644 
  emg_call_26: 
               #line 4644 
  ;
  #line 4645 
  if (ldv_undef_int() != 0) {
    #line 4646 
    switch (ldv_undef_int()) {
      #line 4647 
      case 0: 
              #line 4647 
      ;
      #line 4649 
      emg_26_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4649 
      emg_26_emg_param_1_2 = emg_26_emg_param_1_2;
      #line 4650 
      emg_26_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4650 
      emg_26_emg_param_3_3 = emg_26_emg_param_3_3;
      #line 4654 
      emg_wrapper_isr_decrypt_done_read(emg_26_resource_0,emg_26_emg_param_1_2,emg_26_size_cnt,emg_26_emg_param_3_3);
      #line 4658 
      ldv_free((void *)emg_26_emg_param_1_2);
      #line 4659 
      ldv_free((void *)emg_26_emg_param_3_3);
      #line 4661 
      break;
      #line 4663 
      case 1: 
              #line 4663 
      ;
      #line 4665 
      generic_file_llseek(emg_26_resource_0,emg_26_emg_param_1_0,emg_26_emg_param_2_1);
      #line 4667 
      break;
      #line 4669 
      case 2: 
              #line 4669 
      ;
      #line 4676 
      __VERIFIER_assume(emg_26_size_cnt <= 2147479552UL);
      #line 4677 
      emg_26_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4677 
      emg_26_emg_param_1_4 = emg_26_emg_param_1_4;
      #line 4678 
      emg_26_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4678 
      emg_26_emg_param_3_5 = emg_26_emg_param_3_5;
      #line 4682 
      if (emg_26_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 4683 
        (*(emg_26_container->write))(emg_26_resource_0,emg_26_emg_param_1_4,emg_26_size_cnt,emg_26_emg_param_3_5);
      #line 4688 
      ldv_free((void *)emg_26_emg_param_1_4);
      #line 4689 
      ldv_free((void *)emg_26_emg_param_3_5);
      #line 4691 
      break;
      #line 4693 
      default: 
               #line 4693 
      ;
      #line 4693 
      __VERIFIER_assume(0);
    }
    #line 4696 
    if (emg_repeat_cnt_call_26 > 0) {
      #line 4697 
      emg_repeat_cnt_call_26 --;
      #line 4699 
      goto emg_call_26;
    }
    else 
         #line 4701 
         __VERIFIER_assume(0);
  }
  else {
    #line 4707 
    if (emg_26_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 4708 
      (*(emg_26_container->release))(emg_26_resource_1,emg_26_resource_0);
    #line 4712 
    if (emg_repeat_cnt_main_26_0 > 0) {
      #line 4713 
      emg_repeat_cnt_main_26_0 --;
      #line 4715 
      goto emg_main_26;
    }
    else 
         #line 4717 
         __VERIFIER_assume(0);
  }
  #line 4723 
  return (void *)0;
  #line 4726 
  emg_main_26: 
               #line 4726 
  ;
  #line 4727 
  if (ldv_undef_int() != 0) {
    #line 4729 
    emg_26_ret = simple_open(emg_26_resource_1,emg_26_resource_0);
    #line 4734 
    emg_26_ret = ldv_filter_err_code(emg_26_ret);
    #line 4737 
    if (ldv_undef_int() != 0) {
      #line 4739 
      __VERIFIER_assume(emg_26_ret == 0);
      #line 4743 
      goto emg_call_26;
    }
    else {
      #line 4748 
      __VERIFIER_assume(emg_26_ret != 0);
      #line 4751 
      if (emg_repeat_cnt_main_26_1 > 0) {
        #line 4752 
        emg_repeat_cnt_main_26_1 --;
        #line 4754 
        goto emg_main_26;
      }
      else 
           #line 4756 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 4763 
       ldv_free((void *)emg_26_resource_0);
  #line 4771 
  return (void *)0;
}

#line 4776  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_dma0_done_ops(void *arg0)
{
  #line 4779 
  struct file_operations *emg_27_container;
  #line 4780 
  long long emg_27_emg_param_1_0;
  #line 4781 
  char *emg_27_emg_param_1_2;
  #line 4782 
  char *emg_27_emg_param_1_4;
  #line 4783 
  int emg_27_emg_param_2_1;
  #line 4784 
  long long *emg_27_emg_param_3_3;
  #line 4785 
  long long *emg_27_emg_param_3_5;
  #line 4786 
  struct file *emg_27_resource_0;
  #line 4787 
  struct inode *emg_27_resource_1;
  #line 4788 
  int emg_27_ret;
  #line 4789 
  unsigned long emg_27_size_cnt;
  #line 4790 
  int emg_repeat_cnt_main_27_1 = 1;
  #line 4791 
  int emg_repeat_cnt_main_27_0 = 1;
  #line 4792 
  int emg_repeat_cnt_call_27 = 1;
  #line 4794 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 4798 
  emg_27_ret = ldv_undef_int();
  #line 4799 
  emg_27_container = emg_alias_isr_dma0_done_ops;
  #line 4800 
  emg_27_ret = ldv_undef_int();
  #line 4802 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_dma0_done_ops);
  #line 4804 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 4805 
    emg_27_container = data->arg0;
    #line 4806 
    ldv_free((void *)data);
  }
  #line 4811 
  emg_27_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 4812 
  emg_27_size_cnt = (unsigned long)ldv_undef_int();
  #line 4816 
  goto emg_main_27;
  #line 4820 
  return (void *)0;
  #line 4823 
  emg_call_27: 
               #line 4823 
  ;
  #line 4824 
  if (ldv_undef_int() != 0) {
    #line 4825 
    switch (ldv_undef_int()) {
      #line 4826 
      case 0: 
              #line 4826 
      ;
      #line 4828 
      emg_27_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4828 
      emg_27_emg_param_1_2 = emg_27_emg_param_1_2;
      #line 4829 
      emg_27_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4829 
      emg_27_emg_param_3_3 = emg_27_emg_param_3_3;
      #line 4833 
      emg_wrapper_isr_dma0_done_read(emg_27_resource_0,emg_27_emg_param_1_2,emg_27_size_cnt,emg_27_emg_param_3_3);
      #line 4837 
      ldv_free((void *)emg_27_emg_param_1_2);
      #line 4838 
      ldv_free((void *)emg_27_emg_param_3_3);
      #line 4840 
      break;
      #line 4842 
      case 1: 
              #line 4842 
      ;
      #line 4844 
      generic_file_llseek(emg_27_resource_0,emg_27_emg_param_1_0,emg_27_emg_param_2_1);
      #line 4846 
      break;
      #line 4848 
      case 2: 
              #line 4848 
      ;
      #line 4855 
      __VERIFIER_assume(emg_27_size_cnt <= 2147479552UL);
      #line 4856 
      emg_27_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4856 
      emg_27_emg_param_1_4 = emg_27_emg_param_1_4;
      #line 4857 
      emg_27_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4857 
      emg_27_emg_param_3_5 = emg_27_emg_param_3_5;
      #line 4861 
      if (emg_27_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 4862 
        (*(emg_27_container->write))(emg_27_resource_0,emg_27_emg_param_1_4,emg_27_size_cnt,emg_27_emg_param_3_5);
      #line 4867 
      ldv_free((void *)emg_27_emg_param_1_4);
      #line 4868 
      ldv_free((void *)emg_27_emg_param_3_5);
      #line 4870 
      break;
      #line 4872 
      default: 
               #line 4872 
      ;
      #line 4872 
      __VERIFIER_assume(0);
    }
    #line 4875 
    if (emg_repeat_cnt_call_27 > 0) {
      #line 4876 
      emg_repeat_cnt_call_27 --;
      #line 4878 
      goto emg_call_27;
    }
    else 
         #line 4880 
         __VERIFIER_assume(0);
  }
  else {
    #line 4886 
    if (emg_27_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 4887 
      (*(emg_27_container->release))(emg_27_resource_1,emg_27_resource_0);
    #line 4891 
    if (emg_repeat_cnt_main_27_0 > 0) {
      #line 4892 
      emg_repeat_cnt_main_27_0 --;
      #line 4894 
      goto emg_main_27;
    }
    else 
         #line 4896 
         __VERIFIER_assume(0);
  }
  #line 4902 
  return (void *)0;
  #line 4905 
  emg_main_27: 
               #line 4905 
  ;
  #line 4906 
  if (ldv_undef_int() != 0) {
    #line 4908 
    emg_27_ret = simple_open(emg_27_resource_1,emg_27_resource_0);
    #line 4913 
    emg_27_ret = ldv_filter_err_code(emg_27_ret);
    #line 4916 
    if (ldv_undef_int() != 0) {
      #line 4918 
      __VERIFIER_assume(emg_27_ret == 0);
      #line 4922 
      goto emg_call_27;
    }
    else {
      #line 4927 
      __VERIFIER_assume(emg_27_ret != 0);
      #line 4930 
      if (emg_repeat_cnt_main_27_1 > 0) {
        #line 4931 
        emg_repeat_cnt_main_27_1 --;
        #line 4933 
        goto emg_main_27;
      }
      else 
           #line 4935 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 4942 
       ldv_free((void *)emg_27_resource_0);
  #line 4950 
  return (void *)0;
}

#line 4955  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_dma1_done_ops(void *arg0)
{
  #line 4958 
  struct file_operations *emg_28_container;
  #line 4959 
  long long emg_28_emg_param_1_0;
  #line 4960 
  char *emg_28_emg_param_1_2;
  #line 4961 
  char *emg_28_emg_param_1_4;
  #line 4962 
  int emg_28_emg_param_2_1;
  #line 4963 
  long long *emg_28_emg_param_3_3;
  #line 4964 
  long long *emg_28_emg_param_3_5;
  #line 4965 
  struct file *emg_28_resource_0;
  #line 4966 
  struct inode *emg_28_resource_1;
  #line 4967 
  int emg_28_ret;
  #line 4968 
  unsigned long emg_28_size_cnt;
  #line 4969 
  int emg_repeat_cnt_main_28_1 = 1;
  #line 4970 
  int emg_repeat_cnt_main_28_0 = 1;
  #line 4971 
  int emg_repeat_cnt_call_28 = 1;
  #line 4973 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 4977 
  emg_28_ret = ldv_undef_int();
  #line 4978 
  emg_28_container = emg_alias_isr_dma1_done_ops;
  #line 4979 
  emg_28_ret = ldv_undef_int();
  #line 4981 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_dma1_done_ops);
  #line 4983 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 4984 
    emg_28_container = data->arg0;
    #line 4985 
    ldv_free((void *)data);
  }
  #line 4990 
  emg_28_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 4991 
  emg_28_size_cnt = (unsigned long)ldv_undef_int();
  #line 4995 
  goto emg_main_28;
  #line 4999 
  return (void *)0;
  #line 5002 
  emg_call_28: 
               #line 5002 
  ;
  #line 5003 
  if (ldv_undef_int() != 0) {
    #line 5004 
    switch (ldv_undef_int()) {
      #line 5005 
      case 0: 
              #line 5005 
      ;
      #line 5007 
      emg_28_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5007 
      emg_28_emg_param_1_2 = emg_28_emg_param_1_2;
      #line 5008 
      emg_28_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5008 
      emg_28_emg_param_3_3 = emg_28_emg_param_3_3;
      #line 5012 
      emg_wrapper_isr_dma1_done_read(emg_28_resource_0,emg_28_emg_param_1_2,emg_28_size_cnt,emg_28_emg_param_3_3);
      #line 5016 
      ldv_free((void *)emg_28_emg_param_1_2);
      #line 5017 
      ldv_free((void *)emg_28_emg_param_3_3);
      #line 5019 
      break;
      #line 5021 
      case 1: 
              #line 5021 
      ;
      #line 5023 
      generic_file_llseek(emg_28_resource_0,emg_28_emg_param_1_0,emg_28_emg_param_2_1);
      #line 5025 
      break;
      #line 5027 
      case 2: 
              #line 5027 
      ;
      #line 5034 
      __VERIFIER_assume(emg_28_size_cnt <= 2147479552UL);
      #line 5035 
      emg_28_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5035 
      emg_28_emg_param_1_4 = emg_28_emg_param_1_4;
      #line 5036 
      emg_28_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5036 
      emg_28_emg_param_3_5 = emg_28_emg_param_3_5;
      #line 5040 
      if (emg_28_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 5041 
        (*(emg_28_container->write))(emg_28_resource_0,emg_28_emg_param_1_4,emg_28_size_cnt,emg_28_emg_param_3_5);
      #line 5046 
      ldv_free((void *)emg_28_emg_param_1_4);
      #line 5047 
      ldv_free((void *)emg_28_emg_param_3_5);
      #line 5049 
      break;
      #line 5051 
      default: 
               #line 5051 
      ;
      #line 5051 
      __VERIFIER_assume(0);
    }
    #line 5054 
    if (emg_repeat_cnt_call_28 > 0) {
      #line 5055 
      emg_repeat_cnt_call_28 --;
      #line 5057 
      goto emg_call_28;
    }
    else 
         #line 5059 
         __VERIFIER_assume(0);
  }
  else {
    #line 5065 
    if (emg_28_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 5066 
      (*(emg_28_container->release))(emg_28_resource_1,emg_28_resource_0);
    #line 5070 
    if (emg_repeat_cnt_main_28_1 > 0) {
      #line 5071 
      emg_repeat_cnt_main_28_1 --;
      #line 5073 
      goto emg_main_28;
    }
    else 
         #line 5075 
         __VERIFIER_assume(0);
  }
  #line 5081 
  return (void *)0;
  #line 5084 
  emg_main_28: 
               #line 5084 
  ;
  #line 5085 
  if (ldv_undef_int() != 0) {
    #line 5087 
    emg_28_ret = simple_open(emg_28_resource_1,emg_28_resource_0);
    #line 5092 
    emg_28_ret = ldv_filter_err_code(emg_28_ret);
    #line 5095 
    if (ldv_undef_int() != 0) {
      #line 5097 
      __VERIFIER_assume(emg_28_ret == 0);
      #line 5101 
      goto emg_call_28;
    }
    else {
      #line 5106 
      __VERIFIER_assume(emg_28_ret != 0);
      #line 5109 
      if (emg_repeat_cnt_main_28_0 > 0) {
        #line 5110 
        emg_repeat_cnt_main_28_0 --;
        #line 5112 
        goto emg_main_28;
      }
      else 
           #line 5114 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 5121 
       ldv_free((void *)emg_28_resource_0);
  #line 5129 
  return (void *)0;
}

#line 5134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_fiqs_ops(void *arg0)
{
  #line 5137 
  struct file_operations *emg_29_container;
  #line 5138 
  long long emg_29_emg_param_1_0;
  #line 5139 
  char *emg_29_emg_param_1_2;
  #line 5140 
  char *emg_29_emg_param_1_4;
  #line 5141 
  int emg_29_emg_param_2_1;
  #line 5142 
  long long *emg_29_emg_param_3_3;
  #line 5143 
  long long *emg_29_emg_param_3_5;
  #line 5144 
  struct file *emg_29_resource_0;
  #line 5145 
  struct inode *emg_29_resource_1;
  #line 5146 
  int emg_29_ret;
  #line 5147 
  unsigned long emg_29_size_cnt;
  #line 5148 
  int emg_repeat_cnt_call_29 = 1;
  #line 5149 
  int emg_repeat_cnt_main_29_1 = 1;
  #line 5150 
  int emg_repeat_cnt_main_29_0 = 1;
  #line 5152 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 5156 
  emg_29_ret = ldv_undef_int();
  #line 5157 
  emg_29_container = emg_alias_isr_fiqs_ops;
  #line 5158 
  emg_29_ret = ldv_undef_int();
  #line 5160 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_fiqs_ops);
  #line 5162 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 5163 
    emg_29_container = data->arg0;
    #line 5164 
    ldv_free((void *)data);
  }
  #line 5169 
  emg_29_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 5170 
  emg_29_size_cnt = (unsigned long)ldv_undef_int();
  #line 5174 
  goto emg_main_29;
  #line 5178 
  return (void *)0;
  #line 5181 
  emg_call_29: 
               #line 5181 
  ;
  #line 5182 
  if (ldv_undef_int() != 0) {
    #line 5183 
    switch (ldv_undef_int()) {
      #line 5184 
      case 0: 
              #line 5184 
      ;
      #line 5186 
      emg_29_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5186 
      emg_29_emg_param_1_2 = emg_29_emg_param_1_2;
      #line 5187 
      emg_29_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5187 
      emg_29_emg_param_3_3 = emg_29_emg_param_3_3;
      #line 5191 
      emg_wrapper_isr_fiqs_read(emg_29_resource_0,emg_29_emg_param_1_2,emg_29_size_cnt,emg_29_emg_param_3_3);
      #line 5195 
      ldv_free((void *)emg_29_emg_param_1_2);
      #line 5196 
      ldv_free((void *)emg_29_emg_param_3_3);
      #line 5198 
      break;
      #line 5200 
      case 1: 
              #line 5200 
      ;
      #line 5202 
      generic_file_llseek(emg_29_resource_0,emg_29_emg_param_1_0,emg_29_emg_param_2_1);
      #line 5204 
      break;
      #line 5206 
      case 2: 
              #line 5206 
      ;
      #line 5213 
      __VERIFIER_assume(emg_29_size_cnt <= 2147479552UL);
      #line 5214 
      emg_29_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5214 
      emg_29_emg_param_1_4 = emg_29_emg_param_1_4;
      #line 5215 
      emg_29_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5215 
      emg_29_emg_param_3_5 = emg_29_emg_param_3_5;
      #line 5219 
      if (emg_29_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 5220 
        (*(emg_29_container->write))(emg_29_resource_0,emg_29_emg_param_1_4,emg_29_size_cnt,emg_29_emg_param_3_5);
      #line 5225 
      ldv_free((void *)emg_29_emg_param_1_4);
      #line 5226 
      ldv_free((void *)emg_29_emg_param_3_5);
      #line 5228 
      break;
      #line 5230 
      default: 
               #line 5230 
      ;
      #line 5230 
      __VERIFIER_assume(0);
    }
    #line 5233 
    if (emg_repeat_cnt_call_29 > 0) {
      #line 5234 
      emg_repeat_cnt_call_29 --;
      #line 5236 
      goto emg_call_29;
    }
    else 
         #line 5238 
         __VERIFIER_assume(0);
  }
  else {
    #line 5244 
    if (emg_29_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 5245 
      (*(emg_29_container->release))(emg_29_resource_1,emg_29_resource_0);
    #line 5249 
    if (emg_repeat_cnt_main_29_0 > 0) {
      #line 5250 
      emg_repeat_cnt_main_29_0 --;
      #line 5252 
      goto emg_main_29;
    }
    else 
         #line 5254 
         __VERIFIER_assume(0);
  }
  #line 5260 
  return (void *)0;
  #line 5263 
  emg_main_29: 
               #line 5263 
  ;
  #line 5264 
  if (ldv_undef_int() != 0) {
    #line 5266 
    emg_29_ret = simple_open(emg_29_resource_1,emg_29_resource_0);
    #line 5271 
    emg_29_ret = ldv_filter_err_code(emg_29_ret);
    #line 5274 
    if (ldv_undef_int() != 0) {
      #line 5276 
      __VERIFIER_assume(emg_29_ret == 0);
      #line 5280 
      goto emg_call_29;
    }
    else {
      #line 5285 
      __VERIFIER_assume(emg_29_ret != 0);
      #line 5288 
      if (emg_repeat_cnt_main_29_1 > 0) {
        #line 5289 
        emg_repeat_cnt_main_29_1 --;
        #line 5291 
        goto emg_main_29;
      }
      else 
           #line 5293 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 5300 
       ldv_free((void *)emg_29_resource_0);
  #line 5308 
  return (void *)0;
}

#line 5313  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_host_acknowledges_ops(void *arg0)
{
  #line 5316 
  struct file_operations *emg_30_container;
  #line 5317 
  long long emg_30_emg_param_1_0;
  #line 5318 
  char *emg_30_emg_param_1_2;
  #line 5319 
  char *emg_30_emg_param_1_4;
  #line 5320 
  int emg_30_emg_param_2_1;
  #line 5321 
  long long *emg_30_emg_param_3_3;
  #line 5322 
  long long *emg_30_emg_param_3_5;
  #line 5323 
  struct file *emg_30_resource_0;
  #line 5324 
  struct inode *emg_30_resource_1;
  #line 5325 
  int emg_30_ret;
  #line 5326 
  unsigned long emg_30_size_cnt;
  #line 5327 
  int emg_repeat_cnt_main_30_0 = 1;
  #line 5328 
  int emg_repeat_cnt_main_30_1 = 1;
  #line 5329 
  int emg_repeat_cnt_call_30 = 1;
  #line 5331 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 5335 
  emg_30_ret = ldv_undef_int();
  #line 5336 
  emg_30_container = emg_alias_isr_host_acknowledges_ops;
  #line 5337 
  emg_30_ret = ldv_undef_int();
  #line 5339 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_host_acknowledges_ops);
  #line 5341 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 5342 
    emg_30_container = data->arg0;
    #line 5343 
    ldv_free((void *)data);
  }
  #line 5348 
  emg_30_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 5349 
  emg_30_size_cnt = (unsigned long)ldv_undef_int();
  #line 5353 
  goto emg_main_30;
  #line 5357 
  return (void *)0;
  #line 5360 
  emg_call_30: 
               #line 5360 
  ;
  #line 5361 
  if (ldv_undef_int() != 0) {
    #line 5362 
    switch (ldv_undef_int()) {
      #line 5363 
      case 0: 
              #line 5363 
      ;
      #line 5365 
      emg_30_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5365 
      emg_30_emg_param_1_2 = emg_30_emg_param_1_2;
      #line 5366 
      emg_30_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5366 
      emg_30_emg_param_3_3 = emg_30_emg_param_3_3;
      #line 5370 
      emg_wrapper_isr_host_acknowledges_read(emg_30_resource_0,emg_30_emg_param_1_2,emg_30_size_cnt,emg_30_emg_param_3_3);
      #line 5374 
      ldv_free((void *)emg_30_emg_param_1_2);
      #line 5375 
      ldv_free((void *)emg_30_emg_param_3_3);
      #line 5377 
      break;
      #line 5379 
      case 1: 
              #line 5379 
      ;
      #line 5381 
      generic_file_llseek(emg_30_resource_0,emg_30_emg_param_1_0,emg_30_emg_param_2_1);
      #line 5383 
      break;
      #line 5385 
      case 2: 
              #line 5385 
      ;
      #line 5392 
      __VERIFIER_assume(emg_30_size_cnt <= 2147479552UL);
      #line 5393 
      emg_30_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5393 
      emg_30_emg_param_1_4 = emg_30_emg_param_1_4;
      #line 5394 
      emg_30_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5394 
      emg_30_emg_param_3_5 = emg_30_emg_param_3_5;
      #line 5398 
      if (emg_30_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 5399 
        (*(emg_30_container->write))(emg_30_resource_0,emg_30_emg_param_1_4,emg_30_size_cnt,emg_30_emg_param_3_5);
      #line 5404 
      ldv_free((void *)emg_30_emg_param_1_4);
      #line 5405 
      ldv_free((void *)emg_30_emg_param_3_5);
      #line 5407 
      break;
      #line 5409 
      default: 
               #line 5409 
      ;
      #line 5409 
      __VERIFIER_assume(0);
    }
    #line 5412 
    if (emg_repeat_cnt_call_30 > 0) {
      #line 5413 
      emg_repeat_cnt_call_30 --;
      #line 5415 
      goto emg_call_30;
    }
    else 
         #line 5417 
         __VERIFIER_assume(0);
  }
  else {
    #line 5423 
    if (emg_30_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 5424 
      (*(emg_30_container->release))(emg_30_resource_1,emg_30_resource_0);
    #line 5428 
    if (emg_repeat_cnt_main_30_0 > 0) {
      #line 5429 
      emg_repeat_cnt_main_30_0 --;
      #line 5431 
      goto emg_main_30;
    }
    else 
         #line 5433 
         __VERIFIER_assume(0);
  }
  #line 5439 
  return (void *)0;
  #line 5442 
  emg_main_30: 
               #line 5442 
  ;
  #line 5443 
  if (ldv_undef_int() != 0) {
    #line 5445 
    emg_30_ret = simple_open(emg_30_resource_1,emg_30_resource_0);
    #line 5450 
    emg_30_ret = ldv_filter_err_code(emg_30_ret);
    #line 5453 
    if (ldv_undef_int() != 0) {
      #line 5455 
      __VERIFIER_assume(emg_30_ret == 0);
      #line 5459 
      goto emg_call_30;
    }
    else {
      #line 5464 
      __VERIFIER_assume(emg_30_ret != 0);
      #line 5467 
      if (emg_repeat_cnt_main_30_1 > 0) {
        #line 5468 
        emg_repeat_cnt_main_30_1 --;
        #line 5470 
        goto emg_main_30;
      }
      else 
           #line 5472 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 5479 
       ldv_free((void *)emg_30_resource_0);
  #line 5487 
  return (void *)0;
}

#line 5492  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_hw_pm_mode_changes_ops(void *arg0)
{
  #line 5495 
  struct file_operations *emg_31_container;
  #line 5496 
  long long emg_31_emg_param_1_0;
  #line 5497 
  char *emg_31_emg_param_1_2;
  #line 5498 
  char *emg_31_emg_param_1_4;
  #line 5499 
  int emg_31_emg_param_2_1;
  #line 5500 
  long long *emg_31_emg_param_3_3;
  #line 5501 
  long long *emg_31_emg_param_3_5;
  #line 5502 
  struct file *emg_31_resource_0;
  #line 5503 
  struct inode *emg_31_resource_1;
  #line 5504 
  int emg_31_ret;
  #line 5505 
  unsigned long emg_31_size_cnt;
  #line 5506 
  int emg_repeat_cnt_main_31_0 = 1;
  #line 5507 
  int emg_repeat_cnt_main_31_1 = 1;
  #line 5508 
  int emg_repeat_cnt_call_31 = 1;
  #line 5510 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 5514 
  emg_31_ret = ldv_undef_int();
  #line 5515 
  emg_31_container = emg_alias_isr_hw_pm_mode_changes_ops;
  #line 5516 
  emg_31_ret = ldv_undef_int();
  #line 5518 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_hw_pm_mode_changes_ops);
  #line 5520 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 5521 
    emg_31_container = data->arg0;
    #line 5522 
    ldv_free((void *)data);
  }
  #line 5527 
  emg_31_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 5528 
  emg_31_size_cnt = (unsigned long)ldv_undef_int();
  #line 5532 
  goto emg_main_31;
  #line 5536 
  return (void *)0;
  #line 5539 
  emg_call_31: 
               #line 5539 
  ;
  #line 5540 
  if (ldv_undef_int() != 0) {
    #line 5541 
    switch (ldv_undef_int()) {
      #line 5542 
      case 0: 
              #line 5542 
      ;
      #line 5544 
      emg_31_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5544 
      emg_31_emg_param_1_2 = emg_31_emg_param_1_2;
      #line 5545 
      emg_31_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5545 
      emg_31_emg_param_3_3 = emg_31_emg_param_3_3;
      #line 5549 
      emg_wrapper_isr_hw_pm_mode_changes_read(emg_31_resource_0,emg_31_emg_param_1_2,emg_31_size_cnt,emg_31_emg_param_3_3);
      #line 5553 
      ldv_free((void *)emg_31_emg_param_1_2);
      #line 5554 
      ldv_free((void *)emg_31_emg_param_3_3);
      #line 5556 
      break;
      #line 5558 
      case 1: 
              #line 5558 
      ;
      #line 5560 
      generic_file_llseek(emg_31_resource_0,emg_31_emg_param_1_0,emg_31_emg_param_2_1);
      #line 5562 
      break;
      #line 5564 
      case 2: 
              #line 5564 
      ;
      #line 5571 
      __VERIFIER_assume(emg_31_size_cnt <= 2147479552UL);
      #line 5572 
      emg_31_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5572 
      emg_31_emg_param_1_4 = emg_31_emg_param_1_4;
      #line 5573 
      emg_31_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5573 
      emg_31_emg_param_3_5 = emg_31_emg_param_3_5;
      #line 5577 
      if (emg_31_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 5578 
        (*(emg_31_container->write))(emg_31_resource_0,emg_31_emg_param_1_4,emg_31_size_cnt,emg_31_emg_param_3_5);
      #line 5583 
      ldv_free((void *)emg_31_emg_param_1_4);
      #line 5584 
      ldv_free((void *)emg_31_emg_param_3_5);
      #line 5586 
      break;
      #line 5588 
      default: 
               #line 5588 
      ;
      #line 5588 
      __VERIFIER_assume(0);
    }
    #line 5591 
    if (emg_repeat_cnt_call_31 > 0) {
      #line 5592 
      emg_repeat_cnt_call_31 --;
      #line 5594 
      goto emg_call_31;
    }
    else 
         #line 5596 
         __VERIFIER_assume(0);
  }
  else {
    #line 5602 
    if (emg_31_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 5603 
      (*(emg_31_container->release))(emg_31_resource_1,emg_31_resource_0);
    #line 5607 
    if (emg_repeat_cnt_main_31_1 > 0) {
      #line 5608 
      emg_repeat_cnt_main_31_1 --;
      #line 5610 
      goto emg_main_31;
    }
    else 
         #line 5612 
         __VERIFIER_assume(0);
  }
  #line 5618 
  return (void *)0;
  #line 5621 
  emg_main_31: 
               #line 5621 
  ;
  #line 5622 
  if (ldv_undef_int() != 0) {
    #line 5624 
    emg_31_ret = simple_open(emg_31_resource_1,emg_31_resource_0);
    #line 5629 
    emg_31_ret = ldv_filter_err_code(emg_31_ret);
    #line 5632 
    if (ldv_undef_int() != 0) {
      #line 5634 
      __VERIFIER_assume(emg_31_ret == 0);
      #line 5638 
      goto emg_call_31;
    }
    else {
      #line 5643 
      __VERIFIER_assume(emg_31_ret != 0);
      #line 5646 
      if (emg_repeat_cnt_main_31_0 > 0) {
        #line 5647 
        emg_repeat_cnt_main_31_0 --;
        #line 5649 
        goto emg_main_31;
      }
      else 
           #line 5651 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 5658 
       ldv_free((void *)emg_31_resource_0);
  #line 5666 
  return (void *)0;
}

#line 5671  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_irqs_ops(void *arg0)
{
  #line 5674 
  struct file_operations *emg_32_container;
  #line 5675 
  long long emg_32_emg_param_1_0;
  #line 5676 
  char *emg_32_emg_param_1_2;
  #line 5677 
  char *emg_32_emg_param_1_4;
  #line 5678 
  int emg_32_emg_param_2_1;
  #line 5679 
  long long *emg_32_emg_param_3_3;
  #line 5680 
  long long *emg_32_emg_param_3_5;
  #line 5681 
  struct file *emg_32_resource_0;
  #line 5682 
  struct inode *emg_32_resource_1;
  #line 5683 
  int emg_32_ret;
  #line 5684 
  unsigned long emg_32_size_cnt;
  #line 5685 
  int emg_repeat_cnt_call_32 = 1;
  #line 5686 
  int emg_repeat_cnt_main_32_1 = 1;
  #line 5687 
  int emg_repeat_cnt_main_32_0 = 1;
  #line 5689 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 5693 
  emg_32_ret = ldv_undef_int();
  #line 5694 
  emg_32_container = emg_alias_isr_irqs_ops;
  #line 5695 
  emg_32_ret = ldv_undef_int();
  #line 5697 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_irqs_ops);
  #line 5699 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 5700 
    emg_32_container = data->arg0;
    #line 5701 
    ldv_free((void *)data);
  }
  #line 5706 
  emg_32_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 5707 
  emg_32_size_cnt = (unsigned long)ldv_undef_int();
  #line 5711 
  goto emg_main_32;
  #line 5715 
  return (void *)0;
  #line 5718 
  emg_call_32: 
               #line 5718 
  ;
  #line 5719 
  if (ldv_undef_int() != 0) {
    #line 5720 
    switch (ldv_undef_int()) {
      #line 5721 
      case 0: 
              #line 5721 
      ;
      #line 5723 
      emg_32_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5723 
      emg_32_emg_param_1_2 = emg_32_emg_param_1_2;
      #line 5724 
      emg_32_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5724 
      emg_32_emg_param_3_3 = emg_32_emg_param_3_3;
      #line 5728 
      emg_wrapper_isr_irqs_read(emg_32_resource_0,emg_32_emg_param_1_2,emg_32_size_cnt,emg_32_emg_param_3_3);
      #line 5732 
      ldv_free((void *)emg_32_emg_param_1_2);
      #line 5733 
      ldv_free((void *)emg_32_emg_param_3_3);
      #line 5735 
      break;
      #line 5737 
      case 1: 
              #line 5737 
      ;
      #line 5739 
      generic_file_llseek(emg_32_resource_0,emg_32_emg_param_1_0,emg_32_emg_param_2_1);
      #line 5741 
      break;
      #line 5743 
      case 2: 
              #line 5743 
      ;
      #line 5750 
      __VERIFIER_assume(emg_32_size_cnt <= 2147479552UL);
      #line 5751 
      emg_32_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5751 
      emg_32_emg_param_1_4 = emg_32_emg_param_1_4;
      #line 5752 
      emg_32_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5752 
      emg_32_emg_param_3_5 = emg_32_emg_param_3_5;
      #line 5756 
      if (emg_32_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 5757 
        (*(emg_32_container->write))(emg_32_resource_0,emg_32_emg_param_1_4,emg_32_size_cnt,emg_32_emg_param_3_5);
      #line 5762 
      ldv_free((void *)emg_32_emg_param_1_4);
      #line 5763 
      ldv_free((void *)emg_32_emg_param_3_5);
      #line 5765 
      break;
      #line 5767 
      default: 
               #line 5767 
      ;
      #line 5767 
      __VERIFIER_assume(0);
    }
    #line 5770 
    if (emg_repeat_cnt_call_32 > 0) {
      #line 5771 
      emg_repeat_cnt_call_32 --;
      #line 5773 
      goto emg_call_32;
    }
    else 
         #line 5775 
         __VERIFIER_assume(0);
  }
  else {
    #line 5781 
    if (emg_32_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 5782 
      (*(emg_32_container->release))(emg_32_resource_1,emg_32_resource_0);
    #line 5786 
    if (emg_repeat_cnt_main_32_1 > 0) {
      #line 5787 
      emg_repeat_cnt_main_32_1 --;
      #line 5789 
      goto emg_main_32;
    }
    else 
         #line 5791 
         __VERIFIER_assume(0);
  }
  #line 5797 
  return (void *)0;
  #line 5800 
  emg_main_32: 
               #line 5800 
  ;
  #line 5801 
  if (ldv_undef_int() != 0) {
    #line 5803 
    emg_32_ret = simple_open(emg_32_resource_1,emg_32_resource_0);
    #line 5808 
    emg_32_ret = ldv_filter_err_code(emg_32_ret);
    #line 5811 
    if (ldv_undef_int() != 0) {
      #line 5813 
      __VERIFIER_assume(emg_32_ret == 0);
      #line 5817 
      goto emg_call_32;
    }
    else {
      #line 5822 
      __VERIFIER_assume(emg_32_ret != 0);
      #line 5825 
      if (emg_repeat_cnt_main_32_0 > 0) {
        #line 5826 
        emg_repeat_cnt_main_32_0 --;
        #line 5828 
        goto emg_main_32;
      }
      else 
           #line 5830 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 5837 
       ldv_free((void *)emg_32_resource_0);
  #line 5845 
  return (void *)0;
}

#line 5850  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_low_rssi_ops(void *arg0)
{
  #line 5853 
  struct file_operations *emg_33_container;
  #line 5854 
  long long emg_33_emg_param_1_0;
  #line 5855 
  char *emg_33_emg_param_1_2;
  #line 5856 
  char *emg_33_emg_param_1_4;
  #line 5857 
  int emg_33_emg_param_2_1;
  #line 5858 
  long long *emg_33_emg_param_3_3;
  #line 5859 
  long long *emg_33_emg_param_3_5;
  #line 5860 
  struct file *emg_33_resource_0;
  #line 5861 
  struct inode *emg_33_resource_1;
  #line 5862 
  int emg_33_ret;
  #line 5863 
  unsigned long emg_33_size_cnt;
  #line 5864 
  int emg_repeat_cnt_call_33 = 1;
  #line 5865 
  int emg_repeat_cnt_main_33_0 = 1;
  #line 5866 
  int emg_repeat_cnt_main_33_1 = 1;
  #line 5868 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 5872 
  emg_33_ret = ldv_undef_int();
  #line 5873 
  emg_33_container = emg_alias_isr_low_rssi_ops;
  #line 5874 
  emg_33_ret = ldv_undef_int();
  #line 5876 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_low_rssi_ops);
  #line 5878 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 5879 
    emg_33_container = data->arg0;
    #line 5880 
    ldv_free((void *)data);
  }
  #line 5885 
  emg_33_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 5886 
  emg_33_size_cnt = (unsigned long)ldv_undef_int();
  #line 5890 
  goto emg_main_33;
  #line 5894 
  return (void *)0;
  #line 5897 
  emg_call_33: 
               #line 5897 
  ;
  #line 5898 
  if (ldv_undef_int() != 0) {
    #line 5899 
    switch (ldv_undef_int()) {
      #line 5900 
      case 0: 
              #line 5900 
      ;
      #line 5902 
      emg_33_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5902 
      emg_33_emg_param_1_2 = emg_33_emg_param_1_2;
      #line 5903 
      emg_33_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5903 
      emg_33_emg_param_3_3 = emg_33_emg_param_3_3;
      #line 5907 
      emg_wrapper_isr_low_rssi_read(emg_33_resource_0,emg_33_emg_param_1_2,emg_33_size_cnt,emg_33_emg_param_3_3);
      #line 5911 
      ldv_free((void *)emg_33_emg_param_1_2);
      #line 5912 
      ldv_free((void *)emg_33_emg_param_3_3);
      #line 5914 
      break;
      #line 5916 
      case 1: 
              #line 5916 
      ;
      #line 5918 
      generic_file_llseek(emg_33_resource_0,emg_33_emg_param_1_0,emg_33_emg_param_2_1);
      #line 5920 
      break;
      #line 5922 
      case 2: 
              #line 5922 
      ;
      #line 5929 
      __VERIFIER_assume(emg_33_size_cnt <= 2147479552UL);
      #line 5930 
      emg_33_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5930 
      emg_33_emg_param_1_4 = emg_33_emg_param_1_4;
      #line 5931 
      emg_33_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5931 
      emg_33_emg_param_3_5 = emg_33_emg_param_3_5;
      #line 5935 
      if (emg_33_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 5936 
        (*(emg_33_container->write))(emg_33_resource_0,emg_33_emg_param_1_4,emg_33_size_cnt,emg_33_emg_param_3_5);
      #line 5941 
      ldv_free((void *)emg_33_emg_param_1_4);
      #line 5942 
      ldv_free((void *)emg_33_emg_param_3_5);
      #line 5944 
      break;
      #line 5946 
      default: 
               #line 5946 
      ;
      #line 5946 
      __VERIFIER_assume(0);
    }
    #line 5949 
    if (emg_repeat_cnt_call_33 > 0) {
      #line 5950 
      emg_repeat_cnt_call_33 --;
      #line 5952 
      goto emg_call_33;
    }
    else 
         #line 5954 
         __VERIFIER_assume(0);
  }
  else {
    #line 5960 
    if (emg_33_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 5961 
      (*(emg_33_container->release))(emg_33_resource_1,emg_33_resource_0);
    #line 5965 
    if (emg_repeat_cnt_main_33_1 > 0) {
      #line 5966 
      emg_repeat_cnt_main_33_1 --;
      #line 5968 
      goto emg_main_33;
    }
    else 
         #line 5970 
         __VERIFIER_assume(0);
  }
  #line 5976 
  return (void *)0;
  #line 5979 
  emg_main_33: 
               #line 5979 
  ;
  #line 5980 
  if (ldv_undef_int() != 0) {
    #line 5982 
    emg_33_ret = simple_open(emg_33_resource_1,emg_33_resource_0);
    #line 5987 
    emg_33_ret = ldv_filter_err_code(emg_33_ret);
    #line 5990 
    if (ldv_undef_int() != 0) {
      #line 5992 
      __VERIFIER_assume(emg_33_ret == 0);
      #line 5996 
      goto emg_call_33;
    }
    else {
      #line 6001 
      __VERIFIER_assume(emg_33_ret != 0);
      #line 6004 
      if (emg_repeat_cnt_main_33_0 > 0) {
        #line 6005 
        emg_repeat_cnt_main_33_0 --;
        #line 6007 
        goto emg_main_33;
      }
      else 
           #line 6009 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 6016 
       ldv_free((void *)emg_33_resource_0);
  #line 6024 
  return (void *)0;
}

#line 6029  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_pci_pm_ops(void *arg0)
{
  #line 6032 
  struct file_operations *emg_34_container;
  #line 6033 
  long long emg_34_emg_param_1_0;
  #line 6034 
  char *emg_34_emg_param_1_2;
  #line 6035 
  char *emg_34_emg_param_1_4;
  #line 6036 
  int emg_34_emg_param_2_1;
  #line 6037 
  long long *emg_34_emg_param_3_3;
  #line 6038 
  long long *emg_34_emg_param_3_5;
  #line 6039 
  struct file *emg_34_resource_0;
  #line 6040 
  struct inode *emg_34_resource_1;
  #line 6041 
  int emg_34_ret;
  #line 6042 
  unsigned long emg_34_size_cnt;
  #line 6043 
  int emg_repeat_cnt_main_34_1 = 1;
  #line 6044 
  int emg_repeat_cnt_main_34_0 = 1;
  #line 6045 
  int emg_repeat_cnt_call_34 = 1;
  #line 6047 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 6051 
  emg_34_ret = ldv_undef_int();
  #line 6052 
  emg_34_container = emg_alias_isr_pci_pm_ops;
  #line 6053 
  emg_34_ret = ldv_undef_int();
  #line 6055 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_pci_pm_ops);
  #line 6057 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 6058 
    emg_34_container = data->arg0;
    #line 6059 
    ldv_free((void *)data);
  }
  #line 6064 
  emg_34_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 6065 
  emg_34_size_cnt = (unsigned long)ldv_undef_int();
  #line 6069 
  goto emg_main_34;
  #line 6073 
  return (void *)0;
  #line 6076 
  emg_call_34: 
               #line 6076 
  ;
  #line 6077 
  if (ldv_undef_int() != 0) {
    #line 6078 
    switch (ldv_undef_int()) {
      #line 6079 
      case 0: 
              #line 6079 
      ;
      #line 6081 
      emg_34_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6081 
      emg_34_emg_param_1_2 = emg_34_emg_param_1_2;
      #line 6082 
      emg_34_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6082 
      emg_34_emg_param_3_3 = emg_34_emg_param_3_3;
      #line 6086 
      emg_wrapper_isr_pci_pm_read(emg_34_resource_0,emg_34_emg_param_1_2,emg_34_size_cnt,emg_34_emg_param_3_3);
      #line 6090 
      ldv_free((void *)emg_34_emg_param_1_2);
      #line 6091 
      ldv_free((void *)emg_34_emg_param_3_3);
      #line 6093 
      break;
      #line 6095 
      case 1: 
              #line 6095 
      ;
      #line 6097 
      generic_file_llseek(emg_34_resource_0,emg_34_emg_param_1_0,emg_34_emg_param_2_1);
      #line 6099 
      break;
      #line 6101 
      case 2: 
              #line 6101 
      ;
      #line 6108 
      __VERIFIER_assume(emg_34_size_cnt <= 2147479552UL);
      #line 6109 
      emg_34_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6109 
      emg_34_emg_param_1_4 = emg_34_emg_param_1_4;
      #line 6110 
      emg_34_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6110 
      emg_34_emg_param_3_5 = emg_34_emg_param_3_5;
      #line 6114 
      if (emg_34_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 6115 
        (*(emg_34_container->write))(emg_34_resource_0,emg_34_emg_param_1_4,emg_34_size_cnt,emg_34_emg_param_3_5);
      #line 6120 
      ldv_free((void *)emg_34_emg_param_1_4);
      #line 6121 
      ldv_free((void *)emg_34_emg_param_3_5);
      #line 6123 
      break;
      #line 6125 
      default: 
               #line 6125 
      ;
      #line 6125 
      __VERIFIER_assume(0);
    }
    #line 6128 
    if (emg_repeat_cnt_call_34 > 0) {
      #line 6129 
      emg_repeat_cnt_call_34 --;
      #line 6131 
      goto emg_call_34;
    }
    else 
         #line 6133 
         __VERIFIER_assume(0);
  }
  else {
    #line 6139 
    if (emg_34_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 6140 
      (*(emg_34_container->release))(emg_34_resource_1,emg_34_resource_0);
    #line 6144 
    if (emg_repeat_cnt_main_34_0 > 0) {
      #line 6145 
      emg_repeat_cnt_main_34_0 --;
      #line 6147 
      goto emg_main_34;
    }
    else 
         #line 6149 
         __VERIFIER_assume(0);
  }
  #line 6155 
  return (void *)0;
  #line 6158 
  emg_main_34: 
               #line 6158 
  ;
  #line 6159 
  if (ldv_undef_int() != 0) {
    #line 6161 
    emg_34_ret = simple_open(emg_34_resource_1,emg_34_resource_0);
    #line 6166 
    emg_34_ret = ldv_filter_err_code(emg_34_ret);
    #line 6169 
    if (ldv_undef_int() != 0) {
      #line 6171 
      __VERIFIER_assume(emg_34_ret == 0);
      #line 6175 
      goto emg_call_34;
    }
    else {
      #line 6180 
      __VERIFIER_assume(emg_34_ret != 0);
      #line 6183 
      if (emg_repeat_cnt_main_34_1 > 0) {
        #line 6184 
        emg_repeat_cnt_main_34_1 --;
        #line 6186 
        goto emg_main_34;
      }
      else 
           #line 6188 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 6195 
       ldv_free((void *)emg_34_resource_0);
  #line 6203 
  return (void *)0;
}

#line 6208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_rx_headers_ops(void *arg0)
{
  #line 6211 
  struct file_operations *emg_35_container;
  #line 6212 
  long long emg_35_emg_param_1_0;
  #line 6213 
  char *emg_35_emg_param_1_2;
  #line 6214 
  char *emg_35_emg_param_1_4;
  #line 6215 
  int emg_35_emg_param_2_1;
  #line 6216 
  long long *emg_35_emg_param_3_3;
  #line 6217 
  long long *emg_35_emg_param_3_5;
  #line 6218 
  struct file *emg_35_resource_0;
  #line 6219 
  struct inode *emg_35_resource_1;
  #line 6220 
  int emg_35_ret;
  #line 6221 
  unsigned long emg_35_size_cnt;
  #line 6222 
  int emg_repeat_cnt_call_35 = 1;
  #line 6223 
  int emg_repeat_cnt_main_35_0 = 1;
  #line 6224 
  int emg_repeat_cnt_main_35_1 = 1;
  #line 6226 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 6230 
  emg_35_ret = ldv_undef_int();
  #line 6231 
  emg_35_container = emg_alias_isr_rx_headers_ops;
  #line 6232 
  emg_35_ret = ldv_undef_int();
  #line 6234 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_rx_headers_ops);
  #line 6236 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 6237 
    emg_35_container = data->arg0;
    #line 6238 
    ldv_free((void *)data);
  }
  #line 6243 
  emg_35_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 6244 
  emg_35_size_cnt = (unsigned long)ldv_undef_int();
  #line 6248 
  goto emg_main_35;
  #line 6252 
  return (void *)0;
  #line 6255 
  emg_call_35: 
               #line 6255 
  ;
  #line 6256 
  if (ldv_undef_int() != 0) {
    #line 6257 
    switch (ldv_undef_int()) {
      #line 6258 
      case 0: 
              #line 6258 
      ;
      #line 6260 
      emg_35_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6260 
      emg_35_emg_param_1_2 = emg_35_emg_param_1_2;
      #line 6261 
      emg_35_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6261 
      emg_35_emg_param_3_3 = emg_35_emg_param_3_3;
      #line 6265 
      emg_wrapper_isr_rx_headers_read(emg_35_resource_0,emg_35_emg_param_1_2,emg_35_size_cnt,emg_35_emg_param_3_3);
      #line 6269 
      ldv_free((void *)emg_35_emg_param_1_2);
      #line 6270 
      ldv_free((void *)emg_35_emg_param_3_3);
      #line 6272 
      break;
      #line 6274 
      case 1: 
              #line 6274 
      ;
      #line 6276 
      generic_file_llseek(emg_35_resource_0,emg_35_emg_param_1_0,emg_35_emg_param_2_1);
      #line 6278 
      break;
      #line 6280 
      case 2: 
              #line 6280 
      ;
      #line 6287 
      __VERIFIER_assume(emg_35_size_cnt <= 2147479552UL);
      #line 6288 
      emg_35_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6288 
      emg_35_emg_param_1_4 = emg_35_emg_param_1_4;
      #line 6289 
      emg_35_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6289 
      emg_35_emg_param_3_5 = emg_35_emg_param_3_5;
      #line 6293 
      if (emg_35_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 6294 
        (*(emg_35_container->write))(emg_35_resource_0,emg_35_emg_param_1_4,emg_35_size_cnt,emg_35_emg_param_3_5);
      #line 6299 
      ldv_free((void *)emg_35_emg_param_1_4);
      #line 6300 
      ldv_free((void *)emg_35_emg_param_3_5);
      #line 6302 
      break;
      #line 6304 
      default: 
               #line 6304 
      ;
      #line 6304 
      __VERIFIER_assume(0);
    }
    #line 6307 
    if (emg_repeat_cnt_call_35 > 0) {
      #line 6308 
      emg_repeat_cnt_call_35 --;
      #line 6310 
      goto emg_call_35;
    }
    else 
         #line 6312 
         __VERIFIER_assume(0);
  }
  else {
    #line 6318 
    if (emg_35_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 6319 
      (*(emg_35_container->release))(emg_35_resource_1,emg_35_resource_0);
    #line 6323 
    if (emg_repeat_cnt_main_35_1 > 0) {
      #line 6324 
      emg_repeat_cnt_main_35_1 --;
      #line 6326 
      goto emg_main_35;
    }
    else 
         #line 6328 
         __VERIFIER_assume(0);
  }
  #line 6334 
  return (void *)0;
  #line 6337 
  emg_main_35: 
               #line 6337 
  ;
  #line 6338 
  if (ldv_undef_int() != 0) {
    #line 6340 
    emg_35_ret = simple_open(emg_35_resource_1,emg_35_resource_0);
    #line 6345 
    emg_35_ret = ldv_filter_err_code(emg_35_ret);
    #line 6348 
    if (ldv_undef_int() != 0) {
      #line 6350 
      __VERIFIER_assume(emg_35_ret == 0);
      #line 6354 
      goto emg_call_35;
    }
    else {
      #line 6359 
      __VERIFIER_assume(emg_35_ret != 0);
      #line 6362 
      if (emg_repeat_cnt_main_35_0 > 0) {
        #line 6363 
        emg_repeat_cnt_main_35_0 --;
        #line 6365 
        goto emg_main_35;
      }
      else 
           #line 6367 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 6374 
       ldv_free((void *)emg_35_resource_0);
  #line 6382 
  return (void *)0;
}

#line 6387  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_rx_mem_overflow_ops(void *arg0)
{
  #line 6390 
  struct file_operations *emg_36_container;
  #line 6391 
  long long emg_36_emg_param_1_0;
  #line 6392 
  char *emg_36_emg_param_1_2;
  #line 6393 
  char *emg_36_emg_param_1_4;
  #line 6394 
  int emg_36_emg_param_2_1;
  #line 6395 
  long long *emg_36_emg_param_3_3;
  #line 6396 
  long long *emg_36_emg_param_3_5;
  #line 6397 
  struct file *emg_36_resource_0;
  #line 6398 
  struct inode *emg_36_resource_1;
  #line 6399 
  int emg_36_ret;
  #line 6400 
  unsigned long emg_36_size_cnt;
  #line 6401 
  int emg_repeat_cnt_main_36_1 = 1;
  #line 6402 
  int emg_repeat_cnt_main_36_0 = 1;
  #line 6403 
  int emg_repeat_cnt_call_36 = 1;
  #line 6405 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 6409 
  emg_36_ret = ldv_undef_int();
  #line 6410 
  emg_36_container = emg_alias_isr_rx_mem_overflow_ops;
  #line 6411 
  emg_36_ret = ldv_undef_int();
  #line 6413 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_rx_mem_overflow_ops);
  #line 6415 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 6416 
    emg_36_container = data->arg0;
    #line 6417 
    ldv_free((void *)data);
  }
  #line 6422 
  emg_36_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 6423 
  emg_36_size_cnt = (unsigned long)ldv_undef_int();
  #line 6427 
  goto emg_main_36;
  #line 6431 
  return (void *)0;
  #line 6434 
  emg_call_36: 
               #line 6434 
  ;
  #line 6435 
  if (ldv_undef_int() != 0) {
    #line 6436 
    switch (ldv_undef_int()) {
      #line 6437 
      case 0: 
              #line 6437 
      ;
      #line 6439 
      emg_36_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6439 
      emg_36_emg_param_1_2 = emg_36_emg_param_1_2;
      #line 6440 
      emg_36_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6440 
      emg_36_emg_param_3_3 = emg_36_emg_param_3_3;
      #line 6444 
      emg_wrapper_isr_rx_mem_overflow_read(emg_36_resource_0,emg_36_emg_param_1_2,emg_36_size_cnt,emg_36_emg_param_3_3);
      #line 6448 
      ldv_free((void *)emg_36_emg_param_1_2);
      #line 6449 
      ldv_free((void *)emg_36_emg_param_3_3);
      #line 6451 
      break;
      #line 6453 
      case 1: 
              #line 6453 
      ;
      #line 6455 
      generic_file_llseek(emg_36_resource_0,emg_36_emg_param_1_0,emg_36_emg_param_2_1);
      #line 6457 
      break;
      #line 6459 
      case 2: 
              #line 6459 
      ;
      #line 6466 
      __VERIFIER_assume(emg_36_size_cnt <= 2147479552UL);
      #line 6467 
      emg_36_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6467 
      emg_36_emg_param_1_4 = emg_36_emg_param_1_4;
      #line 6468 
      emg_36_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6468 
      emg_36_emg_param_3_5 = emg_36_emg_param_3_5;
      #line 6472 
      if (emg_36_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 6473 
        (*(emg_36_container->write))(emg_36_resource_0,emg_36_emg_param_1_4,emg_36_size_cnt,emg_36_emg_param_3_5);
      #line 6478 
      ldv_free((void *)emg_36_emg_param_1_4);
      #line 6479 
      ldv_free((void *)emg_36_emg_param_3_5);
      #line 6481 
      break;
      #line 6483 
      default: 
               #line 6483 
      ;
      #line 6483 
      __VERIFIER_assume(0);
    }
    #line 6486 
    if (emg_repeat_cnt_call_36 > 0) {
      #line 6487 
      emg_repeat_cnt_call_36 --;
      #line 6489 
      goto emg_call_36;
    }
    else 
         #line 6491 
         __VERIFIER_assume(0);
  }
  else {
    #line 6497 
    if (emg_36_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 6498 
      (*(emg_36_container->release))(emg_36_resource_1,emg_36_resource_0);
    #line 6502 
    if (emg_repeat_cnt_main_36_0 > 0) {
      #line 6503 
      emg_repeat_cnt_main_36_0 --;
      #line 6505 
      goto emg_main_36;
    }
    else 
         #line 6507 
         __VERIFIER_assume(0);
  }
  #line 6513 
  return (void *)0;
  #line 6516 
  emg_main_36: 
               #line 6516 
  ;
  #line 6517 
  if (ldv_undef_int() != 0) {
    #line 6519 
    emg_36_ret = simple_open(emg_36_resource_1,emg_36_resource_0);
    #line 6524 
    emg_36_ret = ldv_filter_err_code(emg_36_ret);
    #line 6527 
    if (ldv_undef_int() != 0) {
      #line 6529 
      __VERIFIER_assume(emg_36_ret == 0);
      #line 6533 
      goto emg_call_36;
    }
    else {
      #line 6538 
      __VERIFIER_assume(emg_36_ret != 0);
      #line 6541 
      if (emg_repeat_cnt_main_36_1 > 0) {
        #line 6542 
        emg_repeat_cnt_main_36_1 --;
        #line 6544 
        goto emg_main_36;
      }
      else 
           #line 6546 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 6553 
       ldv_free((void *)emg_36_resource_0);
  #line 6561 
  return (void *)0;
}

#line 6566  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_rx_procs_ops(void *arg0)
{
  #line 6569 
  struct file_operations *emg_37_container;
  #line 6570 
  long long emg_37_emg_param_1_0;
  #line 6571 
  char *emg_37_emg_param_1_2;
  #line 6572 
  char *emg_37_emg_param_1_4;
  #line 6573 
  int emg_37_emg_param_2_1;
  #line 6574 
  long long *emg_37_emg_param_3_3;
  #line 6575 
  long long *emg_37_emg_param_3_5;
  #line 6576 
  struct file *emg_37_resource_0;
  #line 6577 
  struct inode *emg_37_resource_1;
  #line 6578 
  int emg_37_ret;
  #line 6579 
  unsigned long emg_37_size_cnt;
  #line 6580 
  int emg_repeat_cnt_main_37_1 = 1;
  #line 6581 
  int emg_repeat_cnt_main_37_0 = 1;
  #line 6582 
  int emg_repeat_cnt_call_37 = 1;
  #line 6584 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 6588 
  emg_37_ret = ldv_undef_int();
  #line 6589 
  emg_37_container = emg_alias_isr_rx_procs_ops;
  #line 6590 
  emg_37_ret = ldv_undef_int();
  #line 6592 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_rx_procs_ops);
  #line 6594 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 6595 
    emg_37_container = data->arg0;
    #line 6596 
    ldv_free((void *)data);
  }
  #line 6601 
  emg_37_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 6602 
  emg_37_size_cnt = (unsigned long)ldv_undef_int();
  #line 6606 
  goto emg_main_37;
  #line 6610 
  return (void *)0;
  #line 6613 
  emg_call_37: 
               #line 6613 
  ;
  #line 6614 
  if (ldv_undef_int() != 0) {
    #line 6615 
    switch (ldv_undef_int()) {
      #line 6616 
      case 0: 
              #line 6616 
      ;
      #line 6618 
      emg_37_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6618 
      emg_37_emg_param_1_2 = emg_37_emg_param_1_2;
      #line 6619 
      emg_37_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6619 
      emg_37_emg_param_3_3 = emg_37_emg_param_3_3;
      #line 6623 
      emg_wrapper_isr_rx_procs_read(emg_37_resource_0,emg_37_emg_param_1_2,emg_37_size_cnt,emg_37_emg_param_3_3);
      #line 6627 
      ldv_free((void *)emg_37_emg_param_1_2);
      #line 6628 
      ldv_free((void *)emg_37_emg_param_3_3);
      #line 6630 
      break;
      #line 6632 
      case 1: 
              #line 6632 
      ;
      #line 6634 
      generic_file_llseek(emg_37_resource_0,emg_37_emg_param_1_0,emg_37_emg_param_2_1);
      #line 6636 
      break;
      #line 6638 
      case 2: 
              #line 6638 
      ;
      #line 6645 
      __VERIFIER_assume(emg_37_size_cnt <= 2147479552UL);
      #line 6646 
      emg_37_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6646 
      emg_37_emg_param_1_4 = emg_37_emg_param_1_4;
      #line 6647 
      emg_37_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6647 
      emg_37_emg_param_3_5 = emg_37_emg_param_3_5;
      #line 6651 
      if (emg_37_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 6652 
        (*(emg_37_container->write))(emg_37_resource_0,emg_37_emg_param_1_4,emg_37_size_cnt,emg_37_emg_param_3_5);
      #line 6657 
      ldv_free((void *)emg_37_emg_param_1_4);
      #line 6658 
      ldv_free((void *)emg_37_emg_param_3_5);
      #line 6660 
      break;
      #line 6662 
      default: 
               #line 6662 
      ;
      #line 6662 
      __VERIFIER_assume(0);
    }
    #line 6665 
    if (emg_repeat_cnt_call_37 > 0) {
      #line 6666 
      emg_repeat_cnt_call_37 --;
      #line 6668 
      goto emg_call_37;
    }
    else 
         #line 6670 
         __VERIFIER_assume(0);
  }
  else {
    #line 6676 
    if (emg_37_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 6677 
      (*(emg_37_container->release))(emg_37_resource_1,emg_37_resource_0);
    #line 6681 
    if (emg_repeat_cnt_main_37_0 > 0) {
      #line 6682 
      emg_repeat_cnt_main_37_0 --;
      #line 6684 
      goto emg_main_37;
    }
    else 
         #line 6686 
         __VERIFIER_assume(0);
  }
  #line 6692 
  return (void *)0;
  #line 6695 
  emg_main_37: 
               #line 6695 
  ;
  #line 6696 
  if (ldv_undef_int() != 0) {
    #line 6698 
    emg_37_ret = simple_open(emg_37_resource_1,emg_37_resource_0);
    #line 6703 
    emg_37_ret = ldv_filter_err_code(emg_37_ret);
    #line 6706 
    if (ldv_undef_int() != 0) {
      #line 6708 
      __VERIFIER_assume(emg_37_ret == 0);
      #line 6712 
      goto emg_call_37;
    }
    else {
      #line 6717 
      __VERIFIER_assume(emg_37_ret != 0);
      #line 6720 
      if (emg_repeat_cnt_main_37_1 > 0) {
        #line 6721 
        emg_repeat_cnt_main_37_1 --;
        #line 6723 
        goto emg_main_37;
      }
      else 
           #line 6725 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 6732 
       ldv_free((void *)emg_37_resource_0);
  #line 6740 
  return (void *)0;
}

#line 6745  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_rx_rdys_ops(void *arg0)
{
  #line 6748 
  struct file_operations *emg_38_container;
  #line 6749 
  long long emg_38_emg_param_1_0;
  #line 6750 
  char *emg_38_emg_param_1_2;
  #line 6751 
  char *emg_38_emg_param_1_4;
  #line 6752 
  int emg_38_emg_param_2_1;
  #line 6753 
  long long *emg_38_emg_param_3_3;
  #line 6754 
  long long *emg_38_emg_param_3_5;
  #line 6755 
  struct file *emg_38_resource_0;
  #line 6756 
  struct inode *emg_38_resource_1;
  #line 6757 
  int emg_38_ret;
  #line 6758 
  unsigned long emg_38_size_cnt;
  #line 6759 
  int emg_repeat_cnt_call_38 = 1;
  #line 6760 
  int emg_repeat_cnt_main_38_0 = 1;
  #line 6761 
  int emg_repeat_cnt_main_38_1 = 1;
  #line 6763 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 6767 
  emg_38_ret = ldv_undef_int();
  #line 6768 
  emg_38_container = emg_alias_isr_rx_rdys_ops;
  #line 6769 
  emg_38_ret = ldv_undef_int();
  #line 6771 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_rx_rdys_ops);
  #line 6773 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 6774 
    emg_38_container = data->arg0;
    #line 6775 
    ldv_free((void *)data);
  }
  #line 6780 
  emg_38_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 6781 
  emg_38_size_cnt = (unsigned long)ldv_undef_int();
  #line 6785 
  goto emg_main_38;
  #line 6789 
  return (void *)0;
  #line 6792 
  emg_call_38: 
               #line 6792 
  ;
  #line 6793 
  if (ldv_undef_int() != 0) {
    #line 6794 
    switch (ldv_undef_int()) {
      #line 6795 
      case 0: 
              #line 6795 
      ;
      #line 6797 
      emg_38_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6797 
      emg_38_emg_param_1_2 = emg_38_emg_param_1_2;
      #line 6798 
      emg_38_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6798 
      emg_38_emg_param_3_3 = emg_38_emg_param_3_3;
      #line 6802 
      emg_wrapper_isr_rx_rdys_read(emg_38_resource_0,emg_38_emg_param_1_2,emg_38_size_cnt,emg_38_emg_param_3_3);
      #line 6806 
      ldv_free((void *)emg_38_emg_param_1_2);
      #line 6807 
      ldv_free((void *)emg_38_emg_param_3_3);
      #line 6809 
      break;
      #line 6811 
      case 1: 
              #line 6811 
      ;
      #line 6813 
      generic_file_llseek(emg_38_resource_0,emg_38_emg_param_1_0,emg_38_emg_param_2_1);
      #line 6815 
      break;
      #line 6817 
      case 2: 
              #line 6817 
      ;
      #line 6824 
      __VERIFIER_assume(emg_38_size_cnt <= 2147479552UL);
      #line 6825 
      emg_38_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6825 
      emg_38_emg_param_1_4 = emg_38_emg_param_1_4;
      #line 6826 
      emg_38_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6826 
      emg_38_emg_param_3_5 = emg_38_emg_param_3_5;
      #line 6830 
      if (emg_38_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 6831 
        (*(emg_38_container->write))(emg_38_resource_0,emg_38_emg_param_1_4,emg_38_size_cnt,emg_38_emg_param_3_5);
      #line 6836 
      ldv_free((void *)emg_38_emg_param_1_4);
      #line 6837 
      ldv_free((void *)emg_38_emg_param_3_5);
      #line 6839 
      break;
      #line 6841 
      default: 
               #line 6841 
      ;
      #line 6841 
      __VERIFIER_assume(0);
    }
    #line 6844 
    if (emg_repeat_cnt_call_38 > 0) {
      #line 6845 
      emg_repeat_cnt_call_38 --;
      #line 6847 
      goto emg_call_38;
    }
    else 
         #line 6849 
         __VERIFIER_assume(0);
  }
  else {
    #line 6855 
    if (emg_38_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 6856 
      (*(emg_38_container->release))(emg_38_resource_1,emg_38_resource_0);
    #line 6860 
    if (emg_repeat_cnt_main_38_1 > 0) {
      #line 6861 
      emg_repeat_cnt_main_38_1 --;
      #line 6863 
      goto emg_main_38;
    }
    else 
         #line 6865 
         __VERIFIER_assume(0);
  }
  #line 6871 
  return (void *)0;
  #line 6874 
  emg_main_38: 
               #line 6874 
  ;
  #line 6875 
  if (ldv_undef_int() != 0) {
    #line 6877 
    emg_38_ret = simple_open(emg_38_resource_1,emg_38_resource_0);
    #line 6882 
    emg_38_ret = ldv_filter_err_code(emg_38_ret);
    #line 6885 
    if (ldv_undef_int() != 0) {
      #line 6887 
      __VERIFIER_assume(emg_38_ret == 0);
      #line 6891 
      goto emg_call_38;
    }
    else {
      #line 6896 
      __VERIFIER_assume(emg_38_ret != 0);
      #line 6899 
      if (emg_repeat_cnt_main_38_0 > 0) {
        #line 6900 
        emg_repeat_cnt_main_38_0 --;
        #line 6902 
        goto emg_main_38;
      }
      else 
           #line 6904 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 6911 
       ldv_free((void *)emg_38_resource_0);
  #line 6919 
  return (void *)0;
}

#line 6924  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_tx_exch_complete_ops(void *arg0)
{
  #line 6927 
  struct file_operations *emg_39_container;
  #line 6928 
  long long emg_39_emg_param_1_0;
  #line 6929 
  char *emg_39_emg_param_1_2;
  #line 6930 
  char *emg_39_emg_param_1_4;
  #line 6931 
  int emg_39_emg_param_2_1;
  #line 6932 
  long long *emg_39_emg_param_3_3;
  #line 6933 
  long long *emg_39_emg_param_3_5;
  #line 6934 
  struct file *emg_39_resource_0;
  #line 6935 
  struct inode *emg_39_resource_1;
  #line 6936 
  int emg_39_ret;
  #line 6937 
  unsigned long emg_39_size_cnt;
  #line 6938 
  int emg_repeat_cnt_main_39_1 = 1;
  #line 6939 
  int emg_repeat_cnt_main_39_0 = 1;
  #line 6940 
  int emg_repeat_cnt_call_39 = 1;
  #line 6942 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 6946 
  emg_39_ret = ldv_undef_int();
  #line 6947 
  emg_39_container = emg_alias_isr_tx_exch_complete_ops;
  #line 6948 
  emg_39_ret = ldv_undef_int();
  #line 6950 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_tx_exch_complete_ops);
  #line 6952 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 6953 
    emg_39_container = data->arg0;
    #line 6954 
    ldv_free((void *)data);
  }
  #line 6959 
  emg_39_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 6960 
  emg_39_size_cnt = (unsigned long)ldv_undef_int();
  #line 6964 
  goto emg_main_39;
  #line 6968 
  return (void *)0;
  #line 6971 
  emg_call_39: 
               #line 6971 
  ;
  #line 6972 
  if (ldv_undef_int() != 0) {
    #line 6973 
    switch (ldv_undef_int()) {
      #line 6974 
      case 0: 
              #line 6974 
      ;
      #line 6976 
      emg_39_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6976 
      emg_39_emg_param_1_2 = emg_39_emg_param_1_2;
      #line 6977 
      emg_39_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6977 
      emg_39_emg_param_3_3 = emg_39_emg_param_3_3;
      #line 6981 
      emg_wrapper_isr_tx_exch_complete_read(emg_39_resource_0,emg_39_emg_param_1_2,emg_39_size_cnt,emg_39_emg_param_3_3);
      #line 6985 
      ldv_free((void *)emg_39_emg_param_1_2);
      #line 6986 
      ldv_free((void *)emg_39_emg_param_3_3);
      #line 6988 
      break;
      #line 6990 
      case 1: 
              #line 6990 
      ;
      #line 6992 
      generic_file_llseek(emg_39_resource_0,emg_39_emg_param_1_0,emg_39_emg_param_2_1);
      #line 6994 
      break;
      #line 6996 
      case 2: 
              #line 6996 
      ;
      #line 7003 
      __VERIFIER_assume(emg_39_size_cnt <= 2147479552UL);
      #line 7004 
      emg_39_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7004 
      emg_39_emg_param_1_4 = emg_39_emg_param_1_4;
      #line 7005 
      emg_39_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7005 
      emg_39_emg_param_3_5 = emg_39_emg_param_3_5;
      #line 7009 
      if (emg_39_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 7010 
        (*(emg_39_container->write))(emg_39_resource_0,emg_39_emg_param_1_4,emg_39_size_cnt,emg_39_emg_param_3_5);
      #line 7015 
      ldv_free((void *)emg_39_emg_param_1_4);
      #line 7016 
      ldv_free((void *)emg_39_emg_param_3_5);
      #line 7018 
      break;
      #line 7020 
      default: 
               #line 7020 
      ;
      #line 7020 
      __VERIFIER_assume(0);
    }
    #line 7023 
    if (emg_repeat_cnt_call_39 > 0) {
      #line 7024 
      emg_repeat_cnt_call_39 --;
      #line 7026 
      goto emg_call_39;
    }
    else 
         #line 7028 
         __VERIFIER_assume(0);
  }
  else {
    #line 7034 
    if (emg_39_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 7035 
      (*(emg_39_container->release))(emg_39_resource_1,emg_39_resource_0);
    #line 7039 
    if (emg_repeat_cnt_main_39_0 > 0) {
      #line 7040 
      emg_repeat_cnt_main_39_0 --;
      #line 7042 
      goto emg_main_39;
    }
    else 
         #line 7044 
         __VERIFIER_assume(0);
  }
  #line 7050 
  return (void *)0;
  #line 7053 
  emg_main_39: 
               #line 7053 
  ;
  #line 7054 
  if (ldv_undef_int() != 0) {
    #line 7056 
    emg_39_ret = simple_open(emg_39_resource_1,emg_39_resource_0);
    #line 7061 
    emg_39_ret = ldv_filter_err_code(emg_39_ret);
    #line 7064 
    if (ldv_undef_int() != 0) {
      #line 7066 
      __VERIFIER_assume(emg_39_ret == 0);
      #line 7070 
      goto emg_call_39;
    }
    else {
      #line 7075 
      __VERIFIER_assume(emg_39_ret != 0);
      #line 7078 
      if (emg_repeat_cnt_main_39_1 > 0) {
        #line 7079 
        emg_repeat_cnt_main_39_1 --;
        #line 7081 
        goto emg_main_39;
      }
      else 
           #line 7083 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 7090 
       ldv_free((void *)emg_39_resource_0);
  #line 7098 
  return (void *)0;
}

#line 7103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_tx_procs_ops(void *arg0)
{
  #line 7106 
  struct file_operations *emg_40_container;
  #line 7107 
  long long emg_40_emg_param_1_0;
  #line 7108 
  char *emg_40_emg_param_1_2;
  #line 7109 
  char *emg_40_emg_param_1_4;
  #line 7110 
  int emg_40_emg_param_2_1;
  #line 7111 
  long long *emg_40_emg_param_3_3;
  #line 7112 
  long long *emg_40_emg_param_3_5;
  #line 7113 
  struct file *emg_40_resource_0;
  #line 7114 
  struct inode *emg_40_resource_1;
  #line 7115 
  int emg_40_ret;
  #line 7116 
  unsigned long emg_40_size_cnt;
  #line 7117 
  int emg_repeat_cnt_call_40 = 1;
  #line 7118 
  int emg_repeat_cnt_main_40_1 = 1;
  #line 7119 
  int emg_repeat_cnt_main_40_0 = 1;
  #line 7121 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 7125 
  emg_40_ret = ldv_undef_int();
  #line 7126 
  emg_40_container = emg_alias_isr_tx_procs_ops;
  #line 7127 
  emg_40_ret = ldv_undef_int();
  #line 7129 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_tx_procs_ops);
  #line 7131 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 7132 
    emg_40_container = data->arg0;
    #line 7133 
    ldv_free((void *)data);
  }
  #line 7138 
  emg_40_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 7139 
  emg_40_size_cnt = (unsigned long)ldv_undef_int();
  #line 7143 
  goto emg_main_40;
  #line 7147 
  return (void *)0;
  #line 7150 
  emg_call_40: 
               #line 7150 
  ;
  #line 7151 
  if (ldv_undef_int() != 0) {
    #line 7152 
    switch (ldv_undef_int()) {
      #line 7153 
      case 0: 
              #line 7153 
      ;
      #line 7155 
      emg_40_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7155 
      emg_40_emg_param_1_2 = emg_40_emg_param_1_2;
      #line 7156 
      emg_40_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7156 
      emg_40_emg_param_3_3 = emg_40_emg_param_3_3;
      #line 7160 
      emg_wrapper_isr_tx_procs_read(emg_40_resource_0,emg_40_emg_param_1_2,emg_40_size_cnt,emg_40_emg_param_3_3);
      #line 7164 
      ldv_free((void *)emg_40_emg_param_1_2);
      #line 7165 
      ldv_free((void *)emg_40_emg_param_3_3);
      #line 7167 
      break;
      #line 7169 
      case 1: 
              #line 7169 
      ;
      #line 7171 
      generic_file_llseek(emg_40_resource_0,emg_40_emg_param_1_0,emg_40_emg_param_2_1);
      #line 7173 
      break;
      #line 7175 
      case 2: 
              #line 7175 
      ;
      #line 7182 
      __VERIFIER_assume(emg_40_size_cnt <= 2147479552UL);
      #line 7183 
      emg_40_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7183 
      emg_40_emg_param_1_4 = emg_40_emg_param_1_4;
      #line 7184 
      emg_40_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7184 
      emg_40_emg_param_3_5 = emg_40_emg_param_3_5;
      #line 7188 
      if (emg_40_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 7189 
        (*(emg_40_container->write))(emg_40_resource_0,emg_40_emg_param_1_4,emg_40_size_cnt,emg_40_emg_param_3_5);
      #line 7194 
      ldv_free((void *)emg_40_emg_param_1_4);
      #line 7195 
      ldv_free((void *)emg_40_emg_param_3_5);
      #line 7197 
      break;
      #line 7199 
      default: 
               #line 7199 
      ;
      #line 7199 
      __VERIFIER_assume(0);
    }
    #line 7202 
    if (emg_repeat_cnt_call_40 > 0) {
      #line 7203 
      emg_repeat_cnt_call_40 --;
      #line 7205 
      goto emg_call_40;
    }
    else 
         #line 7207 
         __VERIFIER_assume(0);
  }
  else {
    #line 7213 
    if (emg_40_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 7214 
      (*(emg_40_container->release))(emg_40_resource_1,emg_40_resource_0);
    #line 7218 
    if (emg_repeat_cnt_main_40_0 > 0) {
      #line 7219 
      emg_repeat_cnt_main_40_0 --;
      #line 7221 
      goto emg_main_40;
    }
    else 
         #line 7223 
         __VERIFIER_assume(0);
  }
  #line 7229 
  return (void *)0;
  #line 7232 
  emg_main_40: 
               #line 7232 
  ;
  #line 7233 
  if (ldv_undef_int() != 0) {
    #line 7235 
    emg_40_ret = simple_open(emg_40_resource_1,emg_40_resource_0);
    #line 7240 
    emg_40_ret = ldv_filter_err_code(emg_40_ret);
    #line 7243 
    if (ldv_undef_int() != 0) {
      #line 7245 
      __VERIFIER_assume(emg_40_ret == 0);
      #line 7249 
      goto emg_call_40;
    }
    else {
      #line 7254 
      __VERIFIER_assume(emg_40_ret != 0);
      #line 7257 
      if (emg_repeat_cnt_main_40_1 > 0) {
        #line 7258 
        emg_repeat_cnt_main_40_1 --;
        #line 7260 
        goto emg_main_40;
      }
      else 
           #line 7262 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 7269 
       ldv_free((void *)emg_40_resource_0);
  #line 7277 
  return (void *)0;
}

#line 7282  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_wakeups_ops(void *arg0)
{
  #line 7285 
  struct file_operations *emg_41_container;
  #line 7286 
  long long emg_41_emg_param_1_0;
  #line 7287 
  char *emg_41_emg_param_1_2;
  #line 7288 
  char *emg_41_emg_param_1_4;
  #line 7289 
  int emg_41_emg_param_2_1;
  #line 7290 
  long long *emg_41_emg_param_3_3;
  #line 7291 
  long long *emg_41_emg_param_3_5;
  #line 7292 
  struct file *emg_41_resource_0;
  #line 7293 
  struct inode *emg_41_resource_1;
  #line 7294 
  int emg_41_ret;
  #line 7295 
  unsigned long emg_41_size_cnt;
  #line 7296 
  int emg_repeat_cnt_call_41 = 1;
  #line 7297 
  int emg_repeat_cnt_main_41_0 = 1;
  #line 7298 
  int emg_repeat_cnt_main_41_1 = 1;
  #line 7300 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 7304 
  emg_41_ret = ldv_undef_int();
  #line 7305 
  emg_41_container = emg_alias_isr_wakeups_ops;
  #line 7306 
  emg_41_ret = ldv_undef_int();
  #line 7308 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_wakeups_ops);
  #line 7310 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 7311 
    emg_41_container = data->arg0;
    #line 7312 
    ldv_free((void *)data);
  }
  #line 7317 
  emg_41_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 7318 
  emg_41_size_cnt = (unsigned long)ldv_undef_int();
  #line 7322 
  goto emg_main_41;
  #line 7326 
  return (void *)0;
  #line 7329 
  emg_call_41: 
               #line 7329 
  ;
  #line 7330 
  if (ldv_undef_int() != 0) {
    #line 7331 
    switch (ldv_undef_int()) {
      #line 7332 
      case 0: 
              #line 7332 
      ;
      #line 7334 
      emg_41_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7334 
      emg_41_emg_param_1_2 = emg_41_emg_param_1_2;
      #line 7335 
      emg_41_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7335 
      emg_41_emg_param_3_3 = emg_41_emg_param_3_3;
      #line 7339 
      emg_wrapper_isr_wakeups_read(emg_41_resource_0,emg_41_emg_param_1_2,emg_41_size_cnt,emg_41_emg_param_3_3);
      #line 7343 
      ldv_free((void *)emg_41_emg_param_1_2);
      #line 7344 
      ldv_free((void *)emg_41_emg_param_3_3);
      #line 7346 
      break;
      #line 7348 
      case 1: 
              #line 7348 
      ;
      #line 7350 
      generic_file_llseek(emg_41_resource_0,emg_41_emg_param_1_0,emg_41_emg_param_2_1);
      #line 7352 
      break;
      #line 7354 
      case 2: 
              #line 7354 
      ;
      #line 7361 
      __VERIFIER_assume(emg_41_size_cnt <= 2147479552UL);
      #line 7362 
      emg_41_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7362 
      emg_41_emg_param_1_4 = emg_41_emg_param_1_4;
      #line 7363 
      emg_41_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7363 
      emg_41_emg_param_3_5 = emg_41_emg_param_3_5;
      #line 7367 
      if (emg_41_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 7368 
        (*(emg_41_container->write))(emg_41_resource_0,emg_41_emg_param_1_4,emg_41_size_cnt,emg_41_emg_param_3_5);
      #line 7373 
      ldv_free((void *)emg_41_emg_param_1_4);
      #line 7374 
      ldv_free((void *)emg_41_emg_param_3_5);
      #line 7376 
      break;
      #line 7378 
      default: 
               #line 7378 
      ;
      #line 7378 
      __VERIFIER_assume(0);
    }
    #line 7381 
    if (emg_repeat_cnt_call_41 > 0) {
      #line 7382 
      emg_repeat_cnt_call_41 --;
      #line 7384 
      goto emg_call_41;
    }
    else 
         #line 7386 
         __VERIFIER_assume(0);
  }
  else {
    #line 7392 
    if (emg_41_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 7393 
      (*(emg_41_container->release))(emg_41_resource_1,emg_41_resource_0);
    #line 7397 
    if (emg_repeat_cnt_main_41_1 > 0) {
      #line 7398 
      emg_repeat_cnt_main_41_1 --;
      #line 7400 
      goto emg_main_41;
    }
    else 
         #line 7402 
         __VERIFIER_assume(0);
  }
  #line 7408 
  return (void *)0;
  #line 7411 
  emg_main_41: 
               #line 7411 
  ;
  #line 7412 
  if (ldv_undef_int() != 0) {
    #line 7414 
    emg_41_ret = simple_open(emg_41_resource_1,emg_41_resource_0);
    #line 7419 
    emg_41_ret = ldv_filter_err_code(emg_41_ret);
    #line 7422 
    if (ldv_undef_int() != 0) {
      #line 7424 
      __VERIFIER_assume(emg_41_ret == 0);
      #line 7428 
      goto emg_call_41;
    }
    else {
      #line 7433 
      __VERIFIER_assume(emg_41_ret != 0);
      #line 7436 
      if (emg_repeat_cnt_main_41_0 > 0) {
        #line 7437 
        emg_repeat_cnt_main_41_0 --;
        #line 7439 
        goto emg_main_41;
      }
      else 
           #line 7441 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 7448 
       ldv_free((void *)emg_41_resource_0);
  #line 7456 
  return (void *)0;
}

#line 7461  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mic_calc_failure_ops(void *arg0)
{
  #line 7464 
  struct file_operations *emg_42_container;
  #line 7465 
  long long emg_42_emg_param_1_0;
  #line 7466 
  char *emg_42_emg_param_1_2;
  #line 7467 
  char *emg_42_emg_param_1_4;
  #line 7468 
  int emg_42_emg_param_2_1;
  #line 7469 
  long long *emg_42_emg_param_3_3;
  #line 7470 
  long long *emg_42_emg_param_3_5;
  #line 7471 
  struct file *emg_42_resource_0;
  #line 7472 
  struct inode *emg_42_resource_1;
  #line 7473 
  int emg_42_ret;
  #line 7474 
  unsigned long emg_42_size_cnt;
  #line 7475 
  int emg_repeat_cnt_main_42_1 = 1;
  #line 7476 
  int emg_repeat_cnt_main_42_0 = 1;
  #line 7477 
  int emg_repeat_cnt_call_42 = 1;
  #line 7479 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 7483 
  emg_42_ret = ldv_undef_int();
  #line 7484 
  emg_42_container = emg_alias_mic_calc_failure_ops;
  #line 7485 
  emg_42_ret = ldv_undef_int();
  #line 7487 
  __VERIFIER_assume(data->arg0 == emg_alias_mic_calc_failure_ops);
  #line 7489 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 7490 
    emg_42_container = data->arg0;
    #line 7491 
    ldv_free((void *)data);
  }
  #line 7496 
  emg_42_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 7497 
  emg_42_size_cnt = (unsigned long)ldv_undef_int();
  #line 7501 
  goto emg_main_42;
  #line 7505 
  return (void *)0;
  #line 7508 
  emg_call_42: 
               #line 7508 
  ;
  #line 7509 
  if (ldv_undef_int() != 0) {
    #line 7510 
    switch (ldv_undef_int()) {
      #line 7511 
      case 0: 
              #line 7511 
      ;
      #line 7513 
      emg_42_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7513 
      emg_42_emg_param_1_2 = emg_42_emg_param_1_2;
      #line 7514 
      emg_42_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7514 
      emg_42_emg_param_3_3 = emg_42_emg_param_3_3;
      #line 7518 
      emg_wrapper_mic_calc_failure_read(emg_42_resource_0,emg_42_emg_param_1_2,emg_42_size_cnt,emg_42_emg_param_3_3);
      #line 7522 
      ldv_free((void *)emg_42_emg_param_1_2);
      #line 7523 
      ldv_free((void *)emg_42_emg_param_3_3);
      #line 7525 
      break;
      #line 7527 
      case 1: 
              #line 7527 
      ;
      #line 7529 
      generic_file_llseek(emg_42_resource_0,emg_42_emg_param_1_0,emg_42_emg_param_2_1);
      #line 7531 
      break;
      #line 7533 
      case 2: 
              #line 7533 
      ;
      #line 7540 
      __VERIFIER_assume(emg_42_size_cnt <= 2147479552UL);
      #line 7541 
      emg_42_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7541 
      emg_42_emg_param_1_4 = emg_42_emg_param_1_4;
      #line 7542 
      emg_42_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7542 
      emg_42_emg_param_3_5 = emg_42_emg_param_3_5;
      #line 7546 
      if (emg_42_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 7547 
        (*(emg_42_container->write))(emg_42_resource_0,emg_42_emg_param_1_4,emg_42_size_cnt,emg_42_emg_param_3_5);
      #line 7552 
      ldv_free((void *)emg_42_emg_param_1_4);
      #line 7553 
      ldv_free((void *)emg_42_emg_param_3_5);
      #line 7555 
      break;
      #line 7557 
      default: 
               #line 7557 
      ;
      #line 7557 
      __VERIFIER_assume(0);
    }
    #line 7560 
    if (emg_repeat_cnt_call_42 > 0) {
      #line 7561 
      emg_repeat_cnt_call_42 --;
      #line 7563 
      goto emg_call_42;
    }
    else 
         #line 7565 
         __VERIFIER_assume(0);
  }
  else {
    #line 7571 
    if (emg_42_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 7572 
      (*(emg_42_container->release))(emg_42_resource_1,emg_42_resource_0);
    #line 7576 
    if (emg_repeat_cnt_main_42_1 > 0) {
      #line 7577 
      emg_repeat_cnt_main_42_1 --;
      #line 7579 
      goto emg_main_42;
    }
    else 
         #line 7581 
         __VERIFIER_assume(0);
  }
  #line 7587 
  return (void *)0;
  #line 7590 
  emg_main_42: 
               #line 7590 
  ;
  #line 7591 
  if (ldv_undef_int() != 0) {
    #line 7593 
    emg_42_ret = simple_open(emg_42_resource_1,emg_42_resource_0);
    #line 7598 
    emg_42_ret = ldv_filter_err_code(emg_42_ret);
    #line 7601 
    if (ldv_undef_int() != 0) {
      #line 7603 
      __VERIFIER_assume(emg_42_ret == 0);
      #line 7607 
      goto emg_call_42;
    }
    else {
      #line 7612 
      __VERIFIER_assume(emg_42_ret != 0);
      #line 7615 
      if (emg_repeat_cnt_main_42_0 > 0) {
        #line 7616 
        emg_repeat_cnt_main_42_0 --;
        #line 7618 
        goto emg_main_42;
      }
      else 
           #line 7620 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 7627 
       ldv_free((void *)emg_42_resource_0);
  #line 7635 
  return (void *)0;
}

#line 7640  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mic_rx_pkts_ops(void *arg0)
{
  #line 7643 
  struct file_operations *emg_43_container;
  #line 7644 
  long long emg_43_emg_param_1_0;
  #line 7645 
  char *emg_43_emg_param_1_2;
  #line 7646 
  char *emg_43_emg_param_1_4;
  #line 7647 
  int emg_43_emg_param_2_1;
  #line 7648 
  long long *emg_43_emg_param_3_3;
  #line 7649 
  long long *emg_43_emg_param_3_5;
  #line 7650 
  struct file *emg_43_resource_0;
  #line 7651 
  struct inode *emg_43_resource_1;
  #line 7652 
  int emg_43_ret;
  #line 7653 
  unsigned long emg_43_size_cnt;
  #line 7654 
  int emg_repeat_cnt_call_43 = 1;
  #line 7655 
  int emg_repeat_cnt_main_43_1 = 1;
  #line 7656 
  int emg_repeat_cnt_main_43_0 = 1;
  #line 7658 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 7662 
  emg_43_ret = ldv_undef_int();
  #line 7663 
  emg_43_container = emg_alias_mic_rx_pkts_ops;
  #line 7664 
  emg_43_ret = ldv_undef_int();
  #line 7666 
  __VERIFIER_assume(data->arg0 == emg_alias_mic_rx_pkts_ops);
  #line 7668 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 7669 
    emg_43_container = data->arg0;
    #line 7670 
    ldv_free((void *)data);
  }
  #line 7675 
  emg_43_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 7676 
  emg_43_size_cnt = (unsigned long)ldv_undef_int();
  #line 7680 
  goto emg_main_43;
  #line 7684 
  return (void *)0;
  #line 7687 
  emg_call_43: 
               #line 7687 
  ;
  #line 7688 
  if (ldv_undef_int() != 0) {
    #line 7689 
    switch (ldv_undef_int()) {
      #line 7690 
      case 0: 
              #line 7690 
      ;
      #line 7692 
      emg_43_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7692 
      emg_43_emg_param_1_2 = emg_43_emg_param_1_2;
      #line 7693 
      emg_43_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7693 
      emg_43_emg_param_3_3 = emg_43_emg_param_3_3;
      #line 7697 
      emg_wrapper_mic_rx_pkts_read(emg_43_resource_0,emg_43_emg_param_1_2,emg_43_size_cnt,emg_43_emg_param_3_3);
      #line 7701 
      ldv_free((void *)emg_43_emg_param_1_2);
      #line 7702 
      ldv_free((void *)emg_43_emg_param_3_3);
      #line 7704 
      break;
      #line 7706 
      case 1: 
              #line 7706 
      ;
      #line 7708 
      generic_file_llseek(emg_43_resource_0,emg_43_emg_param_1_0,emg_43_emg_param_2_1);
      #line 7710 
      break;
      #line 7712 
      case 2: 
              #line 7712 
      ;
      #line 7719 
      __VERIFIER_assume(emg_43_size_cnt <= 2147479552UL);
      #line 7720 
      emg_43_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7720 
      emg_43_emg_param_1_4 = emg_43_emg_param_1_4;
      #line 7721 
      emg_43_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7721 
      emg_43_emg_param_3_5 = emg_43_emg_param_3_5;
      #line 7725 
      if (emg_43_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 7726 
        (*(emg_43_container->write))(emg_43_resource_0,emg_43_emg_param_1_4,emg_43_size_cnt,emg_43_emg_param_3_5);
      #line 7731 
      ldv_free((void *)emg_43_emg_param_1_4);
      #line 7732 
      ldv_free((void *)emg_43_emg_param_3_5);
      #line 7734 
      break;
      #line 7736 
      default: 
               #line 7736 
      ;
      #line 7736 
      __VERIFIER_assume(0);
    }
    #line 7739 
    if (emg_repeat_cnt_call_43 > 0) {
      #line 7740 
      emg_repeat_cnt_call_43 --;
      #line 7742 
      goto emg_call_43;
    }
    else 
         #line 7744 
         __VERIFIER_assume(0);
  }
  else {
    #line 7750 
    if (emg_43_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 7751 
      (*(emg_43_container->release))(emg_43_resource_1,emg_43_resource_0);
    #line 7755 
    if (emg_repeat_cnt_main_43_0 > 0) {
      #line 7756 
      emg_repeat_cnt_main_43_0 --;
      #line 7758 
      goto emg_main_43;
    }
    else 
         #line 7760 
         __VERIFIER_assume(0);
  }
  #line 7766 
  return (void *)0;
  #line 7769 
  emg_main_43: 
               #line 7769 
  ;
  #line 7770 
  if (ldv_undef_int() != 0) {
    #line 7772 
    emg_43_ret = simple_open(emg_43_resource_1,emg_43_resource_0);
    #line 7777 
    emg_43_ret = ldv_filter_err_code(emg_43_ret);
    #line 7780 
    if (ldv_undef_int() != 0) {
      #line 7782 
      __VERIFIER_assume(emg_43_ret == 0);
      #line 7786 
      goto emg_call_43;
    }
    else {
      #line 7791 
      __VERIFIER_assume(emg_43_ret != 0);
      #line 7794 
      if (emg_repeat_cnt_main_43_1 > 0) {
        #line 7795 
        emg_repeat_cnt_main_43_1 --;
        #line 7797 
        goto emg_main_43;
      }
      else 
           #line 7799 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 7806 
       ldv_free((void *)emg_43_resource_0);
  #line 7814 
  return (void *)0;
}

#line 7819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_ps_pspoll_max_apturn_ops(void *arg0)
{
  #line 7822 
  struct file_operations *emg_44_container;
  #line 7823 
  long long emg_44_emg_param_1_0;
  #line 7824 
  char *emg_44_emg_param_1_2;
  #line 7825 
  char *emg_44_emg_param_1_4;
  #line 7826 
  int emg_44_emg_param_2_1;
  #line 7827 
  long long *emg_44_emg_param_3_3;
  #line 7828 
  long long *emg_44_emg_param_3_5;
  #line 7829 
  struct file *emg_44_resource_0;
  #line 7830 
  struct inode *emg_44_resource_1;
  #line 7831 
  int emg_44_ret;
  #line 7832 
  unsigned long emg_44_size_cnt;
  #line 7833 
  int emg_repeat_cnt_main_44_1 = 1;
  #line 7834 
  int emg_repeat_cnt_main_44_0 = 1;
  #line 7835 
  int emg_repeat_cnt_call_44 = 1;
  #line 7837 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 7841 
  emg_44_ret = ldv_undef_int();
  #line 7842 
  emg_44_container = emg_alias_ps_pspoll_max_apturn_ops;
  #line 7843 
  emg_44_ret = ldv_undef_int();
  #line 7845 
  __VERIFIER_assume(data->arg0 == emg_alias_ps_pspoll_max_apturn_ops);
  #line 7847 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 7848 
    emg_44_container = data->arg0;
    #line 7849 
    ldv_free((void *)data);
  }
  #line 7854 
  emg_44_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 7855 
  emg_44_size_cnt = (unsigned long)ldv_undef_int();
  #line 7859 
  goto emg_main_44;
  #line 7863 
  return (void *)0;
  #line 7866 
  emg_call_44: 
               #line 7866 
  ;
  #line 7867 
  if (ldv_undef_int() != 0) {
    #line 7868 
    switch (ldv_undef_int()) {
      #line 7869 
      case 0: 
              #line 7869 
      ;
      #line 7871 
      emg_44_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7871 
      emg_44_emg_param_1_2 = emg_44_emg_param_1_2;
      #line 7872 
      emg_44_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7872 
      emg_44_emg_param_3_3 = emg_44_emg_param_3_3;
      #line 7876 
      emg_wrapper_ps_pspoll_max_apturn_read(emg_44_resource_0,emg_44_emg_param_1_2,emg_44_size_cnt,emg_44_emg_param_3_3);
      #line 7880 
      ldv_free((void *)emg_44_emg_param_1_2);
      #line 7881 
      ldv_free((void *)emg_44_emg_param_3_3);
      #line 7883 
      break;
      #line 7885 
      case 1: 
              #line 7885 
      ;
      #line 7887 
      generic_file_llseek(emg_44_resource_0,emg_44_emg_param_1_0,emg_44_emg_param_2_1);
      #line 7889 
      break;
      #line 7891 
      case 2: 
              #line 7891 
      ;
      #line 7898 
      __VERIFIER_assume(emg_44_size_cnt <= 2147479552UL);
      #line 7899 
      emg_44_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7899 
      emg_44_emg_param_1_4 = emg_44_emg_param_1_4;
      #line 7900 
      emg_44_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7900 
      emg_44_emg_param_3_5 = emg_44_emg_param_3_5;
      #line 7904 
      if (emg_44_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 7905 
        (*(emg_44_container->write))(emg_44_resource_0,emg_44_emg_param_1_4,emg_44_size_cnt,emg_44_emg_param_3_5);
      #line 7910 
      ldv_free((void *)emg_44_emg_param_1_4);
      #line 7911 
      ldv_free((void *)emg_44_emg_param_3_5);
      #line 7913 
      break;
      #line 7915 
      default: 
               #line 7915 
      ;
      #line 7915 
      __VERIFIER_assume(0);
    }
    #line 7918 
    if (emg_repeat_cnt_call_44 > 0) {
      #line 7919 
      emg_repeat_cnt_call_44 --;
      #line 7921 
      goto emg_call_44;
    }
    else 
         #line 7923 
         __VERIFIER_assume(0);
  }
  else {
    #line 7929 
    if (emg_44_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 7930 
      (*(emg_44_container->release))(emg_44_resource_1,emg_44_resource_0);
    #line 7934 
    if (emg_repeat_cnt_main_44_1 > 0) {
      #line 7935 
      emg_repeat_cnt_main_44_1 --;
      #line 7937 
      goto emg_main_44;
    }
    else 
         #line 7939 
         __VERIFIER_assume(0);
  }
  #line 7945 
  return (void *)0;
  #line 7948 
  emg_main_44: 
               #line 7948 
  ;
  #line 7949 
  if (ldv_undef_int() != 0) {
    #line 7951 
    emg_44_ret = simple_open(emg_44_resource_1,emg_44_resource_0);
    #line 7956 
    emg_44_ret = ldv_filter_err_code(emg_44_ret);
    #line 7959 
    if (ldv_undef_int() != 0) {
      #line 7961 
      __VERIFIER_assume(emg_44_ret == 0);
      #line 7965 
      goto emg_call_44;
    }
    else {
      #line 7970 
      __VERIFIER_assume(emg_44_ret != 0);
      #line 7973 
      if (emg_repeat_cnt_main_44_0 > 0) {
        #line 7974 
        emg_repeat_cnt_main_44_0 --;
        #line 7976 
        goto emg_main_44;
      }
      else 
           #line 7978 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 7985 
       ldv_free((void *)emg_44_resource_0);
  #line 7993 
  return (void *)0;
}

#line 7998  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_ps_pspoll_timeouts_ops(void *arg0)
{
  #line 8001 
  struct file_operations *emg_45_container;
  #line 8002 
  long long emg_45_emg_param_1_0;
  #line 8003 
  char *emg_45_emg_param_1_2;
  #line 8004 
  char *emg_45_emg_param_1_4;
  #line 8005 
  int emg_45_emg_param_2_1;
  #line 8006 
  long long *emg_45_emg_param_3_3;
  #line 8007 
  long long *emg_45_emg_param_3_5;
  #line 8008 
  struct file *emg_45_resource_0;
  #line 8009 
  struct inode *emg_45_resource_1;
  #line 8010 
  int emg_45_ret;
  #line 8011 
  unsigned long emg_45_size_cnt;
  #line 8012 
  int emg_repeat_cnt_main_45_0 = 1;
  #line 8013 
  int emg_repeat_cnt_call_45 = 1;
  #line 8014 
  int emg_repeat_cnt_main_45_1 = 1;
  #line 8016 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 8020 
  emg_45_ret = ldv_undef_int();
  #line 8021 
  emg_45_container = emg_alias_ps_pspoll_timeouts_ops;
  #line 8022 
  emg_45_ret = ldv_undef_int();
  #line 8024 
  __VERIFIER_assume(data->arg0 == emg_alias_ps_pspoll_timeouts_ops);
  #line 8026 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 8027 
    emg_45_container = data->arg0;
    #line 8028 
    ldv_free((void *)data);
  }
  #line 8033 
  emg_45_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 8034 
  emg_45_size_cnt = (unsigned long)ldv_undef_int();
  #line 8038 
  goto emg_main_45;
  #line 8042 
  return (void *)0;
  #line 8045 
  emg_call_45: 
               #line 8045 
  ;
  #line 8046 
  if (ldv_undef_int() != 0) {
    #line 8047 
    switch (ldv_undef_int()) {
      #line 8048 
      case 0: 
              #line 8048 
      ;
      #line 8050 
      emg_45_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8050 
      emg_45_emg_param_1_2 = emg_45_emg_param_1_2;
      #line 8051 
      emg_45_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8051 
      emg_45_emg_param_3_3 = emg_45_emg_param_3_3;
      #line 8055 
      emg_wrapper_ps_pspoll_timeouts_read(emg_45_resource_0,emg_45_emg_param_1_2,emg_45_size_cnt,emg_45_emg_param_3_3);
      #line 8059 
      ldv_free((void *)emg_45_emg_param_1_2);
      #line 8060 
      ldv_free((void *)emg_45_emg_param_3_3);
      #line 8062 
      break;
      #line 8064 
      case 1: 
              #line 8064 
      ;
      #line 8066 
      generic_file_llseek(emg_45_resource_0,emg_45_emg_param_1_0,emg_45_emg_param_2_1);
      #line 8068 
      break;
      #line 8070 
      case 2: 
              #line 8070 
      ;
      #line 8077 
      __VERIFIER_assume(emg_45_size_cnt <= 2147479552UL);
      #line 8078 
      emg_45_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8078 
      emg_45_emg_param_1_4 = emg_45_emg_param_1_4;
      #line 8079 
      emg_45_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8079 
      emg_45_emg_param_3_5 = emg_45_emg_param_3_5;
      #line 8083 
      if (emg_45_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 8084 
        (*(emg_45_container->write))(emg_45_resource_0,emg_45_emg_param_1_4,emg_45_size_cnt,emg_45_emg_param_3_5);
      #line 8089 
      ldv_free((void *)emg_45_emg_param_1_4);
      #line 8090 
      ldv_free((void *)emg_45_emg_param_3_5);
      #line 8092 
      break;
      #line 8094 
      default: 
               #line 8094 
      ;
      #line 8094 
      __VERIFIER_assume(0);
    }
    #line 8097 
    if (emg_repeat_cnt_call_45 > 0) {
      #line 8098 
      emg_repeat_cnt_call_45 --;
      #line 8100 
      goto emg_call_45;
    }
    else 
         #line 8102 
         __VERIFIER_assume(0);
  }
  else {
    #line 8108 
    if (emg_45_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 8109 
      (*(emg_45_container->release))(emg_45_resource_1,emg_45_resource_0);
    #line 8113 
    if (emg_repeat_cnt_main_45_0 > 0) {
      #line 8114 
      emg_repeat_cnt_main_45_0 --;
      #line 8116 
      goto emg_main_45;
    }
    else 
         #line 8118 
         __VERIFIER_assume(0);
  }
  #line 8124 
  return (void *)0;
  #line 8127 
  emg_main_45: 
               #line 8127 
  ;
  #line 8128 
  if (ldv_undef_int() != 0) {
    #line 8130 
    emg_45_ret = simple_open(emg_45_resource_1,emg_45_resource_0);
    #line 8135 
    emg_45_ret = ldv_filter_err_code(emg_45_ret);
    #line 8138 
    if (ldv_undef_int() != 0) {
      #line 8140 
      __VERIFIER_assume(emg_45_ret == 0);
      #line 8144 
      goto emg_call_45;
    }
    else {
      #line 8149 
      __VERIFIER_assume(emg_45_ret != 0);
      #line 8152 
      if (emg_repeat_cnt_main_45_1 > 0) {
        #line 8153 
        emg_repeat_cnt_main_45_1 --;
        #line 8155 
        goto emg_main_45;
      }
      else 
           #line 8157 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 8164 
       ldv_free((void *)emg_45_resource_0);
  #line 8172 
  return (void *)0;
}

#line 8177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_ps_pspoll_utilization_ops(void *arg0)
{
  #line 8180 
  struct file_operations *emg_46_container;
  #line 8181 
  long long emg_46_emg_param_1_0;
  #line 8182 
  char *emg_46_emg_param_1_2;
  #line 8183 
  char *emg_46_emg_param_1_4;
  #line 8184 
  int emg_46_emg_param_2_1;
  #line 8185 
  long long *emg_46_emg_param_3_3;
  #line 8186 
  long long *emg_46_emg_param_3_5;
  #line 8187 
  struct file *emg_46_resource_0;
  #line 8188 
  struct inode *emg_46_resource_1;
  #line 8189 
  int emg_46_ret;
  #line 8190 
  unsigned long emg_46_size_cnt;
  #line 8191 
  int emg_repeat_cnt_main_46_1 = 1;
  #line 8192 
  int emg_repeat_cnt_call_46 = 1;
  #line 8193 
  int emg_repeat_cnt_main_46_0 = 1;
  #line 8195 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 8199 
  emg_46_ret = ldv_undef_int();
  #line 8200 
  emg_46_container = emg_alias_ps_pspoll_utilization_ops;
  #line 8201 
  emg_46_ret = ldv_undef_int();
  #line 8203 
  __VERIFIER_assume(data->arg0 == emg_alias_ps_pspoll_utilization_ops);
  #line 8205 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 8206 
    emg_46_container = data->arg0;
    #line 8207 
    ldv_free((void *)data);
  }
  #line 8212 
  emg_46_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 8213 
  emg_46_size_cnt = (unsigned long)ldv_undef_int();
  #line 8217 
  goto emg_main_46;
  #line 8221 
  return (void *)0;
  #line 8224 
  emg_call_46: 
               #line 8224 
  ;
  #line 8225 
  if (ldv_undef_int() != 0) {
    #line 8226 
    switch (ldv_undef_int()) {
      #line 8227 
      case 0: 
              #line 8227 
      ;
      #line 8229 
      emg_46_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8229 
      emg_46_emg_param_1_2 = emg_46_emg_param_1_2;
      #line 8230 
      emg_46_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8230 
      emg_46_emg_param_3_3 = emg_46_emg_param_3_3;
      #line 8234 
      emg_wrapper_ps_pspoll_utilization_read(emg_46_resource_0,emg_46_emg_param_1_2,emg_46_size_cnt,emg_46_emg_param_3_3);
      #line 8238 
      ldv_free((void *)emg_46_emg_param_1_2);
      #line 8239 
      ldv_free((void *)emg_46_emg_param_3_3);
      #line 8241 
      break;
      #line 8243 
      case 1: 
              #line 8243 
      ;
      #line 8245 
      generic_file_llseek(emg_46_resource_0,emg_46_emg_param_1_0,emg_46_emg_param_2_1);
      #line 8247 
      break;
      #line 8249 
      case 2: 
              #line 8249 
      ;
      #line 8256 
      __VERIFIER_assume(emg_46_size_cnt <= 2147479552UL);
      #line 8257 
      emg_46_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8257 
      emg_46_emg_param_1_4 = emg_46_emg_param_1_4;
      #line 8258 
      emg_46_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8258 
      emg_46_emg_param_3_5 = emg_46_emg_param_3_5;
      #line 8262 
      if (emg_46_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 8263 
        (*(emg_46_container->write))(emg_46_resource_0,emg_46_emg_param_1_4,emg_46_size_cnt,emg_46_emg_param_3_5);
      #line 8268 
      ldv_free((void *)emg_46_emg_param_1_4);
      #line 8269 
      ldv_free((void *)emg_46_emg_param_3_5);
      #line 8271 
      break;
      #line 8273 
      default: 
               #line 8273 
      ;
      #line 8273 
      __VERIFIER_assume(0);
    }
    #line 8276 
    if (emg_repeat_cnt_call_46 > 0) {
      #line 8277 
      emg_repeat_cnt_call_46 --;
      #line 8279 
      goto emg_call_46;
    }
    else 
         #line 8281 
         __VERIFIER_assume(0);
  }
  else {
    #line 8287 
    if (emg_46_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 8288 
      (*(emg_46_container->release))(emg_46_resource_1,emg_46_resource_0);
    #line 8292 
    if (emg_repeat_cnt_main_46_0 > 0) {
      #line 8293 
      emg_repeat_cnt_main_46_0 --;
      #line 8295 
      goto emg_main_46;
    }
    else 
         #line 8297 
         __VERIFIER_assume(0);
  }
  #line 8303 
  return (void *)0;
  #line 8306 
  emg_main_46: 
               #line 8306 
  ;
  #line 8307 
  if (ldv_undef_int() != 0) {
    #line 8309 
    emg_46_ret = simple_open(emg_46_resource_1,emg_46_resource_0);
    #line 8314 
    emg_46_ret = ldv_filter_err_code(emg_46_ret);
    #line 8317 
    if (ldv_undef_int() != 0) {
      #line 8319 
      __VERIFIER_assume(emg_46_ret == 0);
      #line 8323 
      goto emg_call_46;
    }
    else {
      #line 8328 
      __VERIFIER_assume(emg_46_ret != 0);
      #line 8331 
      if (emg_repeat_cnt_main_46_1 > 0) {
        #line 8332 
        emg_repeat_cnt_main_46_1 --;
        #line 8334 
        goto emg_main_46;
      }
      else 
           #line 8336 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 8343 
       ldv_free((void *)emg_46_resource_0);
  #line 8351 
  return (void *)0;
}

#line 8356  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_ps_upsd_max_apturn_ops(void *arg0)
{
  #line 8359 
  struct file_operations *emg_47_container;
  #line 8360 
  long long emg_47_emg_param_1_0;
  #line 8361 
  char *emg_47_emg_param_1_2;
  #line 8362 
  char *emg_47_emg_param_1_4;
  #line 8363 
  int emg_47_emg_param_2_1;
  #line 8364 
  long long *emg_47_emg_param_3_3;
  #line 8365 
  long long *emg_47_emg_param_3_5;
  #line 8366 
  struct file *emg_47_resource_0;
  #line 8367 
  struct inode *emg_47_resource_1;
  #line 8368 
  int emg_47_ret;
  #line 8369 
  unsigned long emg_47_size_cnt;
  #line 8370 
  int emg_repeat_cnt_call_47 = 1;
  #line 8371 
  int emg_repeat_cnt_main_47_1 = 1;
  #line 8372 
  int emg_repeat_cnt_main_47_0 = 1;
  #line 8374 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 8378 
  emg_47_ret = ldv_undef_int();
  #line 8379 
  emg_47_container = emg_alias_ps_upsd_max_apturn_ops;
  #line 8380 
  emg_47_ret = ldv_undef_int();
  #line 8382 
  __VERIFIER_assume(data->arg0 == emg_alias_ps_upsd_max_apturn_ops);
  #line 8384 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 8385 
    emg_47_container = data->arg0;
    #line 8386 
    ldv_free((void *)data);
  }
  #line 8391 
  emg_47_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 8392 
  emg_47_size_cnt = (unsigned long)ldv_undef_int();
  #line 8396 
  goto emg_main_47;
  #line 8400 
  return (void *)0;
  #line 8403 
  emg_call_47: 
               #line 8403 
  ;
  #line 8404 
  if (ldv_undef_int() != 0) {
    #line 8405 
    switch (ldv_undef_int()) {
      #line 8406 
      case 0: 
              #line 8406 
      ;
      #line 8408 
      emg_47_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8408 
      emg_47_emg_param_1_2 = emg_47_emg_param_1_2;
      #line 8409 
      emg_47_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8409 
      emg_47_emg_param_3_3 = emg_47_emg_param_3_3;
      #line 8413 
      emg_wrapper_ps_upsd_max_apturn_read(emg_47_resource_0,emg_47_emg_param_1_2,emg_47_size_cnt,emg_47_emg_param_3_3);
      #line 8417 
      ldv_free((void *)emg_47_emg_param_1_2);
      #line 8418 
      ldv_free((void *)emg_47_emg_param_3_3);
      #line 8420 
      break;
      #line 8422 
      case 1: 
              #line 8422 
      ;
      #line 8424 
      generic_file_llseek(emg_47_resource_0,emg_47_emg_param_1_0,emg_47_emg_param_2_1);
      #line 8426 
      break;
      #line 8428 
      case 2: 
              #line 8428 
      ;
      #line 8435 
      __VERIFIER_assume(emg_47_size_cnt <= 2147479552UL);
      #line 8436 
      emg_47_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8436 
      emg_47_emg_param_1_4 = emg_47_emg_param_1_4;
      #line 8437 
      emg_47_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8437 
      emg_47_emg_param_3_5 = emg_47_emg_param_3_5;
      #line 8441 
      if (emg_47_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 8442 
        (*(emg_47_container->write))(emg_47_resource_0,emg_47_emg_param_1_4,emg_47_size_cnt,emg_47_emg_param_3_5);
      #line 8447 
      ldv_free((void *)emg_47_emg_param_1_4);
      #line 8448 
      ldv_free((void *)emg_47_emg_param_3_5);
      #line 8450 
      break;
      #line 8452 
      default: 
               #line 8452 
      ;
      #line 8452 
      __VERIFIER_assume(0);
    }
    #line 8455 
    if (emg_repeat_cnt_call_47 > 0) {
      #line 8456 
      emg_repeat_cnt_call_47 --;
      #line 8458 
      goto emg_call_47;
    }
    else 
         #line 8460 
         __VERIFIER_assume(0);
  }
  else {
    #line 8466 
    if (emg_47_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 8467 
      (*(emg_47_container->release))(emg_47_resource_1,emg_47_resource_0);
    #line 8471 
    if (emg_repeat_cnt_main_47_1 > 0) {
      #line 8472 
      emg_repeat_cnt_main_47_1 --;
      #line 8474 
      goto emg_main_47;
    }
    else 
         #line 8476 
         __VERIFIER_assume(0);
  }
  #line 8482 
  return (void *)0;
  #line 8485 
  emg_main_47: 
               #line 8485 
  ;
  #line 8486 
  if (ldv_undef_int() != 0) {
    #line 8488 
    emg_47_ret = simple_open(emg_47_resource_1,emg_47_resource_0);
    #line 8493 
    emg_47_ret = ldv_filter_err_code(emg_47_ret);
    #line 8496 
    if (ldv_undef_int() != 0) {
      #line 8498 
      __VERIFIER_assume(emg_47_ret == 0);
      #line 8502 
      goto emg_call_47;
    }
    else {
      #line 8507 
      __VERIFIER_assume(emg_47_ret != 0);
      #line 8510 
      if (emg_repeat_cnt_main_47_0 > 0) {
        #line 8511 
        emg_repeat_cnt_main_47_0 --;
        #line 8513 
        goto emg_main_47;
      }
      else 
           #line 8515 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 8522 
       ldv_free((void *)emg_47_resource_0);
  #line 8530 
  return (void *)0;
}

#line 8535  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_ps_upsd_max_sptime_ops(void *arg0)
{
  #line 8538 
  struct file_operations *emg_48_container;
  #line 8539 
  long long emg_48_emg_param_1_0;
  #line 8540 
  char *emg_48_emg_param_1_2;
  #line 8541 
  char *emg_48_emg_param_1_4;
  #line 8542 
  int emg_48_emg_param_2_1;
  #line 8543 
  long long *emg_48_emg_param_3_3;
  #line 8544 
  long long *emg_48_emg_param_3_5;
  #line 8545 
  struct file *emg_48_resource_0;
  #line 8546 
  struct inode *emg_48_resource_1;
  #line 8547 
  int emg_48_ret;
  #line 8548 
  unsigned long emg_48_size_cnt;
  #line 8549 
  int emg_repeat_cnt_main_48_1 = 1;
  #line 8550 
  int emg_repeat_cnt_main_48_0 = 1;
  #line 8551 
  int emg_repeat_cnt_call_48 = 1;
  #line 8553 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 8557 
  emg_48_ret = ldv_undef_int();
  #line 8558 
  emg_48_container = emg_alias_ps_upsd_max_sptime_ops;
  #line 8559 
  emg_48_ret = ldv_undef_int();
  #line 8561 
  __VERIFIER_assume(data->arg0 == emg_alias_ps_upsd_max_sptime_ops);
  #line 8563 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 8564 
    emg_48_container = data->arg0;
    #line 8565 
    ldv_free((void *)data);
  }
  #line 8570 
  emg_48_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 8571 
  emg_48_size_cnt = (unsigned long)ldv_undef_int();
  #line 8575 
  goto emg_main_48;
  #line 8579 
  return (void *)0;
  #line 8582 
  emg_call_48: 
               #line 8582 
  ;
  #line 8583 
  if (ldv_undef_int() != 0) {
    #line 8584 
    switch (ldv_undef_int()) {
      #line 8585 
      case 0: 
              #line 8585 
      ;
      #line 8587 
      emg_48_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8587 
      emg_48_emg_param_1_2 = emg_48_emg_param_1_2;
      #line 8588 
      emg_48_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8588 
      emg_48_emg_param_3_3 = emg_48_emg_param_3_3;
      #line 8592 
      emg_wrapper_ps_upsd_max_sptime_read(emg_48_resource_0,emg_48_emg_param_1_2,emg_48_size_cnt,emg_48_emg_param_3_3);
      #line 8596 
      ldv_free((void *)emg_48_emg_param_1_2);
      #line 8597 
      ldv_free((void *)emg_48_emg_param_3_3);
      #line 8599 
      break;
      #line 8601 
      case 1: 
              #line 8601 
      ;
      #line 8603 
      generic_file_llseek(emg_48_resource_0,emg_48_emg_param_1_0,emg_48_emg_param_2_1);
      #line 8605 
      break;
      #line 8607 
      case 2: 
              #line 8607 
      ;
      #line 8614 
      __VERIFIER_assume(emg_48_size_cnt <= 2147479552UL);
      #line 8615 
      emg_48_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8615 
      emg_48_emg_param_1_4 = emg_48_emg_param_1_4;
      #line 8616 
      emg_48_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8616 
      emg_48_emg_param_3_5 = emg_48_emg_param_3_5;
      #line 8620 
      if (emg_48_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 8621 
        (*(emg_48_container->write))(emg_48_resource_0,emg_48_emg_param_1_4,emg_48_size_cnt,emg_48_emg_param_3_5);
      #line 8626 
      ldv_free((void *)emg_48_emg_param_1_4);
      #line 8627 
      ldv_free((void *)emg_48_emg_param_3_5);
      #line 8629 
      break;
      #line 8631 
      default: 
               #line 8631 
      ;
      #line 8631 
      __VERIFIER_assume(0);
    }
    #line 8634 
    if (emg_repeat_cnt_call_48 > 0) {
      #line 8635 
      emg_repeat_cnt_call_48 --;
      #line 8637 
      goto emg_call_48;
    }
    else 
         #line 8639 
         __VERIFIER_assume(0);
  }
  else {
    #line 8645 
    if (emg_48_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 8646 
      (*(emg_48_container->release))(emg_48_resource_1,emg_48_resource_0);
    #line 8650 
    if (emg_repeat_cnt_main_48_0 > 0) {
      #line 8651 
      emg_repeat_cnt_main_48_0 --;
      #line 8653 
      goto emg_main_48;
    }
    else 
         #line 8655 
         __VERIFIER_assume(0);
  }
  #line 8661 
  return (void *)0;
  #line 8664 
  emg_main_48: 
               #line 8664 
  ;
  #line 8665 
  if (ldv_undef_int() != 0) {
    #line 8667 
    emg_48_ret = simple_open(emg_48_resource_1,emg_48_resource_0);
    #line 8672 
    emg_48_ret = ldv_filter_err_code(emg_48_ret);
    #line 8675 
    if (ldv_undef_int() != 0) {
      #line 8677 
      __VERIFIER_assume(emg_48_ret == 0);
      #line 8681 
      goto emg_call_48;
    }
    else {
      #line 8686 
      __VERIFIER_assume(emg_48_ret != 0);
      #line 8689 
      if (emg_repeat_cnt_main_48_1 > 0) {
        #line 8690 
        emg_repeat_cnt_main_48_1 --;
        #line 8692 
        goto emg_main_48;
      }
      else 
           #line 8694 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 8701 
       ldv_free((void *)emg_48_resource_0);
  #line 8709 
  return (void *)0;
}

#line 8714  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_ps_upsd_timeouts_ops(void *arg0)
{
  #line 8717 
  struct file_operations *emg_49_container;
  #line 8718 
  long long emg_49_emg_param_1_0;
  #line 8719 
  char *emg_49_emg_param_1_2;
  #line 8720 
  char *emg_49_emg_param_1_4;
  #line 8721 
  int emg_49_emg_param_2_1;
  #line 8722 
  long long *emg_49_emg_param_3_3;
  #line 8723 
  long long *emg_49_emg_param_3_5;
  #line 8724 
  struct file *emg_49_resource_0;
  #line 8725 
  struct inode *emg_49_resource_1;
  #line 8726 
  int emg_49_ret;
  #line 8727 
  unsigned long emg_49_size_cnt;
  #line 8728 
  int emg_repeat_cnt_call_49 = 1;
  #line 8729 
  int emg_repeat_cnt_main_49_0 = 1;
  #line 8730 
  int emg_repeat_cnt_main_49_1 = 1;
  #line 8732 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 8736 
  emg_49_ret = ldv_undef_int();
  #line 8737 
  emg_49_container = emg_alias_ps_upsd_timeouts_ops;
  #line 8738 
  emg_49_ret = ldv_undef_int();
  #line 8740 
  __VERIFIER_assume(data->arg0 == emg_alias_ps_upsd_timeouts_ops);
  #line 8742 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 8743 
    emg_49_container = data->arg0;
    #line 8744 
    ldv_free((void *)data);
  }
  #line 8749 
  emg_49_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 8750 
  emg_49_size_cnt = (unsigned long)ldv_undef_int();
  #line 8754 
  goto emg_main_49;
  #line 8758 
  return (void *)0;
  #line 8761 
  emg_call_49: 
               #line 8761 
  ;
  #line 8762 
  if (ldv_undef_int() != 0) {
    #line 8763 
    switch (ldv_undef_int()) {
      #line 8764 
      case 0: 
              #line 8764 
      ;
      #line 8766 
      emg_49_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8766 
      emg_49_emg_param_1_2 = emg_49_emg_param_1_2;
      #line 8767 
      emg_49_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8767 
      emg_49_emg_param_3_3 = emg_49_emg_param_3_3;
      #line 8771 
      emg_wrapper_ps_upsd_timeouts_read(emg_49_resource_0,emg_49_emg_param_1_2,emg_49_size_cnt,emg_49_emg_param_3_3);
      #line 8775 
      ldv_free((void *)emg_49_emg_param_1_2);
      #line 8776 
      ldv_free((void *)emg_49_emg_param_3_3);
      #line 8778 
      break;
      #line 8780 
      case 1: 
              #line 8780 
      ;
      #line 8782 
      generic_file_llseek(emg_49_resource_0,emg_49_emg_param_1_0,emg_49_emg_param_2_1);
      #line 8784 
      break;
      #line 8786 
      case 2: 
              #line 8786 
      ;
      #line 8793 
      __VERIFIER_assume(emg_49_size_cnt <= 2147479552UL);
      #line 8794 
      emg_49_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8794 
      emg_49_emg_param_1_4 = emg_49_emg_param_1_4;
      #line 8795 
      emg_49_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8795 
      emg_49_emg_param_3_5 = emg_49_emg_param_3_5;
      #line 8799 
      if (emg_49_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 8800 
        (*(emg_49_container->write))(emg_49_resource_0,emg_49_emg_param_1_4,emg_49_size_cnt,emg_49_emg_param_3_5);
      #line 8805 
      ldv_free((void *)emg_49_emg_param_1_4);
      #line 8806 
      ldv_free((void *)emg_49_emg_param_3_5);
      #line 8808 
      break;
      #line 8810 
      default: 
               #line 8810 
      ;
      #line 8810 
      __VERIFIER_assume(0);
    }
    #line 8813 
    if (emg_repeat_cnt_call_49 > 0) {
      #line 8814 
      emg_repeat_cnt_call_49 --;
      #line 8816 
      goto emg_call_49;
    }
    else 
         #line 8818 
         __VERIFIER_assume(0);
  }
  else {
    #line 8824 
    if (emg_49_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 8825 
      (*(emg_49_container->release))(emg_49_resource_1,emg_49_resource_0);
    #line 8829 
    if (emg_repeat_cnt_main_49_0 > 0) {
      #line 8830 
      emg_repeat_cnt_main_49_0 --;
      #line 8832 
      goto emg_main_49;
    }
    else 
         #line 8834 
         __VERIFIER_assume(0);
  }
  #line 8840 
  return (void *)0;
  #line 8843 
  emg_main_49: 
               #line 8843 
  ;
  #line 8844 
  if (ldv_undef_int() != 0) {
    #line 8846 
    emg_49_ret = simple_open(emg_49_resource_1,emg_49_resource_0);
    #line 8851 
    emg_49_ret = ldv_filter_err_code(emg_49_ret);
    #line 8854 
    if (ldv_undef_int() != 0) {
      #line 8856 
      __VERIFIER_assume(emg_49_ret == 0);
      #line 8860 
      goto emg_call_49;
    }
    else {
      #line 8865 
      __VERIFIER_assume(emg_49_ret != 0);
      #line 8868 
      if (emg_repeat_cnt_main_49_1 > 0) {
        #line 8869 
        emg_repeat_cnt_main_49_1 --;
        #line 8871 
        goto emg_main_49;
      }
      else 
           #line 8873 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 8880 
       ldv_free((void *)emg_49_resource_0);
  #line 8888 
  return (void *)0;
}

#line 8893  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_ps_upsd_utilization_ops(void *arg0)
{
  #line 8896 
  struct file_operations *emg_50_container;
  #line 8897 
  long long emg_50_emg_param_1_0;
  #line 8898 
  char *emg_50_emg_param_1_2;
  #line 8899 
  char *emg_50_emg_param_1_4;
  #line 8900 
  int emg_50_emg_param_2_1;
  #line 8901 
  long long *emg_50_emg_param_3_3;
  #line 8902 
  long long *emg_50_emg_param_3_5;
  #line 8903 
  struct file *emg_50_resource_0;
  #line 8904 
  struct inode *emg_50_resource_1;
  #line 8905 
  int emg_50_ret;
  #line 8906 
  unsigned long emg_50_size_cnt;
  #line 8907 
  int emg_repeat_cnt_main_50_1 = 1;
  #line 8908 
  int emg_repeat_cnt_main_50_0 = 1;
  #line 8909 
  int emg_repeat_cnt_call_50 = 1;
  #line 8911 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 8915 
  emg_50_ret = ldv_undef_int();
  #line 8916 
  emg_50_container = emg_alias_ps_upsd_utilization_ops;
  #line 8917 
  emg_50_ret = ldv_undef_int();
  #line 8919 
  __VERIFIER_assume(data->arg0 == emg_alias_ps_upsd_utilization_ops);
  #line 8921 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 8922 
    emg_50_container = data->arg0;
    #line 8923 
    ldv_free((void *)data);
  }
  #line 8928 
  emg_50_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 8929 
  emg_50_size_cnt = (unsigned long)ldv_undef_int();
  #line 8933 
  goto emg_main_50;
  #line 8937 
  return (void *)0;
  #line 8940 
  emg_call_50: 
               #line 8940 
  ;
  #line 8941 
  if (ldv_undef_int() != 0) {
    #line 8942 
    switch (ldv_undef_int()) {
      #line 8943 
      case 0: 
              #line 8943 
      ;
      #line 8945 
      emg_50_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8945 
      emg_50_emg_param_1_2 = emg_50_emg_param_1_2;
      #line 8946 
      emg_50_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8946 
      emg_50_emg_param_3_3 = emg_50_emg_param_3_3;
      #line 8950 
      emg_wrapper_ps_upsd_utilization_read(emg_50_resource_0,emg_50_emg_param_1_2,emg_50_size_cnt,emg_50_emg_param_3_3);
      #line 8954 
      ldv_free((void *)emg_50_emg_param_1_2);
      #line 8955 
      ldv_free((void *)emg_50_emg_param_3_3);
      #line 8957 
      break;
      #line 8959 
      case 1: 
              #line 8959 
      ;
      #line 8961 
      generic_file_llseek(emg_50_resource_0,emg_50_emg_param_1_0,emg_50_emg_param_2_1);
      #line 8963 
      break;
      #line 8965 
      case 2: 
              #line 8965 
      ;
      #line 8972 
      __VERIFIER_assume(emg_50_size_cnt <= 2147479552UL);
      #line 8973 
      emg_50_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8973 
      emg_50_emg_param_1_4 = emg_50_emg_param_1_4;
      #line 8974 
      emg_50_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8974 
      emg_50_emg_param_3_5 = emg_50_emg_param_3_5;
      #line 8978 
      if (emg_50_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 8979 
        (*(emg_50_container->write))(emg_50_resource_0,emg_50_emg_param_1_4,emg_50_size_cnt,emg_50_emg_param_3_5);
      #line 8984 
      ldv_free((void *)emg_50_emg_param_1_4);
      #line 8985 
      ldv_free((void *)emg_50_emg_param_3_5);
      #line 8987 
      break;
      #line 8989 
      default: 
               #line 8989 
      ;
      #line 8989 
      __VERIFIER_assume(0);
    }
    #line 8992 
    if (emg_repeat_cnt_call_50 > 0) {
      #line 8993 
      emg_repeat_cnt_call_50 --;
      #line 8995 
      goto emg_call_50;
    }
    else 
         #line 8997 
         __VERIFIER_assume(0);
  }
  else {
    #line 9003 
    if (emg_50_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 9004 
      (*(emg_50_container->release))(emg_50_resource_1,emg_50_resource_0);
    #line 9008 
    if (emg_repeat_cnt_main_50_1 > 0) {
      #line 9009 
      emg_repeat_cnt_main_50_1 --;
      #line 9011 
      goto emg_main_50;
    }
    else 
         #line 9013 
         __VERIFIER_assume(0);
  }
  #line 9019 
  return (void *)0;
  #line 9022 
  emg_main_50: 
               #line 9022 
  ;
  #line 9023 
  if (ldv_undef_int() != 0) {
    #line 9025 
    emg_50_ret = simple_open(emg_50_resource_1,emg_50_resource_0);
    #line 9030 
    emg_50_ret = ldv_filter_err_code(emg_50_ret);
    #line 9033 
    if (ldv_undef_int() != 0) {
      #line 9035 
      __VERIFIER_assume(emg_50_ret == 0);
      #line 9039 
      goto emg_call_50;
    }
    else {
      #line 9044 
      __VERIFIER_assume(emg_50_ret != 0);
      #line 9047 
      if (emg_repeat_cnt_main_50_0 > 0) {
        #line 9048 
        emg_repeat_cnt_main_50_0 --;
        #line 9050 
        goto emg_main_50;
      }
      else 
           #line 9052 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 9059 
       ldv_free((void *)emg_50_resource_0);
  #line 9067 
  return (void *)0;
}

#line 9072  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_disable_ps_ops(void *arg0)
{
  #line 9075 
  struct file_operations *emg_51_container;
  #line 9076 
  long long emg_51_emg_param_1_0;
  #line 9077 
  char *emg_51_emg_param_1_2;
  #line 9078 
  char *emg_51_emg_param_1_4;
  #line 9079 
  int emg_51_emg_param_2_1;
  #line 9080 
  long long *emg_51_emg_param_3_3;
  #line 9081 
  long long *emg_51_emg_param_3_5;
  #line 9082 
  struct file *emg_51_resource_0;
  #line 9083 
  struct inode *emg_51_resource_1;
  #line 9084 
  int emg_51_ret;
  #line 9085 
  unsigned long emg_51_size_cnt;
  #line 9086 
  int emg_repeat_cnt_main_51_0 = 1;
  #line 9087 
  int emg_repeat_cnt_main_51_1 = 1;
  #line 9088 
  int emg_repeat_cnt_call_51 = 1;
  #line 9090 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 9094 
  emg_51_ret = ldv_undef_int();
  #line 9095 
  emg_51_container = emg_alias_pwr_disable_ps_ops;
  #line 9096 
  emg_51_ret = ldv_undef_int();
  #line 9098 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_disable_ps_ops);
  #line 9100 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 9101 
    emg_51_container = data->arg0;
    #line 9102 
    ldv_free((void *)data);
  }
  #line 9107 
  emg_51_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 9108 
  emg_51_size_cnt = (unsigned long)ldv_undef_int();
  #line 9112 
  goto emg_main_51;
  #line 9116 
  return (void *)0;
  #line 9119 
  emg_call_51: 
               #line 9119 
  ;
  #line 9120 
  if (ldv_undef_int() != 0) {
    #line 9121 
    switch (ldv_undef_int()) {
      #line 9122 
      case 0: 
              #line 9122 
      ;
      #line 9124 
      emg_51_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9124 
      emg_51_emg_param_1_2 = emg_51_emg_param_1_2;
      #line 9125 
      emg_51_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9125 
      emg_51_emg_param_3_3 = emg_51_emg_param_3_3;
      #line 9129 
      emg_wrapper_pwr_disable_ps_read(emg_51_resource_0,emg_51_emg_param_1_2,emg_51_size_cnt,emg_51_emg_param_3_3);
      #line 9133 
      ldv_free((void *)emg_51_emg_param_1_2);
      #line 9134 
      ldv_free((void *)emg_51_emg_param_3_3);
      #line 9136 
      break;
      #line 9138 
      case 1: 
              #line 9138 
      ;
      #line 9140 
      generic_file_llseek(emg_51_resource_0,emg_51_emg_param_1_0,emg_51_emg_param_2_1);
      #line 9142 
      break;
      #line 9144 
      case 2: 
              #line 9144 
      ;
      #line 9151 
      __VERIFIER_assume(emg_51_size_cnt <= 2147479552UL);
      #line 9152 
      emg_51_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9152 
      emg_51_emg_param_1_4 = emg_51_emg_param_1_4;
      #line 9153 
      emg_51_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9153 
      emg_51_emg_param_3_5 = emg_51_emg_param_3_5;
      #line 9157 
      if (emg_51_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 9158 
        (*(emg_51_container->write))(emg_51_resource_0,emg_51_emg_param_1_4,emg_51_size_cnt,emg_51_emg_param_3_5);
      #line 9163 
      ldv_free((void *)emg_51_emg_param_1_4);
      #line 9164 
      ldv_free((void *)emg_51_emg_param_3_5);
      #line 9166 
      break;
      #line 9168 
      default: 
               #line 9168 
      ;
      #line 9168 
      __VERIFIER_assume(0);
    }
    #line 9171 
    if (emg_repeat_cnt_call_51 > 0) {
      #line 9172 
      emg_repeat_cnt_call_51 --;
      #line 9174 
      goto emg_call_51;
    }
    else 
         #line 9176 
         __VERIFIER_assume(0);
  }
  else {
    #line 9182 
    if (emg_51_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 9183 
      (*(emg_51_container->release))(emg_51_resource_1,emg_51_resource_0);
    #line 9187 
    if (emg_repeat_cnt_main_51_1 > 0) {
      #line 9188 
      emg_repeat_cnt_main_51_1 --;
      #line 9190 
      goto emg_main_51;
    }
    else 
         #line 9192 
         __VERIFIER_assume(0);
  }
  #line 9198 
  return (void *)0;
  #line 9201 
  emg_main_51: 
               #line 9201 
  ;
  #line 9202 
  if (ldv_undef_int() != 0) {
    #line 9204 
    emg_51_ret = simple_open(emg_51_resource_1,emg_51_resource_0);
    #line 9209 
    emg_51_ret = ldv_filter_err_code(emg_51_ret);
    #line 9212 
    if (ldv_undef_int() != 0) {
      #line 9214 
      __VERIFIER_assume(emg_51_ret == 0);
      #line 9218 
      goto emg_call_51;
    }
    else {
      #line 9223 
      __VERIFIER_assume(emg_51_ret != 0);
      #line 9226 
      if (emg_repeat_cnt_main_51_0 > 0) {
        #line 9227 
        emg_repeat_cnt_main_51_0 --;
        #line 9229 
        goto emg_main_51;
      }
      else 
           #line 9231 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 9238 
       ldv_free((void *)emg_51_resource_0);
  #line 9246 
  return (void *)0;
}

#line 9251  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_elp_enter_ops(void *arg0)
{
  #line 9254 
  struct file_operations *emg_52_container;
  #line 9255 
  long long emg_52_emg_param_1_0;
  #line 9256 
  char *emg_52_emg_param_1_2;
  #line 9257 
  char *emg_52_emg_param_1_4;
  #line 9258 
  int emg_52_emg_param_2_1;
  #line 9259 
  long long *emg_52_emg_param_3_3;
  #line 9260 
  long long *emg_52_emg_param_3_5;
  #line 9261 
  struct file *emg_52_resource_0;
  #line 9262 
  struct inode *emg_52_resource_1;
  #line 9263 
  int emg_52_ret;
  #line 9264 
  unsigned long emg_52_size_cnt;
  #line 9265 
  int emg_repeat_cnt_main_52_1 = 1;
  #line 9266 
  int emg_repeat_cnt_call_52 = 1;
  #line 9267 
  int emg_repeat_cnt_main_52_0 = 1;
  #line 9269 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 9273 
  emg_52_ret = ldv_undef_int();
  #line 9274 
  emg_52_container = emg_alias_pwr_elp_enter_ops;
  #line 9275 
  emg_52_ret = ldv_undef_int();
  #line 9277 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_elp_enter_ops);
  #line 9279 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 9280 
    emg_52_container = data->arg0;
    #line 9281 
    ldv_free((void *)data);
  }
  #line 9286 
  emg_52_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 9287 
  emg_52_size_cnt = (unsigned long)ldv_undef_int();
  #line 9291 
  goto emg_main_52;
  #line 9295 
  return (void *)0;
  #line 9298 
  emg_call_52: 
               #line 9298 
  ;
  #line 9299 
  if (ldv_undef_int() != 0) {
    #line 9300 
    switch (ldv_undef_int()) {
      #line 9301 
      case 0: 
              #line 9301 
      ;
      #line 9303 
      emg_52_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9303 
      emg_52_emg_param_1_2 = emg_52_emg_param_1_2;
      #line 9304 
      emg_52_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9304 
      emg_52_emg_param_3_3 = emg_52_emg_param_3_3;
      #line 9308 
      emg_wrapper_pwr_elp_enter_read(emg_52_resource_0,emg_52_emg_param_1_2,emg_52_size_cnt,emg_52_emg_param_3_3);
      #line 9312 
      ldv_free((void *)emg_52_emg_param_1_2);
      #line 9313 
      ldv_free((void *)emg_52_emg_param_3_3);
      #line 9315 
      break;
      #line 9317 
      case 1: 
              #line 9317 
      ;
      #line 9319 
      generic_file_llseek(emg_52_resource_0,emg_52_emg_param_1_0,emg_52_emg_param_2_1);
      #line 9321 
      break;
      #line 9323 
      case 2: 
              #line 9323 
      ;
      #line 9330 
      __VERIFIER_assume(emg_52_size_cnt <= 2147479552UL);
      #line 9331 
      emg_52_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9331 
      emg_52_emg_param_1_4 = emg_52_emg_param_1_4;
      #line 9332 
      emg_52_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9332 
      emg_52_emg_param_3_5 = emg_52_emg_param_3_5;
      #line 9336 
      if (emg_52_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 9337 
        (*(emg_52_container->write))(emg_52_resource_0,emg_52_emg_param_1_4,emg_52_size_cnt,emg_52_emg_param_3_5);
      #line 9342 
      ldv_free((void *)emg_52_emg_param_1_4);
      #line 9343 
      ldv_free((void *)emg_52_emg_param_3_5);
      #line 9345 
      break;
      #line 9347 
      default: 
               #line 9347 
      ;
      #line 9347 
      __VERIFIER_assume(0);
    }
    #line 9350 
    if (emg_repeat_cnt_call_52 > 0) {
      #line 9351 
      emg_repeat_cnt_call_52 --;
      #line 9353 
      goto emg_call_52;
    }
    else 
         #line 9355 
         __VERIFIER_assume(0);
  }
  else {
    #line 9361 
    if (emg_52_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 9362 
      (*(emg_52_container->release))(emg_52_resource_1,emg_52_resource_0);
    #line 9366 
    if (emg_repeat_cnt_main_52_0 > 0) {
      #line 9367 
      emg_repeat_cnt_main_52_0 --;
      #line 9369 
      goto emg_main_52;
    }
    else 
         #line 9371 
         __VERIFIER_assume(0);
  }
  #line 9377 
  return (void *)0;
  #line 9380 
  emg_main_52: 
               #line 9380 
  ;
  #line 9381 
  if (ldv_undef_int() != 0) {
    #line 9383 
    emg_52_ret = simple_open(emg_52_resource_1,emg_52_resource_0);
    #line 9388 
    emg_52_ret = ldv_filter_err_code(emg_52_ret);
    #line 9391 
    if (ldv_undef_int() != 0) {
      #line 9393 
      __VERIFIER_assume(emg_52_ret == 0);
      #line 9397 
      goto emg_call_52;
    }
    else {
      #line 9402 
      __VERIFIER_assume(emg_52_ret != 0);
      #line 9405 
      if (emg_repeat_cnt_main_52_1 > 0) {
        #line 9406 
        emg_repeat_cnt_main_52_1 --;
        #line 9408 
        goto emg_main_52;
      }
      else 
           #line 9410 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 9417 
       ldv_free((void *)emg_52_resource_0);
  #line 9425 
  return (void *)0;
}

#line 9430  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_enable_ps_ops(void *arg0)
{
  #line 9433 
  struct file_operations *emg_53_container;
  #line 9434 
  long long emg_53_emg_param_1_0;
  #line 9435 
  char *emg_53_emg_param_1_2;
  #line 9436 
  char *emg_53_emg_param_1_4;
  #line 9437 
  int emg_53_emg_param_2_1;
  #line 9438 
  long long *emg_53_emg_param_3_3;
  #line 9439 
  long long *emg_53_emg_param_3_5;
  #line 9440 
  struct file *emg_53_resource_0;
  #line 9441 
  struct inode *emg_53_resource_1;
  #line 9442 
  int emg_53_ret;
  #line 9443 
  unsigned long emg_53_size_cnt;
  #line 9444 
  int emg_repeat_cnt_main_53_1 = 1;
  #line 9445 
  int emg_repeat_cnt_call_53 = 1;
  #line 9446 
  int emg_repeat_cnt_main_53_0 = 1;
  #line 9448 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 9452 
  emg_53_ret = ldv_undef_int();
  #line 9453 
  emg_53_container = emg_alias_pwr_enable_ps_ops;
  #line 9454 
  emg_53_ret = ldv_undef_int();
  #line 9456 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_enable_ps_ops);
  #line 9458 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 9459 
    emg_53_container = data->arg0;
    #line 9460 
    ldv_free((void *)data);
  }
  #line 9465 
  emg_53_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 9466 
  emg_53_size_cnt = (unsigned long)ldv_undef_int();
  #line 9470 
  goto emg_main_53;
  #line 9474 
  return (void *)0;
  #line 9477 
  emg_call_53: 
               #line 9477 
  ;
  #line 9478 
  if (ldv_undef_int() != 0) {
    #line 9479 
    switch (ldv_undef_int()) {
      #line 9480 
      case 0: 
              #line 9480 
      ;
      #line 9482 
      emg_53_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9482 
      emg_53_emg_param_1_2 = emg_53_emg_param_1_2;
      #line 9483 
      emg_53_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9483 
      emg_53_emg_param_3_3 = emg_53_emg_param_3_3;
      #line 9487 
      emg_wrapper_pwr_enable_ps_read(emg_53_resource_0,emg_53_emg_param_1_2,emg_53_size_cnt,emg_53_emg_param_3_3);
      #line 9491 
      ldv_free((void *)emg_53_emg_param_1_2);
      #line 9492 
      ldv_free((void *)emg_53_emg_param_3_3);
      #line 9494 
      break;
      #line 9496 
      case 1: 
              #line 9496 
      ;
      #line 9498 
      generic_file_llseek(emg_53_resource_0,emg_53_emg_param_1_0,emg_53_emg_param_2_1);
      #line 9500 
      break;
      #line 9502 
      case 2: 
              #line 9502 
      ;
      #line 9509 
      __VERIFIER_assume(emg_53_size_cnt <= 2147479552UL);
      #line 9510 
      emg_53_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9510 
      emg_53_emg_param_1_4 = emg_53_emg_param_1_4;
      #line 9511 
      emg_53_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9511 
      emg_53_emg_param_3_5 = emg_53_emg_param_3_5;
      #line 9515 
      if (emg_53_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 9516 
        (*(emg_53_container->write))(emg_53_resource_0,emg_53_emg_param_1_4,emg_53_size_cnt,emg_53_emg_param_3_5);
      #line 9521 
      ldv_free((void *)emg_53_emg_param_1_4);
      #line 9522 
      ldv_free((void *)emg_53_emg_param_3_5);
      #line 9524 
      break;
      #line 9526 
      default: 
               #line 9526 
      ;
      #line 9526 
      __VERIFIER_assume(0);
    }
    #line 9529 
    if (emg_repeat_cnt_call_53 > 0) {
      #line 9530 
      emg_repeat_cnt_call_53 --;
      #line 9532 
      goto emg_call_53;
    }
    else 
         #line 9534 
         __VERIFIER_assume(0);
  }
  else {
    #line 9540 
    if (emg_53_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 9541 
      (*(emg_53_container->release))(emg_53_resource_1,emg_53_resource_0);
    #line 9545 
    if (emg_repeat_cnt_main_53_0 > 0) {
      #line 9546 
      emg_repeat_cnt_main_53_0 --;
      #line 9548 
      goto emg_main_53;
    }
    else 
         #line 9550 
         __VERIFIER_assume(0);
  }
  #line 9556 
  return (void *)0;
  #line 9559 
  emg_main_53: 
               #line 9559 
  ;
  #line 9560 
  if (ldv_undef_int() != 0) {
    #line 9562 
    emg_53_ret = simple_open(emg_53_resource_1,emg_53_resource_0);
    #line 9567 
    emg_53_ret = ldv_filter_err_code(emg_53_ret);
    #line 9570 
    if (ldv_undef_int() != 0) {
      #line 9572 
      __VERIFIER_assume(emg_53_ret == 0);
      #line 9576 
      goto emg_call_53;
    }
    else {
      #line 9581 
      __VERIFIER_assume(emg_53_ret != 0);
      #line 9584 
      if (emg_repeat_cnt_main_53_1 > 0) {
        #line 9585 
        emg_repeat_cnt_main_53_1 --;
        #line 9587 
        goto emg_main_53;
      }
      else 
           #line 9589 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 9596 
       ldv_free((void *)emg_53_resource_0);
  #line 9604 
  return (void *)0;
}

#line 9609  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_fix_tsf_ps_ops(void *arg0)
{
  #line 9612 
  struct file_operations *emg_54_container;
  #line 9613 
  long long emg_54_emg_param_1_0;
  #line 9614 
  char *emg_54_emg_param_1_2;
  #line 9615 
  char *emg_54_emg_param_1_4;
  #line 9616 
  int emg_54_emg_param_2_1;
  #line 9617 
  long long *emg_54_emg_param_3_3;
  #line 9618 
  long long *emg_54_emg_param_3_5;
  #line 9619 
  struct file *emg_54_resource_0;
  #line 9620 
  struct inode *emg_54_resource_1;
  #line 9621 
  int emg_54_ret;
  #line 9622 
  unsigned long emg_54_size_cnt;
  #line 9623 
  int emg_repeat_cnt_main_54_1 = 1;
  #line 9624 
  int emg_repeat_cnt_main_54_0 = 1;
  #line 9625 
  int emg_repeat_cnt_call_54 = 1;
  #line 9627 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 9631 
  emg_54_ret = ldv_undef_int();
  #line 9632 
  emg_54_container = emg_alias_pwr_fix_tsf_ps_ops;
  #line 9633 
  emg_54_ret = ldv_undef_int();
  #line 9635 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_fix_tsf_ps_ops);
  #line 9637 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 9638 
    emg_54_container = data->arg0;
    #line 9639 
    ldv_free((void *)data);
  }
  #line 9644 
  emg_54_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 9645 
  emg_54_size_cnt = (unsigned long)ldv_undef_int();
  #line 9649 
  goto emg_main_54;
  #line 9653 
  return (void *)0;
  #line 9656 
  emg_call_54: 
               #line 9656 
  ;
  #line 9657 
  if (ldv_undef_int() != 0) {
    #line 9658 
    switch (ldv_undef_int()) {
      #line 9659 
      case 0: 
              #line 9659 
      ;
      #line 9661 
      emg_54_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9661 
      emg_54_emg_param_1_2 = emg_54_emg_param_1_2;
      #line 9662 
      emg_54_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9662 
      emg_54_emg_param_3_3 = emg_54_emg_param_3_3;
      #line 9666 
      emg_wrapper_pwr_fix_tsf_ps_read(emg_54_resource_0,emg_54_emg_param_1_2,emg_54_size_cnt,emg_54_emg_param_3_3);
      #line 9670 
      ldv_free((void *)emg_54_emg_param_1_2);
      #line 9671 
      ldv_free((void *)emg_54_emg_param_3_3);
      #line 9673 
      break;
      #line 9675 
      case 1: 
              #line 9675 
      ;
      #line 9677 
      generic_file_llseek(emg_54_resource_0,emg_54_emg_param_1_0,emg_54_emg_param_2_1);
      #line 9679 
      break;
      #line 9681 
      case 2: 
              #line 9681 
      ;
      #line 9688 
      __VERIFIER_assume(emg_54_size_cnt <= 2147479552UL);
      #line 9689 
      emg_54_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9689 
      emg_54_emg_param_1_4 = emg_54_emg_param_1_4;
      #line 9690 
      emg_54_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9690 
      emg_54_emg_param_3_5 = emg_54_emg_param_3_5;
      #line 9694 
      if (emg_54_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 9695 
        (*(emg_54_container->write))(emg_54_resource_0,emg_54_emg_param_1_4,emg_54_size_cnt,emg_54_emg_param_3_5);
      #line 9700 
      ldv_free((void *)emg_54_emg_param_1_4);
      #line 9701 
      ldv_free((void *)emg_54_emg_param_3_5);
      #line 9703 
      break;
      #line 9705 
      default: 
               #line 9705 
      ;
      #line 9705 
      __VERIFIER_assume(0);
    }
    #line 9708 
    if (emg_repeat_cnt_call_54 > 0) {
      #line 9709 
      emg_repeat_cnt_call_54 --;
      #line 9711 
      goto emg_call_54;
    }
    else 
         #line 9713 
         __VERIFIER_assume(0);
  }
  else {
    #line 9719 
    if (emg_54_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 9720 
      (*(emg_54_container->release))(emg_54_resource_1,emg_54_resource_0);
    #line 9724 
    if (emg_repeat_cnt_main_54_0 > 0) {
      #line 9725 
      emg_repeat_cnt_main_54_0 --;
      #line 9727 
      goto emg_main_54;
    }
    else 
         #line 9729 
         __VERIFIER_assume(0);
  }
  #line 9735 
  return (void *)0;
  #line 9738 
  emg_main_54: 
               #line 9738 
  ;
  #line 9739 
  if (ldv_undef_int() != 0) {
    #line 9741 
    emg_54_ret = simple_open(emg_54_resource_1,emg_54_resource_0);
    #line 9746 
    emg_54_ret = ldv_filter_err_code(emg_54_ret);
    #line 9749 
    if (ldv_undef_int() != 0) {
      #line 9751 
      __VERIFIER_assume(emg_54_ret == 0);
      #line 9755 
      goto emg_call_54;
    }
    else {
      #line 9760 
      __VERIFIER_assume(emg_54_ret != 0);
      #line 9763 
      if (emg_repeat_cnt_main_54_1 > 0) {
        #line 9764 
        emg_repeat_cnt_main_54_1 --;
        #line 9766 
        goto emg_main_54;
      }
      else 
           #line 9768 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 9775 
       ldv_free((void *)emg_54_resource_0);
  #line 9783 
  return (void *)0;
}

#line 9788  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_missing_bcns_ops(void *arg0)
{
  #line 9791 
  struct file_operations *emg_55_container;
  #line 9792 
  long long emg_55_emg_param_1_0;
  #line 9793 
  char *emg_55_emg_param_1_2;
  #line 9794 
  char *emg_55_emg_param_1_4;
  #line 9795 
  int emg_55_emg_param_2_1;
  #line 9796 
  long long *emg_55_emg_param_3_3;
  #line 9797 
  long long *emg_55_emg_param_3_5;
  #line 9798 
  struct file *emg_55_resource_0;
  #line 9799 
  struct inode *emg_55_resource_1;
  #line 9800 
  int emg_55_ret;
  #line 9801 
  unsigned long emg_55_size_cnt;
  #line 9802 
  int emg_repeat_cnt_main_55_1 = 1;
  #line 9803 
  int emg_repeat_cnt_main_55_0 = 1;
  #line 9804 
  int emg_repeat_cnt_call_55 = 1;
  #line 9806 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 9810 
  emg_55_ret = ldv_undef_int();
  #line 9811 
  emg_55_container = emg_alias_pwr_missing_bcns_ops;
  #line 9812 
  emg_55_ret = ldv_undef_int();
  #line 9814 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_missing_bcns_ops);
  #line 9816 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 9817 
    emg_55_container = data->arg0;
    #line 9818 
    ldv_free((void *)data);
  }
  #line 9823 
  emg_55_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 9824 
  emg_55_size_cnt = (unsigned long)ldv_undef_int();
  #line 9828 
  goto emg_main_55;
  #line 9832 
  return (void *)0;
  #line 9835 
  emg_call_55: 
               #line 9835 
  ;
  #line 9836 
  if (ldv_undef_int() != 0) {
    #line 9837 
    switch (ldv_undef_int()) {
      #line 9838 
      case 0: 
              #line 9838 
      ;
      #line 9840 
      emg_55_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9840 
      emg_55_emg_param_1_2 = emg_55_emg_param_1_2;
      #line 9841 
      emg_55_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9841 
      emg_55_emg_param_3_3 = emg_55_emg_param_3_3;
      #line 9845 
      emg_wrapper_pwr_missing_bcns_read(emg_55_resource_0,emg_55_emg_param_1_2,emg_55_size_cnt,emg_55_emg_param_3_3);
      #line 9849 
      ldv_free((void *)emg_55_emg_param_1_2);
      #line 9850 
      ldv_free((void *)emg_55_emg_param_3_3);
      #line 9852 
      break;
      #line 9854 
      case 1: 
              #line 9854 
      ;
      #line 9856 
      generic_file_llseek(emg_55_resource_0,emg_55_emg_param_1_0,emg_55_emg_param_2_1);
      #line 9858 
      break;
      #line 9860 
      case 2: 
              #line 9860 
      ;
      #line 9867 
      __VERIFIER_assume(emg_55_size_cnt <= 2147479552UL);
      #line 9868 
      emg_55_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9868 
      emg_55_emg_param_1_4 = emg_55_emg_param_1_4;
      #line 9869 
      emg_55_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9869 
      emg_55_emg_param_3_5 = emg_55_emg_param_3_5;
      #line 9873 
      if (emg_55_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 9874 
        (*(emg_55_container->write))(emg_55_resource_0,emg_55_emg_param_1_4,emg_55_size_cnt,emg_55_emg_param_3_5);
      #line 9879 
      ldv_free((void *)emg_55_emg_param_1_4);
      #line 9880 
      ldv_free((void *)emg_55_emg_param_3_5);
      #line 9882 
      break;
      #line 9884 
      default: 
               #line 9884 
      ;
      #line 9884 
      __VERIFIER_assume(0);
    }
    #line 9887 
    if (emg_repeat_cnt_call_55 > 0) {
      #line 9888 
      emg_repeat_cnt_call_55 --;
      #line 9890 
      goto emg_call_55;
    }
    else 
         #line 9892 
         __VERIFIER_assume(0);
  }
  else {
    #line 9898 
    if (emg_55_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 9899 
      (*(emg_55_container->release))(emg_55_resource_1,emg_55_resource_0);
    #line 9903 
    if (emg_repeat_cnt_main_55_0 > 0) {
      #line 9904 
      emg_repeat_cnt_main_55_0 --;
      #line 9906 
      goto emg_main_55;
    }
    else 
         #line 9908 
         __VERIFIER_assume(0);
  }
  #line 9914 
  return (void *)0;
  #line 9917 
  emg_main_55: 
               #line 9917 
  ;
  #line 9918 
  if (ldv_undef_int() != 0) {
    #line 9920 
    emg_55_ret = simple_open(emg_55_resource_1,emg_55_resource_0);
    #line 9925 
    emg_55_ret = ldv_filter_err_code(emg_55_ret);
    #line 9928 
    if (ldv_undef_int() != 0) {
      #line 9930 
      __VERIFIER_assume(emg_55_ret == 0);
      #line 9934 
      goto emg_call_55;
    }
    else {
      #line 9939 
      __VERIFIER_assume(emg_55_ret != 0);
      #line 9942 
      if (emg_repeat_cnt_main_55_1 > 0) {
        #line 9943 
        emg_repeat_cnt_main_55_1 --;
        #line 9945 
        goto emg_main_55;
      }
      else 
           #line 9947 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 9954 
       ldv_free((void *)emg_55_resource_0);
  #line 9962 
  return (void *)0;
}

#line 9967  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_power_save_off_ops(void *arg0)
{
  #line 9970 
  struct file_operations *emg_56_container;
  #line 9971 
  long long emg_56_emg_param_1_0;
  #line 9972 
  char *emg_56_emg_param_1_2;
  #line 9973 
  char *emg_56_emg_param_1_4;
  #line 9974 
  int emg_56_emg_param_2_1;
  #line 9975 
  long long *emg_56_emg_param_3_3;
  #line 9976 
  long long *emg_56_emg_param_3_5;
  #line 9977 
  struct file *emg_56_resource_0;
  #line 9978 
  struct inode *emg_56_resource_1;
  #line 9979 
  int emg_56_ret;
  #line 9980 
  unsigned long emg_56_size_cnt;
  #line 9981 
  int emg_repeat_cnt_main_56_0 = 1;
  #line 9982 
  int emg_repeat_cnt_main_56_1 = 1;
  #line 9983 
  int emg_repeat_cnt_call_56 = 1;
  #line 9985 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 9989 
  emg_56_ret = ldv_undef_int();
  #line 9990 
  emg_56_container = emg_alias_pwr_power_save_off_ops;
  #line 9991 
  emg_56_ret = ldv_undef_int();
  #line 9993 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_power_save_off_ops);
  #line 9995 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 9996 
    emg_56_container = data->arg0;
    #line 9997 
    ldv_free((void *)data);
  }
  #line 10002 
  emg_56_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 10003 
  emg_56_size_cnt = (unsigned long)ldv_undef_int();
  #line 10007 
  goto emg_main_56;
  #line 10011 
  return (void *)0;
  #line 10014 
  emg_call_56: 
               #line 10014 
  ;
  #line 10015 
  if (ldv_undef_int() != 0) {
    #line 10016 
    switch (ldv_undef_int()) {
      #line 10017 
      case 0: 
              #line 10017 
      ;
      #line 10019 
      emg_56_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10019 
      emg_56_emg_param_1_2 = emg_56_emg_param_1_2;
      #line 10020 
      emg_56_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10020 
      emg_56_emg_param_3_3 = emg_56_emg_param_3_3;
      #line 10024 
      emg_wrapper_pwr_power_save_off_read(emg_56_resource_0,emg_56_emg_param_1_2,emg_56_size_cnt,emg_56_emg_param_3_3);
      #line 10028 
      ldv_free((void *)emg_56_emg_param_1_2);
      #line 10029 
      ldv_free((void *)emg_56_emg_param_3_3);
      #line 10031 
      break;
      #line 10033 
      case 1: 
              #line 10033 
      ;
      #line 10035 
      generic_file_llseek(emg_56_resource_0,emg_56_emg_param_1_0,emg_56_emg_param_2_1);
      #line 10037 
      break;
      #line 10039 
      case 2: 
              #line 10039 
      ;
      #line 10046 
      __VERIFIER_assume(emg_56_size_cnt <= 2147479552UL);
      #line 10047 
      emg_56_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10047 
      emg_56_emg_param_1_4 = emg_56_emg_param_1_4;
      #line 10048 
      emg_56_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10048 
      emg_56_emg_param_3_5 = emg_56_emg_param_3_5;
      #line 10052 
      if (emg_56_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 10053 
        (*(emg_56_container->write))(emg_56_resource_0,emg_56_emg_param_1_4,emg_56_size_cnt,emg_56_emg_param_3_5);
      #line 10058 
      ldv_free((void *)emg_56_emg_param_1_4);
      #line 10059 
      ldv_free((void *)emg_56_emg_param_3_5);
      #line 10061 
      break;
      #line 10063 
      default: 
               #line 10063 
      ;
      #line 10063 
      __VERIFIER_assume(0);
    }
    #line 10066 
    if (emg_repeat_cnt_call_56 > 0) {
      #line 10067 
      emg_repeat_cnt_call_56 --;
      #line 10069 
      goto emg_call_56;
    }
    else 
         #line 10071 
         __VERIFIER_assume(0);
  }
  else {
    #line 10077 
    if (emg_56_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 10078 
      (*(emg_56_container->release))(emg_56_resource_1,emg_56_resource_0);
    #line 10082 
    if (emg_repeat_cnt_main_56_0 > 0) {
      #line 10083 
      emg_repeat_cnt_main_56_0 --;
      #line 10085 
      goto emg_main_56;
    }
    else 
         #line 10087 
         __VERIFIER_assume(0);
  }
  #line 10093 
  return (void *)0;
  #line 10096 
  emg_main_56: 
               #line 10096 
  ;
  #line 10097 
  if (ldv_undef_int() != 0) {
    #line 10099 
    emg_56_ret = simple_open(emg_56_resource_1,emg_56_resource_0);
    #line 10104 
    emg_56_ret = ldv_filter_err_code(emg_56_ret);
    #line 10107 
    if (ldv_undef_int() != 0) {
      #line 10109 
      __VERIFIER_assume(emg_56_ret == 0);
      #line 10113 
      goto emg_call_56;
    }
    else {
      #line 10118 
      __VERIFIER_assume(emg_56_ret != 0);
      #line 10121 
      if (emg_repeat_cnt_main_56_1 > 0) {
        #line 10122 
        emg_repeat_cnt_main_56_1 --;
        #line 10124 
        goto emg_main_56;
      }
      else 
           #line 10126 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 10133 
       ldv_free((void *)emg_56_resource_0);
  #line 10141 
  return (void *)0;
}

#line 10146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_ps_enter_ops(void *arg0)
{
  #line 10149 
  struct file_operations *emg_57_container;
  #line 10150 
  long long emg_57_emg_param_1_0;
  #line 10151 
  char *emg_57_emg_param_1_2;
  #line 10152 
  char *emg_57_emg_param_1_4;
  #line 10153 
  int emg_57_emg_param_2_1;
  #line 10154 
  long long *emg_57_emg_param_3_3;
  #line 10155 
  long long *emg_57_emg_param_3_5;
  #line 10156 
  struct file *emg_57_resource_0;
  #line 10157 
  struct inode *emg_57_resource_1;
  #line 10158 
  int emg_57_ret;
  #line 10159 
  unsigned long emg_57_size_cnt;
  #line 10160 
  int emg_repeat_cnt_main_57_0 = 1;
  #line 10161 
  int emg_repeat_cnt_call_57 = 1;
  #line 10162 
  int emg_repeat_cnt_main_57_1 = 1;
  #line 10164 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 10168 
  emg_57_ret = ldv_undef_int();
  #line 10169 
  emg_57_container = emg_alias_pwr_ps_enter_ops;
  #line 10170 
  emg_57_ret = ldv_undef_int();
  #line 10172 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_ps_enter_ops);
  #line 10174 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 10175 
    emg_57_container = data->arg0;
    #line 10176 
    ldv_free((void *)data);
  }
  #line 10181 
  emg_57_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 10182 
  emg_57_size_cnt = (unsigned long)ldv_undef_int();
  #line 10186 
  goto emg_main_57;
  #line 10190 
  return (void *)0;
  #line 10193 
  emg_call_57: 
               #line 10193 
  ;
  #line 10194 
  if (ldv_undef_int() != 0) {
    #line 10195 
    switch (ldv_undef_int()) {
      #line 10196 
      case 0: 
              #line 10196 
      ;
      #line 10198 
      emg_57_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10198 
      emg_57_emg_param_1_2 = emg_57_emg_param_1_2;
      #line 10199 
      emg_57_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10199 
      emg_57_emg_param_3_3 = emg_57_emg_param_3_3;
      #line 10203 
      emg_wrapper_pwr_ps_enter_read(emg_57_resource_0,emg_57_emg_param_1_2,emg_57_size_cnt,emg_57_emg_param_3_3);
      #line 10207 
      ldv_free((void *)emg_57_emg_param_1_2);
      #line 10208 
      ldv_free((void *)emg_57_emg_param_3_3);
      #line 10210 
      break;
      #line 10212 
      case 1: 
              #line 10212 
      ;
      #line 10214 
      generic_file_llseek(emg_57_resource_0,emg_57_emg_param_1_0,emg_57_emg_param_2_1);
      #line 10216 
      break;
      #line 10218 
      case 2: 
              #line 10218 
      ;
      #line 10225 
      __VERIFIER_assume(emg_57_size_cnt <= 2147479552UL);
      #line 10226 
      emg_57_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10226 
      emg_57_emg_param_1_4 = emg_57_emg_param_1_4;
      #line 10227 
      emg_57_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10227 
      emg_57_emg_param_3_5 = emg_57_emg_param_3_5;
      #line 10231 
      if (emg_57_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 10232 
        (*(emg_57_container->write))(emg_57_resource_0,emg_57_emg_param_1_4,emg_57_size_cnt,emg_57_emg_param_3_5);
      #line 10237 
      ldv_free((void *)emg_57_emg_param_1_4);
      #line 10238 
      ldv_free((void *)emg_57_emg_param_3_5);
      #line 10240 
      break;
      #line 10242 
      default: 
               #line 10242 
      ;
      #line 10242 
      __VERIFIER_assume(0);
    }
    #line 10245 
    if (emg_repeat_cnt_call_57 > 0) {
      #line 10246 
      emg_repeat_cnt_call_57 --;
      #line 10248 
      goto emg_call_57;
    }
    else 
         #line 10250 
         __VERIFIER_assume(0);
  }
  else {
    #line 10256 
    if (emg_57_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 10257 
      (*(emg_57_container->release))(emg_57_resource_1,emg_57_resource_0);
    #line 10261 
    if (emg_repeat_cnt_main_57_1 > 0) {
      #line 10262 
      emg_repeat_cnt_main_57_1 --;
      #line 10264 
      goto emg_main_57;
    }
    else 
         #line 10266 
         __VERIFIER_assume(0);
  }
  #line 10272 
  return (void *)0;
  #line 10275 
  emg_main_57: 
               #line 10275 
  ;
  #line 10276 
  if (ldv_undef_int() != 0) {
    #line 10278 
    emg_57_ret = simple_open(emg_57_resource_1,emg_57_resource_0);
    #line 10283 
    emg_57_ret = ldv_filter_err_code(emg_57_ret);
    #line 10286 
    if (ldv_undef_int() != 0) {
      #line 10288 
      __VERIFIER_assume(emg_57_ret == 0);
      #line 10292 
      goto emg_call_57;
    }
    else {
      #line 10297 
      __VERIFIER_assume(emg_57_ret != 0);
      #line 10300 
      if (emg_repeat_cnt_main_57_0 > 0) {
        #line 10301 
        emg_repeat_cnt_main_57_0 --;
        #line 10303 
        goto emg_main_57;
      }
      else 
           #line 10305 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 10312 
       ldv_free((void *)emg_57_resource_0);
  #line 10320 
  return (void *)0;
}

#line 10325  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_rcvd_awake_beacons_ops(void *arg0)
{
  #line 10328 
  struct file_operations *emg_58_container;
  #line 10329 
  long long emg_58_emg_param_1_0;
  #line 10330 
  char *emg_58_emg_param_1_2;
  #line 10331 
  char *emg_58_emg_param_1_4;
  #line 10332 
  int emg_58_emg_param_2_1;
  #line 10333 
  long long *emg_58_emg_param_3_3;
  #line 10334 
  long long *emg_58_emg_param_3_5;
  #line 10335 
  struct file *emg_58_resource_0;
  #line 10336 
  struct inode *emg_58_resource_1;
  #line 10337 
  int emg_58_ret;
  #line 10338 
  unsigned long emg_58_size_cnt;
  #line 10339 
  int emg_repeat_cnt_main_58_1 = 1;
  #line 10340 
  int emg_repeat_cnt_call_58 = 1;
  #line 10341 
  int emg_repeat_cnt_main_58_0 = 1;
  #line 10343 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 10347 
  emg_58_ret = ldv_undef_int();
  #line 10348 
  emg_58_container = emg_alias_pwr_rcvd_awake_beacons_ops;
  #line 10349 
  emg_58_ret = ldv_undef_int();
  #line 10351 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_rcvd_awake_beacons_ops);
  #line 10353 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 10354 
    emg_58_container = data->arg0;
    #line 10355 
    ldv_free((void *)data);
  }
  #line 10360 
  emg_58_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 10361 
  emg_58_size_cnt = (unsigned long)ldv_undef_int();
  #line 10365 
  goto emg_main_58;
  #line 10369 
  return (void *)0;
  #line 10372 
  emg_call_58: 
               #line 10372 
  ;
  #line 10373 
  if (ldv_undef_int() != 0) {
    #line 10374 
    switch (ldv_undef_int()) {
      #line 10375 
      case 0: 
              #line 10375 
      ;
      #line 10377 
      emg_58_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10377 
      emg_58_emg_param_1_2 = emg_58_emg_param_1_2;
      #line 10378 
      emg_58_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10378 
      emg_58_emg_param_3_3 = emg_58_emg_param_3_3;
      #line 10382 
      emg_wrapper_pwr_rcvd_awake_beacons_read(emg_58_resource_0,emg_58_emg_param_1_2,emg_58_size_cnt,emg_58_emg_param_3_3);
      #line 10386 
      ldv_free((void *)emg_58_emg_param_1_2);
      #line 10387 
      ldv_free((void *)emg_58_emg_param_3_3);
      #line 10389 
      break;
      #line 10391 
      case 1: 
              #line 10391 
      ;
      #line 10393 
      generic_file_llseek(emg_58_resource_0,emg_58_emg_param_1_0,emg_58_emg_param_2_1);
      #line 10395 
      break;
      #line 10397 
      case 2: 
              #line 10397 
      ;
      #line 10404 
      __VERIFIER_assume(emg_58_size_cnt <= 2147479552UL);
      #line 10405 
      emg_58_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10405 
      emg_58_emg_param_1_4 = emg_58_emg_param_1_4;
      #line 10406 
      emg_58_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10406 
      emg_58_emg_param_3_5 = emg_58_emg_param_3_5;
      #line 10410 
      if (emg_58_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 10411 
        (*(emg_58_container->write))(emg_58_resource_0,emg_58_emg_param_1_4,emg_58_size_cnt,emg_58_emg_param_3_5);
      #line 10416 
      ldv_free((void *)emg_58_emg_param_1_4);
      #line 10417 
      ldv_free((void *)emg_58_emg_param_3_5);
      #line 10419 
      break;
      #line 10421 
      default: 
               #line 10421 
      ;
      #line 10421 
      __VERIFIER_assume(0);
    }
    #line 10424 
    if (emg_repeat_cnt_call_58 > 0) {
      #line 10425 
      emg_repeat_cnt_call_58 --;
      #line 10427 
      goto emg_call_58;
    }
    else 
         #line 10429 
         __VERIFIER_assume(0);
  }
  else {
    #line 10435 
    if (emg_58_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 10436 
      (*(emg_58_container->release))(emg_58_resource_1,emg_58_resource_0);
    #line 10440 
    if (emg_repeat_cnt_main_58_0 > 0) {
      #line 10441 
      emg_repeat_cnt_main_58_0 --;
      #line 10443 
      goto emg_main_58;
    }
    else 
         #line 10445 
         __VERIFIER_assume(0);
  }
  #line 10451 
  return (void *)0;
  #line 10454 
  emg_main_58: 
               #line 10454 
  ;
  #line 10455 
  if (ldv_undef_int() != 0) {
    #line 10457 
    emg_58_ret = simple_open(emg_58_resource_1,emg_58_resource_0);
    #line 10462 
    emg_58_ret = ldv_filter_err_code(emg_58_ret);
    #line 10465 
    if (ldv_undef_int() != 0) {
      #line 10467 
      __VERIFIER_assume(emg_58_ret == 0);
      #line 10471 
      goto emg_call_58;
    }
    else {
      #line 10476 
      __VERIFIER_assume(emg_58_ret != 0);
      #line 10479 
      if (emg_repeat_cnt_main_58_1 > 0) {
        #line 10480 
        emg_repeat_cnt_main_58_1 --;
        #line 10482 
        goto emg_main_58;
      }
      else 
           #line 10484 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 10491 
       ldv_free((void *)emg_58_resource_0);
  #line 10499 
  return (void *)0;
}

#line 10504  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_rcvd_beacons_ops(void *arg0)
{
  #line 10507 
  struct file_operations *emg_59_container;
  #line 10508 
  long long emg_59_emg_param_1_0;
  #line 10509 
  char *emg_59_emg_param_1_2;
  #line 10510 
  char *emg_59_emg_param_1_4;
  #line 10511 
  int emg_59_emg_param_2_1;
  #line 10512 
  long long *emg_59_emg_param_3_3;
  #line 10513 
  long long *emg_59_emg_param_3_5;
  #line 10514 
  struct file *emg_59_resource_0;
  #line 10515 
  struct inode *emg_59_resource_1;
  #line 10516 
  int emg_59_ret;
  #line 10517 
  unsigned long emg_59_size_cnt;
  #line 10518 
  int emg_repeat_cnt_main_59_1 = 1;
  #line 10519 
  int emg_repeat_cnt_call_59 = 1;
  #line 10520 
  int emg_repeat_cnt_main_59_0 = 1;
  #line 10522 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 10526 
  emg_59_ret = ldv_undef_int();
  #line 10527 
  emg_59_container = emg_alias_pwr_rcvd_beacons_ops;
  #line 10528 
  emg_59_ret = ldv_undef_int();
  #line 10530 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_rcvd_beacons_ops);
  #line 10532 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 10533 
    emg_59_container = data->arg0;
    #line 10534 
    ldv_free((void *)data);
  }
  #line 10539 
  emg_59_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 10540 
  emg_59_size_cnt = (unsigned long)ldv_undef_int();
  #line 10544 
  goto emg_main_59;
  #line 10548 
  return (void *)0;
  #line 10551 
  emg_call_59: 
               #line 10551 
  ;
  #line 10552 
  if (ldv_undef_int() != 0) {
    #line 10553 
    switch (ldv_undef_int()) {
      #line 10554 
      case 0: 
              #line 10554 
      ;
      #line 10556 
      emg_59_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10556 
      emg_59_emg_param_1_2 = emg_59_emg_param_1_2;
      #line 10557 
      emg_59_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10557 
      emg_59_emg_param_3_3 = emg_59_emg_param_3_3;
      #line 10561 
      emg_wrapper_pwr_rcvd_beacons_read(emg_59_resource_0,emg_59_emg_param_1_2,emg_59_size_cnt,emg_59_emg_param_3_3);
      #line 10565 
      ldv_free((void *)emg_59_emg_param_1_2);
      #line 10566 
      ldv_free((void *)emg_59_emg_param_3_3);
      #line 10568 
      break;
      #line 10570 
      case 1: 
              #line 10570 
      ;
      #line 10572 
      generic_file_llseek(emg_59_resource_0,emg_59_emg_param_1_0,emg_59_emg_param_2_1);
      #line 10574 
      break;
      #line 10576 
      case 2: 
              #line 10576 
      ;
      #line 10583 
      __VERIFIER_assume(emg_59_size_cnt <= 2147479552UL);
      #line 10584 
      emg_59_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10584 
      emg_59_emg_param_1_4 = emg_59_emg_param_1_4;
      #line 10585 
      emg_59_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10585 
      emg_59_emg_param_3_5 = emg_59_emg_param_3_5;
      #line 10589 
      if (emg_59_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 10590 
        (*(emg_59_container->write))(emg_59_resource_0,emg_59_emg_param_1_4,emg_59_size_cnt,emg_59_emg_param_3_5);
      #line 10595 
      ldv_free((void *)emg_59_emg_param_1_4);
      #line 10596 
      ldv_free((void *)emg_59_emg_param_3_5);
      #line 10598 
      break;
      #line 10600 
      default: 
               #line 10600 
      ;
      #line 10600 
      __VERIFIER_assume(0);
    }
    #line 10603 
    if (emg_repeat_cnt_call_59 > 0) {
      #line 10604 
      emg_repeat_cnt_call_59 --;
      #line 10606 
      goto emg_call_59;
    }
    else 
         #line 10608 
         __VERIFIER_assume(0);
  }
  else {
    #line 10614 
    if (emg_59_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 10615 
      (*(emg_59_container->release))(emg_59_resource_1,emg_59_resource_0);
    #line 10619 
    if (emg_repeat_cnt_main_59_0 > 0) {
      #line 10620 
      emg_repeat_cnt_main_59_0 --;
      #line 10622 
      goto emg_main_59;
    }
    else 
         #line 10624 
         __VERIFIER_assume(0);
  }
  #line 10630 
  return (void *)0;
  #line 10633 
  emg_main_59: 
               #line 10633 
  ;
  #line 10634 
  if (ldv_undef_int() != 0) {
    #line 10636 
    emg_59_ret = simple_open(emg_59_resource_1,emg_59_resource_0);
    #line 10641 
    emg_59_ret = ldv_filter_err_code(emg_59_ret);
    #line 10644 
    if (ldv_undef_int() != 0) {
      #line 10646 
      __VERIFIER_assume(emg_59_ret == 0);
      #line 10650 
      goto emg_call_59;
    }
    else {
      #line 10655 
      __VERIFIER_assume(emg_59_ret != 0);
      #line 10658 
      if (emg_repeat_cnt_main_59_1 > 0) {
        #line 10659 
        emg_repeat_cnt_main_59_1 --;
        #line 10661 
        goto emg_main_59;
      }
      else 
           #line 10663 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 10670 
       ldv_free((void *)emg_59_resource_0);
  #line 10678 
  return (void *)0;
}

#line 10683  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_tx_with_ps_ops(void *arg0)
{
  #line 10686 
  struct file_operations *emg_60_container;
  #line 10687 
  long long emg_60_emg_param_1_0;
  #line 10688 
  char *emg_60_emg_param_1_2;
  #line 10689 
  char *emg_60_emg_param_1_4;
  #line 10690 
  int emg_60_emg_param_2_1;
  #line 10691 
  long long *emg_60_emg_param_3_3;
  #line 10692 
  long long *emg_60_emg_param_3_5;
  #line 10693 
  struct file *emg_60_resource_0;
  #line 10694 
  struct inode *emg_60_resource_1;
  #line 10695 
  int emg_60_ret;
  #line 10696 
  unsigned long emg_60_size_cnt;
  #line 10697 
  int emg_repeat_cnt_call_60 = 1;
  #line 10698 
  int emg_repeat_cnt_main_60_0 = 1;
  #line 10699 
  int emg_repeat_cnt_main_60_1 = 1;
  #line 10701 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 10705 
  emg_60_ret = ldv_undef_int();
  #line 10706 
  emg_60_container = emg_alias_pwr_tx_with_ps_ops;
  #line 10707 
  emg_60_ret = ldv_undef_int();
  #line 10709 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_tx_with_ps_ops);
  #line 10711 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 10712 
    emg_60_container = data->arg0;
    #line 10713 
    ldv_free((void *)data);
  }
  #line 10718 
  emg_60_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 10719 
  emg_60_size_cnt = (unsigned long)ldv_undef_int();
  #line 10723 
  goto emg_main_60;
  #line 10727 
  return (void *)0;
  #line 10730 
  emg_call_60: 
               #line 10730 
  ;
  #line 10731 
  if (ldv_undef_int() != 0) {
    #line 10732 
    switch (ldv_undef_int()) {
      #line 10733 
      case 0: 
              #line 10733 
      ;
      #line 10735 
      emg_60_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10735 
      emg_60_emg_param_1_2 = emg_60_emg_param_1_2;
      #line 10736 
      emg_60_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10736 
      emg_60_emg_param_3_3 = emg_60_emg_param_3_3;
      #line 10740 
      emg_wrapper_pwr_tx_with_ps_read(emg_60_resource_0,emg_60_emg_param_1_2,emg_60_size_cnt,emg_60_emg_param_3_3);
      #line 10744 
      ldv_free((void *)emg_60_emg_param_1_2);
      #line 10745 
      ldv_free((void *)emg_60_emg_param_3_3);
      #line 10747 
      break;
      #line 10749 
      case 1: 
              #line 10749 
      ;
      #line 10751 
      generic_file_llseek(emg_60_resource_0,emg_60_emg_param_1_0,emg_60_emg_param_2_1);
      #line 10753 
      break;
      #line 10755 
      case 2: 
              #line 10755 
      ;
      #line 10762 
      __VERIFIER_assume(emg_60_size_cnt <= 2147479552UL);
      #line 10763 
      emg_60_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10763 
      emg_60_emg_param_1_4 = emg_60_emg_param_1_4;
      #line 10764 
      emg_60_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10764 
      emg_60_emg_param_3_5 = emg_60_emg_param_3_5;
      #line 10768 
      if (emg_60_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 10769 
        (*(emg_60_container->write))(emg_60_resource_0,emg_60_emg_param_1_4,emg_60_size_cnt,emg_60_emg_param_3_5);
      #line 10774 
      ldv_free((void *)emg_60_emg_param_1_4);
      #line 10775 
      ldv_free((void *)emg_60_emg_param_3_5);
      #line 10777 
      break;
      #line 10779 
      default: 
               #line 10779 
      ;
      #line 10779 
      __VERIFIER_assume(0);
    }
    #line 10782 
    if (emg_repeat_cnt_call_60 > 0) {
      #line 10783 
      emg_repeat_cnt_call_60 --;
      #line 10785 
      goto emg_call_60;
    }
    else 
         #line 10787 
         __VERIFIER_assume(0);
  }
  else {
    #line 10793 
    if (emg_60_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 10794 
      (*(emg_60_container->release))(emg_60_resource_1,emg_60_resource_0);
    #line 10798 
    if (emg_repeat_cnt_main_60_0 > 0) {
      #line 10799 
      emg_repeat_cnt_main_60_0 --;
      #line 10801 
      goto emg_main_60;
    }
    else 
         #line 10803 
         __VERIFIER_assume(0);
  }
  #line 10809 
  return (void *)0;
  #line 10812 
  emg_main_60: 
               #line 10812 
  ;
  #line 10813 
  if (ldv_undef_int() != 0) {
    #line 10815 
    emg_60_ret = simple_open(emg_60_resource_1,emg_60_resource_0);
    #line 10820 
    emg_60_ret = ldv_filter_err_code(emg_60_ret);
    #line 10823 
    if (ldv_undef_int() != 0) {
      #line 10825 
      __VERIFIER_assume(emg_60_ret == 0);
      #line 10829 
      goto emg_call_60;
    }
    else {
      #line 10834 
      __VERIFIER_assume(emg_60_ret != 0);
      #line 10837 
      if (emg_repeat_cnt_main_60_1 > 0) {
        #line 10838 
        emg_repeat_cnt_main_60_1 --;
        #line 10840 
        goto emg_main_60;
      }
      else 
           #line 10842 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 10849 
       ldv_free((void *)emg_60_resource_0);
  #line 10857 
  return (void *)0;
}

#line 10862  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_tx_without_ps_ops(void *arg0)
{
  #line 10865 
  struct file_operations *emg_61_container;
  #line 10866 
  long long emg_61_emg_param_1_0;
  #line 10867 
  char *emg_61_emg_param_1_2;
  #line 10868 
  char *emg_61_emg_param_1_4;
  #line 10869 
  int emg_61_emg_param_2_1;
  #line 10870 
  long long *emg_61_emg_param_3_3;
  #line 10871 
  long long *emg_61_emg_param_3_5;
  #line 10872 
  struct file *emg_61_resource_0;
  #line 10873 
  struct inode *emg_61_resource_1;
  #line 10874 
  int emg_61_ret;
  #line 10875 
  unsigned long emg_61_size_cnt;
  #line 10876 
  int emg_repeat_cnt_call_61 = 1;
  #line 10877 
  int emg_repeat_cnt_main_61_0 = 1;
  #line 10878 
  int emg_repeat_cnt_main_61_1 = 1;
  #line 10880 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 10884 
  emg_61_ret = ldv_undef_int();
  #line 10885 
  emg_61_container = emg_alias_pwr_tx_without_ps_ops;
  #line 10886 
  emg_61_ret = ldv_undef_int();
  #line 10888 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_tx_without_ps_ops);
  #line 10890 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 10891 
    emg_61_container = data->arg0;
    #line 10892 
    ldv_free((void *)data);
  }
  #line 10897 
  emg_61_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 10898 
  emg_61_size_cnt = (unsigned long)ldv_undef_int();
  #line 10902 
  goto emg_main_61;
  #line 10906 
  return (void *)0;
  #line 10909 
  emg_call_61: 
               #line 10909 
  ;
  #line 10910 
  if (ldv_undef_int() != 0) {
    #line 10911 
    switch (ldv_undef_int()) {
      #line 10912 
      case 0: 
              #line 10912 
      ;
      #line 10914 
      emg_61_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10914 
      emg_61_emg_param_1_2 = emg_61_emg_param_1_2;
      #line 10915 
      emg_61_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10915 
      emg_61_emg_param_3_3 = emg_61_emg_param_3_3;
      #line 10919 
      emg_wrapper_pwr_tx_without_ps_read(emg_61_resource_0,emg_61_emg_param_1_2,emg_61_size_cnt,emg_61_emg_param_3_3);
      #line 10923 
      ldv_free((void *)emg_61_emg_param_1_2);
      #line 10924 
      ldv_free((void *)emg_61_emg_param_3_3);
      #line 10926 
      break;
      #line 10928 
      case 1: 
              #line 10928 
      ;
      #line 10930 
      generic_file_llseek(emg_61_resource_0,emg_61_emg_param_1_0,emg_61_emg_param_2_1);
      #line 10932 
      break;
      #line 10934 
      case 2: 
              #line 10934 
      ;
      #line 10941 
      __VERIFIER_assume(emg_61_size_cnt <= 2147479552UL);
      #line 10942 
      emg_61_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10942 
      emg_61_emg_param_1_4 = emg_61_emg_param_1_4;
      #line 10943 
      emg_61_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10943 
      emg_61_emg_param_3_5 = emg_61_emg_param_3_5;
      #line 10947 
      if (emg_61_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 10948 
        (*(emg_61_container->write))(emg_61_resource_0,emg_61_emg_param_1_4,emg_61_size_cnt,emg_61_emg_param_3_5);
      #line 10953 
      ldv_free((void *)emg_61_emg_param_1_4);
      #line 10954 
      ldv_free((void *)emg_61_emg_param_3_5);
      #line 10956 
      break;
      #line 10958 
      default: 
               #line 10958 
      ;
      #line 10958 
      __VERIFIER_assume(0);
    }
    #line 10961 
    if (emg_repeat_cnt_call_61 > 0) {
      #line 10962 
      emg_repeat_cnt_call_61 --;
      #line 10964 
      goto emg_call_61;
    }
    else 
         #line 10966 
         __VERIFIER_assume(0);
  }
  else {
    #line 10972 
    if (emg_61_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 10973 
      (*(emg_61_container->release))(emg_61_resource_1,emg_61_resource_0);
    #line 10977 
    if (emg_repeat_cnt_main_61_1 > 0) {
      #line 10978 
      emg_repeat_cnt_main_61_1 --;
      #line 10980 
      goto emg_main_61;
    }
    else 
         #line 10982 
         __VERIFIER_assume(0);
  }
  #line 10988 
  return (void *)0;
  #line 10991 
  emg_main_61: 
               #line 10991 
  ;
  #line 10992 
  if (ldv_undef_int() != 0) {
    #line 10994 
    emg_61_ret = simple_open(emg_61_resource_1,emg_61_resource_0);
    #line 10999 
    emg_61_ret = ldv_filter_err_code(emg_61_ret);
    #line 11002 
    if (ldv_undef_int() != 0) {
      #line 11004 
      __VERIFIER_assume(emg_61_ret == 0);
      #line 11008 
      goto emg_call_61;
    }
    else {
      #line 11013 
      __VERIFIER_assume(emg_61_ret != 0);
      #line 11016 
      if (emg_repeat_cnt_main_61_0 > 0) {
        #line 11017 
        emg_repeat_cnt_main_61_0 --;
        #line 11019 
        goto emg_main_61;
      }
      else 
           #line 11021 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 11028 
       ldv_free((void *)emg_61_resource_0);
  #line 11036 
  return (void *)0;
}

#line 11041  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_wake_on_host_ops(void *arg0)
{
  #line 11044 
  struct file_operations *emg_62_container;
  #line 11045 
  long long emg_62_emg_param_1_0;
  #line 11046 
  char *emg_62_emg_param_1_2;
  #line 11047 
  char *emg_62_emg_param_1_4;
  #line 11048 
  int emg_62_emg_param_2_1;
  #line 11049 
  long long *emg_62_emg_param_3_3;
  #line 11050 
  long long *emg_62_emg_param_3_5;
  #line 11051 
  struct file *emg_62_resource_0;
  #line 11052 
  struct inode *emg_62_resource_1;
  #line 11053 
  int emg_62_ret;
  #line 11054 
  unsigned long emg_62_size_cnt;
  #line 11055 
  int emg_repeat_cnt_main_62_1 = 1;
  #line 11056 
  int emg_repeat_cnt_call_62 = 1;
  #line 11057 
  int emg_repeat_cnt_main_62_0 = 1;
  #line 11059 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 11063 
  emg_62_ret = ldv_undef_int();
  #line 11064 
  emg_62_container = emg_alias_pwr_wake_on_host_ops;
  #line 11065 
  emg_62_ret = ldv_undef_int();
  #line 11067 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_wake_on_host_ops);
  #line 11069 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 11070 
    emg_62_container = data->arg0;
    #line 11071 
    ldv_free((void *)data);
  }
  #line 11076 
  emg_62_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 11077 
  emg_62_size_cnt = (unsigned long)ldv_undef_int();
  #line 11081 
  goto emg_main_62;
  #line 11085 
  return (void *)0;
  #line 11088 
  emg_call_62: 
               #line 11088 
  ;
  #line 11089 
  if (ldv_undef_int() != 0) {
    #line 11090 
    switch (ldv_undef_int()) {
      #line 11091 
      case 0: 
              #line 11091 
      ;
      #line 11093 
      emg_62_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11093 
      emg_62_emg_param_1_2 = emg_62_emg_param_1_2;
      #line 11094 
      emg_62_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11094 
      emg_62_emg_param_3_3 = emg_62_emg_param_3_3;
      #line 11098 
      emg_wrapper_pwr_wake_on_host_read(emg_62_resource_0,emg_62_emg_param_1_2,emg_62_size_cnt,emg_62_emg_param_3_3);
      #line 11102 
      ldv_free((void *)emg_62_emg_param_1_2);
      #line 11103 
      ldv_free((void *)emg_62_emg_param_3_3);
      #line 11105 
      break;
      #line 11107 
      case 1: 
              #line 11107 
      ;
      #line 11109 
      generic_file_llseek(emg_62_resource_0,emg_62_emg_param_1_0,emg_62_emg_param_2_1);
      #line 11111 
      break;
      #line 11113 
      case 2: 
              #line 11113 
      ;
      #line 11120 
      __VERIFIER_assume(emg_62_size_cnt <= 2147479552UL);
      #line 11121 
      emg_62_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11121 
      emg_62_emg_param_1_4 = emg_62_emg_param_1_4;
      #line 11122 
      emg_62_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11122 
      emg_62_emg_param_3_5 = emg_62_emg_param_3_5;
      #line 11126 
      if (emg_62_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 11127 
        (*(emg_62_container->write))(emg_62_resource_0,emg_62_emg_param_1_4,emg_62_size_cnt,emg_62_emg_param_3_5);
      #line 11132 
      ldv_free((void *)emg_62_emg_param_1_4);
      #line 11133 
      ldv_free((void *)emg_62_emg_param_3_5);
      #line 11135 
      break;
      #line 11137 
      default: 
               #line 11137 
      ;
      #line 11137 
      __VERIFIER_assume(0);
    }
    #line 11140 
    if (emg_repeat_cnt_call_62 > 0) {
      #line 11141 
      emg_repeat_cnt_call_62 --;
      #line 11143 
      goto emg_call_62;
    }
    else 
         #line 11145 
         __VERIFIER_assume(0);
  }
  else {
    #line 11151 
    if (emg_62_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 11152 
      (*(emg_62_container->release))(emg_62_resource_1,emg_62_resource_0);
    #line 11156 
    if (emg_repeat_cnt_main_62_1 > 0) {
      #line 11157 
      emg_repeat_cnt_main_62_1 --;
      #line 11159 
      goto emg_main_62;
    }
    else 
         #line 11161 
         __VERIFIER_assume(0);
  }
  #line 11167 
  return (void *)0;
  #line 11170 
  emg_main_62: 
               #line 11170 
  ;
  #line 11171 
  if (ldv_undef_int() != 0) {
    #line 11173 
    emg_62_ret = simple_open(emg_62_resource_1,emg_62_resource_0);
    #line 11178 
    emg_62_ret = ldv_filter_err_code(emg_62_ret);
    #line 11181 
    if (ldv_undef_int() != 0) {
      #line 11183 
      __VERIFIER_assume(emg_62_ret == 0);
      #line 11187 
      goto emg_call_62;
    }
    else {
      #line 11192 
      __VERIFIER_assume(emg_62_ret != 0);
      #line 11195 
      if (emg_repeat_cnt_main_62_0 > 0) {
        #line 11196 
        emg_repeat_cnt_main_62_0 --;
        #line 11198 
        goto emg_main_62;
      }
      else 
           #line 11200 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 11207 
       ldv_free((void *)emg_62_resource_0);
  #line 11215 
  return (void *)0;
}

#line 11220  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_wake_on_timer_exp_ops(void *arg0)
{
  #line 11223 
  struct file_operations *emg_63_container;
  #line 11224 
  long long emg_63_emg_param_1_0;
  #line 11225 
  char *emg_63_emg_param_1_2;
  #line 11226 
  char *emg_63_emg_param_1_4;
  #line 11227 
  int emg_63_emg_param_2_1;
  #line 11228 
  long long *emg_63_emg_param_3_3;
  #line 11229 
  long long *emg_63_emg_param_3_5;
  #line 11230 
  struct file *emg_63_resource_0;
  #line 11231 
  struct inode *emg_63_resource_1;
  #line 11232 
  int emg_63_ret;
  #line 11233 
  unsigned long emg_63_size_cnt;
  #line 11234 
  int emg_repeat_cnt_call_63 = 1;
  #line 11235 
  int emg_repeat_cnt_main_63_1 = 1;
  #line 11236 
  int emg_repeat_cnt_main_63_0 = 1;
  #line 11238 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 11242 
  emg_63_ret = ldv_undef_int();
  #line 11243 
  emg_63_container = emg_alias_pwr_wake_on_timer_exp_ops;
  #line 11244 
  emg_63_ret = ldv_undef_int();
  #line 11246 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_wake_on_timer_exp_ops);
  #line 11248 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 11249 
    emg_63_container = data->arg0;
    #line 11250 
    ldv_free((void *)data);
  }
  #line 11255 
  emg_63_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 11256 
  emg_63_size_cnt = (unsigned long)ldv_undef_int();
  #line 11260 
  goto emg_main_63;
  #line 11264 
  return (void *)0;
  #line 11267 
  emg_call_63: 
               #line 11267 
  ;
  #line 11268 
  if (ldv_undef_int() != 0) {
    #line 11269 
    switch (ldv_undef_int()) {
      #line 11270 
      case 0: 
              #line 11270 
      ;
      #line 11272 
      emg_63_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11272 
      emg_63_emg_param_1_2 = emg_63_emg_param_1_2;
      #line 11273 
      emg_63_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11273 
      emg_63_emg_param_3_3 = emg_63_emg_param_3_3;
      #line 11277 
      emg_wrapper_pwr_wake_on_timer_exp_read(emg_63_resource_0,emg_63_emg_param_1_2,emg_63_size_cnt,emg_63_emg_param_3_3);
      #line 11281 
      ldv_free((void *)emg_63_emg_param_1_2);
      #line 11282 
      ldv_free((void *)emg_63_emg_param_3_3);
      #line 11284 
      break;
      #line 11286 
      case 1: 
              #line 11286 
      ;
      #line 11288 
      generic_file_llseek(emg_63_resource_0,emg_63_emg_param_1_0,emg_63_emg_param_2_1);
      #line 11290 
      break;
      #line 11292 
      case 2: 
              #line 11292 
      ;
      #line 11299 
      __VERIFIER_assume(emg_63_size_cnt <= 2147479552UL);
      #line 11300 
      emg_63_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11300 
      emg_63_emg_param_1_4 = emg_63_emg_param_1_4;
      #line 11301 
      emg_63_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11301 
      emg_63_emg_param_3_5 = emg_63_emg_param_3_5;
      #line 11305 
      if (emg_63_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 11306 
        (*(emg_63_container->write))(emg_63_resource_0,emg_63_emg_param_1_4,emg_63_size_cnt,emg_63_emg_param_3_5);
      #line 11311 
      ldv_free((void *)emg_63_emg_param_1_4);
      #line 11312 
      ldv_free((void *)emg_63_emg_param_3_5);
      #line 11314 
      break;
      #line 11316 
      default: 
               #line 11316 
      ;
      #line 11316 
      __VERIFIER_assume(0);
    }
    #line 11319 
    if (emg_repeat_cnt_call_63 > 0) {
      #line 11320 
      emg_repeat_cnt_call_63 --;
      #line 11322 
      goto emg_call_63;
    }
    else 
         #line 11324 
         __VERIFIER_assume(0);
  }
  else {
    #line 11330 
    if (emg_63_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 11331 
      (*(emg_63_container->release))(emg_63_resource_1,emg_63_resource_0);
    #line 11335 
    if (emg_repeat_cnt_main_63_0 > 0) {
      #line 11336 
      emg_repeat_cnt_main_63_0 --;
      #line 11338 
      goto emg_main_63;
    }
    else 
         #line 11340 
         __VERIFIER_assume(0);
  }
  #line 11346 
  return (void *)0;
  #line 11349 
  emg_main_63: 
               #line 11349 
  ;
  #line 11350 
  if (ldv_undef_int() != 0) {
    #line 11352 
    emg_63_ret = simple_open(emg_63_resource_1,emg_63_resource_0);
    #line 11357 
    emg_63_ret = ldv_filter_err_code(emg_63_ret);
    #line 11360 
    if (ldv_undef_int() != 0) {
      #line 11362 
      __VERIFIER_assume(emg_63_ret == 0);
      #line 11366 
      goto emg_call_63;
    }
    else {
      #line 11371 
      __VERIFIER_assume(emg_63_ret != 0);
      #line 11374 
      if (emg_repeat_cnt_main_63_1 > 0) {
        #line 11375 
        emg_repeat_cnt_main_63_1 --;
        #line 11377 
        goto emg_main_63;
      }
      else 
           #line 11379 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 11386 
       ldv_free((void *)emg_63_resource_0);
  #line 11394 
  return (void *)0;
}

#line 11399  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_dropped_ops(void *arg0)
{
  #line 11402 
  struct file_operations *emg_64_container;
  #line 11403 
  long long emg_64_emg_param_1_0;
  #line 11404 
  char *emg_64_emg_param_1_2;
  #line 11405 
  char *emg_64_emg_param_1_4;
  #line 11406 
  int emg_64_emg_param_2_1;
  #line 11407 
  long long *emg_64_emg_param_3_3;
  #line 11408 
  long long *emg_64_emg_param_3_5;
  #line 11409 
  struct file *emg_64_resource_0;
  #line 11410 
  struct inode *emg_64_resource_1;
  #line 11411 
  int emg_64_ret;
  #line 11412 
  unsigned long emg_64_size_cnt;
  #line 11413 
  int emg_repeat_cnt_main_64_0 = 1;
  #line 11414 
  int emg_repeat_cnt_call_64 = 1;
  #line 11415 
  int emg_repeat_cnt_main_64_1 = 1;
  #line 11417 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 11421 
  emg_64_ret = ldv_undef_int();
  #line 11422 
  emg_64_container = emg_alias_rx_dropped_ops;
  #line 11423 
  emg_64_ret = ldv_undef_int();
  #line 11425 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_dropped_ops);
  #line 11427 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 11428 
    emg_64_container = data->arg0;
    #line 11429 
    ldv_free((void *)data);
  }
  #line 11434 
  emg_64_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 11435 
  emg_64_size_cnt = (unsigned long)ldv_undef_int();
  #line 11439 
  goto emg_main_64;
  #line 11443 
  return (void *)0;
  #line 11446 
  emg_call_64: 
               #line 11446 
  ;
  #line 11447 
  if (ldv_undef_int() != 0) {
    #line 11448 
    switch (ldv_undef_int()) {
      #line 11449 
      case 0: 
              #line 11449 
      ;
      #line 11451 
      emg_64_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11451 
      emg_64_emg_param_1_2 = emg_64_emg_param_1_2;
      #line 11452 
      emg_64_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11452 
      emg_64_emg_param_3_3 = emg_64_emg_param_3_3;
      #line 11456 
      emg_wrapper_rx_dropped_read(emg_64_resource_0,emg_64_emg_param_1_2,emg_64_size_cnt,emg_64_emg_param_3_3);
      #line 11460 
      ldv_free((void *)emg_64_emg_param_1_2);
      #line 11461 
      ldv_free((void *)emg_64_emg_param_3_3);
      #line 11463 
      break;
      #line 11465 
      case 1: 
              #line 11465 
      ;
      #line 11467 
      generic_file_llseek(emg_64_resource_0,emg_64_emg_param_1_0,emg_64_emg_param_2_1);
      #line 11469 
      break;
      #line 11471 
      case 2: 
              #line 11471 
      ;
      #line 11478 
      __VERIFIER_assume(emg_64_size_cnt <= 2147479552UL);
      #line 11479 
      emg_64_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11479 
      emg_64_emg_param_1_4 = emg_64_emg_param_1_4;
      #line 11480 
      emg_64_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11480 
      emg_64_emg_param_3_5 = emg_64_emg_param_3_5;
      #line 11484 
      if (emg_64_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 11485 
        (*(emg_64_container->write))(emg_64_resource_0,emg_64_emg_param_1_4,emg_64_size_cnt,emg_64_emg_param_3_5);
      #line 11490 
      ldv_free((void *)emg_64_emg_param_1_4);
      #line 11491 
      ldv_free((void *)emg_64_emg_param_3_5);
      #line 11493 
      break;
      #line 11495 
      default: 
               #line 11495 
      ;
      #line 11495 
      __VERIFIER_assume(0);
    }
    #line 11498 
    if (emg_repeat_cnt_call_64 > 0) {
      #line 11499 
      emg_repeat_cnt_call_64 --;
      #line 11501 
      goto emg_call_64;
    }
    else 
         #line 11503 
         __VERIFIER_assume(0);
  }
  else {
    #line 11509 
    if (emg_64_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 11510 
      (*(emg_64_container->release))(emg_64_resource_1,emg_64_resource_0);
    #line 11514 
    if (emg_repeat_cnt_main_64_0 > 0) {
      #line 11515 
      emg_repeat_cnt_main_64_0 --;
      #line 11517 
      goto emg_main_64;
    }
    else 
         #line 11519 
         __VERIFIER_assume(0);
  }
  #line 11525 
  return (void *)0;
  #line 11528 
  emg_main_64: 
               #line 11528 
  ;
  #line 11529 
  if (ldv_undef_int() != 0) {
    #line 11531 
    emg_64_ret = simple_open(emg_64_resource_1,emg_64_resource_0);
    #line 11536 
    emg_64_ret = ldv_filter_err_code(emg_64_ret);
    #line 11539 
    if (ldv_undef_int() != 0) {
      #line 11541 
      __VERIFIER_assume(emg_64_ret == 0);
      #line 11545 
      goto emg_call_64;
    }
    else {
      #line 11550 
      __VERIFIER_assume(emg_64_ret != 0);
      #line 11553 
      if (emg_repeat_cnt_main_64_1 > 0) {
        #line 11554 
        emg_repeat_cnt_main_64_1 --;
        #line 11556 
        goto emg_main_64;
      }
      else 
           #line 11558 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 11565 
       ldv_free((void *)emg_64_resource_0);
  #line 11573 
  return (void *)0;
}

#line 11578  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_fcs_err_ops(void *arg0)
{
  #line 11581 
  struct file_operations *emg_65_container;
  #line 11582 
  long long emg_65_emg_param_1_0;
  #line 11583 
  char *emg_65_emg_param_1_2;
  #line 11584 
  char *emg_65_emg_param_1_4;
  #line 11585 
  int emg_65_emg_param_2_1;
  #line 11586 
  long long *emg_65_emg_param_3_3;
  #line 11587 
  long long *emg_65_emg_param_3_5;
  #line 11588 
  struct file *emg_65_resource_0;
  #line 11589 
  struct inode *emg_65_resource_1;
  #line 11590 
  int emg_65_ret;
  #line 11591 
  unsigned long emg_65_size_cnt;
  #line 11592 
  int emg_repeat_cnt_main_65_1 = 1;
  #line 11593 
  int emg_repeat_cnt_call_65 = 1;
  #line 11594 
  int emg_repeat_cnt_main_65_0 = 1;
  #line 11596 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 11600 
  emg_65_ret = ldv_undef_int();
  #line 11601 
  emg_65_container = emg_alias_rx_fcs_err_ops;
  #line 11602 
  emg_65_ret = ldv_undef_int();
  #line 11604 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_fcs_err_ops);
  #line 11606 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 11607 
    emg_65_container = data->arg0;
    #line 11608 
    ldv_free((void *)data);
  }
  #line 11613 
  emg_65_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 11614 
  emg_65_size_cnt = (unsigned long)ldv_undef_int();
  #line 11618 
  goto emg_main_65;
  #line 11622 
  return (void *)0;
  #line 11625 
  emg_call_65: 
               #line 11625 
  ;
  #line 11626 
  if (ldv_undef_int() != 0) {
    #line 11627 
    switch (ldv_undef_int()) {
      #line 11628 
      case 0: 
              #line 11628 
      ;
      #line 11630 
      emg_65_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11630 
      emg_65_emg_param_1_2 = emg_65_emg_param_1_2;
      #line 11631 
      emg_65_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11631 
      emg_65_emg_param_3_3 = emg_65_emg_param_3_3;
      #line 11635 
      emg_wrapper_rx_fcs_err_read(emg_65_resource_0,emg_65_emg_param_1_2,emg_65_size_cnt,emg_65_emg_param_3_3);
      #line 11639 
      ldv_free((void *)emg_65_emg_param_1_2);
      #line 11640 
      ldv_free((void *)emg_65_emg_param_3_3);
      #line 11642 
      break;
      #line 11644 
      case 1: 
              #line 11644 
      ;
      #line 11646 
      generic_file_llseek(emg_65_resource_0,emg_65_emg_param_1_0,emg_65_emg_param_2_1);
      #line 11648 
      break;
      #line 11650 
      case 2: 
              #line 11650 
      ;
      #line 11657 
      __VERIFIER_assume(emg_65_size_cnt <= 2147479552UL);
      #line 11658 
      emg_65_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11658 
      emg_65_emg_param_1_4 = emg_65_emg_param_1_4;
      #line 11659 
      emg_65_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11659 
      emg_65_emg_param_3_5 = emg_65_emg_param_3_5;
      #line 11663 
      if (emg_65_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 11664 
        (*(emg_65_container->write))(emg_65_resource_0,emg_65_emg_param_1_4,emg_65_size_cnt,emg_65_emg_param_3_5);
      #line 11669 
      ldv_free((void *)emg_65_emg_param_1_4);
      #line 11670 
      ldv_free((void *)emg_65_emg_param_3_5);
      #line 11672 
      break;
      #line 11674 
      default: 
               #line 11674 
      ;
      #line 11674 
      __VERIFIER_assume(0);
    }
    #line 11677 
    if (emg_repeat_cnt_call_65 > 0) {
      #line 11678 
      emg_repeat_cnt_call_65 --;
      #line 11680 
      goto emg_call_65;
    }
    else 
         #line 11682 
         __VERIFIER_assume(0);
  }
  else {
    #line 11688 
    if (emg_65_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 11689 
      (*(emg_65_container->release))(emg_65_resource_1,emg_65_resource_0);
    #line 11693 
    if (emg_repeat_cnt_main_65_1 > 0) {
      #line 11694 
      emg_repeat_cnt_main_65_1 --;
      #line 11696 
      goto emg_main_65;
    }
    else 
         #line 11698 
         __VERIFIER_assume(0);
  }
  #line 11704 
  return (void *)0;
  #line 11707 
  emg_main_65: 
               #line 11707 
  ;
  #line 11708 
  if (ldv_undef_int() != 0) {
    #line 11710 
    emg_65_ret = simple_open(emg_65_resource_1,emg_65_resource_0);
    #line 11715 
    emg_65_ret = ldv_filter_err_code(emg_65_ret);
    #line 11718 
    if (ldv_undef_int() != 0) {
      #line 11720 
      __VERIFIER_assume(emg_65_ret == 0);
      #line 11724 
      goto emg_call_65;
    }
    else {
      #line 11729 
      __VERIFIER_assume(emg_65_ret != 0);
      #line 11732 
      if (emg_repeat_cnt_main_65_0 > 0) {
        #line 11733 
        emg_repeat_cnt_main_65_0 --;
        #line 11735 
        goto emg_main_65;
      }
      else 
           #line 11737 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 11744 
       ldv_free((void *)emg_65_resource_0);
  #line 11752 
  return (void *)0;
}

#line 11757  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_hdr_overflow_ops(void *arg0)
{
  #line 11760 
  struct file_operations *emg_66_container;
  #line 11761 
  long long emg_66_emg_param_1_0;
  #line 11762 
  char *emg_66_emg_param_1_2;
  #line 11763 
  char *emg_66_emg_param_1_4;
  #line 11764 
  int emg_66_emg_param_2_1;
  #line 11765 
  long long *emg_66_emg_param_3_3;
  #line 11766 
  long long *emg_66_emg_param_3_5;
  #line 11767 
  struct file *emg_66_resource_0;
  #line 11768 
  struct inode *emg_66_resource_1;
  #line 11769 
  int emg_66_ret;
  #line 11770 
  unsigned long emg_66_size_cnt;
  #line 11771 
  int emg_repeat_cnt_main_66_0 = 1;
  #line 11772 
  int emg_repeat_cnt_call_66 = 1;
  #line 11773 
  int emg_repeat_cnt_main_66_1 = 1;
  #line 11775 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 11779 
  emg_66_ret = ldv_undef_int();
  #line 11780 
  emg_66_container = emg_alias_rx_hdr_overflow_ops;
  #line 11781 
  emg_66_ret = ldv_undef_int();
  #line 11783 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_hdr_overflow_ops);
  #line 11785 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 11786 
    emg_66_container = data->arg0;
    #line 11787 
    ldv_free((void *)data);
  }
  #line 11792 
  emg_66_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 11793 
  emg_66_size_cnt = (unsigned long)ldv_undef_int();
  #line 11797 
  goto emg_main_66;
  #line 11801 
  return (void *)0;
  #line 11804 
  emg_call_66: 
               #line 11804 
  ;
  #line 11805 
  if (ldv_undef_int() != 0) {
    #line 11806 
    switch (ldv_undef_int()) {
      #line 11807 
      case 0: 
              #line 11807 
      ;
      #line 11809 
      emg_66_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11809 
      emg_66_emg_param_1_2 = emg_66_emg_param_1_2;
      #line 11810 
      emg_66_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11810 
      emg_66_emg_param_3_3 = emg_66_emg_param_3_3;
      #line 11814 
      emg_wrapper_rx_hdr_overflow_read(emg_66_resource_0,emg_66_emg_param_1_2,emg_66_size_cnt,emg_66_emg_param_3_3);
      #line 11818 
      ldv_free((void *)emg_66_emg_param_1_2);
      #line 11819 
      ldv_free((void *)emg_66_emg_param_3_3);
      #line 11821 
      break;
      #line 11823 
      case 1: 
              #line 11823 
      ;
      #line 11825 
      generic_file_llseek(emg_66_resource_0,emg_66_emg_param_1_0,emg_66_emg_param_2_1);
      #line 11827 
      break;
      #line 11829 
      case 2: 
              #line 11829 
      ;
      #line 11836 
      __VERIFIER_assume(emg_66_size_cnt <= 2147479552UL);
      #line 11837 
      emg_66_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11837 
      emg_66_emg_param_1_4 = emg_66_emg_param_1_4;
      #line 11838 
      emg_66_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11838 
      emg_66_emg_param_3_5 = emg_66_emg_param_3_5;
      #line 11842 
      if (emg_66_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 11843 
        (*(emg_66_container->write))(emg_66_resource_0,emg_66_emg_param_1_4,emg_66_size_cnt,emg_66_emg_param_3_5);
      #line 11848 
      ldv_free((void *)emg_66_emg_param_1_4);
      #line 11849 
      ldv_free((void *)emg_66_emg_param_3_5);
      #line 11851 
      break;
      #line 11853 
      default: 
               #line 11853 
      ;
      #line 11853 
      __VERIFIER_assume(0);
    }
    #line 11856 
    if (emg_repeat_cnt_call_66 > 0) {
      #line 11857 
      emg_repeat_cnt_call_66 --;
      #line 11859 
      goto emg_call_66;
    }
    else 
         #line 11861 
         __VERIFIER_assume(0);
  }
  else {
    #line 11867 
    if (emg_66_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 11868 
      (*(emg_66_container->release))(emg_66_resource_1,emg_66_resource_0);
    #line 11872 
    if (emg_repeat_cnt_main_66_0 > 0) {
      #line 11873 
      emg_repeat_cnt_main_66_0 --;
      #line 11875 
      goto emg_main_66;
    }
    else 
         #line 11877 
         __VERIFIER_assume(0);
  }
  #line 11883 
  return (void *)0;
  #line 11886 
  emg_main_66: 
               #line 11886 
  ;
  #line 11887 
  if (ldv_undef_int() != 0) {
    #line 11889 
    emg_66_ret = simple_open(emg_66_resource_1,emg_66_resource_0);
    #line 11894 
    emg_66_ret = ldv_filter_err_code(emg_66_ret);
    #line 11897 
    if (ldv_undef_int() != 0) {
      #line 11899 
      __VERIFIER_assume(emg_66_ret == 0);
      #line 11903 
      goto emg_call_66;
    }
    else {
      #line 11908 
      __VERIFIER_assume(emg_66_ret != 0);
      #line 11911 
      if (emg_repeat_cnt_main_66_1 > 0) {
        #line 11912 
        emg_repeat_cnt_main_66_1 --;
        #line 11914 
        goto emg_main_66;
      }
      else 
           #line 11916 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 11923 
       ldv_free((void *)emg_66_resource_0);
  #line 11931 
  return (void *)0;
}

#line 11936  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_hw_stuck_ops(void *arg0)
{
  #line 11939 
  struct file_operations *emg_67_container;
  #line 11940 
  long long emg_67_emg_param_1_0;
  #line 11941 
  char *emg_67_emg_param_1_2;
  #line 11942 
  char *emg_67_emg_param_1_4;
  #line 11943 
  int emg_67_emg_param_2_1;
  #line 11944 
  long long *emg_67_emg_param_3_3;
  #line 11945 
  long long *emg_67_emg_param_3_5;
  #line 11946 
  struct file *emg_67_resource_0;
  #line 11947 
  struct inode *emg_67_resource_1;
  #line 11948 
  int emg_67_ret;
  #line 11949 
  unsigned long emg_67_size_cnt;
  #line 11950 
  int emg_repeat_cnt_main_67_1 = 1;
  #line 11951 
  int emg_repeat_cnt_call_67 = 1;
  #line 11952 
  int emg_repeat_cnt_main_67_0 = 1;
  #line 11954 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 11958 
  emg_67_ret = ldv_undef_int();
  #line 11959 
  emg_67_container = emg_alias_rx_hw_stuck_ops;
  #line 11960 
  emg_67_ret = ldv_undef_int();
  #line 11962 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_hw_stuck_ops);
  #line 11964 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 11965 
    emg_67_container = data->arg0;
    #line 11966 
    ldv_free((void *)data);
  }
  #line 11971 
  emg_67_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 11972 
  emg_67_size_cnt = (unsigned long)ldv_undef_int();
  #line 11976 
  goto emg_main_67;
  #line 11980 
  return (void *)0;
  #line 11983 
  emg_call_67: 
               #line 11983 
  ;
  #line 11984 
  if (ldv_undef_int() != 0) {
    #line 11985 
    switch (ldv_undef_int()) {
      #line 11986 
      case 0: 
              #line 11986 
      ;
      #line 11988 
      emg_67_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11988 
      emg_67_emg_param_1_2 = emg_67_emg_param_1_2;
      #line 11989 
      emg_67_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11989 
      emg_67_emg_param_3_3 = emg_67_emg_param_3_3;
      #line 11993 
      emg_wrapper_rx_hw_stuck_read(emg_67_resource_0,emg_67_emg_param_1_2,emg_67_size_cnt,emg_67_emg_param_3_3);
      #line 11997 
      ldv_free((void *)emg_67_emg_param_1_2);
      #line 11998 
      ldv_free((void *)emg_67_emg_param_3_3);
      #line 12000 
      break;
      #line 12002 
      case 1: 
              #line 12002 
      ;
      #line 12004 
      generic_file_llseek(emg_67_resource_0,emg_67_emg_param_1_0,emg_67_emg_param_2_1);
      #line 12006 
      break;
      #line 12008 
      case 2: 
              #line 12008 
      ;
      #line 12015 
      __VERIFIER_assume(emg_67_size_cnt <= 2147479552UL);
      #line 12016 
      emg_67_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12016 
      emg_67_emg_param_1_4 = emg_67_emg_param_1_4;
      #line 12017 
      emg_67_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12017 
      emg_67_emg_param_3_5 = emg_67_emg_param_3_5;
      #line 12021 
      if (emg_67_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 12022 
        (*(emg_67_container->write))(emg_67_resource_0,emg_67_emg_param_1_4,emg_67_size_cnt,emg_67_emg_param_3_5);
      #line 12027 
      ldv_free((void *)emg_67_emg_param_1_4);
      #line 12028 
      ldv_free((void *)emg_67_emg_param_3_5);
      #line 12030 
      break;
      #line 12032 
      default: 
               #line 12032 
      ;
      #line 12032 
      __VERIFIER_assume(0);
    }
    #line 12035 
    if (emg_repeat_cnt_call_67 > 0) {
      #line 12036 
      emg_repeat_cnt_call_67 --;
      #line 12038 
      goto emg_call_67;
    }
    else 
         #line 12040 
         __VERIFIER_assume(0);
  }
  else {
    #line 12046 
    if (emg_67_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 12047 
      (*(emg_67_container->release))(emg_67_resource_1,emg_67_resource_0);
    #line 12051 
    if (emg_repeat_cnt_main_67_1 > 0) {
      #line 12052 
      emg_repeat_cnt_main_67_1 --;
      #line 12054 
      goto emg_main_67;
    }
    else 
         #line 12056 
         __VERIFIER_assume(0);
  }
  #line 12062 
  return (void *)0;
  #line 12065 
  emg_main_67: 
               #line 12065 
  ;
  #line 12066 
  if (ldv_undef_int() != 0) {
    #line 12068 
    emg_67_ret = simple_open(emg_67_resource_1,emg_67_resource_0);
    #line 12073 
    emg_67_ret = ldv_filter_err_code(emg_67_ret);
    #line 12076 
    if (ldv_undef_int() != 0) {
      #line 12078 
      __VERIFIER_assume(emg_67_ret == 0);
      #line 12082 
      goto emg_call_67;
    }
    else {
      #line 12087 
      __VERIFIER_assume(emg_67_ret != 0);
      #line 12090 
      if (emg_repeat_cnt_main_67_0 > 0) {
        #line 12091 
        emg_repeat_cnt_main_67_0 --;
        #line 12093 
        goto emg_main_67;
      }
      else 
           #line 12095 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 12102 
       ldv_free((void *)emg_67_resource_0);
  #line 12110 
  return (void *)0;
}

#line 12115  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_out_of_mem_ops(void *arg0)
{
  #line 12118 
  struct file_operations *emg_68_container;
  #line 12119 
  long long emg_68_emg_param_1_0;
  #line 12120 
  char *emg_68_emg_param_1_2;
  #line 12121 
  char *emg_68_emg_param_1_4;
  #line 12122 
  int emg_68_emg_param_2_1;
  #line 12123 
  long long *emg_68_emg_param_3_3;
  #line 12124 
  long long *emg_68_emg_param_3_5;
  #line 12125 
  struct file *emg_68_resource_0;
  #line 12126 
  struct inode *emg_68_resource_1;
  #line 12127 
  int emg_68_ret;
  #line 12128 
  unsigned long emg_68_size_cnt;
  #line 12129 
  int emg_repeat_cnt_main_68_0 = 1;
  #line 12130 
  int emg_repeat_cnt_call_68 = 1;
  #line 12131 
  int emg_repeat_cnt_main_68_1 = 1;
  #line 12133 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 12137 
  emg_68_ret = ldv_undef_int();
  #line 12138 
  emg_68_container = emg_alias_rx_out_of_mem_ops;
  #line 12139 
  emg_68_ret = ldv_undef_int();
  #line 12141 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_out_of_mem_ops);
  #line 12143 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 12144 
    emg_68_container = data->arg0;
    #line 12145 
    ldv_free((void *)data);
  }
  #line 12150 
  emg_68_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 12151 
  emg_68_size_cnt = (unsigned long)ldv_undef_int();
  #line 12155 
  goto emg_main_68;
  #line 12159 
  return (void *)0;
  #line 12162 
  emg_call_68: 
               #line 12162 
  ;
  #line 12163 
  if (ldv_undef_int() != 0) {
    #line 12164 
    switch (ldv_undef_int()) {
      #line 12165 
      case 0: 
              #line 12165 
      ;
      #line 12167 
      emg_68_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12167 
      emg_68_emg_param_1_2 = emg_68_emg_param_1_2;
      #line 12168 
      emg_68_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12168 
      emg_68_emg_param_3_3 = emg_68_emg_param_3_3;
      #line 12172 
      emg_wrapper_rx_out_of_mem_read(emg_68_resource_0,emg_68_emg_param_1_2,emg_68_size_cnt,emg_68_emg_param_3_3);
      #line 12176 
      ldv_free((void *)emg_68_emg_param_1_2);
      #line 12177 
      ldv_free((void *)emg_68_emg_param_3_3);
      #line 12179 
      break;
      #line 12181 
      case 1: 
              #line 12181 
      ;
      #line 12183 
      generic_file_llseek(emg_68_resource_0,emg_68_emg_param_1_0,emg_68_emg_param_2_1);
      #line 12185 
      break;
      #line 12187 
      case 2: 
              #line 12187 
      ;
      #line 12194 
      __VERIFIER_assume(emg_68_size_cnt <= 2147479552UL);
      #line 12195 
      emg_68_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12195 
      emg_68_emg_param_1_4 = emg_68_emg_param_1_4;
      #line 12196 
      emg_68_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12196 
      emg_68_emg_param_3_5 = emg_68_emg_param_3_5;
      #line 12200 
      if (emg_68_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 12201 
        (*(emg_68_container->write))(emg_68_resource_0,emg_68_emg_param_1_4,emg_68_size_cnt,emg_68_emg_param_3_5);
      #line 12206 
      ldv_free((void *)emg_68_emg_param_1_4);
      #line 12207 
      ldv_free((void *)emg_68_emg_param_3_5);
      #line 12209 
      break;
      #line 12211 
      default: 
               #line 12211 
      ;
      #line 12211 
      __VERIFIER_assume(0);
    }
    #line 12214 
    if (emg_repeat_cnt_call_68 > 0) {
      #line 12215 
      emg_repeat_cnt_call_68 --;
      #line 12217 
      goto emg_call_68;
    }
    else 
         #line 12219 
         __VERIFIER_assume(0);
  }
  else {
    #line 12225 
    if (emg_68_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 12226 
      (*(emg_68_container->release))(emg_68_resource_1,emg_68_resource_0);
    #line 12230 
    if (emg_repeat_cnt_main_68_1 > 0) {
      #line 12231 
      emg_repeat_cnt_main_68_1 --;
      #line 12233 
      goto emg_main_68;
    }
    else 
         #line 12235 
         __VERIFIER_assume(0);
  }
  #line 12241 
  return (void *)0;
  #line 12244 
  emg_main_68: 
               #line 12244 
  ;
  #line 12245 
  if (ldv_undef_int() != 0) {
    #line 12247 
    emg_68_ret = simple_open(emg_68_resource_1,emg_68_resource_0);
    #line 12252 
    emg_68_ret = ldv_filter_err_code(emg_68_ret);
    #line 12255 
    if (ldv_undef_int() != 0) {
      #line 12257 
      __VERIFIER_assume(emg_68_ret == 0);
      #line 12261 
      goto emg_call_68;
    }
    else {
      #line 12266 
      __VERIFIER_assume(emg_68_ret != 0);
      #line 12269 
      if (emg_repeat_cnt_main_68_0 > 0) {
        #line 12270 
        emg_repeat_cnt_main_68_0 --;
        #line 12272 
        goto emg_main_68;
      }
      else 
           #line 12274 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 12281 
       ldv_free((void *)emg_68_resource_0);
  #line 12289 
  return (void *)0;
}

#line 12294  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_path_reset_ops(void *arg0)
{
  #line 12297 
  struct file_operations *emg_69_container;
  #line 12298 
  long long emg_69_emg_param_1_0;
  #line 12299 
  char *emg_69_emg_param_1_2;
  #line 12300 
  char *emg_69_emg_param_1_4;
  #line 12301 
  int emg_69_emg_param_2_1;
  #line 12302 
  long long *emg_69_emg_param_3_3;
  #line 12303 
  long long *emg_69_emg_param_3_5;
  #line 12304 
  struct file *emg_69_resource_0;
  #line 12305 
  struct inode *emg_69_resource_1;
  #line 12306 
  int emg_69_ret;
  #line 12307 
  unsigned long emg_69_size_cnt;
  #line 12308 
  int emg_repeat_cnt_main_69_0 = 1;
  #line 12309 
  int emg_repeat_cnt_main_69_1 = 1;
  #line 12310 
  int emg_repeat_cnt_call_69 = 1;
  #line 12312 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 12316 
  emg_69_ret = ldv_undef_int();
  #line 12317 
  emg_69_container = emg_alias_rx_path_reset_ops;
  #line 12318 
  emg_69_ret = ldv_undef_int();
  #line 12320 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_path_reset_ops);
  #line 12322 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 12323 
    emg_69_container = data->arg0;
    #line 12324 
    ldv_free((void *)data);
  }
  #line 12329 
  emg_69_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 12330 
  emg_69_size_cnt = (unsigned long)ldv_undef_int();
  #line 12334 
  goto emg_main_69;
  #line 12338 
  return (void *)0;
  #line 12341 
  emg_call_69: 
               #line 12341 
  ;
  #line 12342 
  if (ldv_undef_int() != 0) {
    #line 12343 
    switch (ldv_undef_int()) {
      #line 12344 
      case 0: 
              #line 12344 
      ;
      #line 12346 
      emg_69_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12346 
      emg_69_emg_param_1_2 = emg_69_emg_param_1_2;
      #line 12347 
      emg_69_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12347 
      emg_69_emg_param_3_3 = emg_69_emg_param_3_3;
      #line 12351 
      emg_wrapper_rx_path_reset_read(emg_69_resource_0,emg_69_emg_param_1_2,emg_69_size_cnt,emg_69_emg_param_3_3);
      #line 12355 
      ldv_free((void *)emg_69_emg_param_1_2);
      #line 12356 
      ldv_free((void *)emg_69_emg_param_3_3);
      #line 12358 
      break;
      #line 12360 
      case 1: 
              #line 12360 
      ;
      #line 12362 
      generic_file_llseek(emg_69_resource_0,emg_69_emg_param_1_0,emg_69_emg_param_2_1);
      #line 12364 
      break;
      #line 12366 
      case 2: 
              #line 12366 
      ;
      #line 12373 
      __VERIFIER_assume(emg_69_size_cnt <= 2147479552UL);
      #line 12374 
      emg_69_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12374 
      emg_69_emg_param_1_4 = emg_69_emg_param_1_4;
      #line 12375 
      emg_69_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12375 
      emg_69_emg_param_3_5 = emg_69_emg_param_3_5;
      #line 12379 
      if (emg_69_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 12380 
        (*(emg_69_container->write))(emg_69_resource_0,emg_69_emg_param_1_4,emg_69_size_cnt,emg_69_emg_param_3_5);
      #line 12385 
      ldv_free((void *)emg_69_emg_param_1_4);
      #line 12386 
      ldv_free((void *)emg_69_emg_param_3_5);
      #line 12388 
      break;
      #line 12390 
      default: 
               #line 12390 
      ;
      #line 12390 
      __VERIFIER_assume(0);
    }
    #line 12393 
    if (emg_repeat_cnt_call_69 > 0) {
      #line 12394 
      emg_repeat_cnt_call_69 --;
      #line 12396 
      goto emg_call_69;
    }
    else 
         #line 12398 
         __VERIFIER_assume(0);
  }
  else {
    #line 12404 
    if (emg_69_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 12405 
      (*(emg_69_container->release))(emg_69_resource_1,emg_69_resource_0);
    #line 12409 
    if (emg_repeat_cnt_main_69_1 > 0) {
      #line 12410 
      emg_repeat_cnt_main_69_1 --;
      #line 12412 
      goto emg_main_69;
    }
    else 
         #line 12414 
         __VERIFIER_assume(0);
  }
  #line 12420 
  return (void *)0;
  #line 12423 
  emg_main_69: 
               #line 12423 
  ;
  #line 12424 
  if (ldv_undef_int() != 0) {
    #line 12426 
    emg_69_ret = simple_open(emg_69_resource_1,emg_69_resource_0);
    #line 12431 
    emg_69_ret = ldv_filter_err_code(emg_69_ret);
    #line 12434 
    if (ldv_undef_int() != 0) {
      #line 12436 
      __VERIFIER_assume(emg_69_ret == 0);
      #line 12440 
      goto emg_call_69;
    }
    else {
      #line 12445 
      __VERIFIER_assume(emg_69_ret != 0);
      #line 12448 
      if (emg_repeat_cnt_main_69_0 > 0) {
        #line 12449 
        emg_repeat_cnt_main_69_0 --;
        #line 12451 
        goto emg_main_69;
      }
      else 
           #line 12453 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 12460 
       ldv_free((void *)emg_69_resource_0);
  #line 12468 
  return (void *)0;
}

#line 12473  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_reset_counter_ops(void *arg0)
{
  #line 12476 
  struct file_operations *emg_70_container;
  #line 12477 
  long long emg_70_emg_param_1_0;
  #line 12478 
  char *emg_70_emg_param_1_2;
  #line 12479 
  char *emg_70_emg_param_1_4;
  #line 12480 
  int emg_70_emg_param_2_1;
  #line 12481 
  long long *emg_70_emg_param_3_3;
  #line 12482 
  long long *emg_70_emg_param_3_5;
  #line 12483 
  struct file *emg_70_resource_0;
  #line 12484 
  struct inode *emg_70_resource_1;
  #line 12485 
  int emg_70_ret;
  #line 12486 
  unsigned long emg_70_size_cnt;
  #line 12487 
  int emg_repeat_cnt_main_70_1 = 1;
  #line 12488 
  int emg_repeat_cnt_main_70_0 = 1;
  #line 12489 
  int emg_repeat_cnt_call_70 = 1;
  #line 12491 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 12495 
  emg_70_ret = ldv_undef_int();
  #line 12496 
  emg_70_container = emg_alias_rx_reset_counter_ops;
  #line 12497 
  emg_70_ret = ldv_undef_int();
  #line 12499 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_reset_counter_ops);
  #line 12501 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 12502 
    emg_70_container = data->arg0;
    #line 12503 
    ldv_free((void *)data);
  }
  #line 12508 
  emg_70_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 12509 
  emg_70_size_cnt = (unsigned long)ldv_undef_int();
  #line 12513 
  goto emg_main_70;
  #line 12517 
  return (void *)0;
  #line 12520 
  emg_call_70: 
               #line 12520 
  ;
  #line 12521 
  if (ldv_undef_int() != 0) {
    #line 12522 
    switch (ldv_undef_int()) {
      #line 12523 
      case 0: 
              #line 12523 
      ;
      #line 12525 
      emg_70_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12525 
      emg_70_emg_param_1_2 = emg_70_emg_param_1_2;
      #line 12526 
      emg_70_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12526 
      emg_70_emg_param_3_3 = emg_70_emg_param_3_3;
      #line 12530 
      emg_wrapper_rx_reset_counter_read(emg_70_resource_0,emg_70_emg_param_1_2,emg_70_size_cnt,emg_70_emg_param_3_3);
      #line 12534 
      ldv_free((void *)emg_70_emg_param_1_2);
      #line 12535 
      ldv_free((void *)emg_70_emg_param_3_3);
      #line 12537 
      break;
      #line 12539 
      case 1: 
              #line 12539 
      ;
      #line 12541 
      generic_file_llseek(emg_70_resource_0,emg_70_emg_param_1_0,emg_70_emg_param_2_1);
      #line 12543 
      break;
      #line 12545 
      case 2: 
              #line 12545 
      ;
      #line 12552 
      __VERIFIER_assume(emg_70_size_cnt <= 2147479552UL);
      #line 12553 
      emg_70_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12553 
      emg_70_emg_param_1_4 = emg_70_emg_param_1_4;
      #line 12554 
      emg_70_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12554 
      emg_70_emg_param_3_5 = emg_70_emg_param_3_5;
      #line 12558 
      if (emg_70_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 12559 
        (*(emg_70_container->write))(emg_70_resource_0,emg_70_emg_param_1_4,emg_70_size_cnt,emg_70_emg_param_3_5);
      #line 12564 
      ldv_free((void *)emg_70_emg_param_1_4);
      #line 12565 
      ldv_free((void *)emg_70_emg_param_3_5);
      #line 12567 
      break;
      #line 12569 
      default: 
               #line 12569 
      ;
      #line 12569 
      __VERIFIER_assume(0);
    }
    #line 12572 
    if (emg_repeat_cnt_call_70 > 0) {
      #line 12573 
      emg_repeat_cnt_call_70 --;
      #line 12575 
      goto emg_call_70;
    }
    else 
         #line 12577 
         __VERIFIER_assume(0);
  }
  else {
    #line 12583 
    if (emg_70_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 12584 
      (*(emg_70_container->release))(emg_70_resource_1,emg_70_resource_0);
    #line 12588 
    if (emg_repeat_cnt_main_70_0 > 0) {
      #line 12589 
      emg_repeat_cnt_main_70_0 --;
      #line 12591 
      goto emg_main_70;
    }
    else 
         #line 12593 
         __VERIFIER_assume(0);
  }
  #line 12599 
  return (void *)0;
  #line 12602 
  emg_main_70: 
               #line 12602 
  ;
  #line 12603 
  if (ldv_undef_int() != 0) {
    #line 12605 
    emg_70_ret = simple_open(emg_70_resource_1,emg_70_resource_0);
    #line 12610 
    emg_70_ret = ldv_filter_err_code(emg_70_ret);
    #line 12613 
    if (ldv_undef_int() != 0) {
      #line 12615 
      __VERIFIER_assume(emg_70_ret == 0);
      #line 12619 
      goto emg_call_70;
    }
    else {
      #line 12624 
      __VERIFIER_assume(emg_70_ret != 0);
      #line 12627 
      if (emg_repeat_cnt_main_70_1 > 0) {
        #line 12628 
        emg_repeat_cnt_main_70_1 --;
        #line 12630 
        goto emg_main_70;
      }
      else 
           #line 12632 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 12639 
       ldv_free((void *)emg_70_resource_0);
  #line 12647 
  return (void *)0;
}

#line 12652  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_xfr_hint_trig_ops(void *arg0)
{
  #line 12655 
  struct file_operations *emg_71_container;
  #line 12656 
  long long emg_71_emg_param_1_0;
  #line 12657 
  char *emg_71_emg_param_1_2;
  #line 12658 
  char *emg_71_emg_param_1_4;
  #line 12659 
  int emg_71_emg_param_2_1;
  #line 12660 
  long long *emg_71_emg_param_3_3;
  #line 12661 
  long long *emg_71_emg_param_3_5;
  #line 12662 
  struct file *emg_71_resource_0;
  #line 12663 
  struct inode *emg_71_resource_1;
  #line 12664 
  int emg_71_ret;
  #line 12665 
  unsigned long emg_71_size_cnt;
  #line 12666 
  int emg_repeat_cnt_call_71 = 1;
  #line 12667 
  int emg_repeat_cnt_main_71_1 = 1;
  #line 12668 
  int emg_repeat_cnt_main_71_0 = 1;
  #line 12670 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 12674 
  emg_71_ret = ldv_undef_int();
  #line 12675 
  emg_71_container = emg_alias_rx_xfr_hint_trig_ops;
  #line 12676 
  emg_71_ret = ldv_undef_int();
  #line 12678 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_xfr_hint_trig_ops);
  #line 12680 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 12681 
    emg_71_container = data->arg0;
    #line 12682 
    ldv_free((void *)data);
  }
  #line 12687 
  emg_71_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 12688 
  emg_71_size_cnt = (unsigned long)ldv_undef_int();
  #line 12692 
  goto emg_main_71;
  #line 12696 
  return (void *)0;
  #line 12699 
  emg_call_71: 
               #line 12699 
  ;
  #line 12700 
  if (ldv_undef_int() != 0) {
    #line 12701 
    switch (ldv_undef_int()) {
      #line 12702 
      case 0: 
              #line 12702 
      ;
      #line 12704 
      emg_71_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12704 
      emg_71_emg_param_1_2 = emg_71_emg_param_1_2;
      #line 12705 
      emg_71_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12705 
      emg_71_emg_param_3_3 = emg_71_emg_param_3_3;
      #line 12709 
      emg_wrapper_rx_xfr_hint_trig_read(emg_71_resource_0,emg_71_emg_param_1_2,emg_71_size_cnt,emg_71_emg_param_3_3);
      #line 12713 
      ldv_free((void *)emg_71_emg_param_1_2);
      #line 12714 
      ldv_free((void *)emg_71_emg_param_3_3);
      #line 12716 
      break;
      #line 12718 
      case 1: 
              #line 12718 
      ;
      #line 12720 
      generic_file_llseek(emg_71_resource_0,emg_71_emg_param_1_0,emg_71_emg_param_2_1);
      #line 12722 
      break;
      #line 12724 
      case 2: 
              #line 12724 
      ;
      #line 12731 
      __VERIFIER_assume(emg_71_size_cnt <= 2147479552UL);
      #line 12732 
      emg_71_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12732 
      emg_71_emg_param_1_4 = emg_71_emg_param_1_4;
      #line 12733 
      emg_71_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12733 
      emg_71_emg_param_3_5 = emg_71_emg_param_3_5;
      #line 12737 
      if (emg_71_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 12738 
        (*(emg_71_container->write))(emg_71_resource_0,emg_71_emg_param_1_4,emg_71_size_cnt,emg_71_emg_param_3_5);
      #line 12743 
      ldv_free((void *)emg_71_emg_param_1_4);
      #line 12744 
      ldv_free((void *)emg_71_emg_param_3_5);
      #line 12746 
      break;
      #line 12748 
      default: 
               #line 12748 
      ;
      #line 12748 
      __VERIFIER_assume(0);
    }
    #line 12751 
    if (emg_repeat_cnt_call_71 > 0) {
      #line 12752 
      emg_repeat_cnt_call_71 --;
      #line 12754 
      goto emg_call_71;
    }
    else 
         #line 12756 
         __VERIFIER_assume(0);
  }
  else {
    #line 12762 
    if (emg_71_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 12763 
      (*(emg_71_container->release))(emg_71_resource_1,emg_71_resource_0);
    #line 12767 
    if (emg_repeat_cnt_main_71_0 > 0) {
      #line 12768 
      emg_repeat_cnt_main_71_0 --;
      #line 12770 
      goto emg_main_71;
    }
    else 
         #line 12772 
         __VERIFIER_assume(0);
  }
  #line 12778 
  return (void *)0;
  #line 12781 
  emg_main_71: 
               #line 12781 
  ;
  #line 12782 
  if (ldv_undef_int() != 0) {
    #line 12784 
    emg_71_ret = simple_open(emg_71_resource_1,emg_71_resource_0);
    #line 12789 
    emg_71_ret = ldv_filter_err_code(emg_71_ret);
    #line 12792 
    if (ldv_undef_int() != 0) {
      #line 12794 
      __VERIFIER_assume(emg_71_ret == 0);
      #line 12798 
      goto emg_call_71;
    }
    else {
      #line 12803 
      __VERIFIER_assume(emg_71_ret != 0);
      #line 12806 
      if (emg_repeat_cnt_main_71_1 > 0) {
        #line 12807 
        emg_repeat_cnt_main_71_1 --;
        #line 12809 
        goto emg_main_71;
      }
      else 
           #line 12811 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 12818 
       ldv_free((void *)emg_71_resource_0);
  #line 12826 
  return (void *)0;
}

#line 12831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops(void *arg0)
{
  #line 12834 
  struct file_operations *emg_72_container;
  #line 12835 
  long long emg_72_emg_param_1_0;
  #line 12836 
  char *emg_72_emg_param_1_2;
  #line 12837 
  char *emg_72_emg_param_1_4;
  #line 12838 
  int emg_72_emg_param_2_1;
  #line 12839 
  long long *emg_72_emg_param_3_3;
  #line 12840 
  long long *emg_72_emg_param_3_5;
  #line 12841 
  struct file *emg_72_resource_0;
  #line 12842 
  struct inode *emg_72_resource_1;
  #line 12843 
  int emg_72_ret;
  #line 12844 
  unsigned long emg_72_size_cnt;
  #line 12845 
  int emg_repeat_cnt_main_72_0 = 1;
  #line 12846 
  int emg_repeat_cnt_main_72_1 = 1;
  #line 12847 
  int emg_repeat_cnt_call_72 = 1;
  #line 12849 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 12853 
  emg_72_ret = ldv_undef_int();
  #line 12854 
  emg_72_container = emg_alias_rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops;
  #line 12855 
  emg_72_ret = ldv_undef_int();
  #line 12857 
  __VERIFIER_assume(data->arg0 == emg_alias_rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops);
  #line 12859 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 12860 
    emg_72_container = data->arg0;
    #line 12861 
    ldv_free((void *)data);
  }
  #line 12866 
  emg_72_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 12867 
  emg_72_size_cnt = (unsigned long)ldv_undef_int();
  #line 12871 
  goto emg_main_72;
  #line 12875 
  return (void *)0;
  #line 12878 
  emg_call_72: 
               #line 12878 
  ;
  #line 12879 
  if (ldv_undef_int() != 0) {
    #line 12880 
    switch (ldv_undef_int()) {
      #line 12881 
      case 0: 
              #line 12881 
      ;
      #line 12883 
      emg_72_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12883 
      emg_72_emg_param_1_2 = emg_72_emg_param_1_2;
      #line 12884 
      emg_72_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12884 
      emg_72_emg_param_3_3 = emg_72_emg_param_3_3;
      #line 12888 
      emg_wrapper_rxpipe_beacon_buffer_thres_host_int_trig_rx_data_read(emg_72_resource_0,emg_72_emg_param_1_2,emg_72_size_cnt,emg_72_emg_param_3_3);
      #line 12892 
      ldv_free((void *)emg_72_emg_param_1_2);
      #line 12893 
      ldv_free((void *)emg_72_emg_param_3_3);
      #line 12895 
      break;
      #line 12897 
      case 1: 
              #line 12897 
      ;
      #line 12899 
      generic_file_llseek(emg_72_resource_0,emg_72_emg_param_1_0,emg_72_emg_param_2_1);
      #line 12901 
      break;
      #line 12903 
      case 2: 
              #line 12903 
      ;
      #line 12910 
      __VERIFIER_assume(emg_72_size_cnt <= 2147479552UL);
      #line 12911 
      emg_72_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12911 
      emg_72_emg_param_1_4 = emg_72_emg_param_1_4;
      #line 12912 
      emg_72_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12912 
      emg_72_emg_param_3_5 = emg_72_emg_param_3_5;
      #line 12916 
      if (emg_72_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 12917 
        (*(emg_72_container->write))(emg_72_resource_0,emg_72_emg_param_1_4,emg_72_size_cnt,emg_72_emg_param_3_5);
      #line 12922 
      ldv_free((void *)emg_72_emg_param_1_4);
      #line 12923 
      ldv_free((void *)emg_72_emg_param_3_5);
      #line 12925 
      break;
      #line 12927 
      default: 
               #line 12927 
      ;
      #line 12927 
      __VERIFIER_assume(0);
    }
    #line 12930 
    if (emg_repeat_cnt_call_72 > 0) {
      #line 12931 
      emg_repeat_cnt_call_72 --;
      #line 12933 
      goto emg_call_72;
    }
    else 
         #line 12935 
         __VERIFIER_assume(0);
  }
  else {
    #line 12941 
    if (emg_72_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 12942 
      (*(emg_72_container->release))(emg_72_resource_1,emg_72_resource_0);
    #line 12946 
    if (emg_repeat_cnt_main_72_1 > 0) {
      #line 12947 
      emg_repeat_cnt_main_72_1 --;
      #line 12949 
      goto emg_main_72;
    }
    else 
         #line 12951 
         __VERIFIER_assume(0);
  }
  #line 12957 
  return (void *)0;
  #line 12960 
  emg_main_72: 
               #line 12960 
  ;
  #line 12961 
  if (ldv_undef_int() != 0) {
    #line 12963 
    emg_72_ret = simple_open(emg_72_resource_1,emg_72_resource_0);
    #line 12968 
    emg_72_ret = ldv_filter_err_code(emg_72_ret);
    #line 12971 
    if (ldv_undef_int() != 0) {
      #line 12973 
      __VERIFIER_assume(emg_72_ret == 0);
      #line 12977 
      goto emg_call_72;
    }
    else {
      #line 12982 
      __VERIFIER_assume(emg_72_ret != 0);
      #line 12985 
      if (emg_repeat_cnt_main_72_0 > 0) {
        #line 12986 
        emg_repeat_cnt_main_72_0 --;
        #line 12988 
        goto emg_main_72;
      }
      else 
           #line 12990 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 12997 
       ldv_free((void *)emg_72_resource_0);
  #line 13005 
  return (void *)0;
}

#line 13010  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rxpipe_descr_host_int_trig_rx_data_ops(void *arg0)
{
  #line 13013 
  struct file_operations *emg_73_container;
  #line 13014 
  long long emg_73_emg_param_1_0;
  #line 13015 
  char *emg_73_emg_param_1_2;
  #line 13016 
  char *emg_73_emg_param_1_4;
  #line 13017 
  int emg_73_emg_param_2_1;
  #line 13018 
  long long *emg_73_emg_param_3_3;
  #line 13019 
  long long *emg_73_emg_param_3_5;
  #line 13020 
  struct file *emg_73_resource_0;
  #line 13021 
  struct inode *emg_73_resource_1;
  #line 13022 
  int emg_73_ret;
  #line 13023 
  unsigned long emg_73_size_cnt;
  #line 13024 
  int emg_repeat_cnt_call_73 = 1;
  #line 13025 
  int emg_repeat_cnt_main_73_0 = 1;
  #line 13026 
  int emg_repeat_cnt_main_73_1 = 1;
  #line 13028 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 13032 
  emg_73_ret = ldv_undef_int();
  #line 13033 
  emg_73_container = emg_alias_rxpipe_descr_host_int_trig_rx_data_ops;
  #line 13034 
  emg_73_ret = ldv_undef_int();
  #line 13036 
  __VERIFIER_assume(data->arg0 == emg_alias_rxpipe_descr_host_int_trig_rx_data_ops);
  #line 13038 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 13039 
    emg_73_container = data->arg0;
    #line 13040 
    ldv_free((void *)data);
  }
  #line 13045 
  emg_73_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 13046 
  emg_73_size_cnt = (unsigned long)ldv_undef_int();
  #line 13050 
  goto emg_main_73;
  #line 13054 
  return (void *)0;
  #line 13057 
  emg_call_73: 
               #line 13057 
  ;
  #line 13058 
  if (ldv_undef_int() != 0) {
    #line 13059 
    switch (ldv_undef_int()) {
      #line 13060 
      case 0: 
              #line 13060 
      ;
      #line 13062 
      emg_73_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13062 
      emg_73_emg_param_1_2 = emg_73_emg_param_1_2;
      #line 13063 
      emg_73_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13063 
      emg_73_emg_param_3_3 = emg_73_emg_param_3_3;
      #line 13067 
      emg_wrapper_rxpipe_descr_host_int_trig_rx_data_read(emg_73_resource_0,emg_73_emg_param_1_2,emg_73_size_cnt,emg_73_emg_param_3_3);
      #line 13071 
      ldv_free((void *)emg_73_emg_param_1_2);
      #line 13072 
      ldv_free((void *)emg_73_emg_param_3_3);
      #line 13074 
      break;
      #line 13076 
      case 1: 
              #line 13076 
      ;
      #line 13078 
      generic_file_llseek(emg_73_resource_0,emg_73_emg_param_1_0,emg_73_emg_param_2_1);
      #line 13080 
      break;
      #line 13082 
      case 2: 
              #line 13082 
      ;
      #line 13089 
      __VERIFIER_assume(emg_73_size_cnt <= 2147479552UL);
      #line 13090 
      emg_73_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13090 
      emg_73_emg_param_1_4 = emg_73_emg_param_1_4;
      #line 13091 
      emg_73_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13091 
      emg_73_emg_param_3_5 = emg_73_emg_param_3_5;
      #line 13095 
      if (emg_73_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 13096 
        (*(emg_73_container->write))(emg_73_resource_0,emg_73_emg_param_1_4,emg_73_size_cnt,emg_73_emg_param_3_5);
      #line 13101 
      ldv_free((void *)emg_73_emg_param_1_4);
      #line 13102 
      ldv_free((void *)emg_73_emg_param_3_5);
      #line 13104 
      break;
      #line 13106 
      default: 
               #line 13106 
      ;
      #line 13106 
      __VERIFIER_assume(0);
    }
    #line 13109 
    if (emg_repeat_cnt_call_73 > 0) {
      #line 13110 
      emg_repeat_cnt_call_73 --;
      #line 13112 
      goto emg_call_73;
    }
    else 
         #line 13114 
         __VERIFIER_assume(0);
  }
  else {
    #line 13120 
    if (emg_73_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 13121 
      (*(emg_73_container->release))(emg_73_resource_1,emg_73_resource_0);
    #line 13125 
    if (emg_repeat_cnt_main_73_0 > 0) {
      #line 13126 
      emg_repeat_cnt_main_73_0 --;
      #line 13128 
      goto emg_main_73;
    }
    else 
         #line 13130 
         __VERIFIER_assume(0);
  }
  #line 13136 
  return (void *)0;
  #line 13139 
  emg_main_73: 
               #line 13139 
  ;
  #line 13140 
  if (ldv_undef_int() != 0) {
    #line 13142 
    emg_73_ret = simple_open(emg_73_resource_1,emg_73_resource_0);
    #line 13147 
    emg_73_ret = ldv_filter_err_code(emg_73_ret);
    #line 13150 
    if (ldv_undef_int() != 0) {
      #line 13152 
      __VERIFIER_assume(emg_73_ret == 0);
      #line 13156 
      goto emg_call_73;
    }
    else {
      #line 13161 
      __VERIFIER_assume(emg_73_ret != 0);
      #line 13164 
      if (emg_repeat_cnt_main_73_1 > 0) {
        #line 13165 
        emg_repeat_cnt_main_73_1 --;
        #line 13167 
        goto emg_main_73;
      }
      else 
           #line 13169 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 13176 
       ldv_free((void *)emg_73_resource_0);
  #line 13184 
  return (void *)0;
}

#line 13189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rxpipe_missed_beacon_host_int_trig_rx_data_ops(void *arg0)
{
  #line 13192 
  struct file_operations *emg_74_container;
  #line 13193 
  long long emg_74_emg_param_1_0;
  #line 13194 
  char *emg_74_emg_param_1_2;
  #line 13195 
  char *emg_74_emg_param_1_4;
  #line 13196 
  int emg_74_emg_param_2_1;
  #line 13197 
  long long *emg_74_emg_param_3_3;
  #line 13198 
  long long *emg_74_emg_param_3_5;
  #line 13199 
  struct file *emg_74_resource_0;
  #line 13200 
  struct inode *emg_74_resource_1;
  #line 13201 
  int emg_74_ret;
  #line 13202 
  unsigned long emg_74_size_cnt;
  #line 13203 
  int emg_repeat_cnt_main_74_0 = 1;
  #line 13204 
  int emg_repeat_cnt_main_74_1 = 1;
  #line 13205 
  int emg_repeat_cnt_call_74 = 1;
  #line 13207 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 13211 
  emg_74_ret = ldv_undef_int();
  #line 13212 
  emg_74_container = emg_alias_rxpipe_missed_beacon_host_int_trig_rx_data_ops;
  #line 13213 
  emg_74_ret = ldv_undef_int();
  #line 13215 
  __VERIFIER_assume(data->arg0 == emg_alias_rxpipe_missed_beacon_host_int_trig_rx_data_ops);
  #line 13217 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 13218 
    emg_74_container = data->arg0;
    #line 13219 
    ldv_free((void *)data);
  }
  #line 13224 
  emg_74_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 13225 
  emg_74_size_cnt = (unsigned long)ldv_undef_int();
  #line 13229 
  goto emg_main_74;
  #line 13233 
  return (void *)0;
  #line 13236 
  emg_call_74: 
               #line 13236 
  ;
  #line 13237 
  if (ldv_undef_int() != 0) {
    #line 13238 
    switch (ldv_undef_int()) {
      #line 13239 
      case 0: 
              #line 13239 
      ;
      #line 13241 
      emg_74_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13241 
      emg_74_emg_param_1_2 = emg_74_emg_param_1_2;
      #line 13242 
      emg_74_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13242 
      emg_74_emg_param_3_3 = emg_74_emg_param_3_3;
      #line 13246 
      emg_wrapper_rxpipe_missed_beacon_host_int_trig_rx_data_read(emg_74_resource_0,emg_74_emg_param_1_2,emg_74_size_cnt,emg_74_emg_param_3_3);
      #line 13250 
      ldv_free((void *)emg_74_emg_param_1_2);
      #line 13251 
      ldv_free((void *)emg_74_emg_param_3_3);
      #line 13253 
      break;
      #line 13255 
      case 1: 
              #line 13255 
      ;
      #line 13257 
      generic_file_llseek(emg_74_resource_0,emg_74_emg_param_1_0,emg_74_emg_param_2_1);
      #line 13259 
      break;
      #line 13261 
      case 2: 
              #line 13261 
      ;
      #line 13268 
      __VERIFIER_assume(emg_74_size_cnt <= 2147479552UL);
      #line 13269 
      emg_74_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13269 
      emg_74_emg_param_1_4 = emg_74_emg_param_1_4;
      #line 13270 
      emg_74_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13270 
      emg_74_emg_param_3_5 = emg_74_emg_param_3_5;
      #line 13274 
      if (emg_74_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 13275 
        (*(emg_74_container->write))(emg_74_resource_0,emg_74_emg_param_1_4,emg_74_size_cnt,emg_74_emg_param_3_5);
      #line 13280 
      ldv_free((void *)emg_74_emg_param_1_4);
      #line 13281 
      ldv_free((void *)emg_74_emg_param_3_5);
      #line 13283 
      break;
      #line 13285 
      default: 
               #line 13285 
      ;
      #line 13285 
      __VERIFIER_assume(0);
    }
    #line 13288 
    if (emg_repeat_cnt_call_74 > 0) {
      #line 13289 
      emg_repeat_cnt_call_74 --;
      #line 13291 
      goto emg_call_74;
    }
    else 
         #line 13293 
         __VERIFIER_assume(0);
  }
  else {
    #line 13299 
    if (emg_74_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 13300 
      (*(emg_74_container->release))(emg_74_resource_1,emg_74_resource_0);
    #line 13304 
    if (emg_repeat_cnt_main_74_0 > 0) {
      #line 13305 
      emg_repeat_cnt_main_74_0 --;
      #line 13307 
      goto emg_main_74;
    }
    else 
         #line 13309 
         __VERIFIER_assume(0);
  }
  #line 13315 
  return (void *)0;
  #line 13318 
  emg_main_74: 
               #line 13318 
  ;
  #line 13319 
  if (ldv_undef_int() != 0) {
    #line 13321 
    emg_74_ret = simple_open(emg_74_resource_1,emg_74_resource_0);
    #line 13326 
    emg_74_ret = ldv_filter_err_code(emg_74_ret);
    #line 13329 
    if (ldv_undef_int() != 0) {
      #line 13331 
      __VERIFIER_assume(emg_74_ret == 0);
      #line 13335 
      goto emg_call_74;
    }
    else {
      #line 13340 
      __VERIFIER_assume(emg_74_ret != 0);
      #line 13343 
      if (emg_repeat_cnt_main_74_1 > 0) {
        #line 13344 
        emg_repeat_cnt_main_74_1 --;
        #line 13346 
        goto emg_main_74;
      }
      else 
           #line 13348 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 13355 
       ldv_free((void *)emg_74_resource_0);
  #line 13363 
  return (void *)0;
}

#line 13368  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rxpipe_rx_prep_beacon_drop_ops(void *arg0)
{
  #line 13371 
  struct file_operations *emg_75_container;
  #line 13372 
  long long emg_75_emg_param_1_0;
  #line 13373 
  char *emg_75_emg_param_1_2;
  #line 13374 
  char *emg_75_emg_param_1_4;
  #line 13375 
  int emg_75_emg_param_2_1;
  #line 13376 
  long long *emg_75_emg_param_3_3;
  #line 13377 
  long long *emg_75_emg_param_3_5;
  #line 13378 
  struct file *emg_75_resource_0;
  #line 13379 
  struct inode *emg_75_resource_1;
  #line 13380 
  int emg_75_ret;
  #line 13381 
  unsigned long emg_75_size_cnt;
  #line 13382 
  int emg_repeat_cnt_call_75 = 1;
  #line 13383 
  int emg_repeat_cnt_main_75_1 = 1;
  #line 13384 
  int emg_repeat_cnt_main_75_0 = 1;
  #line 13386 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 13390 
  emg_75_ret = ldv_undef_int();
  #line 13391 
  emg_75_container = emg_alias_rxpipe_rx_prep_beacon_drop_ops;
  #line 13392 
  emg_75_ret = ldv_undef_int();
  #line 13394 
  __VERIFIER_assume(data->arg0 == emg_alias_rxpipe_rx_prep_beacon_drop_ops);
  #line 13396 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 13397 
    emg_75_container = data->arg0;
    #line 13398 
    ldv_free((void *)data);
  }
  #line 13403 
  emg_75_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 13404 
  emg_75_size_cnt = (unsigned long)ldv_undef_int();
  #line 13408 
  goto emg_main_75;
  #line 13412 
  return (void *)0;
  #line 13415 
  emg_call_75: 
               #line 13415 
  ;
  #line 13416 
  if (ldv_undef_int() != 0) {
    #line 13417 
    switch (ldv_undef_int()) {
      #line 13418 
      case 0: 
              #line 13418 
      ;
      #line 13420 
      emg_75_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13420 
      emg_75_emg_param_1_2 = emg_75_emg_param_1_2;
      #line 13421 
      emg_75_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13421 
      emg_75_emg_param_3_3 = emg_75_emg_param_3_3;
      #line 13425 
      emg_wrapper_rxpipe_rx_prep_beacon_drop_read(emg_75_resource_0,emg_75_emg_param_1_2,emg_75_size_cnt,emg_75_emg_param_3_3);
      #line 13429 
      ldv_free((void *)emg_75_emg_param_1_2);
      #line 13430 
      ldv_free((void *)emg_75_emg_param_3_3);
      #line 13432 
      break;
      #line 13434 
      case 1: 
              #line 13434 
      ;
      #line 13436 
      generic_file_llseek(emg_75_resource_0,emg_75_emg_param_1_0,emg_75_emg_param_2_1);
      #line 13438 
      break;
      #line 13440 
      case 2: 
              #line 13440 
      ;
      #line 13447 
      __VERIFIER_assume(emg_75_size_cnt <= 2147479552UL);
      #line 13448 
      emg_75_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13448 
      emg_75_emg_param_1_4 = emg_75_emg_param_1_4;
      #line 13449 
      emg_75_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13449 
      emg_75_emg_param_3_5 = emg_75_emg_param_3_5;
      #line 13453 
      if (emg_75_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 13454 
        (*(emg_75_container->write))(emg_75_resource_0,emg_75_emg_param_1_4,emg_75_size_cnt,emg_75_emg_param_3_5);
      #line 13459 
      ldv_free((void *)emg_75_emg_param_1_4);
      #line 13460 
      ldv_free((void *)emg_75_emg_param_3_5);
      #line 13462 
      break;
      #line 13464 
      default: 
               #line 13464 
      ;
      #line 13464 
      __VERIFIER_assume(0);
    }
    #line 13467 
    if (emg_repeat_cnt_call_75 > 0) {
      #line 13468 
      emg_repeat_cnt_call_75 --;
      #line 13470 
      goto emg_call_75;
    }
    else 
         #line 13472 
         __VERIFIER_assume(0);
  }
  else {
    #line 13478 
    if (emg_75_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 13479 
      (*(emg_75_container->release))(emg_75_resource_1,emg_75_resource_0);
    #line 13483 
    if (emg_repeat_cnt_main_75_1 > 0) {
      #line 13484 
      emg_repeat_cnt_main_75_1 --;
      #line 13486 
      goto emg_main_75;
    }
    else 
         #line 13488 
         __VERIFIER_assume(0);
  }
  #line 13494 
  return (void *)0;
  #line 13497 
  emg_main_75: 
               #line 13497 
  ;
  #line 13498 
  if (ldv_undef_int() != 0) {
    #line 13500 
    emg_75_ret = simple_open(emg_75_resource_1,emg_75_resource_0);
    #line 13505 
    emg_75_ret = ldv_filter_err_code(emg_75_ret);
    #line 13508 
    if (ldv_undef_int() != 0) {
      #line 13510 
      __VERIFIER_assume(emg_75_ret == 0);
      #line 13514 
      goto emg_call_75;
    }
    else {
      #line 13519 
      __VERIFIER_assume(emg_75_ret != 0);
      #line 13522 
      if (emg_repeat_cnt_main_75_0 > 0) {
        #line 13523 
        emg_repeat_cnt_main_75_0 --;
        #line 13525 
        goto emg_main_75;
      }
      else 
           #line 13527 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 13534 
       ldv_free((void *)emg_75_resource_0);
  #line 13542 
  return (void *)0;
}

#line 13547  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rxpipe_tx_xfr_host_int_trig_rx_data_ops(void *arg0)
{
  #line 13550 
  struct file_operations *emg_76_container;
  #line 13551 
  long long emg_76_emg_param_1_0;
  #line 13552 
  char *emg_76_emg_param_1_2;
  #line 13553 
  char *emg_76_emg_param_1_4;
  #line 13554 
  int emg_76_emg_param_2_1;
  #line 13555 
  long long *emg_76_emg_param_3_3;
  #line 13556 
  long long *emg_76_emg_param_3_5;
  #line 13557 
  struct file *emg_76_resource_0;
  #line 13558 
  struct inode *emg_76_resource_1;
  #line 13559 
  int emg_76_ret;
  #line 13560 
  unsigned long emg_76_size_cnt;
  #line 13561 
  int emg_repeat_cnt_main_76_0 = 1;
  #line 13562 
  int emg_repeat_cnt_call_76 = 1;
  #line 13563 
  int emg_repeat_cnt_main_76_1 = 1;
  #line 13565 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 13569 
  emg_76_ret = ldv_undef_int();
  #line 13570 
  emg_76_container = emg_alias_rxpipe_tx_xfr_host_int_trig_rx_data_ops;
  #line 13571 
  emg_76_ret = ldv_undef_int();
  #line 13573 
  __VERIFIER_assume(data->arg0 == emg_alias_rxpipe_tx_xfr_host_int_trig_rx_data_ops);
  #line 13575 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 13576 
    emg_76_container = data->arg0;
    #line 13577 
    ldv_free((void *)data);
  }
  #line 13582 
  emg_76_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 13583 
  emg_76_size_cnt = (unsigned long)ldv_undef_int();
  #line 13587 
  goto emg_main_76;
  #line 13591 
  return (void *)0;
  #line 13594 
  emg_call_76: 
               #line 13594 
  ;
  #line 13595 
  if (ldv_undef_int() != 0) {
    #line 13596 
    switch (ldv_undef_int()) {
      #line 13597 
      case 0: 
              #line 13597 
      ;
      #line 13599 
      emg_76_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13599 
      emg_76_emg_param_1_2 = emg_76_emg_param_1_2;
      #line 13600 
      emg_76_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13600 
      emg_76_emg_param_3_3 = emg_76_emg_param_3_3;
      #line 13604 
      emg_wrapper_rxpipe_tx_xfr_host_int_trig_rx_data_read(emg_76_resource_0,emg_76_emg_param_1_2,emg_76_size_cnt,emg_76_emg_param_3_3);
      #line 13608 
      ldv_free((void *)emg_76_emg_param_1_2);
      #line 13609 
      ldv_free((void *)emg_76_emg_param_3_3);
      #line 13611 
      break;
      #line 13613 
      case 1: 
              #line 13613 
      ;
      #line 13615 
      generic_file_llseek(emg_76_resource_0,emg_76_emg_param_1_0,emg_76_emg_param_2_1);
      #line 13617 
      break;
      #line 13619 
      case 2: 
              #line 13619 
      ;
      #line 13626 
      __VERIFIER_assume(emg_76_size_cnt <= 2147479552UL);
      #line 13627 
      emg_76_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13627 
      emg_76_emg_param_1_4 = emg_76_emg_param_1_4;
      #line 13628 
      emg_76_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13628 
      emg_76_emg_param_3_5 = emg_76_emg_param_3_5;
      #line 13632 
      if (emg_76_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 13633 
        (*(emg_76_container->write))(emg_76_resource_0,emg_76_emg_param_1_4,emg_76_size_cnt,emg_76_emg_param_3_5);
      #line 13638 
      ldv_free((void *)emg_76_emg_param_1_4);
      #line 13639 
      ldv_free((void *)emg_76_emg_param_3_5);
      #line 13641 
      break;
      #line 13643 
      default: 
               #line 13643 
      ;
      #line 13643 
      __VERIFIER_assume(0);
    }
    #line 13646 
    if (emg_repeat_cnt_call_76 > 0) {
      #line 13647 
      emg_repeat_cnt_call_76 --;
      #line 13649 
      goto emg_call_76;
    }
    else 
         #line 13651 
         __VERIFIER_assume(0);
  }
  else {
    #line 13657 
    if (emg_76_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 13658 
      (*(emg_76_container->release))(emg_76_resource_1,emg_76_resource_0);
    #line 13662 
    if (emg_repeat_cnt_main_76_1 > 0) {
      #line 13663 
      emg_repeat_cnt_main_76_1 --;
      #line 13665 
      goto emg_main_76;
    }
    else 
         #line 13667 
         __VERIFIER_assume(0);
  }
  #line 13673 
  return (void *)0;
  #line 13676 
  emg_main_76: 
               #line 13676 
  ;
  #line 13677 
  if (ldv_undef_int() != 0) {
    #line 13679 
    emg_76_ret = simple_open(emg_76_resource_1,emg_76_resource_0);
    #line 13684 
    emg_76_ret = ldv_filter_err_code(emg_76_ret);
    #line 13687 
    if (ldv_undef_int() != 0) {
      #line 13689 
      __VERIFIER_assume(emg_76_ret == 0);
      #line 13693 
      goto emg_call_76;
    }
    else {
      #line 13698 
      __VERIFIER_assume(emg_76_ret != 0);
      #line 13701 
      if (emg_repeat_cnt_main_76_0 > 0) {
        #line 13702 
        emg_repeat_cnt_main_76_0 --;
        #line 13704 
        goto emg_main_76;
      }
      else 
           #line 13706 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 13713 
       ldv_free((void *)emg_76_resource_0);
  #line 13721 
  return (void *)0;
}

#line 13726  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_internal_desc_overflow_ops(void *arg0)
{
  #line 13729 
  struct file_operations *emg_77_container;
  #line 13730 
  long long emg_77_emg_param_1_0;
  #line 13731 
  char *emg_77_emg_param_1_2;
  #line 13732 
  char *emg_77_emg_param_1_4;
  #line 13733 
  int emg_77_emg_param_2_1;
  #line 13734 
  long long *emg_77_emg_param_3_3;
  #line 13735 
  long long *emg_77_emg_param_3_5;
  #line 13736 
  struct file *emg_77_resource_0;
  #line 13737 
  struct inode *emg_77_resource_1;
  #line 13738 
  int emg_77_ret;
  #line 13739 
  unsigned long emg_77_size_cnt;
  #line 13740 
  int emg_repeat_cnt_main_77_1 = 1;
  #line 13741 
  int emg_repeat_cnt_call_77 = 1;
  #line 13742 
  int emg_repeat_cnt_main_77_0 = 1;
  #line 13744 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 13748 
  emg_77_ret = ldv_undef_int();
  #line 13749 
  emg_77_container = emg_alias_tx_internal_desc_overflow_ops;
  #line 13750 
  emg_77_ret = ldv_undef_int();
  #line 13752 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_internal_desc_overflow_ops);
  #line 13754 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 13755 
    emg_77_container = data->arg0;
    #line 13756 
    ldv_free((void *)data);
  }
  #line 13761 
  emg_77_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 13762 
  emg_77_size_cnt = (unsigned long)ldv_undef_int();
  #line 13766 
  goto emg_main_77;
  #line 13770 
  return (void *)0;
  #line 13773 
  emg_call_77: 
               #line 13773 
  ;
  #line 13774 
  if (ldv_undef_int() != 0) {
    #line 13775 
    switch (ldv_undef_int()) {
      #line 13776 
      case 0: 
              #line 13776 
      ;
      #line 13778 
      emg_77_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13778 
      emg_77_emg_param_1_2 = emg_77_emg_param_1_2;
      #line 13779 
      emg_77_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13779 
      emg_77_emg_param_3_3 = emg_77_emg_param_3_3;
      #line 13783 
      emg_wrapper_tx_internal_desc_overflow_read(emg_77_resource_0,emg_77_emg_param_1_2,emg_77_size_cnt,emg_77_emg_param_3_3);
      #line 13787 
      ldv_free((void *)emg_77_emg_param_1_2);
      #line 13788 
      ldv_free((void *)emg_77_emg_param_3_3);
      #line 13790 
      break;
      #line 13792 
      case 1: 
              #line 13792 
      ;
      #line 13794 
      generic_file_llseek(emg_77_resource_0,emg_77_emg_param_1_0,emg_77_emg_param_2_1);
      #line 13796 
      break;
      #line 13798 
      case 2: 
              #line 13798 
      ;
      #line 13805 
      __VERIFIER_assume(emg_77_size_cnt <= 2147479552UL);
      #line 13806 
      emg_77_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13806 
      emg_77_emg_param_1_4 = emg_77_emg_param_1_4;
      #line 13807 
      emg_77_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13807 
      emg_77_emg_param_3_5 = emg_77_emg_param_3_5;
      #line 13811 
      if (emg_77_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 13812 
        (*(emg_77_container->write))(emg_77_resource_0,emg_77_emg_param_1_4,emg_77_size_cnt,emg_77_emg_param_3_5);
      #line 13817 
      ldv_free((void *)emg_77_emg_param_1_4);
      #line 13818 
      ldv_free((void *)emg_77_emg_param_3_5);
      #line 13820 
      break;
      #line 13822 
      default: 
               #line 13822 
      ;
      #line 13822 
      __VERIFIER_assume(0);
    }
    #line 13825 
    if (emg_repeat_cnt_call_77 > 0) {
      #line 13826 
      emg_repeat_cnt_call_77 --;
      #line 13828 
      goto emg_call_77;
    }
    else 
         #line 13830 
         __VERIFIER_assume(0);
  }
  else {
    #line 13836 
    if (emg_77_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 13837 
      (*(emg_77_container->release))(emg_77_resource_1,emg_77_resource_0);
    #line 13841 
    if (emg_repeat_cnt_main_77_0 > 0) {
      #line 13842 
      emg_repeat_cnt_main_77_0 --;
      #line 13844 
      goto emg_main_77;
    }
    else 
         #line 13846 
         __VERIFIER_assume(0);
  }
  #line 13852 
  return (void *)0;
  #line 13855 
  emg_main_77: 
               #line 13855 
  ;
  #line 13856 
  if (ldv_undef_int() != 0) {
    #line 13858 
    emg_77_ret = simple_open(emg_77_resource_1,emg_77_resource_0);
    #line 13863 
    emg_77_ret = ldv_filter_err_code(emg_77_ret);
    #line 13866 
    if (ldv_undef_int() != 0) {
      #line 13868 
      __VERIFIER_assume(emg_77_ret == 0);
      #line 13872 
      goto emg_call_77;
    }
    else {
      #line 13877 
      __VERIFIER_assume(emg_77_ret != 0);
      #line 13880 
      if (emg_repeat_cnt_main_77_1 > 0) {
        #line 13881 
        emg_repeat_cnt_main_77_1 --;
        #line 13883 
        goto emg_main_77;
      }
      else 
           #line 13885 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 13892 
       ldv_free((void *)emg_77_resource_0);
  #line 13900 
  return (void *)0;
}

#line 13905  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_wep_addr_key_count_ops(void *arg0)
{
  #line 13908 
  struct file_operations *emg_78_container;
  #line 13909 
  long long emg_78_emg_param_1_0;
  #line 13910 
  char *emg_78_emg_param_1_2;
  #line 13911 
  char *emg_78_emg_param_1_4;
  #line 13912 
  int emg_78_emg_param_2_1;
  #line 13913 
  long long *emg_78_emg_param_3_3;
  #line 13914 
  long long *emg_78_emg_param_3_5;
  #line 13915 
  struct file *emg_78_resource_0;
  #line 13916 
  struct inode *emg_78_resource_1;
  #line 13917 
  int emg_78_ret;
  #line 13918 
  unsigned long emg_78_size_cnt;
  #line 13919 
  int emg_repeat_cnt_main_78_1 = 1;
  #line 13920 
  int emg_repeat_cnt_call_78 = 1;
  #line 13921 
  int emg_repeat_cnt_main_78_0 = 1;
  #line 13923 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 13927 
  emg_78_ret = ldv_undef_int();
  #line 13928 
  emg_78_container = emg_alias_wep_addr_key_count_ops;
  #line 13929 
  emg_78_ret = ldv_undef_int();
  #line 13931 
  __VERIFIER_assume(data->arg0 == emg_alias_wep_addr_key_count_ops);
  #line 13933 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 13934 
    emg_78_container = data->arg0;
    #line 13935 
    ldv_free((void *)data);
  }
  #line 13940 
  emg_78_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 13941 
  emg_78_size_cnt = (unsigned long)ldv_undef_int();
  #line 13945 
  goto emg_main_78;
  #line 13949 
  return (void *)0;
  #line 13952 
  emg_call_78: 
               #line 13952 
  ;
  #line 13953 
  if (ldv_undef_int() != 0) {
    #line 13954 
    switch (ldv_undef_int()) {
      #line 13955 
      case 0: 
              #line 13955 
      ;
      #line 13957 
      emg_78_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13957 
      emg_78_emg_param_1_2 = emg_78_emg_param_1_2;
      #line 13958 
      emg_78_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13958 
      emg_78_emg_param_3_3 = emg_78_emg_param_3_3;
      #line 13962 
      emg_wrapper_wep_addr_key_count_read(emg_78_resource_0,emg_78_emg_param_1_2,emg_78_size_cnt,emg_78_emg_param_3_3);
      #line 13966 
      ldv_free((void *)emg_78_emg_param_1_2);
      #line 13967 
      ldv_free((void *)emg_78_emg_param_3_3);
      #line 13969 
      break;
      #line 13971 
      case 1: 
              #line 13971 
      ;
      #line 13973 
      generic_file_llseek(emg_78_resource_0,emg_78_emg_param_1_0,emg_78_emg_param_2_1);
      #line 13975 
      break;
      #line 13977 
      case 2: 
              #line 13977 
      ;
      #line 13984 
      __VERIFIER_assume(emg_78_size_cnt <= 2147479552UL);
      #line 13985 
      emg_78_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13985 
      emg_78_emg_param_1_4 = emg_78_emg_param_1_4;
      #line 13986 
      emg_78_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13986 
      emg_78_emg_param_3_5 = emg_78_emg_param_3_5;
      #line 13990 
      if (emg_78_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 13991 
        (*(emg_78_container->write))(emg_78_resource_0,emg_78_emg_param_1_4,emg_78_size_cnt,emg_78_emg_param_3_5);
      #line 13996 
      ldv_free((void *)emg_78_emg_param_1_4);
      #line 13997 
      ldv_free((void *)emg_78_emg_param_3_5);
      #line 13999 
      break;
      #line 14001 
      default: 
               #line 14001 
      ;
      #line 14001 
      __VERIFIER_assume(0);
    }
    #line 14004 
    if (emg_repeat_cnt_call_78 > 0) {
      #line 14005 
      emg_repeat_cnt_call_78 --;
      #line 14007 
      goto emg_call_78;
    }
    else 
         #line 14009 
         __VERIFIER_assume(0);
  }
  else {
    #line 14015 
    if (emg_78_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 14016 
      (*(emg_78_container->release))(emg_78_resource_1,emg_78_resource_0);
    #line 14020 
    if (emg_repeat_cnt_main_78_1 > 0) {
      #line 14021 
      emg_repeat_cnt_main_78_1 --;
      #line 14023 
      goto emg_main_78;
    }
    else 
         #line 14025 
         __VERIFIER_assume(0);
  }
  #line 14031 
  return (void *)0;
  #line 14034 
  emg_main_78: 
               #line 14034 
  ;
  #line 14035 
  if (ldv_undef_int() != 0) {
    #line 14037 
    emg_78_ret = simple_open(emg_78_resource_1,emg_78_resource_0);
    #line 14042 
    emg_78_ret = ldv_filter_err_code(emg_78_ret);
    #line 14045 
    if (ldv_undef_int() != 0) {
      #line 14047 
      __VERIFIER_assume(emg_78_ret == 0);
      #line 14051 
      goto emg_call_78;
    }
    else {
      #line 14056 
      __VERIFIER_assume(emg_78_ret != 0);
      #line 14059 
      if (emg_repeat_cnt_main_78_0 > 0) {
        #line 14060 
        emg_repeat_cnt_main_78_0 --;
        #line 14062 
        goto emg_main_78;
      }
      else 
           #line 14064 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 14071 
       ldv_free((void *)emg_78_resource_0);
  #line 14079 
  return (void *)0;
}

#line 14084  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_wep_decrypt_fail_ops(void *arg0)
{
  #line 14087 
  struct file_operations *emg_79_container;
  #line 14088 
  long long emg_79_emg_param_1_0;
  #line 14089 
  char *emg_79_emg_param_1_2;
  #line 14090 
  char *emg_79_emg_param_1_4;
  #line 14091 
  int emg_79_emg_param_2_1;
  #line 14092 
  long long *emg_79_emg_param_3_3;
  #line 14093 
  long long *emg_79_emg_param_3_5;
  #line 14094 
  struct file *emg_79_resource_0;
  #line 14095 
  struct inode *emg_79_resource_1;
  #line 14096 
  int emg_79_ret;
  #line 14097 
  unsigned long emg_79_size_cnt;
  #line 14098 
  int emg_repeat_cnt_main_79_0 = 1;
  #line 14099 
  int emg_repeat_cnt_main_79_1 = 1;
  #line 14100 
  int emg_repeat_cnt_call_79 = 1;
  #line 14102 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 14106 
  emg_79_ret = ldv_undef_int();
  #line 14107 
  emg_79_container = emg_alias_wep_decrypt_fail_ops;
  #line 14108 
  emg_79_ret = ldv_undef_int();
  #line 14110 
  __VERIFIER_assume(data->arg0 == emg_alias_wep_decrypt_fail_ops);
  #line 14112 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 14113 
    emg_79_container = data->arg0;
    #line 14114 
    ldv_free((void *)data);
  }
  #line 14119 
  emg_79_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 14120 
  emg_79_size_cnt = (unsigned long)ldv_undef_int();
  #line 14124 
  goto emg_main_79;
  #line 14128 
  return (void *)0;
  #line 14131 
  emg_call_79: 
               #line 14131 
  ;
  #line 14132 
  if (ldv_undef_int() != 0) {
    #line 14133 
    switch (ldv_undef_int()) {
      #line 14134 
      case 0: 
              #line 14134 
      ;
      #line 14136 
      emg_79_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14136 
      emg_79_emg_param_1_2 = emg_79_emg_param_1_2;
      #line 14137 
      emg_79_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14137 
      emg_79_emg_param_3_3 = emg_79_emg_param_3_3;
      #line 14141 
      emg_wrapper_wep_decrypt_fail_read(emg_79_resource_0,emg_79_emg_param_1_2,emg_79_size_cnt,emg_79_emg_param_3_3);
      #line 14145 
      ldv_free((void *)emg_79_emg_param_1_2);
      #line 14146 
      ldv_free((void *)emg_79_emg_param_3_3);
      #line 14148 
      break;
      #line 14150 
      case 1: 
              #line 14150 
      ;
      #line 14152 
      generic_file_llseek(emg_79_resource_0,emg_79_emg_param_1_0,emg_79_emg_param_2_1);
      #line 14154 
      break;
      #line 14156 
      case 2: 
              #line 14156 
      ;
      #line 14163 
      __VERIFIER_assume(emg_79_size_cnt <= 2147479552UL);
      #line 14164 
      emg_79_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14164 
      emg_79_emg_param_1_4 = emg_79_emg_param_1_4;
      #line 14165 
      emg_79_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14165 
      emg_79_emg_param_3_5 = emg_79_emg_param_3_5;
      #line 14169 
      if (emg_79_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 14170 
        (*(emg_79_container->write))(emg_79_resource_0,emg_79_emg_param_1_4,emg_79_size_cnt,emg_79_emg_param_3_5);
      #line 14175 
      ldv_free((void *)emg_79_emg_param_1_4);
      #line 14176 
      ldv_free((void *)emg_79_emg_param_3_5);
      #line 14178 
      break;
      #line 14180 
      default: 
               #line 14180 
      ;
      #line 14180 
      __VERIFIER_assume(0);
    }
    #line 14183 
    if (emg_repeat_cnt_call_79 > 0) {
      #line 14184 
      emg_repeat_cnt_call_79 --;
      #line 14186 
      goto emg_call_79;
    }
    else 
         #line 14188 
         __VERIFIER_assume(0);
  }
  else {
    #line 14194 
    if (emg_79_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 14195 
      (*(emg_79_container->release))(emg_79_resource_1,emg_79_resource_0);
    #line 14199 
    if (emg_repeat_cnt_main_79_1 > 0) {
      #line 14200 
      emg_repeat_cnt_main_79_1 --;
      #line 14202 
      goto emg_main_79;
    }
    else 
         #line 14204 
         __VERIFIER_assume(0);
  }
  #line 14210 
  return (void *)0;
  #line 14213 
  emg_main_79: 
               #line 14213 
  ;
  #line 14214 
  if (ldv_undef_int() != 0) {
    #line 14216 
    emg_79_ret = simple_open(emg_79_resource_1,emg_79_resource_0);
    #line 14221 
    emg_79_ret = ldv_filter_err_code(emg_79_ret);
    #line 14224 
    if (ldv_undef_int() != 0) {
      #line 14226 
      __VERIFIER_assume(emg_79_ret == 0);
      #line 14230 
      goto emg_call_79;
    }
    else {
      #line 14235 
      __VERIFIER_assume(emg_79_ret != 0);
      #line 14238 
      if (emg_repeat_cnt_main_79_0 > 0) {
        #line 14239 
        emg_repeat_cnt_main_79_0 --;
        #line 14241 
        goto emg_main_79;
      }
      else 
           #line 14243 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 14250 
       ldv_free((void *)emg_79_resource_0);
  #line 14258 
  return (void *)0;
}

#line 14263  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_wep_default_key_count_ops(void *arg0)
{
  #line 14266 
  struct file_operations *emg_80_container;
  #line 14267 
  long long emg_80_emg_param_1_0;
  #line 14268 
  char *emg_80_emg_param_1_2;
  #line 14269 
  char *emg_80_emg_param_1_4;
  #line 14270 
  int emg_80_emg_param_2_1;
  #line 14271 
  long long *emg_80_emg_param_3_3;
  #line 14272 
  long long *emg_80_emg_param_3_5;
  #line 14273 
  struct file *emg_80_resource_0;
  #line 14274 
  struct inode *emg_80_resource_1;
  #line 14275 
  int emg_80_ret;
  #line 14276 
  unsigned long emg_80_size_cnt;
  #line 14277 
  int emg_repeat_cnt_main_80_0 = 1;
  #line 14278 
  int emg_repeat_cnt_call_80 = 1;
  #line 14279 
  int emg_repeat_cnt_main_80_1 = 1;
  #line 14281 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 14285 
  emg_80_ret = ldv_undef_int();
  #line 14286 
  emg_80_container = emg_alias_wep_default_key_count_ops;
  #line 14287 
  emg_80_ret = ldv_undef_int();
  #line 14289 
  __VERIFIER_assume(data->arg0 == emg_alias_wep_default_key_count_ops);
  #line 14291 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 14292 
    emg_80_container = data->arg0;
    #line 14293 
    ldv_free((void *)data);
  }
  #line 14298 
  emg_80_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 14299 
  emg_80_size_cnt = (unsigned long)ldv_undef_int();
  #line 14303 
  goto emg_main_80;
  #line 14307 
  return (void *)0;
  #line 14310 
  emg_call_80: 
               #line 14310 
  ;
  #line 14311 
  if (ldv_undef_int() != 0) {
    #line 14312 
    switch (ldv_undef_int()) {
      #line 14313 
      case 0: 
              #line 14313 
      ;
      #line 14315 
      emg_80_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14315 
      emg_80_emg_param_1_2 = emg_80_emg_param_1_2;
      #line 14316 
      emg_80_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14316 
      emg_80_emg_param_3_3 = emg_80_emg_param_3_3;
      #line 14320 
      emg_wrapper_wep_default_key_count_read(emg_80_resource_0,emg_80_emg_param_1_2,emg_80_size_cnt,emg_80_emg_param_3_3);
      #line 14324 
      ldv_free((void *)emg_80_emg_param_1_2);
      #line 14325 
      ldv_free((void *)emg_80_emg_param_3_3);
      #line 14327 
      break;
      #line 14329 
      case 1: 
              #line 14329 
      ;
      #line 14331 
      generic_file_llseek(emg_80_resource_0,emg_80_emg_param_1_0,emg_80_emg_param_2_1);
      #line 14333 
      break;
      #line 14335 
      case 2: 
              #line 14335 
      ;
      #line 14342 
      __VERIFIER_assume(emg_80_size_cnt <= 2147479552UL);
      #line 14343 
      emg_80_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14343 
      emg_80_emg_param_1_4 = emg_80_emg_param_1_4;
      #line 14344 
      emg_80_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14344 
      emg_80_emg_param_3_5 = emg_80_emg_param_3_5;
      #line 14348 
      if (emg_80_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 14349 
        (*(emg_80_container->write))(emg_80_resource_0,emg_80_emg_param_1_4,emg_80_size_cnt,emg_80_emg_param_3_5);
      #line 14354 
      ldv_free((void *)emg_80_emg_param_1_4);
      #line 14355 
      ldv_free((void *)emg_80_emg_param_3_5);
      #line 14357 
      break;
      #line 14359 
      default: 
               #line 14359 
      ;
      #line 14359 
      __VERIFIER_assume(0);
    }
    #line 14362 
    if (emg_repeat_cnt_call_80 > 0) {
      #line 14363 
      emg_repeat_cnt_call_80 --;
      #line 14365 
      goto emg_call_80;
    }
    else 
         #line 14367 
         __VERIFIER_assume(0);
  }
  else {
    #line 14373 
    if (emg_80_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 14374 
      (*(emg_80_container->release))(emg_80_resource_1,emg_80_resource_0);
    #line 14378 
    if (emg_repeat_cnt_main_80_0 > 0) {
      #line 14379 
      emg_repeat_cnt_main_80_0 --;
      #line 14381 
      goto emg_main_80;
    }
    else 
         #line 14383 
         __VERIFIER_assume(0);
  }
  #line 14389 
  return (void *)0;
  #line 14392 
  emg_main_80: 
               #line 14392 
  ;
  #line 14393 
  if (ldv_undef_int() != 0) {
    #line 14395 
    emg_80_ret = simple_open(emg_80_resource_1,emg_80_resource_0);
    #line 14400 
    emg_80_ret = ldv_filter_err_code(emg_80_ret);
    #line 14403 
    if (ldv_undef_int() != 0) {
      #line 14405 
      __VERIFIER_assume(emg_80_ret == 0);
      #line 14409 
      goto emg_call_80;
    }
    else {
      #line 14414 
      __VERIFIER_assume(emg_80_ret != 0);
      #line 14417 
      if (emg_repeat_cnt_main_80_1 > 0) {
        #line 14418 
        emg_repeat_cnt_main_80_1 --;
        #line 14420 
        goto emg_main_80;
      }
      else 
           #line 14422 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 14429 
       ldv_free((void *)emg_80_resource_0);
  #line 14437 
  return (void *)0;
}

#line 14442  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_wep_interrupt_ops(void *arg0)
{
  #line 14445 
  struct file_operations *emg_81_container;
  #line 14446 
  long long emg_81_emg_param_1_0;
  #line 14447 
  char *emg_81_emg_param_1_2;
  #line 14448 
  char *emg_81_emg_param_1_4;
  #line 14449 
  int emg_81_emg_param_2_1;
  #line 14450 
  long long *emg_81_emg_param_3_3;
  #line 14451 
  long long *emg_81_emg_param_3_5;
  #line 14452 
  struct file *emg_81_resource_0;
  #line 14453 
  struct inode *emg_81_resource_1;
  #line 14454 
  int emg_81_ret;
  #line 14455 
  unsigned long emg_81_size_cnt;
  #line 14456 
  int emg_repeat_cnt_main_81_1 = 1;
  #line 14457 
  int emg_repeat_cnt_main_81_0 = 1;
  #line 14458 
  int emg_repeat_cnt_call_81 = 1;
  #line 14460 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 14464 
  emg_81_ret = ldv_undef_int();
  #line 14465 
  emg_81_container = emg_alias_wep_interrupt_ops;
  #line 14466 
  emg_81_ret = ldv_undef_int();
  #line 14468 
  __VERIFIER_assume(data->arg0 == emg_alias_wep_interrupt_ops);
  #line 14470 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 14471 
    emg_81_container = data->arg0;
    #line 14472 
    ldv_free((void *)data);
  }
  #line 14477 
  emg_81_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 14478 
  emg_81_size_cnt = (unsigned long)ldv_undef_int();
  #line 14482 
  goto emg_main_81;
  #line 14486 
  return (void *)0;
  #line 14489 
  emg_call_81: 
               #line 14489 
  ;
  #line 14490 
  if (ldv_undef_int() != 0) {
    #line 14491 
    switch (ldv_undef_int()) {
      #line 14492 
      case 0: 
              #line 14492 
      ;
      #line 14494 
      emg_81_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14494 
      emg_81_emg_param_1_2 = emg_81_emg_param_1_2;
      #line 14495 
      emg_81_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14495 
      emg_81_emg_param_3_3 = emg_81_emg_param_3_3;
      #line 14499 
      emg_wrapper_wep_interrupt_read(emg_81_resource_0,emg_81_emg_param_1_2,emg_81_size_cnt,emg_81_emg_param_3_3);
      #line 14503 
      ldv_free((void *)emg_81_emg_param_1_2);
      #line 14504 
      ldv_free((void *)emg_81_emg_param_3_3);
      #line 14506 
      break;
      #line 14508 
      case 1: 
              #line 14508 
      ;
      #line 14510 
      generic_file_llseek(emg_81_resource_0,emg_81_emg_param_1_0,emg_81_emg_param_2_1);
      #line 14512 
      break;
      #line 14514 
      case 2: 
              #line 14514 
      ;
      #line 14521 
      __VERIFIER_assume(emg_81_size_cnt <= 2147479552UL);
      #line 14522 
      emg_81_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14522 
      emg_81_emg_param_1_4 = emg_81_emg_param_1_4;
      #line 14523 
      emg_81_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14523 
      emg_81_emg_param_3_5 = emg_81_emg_param_3_5;
      #line 14527 
      if (emg_81_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 14528 
        (*(emg_81_container->write))(emg_81_resource_0,emg_81_emg_param_1_4,emg_81_size_cnt,emg_81_emg_param_3_5);
      #line 14533 
      ldv_free((void *)emg_81_emg_param_1_4);
      #line 14534 
      ldv_free((void *)emg_81_emg_param_3_5);
      #line 14536 
      break;
      #line 14538 
      default: 
               #line 14538 
      ;
      #line 14538 
      __VERIFIER_assume(0);
    }
    #line 14541 
    if (emg_repeat_cnt_call_81 > 0) {
      #line 14542 
      emg_repeat_cnt_call_81 --;
      #line 14544 
      goto emg_call_81;
    }
    else 
         #line 14546 
         __VERIFIER_assume(0);
  }
  else {
    #line 14552 
    if (emg_81_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 14553 
      (*(emg_81_container->release))(emg_81_resource_1,emg_81_resource_0);
    #line 14557 
    if (emg_repeat_cnt_main_81_0 > 0) {
      #line 14558 
      emg_repeat_cnt_main_81_0 --;
      #line 14560 
      goto emg_main_81;
    }
    else 
         #line 14562 
         __VERIFIER_assume(0);
  }
  #line 14568 
  return (void *)0;
  #line 14571 
  emg_main_81: 
               #line 14571 
  ;
  #line 14572 
  if (ldv_undef_int() != 0) {
    #line 14574 
    emg_81_ret = simple_open(emg_81_resource_1,emg_81_resource_0);
    #line 14579 
    emg_81_ret = ldv_filter_err_code(emg_81_ret);
    #line 14582 
    if (ldv_undef_int() != 0) {
      #line 14584 
      __VERIFIER_assume(emg_81_ret == 0);
      #line 14588 
      goto emg_call_81;
    }
    else {
      #line 14593 
      __VERIFIER_assume(emg_81_ret != 0);
      #line 14596 
      if (emg_repeat_cnt_main_81_1 > 0) {
        #line 14597 
        emg_repeat_cnt_main_81_1 --;
        #line 14599 
        goto emg_main_81;
      }
      else 
           #line 14601 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 14608 
       ldv_free((void *)emg_81_resource_0);
  #line 14616 
  return (void *)0;
}

#line 14621  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_wep_key_not_found_ops(void *arg0)
{
  #line 14624 
  struct file_operations *emg_82_container;
  #line 14625 
  long long emg_82_emg_param_1_0;
  #line 14626 
  char *emg_82_emg_param_1_2;
  #line 14627 
  char *emg_82_emg_param_1_4;
  #line 14628 
  int emg_82_emg_param_2_1;
  #line 14629 
  long long *emg_82_emg_param_3_3;
  #line 14630 
  long long *emg_82_emg_param_3_5;
  #line 14631 
  struct file *emg_82_resource_0;
  #line 14632 
  struct inode *emg_82_resource_1;
  #line 14633 
  int emg_82_ret;
  #line 14634 
  unsigned long emg_82_size_cnt;
  #line 14635 
  int emg_repeat_cnt_call_82 = 1;
  #line 14636 
  int emg_repeat_cnt_main_82_1 = 1;
  #line 14637 
  int emg_repeat_cnt_main_82_0 = 1;
  #line 14639 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 14643 
  emg_82_ret = ldv_undef_int();
  #line 14644 
  emg_82_container = emg_alias_wep_key_not_found_ops;
  #line 14645 
  emg_82_ret = ldv_undef_int();
  #line 14647 
  __VERIFIER_assume(data->arg0 == emg_alias_wep_key_not_found_ops);
  #line 14649 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 14650 
    emg_82_container = data->arg0;
    #line 14651 
    ldv_free((void *)data);
  }
  #line 14656 
  emg_82_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 14657 
  emg_82_size_cnt = (unsigned long)ldv_undef_int();
  #line 14661 
  goto emg_main_82;
  #line 14665 
  return (void *)0;
  #line 14668 
  emg_call_82: 
               #line 14668 
  ;
  #line 14669 
  if (ldv_undef_int() != 0) {
    #line 14670 
    switch (ldv_undef_int()) {
      #line 14671 
      case 0: 
              #line 14671 
      ;
      #line 14673 
      emg_82_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14673 
      emg_82_emg_param_1_2 = emg_82_emg_param_1_2;
      #line 14674 
      emg_82_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14674 
      emg_82_emg_param_3_3 = emg_82_emg_param_3_3;
      #line 14678 
      emg_wrapper_wep_key_not_found_read(emg_82_resource_0,emg_82_emg_param_1_2,emg_82_size_cnt,emg_82_emg_param_3_3);
      #line 14682 
      ldv_free((void *)emg_82_emg_param_1_2);
      #line 14683 
      ldv_free((void *)emg_82_emg_param_3_3);
      #line 14685 
      break;
      #line 14687 
      case 1: 
              #line 14687 
      ;
      #line 14689 
      generic_file_llseek(emg_82_resource_0,emg_82_emg_param_1_0,emg_82_emg_param_2_1);
      #line 14691 
      break;
      #line 14693 
      case 2: 
              #line 14693 
      ;
      #line 14700 
      __VERIFIER_assume(emg_82_size_cnt <= 2147479552UL);
      #line 14701 
      emg_82_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14701 
      emg_82_emg_param_1_4 = emg_82_emg_param_1_4;
      #line 14702 
      emg_82_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14702 
      emg_82_emg_param_3_5 = emg_82_emg_param_3_5;
      #line 14706 
      if (emg_82_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 14707 
        (*(emg_82_container->write))(emg_82_resource_0,emg_82_emg_param_1_4,emg_82_size_cnt,emg_82_emg_param_3_5);
      #line 14712 
      ldv_free((void *)emg_82_emg_param_1_4);
      #line 14713 
      ldv_free((void *)emg_82_emg_param_3_5);
      #line 14715 
      break;
      #line 14717 
      default: 
               #line 14717 
      ;
      #line 14717 
      __VERIFIER_assume(0);
    }
    #line 14720 
    if (emg_repeat_cnt_call_82 > 0) {
      #line 14721 
      emg_repeat_cnt_call_82 --;
      #line 14723 
      goto emg_call_82;
    }
    else 
         #line 14725 
         __VERIFIER_assume(0);
  }
  else {
    #line 14731 
    if (emg_82_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 14732 
      (*(emg_82_container->release))(emg_82_resource_1,emg_82_resource_0);
    #line 14736 
    if (emg_repeat_cnt_main_82_0 > 0) {
      #line 14737 
      emg_repeat_cnt_main_82_0 --;
      #line 14739 
      goto emg_main_82;
    }
    else 
         #line 14741 
         __VERIFIER_assume(0);
  }
  #line 14747 
  return (void *)0;
  #line 14750 
  emg_main_82: 
               #line 14750 
  ;
  #line 14751 
  if (ldv_undef_int() != 0) {
    #line 14753 
    emg_82_ret = simple_open(emg_82_resource_1,emg_82_resource_0);
    #line 14758 
    emg_82_ret = ldv_filter_err_code(emg_82_ret);
    #line 14761 
    if (ldv_undef_int() != 0) {
      #line 14763 
      __VERIFIER_assume(emg_82_ret == 0);
      #line 14767 
      goto emg_call_82;
    }
    else {
      #line 14772 
      __VERIFIER_assume(emg_82_ret != 0);
      #line 14775 
      if (emg_repeat_cnt_main_82_1 > 0) {
        #line 14776 
        emg_repeat_cnt_main_82_1 --;
        #line 14778 
        goto emg_main_82;
      }
      else 
           #line 14780 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 14787 
       ldv_free((void *)emg_82_resource_0);
  #line 14795 
  return (void *)0;
}

#line 14800  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_wep_packets_ops(void *arg0)
{
  #line 14803 
  struct file_operations *emg_83_container;
  #line 14804 
  long long emg_83_emg_param_1_0;
  #line 14805 
  char *emg_83_emg_param_1_2;
  #line 14806 
  char *emg_83_emg_param_1_4;
  #line 14807 
  int emg_83_emg_param_2_1;
  #line 14808 
  long long *emg_83_emg_param_3_3;
  #line 14809 
  long long *emg_83_emg_param_3_5;
  #line 14810 
  struct file *emg_83_resource_0;
  #line 14811 
  struct inode *emg_83_resource_1;
  #line 14812 
  int emg_83_ret;
  #line 14813 
  unsigned long emg_83_size_cnt;
  #line 14814 
  int emg_repeat_cnt_call_83 = 1;
  #line 14815 
  int emg_repeat_cnt_main_83_0 = 1;
  #line 14816 
  int emg_repeat_cnt_main_83_1 = 1;
  #line 14818 
  struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *data = (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)arg0;
  #line 14822 
  emg_83_ret = ldv_undef_int();
  #line 14823 
  emg_83_container = emg_alias_wep_packets_ops;
  #line 14824 
  emg_83_ret = ldv_undef_int();
  #line 14826 
  __VERIFIER_assume(data->arg0 == emg_alias_wep_packets_ops);
  #line 14828 
  if (data != (struct emg_struct_character_driver_scenario_aes_decrypt_fail_ops_6 *)0) {
    #line 14829 
    emg_83_container = data->arg0;
    #line 14830 
    ldv_free((void *)data);
  }
  #line 14835 
  emg_83_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 14836 
  emg_83_size_cnt = (unsigned long)ldv_undef_int();
  #line 14840 
  goto emg_main_83;
  #line 14844 
  return (void *)0;
  #line 14847 
  emg_call_83: 
               #line 14847 
  ;
  #line 14848 
  if (ldv_undef_int() != 0) {
    #line 14849 
    switch (ldv_undef_int()) {
      #line 14850 
      case 0: 
              #line 14850 
      ;
      #line 14852 
      emg_83_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14852 
      emg_83_emg_param_1_2 = emg_83_emg_param_1_2;
      #line 14853 
      emg_83_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14853 
      emg_83_emg_param_3_3 = emg_83_emg_param_3_3;
      #line 14857 
      emg_wrapper_wep_packets_read(emg_83_resource_0,emg_83_emg_param_1_2,emg_83_size_cnt,emg_83_emg_param_3_3);
      #line 14861 
      ldv_free((void *)emg_83_emg_param_1_2);
      #line 14862 
      ldv_free((void *)emg_83_emg_param_3_3);
      #line 14864 
      break;
      #line 14866 
      case 1: 
              #line 14866 
      ;
      #line 14868 
      generic_file_llseek(emg_83_resource_0,emg_83_emg_param_1_0,emg_83_emg_param_2_1);
      #line 14870 
      break;
      #line 14872 
      case 2: 
              #line 14872 
      ;
      #line 14879 
      __VERIFIER_assume(emg_83_size_cnt <= 2147479552UL);
      #line 14880 
      emg_83_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14880 
      emg_83_emg_param_1_4 = emg_83_emg_param_1_4;
      #line 14881 
      emg_83_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14881 
      emg_83_emg_param_3_5 = emg_83_emg_param_3_5;
      #line 14885 
      if (emg_83_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 14886 
        (*(emg_83_container->write))(emg_83_resource_0,emg_83_emg_param_1_4,emg_83_size_cnt,emg_83_emg_param_3_5);
      #line 14891 
      ldv_free((void *)emg_83_emg_param_1_4);
      #line 14892 
      ldv_free((void *)emg_83_emg_param_3_5);
      #line 14894 
      break;
      #line 14896 
      default: 
               #line 14896 
      ;
      #line 14896 
      __VERIFIER_assume(0);
    }
    #line 14899 
    if (emg_repeat_cnt_call_83 > 0) {
      #line 14900 
      emg_repeat_cnt_call_83 --;
      #line 14902 
      goto emg_call_83;
    }
    else 
         #line 14904 
         __VERIFIER_assume(0);
  }
  else {
    #line 14910 
    if (emg_83_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 14911 
      (*(emg_83_container->release))(emg_83_resource_1,emg_83_resource_0);
    #line 14915 
    if (emg_repeat_cnt_main_83_0 > 0) {
      #line 14916 
      emg_repeat_cnt_main_83_0 --;
      #line 14918 
      goto emg_main_83;
    }
    else 
         #line 14920 
         __VERIFIER_assume(0);
  }
  #line 14926 
  return (void *)0;
  #line 14929 
  emg_main_83: 
               #line 14929 
  ;
  #line 14930 
  if (ldv_undef_int() != 0) {
    #line 14932 
    emg_83_ret = simple_open(emg_83_resource_1,emg_83_resource_0);
    #line 14937 
    emg_83_ret = ldv_filter_err_code(emg_83_ret);
    #line 14940 
    if (ldv_undef_int() != 0) {
      #line 14942 
      __VERIFIER_assume(emg_83_ret == 0);
      #line 14946 
      goto emg_call_83;
    }
    else {
      #line 14951 
      __VERIFIER_assume(emg_83_ret != 0);
      #line 14954 
      if (emg_repeat_cnt_main_83_1 > 0) {
        #line 14955 
        emg_repeat_cnt_main_83_1 --;
        #line 14957 
        goto emg_main_83;
      }
      else 
           #line 14959 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 14966 
       ldv_free((void *)emg_83_resource_0);
  #line 14974 
  return (void *)0;
}

#line 14979  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_platform_platform_instance_wl12xx_driver(void *arg0)
{
  #line 14982 
  struct platform_driver *emg_84_container;
  #line 14983 
  struct pm_message *emg_84_emg_param_1_0;
  #line 14984 
  int emg_84_probed;
  #line 14985 
  struct platform_device *emg_84_resource;
  #line 14986 
  int emg_repeat_cnt_main_84_1 = 1;
  #line 14987 
  int emg_repeat_cnt_call_84 = 1;
  #line 14988 
  int emg_repeat_cnt_main_84_0 = 1;
  #line 14990 
  struct emg_struct_platform_instance_wl12xx_driver_84 *data = (struct emg_struct_platform_instance_wl12xx_driver_84 *)arg0;
  #line 14994 
  emg_84_probed = 1;
  #line 14995 
  emg_84_container = emg_alias_wl12xx_driver;
  #line 14996 
  emg_84_probed = 1;
  #line 14998 
  __VERIFIER_assume(data->arg0 == emg_alias_wl12xx_driver);
  #line 15000 
  if (data != (struct emg_struct_platform_instance_wl12xx_driver_84 *)0) {
    #line 15001 
    emg_84_container = data->arg0;
    #line 15002 
    ldv_free((void *)data);
  }
  #line 15007 
  emg_84_resource = (struct platform_device *)ldv_xmalloc(1632UL);
  #line 15008 
  emg_84_resource->id_entry = emg_84_container->id_table;
  #line 15009 
  emg_84_resource->dev.platform_data = ldv_xmalloc_unknown_size(0UL);
  #line 15013 
  goto emg_main_84;
  #line 15017 
  return (void *)0;
  #line 15020 
  emg_call_84: 
               #line 15020 
  ;
  #line 15021 
  if (ldv_undef_int() != 0) {
    #line 15022 
    switch (ldv_undef_int()) {
      #line 15023 
      case 0: 
              #line 15023 
      ;
      #line 15025 
      emg_84_emg_param_1_0 = (struct pm_message *)ldv_xmalloc_unknown_size(0UL);
      #line 15025 
      emg_84_emg_param_1_0 = emg_84_emg_param_1_0;
      #line 15029 
      if (emg_84_container->suspend != (int (*)(struct platform_device *, pm_message_t ))0) 
        #line 15030 
        (*(emg_84_container->suspend))(emg_84_resource,*emg_84_emg_param_1_0);
      #line 15035 
      ldv_free((void *)emg_84_emg_param_1_0);
      #line 15039 
      if (emg_84_container->resume != (int (*)(struct platform_device *))0) 
        #line 15040 
        (*(emg_84_container->resume))(emg_84_resource);
      #line 15043 
      break;
      #line 15045 
      case 1: 
              #line 15045 
      ;
      #line 15053 
      break;
      #line 15055 
      case 2: 
              #line 15055 
      ;
      #line 15058 
      break;
      #line 15060 
      default: 
               #line 15060 
      ;
      #line 15060 
      __VERIFIER_assume(0);
    }
    #line 15063 
    if (emg_repeat_cnt_call_84 > 0) {
      #line 15064 
      emg_repeat_cnt_call_84 --;
      #line 15066 
      goto emg_call_84;
    }
    else 
         #line 15068 
         __VERIFIER_assume(0);
  }
  else {
    #line 15074 
    if (emg_84_container->shutdown != (void (*)(struct platform_device *))0) 
      #line 15075 
      (*(emg_84_container->shutdown))(emg_84_resource);
    #line 15080 
    emg_wrapper_wl12xx_remove(emg_84_resource);
    #line 15084 
    emg_84_probed = 1;
    #line 15087 
    if (emg_repeat_cnt_main_84_1 > 0) {
      #line 15088 
      emg_repeat_cnt_main_84_1 --;
      #line 15090 
      goto emg_main_84;
    }
    else 
         #line 15092 
         __VERIFIER_assume(0);
  }
  #line 15098 
  return (void *)0;
  #line 15101 
  emg_main_84: 
               #line 15101 
  ;
  #line 15102 
  if (ldv_undef_int() != 0) {
    #line 15105 
    ldv_pre_probe();
    #line 15109 
    emg_84_probed = emg_wrapper_wl12xx_probe(emg_84_resource);
    #line 15114 
    emg_84_probed = ldv_post_probe(emg_84_probed);
    #line 15117 
    if (ldv_undef_int() != 0) {
      #line 15119 
      __VERIFIER_assume(emg_84_probed == 0);
      #line 15123 
      goto emg_call_84;
    }
    else {
      #line 15128 
      __VERIFIER_assume(emg_84_probed != 0);
      #line 15131 
      if (emg_repeat_cnt_main_84_0 > 0) {
        #line 15132 
        emg_repeat_cnt_main_84_0 --;
        #line 15134 
        goto emg_main_84;
      }
      else 
           #line 15136 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 15143 
       ldv_free((void *)emg_84_resource);
  #line 15151 
  return (void *)0;
}

#line 15156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
int emg___platform_driver_register(struct platform_driver *arg0, struct module *arg1)
{
  #line 15159 
  struct platform_driver *emg_2_platform_driver;
  #line 15161 
  emg_2_platform_driver = emg_alias_wl12xx_driver;
  #line 15162 
  if (ldv_undef_int() != 0) {
    #line 15164 
    emg_2_platform_driver = arg0;
    #line 15168 
    emg_dispatch_register_2(emg_2_platform_driver);
    #line 15172 
    return 0;
  }
  else {
    #line 15176 
    return ldv_undef_int_negative();
  }
}

#line 15184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1)
{
  #line 15187 
  struct dentry *emg_3_dentry;
  #line 15188 
  struct inode *emg_3_inode;
  #line 15190 
  if (ldv_undef_int() != 0) {
    #line 15192 
    emg_3_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 15193 
    emg_3_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 15194 
    emg_3_inode->i_mode = (unsigned short)16877U;
    #line 15195 
    emg_3_dentry->d_parent = arg1;
    #line 15196 
    emg_3_dentry->d_inode = emg_3_inode;
    #line 15197 
    return emg_3_dentry;
  }
  else {
    #line 15201 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 15209  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  #line 15212 
  struct dentry *emg_4_dentry;
  #line 15213 
  struct file_operations *emg_4_file_operations;
  #line 15214 
  struct inode *emg_4_inode;
  #line 15216 
  if (ldv_undef_int() != 0) {
    #line 15218 
    emg_4_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 15219 
    emg_4_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 15220 
    emg_4_inode->i_mode = arg1;
    #line 15221 
    emg_4_dentry->d_parent = arg2;
    #line 15222 
    emg_4_inode->i_private = arg3;
    #line 15223 
    emg_4_file_operations = arg4;
    #line 15224 
    emg_4_dentry->d_inode = emg_4_inode;
    #line 15225 
    ldv_save_allocated_memory_to_list((void *)emg_4_dentry);
    #line 15229 
    emg_dispatch_register_4(emg_4_file_operations);
    #line 15233 
    return emg_4_dentry;
  }
  else {
    #line 15237 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 15245  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void emg_platform_driver_unregister(struct platform_driver *arg0)
{
  #line 15248 
  struct platform_driver *emg_5_platform_driver;
  #line 15250 
  emg_5_platform_driver = emg_alias_wl12xx_driver;
  #line 15252 
  emg_5_platform_driver = arg0;
  #line 15256 
  emg_dispatch_deregister_5(emg_5_platform_driver);
  #line 15259 
  return;
}

#line 15264  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 15267 
  int emg_1_ret;
  #line 15270 
  emg_1_ret = emg_wl12xx_driver_init();
  #line 15271 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 15274 
  if (ldv_undef_int() != 0) {
    #line 15276 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 15280 
    emg_wl12xx_driver_exit();
  }
  else 
       #line 15284 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 15288 
  return (void *)0;
}

#line 15293  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl12xx/wl12xx.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 15295 
  ldv_initialize();
  #line 15297 
  emg_entry_point_insmod((void *)0);
  #line 15299 
  return 0;
}

