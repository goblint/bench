/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_tm.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_113 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_113 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_126 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_127 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_125 {
   struct __anonstruct_126 __anonCompField___anonunion_125_28 ;
   struct __anonstruct_127 __anonCompField___anonunion_125_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_125 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_128 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_128 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_130 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_131 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct list_head slab_list ;
   struct __anonstruct_134 __anonCompField___anonunion_133_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_136 __anonCompField___anonunion_135_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   union __anonunion_133 __anonCompField___anonstruct_132_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_135 __anonCompField___anonstruct_132_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_140 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_140 __anonCompField___anonstruct_139_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_31 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_32 ;
   struct __anonstruct_132 __anonCompField___anonunion_129_37 ;
   struct __anonstruct_137 __anonCompField___anonunion_129_38 ;
   struct __anonstruct_138 __anonCompField___anonunion_129_39 ;
   struct __anonstruct_139 __anonCompField___anonunion_129_41 ;
   struct __anonstruct_141 __anonCompField___anonunion_129_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_129 __anonCompField_page_43 ;
   union __anonunion_142 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_143 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_143 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_144 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_144 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/apic.h"
struct irq_data;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/arch_topology.h"
struct device_node;
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct user_struct;
#line 178 
struct writeback_control;
#line 179 
struct bdi_writeback;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 305 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_272 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_272 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_273 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_273 kgid_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_276 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_276 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_277 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_278 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_279 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_280 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_283 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_284 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_282 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_283 _addr_bnd ;
   struct __anonstruct__addr_pkey_284 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_281 {
   void *_addr ;
   union __anonunion_282 __anonCompField___anonstruct__sigfault_281_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_285 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_286 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_277 _kill ;
   struct __anonstruct__timer_278 _timer ;
   struct __anonstruct__rt_279 _rt ;
   struct __anonstruct__sigchld_280 _sigchld ;
   struct __anonstruct__sigfault_281 _sigfault ;
   struct __anonstruct__sigpoll_285 _sigpoll ;
   struct __anonstruct__sigsys_286 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_291 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_291 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_296 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_296 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_298 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_298 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_387 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_386 {
   struct __anonstruct_387 __anonCompField___anonunion_386_53 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_386 __anonCompField_lockref_54 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_389 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_388 {
   struct __anonstruct_389 __anonCompField___anonunion_388_55 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_388 __anonCompField_qstr_56 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_390 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_391 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_390 __anonCompField_dentry_57 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_391 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_409 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_409 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_410 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_411 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_410 __anonCompField_io_cq_60 ;
   union __anonunion_411 __anonCompField_io_cq_61 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct export_operations;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kobject;
#line 293 
struct kstatfs;
#line 294 
struct swap_info_struct;
#line 295 
struct iov_iter;
#line 296 
struct fscrypt_info;
#line 297 
struct fscrypt_operations;
#line 298 
struct fsverity_info;
#line 299 
struct fsverity_operations;
#line 300 
struct fs_context;
#line 301 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_412 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_412 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_413 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_413 __anonCompField_kqid_62 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_418 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_419 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_420 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_421 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_418 __anonCompField_inode_63 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_419 __anonCompField_inode_64 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_420 __anonCompField_inode_65 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_421 __anonCompField_inode_66 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_422 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_422 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_424 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_423 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_424 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_423 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 3599 
struct sock;
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_438 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_440 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_439 {
   unsigned long nr_segs ;
   struct __anonstruct_440 __anonCompField___anonunion_439_68 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_438 __anonCompField_iov_iter_67 ;
   union __anonunion_439 __anonCompField_iov_iter_69 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 422 
struct ns_common;
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct sk_buff;
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_463 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_463 __anonCompField_kernfs_node_72 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct irq_domain;
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_466 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_466 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_467 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_467 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_control {
   u16 thoff ;
   u16 addr_type ;
   u32 flags ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_basic {
   __be16 n_proto ;
   u8 ip_proto ;
   u8 padding ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_tags {
   u32 flow_label ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_470 {
   u16 vlan_id : 12 ;
   u16 vlan_dei : 1 ;
   u16 vlan_priority : 3 ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_469 {
   struct __anonstruct_470 __anonCompField___anonunion_469_73 ;
   __be16 vlan_tci ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_vlan {
   union __anonunion_469 __anonCompField_flow_dissector_key_vlan_74 ;
   __be16 vlan_tpid ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_keyid {
   __be32 keyid ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ipv4_addrs {
   __be32 src ;
   __be32 dst ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ipv6_addrs {
   struct in6_addr src ;
   struct in6_addr dst ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_tipc {
   __be32 key ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_471 {
   struct flow_dissector_key_ipv4_addrs v4addrs ;
   struct flow_dissector_key_ipv6_addrs v6addrs ;
   struct flow_dissector_key_tipc tipckey ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_addrs {
   union __anonunion_471 __anonCompField_flow_dissector_key_addrs_75 ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_473 {
   __be16 src ;
   __be16 dst ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_472 {
   __be32 ports ;
   struct __anonstruct_473 __anonCompField___anonunion_472_76 ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ports {
   union __anonunion_472 __anonCompField_flow_dissector_key_ports_77 ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_474 {
   u8 type ;
   u8 code ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_icmp {
   struct __anonstruct_474 __anonCompField_flow_dissector_key_icmp_78 ;
   u16 id ;
};
#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_keys {
   struct flow_dissector_key_control control ;
   struct flow_dissector_key_basic basic ;
   struct flow_dissector_key_tags tags ;
   struct flow_dissector_key_vlan vlan ;
   struct flow_dissector_key_vlan cvlan ;
   struct flow_dissector_key_keyid keyid ;
   struct flow_dissector_key_ports ports ;
   struct flow_dissector_key_icmp icmp ;
   struct flow_dissector_key_addrs addrs ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_489 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_488 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_489 __anonCompField___anonstruct_488_85 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_487 {
   struct __anonstruct_488 __anonCompField___anonunion_487_86 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_490 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_491 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_493 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_492 {
   struct __anonstruct_493 __anonCompField___anonunion_492_90 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_495 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_494 {
   __wsum csum ;
   struct __anonstruct_495 __anonCompField___anonunion_494_92 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_496 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_497 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_498 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_487 __anonCompField_sk_buff_87 ;
   union __anonunion_490 __anonCompField_sk_buff_88 ;
   union __anonunion_491 __anonCompField_sk_buff_89 ;
   char cb[48U] ;
   union __anonunion_492 __anonCompField_sk_buff_91 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_494 __anonCompField_sk_buff_93 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_496 __anonCompField_sk_buff_94 ;
   __u32 secmark ;
   union __anonunion_497 __anonCompField_sk_buff_95 ;
   union __anonunion_498 __anonCompField_sk_buff_96 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 1165 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_528 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_528 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_529 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_529 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_530 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_530 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_531 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_531 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_532 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_532 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_533 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_533 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_534 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_534 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_535 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_535 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_536 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_537 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_536 ifr_ifrn ;
   union __anonunion_ifr_ifru_537 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irq_affinity_notify {
   unsigned int irq ;
   struct kref kref ;
   struct work_struct work ;
   void (*notify)(struct irq_affinity_notify *, cpumask_t *) ;
   void (*release)(struct kref *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14504 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14505 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14504 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14505 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
struct hclge_dev;
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_desc {
   __le16 opcode ;
   __le16 flag ;
   __le16 retval ;
   __le16 rsv ;
   __le32 data[6U] ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_cmq_ring {
   dma_addr_t desc_dma_addr ;
   struct hclge_desc *desc ;
   struct hclge_dev *dev ;
   u32 head ;
   u32 tail ;
   u16 buf_size ;
   u16 desc_num ;
   int next_to_use ;
   int next_to_clean ;
   u8 ring_type ;
   spinlock_t lock ;
};
#line 55 
enum hclge_cmd_status {
    HCLGE_STATUS_SUCCESS = 0,
    HCLGE_ERR_CSQ_FULL = -1,
    HCLGE_ERR_CSQ_TIMEOUT = -2,
    HCLGE_ERR_CSQ_ERROR = -3
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_misc_vector {
   u8 *addr ;
   int vector_irq ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_cmq {
   struct hclge_cmq_ring csq ;
   struct hclge_cmq_ring crq ;
   u16 tx_timeout ;
   enum hclge_cmd_status last_status ;
};
#line 74 
enum hclge_opcode_type {
    HCLGE_OPC_QUERY_FW_VER = 1,
    HCLGE_OPC_CFG_RST_TRIGGER = 32,
    HCLGE_OPC_GBL_RST_STATUS = 33,
    HCLGE_OPC_QUERY_FUNC_STATUS = 34,
    HCLGE_OPC_QUERY_PF_RSRC = 35,
    HCLGE_OPC_QUERY_VF_RSRC = 36,
    HCLGE_OPC_GET_CFG_PARAM = 37,
    HCLGE_OPC_PF_RST_DONE = 38,
    HCLGE_OPC_QUERY_VF_RST_RDY = 39,
    HCLGE_OPC_STATS_64_BIT = 48,
    HCLGE_OPC_STATS_32_BIT = 49,
    HCLGE_OPC_STATS_MAC = 50,
    HCLGE_OPC_QUERY_MAC_REG_NUM = 51,
    HCLGE_OPC_STATS_MAC_ALL = 52,
    HCLGE_OPC_QUERY_REG_NUM = 64,
    HCLGE_OPC_QUERY_32_BIT_REG = 65,
    HCLGE_OPC_QUERY_64_BIT_REG = 66,
    HCLGE_OPC_DFX_BD_NUM = 67,
    HCLGE_OPC_DFX_BIOS_COMMON_REG = 68,
    HCLGE_OPC_DFX_SSU_REG_0 = 69,
    HCLGE_OPC_DFX_SSU_REG_1 = 70,
    HCLGE_OPC_DFX_IGU_EGU_REG = 71,
    HCLGE_OPC_DFX_RPU_REG_0 = 72,
    HCLGE_OPC_DFX_RPU_REG_1 = 73,
    HCLGE_OPC_DFX_NCSI_REG = 74,
    HCLGE_OPC_DFX_RTC_REG = 75,
    HCLGE_OPC_DFX_PPP_REG = 76,
    HCLGE_OPC_DFX_RCB_REG = 77,
    HCLGE_OPC_DFX_TQP_REG = 78,
    HCLGE_OPC_DFX_SSU_REG_2 = 79,
    HCLGE_OPC_DFX_QUERY_CHIP_CAP = 80,
    HCLGE_OPC_CONFIG_MAC_MODE = 769,
    HCLGE_OPC_CONFIG_AN_MODE = 772,
    HCLGE_OPC_QUERY_LINK_STATUS = 775,
    HCLGE_OPC_CONFIG_MAX_FRM_SIZE = 776,
    HCLGE_OPC_CONFIG_SPEED_DUP = 777,
    HCLGE_OPC_QUERY_MAC_TNL_INT = 784,
    HCLGE_OPC_MAC_TNL_INT_EN = 785,
    HCLGE_OPC_CLEAR_MAC_TNL_INT = 786,
    HCLGE_OPC_SERDES_LOOPBACK = 789,
    HCLGE_OPC_CONFIG_FEC_MODE = 794,
    HCLGE_OPC_CFG_MAC_PAUSE_EN = 1793,
    HCLGE_OPC_CFG_PFC_PAUSE_EN = 1794,
    HCLGE_OPC_CFG_MAC_PARA = 1795,
    HCLGE_OPC_CFG_PFC_PARA = 1796,
    HCLGE_OPC_QUERY_MAC_TX_PKT_CNT = 1797,
    HCLGE_OPC_QUERY_MAC_RX_PKT_CNT = 1798,
    HCLGE_OPC_QUERY_PFC_TX_PKT_CNT = 1799,
    HCLGE_OPC_QUERY_PFC_RX_PKT_CNT = 1800,
    HCLGE_OPC_PRI_TO_TC_MAPPING = 1801,
    HCLGE_OPC_QOS_MAP = 1802,
    HCLGE_OPC_TM_PG_TO_PRI_LINK = 2052,
    HCLGE_OPC_TM_QS_TO_PRI_LINK = 2053,
    HCLGE_OPC_TM_NQ_TO_QS_LINK = 2054,
    HCLGE_OPC_TM_RQ_TO_QS_LINK = 2055,
    HCLGE_OPC_TM_PORT_WEIGHT = 2056,
    HCLGE_OPC_TM_PG_WEIGHT = 2057,
    HCLGE_OPC_TM_QS_WEIGHT = 2058,
    HCLGE_OPC_TM_PRI_WEIGHT = 2059,
    HCLGE_OPC_TM_PRI_C_SHAPPING = 2060,
    HCLGE_OPC_TM_PRI_P_SHAPPING = 2061,
    HCLGE_OPC_TM_PG_C_SHAPPING = 2062,
    HCLGE_OPC_TM_PG_P_SHAPPING = 2063,
    HCLGE_OPC_TM_PORT_SHAPPING = 2064,
    HCLGE_OPC_TM_PG_SCH_MODE_CFG = 2066,
    HCLGE_OPC_TM_PRI_SCH_MODE_CFG = 2067,
    HCLGE_OPC_TM_QS_SCH_MODE_CFG = 2068,
    HCLGE_OPC_TM_BP_TO_QSET_MAPPING = 2069,
    HCLGE_OPC_ETS_TC_WEIGHT = 2115,
    HCLGE_OPC_QSET_DFX_STS = 2116,
    HCLGE_OPC_PRI_DFX_STS = 2117,
    HCLGE_OPC_PG_DFX_STS = 2118,
    HCLGE_OPC_PORT_DFX_STS = 2119,
    HCLGE_OPC_SCH_NQ_CNT = 2120,
    HCLGE_OPC_SCH_RQ_CNT = 2121,
    HCLGE_OPC_TM_INTERNAL_STS = 2128,
    HCLGE_OPC_TM_INTERNAL_CNT = 2129,
    HCLGE_OPC_TM_INTERNAL_STS_1 = 2130,
    HCLGE_OPC_TX_BUFF_ALLOC = 2305,
    HCLGE_OPC_RX_PRIV_BUFF_ALLOC = 2306,
    HCLGE_OPC_RX_PRIV_WL_ALLOC = 2307,
    HCLGE_OPC_RX_COM_THRD_ALLOC = 2308,
    HCLGE_OPC_RX_COM_WL_ALLOC = 2309,
    HCLGE_OPC_RX_GBL_PKT_CNT = 2310,
    HCLGE_OPC_SET_TQP_MAP = 2561,
    HCLGE_OPC_CFG_TX_QUEUE = 2817,
    HCLGE_OPC_QUERY_TX_POINTER = 2818,
    HCLGE_OPC_QUERY_TX_STATUS = 2819,
    HCLGE_OPC_TQP_TX_QUEUE_TC = 2820,
    HCLGE_OPC_CFG_RX_QUEUE = 2833,
    HCLGE_OPC_QUERY_RX_POINTER = 2834,
    HCLGE_OPC_QUERY_RX_STATUS = 2835,
    HCLGE_OPC_STASH_RX_QUEUE_LRO = 2838,
    HCLGE_OPC_CFG_RX_QUEUE_LRO = 2839,
    HCLGE_OPC_CFG_COM_TQP_QUEUE = 2848,
    HCLGE_OPC_RESET_TQP_QUEUE = 2850,
    HCLGE_OPC_PPU_PF_OTHER_INT_DFX = 2890,
    HCLGE_OPC_TSO_GENERIC_CONFIG = 3073,
    HCLGE_OPC_GRO_GENERIC_CONFIG = 3088,
    HCLGE_OPC_RSS_GENERIC_CONFIG = 3329,
    HCLGE_OPC_RSS_INDIR_TABLE = 3335,
    HCLGE_OPC_RSS_TC_MODE = 3336,
    HCLGE_OPC_RSS_INPUT_TUPLE = 3330,
    HCLGE_OPC_CFG_PROMISC_MODE = 3585,
    HCLGE_OPC_VLAN_PORT_TX_CFG = 3841,
    HCLGE_OPC_VLAN_PORT_RX_CFG = 3842,
    HCLGE_OPC_ADD_RING_TO_VECTOR = 5379,
    HCLGE_OPC_DEL_RING_TO_VECTOR = 5380,
    HCLGE_OPC_MAC_VLAN_ADD = 4096,
    HCLGE_OPC_MAC_VLAN_REMOVE = 4097,
    HCLGE_OPC_MAC_VLAN_TYPE_ID = 4098,
    HCLGE_OPC_MAC_VLAN_INSERT = 4099,
    HCLGE_OPC_MAC_VLAN_ALLOCATE = 4100,
    HCLGE_OPC_MAC_ETHTYPE_ADD = 4112,
    HCLGE_OPC_MAC_ETHTYPE_REMOVE = 4113,
    HCLGE_OPC_MAC_VLAN_SWITCH_PARAM = 4147,
    HCLGE_OPC_VLAN_FILTER_CTRL = 4352,
    HCLGE_OPC_VLAN_FILTER_PF_CFG = 4353,
    HCLGE_OPC_VLAN_FILTER_VF_CFG = 4354,
    HCLGE_OPC_FD_MODE_CTRL = 4608,
    HCLGE_OPC_FD_GET_ALLOCATION = 4609,
    HCLGE_OPC_FD_KEY_CONFIG = 4610,
    HCLGE_OPC_FD_TCAM_OP = 4611,
    HCLGE_OPC_FD_AD_OP = 4612,
    HCLGE_OPC_MDIO_CONFIG = 6400,
    HCLGE_OPC_QCN_MOD_CFG = 6657,
    HCLGE_OPC_QCN_GRP_TMPLT_CFG = 6658,
    HCLGE_OPC_QCN_SHAPPING_CFG = 6659,
    HCLGE_OPC_QCN_SHAPPING_BS_CFG = 6660,
    HCLGE_OPC_QCN_QSET_LINK_CFG = 6661,
    HCLGE_OPC_QCN_RP_STATUS_GET = 6662,
    HCLGE_OPC_QCN_AJUST_INIT = 6663,
    HCLGE_OPC_QCN_DFX_CNT_STATUS = 6664,
    HCLGEVF_OPC_MBX_PF_TO_VF = 8192,
    HCLGE_OPC_LED_STATUS_CFG = 45056,
    HCLGE_OPC_QUERY_NCL_CONFIG = 28689,
    HCLGE_OPC_M7_STATS_BD = 28690,
    HCLGE_OPC_M7_STATS_INFO = 28691,
    HCLGE_OPC_M7_COMPAT_CFG = 28698,
    HCLGE_OPC_GET_SFP_INFO = 28932,
    HCLGE_MAC_COMMON_INT_EN = 782,
    HCLGE_TM_SCH_ECC_INT_EN = 2089,
    HCLGE_SSU_ECC_INT_CMD = 2441,
    HCLGE_SSU_COMMON_INT_CMD = 2444,
    HCLGE_PPU_MPF_ECC_INT_CMD = 2880,
    HCLGE_PPU_MPF_OTHER_INT_CMD = 2881,
    HCLGE_PPU_PF_OTHER_INT_CMD = 2882,
    HCLGE_COMMON_ECC_INT_CFG = 5381,
    HCLGE_QUERY_RAS_INT_STS_BD_NUM = 5392,
    HCLGE_QUERY_CLEAR_MPF_RAS_INT = 5393,
    HCLGE_QUERY_CLEAR_PF_RAS_INT = 5394,
    HCLGE_QUERY_MSIX_INT_STS_BD_NUM = 5395,
    HCLGE_QUERY_CLEAR_ALL_MPF_MSIX_INT = 5396,
    HCLGE_QUERY_CLEAR_ALL_PF_MSIX_INT = 5397,
    HCLGE_CONFIG_ROCEE_RAS_INT_EN = 5504,
    HCLGE_QUERY_CLEAR_ROCEE_RAS_INT = 5505,
    HCLGE_ROCEE_PF_RAS_INT_CMD = 5508,
    HCLGE_QUERY_ROCEE_ECC_RAS_INFO_CMD = 5509,
    HCLGE_QUERY_ROCEE_AXI_RAS_INFO_CMD = 5510,
    HCLGE_IGU_EGU_TNL_INT_EN = 6147,
    HCLGE_IGU_COMMON_INT_EN = 6150,
    HCLGE_TM_QCN_MEM_INT_CFG = 6676,
    HCLGE_PPP_CMD0_INT_CMD = 8448,
    HCLGE_PPP_CMD1_INT_CMD = 8449,
    HCLGE_MAC_ETHERTYPE_IDX_RD = 8453,
    HCLGE_NCSI_INT_EN = 9217
};
#line 1097 
struct hclge_hw;
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mdio.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 823 
struct gpio_desc;
#line 824 
struct mii_bus;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct reset_control;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_device {
   struct device dev ;
   struct mii_bus *bus ;
   char modalias[32U] ;
   int (*bus_match)(struct device *, struct device_driver *) ;
   void (*device_free)(struct mdio_device *) ;
   void (*device_remove)(struct mdio_device *) ;
   int addr ;
   int flags ;
   struct gpio_desc *reset_gpio ;
   struct reset_control *reset_ctrl ;
   unsigned int reset_assert_delay ;
   unsigned int reset_deassert_delay ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_driver_common {
   struct device_driver driver ;
   int flags ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_697 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_697 __anonCompField_kernel_param_160 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
enum ldv_15532 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_INTERNAL = 1,
    PHY_INTERFACE_MODE_MII = 2,
    PHY_INTERFACE_MODE_GMII = 3,
    PHY_INTERFACE_MODE_SGMII = 4,
    PHY_INTERFACE_MODE_TBI = 5,
    PHY_INTERFACE_MODE_REVMII = 6,
    PHY_INTERFACE_MODE_RMII = 7,
    PHY_INTERFACE_MODE_RGMII = 8,
    PHY_INTERFACE_MODE_RGMII_ID = 9,
    PHY_INTERFACE_MODE_RGMII_RXID = 10,
    PHY_INTERFACE_MODE_RGMII_TXID = 11,
    PHY_INTERFACE_MODE_RTBI = 12,
    PHY_INTERFACE_MODE_SMII = 13,
    PHY_INTERFACE_MODE_XGMII = 14,
    PHY_INTERFACE_MODE_MOCA = 15,
    PHY_INTERFACE_MODE_QSGMII = 16,
    PHY_INTERFACE_MODE_TRGMII = 17,
    PHY_INTERFACE_MODE_1000BASEX = 18,
    PHY_INTERFACE_MODE_2500BASEX = 19,
    PHY_INTERFACE_MODE_RXAUI = 20,
    PHY_INTERFACE_MODE_XAUI = 21,
    PHY_INTERFACE_MODE_10GKR = 22,
    PHY_INTERFACE_MODE_USXGMII = 23,
    PHY_INTERFACE_MODE_MAX = 24
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
typedef enum ldv_15532 phy_interface_t;
#line 186 
struct phylink;
#line 188 
enum ldv_15547 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct mii_bus {
   struct module *owner ;
   char *name ;
   char id[61U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_15547 state ;
   struct device dev ;
   struct mdio_device *mdio_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int irq[32U] ;
   int reset_delay_us ;
   struct gpio_desc *reset_gpiod ;
};
#line 278 
enum phy_state {
    PHY_DOWN = 0,
    PHY_READY = 1,
    PHY_HALTED = 2,
    PHY_UP = 3,
    PHY_RUNNING = 4,
    PHY_NOLINK = 5
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};
#line 363 
struct phy_driver;
#line 363 
struct phy_led_trigger;
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_device {
   struct mdio_device mdio ;
   struct phy_driver *drv ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   unsigned int is_c45 : 1 ;
   unsigned int is_internal : 1 ;
   unsigned int is_pseudo_fixed_link : 1 ;
   unsigned int is_gigabit_capable : 1 ;
   unsigned int has_fixups : 1 ;
   unsigned int suspended : 1 ;
   unsigned int sysfs_links : 1 ;
   unsigned int loopback_enabled : 1 ;
   unsigned int autoneg : 1 ;
   unsigned int link : 1 ;
   unsigned int autoneg_complete : 1 ;
   unsigned int interrupts : 1 ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
   unsigned long adv_old[2U] ;
   u32 eee_broken_modes ;
   struct phy_led_trigger *phy_led_triggers ;
   unsigned int phy_num_led_triggers ;
   struct phy_led_trigger *last_triggered ;
   struct phy_led_trigger *led_link_trigger ;
   int irq ;
   void *priv ;
   struct delayed_work state_queue ;
   struct mutex lock ;
   bool sfp_bus_attached ;
   struct sfp_bus *sfp_bus ;
   struct phylink *phylink ;
   struct net_device *attached_dev ;
   u8 mdix ;
   u8 mdix_ctrl ;
   void (*phy_link_change)(struct phy_device *, bool , bool ) ;
   void (*adjust_link)(struct net_device *) ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_driver {
   struct mdio_driver_common mdiodrv ;
   u32 phy_id ;
   char *name ;
   u32 phy_id_mask ;
   unsigned long *features ;
   u32 flags ;
   void *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*get_features)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   int (*handle_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd)(struct phy_device *, int , u16 ) ;
   int (*write_mmd)(struct phy_device *, int , u16 , u16 ) ;
   int (*read_page)(struct phy_device *) ;
   int (*write_page)(struct phy_device *, int ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_sset_count)(struct phy_device *) ;
   void (*get_strings)(struct phy_device *, u8 *) ;
   void (*get_stats)(struct phy_device *, struct ethtool_stats *, u64 *) ;
   int (*get_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_loopback)(struct phy_device *, bool ) ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kfifo.h"
struct __kfifo {
   unsigned int in ;
   unsigned int out ;
   unsigned int mask ;
   unsigned int esize ;
   void *data ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_719 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_719 __anonCompField_pci_dev_166 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
struct hnae3_handle;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_ae_algo;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_queue {
   void *io_base ;
   struct hnae3_ae_algo *ae_algo ;
   struct hnae3_handle *handle ;
   int tqp_index ;
   u32 buf_size ;
   u16 tx_desc_num ;
   u16 rx_desc_num ;
};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hns3_mac_stats {
   u64 tx_pause_cnt ;
   u64 rx_pause_cnt ;
};
#line 100 
enum hnae3_loop {
    HNAE3_LOOP_APP = 0,
    HNAE3_LOOP_SERIAL_SERDES = 1,
    HNAE3_LOOP_PARALLEL_SERDES = 2,
    HNAE3_LOOP_PHY = 3,
    HNAE3_LOOP_NONE = 4
};
#line 108 
enum hnae3_client_type {
    HNAE3_CLIENT_KNIC = 0,
    HNAE3_CLIENT_ROCE = 1
};
#line 138 
enum hnae3_reset_notify_type {
    HNAE3_UP_CLIENT = 0,
    HNAE3_DOWN_CLIENT = 1,
    HNAE3_INIT_CLIENT = 2,
    HNAE3_UNINIT_CLIENT = 3,
    HNAE3_RESTORE_CLIENT = 4
};
#line 146 
enum hnae3_hw_error_type {
    HNAE3_PPU_POISON_ERROR = 0,
    HNAE3_CMDQ_ECC_ERROR = 1,
    HNAE3_IMP_RD_POISON_ERROR = 2
};
#line 152 
enum hnae3_reset_type {
    HNAE3_VF_RESET = 0,
    HNAE3_VF_FUNC_RESET = 1,
    HNAE3_VF_PF_FUNC_RESET = 2,
    HNAE3_VF_FULL_RESET = 3,
    HNAE3_FLR_RESET = 4,
    HNAE3_FUNC_RESET = 5,
    HNAE3_GLOBAL_RESET = 6,
    HNAE3_IMP_RESET = 7,
    HNAE3_UNKNOWN_RESET = 8,
    HNAE3_NONE_RESET = 9
};
#line 170 
enum hnae3_port_base_vlan_state {
    HNAE3_PORT_BASE_VLAN_DISABLE = 0,
    HNAE3_PORT_BASE_VLAN_ENABLE = 1,
    HNAE3_PORT_BASE_VLAN_MODIFY = 2,
    HNAE3_PORT_BASE_VLAN_NOCHANGE = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_vector_info {
   u8 *io_addr ;
   int vector ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_ring_chain_node {
   struct hnae3_ring_chain_node *next ;
   u32 tqp_index ;
   u32 flag ;
   u32 int_gl_idx ;
};
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_client_ops {
   int (*init_instance)(struct hnae3_handle *) ;
   void (*uninit_instance)(struct hnae3_handle *, bool ) ;
   void (*link_status_change)(struct hnae3_handle *, bool ) ;
   int (*setup_tc)(struct hnae3_handle *, u8 ) ;
   int (*reset_notify)(struct hnae3_handle *, enum hnae3_reset_notify_type ) ;
   void (*process_hw_error)(struct hnae3_handle *, enum hnae3_hw_error_type ) ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_client {
   char name[16U] ;
   unsigned long state ;
   enum hnae3_client_type type ;
   struct hnae3_client_ops *ops ;
   struct list_head node ;
};
#line 233 
struct hnae3_ae_ops;
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_ae_dev {
   struct pci_dev *pdev ;
   struct hnae3_ae_ops *ops ;
   struct list_head node ;
   u32 flag ;
   unsigned long hw_err_reset_req ;
   enum hnae3_reset_type reset_type ;
   void *priv ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_ae_ops {
   int (*init_ae_dev)(struct hnae3_ae_dev *) ;
   void (*uninit_ae_dev)(struct hnae3_ae_dev *) ;
   void (*flr_prepare)(struct hnae3_ae_dev *) ;
   void (*flr_done)(struct hnae3_ae_dev *) ;
   int (*init_client_instance)(struct hnae3_client *, struct hnae3_ae_dev *) ;
   void (*uninit_client_instance)(struct hnae3_client *, struct hnae3_ae_dev *) ;
   int (*start)(struct hnae3_handle *) ;
   void (*stop)(struct hnae3_handle *) ;
   int (*client_start)(struct hnae3_handle *) ;
   void (*client_stop)(struct hnae3_handle *) ;
   int (*get_status)(struct hnae3_handle *) ;
   void (*get_ksettings_an_result)(struct hnae3_handle *, u8 *, u32 *, u8 *) ;
   int (*cfg_mac_speed_dup_h)(struct hnae3_handle *, int , u8 ) ;
   void (*get_media_type)(struct hnae3_handle *, u8 *, u8 *) ;
   int (*check_port_speed)(struct hnae3_handle *, u32 ) ;
   void (*get_fec)(struct hnae3_handle *, u8 *, u8 *) ;
   int (*set_fec)(struct hnae3_handle *, u32 ) ;
   void (*adjust_link)(struct hnae3_handle *, int , int ) ;
   int (*set_loopback)(struct hnae3_handle *, enum hnae3_loop , bool ) ;
   int (*set_promisc_mode)(struct hnae3_handle *, bool , bool ) ;
   int (*set_mtu)(struct hnae3_handle *, int ) ;
   void (*get_pauseparam)(struct hnae3_handle *, u32 *, u32 *, u32 *) ;
   int (*set_pauseparam)(struct hnae3_handle *, u32 , u32 , u32 ) ;
   int (*set_autoneg)(struct hnae3_handle *, bool ) ;
   int (*get_autoneg)(struct hnae3_handle *) ;
   int (*restart_autoneg)(struct hnae3_handle *) ;
   int (*halt_autoneg)(struct hnae3_handle *, bool ) ;
   void (*get_coalesce_usecs)(struct hnae3_handle *, u32 *, u32 *) ;
   void (*get_rx_max_coalesced_frames)(struct hnae3_handle *, u32 *, u32 *) ;
   int (*set_coalesce_usecs)(struct hnae3_handle *, u32 ) ;
   int (*set_coalesce_frames)(struct hnae3_handle *, u32 ) ;
   void (*get_coalesce_range)(struct hnae3_handle *, u32 *, u32 *, u32 *, u32 *, u32 *, u32 *, u32 *, u32 *) ;
   void (*get_mac_addr)(struct hnae3_handle *, u8 *) ;
   int (*set_mac_addr)(struct hnae3_handle *, void *, bool ) ;
   int (*do_ioctl)(struct hnae3_handle *, struct ifreq *, int ) ;
   int (*add_uc_addr)(struct hnae3_handle *, unsigned char *) ;
   int (*rm_uc_addr)(struct hnae3_handle *, unsigned char *) ;
   int (*set_mc_addr)(struct hnae3_handle *, void *) ;
   int (*add_mc_addr)(struct hnae3_handle *, unsigned char *) ;
   int (*rm_mc_addr)(struct hnae3_handle *, unsigned char *) ;
   void (*set_tso_stats)(struct hnae3_handle *, int ) ;
   void (*update_stats)(struct hnae3_handle *, struct net_device_stats *) ;
   void (*get_stats)(struct hnae3_handle *, u64 *) ;
   void (*get_mac_stats)(struct hnae3_handle *, struct hns3_mac_stats *) ;
   void (*get_strings)(struct hnae3_handle *, u32 , u8 *) ;
   int (*get_sset_count)(struct hnae3_handle *, int ) ;
   void (*get_regs)(struct hnae3_handle *, u32 *, void *) ;
   int (*get_regs_len)(struct hnae3_handle *) ;
   u32 (*get_rss_key_size)(struct hnae3_handle *) ;
   u32 (*get_rss_indir_size)(struct hnae3_handle *) ;
   int (*get_rss)(struct hnae3_handle *, u32 *, u8 *, u8 *) ;
   int (*set_rss)(struct hnae3_handle *, u32 *, u8 *, u8 ) ;
   int (*set_rss_tuple)(struct hnae3_handle *, struct ethtool_rxnfc *) ;
   int (*get_rss_tuple)(struct hnae3_handle *, struct ethtool_rxnfc *) ;
   int (*get_tc_size)(struct hnae3_handle *) ;
   int (*get_vector)(struct hnae3_handle *, u16 , struct hnae3_vector_info *) ;
   int (*put_vector)(struct hnae3_handle *, int ) ;
   int (*map_ring_to_vector)(struct hnae3_handle *, int , struct hnae3_ring_chain_node *) ;
   int (*unmap_ring_from_vector)(struct hnae3_handle *, int , struct hnae3_ring_chain_node *) ;
   int (*reset_queue)(struct hnae3_handle *, u16 ) ;
   u32 (*get_fw_version)(struct hnae3_handle *) ;
   void (*get_mdix_mode)(struct hnae3_handle *, u8 *, u8 *) ;
   void (*enable_vlan_filter)(struct hnae3_handle *, bool ) ;
   int (*set_vlan_filter)(struct hnae3_handle *, __be16 , u16 , bool ) ;
   int (*set_vf_vlan_filter)(struct hnae3_handle *, int , u16 , u8 , __be16 ) ;
   int (*enable_hw_strip_rxvtag)(struct hnae3_handle *, bool ) ;
   void (*reset_event)(struct pci_dev *, struct hnae3_handle *) ;
   enum hnae3_reset_type (*get_reset_level)(struct hnae3_ae_dev *, unsigned long *) ;
   void (*set_default_reset_request)(struct hnae3_ae_dev *, enum hnae3_reset_type ) ;
   void (*get_channels)(struct hnae3_handle *, struct ethtool_channels *) ;
   void (*get_tqps_and_rss_info)(struct hnae3_handle *, u16 *, u16 *) ;
   int (*set_channels)(struct hnae3_handle *, u32 , bool ) ;
   void (*get_flowctrl_adv)(struct hnae3_handle *, u32 *) ;
   int (*set_led_id)(struct hnae3_handle *, enum ethtool_phys_id_state ) ;
   void (*get_link_mode)(struct hnae3_handle *, unsigned long *, unsigned long *) ;
   int (*add_fd_entry)(struct hnae3_handle *, struct ethtool_rxnfc *) ;
   int (*del_fd_entry)(struct hnae3_handle *, struct ethtool_rxnfc *) ;
   void (*del_all_fd_entries)(struct hnae3_handle *, bool ) ;
   int (*get_fd_rule_cnt)(struct hnae3_handle *, struct ethtool_rxnfc *) ;
   int (*get_fd_rule_info)(struct hnae3_handle *, struct ethtool_rxnfc *) ;
   int (*get_fd_all_rules)(struct hnae3_handle *, struct ethtool_rxnfc *, u32 *) ;
   int (*restore_fd_rules)(struct hnae3_handle *) ;
   void (*enable_fd)(struct hnae3_handle *, bool ) ;
   int (*add_arfs_entry)(struct hnae3_handle *, u16 , u16 , struct flow_keys *) ;
   int (*dbg_run_cmd)(struct hnae3_handle *, char *) ;
   pci_ers_result_t (*handle_hw_ras_error)(struct hnae3_ae_dev *) ;
   bool (*get_hw_reset_stat)(struct hnae3_handle *) ;
   bool (*ae_dev_resetting)(struct hnae3_handle *) ;
   unsigned long (*ae_dev_reset_cnt)(struct hnae3_handle *) ;
   int (*set_gro_en)(struct hnae3_handle *, bool ) ;
   u16 (*get_global_queue_id)(struct hnae3_handle *, u16 ) ;
   void (*set_timer_task)(struct hnae3_handle *, bool ) ;
   int (*mac_connect_phy)(struct hnae3_handle *) ;
   void (*mac_disconnect_phy)(struct hnae3_handle *) ;
   void (*restore_vlan_table)(struct hnae3_handle *) ;
   int (*get_vf_config)(struct hnae3_handle *, int , struct ifla_vf_info *) ;
   int (*set_vf_link_state)(struct hnae3_handle *, int , int ) ;
   int (*set_vf_spoofchk)(struct hnae3_handle *, int , bool ) ;
   int (*set_vf_trust)(struct hnae3_handle *, int , bool ) ;
   int (*set_vf_rate)(struct hnae3_handle *, int , int , int , bool ) ;
   int (*set_vf_mac)(struct hnae3_handle *, int , u8 *) ;
};
#line 558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_dcb_ops {
   int (*ieee_getets)(struct hnae3_handle *, struct ieee_ets *) ;
   int (*ieee_setets)(struct hnae3_handle *, struct ieee_ets *) ;
   int (*ieee_getpfc)(struct hnae3_handle *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct hnae3_handle *, struct ieee_pfc *) ;
   u8 (*getdcbx)(struct hnae3_handle *) ;
   u8 (*setdcbx)(struct hnae3_handle *, u8 ) ;
   int (*setup_tc)(struct hnae3_handle *, u8 , u8 *) ;
};
#line 572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_ae_algo {
   struct hnae3_ae_ops *ops ;
   struct list_head node ;
   struct pci_device_id *pdev_id_table ;
};
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_tc_info {
   u16 tqp_offset ;
   u16 tqp_count ;
   u8 tc ;
   bool enable ;
};
#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_knic_private_info {
   struct net_device *netdev ;
   u16 rss_size ;
   u16 req_rss_size ;
   u16 rx_buf_len ;
   u16 num_tx_desc ;
   u16 num_rx_desc ;
   u8 num_tc ;
   u8 prio_tc[8U] ;
   struct hnae3_tc_info tc_info[8U] ;
   u16 num_tqps ;
   struct hnae3_queue **tqp ;
   struct hnae3_dcb_ops *dcb_ops ;
   u16 int_rl_setting ;
   enum pkt_hash_types rss_type ;
};
#line 611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_roce_private_info {
   struct net_device *netdev ;
   void *roce_io_base ;
   int base_vector ;
   int num_vectors ;
   unsigned long reset_state ;
   unsigned long instance_state ;
   unsigned long state ;
};
#line 626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_unic_private_info {
   struct net_device *netdev ;
   u16 rx_buf_len ;
   u16 num_tx_desc ;
   u16 num_rx_desc ;
   u16 num_tqps ;
   struct hnae3_queue **tqp ;
};
#line 651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
union __anonunion_720 {
   struct net_device *netdev ;
   struct hnae3_knic_private_info kinfo ;
   struct hnae3_unic_private_info uinfo ;
   struct hnae3_roce_private_info rinfo ;
};
#line 651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_handle {
   struct hnae3_client *client ;
   struct pci_dev *pdev ;
   void *priv ;
   struct hnae3_ae_algo *ae_algo ;
   u64 flags ;
   union __anonunion_720 __anonCompField_hnae3_handle_167 ;
   u32 numa_node_mask ;
   enum hnae3_port_base_vlan_state port_base_vlan_state ;
   u8 netdev_flags ;
   struct dentry *hnae3_dbgfs ;
   u32 msg_enable ;
};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_mac {
   u8 phy_addr ;
   u8 flag ;
   u8 media_type ;
   u8 mac_addr[6U] ;
   u8 autoneg ;
   u8 duplex ;
   u8 support_autoneg ;
   u8 speed_type ;
   u32 speed ;
   u32 max_speed ;
   u32 speed_ability ;
   u32 module_type ;
   u32 fec_mode ;
   u32 user_fec_mode ;
   u32 fec_ability ;
   int link ;
   struct phy_device *phydev ;
   struct mii_bus *mdio_bus ;
   phy_interface_t phy_if ;
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_hw {
   void *io_base ;
   struct hclge_mac mac ;
   int num_vec ;
   struct hclge_cmq cmq ;
};
#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hlcge_tqp_stats {
   u64 rcb_tx_ring_pktnum_rcd ;
   u64 rcb_rx_ring_pktnum_rcd ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_tqp {
   struct device *dev ;
   struct hnae3_queue q ;
   struct hlcge_tqp_stats tqp_stats ;
   u16 index ;
   bool alloced ;
};
#line 298 
enum hclge_fc_mode {
    HCLGE_FC_NONE = 0,
    HCLGE_FC_RX_PAUSE = 1,
    HCLGE_FC_TX_PAUSE = 2,
    HCLGE_FC_FULL = 3,
    HCLGE_FC_PFC = 4,
    HCLGE_FC_DEFAULT = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_pg_info {
   u8 pg_id ;
   u8 pg_sch_mode ;
   u8 tc_bit_map ;
   u32 bw_limit ;
   u8 tc_dwrr[8U] ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_tc_info {
   u8 tc_id ;
   u8 tc_sch_mode ;
   u8 pgid ;
   u32 bw_limit ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_tm_info {
   u8 num_tc ;
   u8 num_pg ;
   u8 pg_dwrr[4U] ;
   u8 prio_tc[8U] ;
   struct hclge_pg_info pg_info[4U] ;
   struct hclge_tc_info tc_info[8U] ;
   enum hclge_fc_mode fc_mode ;
   u8 hw_pfc_map ;
   u8 pfc_en ;
};
#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_mac_stats {
   u64 mac_tx_mac_pause_num ;
   u64 mac_rx_mac_pause_num ;
   u64 mac_tx_pfc_pri0_pkt_num ;
   u64 mac_tx_pfc_pri1_pkt_num ;
   u64 mac_tx_pfc_pri2_pkt_num ;
   u64 mac_tx_pfc_pri3_pkt_num ;
   u64 mac_tx_pfc_pri4_pkt_num ;
   u64 mac_tx_pfc_pri5_pkt_num ;
   u64 mac_tx_pfc_pri6_pkt_num ;
   u64 mac_tx_pfc_pri7_pkt_num ;
   u64 mac_rx_pfc_pri0_pkt_num ;
   u64 mac_rx_pfc_pri1_pkt_num ;
   u64 mac_rx_pfc_pri2_pkt_num ;
   u64 mac_rx_pfc_pri3_pkt_num ;
   u64 mac_rx_pfc_pri4_pkt_num ;
   u64 mac_rx_pfc_pri5_pkt_num ;
   u64 mac_rx_pfc_pri6_pkt_num ;
   u64 mac_rx_pfc_pri7_pkt_num ;
   u64 mac_tx_total_pkt_num ;
   u64 mac_tx_total_oct_num ;
   u64 mac_tx_good_pkt_num ;
   u64 mac_tx_bad_pkt_num ;
   u64 mac_tx_good_oct_num ;
   u64 mac_tx_bad_oct_num ;
   u64 mac_tx_uni_pkt_num ;
   u64 mac_tx_multi_pkt_num ;
   u64 mac_tx_broad_pkt_num ;
   u64 mac_tx_undersize_pkt_num ;
   u64 mac_tx_oversize_pkt_num ;
   u64 mac_tx_64_oct_pkt_num ;
   u64 mac_tx_65_127_oct_pkt_num ;
   u64 mac_tx_128_255_oct_pkt_num ;
   u64 mac_tx_256_511_oct_pkt_num ;
   u64 mac_tx_512_1023_oct_pkt_num ;
   u64 mac_tx_1024_1518_oct_pkt_num ;
   u64 mac_tx_1519_2047_oct_pkt_num ;
   u64 mac_tx_2048_4095_oct_pkt_num ;
   u64 mac_tx_4096_8191_oct_pkt_num ;
   u64 rsv0 ;
   u64 mac_tx_8192_9216_oct_pkt_num ;
   u64 mac_tx_9217_12287_oct_pkt_num ;
   u64 mac_tx_12288_16383_oct_pkt_num ;
   u64 mac_tx_1519_max_good_oct_pkt_num ;
   u64 mac_tx_1519_max_bad_oct_pkt_num ;
   u64 mac_rx_total_pkt_num ;
   u64 mac_rx_total_oct_num ;
   u64 mac_rx_good_pkt_num ;
   u64 mac_rx_bad_pkt_num ;
   u64 mac_rx_good_oct_num ;
   u64 mac_rx_bad_oct_num ;
   u64 mac_rx_uni_pkt_num ;
   u64 mac_rx_multi_pkt_num ;
   u64 mac_rx_broad_pkt_num ;
   u64 mac_rx_undersize_pkt_num ;
   u64 mac_rx_oversize_pkt_num ;
   u64 mac_rx_64_oct_pkt_num ;
   u64 mac_rx_65_127_oct_pkt_num ;
   u64 mac_rx_128_255_oct_pkt_num ;
   u64 mac_rx_256_511_oct_pkt_num ;
   u64 mac_rx_512_1023_oct_pkt_num ;
   u64 mac_rx_1024_1518_oct_pkt_num ;
   u64 mac_rx_1519_2047_oct_pkt_num ;
   u64 mac_rx_2048_4095_oct_pkt_num ;
   u64 mac_rx_4096_8191_oct_pkt_num ;
   u64 rsv1 ;
   u64 mac_rx_8192_9216_oct_pkt_num ;
   u64 mac_rx_9217_12287_oct_pkt_num ;
   u64 mac_rx_12288_16383_oct_pkt_num ;
   u64 mac_rx_1519_max_good_oct_pkt_num ;
   u64 mac_rx_1519_max_bad_oct_pkt_num ;
   u64 mac_tx_fragment_pkt_num ;
   u64 mac_tx_undermin_pkt_num ;
   u64 mac_tx_jabber_pkt_num ;
   u64 mac_tx_err_all_pkt_num ;
   u64 mac_tx_from_app_good_pkt_num ;
   u64 mac_tx_from_app_bad_pkt_num ;
   u64 mac_rx_fragment_pkt_num ;
   u64 mac_rx_undermin_pkt_num ;
   u64 mac_rx_jabber_pkt_num ;
   u64 mac_rx_fcs_err_pkt_num ;
   u64 mac_rx_send_app_good_pkt_num ;
   u64 mac_rx_send_app_bad_pkt_num ;
   u64 mac_tx_pfc_pause_pkt_num ;
   u64 mac_rx_pfc_pause_pkt_num ;
   u64 mac_tx_ctrl_pkt_num ;
   u64 mac_rx_ctrl_pkt_num ;
};
#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_hw_stats {
   struct hclge_mac_stats mac_stats ;
   u32 stats_timer ;
};
#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_vlan_type_cfg {
   u16 rx_ot_fst_vlan_type ;
   u16 rx_ot_sec_vlan_type ;
   u16 rx_in_fst_vlan_type ;
   u16 rx_in_sec_vlan_type ;
   u16 tx_ot_vlan_type ;
   u16 tx_in_vlan_type ;
};
#line 544 
enum HCLGE_FD_ACTIVE_RULE_TYPE {
    HCLGE_FD_RULE_NONE = 0,
    HCLGE_FD_ARFS_ACTIVE = 1,
    HCLGE_FD_EP_ACTIVE = 2
};
#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_fd_key_cfg {
   u8 key_sel ;
   u8 inner_sipv6_word_en ;
   u8 inner_dipv6_word_en ;
   u8 outer_sipv6_word_en ;
   u8 outer_dipv6_word_en ;
   u32 tuple_active ;
   u32 meta_data_active ;
};
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_fd_cfg {
   u8 fd_mode ;
   u16 max_key_length ;
   u32 proto_support ;
   u32 rule_num[2U] ;
   u16 cnt_num[2U] ;
   struct hclge_fd_key_cfg key_cfg[2U] ;
};
#line 651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_rst_stats {
   u32 reset_done_cnt ;
   u32 hw_reset_done_cnt ;
   u32 pf_rst_cnt ;
   u32 flr_rst_cnt ;
   u32 global_rst_cnt ;
   u32 imp_rst_cnt ;
   u32 reset_cnt ;
   u32 reset_fail_cnt ;
};
#line 663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_mac_tnl_stats {
   u64 time ;
   u32 status ;
};
#line 710 
struct hclge_vport;
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
union __anonunion_722 {
   struct __kfifo kfifo ;
   struct hclge_mac_tnl_stats *type ;
   struct hclge_mac_tnl_stats *const_type ;
   char (*rectype)[0U] ;
   struct hclge_mac_tnl_stats *ptr ;
   struct hclge_mac_tnl_stats *ptr_const ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct __anonstruct_mac_tnl_log_721 {
   union __anonunion_722 __anonCompField___anonstruct_mac_tnl_log_721_168 ;
   struct hclge_mac_tnl_stats buf[8U] ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_dev {
   struct pci_dev *pdev ;
   struct hnae3_ae_dev *ae_dev ;
   struct hclge_hw hw ;
   struct hclge_misc_vector misc_vector ;
   struct hclge_hw_stats hw_stats ;
   unsigned long state ;
   unsigned long flr_state ;
   unsigned long last_reset_time ;
   enum hnae3_reset_type reset_type ;
   enum hnae3_reset_type reset_level ;
   unsigned long default_reset_request ;
   unsigned long reset_request ;
   unsigned long reset_pending ;
   struct hclge_rst_stats rst_stats ;
   u32 fw_version ;
   u16 num_vmdq_vport ;
   u16 num_tqps ;
   u16 num_req_vfs ;
   u16 base_tqp_pid ;
   u16 alloc_rss_size ;
   u16 rss_size_max ;
   u16 fdir_pf_filter_count ;
   u16 num_alloc_vport ;
   u32 numa_node_mask ;
   u16 rx_buf_len ;
   u16 num_tx_desc ;
   u16 num_rx_desc ;
   u8 hw_tc_map ;
   u8 tc_num_last_time ;
   enum hclge_fc_mode fc_mode_last_time ;
   u8 support_sfp_query ;
   u8 tx_sch_mode ;
   u8 tc_max ;
   u8 pfc_max ;
   u8 default_up ;
   u8 dcbx_cap ;
   struct hclge_tm_info tm_info ;
   u16 num_msi ;
   u16 num_msi_left ;
   u16 num_msi_used ;
   u16 roce_base_msix_offset ;
   u32 base_msi_vector ;
   u16 *vector_status ;
   int *vector_irq ;
   u16 num_nic_msi ;
   u16 num_roce_msi ;
   int roce_base_vector ;
   u16 pending_udp_bitmap ;
   u16 rx_itr_default ;
   u16 tx_itr_default ;
   u16 adminq_work_limit ;
   unsigned long service_timer_period ;
   unsigned long service_timer_previous ;
   struct timer_list reset_timer ;
   struct delayed_work service_task ;
   struct work_struct rst_service_task ;
   struct work_struct mbx_service_task ;
   bool cur_promisc ;
   int num_alloc_vfs ;
   struct hclge_tqp *htqp ;
   struct hclge_vport *vport ;
   struct dentry *hclge_dbgfs ;
   struct hnae3_client *nic_client ;
   struct hnae3_client *roce_client ;
   u32 flag ;
   u32 pkt_buf_size ;
   u32 tx_buf_size ;
   u32 dv_buf_size ;
   u32 mps ;
   struct mutex vport_lock ;
   struct hclge_vlan_type_cfg vlan_type_cfg ;
   unsigned long vlan_table[4096U][4U] ;
   unsigned long vf_vlan_full[4U] ;
   struct hclge_fd_cfg fd_cfg ;
   struct hlist_head fd_rule_list ;
   spinlock_t fd_rule_lock ;
   u16 hclge_fd_rule_num ;
   u16 fd_arfs_expire_timer ;
   unsigned long fd_bmap[64U] ;
   enum HCLGE_FD_ACTIVE_RULE_TYPE fd_active_type ;
   u8 fd_en ;
   u16 wanted_umv_size ;
   u16 max_umv_size ;
   u16 priv_umv_size ;
   u16 share_umv_size ;
   struct mutex umv_mutex ;
   struct mutex vport_cfg_mutex ;
   struct __anonstruct_mac_tnl_log_721 mac_tnl_log ;
   cpumask_t affinity_mask ;
   struct irq_affinity_notify affinity_notify ;
};
#line 839  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_tx_vtag_cfg {
   bool accept_tag1 ;
   bool accept_untag1 ;
   bool accept_tag2 ;
   bool accept_untag2 ;
   bool insert_tag1_en ;
   bool insert_tag2_en ;
   u16 default_tag1 ;
   u16 default_tag2 ;
};
#line 851  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_rx_vtag_cfg {
   u8 rx_vlan_offload_en ;
   u8 strip_tag1_en ;
   u8 strip_tag2_en ;
   u8 vlan1_vlan_prionly ;
   u8 vlan2_vlan_prionly ;
};
#line 859  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_rss_tuple_cfg {
   u8 ipv4_tcp_en ;
   u8 ipv4_udp_en ;
   u8 ipv4_sctp_en ;
   u8 ipv4_fragment_en ;
   u8 ipv6_tcp_en ;
   u8 ipv6_udp_en ;
   u8 ipv6_sctp_en ;
   u8 ipv6_fragment_en ;
};
#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_vlan_info {
   u16 vlan_proto ;
   u16 qos ;
   u16 vlan_tag ;
};
#line 881  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_port_base_vlan_config {
   u16 state ;
   struct hclge_vlan_info vlan_info ;
};
#line 886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_vf_info {
   int link_state ;
   u8 mac[6U] ;
   u32 spoofchk ;
   u32 max_tx_rate ;
   u32 trusted ;
   u16 promisc_enable ;
};
#line 895  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_vport {
   u16 alloc_tqps ;
   u8 rss_hash_key[40U] ;
   u8 rss_indirection_tbl[512U] ;
   int rss_algo ;
   struct hclge_rss_tuple_cfg rss_tuple_sets ;
   u16 alloc_rss_size ;
   u16 qs_offset ;
   u32 bw_limit ;
   u8 dwrr ;
   unsigned long vlan_del_fail_bmap[64U] ;
   struct hclge_port_base_vlan_config port_base_vlan_cfg ;
   struct hclge_tx_vtag_cfg txvlan_cfg ;
   struct hclge_rx_vtag_cfg rxvlan_cfg ;
   u16 used_umv_num ;
   u16 vport_id ;
   struct hclge_dev *back ;
   struct hnae3_handle nic ;
   struct hnae3_handle roce ;
   unsigned long state ;
   unsigned long last_active_jiffies ;
   u32 mps ;
   struct hclge_vf_info vf_info ;
   struct list_head uc_mac_list ;
   struct list_head mc_mac_list ;
   struct list_head vlan_list ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
struct hclge_pg_to_pri_link_cmd {
   u8 pg_id ;
   u8 rsvd1[3U] ;
   u8 pri_bit_map ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
struct hclge_qs_to_pri_link_cmd {
   __le16 qs_id ;
   __le16 rsvd ;
   u8 priority ;
   u8 link_vld ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
struct hclge_nq_to_qs_link_cmd {
   __le16 nq_id ;
   __le16 rsvd ;
   __le16 qset_id ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
struct hclge_pg_weight_cmd {
   u8 pg_id ;
   u8 dwrr ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
struct hclge_priority_weight_cmd {
   u8 pri_id ;
   u8 dwrr ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
struct hclge_qs_weight_cmd {
   __le16 qs_id ;
   u8 dwrr ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
struct hclge_ets_tc_weight_cmd {
   u8 tc_weight[8U] ;
   u8 weight_offset ;
   u8 rsvd[15U] ;
};
#line 70 
enum hclge_shap_bucket {
    HCLGE_TM_SHAP_C_BUCKET = 0,
    HCLGE_TM_SHAP_P_BUCKET = 1
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
struct hclge_pri_shapping_cmd {
   u8 pri_id ;
   u8 rsvd[3U] ;
   __le32 pri_shapping_para ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
struct hclge_pg_shapping_cmd {
   u8 pg_id ;
   u8 rsvd[3U] ;
   __le32 pg_shapping_para ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
struct hclge_qs_shapping_cmd {
   __le16 qs_id ;
   u8 rsvd[2U] ;
   __le32 qs_shapping_para ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
struct hclge_bp_to_qs_map_cmd {
   u8 tc_id ;
   u8 rsvd[2U] ;
   u8 qs_group_id ;
   __le32 qs_bit_map ;
   u32 rsvd1 ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
struct hclge_pfc_en_cmd {
   u8 tx_rx_en_bitmap ;
   u8 pri_en_bitmap ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
struct hclge_cfg_pause_param_cmd {
   u8 mac_addr[6U] ;
   u8 pause_trans_gap ;
   u8 rsvd ;
   __le16 pause_trans_time ;
   u8 rsvd1[6U] ;
   u8 mac_addr_extra[6U] ;
   u16 rsvd2 ;
};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
struct hclge_pfc_stats_cmd {
   __le64 pkt_num[3U] ;
};
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
struct hclge_port_shapping_cmd {
   __le32 port_shapping_para ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_731 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_731 key ;
} __attribute__((__aligned__(8)));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 1059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_query_ppu_pf_other_int_dfx_cmd {
   __le16 over_8bd_no_fe_qid ;
   __le16 over_8bd_no_fe_vf_id ;
   __le16 tso_mss_cmp_min_err_qid ;
   __le16 tso_mss_cmp_min_err_vf_id ;
   __le16 tso_mss_cmp_max_err_qid ;
   __le16 tso_mss_cmp_max_err_vf_id ;
   __le16 tx_rd_fbd_poison_qid ;
   __le16 tx_rd_fbd_poison_vf_id ;
   __le16 rx_rd_fbd_poison_qid ;
   __le16 rx_rd_fbd_poison_vf_id ;
   u8 rsv[4U] ;
};
#line 1093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
union __anonunion___u_2150 {
   u8 *__val ;
   char __c[1U] ;
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.h"
struct hclge_hw_blk {
   u32 msk ;
   char *name ;
   int (*config_err_int)(struct hclge_dev *, bool ) ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.h"
struct hclge_hw_error {
   u32 int_msk ;
   char *msg ;
   enum hnae3_reset_type reset_level ;
};
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
union __anonunion_2168 {
   struct __kfifo kfifo ;
   struct hclge_mac_tnl_stats *type ;
   struct hclge_mac_tnl_stats *const_type ;
   char (*rectype)[0U] ;
   struct hclge_mac_tnl_stats *ptr ;
   struct hclge_mac_tnl_stats *ptr_const ;
};
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct __anonstruct___tmp_2167 {
   union __anonunion_2168 __anonCompField___anonstruct___tmp_2167_169 ;
   struct hclge_mac_tnl_stats buf[8U] ;
};
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
union __anonunion_2170 {
   struct __kfifo kfifo ;
   struct hclge_mac_tnl_stats *type ;
   struct hclge_mac_tnl_stats *const_type ;
   char (*rectype)[0U] ;
   struct hclge_mac_tnl_stats *ptr ;
   struct hclge_mac_tnl_stats *ptr_const ;
};
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct __anonstruct___tmpq_2169 {
   union __anonunion_2170 __anonCompField___anonstruct___tmpq_2169_170 ;
   struct hclge_mac_tnl_stats buf[8U] ;
};
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
union __anonunion_2172 {
   struct __kfifo kfifo ;
   struct hclge_mac_tnl_stats *type ;
   struct hclge_mac_tnl_stats *const_type ;
   char (*rectype)[0U] ;
   struct hclge_mac_tnl_stats *ptr ;
   struct hclge_mac_tnl_stats *ptr_const ;
};
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct __anonstruct___tmpl_2171 {
   union __anonunion_2172 __anonCompField___anonstruct___tmpl_2171_171 ;
   struct hclge_mac_tnl_stats buf[8U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 1093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
union __anonunion___u_2881 {
   u8 *__val ;
   char __c[1U] ;
};
#line 639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
enum HCLGE_MAC_ADDR_TYPE {
    HCLGE_MAC_ADDR_UC = 0,
    HCLGE_MAC_ADDR_MC = 1
};
#line 672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_vf_vlan_cfg {
   u8 mbx_cmd ;
   u8 subcode ;
   u8 is_kill ;
   u16 vlan ;
   u16 proto ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hclge_mbx.h"
struct hclge_mbx_vf_to_pf_cmd {
   u8 rsv ;
   u8 mbx_src_vfid ;
   u8 mbx_need_resp ;
   u8 rsv1[1U] ;
   u8 msg_len ;
   u8 rsv2[3U] ;
   u8 msg[16U] ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hclge_mbx.h"
struct hclge_mbx_pf_to_vf_cmd {
   u8 dest_vfid ;
   u8 rsv[3U] ;
   u8 msg_len ;
   u8 rsv1[3U] ;
   u16 msg[8U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2910 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2912 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2918 {
   struct hlist_node *__val ;
   char __c[1U] ;
};
#line 788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2920 {
   struct hlist_node *__val ;
   char __c[1U] ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irq_affinity {
   unsigned int pre_vectors ;
   unsigned int post_vectors ;
   unsigned int nr_sets ;
   unsigned int set_size[4U] ;
   void (*calc_sets)(struct irq_affinity *, unsigned int ) ;
   void *priv ;
};
#line 747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct fs_pin;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid_namespace.h"
struct pid_namespace {
   struct kref kref ;
   struct idr idr ;
   struct callback_head rcu ;
   unsigned int pid_allocated ;
   struct task_struct *child_reaper ;
   struct kmem_cache *pid_cachep ;
   unsigned int level ;
   struct pid_namespace *parent ;
   struct vfsmount *proc_mnt ;
   struct dentry *proc_self ;
   struct dentry *proc_thread_self ;
   struct fs_pin *bacct ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct work_struct proc_work ;
   kgid_t pid_gid ;
   int hide_pid ;
   int reboot ;
   struct ns_common ns ;
} __attribute__((__designated_init__));
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_3622 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_3621 {
   void *validation_data ;
   struct __anonstruct_3622 __anonCompField___anonunion_3621_166 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_3621 __anonCompField_nla_policy_167 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_tqp_map_cmd {
   __le16 tqp_id ;
   u8 tqp_vf ;
   u8 tqp_flag ;
   __le16 tqp_vid ;
   u8 rsv[18U] ;
};
#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_ctrl_vector_chain_cmd {
   u8 int_vector_id ;
   u8 int_cause_num ;
   __le16 tqp_type_and_id[10U] ;
   u8 vfid ;
   u8 rsv ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_tx_buff_alloc_cmd {
   __le16 tx_pkt_buff[8U] ;
   u8 tx_buff_rsv[8U] ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_rx_priv_buff_cmd {
   __le16 buf_num[8U] ;
   __le16 shared_buf ;
   u8 rsv[6U] ;
};
#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_priv_wl {
   __le16 high ;
   __le16 low ;
};
#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_rx_priv_wl_buf {
   struct hclge_priv_wl tc_wl[4U] ;
};
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_rx_com_thrd {
   struct hclge_priv_wl com_thrd[4U] ;
};
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_rx_com_wl {
   struct hclge_priv_wl com_wl ;
};
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_waterline {
   u32 low ;
   u32 high ;
};
#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_tc_thrd {
   u32 low ;
   u32 high ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_priv_buf {
   struct hclge_waterline wl ;
   u32 buf_size ;
   u32 tx_buf_size ;
   u32 enable ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_shared_buf {
   struct hclge_waterline self ;
   struct hclge_tc_thrd tc_thrd[8U] ;
   u32 buf_size ;
};
#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_pkt_buf_alloc {
   struct hclge_priv_buf priv_buf[8U] ;
   struct hclge_shared_buf s_buf ;
};
#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_func_status_cmd {
   __le32 vf_rst_state[4U] ;
   u8 pf_state ;
   u8 mac_id ;
   u8 rsv1 ;
   u8 pf_cnt_in_mac ;
   u8 pf_num ;
   u8 vf_num ;
   u8 rsv[2U] ;
};
#line 447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_pf_res_cmd {
   __le16 tqp_num ;
   __le16 buf_size ;
   __le16 msixcap_localid_ba_nic ;
   __le16 msixcap_localid_ba_rocee ;
   __le16 pf_intr_vector_number ;
   __le16 pf_own_fun_number ;
   __le16 tx_buf_size ;
   __le16 dv_buf_size ;
   __le32 rsv[2U] ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_cfg_param_cmd {
   __le32 offset ;
   __le32 rsv ;
   __le32 param[4U] ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_rss_config_cmd {
   u8 hash_config ;
   u8 rsv[7U] ;
   u8 hash_key[16U] ;
};
#line 519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_rss_input_tuple_cmd {
   u8 ipv4_tcp_en ;
   u8 ipv4_udp_en ;
   u8 ipv4_sctp_en ;
   u8 ipv4_fragment_en ;
   u8 ipv6_tcp_en ;
   u8 ipv6_udp_en ;
   u8 ipv6_sctp_en ;
   u8 ipv6_fragment_en ;
   u8 rsv[16U] ;
};
#line 533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_rss_indirection_table_cmd {
   __le16 start_table_index ;
   __le16 rss_set_bitmap ;
   u8 rsv[4U] ;
   u8 rss_result[16U] ;
};
#line 545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_rss_tc_mode_cmd {
   __le16 rss_tc_mode[8U] ;
   u8 rsv[8U] ;
};
#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_link_status_cmd {
   u8 status ;
   u8 rsv[23U] ;
};
#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_promisc_param {
   u8 vf_id ;
   u8 enable ;
};
#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_promisc_cfg_cmd {
   u8 flag ;
   u8 vf_id ;
   __le16 rsv0 ;
   u8 rsv1[20U] ;
};
#line 597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_config_mac_mode_cmd {
   __le32 txrx_pad_fcs_loop_en ;
   u8 rsv[20U] ;
};
#line 602  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_pf_rst_sync_cmd {
   u8 all_vf_ready ;
   u8 rsv[23U] ;
};
#line 614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_config_mac_speed_dup_cmd {
   u8 speed_dup ;
   u8 mac_change_fec_en ;
   u8 rsv[22U] ;
};
#line 633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_config_auto_neg_cmd {
   __le32 cfg_an_cmd_flag ;
   u8 rsv[20U] ;
};
#line 638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_sfp_info_cmd {
   __le32 speed ;
   u8 query_type ;
   u8 active_fec ;
   u8 autoneg ;
   u8 autoneg_ability ;
   __le32 speed_ability ;
   __le32 module_type ;
   u8 rsv[8U] ;
};
#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_config_fec_cmd {
   u8 fec_mode ;
   u8 default_config ;
   u8 rsv[22U] ;
};
#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_config_max_frm_size_cmd {
   __le16 max_frm_size ;
   u8 min_frm_size ;
   u8 rsv[21U] ;
};
#line 671 
enum hclge_mac_vlan_tbl_opcode {
    HCLGE_MAC_VLAN_ADD = 0,
    HCLGE_MAC_VLAN_UPDATE = 1,
    HCLGE_MAC_VLAN_REMOVE = 2,
    HCLGE_MAC_VLAN_LKUP = 3
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_mac_vlan_tbl_entry_cmd {
   u8 flags ;
   u8 resp_code ;
   __le16 vlan_tag ;
   __le32 mac_addr_hi32 ;
   __le16 mac_addr_lo16 ;
   __le16 rsv1 ;
   u8 entry_type ;
   u8 mc_mac_en ;
   __le16 egress_port ;
   __le16 egress_queue ;
   u8 rsv2[6U] ;
};
#line 707  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_umv_spc_alc_cmd {
   u8 allocate ;
   u8 rsv1[3U] ;
   __le32 space_size ;
   u8 rsv2[16U] ;
};
#line 718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_mac_mgr_tbl_entry_cmd {
   u8 flags ;
   u8 resp_code ;
   __le16 vlan_tag ;
   u8 mac_addr[6U] ;
   __le16 rsv1 ;
   __le16 ethter_type ;
   __le16 egress_port ;
   __le16 egress_queue ;
   u8 sw_port_id_aware ;
   u8 rsv2 ;
   u8 i_port_bitmap ;
   u8 i_port_direction ;
   u8 rsv3[2U] ;
};
#line 759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_vlan_filter_ctrl_cmd {
   u8 vlan_type ;
   u8 vlan_fe ;
   u8 rsv1[2U] ;
   u8 vf_id ;
   u8 rsv2[19U] ;
};
#line 772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_vlan_filter_pf_cfg_cmd {
   u8 vlan_offset ;
   u8 vlan_cfg ;
   u8 rsv[2U] ;
   u8 vlan_offset_bitmap[20U] ;
};
#line 781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_vlan_filter_vf_cfg_cmd {
   __le16 vlan_id ;
   u8 resp_code ;
   u8 rsv ;
   u8 vlan_cfg ;
   u8 rsv1[3U] ;
   u8 vf_bitmap[16U] ;
};
#line 800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_mac_vlan_switch_cmd {
   u8 roce_sel ;
   u8 rsv1[3U] ;
   __le32 func_id ;
   u8 switch_param ;
   u8 rsv2[3U] ;
   u8 param_mask ;
   u8 rsv3[11U] ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_vport_vtag_tx_cfg_cmd {
   u8 vport_vlan_cfg ;
   u8 vf_offset ;
   u8 rsv1[2U] ;
   __le16 def_vlan_tag1 ;
   __le16 def_vlan_tag2 ;
   u8 vf_bitmap[8U] ;
   u8 rsv2[8U] ;
};
#line 838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_vport_vtag_rx_cfg_cmd {
   u8 vport_vlan_cfg ;
   u8 vf_offset ;
   u8 rsv1[6U] ;
   u8 vf_bitmap[8U] ;
   u8 rsv2[8U] ;
};
#line 846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_tx_vlan_type_cfg_cmd {
   __le16 ot_vlan_type ;
   __le16 in_vlan_type ;
   u8 rsv[20U] ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_rx_vlan_type_cfg_cmd {
   __le16 ot_fst_vlan_type ;
   __le16 ot_sec_vlan_type ;
   __le16 in_fst_vlan_type ;
   __le16 in_sec_vlan_type ;
   u8 rsv[16U] ;
};
#line 860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_cfg_com_tqp_queue_cmd {
   __le16 tqp_id ;
   __le16 stream_id ;
   u8 enable ;
   u8 rsv[19U] ;
};
#line 900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_cfg_tso_status_cmd {
   __le16 tso_mss_min ;
   __le16 tso_mss_max ;
   u8 rsv[20U] ;
};
#line 907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_cfg_gro_status_cmd {
   __le16 gro_en ;
   u8 rsv[22U] ;
};
#line 916  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_reset_tqp_queue_cmd {
   __le16 tqp_id ;
   u8 reset_req ;
   u8 ready_to_reset ;
   u8 rsv[20U] ;
};
#line 925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_reset_cmd {
   u8 mac_func_reset ;
   u8 fun_reset_vfid ;
   u8 rsv[22U] ;
};
#line 933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_pf_rst_done_cmd {
   u8 pf_rst_done ;
   u8 rsv[23U] ;
};
#line 942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_serdes_lb_cmd {
   u8 mask ;
   u8 enable ;
   u8 result ;
   u8 rsv[21U] ;
};
#line 978  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_set_led_state_cmd {
   u8 rsv1[3U] ;
   u8 locate_led_config ;
   u8 rsv2[20U] ;
};
#line 984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_get_fd_mode_cmd {
   u8 mode ;
   u8 enable ;
   u8 rsv[22U] ;
};
#line 990  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_get_fd_allocation_cmd {
   __le32 stage1_entry_num ;
   __le32 stage2_entry_num ;
   __le16 stage1_counter_num ;
   __le16 stage2_counter_num ;
   u8 rsv[12U] ;
};
#line 998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_set_fd_key_config_cmd {
   u8 stage ;
   u8 key_select ;
   u8 inner_sipv6_word_en ;
   u8 inner_dipv6_word_en ;
   u8 outer_sipv6_word_en ;
   u8 outer_dipv6_word_en ;
   u8 rsv1[2U] ;
   __le32 tuple_mask ;
   __le32 meta_data_mask ;
   u8 rsv2[8U] ;
};
#line 1012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_fd_tcam_config_1_cmd {
   u8 stage ;
   u8 xy_sel ;
   u8 port_info ;
   u8 rsv1[1U] ;
   __le32 index ;
   u8 entry_vld ;
   u8 rsv2[7U] ;
   u8 tcam_data[8U] ;
};
#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_fd_tcam_config_2_cmd {
   u8 tcam_data[24U] ;
};
#line 1027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_fd_tcam_config_3_cmd {
   u8 tcam_data[20U] ;
   u8 rsv[4U] ;
};
#line 1046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_fd_ad_config_cmd {
   u8 stage ;
   u8 rsv1[3U] ;
   __le32 index ;
   __le64 ad_data ;
   u8 rsv2[8U] ;
};
#line 1093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
union __anonunion___u_3624 {
   u8 *__val ;
   char __c[1U] ;
};
#line 698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
enum HLCGE_PORT_TYPE {
    HOST_PORT = 0,
    NETWORK_PORT = 1
};
#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_cfg {
   u8 vmdq_vport_num ;
   u8 tc_num ;
   u16 tqp_desc_num ;
   u16 rx_buf_len ;
   u16 rss_size_max ;
   u8 phy_addr ;
   u8 media_type ;
   u8 mac_addr[6U] ;
   u8 default_speed ;
   u32 numa_node_map ;
   u8 speed_ability ;
   u16 umv_space ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_comm_stats_str {
   char desc[32U] ;
   unsigned long offset ;
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct key_info {
   u8 key_type ;
   u8 key_length ;
};
#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_fd_rule_tuples {
   u8 src_mac[6U] ;
   u8 dst_mac[6U] ;
   u32 src_ip[4U] ;
   u32 dst_ip[4U] ;
   u16 src_port ;
   u16 dst_port ;
   u16 vlan_tag1 ;
   u16 ether_proto ;
   u8 ip_tos ;
   u8 ip_proto ;
};
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_fd_rule {
   struct hlist_node rule_node ;
   struct hclge_fd_rule_tuples tuples ;
   struct hclge_fd_rule_tuples tuples_mask ;
   u32 unused_tuple ;
   u32 flow_type ;
   u8 action ;
   u16 vf_id ;
   u16 queue_id ;
   u16 location ;
   u16 flow_id ;
   enum HCLGE_FD_ACTIVE_RULE_TYPE rule_type ;
};
#line 621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_fd_ad_data {
   u16 ad_id ;
   u8 drop_packet ;
   u8 forward_to_direct_queue ;
   u16 queue_id ;
   u8 use_counter ;
   u8 counter_id ;
   u8 use_next_stage ;
   u8 write_rule_id_to_bd ;
   u8 next_input_key ;
   u16 rule_id ;
};
#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_vport_mac_addr_cfg {
   struct list_head node ;
   int hd_tbl_status ;
   u8 mac_addr[6U] ;
};
#line 645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct hclge_vport_vlan_cfg {
   struct list_head node ;
   int hd_tbl_status ;
   u16 vlan_id ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hclge_mbx.h"
struct hclge_vf_rst_cmd {
   u8 dest_vfid ;
   u8 vf_rst ;
   u8 rsv[22U] ;
};
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
union __anonunion_3643 {
   struct __kfifo kfifo ;
   struct hclge_mac_tnl_stats *type ;
   struct hclge_mac_tnl_stats *const_type ;
   char (*rectype)[0U] ;
   struct hclge_mac_tnl_stats *ptr ;
   struct hclge_mac_tnl_stats *ptr_const ;
};
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct __anonstruct___tmp_3642 {
   union __anonunion_3643 __anonCompField___anonstruct___tmp_3642_175 ;
   struct hclge_mac_tnl_stats buf[8U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_query_version_cmd {
   __le32 firmware ;
   __le32 firmware_rsv[5U] ;
};
#line 1075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_firmware_compat_cmd {
   __le32 compat ;
   u8 rsv[20U] ;
};
#line 1093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
union __anonunion___u_4345 {
   u8 *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mdio.c"
struct hclge_mdio_cfg_cmd {
   u8 ctrl_bit ;
   u8 phyid ;
   u8 phyad ;
   u8 rsvd ;
   __le16 reserve ;
   __le16 data_wr ;
   __le16 data_rd ;
   __le16 sta ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_mac_ethertype_idx_rd_cmd {
   u8 flags ;
   u8 resp_code ;
   __le16 vlan_tag ;
   u8 mac_addr[6U] ;
   __le16 index ;
   __le16 ethter_type ;
   __le16 egress_port ;
   __le16 egress_queue ;
   __le16 rev0 ;
   u8 i_port_bitmap ;
   u8 i_port_direction ;
   u8 rev1[2U] ;
};
#line 1054  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
struct hclge_get_m7_bd_cmd {
   __le32 bd_num ;
   u8 rsv[20U] ;
};
#line 1093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
union __anonunion___u_5788 {
   u8 *__val ;
   char __c[1U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
struct hclge_qos_pri_map_cmd {
   u8 pri0_tc : 4 ;
   u8 pri1_tc : 4 ;
   u8 pri2_tc : 4 ;
   u8 pri3_tc : 4 ;
   u8 pri4_tc : 4 ;
   u8 pri5_tc : 4 ;
   u8 pri6_tc : 4 ;
   u8 pri7_tc : 4 ;
   u8 vlan_pri : 4 ;
   u8 rev : 4 ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
struct __anonstruct_5790 {
   u8 bit0 : 1 ;
   u8 bit1 : 1 ;
   u8 bit2 : 1 ;
   u8 bit3 : 1 ;
   u8 bit4 : 1 ;
   u8 bit5 : 1 ;
   u8 bit6 : 1 ;
   u8 bit7 : 1 ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
union __anonunion_5789 {
   u8 bitmap ;
   struct __anonstruct_5790 __anonCompField___anonunion_5789_160 ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
struct hclge_dbg_bitmap_cmd {
   union __anonunion_5789 __anonCompField_hclge_dbg_bitmap_cmd_161 ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
struct hclge_dbg_reg_common_msg {
   int msg_num ;
   int offset ;
   enum hclge_opcode_type cmd ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
struct hclge_dbg_dfx_message {
   int flag ;
   char message[60U] ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
struct hclge_dbg_reg_type_info {
   char *reg_type ;
   struct hclge_dbg_dfx_message *dfx_msg ;
   struct hclge_dbg_reg_common_msg reg_msg ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
struct hclge_tqp_tx_queue_tc_cmd {
   __le16 queue_id ;
   __le16 rsvd ;
   u8 tc_id ;
   u8 rev[3U] ;
};
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
union __anonunion_5825 {
   struct __kfifo kfifo ;
   struct hclge_mac_tnl_stats *type ;
   struct hclge_mac_tnl_stats *const_type ;
   char (*rectype)[0U] ;
   struct hclge_mac_tnl_stats *ptr ;
   struct hclge_mac_tnl_stats *ptr_const ;
};
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct __anonstruct___tmp_5824 {
   union __anonunion_5825 __anonCompField___anonstruct___tmp_5824_171 ;
   struct hclge_mac_tnl_stats buf[8U] ;
};
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
union __anonunion_5827 {
   struct __kfifo kfifo ;
   struct hclge_mac_tnl_stats *type ;
   struct hclge_mac_tnl_stats *const_type ;
   char (*rectype)[0U] ;
   struct hclge_mac_tnl_stats *ptr ;
   struct hclge_mac_tnl_stats *ptr_const ;
};
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
struct __anonstruct___tmpq_5826 {
   union __anonunion_5827 __anonCompField___anonstruct___tmpq_5826_172 ;
   struct hclge_mac_tnl_stats buf[8U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_7609 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_7609 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_7610 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_7610 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_7626 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_7626 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_7630 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_7630 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_7631 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_7632 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_7631 __anonCompField_media_link_90 ;
   union __anonunion_7632 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_7634 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_7633 {
   struct __anonstruct_dev_7634 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_7633 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_7648 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_7649 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_7647 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_7648 i2c ;
   struct __anonstruct_custom_7649 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_7647 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_8550 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_8550 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 12  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_3 {
   int arg0 ;
   int signal_pending ;
};
#line 17  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_hclge_misc_irq_handle_7 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_1_8 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 1712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 1102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
#line 1102 
int hclge_cmd_send(struct hclge_hw *hw, struct hclge_desc *desc, int num);
#line 1103 
#line 1103 
void hclge_cmd_setup_basic_desc(struct hclge_desc *desc, enum hclge_opcode_type opcode, bool is_read);
#line 949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
__inline static int hclge_get_queue_id(struct hnae3_queue *queue)
{
  #line 951 
  void *__mptr;
  #line 951 
  __mptr = (void *)queue;
  #line 951 
  struct hclge_tqp *tqp = ((struct hclge_tqp *)(__mptr + 18446744073709551608U));
  #line 953 
  return (int)tqp->index;
}

#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
#line 1470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_tm_schd_init(struct hclge_dev *hdev);
#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
#line 1485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_tm_vport_map_update(struct hclge_dev *hdev);
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_pause_setup_hw(struct hclge_dev *hdev, bool init);
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
#line 1246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_tm_schd_setup_hw(struct hclge_dev *hdev);
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
#line 1402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
void hclge_tm_prio_tc_info_update(struct hclge_dev *hdev, u8 *prio_tc);
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
void hclge_tm_schd_info_update(struct hclge_dev *hdev, u8 num_tc);
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
#line 1438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
void hclge_tm_pfc_info_update(struct hclge_dev *hdev);
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
#line 1147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_tm_dwrr_cfg(struct hclge_dev *hdev);
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
#line 1451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_tm_init_hw(struct hclge_dev *hdev, bool init);
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_mac_pause_en_cfg(struct hclge_dev *hdev, bool tx, bool rx);
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_pause_addr_cfg(struct hclge_dev *hdev, u8 *mac_addr);
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_pfc_rx_stats_get(struct hclge_dev *hdev, u64 *stats);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_pfc_tx_stats_get(struct hclge_dev *hdev, u64 *stats);
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.h"
#line 514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_tm_qs_shaper_cfg(struct hclge_vport *vport, int max_tx_rate);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_shaper_para_calc(u32 ir, u8 shaper_level, u8 *ir_b, u8 *ir_u, u8 *ir_s)
{
  #line 57 
  u32 ir_calc;
  #line 58 
  u32 tick;
  #line 49 
  u16 tick_array[4U] = {(unsigned short)1536U, (unsigned short)192U, (unsigned short)48U, (unsigned short)1536U};
  #line 55 
  u8 ir_u_calc = (unsigned char)0U;
  #line 56 
  u8 ir_s_calc = (unsigned char)0U;
  #line 61 
  if ((unsigned int)shaper_level > 3U || ir > 100000U) 
                                                       #line 63 
                                                       return -22;
  #line 65 
  tick = (unsigned int)tick_array[(int)shaper_level];
  #line 74 
  ir_calc = ((tick >> 1) + 1007999U) / tick;
  #line 76 
  if (ir_calc == ir) {
    #line 77 
    *ir_b = (unsigned char)126U;
    #line 78 
    *ir_u = (unsigned char)0U;
    #line 79 
    *ir_s = (unsigned char)0U;
    #line 81 
    return 0;
  }
  else 
    #line 82 
    if (ir_calc > ir) {
      #line 84 
      while (ir_calc >= ir && ir != 0U) {
        #line 85 
        ir_s_calc = (u8)((int)ir_s_calc + 1);
        #line 86 
        ir_calc = 1008000U / (tick << (int)ir_s_calc);
      }
      #line 89 
      *ir_b = (unsigned char)(((ir * tick << (int)ir_s_calc) + 4000U) / 8000U);
    }
    else {
      #line 93 
      u32 numerator;
      #line 95 
      while (ir_calc < ir) {
        #line 96 
        ir_u_calc = (u8)((int)ir_u_calc + 1);
        #line 97 
        numerator = (unsigned int)(1008000 << (int)ir_u_calc);
        #line 98 
        ir_calc = ((tick >> 1) + numerator) / tick;
      }
      #line 101 
      if (ir_calc == ir) 
                         #line 102 
                         *ir_b = (unsigned char)126U;
      else {
        #line 104 
        ir_u_calc = (u8)((int)ir_u_calc - 1);
        #line 104 
        u32 denominator = (unsigned int)(8000 << (int)ir_u_calc);
        #line 105 
        *ir_b = (unsigned char)((ir * tick + (denominator >> 1)) / denominator);
      }
    }
  #line 109 
  *ir_u = ir_u_calc;
  #line 110 
  *ir_s = ir_s_calc;
  #line 112 
  return 0;
}

#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_pfc_stats_get(struct hclge_dev *hdev, enum hclge_opcode_type opcode, u64 *stats)
{
  #line 118 
  struct hclge_desc desc[3U];
  #line 119 
  int ret;
  #line 119 
  int i;
  #line 119 
  int j;
  #line 121 
  if ((unsigned int)opcode + 4294965497U > 1U) 
                                               #line 123 
                                               return -22;
  #line 125 
  i = 0;
  #line 125 
  while (i <= 1) {
    #line 126 
    hclge_cmd_setup_basic_desc(& desc[i],opcode,(_Bool)1);
    #line 127 
    desc[i].flag = (unsigned short)((unsigned int)desc[i].flag | 4U);
    #line 125 
    i ++;
  }
  #line 130 
  hclge_cmd_setup_basic_desc(& desc[i],opcode,(_Bool)1);
  #line 132 
  ret = hclge_cmd_send(& hdev->hw,(struct hclge_desc *)(& desc),3);
  #line 133 
  if (ret != 0) 
                #line 134 
                return ret;
  #line 136 
  i = 0;
  #line 136 
  while (i <= 2) {
    {
      #line 137 
      struct hclge_pfc_stats_cmd *pfc_stats = (struct hclge_pfc_stats_cmd *)(& desc[i].data);
      #line 140 
      j = 0;
      #line 140 
      while (j <= 2) {
        {
          #line 141 
          u32 index = (unsigned int)(i * 3 + j);
          #line 143 
          if (index <= 7U) 
                           #line 144 
                           *(stats + (unsigned long)index) = pfc_stats->pkt_num[j];
        }
        #line 140 
        j ++;
      }
    }
    #line 136 
    i ++;
  }
  #line 148 
  return 0;
}

#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_pfc_rx_stats_get(struct hclge_dev *hdev, u64 *stats)
{
  #line 153 
  return hclge_pfc_stats_get(hdev,
                          (enum hclge_opcode_type)HCLGE_OPC_QUERY_PFC_RX_PKT_CNT,
                          stats);
}

#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_pfc_tx_stats_get(struct hclge_dev *hdev, u64 *stats)
{
  #line 158 
  return hclge_pfc_stats_get(hdev,
                          (enum hclge_opcode_type)HCLGE_OPC_QUERY_PFC_TX_PKT_CNT,
                          stats);
}

#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_mac_pause_en_cfg(struct hclge_dev *hdev, bool tx, bool rx)
{
  #line 163 
  struct hclge_desc desc;
  #line 167 
  unsigned int tmp;
  #line 167 
  unsigned int tmp_0;
  #line 165 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_CFG_MAC_PAUSE_EN,(_Bool)0);
  #line 167 
  if ((int)tx != 0) 
                    #line 167 
                    tmp = 1U; else 
                                   #line 167 
                                   tmp = 0U;
  #line 167 
  if ((int)rx != 0) 
                    #line 167 
                    tmp_0 = 2U; else 
                                     #line 167 
                                     tmp_0 = 0U;
  #line 167 
  desc.data[0] = tmp | tmp_0;
  #line 170 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_pfc_pause_en_cfg(struct hclge_dev *hdev, u8 tx_rx_bitmap, u8 pfc_bitmap)
{
  #line 176 
  struct hclge_desc desc;
  #line 177 
  struct hclge_pfc_en_cmd *pfc = (struct hclge_pfc_en_cmd *)(& desc.data);
  #line 179 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_CFG_PFC_PAUSE_EN,(_Bool)0);
  #line 181 
  pfc->tx_rx_en_bitmap = tx_rx_bitmap;
  #line 182 
  pfc->pri_en_bitmap = pfc_bitmap;
  #line 184 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_pause_param_cfg(struct hclge_dev *hdev, u8 *addr, u8 pause_trans_gap, u16 pause_trans_time)
{
  #line 190 
  struct hclge_cfg_pause_param_cmd *pause_param;
  #line 191 
  struct hclge_desc desc;
  #line 193 
  pause_param = (struct hclge_cfg_pause_param_cmd *)(& desc.data);
  #line 195 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_CFG_MAC_PARA,(_Bool)0);
  #line 197 
  ether_addr_copy((u8 *)(& pause_param->mac_addr),addr);
  #line 198 
  ether_addr_copy((u8 *)(& pause_param->mac_addr_extra),addr);
  #line 199 
  pause_param->pause_trans_gap = pause_trans_gap;
  #line 200 
  pause_param->pause_trans_time = pause_trans_time;
  #line 202 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_pause_addr_cfg(struct hclge_dev *hdev, u8 *mac_addr)
{
  #line 207 
  struct hclge_cfg_pause_param_cmd *pause_param;
  #line 208 
  struct hclge_desc desc;
  #line 209 
  u16 trans_time;
  #line 210 
  u8 trans_gap;
  #line 211 
  int ret;
  #line 213 
  pause_param = (struct hclge_cfg_pause_param_cmd *)(& desc.data);
  #line 215 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_CFG_MAC_PARA,(_Bool)1);
  #line 217 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 218 
  if (ret != 0) 
                #line 219 
                return ret;
  #line 221 
  trans_gap = pause_param->pause_trans_gap;
  #line 222 
  trans_time = pause_param->pause_trans_time;
  #line 224 
  return hclge_pause_param_cfg(hdev,mac_addr,(unsigned char)((int)trans_gap),
                            (unsigned short)((int)trans_time));
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_fill_pri_array(struct hclge_dev *hdev, u8 *pri, u8 pri_id)
{
  #line 229 
  u8 tc;
  #line 231 
  tc = hdev->tm_info.prio_tc[(int)pri_id];
  #line 233 
  if ((int)hdev->tm_info.num_tc <= (int)tc) 
                                            #line 234 
                                            return -22;
  #line 245 
  *(pri + (unsigned long)((int)pri_id >> 1)) = (unsigned char)((int)*(pri + (unsigned long)((int)pri_id >> 1)) | ((int)tc << ((int)pri_id & 1) * 4));
  #line 247 
  return 0;
}

#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_up_to_tc_map(struct hclge_dev *hdev)
{
  #line 252 
  struct hclge_desc desc;
  #line 254 
  u8 pri_id;
  #line 255 
  int ret;
  #line 253 
  u8 *pri = (u8 *)(& desc.data);
  #line 257 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_PRI_TO_TC_MAPPING,(_Bool)0);
  #line 259 
  pri_id = (unsigned char)0U;
  #line 259 
  while ((unsigned int)pri_id <= 7U) {
    #line 260 
    ret = hclge_fill_pri_array(hdev,pri,(unsigned char)((int)pri_id));
    #line 261 
    if (ret != 0) 
                  #line 262 
                  return ret;
    #line 259 
    pri_id = (u8)((int)pri_id + 1);
  }
  #line 265 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pg_to_pri_map_cfg(struct hclge_dev *hdev, u8 pg_id, u8 pri_bit_map)
{
  #line 271 
  struct hclge_pg_to_pri_link_cmd *map;
  #line 272 
  struct hclge_desc desc;
  #line 274 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_TM_PG_TO_PRI_LINK,(_Bool)0);
  #line 276 
  map = (struct hclge_pg_to_pri_link_cmd *)(& desc.data);
  #line 278 
  map->pg_id = pg_id;
  #line 279 
  map->pri_bit_map = pri_bit_map;
  #line 281 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_qs_to_pri_map_cfg(struct hclge_dev *hdev, u16 qs_id, u8 pri)
{
  #line 287 
  struct hclge_qs_to_pri_link_cmd *map;
  #line 288 
  struct hclge_desc desc;
  #line 290 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_TM_QS_TO_PRI_LINK,(_Bool)0);
  #line 292 
  map = (struct hclge_qs_to_pri_link_cmd *)(& desc.data);
  #line 294 
  map->qs_id = qs_id;
  #line 295 
  map->priority = pri;
  #line 296 
  map->link_vld = (unsigned char)1U;
  #line 298 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_q_to_qs_map_cfg(struct hclge_dev *hdev, u16 q_id, u16 qs_id)
{
  #line 304 
  struct hclge_nq_to_qs_link_cmd *map;
  #line 305 
  struct hclge_desc desc;
  #line 307 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_TM_NQ_TO_QS_LINK,(_Bool)0);
  #line 309 
  map = (struct hclge_nq_to_qs_link_cmd *)(& desc.data);
  #line 311 
  map->nq_id = q_id;
  #line 312 
  map->qset_id = (unsigned short)((unsigned int)qs_id | 1024U);
  #line 314 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pg_weight_cfg(struct hclge_dev *hdev, u8 pg_id, u8 dwrr)
{
  #line 320 
  struct hclge_pg_weight_cmd *weight;
  #line 321 
  struct hclge_desc desc;
  #line 323 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_TM_PG_WEIGHT,(_Bool)0);
  #line 325 
  weight = (struct hclge_pg_weight_cmd *)(& desc.data);
  #line 327 
  weight->pg_id = pg_id;
  #line 328 
  weight->dwrr = dwrr;
  #line 330 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pri_weight_cfg(struct hclge_dev *hdev, u8 pri_id, u8 dwrr)
{
  #line 336 
  struct hclge_priority_weight_cmd *weight;
  #line 337 
  struct hclge_desc desc;
  #line 339 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_TM_PRI_WEIGHT,(_Bool)0);
  #line 341 
  weight = (struct hclge_priority_weight_cmd *)(& desc.data);
  #line 343 
  weight->pri_id = pri_id;
  #line 344 
  weight->dwrr = dwrr;
  #line 346 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_qs_weight_cfg(struct hclge_dev *hdev, u16 qs_id, u8 dwrr)
{
  #line 352 
  struct hclge_qs_weight_cmd *weight;
  #line 353 
  struct hclge_desc desc;
  #line 355 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_TM_QS_WEIGHT,(_Bool)0);
  #line 357 
  weight = (struct hclge_qs_weight_cmd *)(& desc.data);
  #line 359 
  weight->qs_id = qs_id;
  #line 360 
  weight->dwrr = dwrr;
  #line 362 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static u32 hclge_tm_get_shapping_para(u8 ir_b, u8 ir_u, u8 ir_s, u8 bs_b, u8 bs_s)
{
  #line 368 
  u32 shapping_para = 0U;
  #line 370 
  shapping_para &= 4294967040U;
  #line 370 
  shapping_para = (unsigned int)ir_b | shapping_para;
  #line 371 
  shapping_para &= 4294963455U;
  #line 371 
  shapping_para = ((unsigned int)((int)ir_u << 8) & 3840U) | shapping_para;
  #line 372 
  shapping_para &= 4294905855U;
  #line 372 
  shapping_para = ((unsigned int)((int)ir_s << 12) & 65535U) | shapping_para;
  #line 373 
  shapping_para &= 4292935679U;
  #line 373 
  shapping_para = ((unsigned int)((int)bs_b << 16) & 2031616U) | shapping_para;
  #line 374 
  shapping_para &= 4229955583U;
  #line 374 
  shapping_para = ((unsigned int)((int)bs_s << 21) & 65011712U) | shapping_para;
  #line 376 
  return shapping_para;
}

#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pg_shapping_cfg(struct hclge_dev *hdev, enum hclge_shap_bucket bucket, u8 pg_id, u32 shapping_para)
{
  #line 383 
  struct hclge_pg_shapping_cmd *shap_cfg_cmd;
  #line 384 
  enum hclge_opcode_type opcode;
  #line 385 
  struct hclge_desc desc;
  #line 387 
  if (bucket != (unsigned int)HCLGE_TM_SHAP_C_BUCKET) 
                                                      #line 387 
                                                      opcode = HCLGE_OPC_TM_PG_P_SHAPPING; else 
                                                                    #line 387 
                                                                    opcode = HCLGE_OPC_TM_PG_C_SHAPPING;
  #line 389 
  hclge_cmd_setup_basic_desc(& desc,opcode,(_Bool)0);
  #line 391 
  shap_cfg_cmd = (struct hclge_pg_shapping_cmd *)(& desc.data);
  #line 393 
  shap_cfg_cmd->pg_id = pg_id;
  #line 395 
  shap_cfg_cmd->pg_shapping_para = shapping_para;
  #line 397 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_port_shaper_cfg(struct hclge_dev *hdev)
{
  #line 402 
  struct hclge_port_shapping_cmd *shap_cfg_cmd;
  #line 403 
  struct hclge_desc desc;
  #line 404 
  u8 ir_u;
  #line 404 
  u8 ir_b;
  #line 404 
  u8 ir_s;
  #line 405 
  u32 shapping_para;
  #line 406 
  int ret;
  #line 408 
  ret = hclge_shaper_para_calc(hdev->hw.mac.speed,(unsigned char)2,& ir_b,& ir_u,& ir_s);
  #line 411 
  if (ret != 0) 
                #line 412 
                return ret;
  #line 414 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_TM_PORT_SHAPPING,(_Bool)0);
  #line 415 
  shap_cfg_cmd = (struct hclge_port_shapping_cmd *)(& desc.data);
  #line 417 
  shapping_para = hclge_tm_get_shapping_para((unsigned char)((int)ir_b),(unsigned char)((int)ir_u),(unsigned char)((int)ir_s),(unsigned char)5,(unsigned char)20);
  #line 421 
  shap_cfg_cmd->port_shapping_para = shapping_para;
  #line 423 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pri_shapping_cfg(struct hclge_dev *hdev, enum hclge_shap_bucket bucket, u8 pri_id, u32 shapping_para)
{
  #line 430 
  struct hclge_pri_shapping_cmd *shap_cfg_cmd;
  #line 431 
  enum hclge_opcode_type opcode;
  #line 432 
  struct hclge_desc desc;
  #line 434 
  if (bucket != (unsigned int)HCLGE_TM_SHAP_C_BUCKET) 
                                                      #line 434 
                                                      opcode = HCLGE_OPC_TM_PRI_P_SHAPPING; else 
                                                                    #line 434 
                                                                    opcode = HCLGE_OPC_TM_PRI_C_SHAPPING;
  #line 437 
  hclge_cmd_setup_basic_desc(& desc,opcode,(_Bool)0);
  #line 439 
  shap_cfg_cmd = (struct hclge_pri_shapping_cmd *)(& desc.data);
  #line 441 
  shap_cfg_cmd->pri_id = pri_id;
  #line 443 
  shap_cfg_cmd->pri_shapping_para = shapping_para;
  #line 445 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pg_schd_mode_cfg(struct hclge_dev *hdev, u8 pg_id)
{
  #line 450 
  struct hclge_desc desc;
  #line 452 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_TM_PG_SCH_MODE_CFG,(_Bool)0);
  #line 454 
  if ((unsigned int)hdev->tm_info.pg_info[(int)pg_id].pg_sch_mode == 1U) 
    #line 455 
    desc.data[1] = 1U; else 
                            #line 457 
                            desc.data[1] = 0U;
  #line 459 
  desc.data[0] = (unsigned int)pg_id;
  #line 461 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pri_schd_mode_cfg(struct hclge_dev *hdev, u8 pri_id)
{
  #line 466 
  struct hclge_desc desc;
  #line 468 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_TM_PRI_SCH_MODE_CFG,(_Bool)0);
  #line 470 
  if ((unsigned int)hdev->tm_info.tc_info[(int)pri_id].tc_sch_mode == 1U) 
    #line 471 
    desc.data[1] = 1U; else 
                            #line 473 
                            desc.data[1] = 0U;
  #line 475 
  desc.data[0] = (unsigned int)pri_id;
  #line 477 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_qs_schd_mode_cfg(struct hclge_dev *hdev, u16 qs_id, u8 mode)
{
  #line 482 
  struct hclge_desc desc;
  #line 484 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_TM_QS_SCH_MODE_CFG,(_Bool)0);
  #line 486 
  if ((unsigned int)mode == 1U) 
                                #line 487 
                                desc.data[1] = 1U; else 
                                                        #line 489 
                                                        desc.data[1] = 0U;
  #line 491 
  desc.data[0] = (unsigned int)qs_id;
  #line 493 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_qs_bp_cfg(struct hclge_dev *hdev, u8 tc, u8 grp_id, u32 bit_map)
{
  #line 499 
  struct hclge_bp_to_qs_map_cmd *bp_to_qs_map_cmd;
  #line 500 
  struct hclge_desc desc;
  #line 502 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_TM_BP_TO_QSET_MAPPING,(_Bool)0);
  #line 505 
  bp_to_qs_map_cmd = (struct hclge_bp_to_qs_map_cmd *)(& desc.data);
  #line 507 
  bp_to_qs_map_cmd->tc_id = tc;
  #line 508 
  bp_to_qs_map_cmd->qs_group_id = grp_id;
  #line 509 
  bp_to_qs_map_cmd->qs_bit_map = bit_map;
  #line 511 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_tm_qs_shaper_cfg(struct hclge_vport *vport, int max_tx_rate)
{
  #line 517 
  struct hclge_qs_shapping_cmd *shap_cfg_cmd;
  #line 519 
  struct hclge_desc desc;
  #line 520 
  u8 ir_b;
  #line 520 
  u8 ir_u;
  #line 520 
  u8 ir_s;
  #line 521 
  u32 shaper_para;
  #line 522 
  int ret;
  #line 522 
  int i;
  #line 516 
  struct hnae3_knic_private_info *kinfo = & vport->nic.__anonCompField_hnae3_handle_167.kinfo;
  #line 518 
  struct hclge_dev *hdev = vport->back;
  #line 524 
  if (max_tx_rate == 0) 
                        #line 525 
                        max_tx_rate = 100000;
  #line 527 
  ret = hclge_shaper_para_calc((unsigned int)max_tx_rate,(unsigned char)3,& ir_b,& ir_u,& ir_s);
  #line 529 
  if (ret != 0) 
                #line 530 
                return ret;
  #line 532 
  shaper_para = hclge_tm_get_shapping_para((unsigned char)((int)ir_b),(unsigned char)((int)ir_u),(unsigned char)((int)ir_s),(unsigned char)5,(unsigned char)20);
  #line 536 
  i = 0;
  #line 536 
  while ((int)kinfo->num_tc > i) {
    #line 537 
    hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_QCN_SHAPPING_CFG,(_Bool)0);
    #line 540 
    shap_cfg_cmd = (struct hclge_qs_shapping_cmd *)(& desc.data);
    #line 541 
    shap_cfg_cmd->qs_id = (unsigned short)((int)vport->qs_offset + (int)((unsigned short)i));
    #line 542 
    shap_cfg_cmd->qs_shapping_para = shaper_para;
    #line 544 
    ret = hclge_cmd_send(& hdev->hw,& desc,1);
    #line 545 
    if (ret != 0) {
      #line 546 
      _dev_err(& (hdev->pdev)->dev,(char *)"vf%u, qs%u failed to set tx_rate:%d, ret=%d\n",(int)vport->vport_id,(int)shap_cfg_cmd->qs_id,max_tx_rate,ret);
      #line 550 
      return ret;
    }
    #line 536 
    i ++;
  }
  #line 554 
  return 0;
}

#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static void hclge_tm_vport_tc_info_update(struct hclge_vport *vport)
{
  #line 572 
  unsigned short __UNIQUE_ID___x444;
  #line 572 
  int tmp_3;
  #line 561 
  u16 max_rss_size;
  #line 562 
  u8 i;
  #line 569 
  unsigned int tmp_1;
  #line 569 
  unsigned int tmp_2;
  #line 559 
  struct hnae3_knic_private_info *kinfo = & vport->nic.__anonCompField_hnae3_handle_167.kinfo;
  #line 560 
  struct hclge_dev *hdev = vport->back;
  #line 567 
  if ((unsigned int)vport->vport_id == 0U) {
    #line 568 
    unsigned short __UNIQUE_ID___x442;
    #line 568 
    int tmp;
    {
      #line 568 
      __UNIQUE_ID___x442 = vport->alloc_tqps;
      #line 568 
      unsigned short __UNIQUE_ID___y443 = (unsigned short)hdev->tm_info.num_tc;
      #line 568 
      if ((int)__UNIQUE_ID___x442 < (int)__UNIQUE_ID___y443) 
                                                             #line 568 
                                                             tmp = (int)__UNIQUE_ID___x442; else 
                                                                    #line 568 
                                                                    tmp = (int)__UNIQUE_ID___y443;
      }
    #line 567 
    kinfo->num_tc = (unsigned char)tmp;
  }
  else 
       #line 567 
       kinfo->num_tc = (unsigned char)1U;
  #line 569 
  if ((unsigned int)vport->vport_id != 0U) 
                                           #line 569 
                                           tmp_1 = (unsigned int)((unsigned short)hdev->tm_info.num_tc); else 
                                                                    #line 569 
                                                                    tmp_1 = 0U;
  #line 569 
  if ((unsigned int)vport->vport_id != 0U) 
                                           #line 569 
                                           tmp_2 = (unsigned int)vport->vport_id + 65535U; else 
                                                                    #line 569 
                                                                    tmp_2 = 0U;
  #line 569 
  vport->qs_offset = (unsigned short)(tmp_1 + tmp_2);
  {
    #line 572 
    __UNIQUE_ID___x444 = hdev->rss_size_max;
    #line 572 
    unsigned short __UNIQUE_ID___y445 = (unsigned short)((int)vport->alloc_tqps / (int)kinfo->num_tc);
    #line 572 
    if ((int)__UNIQUE_ID___x444 < (int)__UNIQUE_ID___y445) 
                                                           #line 572 
                                                           tmp_3 = (int)__UNIQUE_ID___x444; else 
                                                                    #line 572 
                                                                    tmp_3 = (int)__UNIQUE_ID___y445;
    }
  #line 572 
  max_rss_size = (unsigned short)tmp_3;
  #line 576 
  if (((int)kinfo->req_rss_size != (int)kinfo->rss_size && (unsigned int)kinfo->req_rss_size != 0U) && (int)kinfo->req_rss_size <= (int)max_rss_size) {
    #line 578 
    _dev_info(& (hdev->pdev)->dev,(char *)"rss changes from %u to %u\n",(int)kinfo->rss_size,(int)kinfo->req_rss_size);
    #line 580 
    kinfo->rss_size = kinfo->req_rss_size;
  }
  else 
    #line 581 
    if ((int)kinfo->rss_size > (int)max_rss_size || (unsigned int)kinfo->req_rss_size == 0U && (int)kinfo->rss_size < (int)max_rss_size) {
      #line 587 
      if ((unsigned int)kinfo->req_rss_size == 0U) {
        #line 588 
        unsigned short __UNIQUE_ID___x446;
        #line 588 
        int tmp_5;
        {
          #line 588 
          __UNIQUE_ID___x446 = max_rss_size;
          #line 588 
          unsigned short __UNIQUE_ID___y447 = (unsigned short)(((int)hdev->num_nic_msi + -1) / (int)kinfo->num_tc);
          #line 588 
          if ((int)__UNIQUE_ID___x446 < (int)__UNIQUE_ID___y447) 
                                                                 #line 588 
                                                                 tmp_5 = (int)__UNIQUE_ID___x446; else 
                                                                    #line 588 
                                                                    tmp_5 = (int)__UNIQUE_ID___y447;
          }
        #line 588 
        max_rss_size = (unsigned short)tmp_5;
      }
      #line 593 
      kinfo->rss_size = max_rss_size;
    }
  #line 596 
  kinfo->num_tqps = (unsigned short)((int)((unsigned short)kinfo->num_tc) * (int)kinfo->rss_size);
  #line 597 
  vport->dwrr = (unsigned char)100U;
  #line 598 
  vport->alloc_rss_size = kinfo->rss_size;
  #line 599 
  vport->bw_limit = hdev->tm_info.pg_info[0].bw_limit;
  #line 601 
  i = (unsigned char)0U;
  #line 601 
  while ((unsigned int)i <= 7U) {
    #line 602 
    if ((((unsigned long)hdev->hw_tc_map >> (int)i) & 1UL) != 0UL && (int)kinfo->num_tc > (int)i) {
      #line 603 
      kinfo->tc_info[(int)i].enable = (_Bool)1;
      #line 604 
      kinfo->tc_info[(int)i].tqp_offset = (unsigned short)((int)((unsigned short)i) * (int)kinfo->rss_size);
      #line 605 
      kinfo->tc_info[(int)i].tqp_count = kinfo->rss_size;
      #line 606 
      kinfo->tc_info[(int)i].tc = i;
    }
    else {
      #line 609 
      kinfo->tc_info[(int)i].enable = (_Bool)0;
      #line 610 
      kinfo->tc_info[(int)i].tqp_offset = (unsigned short)0U;
      #line 611 
      kinfo->tc_info[(int)i].tqp_count = (unsigned short)1U;
      #line 612 
      kinfo->tc_info[(int)i].tc = (unsigned char)0U;
    }
    #line 601 
    i = (u8)((int)i + 1);
  }
  #line 616 
  memcpy((void *)(& kinfo->prio_tc),(void *)(& hdev->tm_info.prio_tc),8UL);
  #line 617 
  return;
}

#line 620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static void hclge_tm_vport_info_update(struct hclge_dev *hdev)
{
  #line 623 
  u32 i;
  #line 622 
  struct hclge_vport *vport = hdev->vport;
  #line 625 
  i = 0U;
  #line 625 
  while ((unsigned int)hdev->num_alloc_vport > i) {
    #line 626 
    hclge_tm_vport_tc_info_update(vport);
    #line 628 
    vport ++;
    #line 625 
    i ++;
  }
  #line 630 
  return;
}

#line 632  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static void hclge_tm_tc_info_init(struct hclge_dev *hdev)
{
  #line 634 
  u8 i;
  #line 636 
  i = (unsigned char)0U;
  #line 636 
  while ((int)hdev->tm_info.num_tc > (int)i) {
    #line 637 
    hdev->tm_info.tc_info[(int)i].tc_id = i;
    #line 638 
    hdev->tm_info.tc_info[(int)i].tc_sch_mode = (unsigned char)1U;
    #line 639 
    hdev->tm_info.tc_info[(int)i].pgid = (unsigned char)0U;
    #line 640 
    hdev->tm_info.tc_info[(int)i].bw_limit = hdev->tm_info.pg_info[0].bw_limit;
    #line 636 
    i = (u8)((int)i + 1);
  }
  #line 644 
  i = (unsigned char)0U;
  #line 644 
  while ((unsigned int)i <= 7U) {
    #line 645 
    if ((int)hdev->tm_info.num_tc > (int)i) 
                                            #line 645 
                                            hdev->tm_info.prio_tc[(int)i] = i; else 
                                                                    #line 645 
                                                                    hdev->tm_info.prio_tc[(int)i] = (unsigned char)0U;
    #line 644 
    i = (u8)((int)i + 1);
  }
  #line 651 
  if ((unsigned int)hdev->tm_info.num_tc > 1U || (unsigned int)hdev->tm_info.pfc_en != 0U) 
    #line 652 
    hdev->flag |= 4U; else 
                           #line 654 
                           hdev->flag &= 4294967291U;
  #line 655 
  return;
}

#line 657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static void hclge_tm_pg_info_init(struct hclge_dev *hdev)
{
  #line 661 
  u8 i;
  #line 663 
  i = (unsigned char)0U;
  #line 663 
  while ((int)hdev->tm_info.num_pg > (int)i) {
    {
      #line 664 
      int k;
      #line 666 
      if ((unsigned int)i != 0U) 
                                 #line 666 
                                 hdev->tm_info.pg_dwrr[(int)i] = (unsigned char)0U; else 
                                                                    #line 666 
                                                                    hdev->tm_info.pg_dwrr[(int)i] = (unsigned char)100U;
      #line 668 
      hdev->tm_info.pg_info[(int)i].pg_id = i;
      #line 669 
      hdev->tm_info.pg_info[(int)i].pg_sch_mode = (unsigned char)1U;
      #line 671 
      hdev->tm_info.pg_info[(int)i].bw_limit = 100000U;
      #line 673 
      if ((unsigned int)i != 0U) 
                                 #line 674 
                                 goto __Cont;
      #line 676 
      hdev->tm_info.pg_info[(int)i].tc_bit_map = hdev->hw_tc_map;
      #line 677 
      k = 0;
      #line 677 
      while ((int)hdev->tm_info.num_tc > k) {
        #line 678 
        hdev->tm_info.pg_info[(int)i].tc_dwrr[k] = (unsigned char)100U;
        #line 677 
        k ++;
      }
    }
    #line 663 
    __Cont: 
            #line 663 
    i = (u8)((int)i + 1);
  }
  #line 680 
  return;
}

#line 682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static void hclge_pfc_info_init(struct hclge_dev *hdev)
{
  #line 684 
  if (((unsigned long)hdev->flag & 4UL) == 0UL) {
    #line 685 
    if (hdev->fc_mode_last_time == (unsigned int)HCLGE_FC_PFC) 
                                                               #line 686 
                                                               _dev_warn(& (hdev->pdev)->dev,(char *)"DCB is disable, but last mode is FC_PFC\n");
    #line 689 
    hdev->tm_info.fc_mode = hdev->fc_mode_last_time;
  }
  else 
    #line 690 
    if (hdev->tm_info.fc_mode != (unsigned int)HCLGE_FC_PFC) {
      #line 695 
      hdev->fc_mode_last_time = hdev->tm_info.fc_mode;
      #line 696 
      hdev->tm_info.fc_mode = HCLGE_FC_PFC;
    }
  #line 698 
  return;
}

#line 700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static void hclge_tm_schd_info_init(struct hclge_dev *hdev)
{
  #line 702 
  hclge_tm_pg_info_init(hdev);
  #line 704 
  hclge_tm_tc_info_init(hdev);
  #line 706 
  hclge_tm_vport_info_update(hdev);
  #line 708 
  hclge_pfc_info_init(hdev);
  #line 709 
  return;
}

#line 711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pg_to_pri_map(struct hclge_dev *hdev)
{
  #line 713 
  int ret;
  #line 714 
  u32 i;
  #line 716 
  if ((unsigned int)hdev->tx_sch_mode != 1U) 
                                             #line 717 
                                             return 0;
  #line 719 
  i = 0U;
  #line 719 
  while ((unsigned int)hdev->tm_info.num_pg > i) {
    #line 721 
    ret = hclge_tm_pg_to_pri_map_cfg(hdev,(unsigned char)((int)((unsigned char)i)),(unsigned char)((int)hdev->tm_info.pg_info[i].tc_bit_map));
    #line 723 
    if (ret != 0) 
                  #line 724 
                  return ret;
    #line 719 
    i ++;
  }
  #line 727 
  return 0;
}

#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pg_shaper_cfg(struct hclge_dev *hdev)
{
  #line 732 
  u8 ir_u;
  #line 732 
  u8 ir_b;
  #line 732 
  u8 ir_s;
  #line 733 
  u32 shaper_para;
  #line 734 
  int ret;
  #line 735 
  u32 i;
  #line 738 
  if ((unsigned int)hdev->tx_sch_mode != 1U) 
                                             #line 739 
                                             return 0;
  #line 742 
  i = 0U;
  #line 742 
  while ((unsigned int)hdev->tm_info.num_pg > i) {
    #line 744 
    ret = hclge_shaper_para_calc(hdev->tm_info.pg_info[i].bw_limit,(unsigned char)1,& ir_b,& ir_u,& ir_s);
    #line 748 
    if (ret != 0) 
                  #line 749 
                  return ret;
    #line 751 
    shaper_para = hclge_tm_get_shapping_para((unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)5,(unsigned char)20);
    #line 754 
    ret = hclge_tm_pg_shapping_cfg(hdev,(enum hclge_shap_bucket)HCLGE_TM_SHAP_C_BUCKET,(unsigned char)((int)((unsigned char)i)),shaper_para);
    #line 757 
    if (ret != 0) 
                  #line 758 
                  return ret;
    #line 760 
    shaper_para = hclge_tm_get_shapping_para((unsigned char)((int)ir_b),(unsigned char)((int)ir_u),(unsigned char)((int)ir_s),(unsigned char)5,(unsigned char)20);
    #line 763 
    ret = hclge_tm_pg_shapping_cfg(hdev,(enum hclge_shap_bucket)HCLGE_TM_SHAP_P_BUCKET,(unsigned char)((int)((unsigned char)i)),shaper_para);
    #line 766 
    if (ret != 0) 
                  #line 767 
                  return ret;
    #line 742 
    i ++;
  }
  #line 770 
  return 0;
}

#line 773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pg_dwrr_cfg(struct hclge_dev *hdev)
{
  #line 775 
  int ret;
  #line 776 
  u32 i;
  #line 779 
  if ((unsigned int)hdev->tx_sch_mode != 1U) 
                                             #line 780 
                                             return 0;
  #line 783 
  i = 0U;
  #line 783 
  while ((unsigned int)hdev->tm_info.num_pg > i) {
    #line 785 
    ret = hclge_tm_pg_weight_cfg(hdev,(unsigned char)((int)((unsigned char)i)),(unsigned char)((int)hdev->tm_info.pg_dwrr[i]));
    #line 786 
    if (ret != 0) 
                  #line 787 
                  return ret;
    #line 783 
    i ++;
  }
  #line 790 
  return 0;
}

#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_vport_q_to_qs_map(struct hclge_dev *hdev, struct hclge_vport *vport)
{
  #line 798 
  struct hnae3_tc_info *v_tc_info;
  #line 799 
  u32 i;
  #line 799 
  u32 j;
  #line 800 
  int ret;
  #line 796 
  struct hnae3_knic_private_info *kinfo = & vport->nic.__anonCompField_hnae3_handle_167.kinfo;
  #line 797 
  struct hnae3_queue **tqp = kinfo->tqp;
  #line 802 
  i = 0U;
  #line 802 
  while ((unsigned int)kinfo->num_tc > i) {
    #line 803 
    v_tc_info = & kinfo->tc_info[i];
    #line 804 
    j = 0U;
    #line 804 
    while ((unsigned int)v_tc_info->tqp_count > j) {
      {
        #line 805 
        struct hnae3_queue *q = *(tqp + (unsigned long)((unsigned int)v_tc_info->tqp_offset + j));
        #line 807 
        ;
        #line 807 
        ;
        #line 807 
        ret = hclge_tm_q_to_qs_map_cfg(hdev,(unsigned short)((int)((unsigned short)hclge_get_queue_id(q))),(unsigned short)((int)vport->qs_offset + (int)((unsigned short)i)));
        #line 810 
        if (ret != 0) 
                      #line 811 
                      return ret;
      }
      #line 804 
      j ++;
    }
    #line 802 
    i ++;
  }
  #line 815 
  return 0;
}

#line 818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pri_q_qs_cfg(struct hclge_dev *hdev)
{
  #line 821 
  int ret;
  #line 822 
  u32 i;
  #line 822 
  u32 k;
  #line 820 
  struct hclge_vport *vport = hdev->vport;
  #line 824 
  if ((unsigned int)hdev->tx_sch_mode == 1U) {
    #line 826 
    k = 0U;
    #line 826 
    while ((unsigned int)hdev->num_alloc_vport > k) {
      {
        #line 827 
        struct hnae3_knic_private_info *kinfo = & (vport + (unsigned long)k)->nic.__anonCompField_hnae3_handle_167.kinfo;
        #line 830 
        i = 0U;
        #line 830 
        while ((unsigned int)kinfo->num_tc > i) {
          #line 831 
          ret = hclge_tm_qs_to_pri_map_cfg(hdev,(unsigned short)((int)(vport + (unsigned long)k)->qs_offset + (int)((unsigned short)i)),(unsigned char)((int)((unsigned char)i)));
          #line 833 
          if (ret != 0) 
                        #line 834 
                        return ret;
          #line 830 
          i ++;
        }
      }
      #line 826 
      k ++;
    }
  }
  else 
    #line 837 
    if ((unsigned int)hdev->tx_sch_mode == 2U) {
      #line 839 
      k = 0U;
      #line 839 
      while ((unsigned int)hdev->num_alloc_vport > k) {
        #line 840 
        i = 0U;
        #line 840 
        while (i <= 7U) {
          #line 841 
          ret = hclge_tm_qs_to_pri_map_cfg(hdev,(unsigned short)((int)(vport + (unsigned long)k)->qs_offset + (int)((unsigned short)i)),(unsigned char)((int)((unsigned char)k)));
          #line 843 
          if (ret != 0) 
                        #line 844 
                        return ret;
          #line 840 
          i ++;
        }
        #line 839 
        k ++;
      }
    }
    else 
         #line 847 
         return -22;
  #line 851 
  i = 0U;
  #line 851 
  while ((unsigned int)hdev->num_alloc_vport > i) {
    #line 852 
    ret = hclge_vport_q_to_qs_map(hdev,vport);
    #line 853 
    if (ret != 0) 
                  #line 854 
                  return ret;
    #line 856 
    vport ++;
    #line 851 
    i ++;
  }
  #line 859 
  return 0;
}

#line 862  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pri_tc_base_shaper_cfg(struct hclge_dev *hdev)
{
  #line 864 
  u8 ir_u;
  #line 864 
  u8 ir_b;
  #line 864 
  u8 ir_s;
  #line 865 
  u32 shaper_para;
  #line 866 
  int ret;
  #line 867 
  u32 i;
  #line 869 
  i = 0U;
  #line 869 
  while ((unsigned int)hdev->tm_info.num_tc > i) {
    #line 870 
    ret = hclge_shaper_para_calc(hdev->tm_info.tc_info[i].bw_limit,(unsigned char)0,& ir_b,& ir_u,& ir_s);
    #line 874 
    if (ret != 0) 
                  #line 875 
                  return ret;
    #line 877 
    shaper_para = hclge_tm_get_shapping_para((unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)5,(unsigned char)20);
    #line 880 
    ret = hclge_tm_pri_shapping_cfg(hdev,(enum hclge_shap_bucket)HCLGE_TM_SHAP_C_BUCKET,(unsigned char)((int)((unsigned char)i)),shaper_para);
    #line 882 
    if (ret != 0) 
                  #line 883 
                  return ret;
    #line 885 
    shaper_para = hclge_tm_get_shapping_para((unsigned char)((int)ir_b),(unsigned char)((int)ir_u),(unsigned char)((int)ir_s),(unsigned char)5,(unsigned char)20);
    #line 888 
    ret = hclge_tm_pri_shapping_cfg(hdev,(enum hclge_shap_bucket)HCLGE_TM_SHAP_P_BUCKET,(unsigned char)((int)((unsigned char)i)),shaper_para);
    #line 890 
    if (ret != 0) 
                  #line 891 
                  return ret;
    #line 869 
    i ++;
  }
  #line 894 
  return 0;
}

#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pri_vnet_base_shaper_pri_cfg(struct hclge_vport *vport)
{
  #line 900 
  u8 ir_u;
  #line 900 
  u8 ir_b;
  #line 900 
  u8 ir_s;
  #line 901 
  u32 shaper_para;
  #line 902 
  int ret;
  #line 899 
  struct hclge_dev *hdev = vport->back;
  #line 904 
  ret = hclge_shaper_para_calc(vport->bw_limit,(unsigned char)0,& ir_b,& ir_u,& ir_s);
  #line 906 
  if (ret != 0) 
                #line 907 
                return ret;
  #line 909 
  shaper_para = hclge_tm_get_shapping_para((unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)5,(unsigned char)20);
  #line 912 
  ret = hclge_tm_pri_shapping_cfg(hdev,(enum hclge_shap_bucket)HCLGE_TM_SHAP_C_BUCKET,(unsigned char)((int)((unsigned char)vport->vport_id)),shaper_para);
  #line 914 
  if (ret != 0) 
                #line 915 
                return ret;
  #line 917 
  shaper_para = hclge_tm_get_shapping_para((unsigned char)((int)ir_b),(unsigned char)((int)ir_u),(unsigned char)((int)ir_s),(unsigned char)5,(unsigned char)20);
  #line 920 
  ret = hclge_tm_pri_shapping_cfg(hdev,(enum hclge_shap_bucket)HCLGE_TM_SHAP_P_BUCKET,(unsigned char)((int)((unsigned char)vport->vport_id)),shaper_para);
  #line 922 
  if (ret != 0) 
                #line 923 
                return ret;
  #line 925 
  return 0;
}

#line 928  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pri_vnet_base_shaper_qs_cfg(struct hclge_vport *vport)
{
  #line 932 
  u8 ir_u;
  #line 932 
  u8 ir_b;
  #line 932 
  u8 ir_s;
  #line 933 
  u32 i;
  #line 934 
  int ret;
  #line 930 
  struct hnae3_knic_private_info *kinfo = & vport->nic.__anonCompField_hnae3_handle_167.kinfo;
  #line 931 
  struct hclge_dev *hdev = vport->back;
  #line 936 
  i = 0U;
  #line 936 
  while ((unsigned int)kinfo->num_tc > i) {
    #line 937 
    ret = hclge_shaper_para_calc(hdev->tm_info.tc_info[i].bw_limit,(unsigned char)3,& ir_b,& ir_u,& ir_s);
    #line 941 
    if (ret != 0) 
                  #line 942 
                  return ret;
    #line 936 
    i ++;
  }
  #line 945 
  return 0;
}

#line 948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pri_vnet_base_shaper_cfg(struct hclge_dev *hdev)
{
  #line 951 
  int ret;
  #line 952 
  u32 i;
  #line 950 
  struct hclge_vport *vport = hdev->vport;
  #line 955 
  i = 0U;
  #line 955 
  while ((unsigned int)hdev->num_alloc_vport > i) {
    #line 956 
    ret = hclge_tm_pri_vnet_base_shaper_pri_cfg(vport);
    #line 957 
    if (ret != 0) 
                  #line 958 
                  return ret;
    #line 960 
    ret = hclge_tm_pri_vnet_base_shaper_qs_cfg(vport);
    #line 961 
    if (ret != 0) 
                  #line 962 
                  return ret;
    #line 964 
    vport ++;
    #line 955 
    i ++;
  }
  #line 967 
  return 0;
}

#line 970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pri_shaper_cfg(struct hclge_dev *hdev)
{
  #line 972 
  int ret;
  #line 974 
  if ((unsigned int)hdev->tx_sch_mode == 1U) {
    #line 975 
    ret = hclge_tm_pri_tc_base_shaper_cfg(hdev);
    #line 976 
    if (ret != 0) 
                  #line 977 
                  return ret;
  }
  else {
    #line 979 
    ret = hclge_tm_pri_vnet_base_shaper_cfg(hdev);
    #line 980 
    if (ret != 0) 
                  #line 981 
                  return ret;
  }
  #line 984 
  return 0;
}

#line 987  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pri_tc_base_dwrr_cfg(struct hclge_dev *hdev)
{
  #line 990 
  struct hclge_pg_info *pg_info;
  #line 991 
  u8 dwrr;
  #line 992 
  int ret;
  #line 993 
  u32 i;
  #line 993 
  u32 k;
  #line 989 
  struct hclge_vport *vport = hdev->vport;
  #line 995 
  i = 0U;
  #line 995 
  while ((unsigned int)hdev->tm_info.num_tc > i) {
    #line 996 
    pg_info = & hdev->tm_info.pg_info[(int)hdev->tm_info.tc_info[i].pgid];
    #line 998 
    dwrr = pg_info->tc_dwrr[i];
    #line 1000 
    ret = hclge_tm_pri_weight_cfg(hdev,(unsigned char)((int)((unsigned char)i)),(unsigned char)((int)dwrr));
    #line 1001 
    if (ret != 0) 
                  #line 1002 
                  return ret;
    #line 1004 
    k = 0U;
    #line 1004 
    while ((unsigned int)hdev->num_alloc_vport > k) {
      #line 1005 
      ret = hclge_tm_qs_weight_cfg(hdev,(unsigned short)((int)(vport + (unsigned long)k)->qs_offset + (int)((unsigned short)i)),(unsigned char)((int)(vport + (unsigned long)k)->dwrr));
      #line 1008 
      if (ret != 0) 
                    #line 1009 
                    return ret;
      #line 1004 
      k ++;
    }
    #line 995 
    i ++;
  }
  #line 1013 
  return 0;
}

#line 1016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_ets_tc_dwrr_cfg(struct hclge_dev *hdev)
{
  #line 1021 
  struct hclge_ets_tc_weight_cmd *ets_weight;
  #line 1022 
  struct hclge_desc desc;
  #line 1023 
  unsigned int i;
  #line 1025 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_ETS_TC_WEIGHT,(_Bool)0);
  #line 1026 
  ets_weight = (struct hclge_ets_tc_weight_cmd *)(& desc.data);
  #line 1028 
  i = 0U;
  #line 1028 
  while (i <= 7U) {
    {
      #line 1029 
      struct hclge_pg_info *pg_info;
      #line 1031 
      ets_weight->tc_weight[i] = (unsigned char)1U;
      #line 1033 
      if ((((unsigned long)hdev->hw_tc_map >> i) & 1UL) == 0UL) 
                                                                #line 1034 
                                                                goto __Cont;
      #line 1036 
      pg_info = & hdev->tm_info.pg_info[(int)hdev->tm_info.tc_info[i].pgid];
      #line 1038 
      ets_weight->tc_weight[i] = pg_info->tc_dwrr[i];
    }
    #line 1028 
    __Cont: 
            #line 1028 
    i ++;
  }
  #line 1041 
  ets_weight->weight_offset = (unsigned char)14U;
  #line 1043 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 1046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pri_vnet_base_dwrr_pri_cfg(struct hclge_vport *vport)
{
  #line 1050 
  int ret;
  #line 1051 
  u8 i;
  #line 1048 
  struct hnae3_knic_private_info *kinfo = & vport->nic.__anonCompField_hnae3_handle_167.kinfo;
  #line 1049 
  struct hclge_dev *hdev = vport->back;
  #line 1054 
  ret = hclge_tm_pri_weight_cfg(hdev,(unsigned char)((int)((unsigned char)vport->vport_id)),(unsigned char)((int)vport->dwrr));
  #line 1055 
  if (ret != 0) 
                #line 1056 
                return ret;
  #line 1059 
  i = (unsigned char)0U;
  #line 1059 
  while ((int)kinfo->num_tc > (int)i) {
    #line 1060 
    ret = hclge_tm_qs_weight_cfg(hdev,(unsigned short)((int)vport->qs_offset + (int)((unsigned short)i)),(unsigned char)((int)hdev->tm_info.pg_info[0].tc_dwrr[(int)i]));
    #line 1063 
    if (ret != 0) 
                  #line 1064 
                  return ret;
    #line 1059 
    i = (u8)((int)i + 1);
  }
  #line 1067 
  return 0;
}

#line 1070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pri_vnet_base_dwrr_cfg(struct hclge_dev *hdev)
{
  #line 1073 
  int ret;
  #line 1074 
  u32 i;
  #line 1072 
  struct hclge_vport *vport = hdev->vport;
  #line 1076 
  i = 0U;
  #line 1076 
  while ((unsigned int)hdev->num_alloc_vport > i) {
    #line 1077 
    ret = hclge_tm_pri_vnet_base_dwrr_pri_cfg(vport);
    #line 1078 
    if (ret != 0) 
                  #line 1079 
                  return ret;
    #line 1081 
    vport ++;
    #line 1076 
    i ++;
  }
  #line 1084 
  return 0;
}

#line 1087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_pri_dwrr_cfg(struct hclge_dev *hdev)
{
  #line 1089 
  int ret;
  #line 1091 
  if ((unsigned int)hdev->tx_sch_mode == 1U) {
    #line 1092 
    ret = hclge_tm_pri_tc_base_dwrr_cfg(hdev);
    #line 1093 
    if (ret != 0) 
                  #line 1094 
                  return ret;
    #line 1096 
    if (((hdev->ae_dev)->flag & 4U) == 0U) 
                                           #line 1097 
                                           return 0;
    #line 1099 
    ret = hclge_tm_ets_tc_dwrr_cfg(hdev);
    #line 1100 
    if (ret == -95) {
      #line 1101 
      _dev_warn(& (hdev->pdev)->dev,(char *)"fw %08x does\'t support ets tc weight cmd\n",hdev->fw_version);
      #line 1104 
      ret = 0;
    }
    #line 1107 
    return ret;
  }
  else {
    #line 1109 
    ret = hclge_tm_pri_vnet_base_dwrr_cfg(hdev);
    #line 1110 
    if (ret != 0) 
                  #line 1111 
                  return ret;
  }
  #line 1114 
  return 0;
}

#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_map_cfg(struct hclge_dev *hdev)
{
  #line 1119 
  int ret;
  #line 1121 
  ret = hclge_up_to_tc_map(hdev);
  #line 1122 
  if (ret != 0) 
                #line 1123 
                return ret;
  #line 1125 
  ret = hclge_tm_pg_to_pri_map(hdev);
  #line 1126 
  if (ret != 0) 
                #line 1127 
                return ret;
  #line 1129 
  return hclge_tm_pri_q_qs_cfg(hdev);
}

#line 1132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_shaper_cfg(struct hclge_dev *hdev)
{
  #line 1134 
  int ret;
  #line 1136 
  ret = hclge_tm_port_shaper_cfg(hdev);
  #line 1137 
  if (ret != 0) 
                #line 1138 
                return ret;
  #line 1140 
  ret = hclge_tm_pg_shaper_cfg(hdev);
  #line 1141 
  if (ret != 0) 
                #line 1142 
                return ret;
  #line 1144 
  return hclge_tm_pri_shaper_cfg(hdev);
}

#line 1147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_tm_dwrr_cfg(struct hclge_dev *hdev)
{
  #line 1149 
  int ret;
  #line 1151 
  ret = hclge_tm_pg_dwrr_cfg(hdev);
  #line 1152 
  if (ret != 0) 
                #line 1153 
                return ret;
  #line 1155 
  return hclge_tm_pri_dwrr_cfg(hdev);
}

#line 1158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_lvl2_schd_mode_cfg(struct hclge_dev *hdev)
{
  #line 1160 
  int ret;
  #line 1161 
  u8 i;
  #line 1164 
  if ((unsigned int)hdev->tx_sch_mode == 2U) 
                                             #line 1165 
                                             return 0;
  #line 1167 
  i = (unsigned char)0U;
  #line 1167 
  while ((int)hdev->tm_info.num_pg > (int)i) {
    #line 1168 
    ret = hclge_tm_pg_schd_mode_cfg(hdev,(unsigned char)((int)i));
    #line 1169 
    if (ret != 0) 
                  #line 1170 
                  return ret;
    #line 1167 
    i = (u8)((int)i + 1);
  }
  #line 1173 
  return 0;
}

#line 1176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_schd_mode_vnet_base_cfg(struct hclge_vport *vport)
{
  #line 1180 
  int ret;
  #line 1181 
  u8 i;
  #line 1178 
  struct hnae3_knic_private_info *kinfo = & vport->nic.__anonCompField_hnae3_handle_167.kinfo;
  #line 1179 
  struct hclge_dev *hdev = vport->back;
  #line 1183 
  if ((unsigned int)vport->vport_id > 7U) 
                                          #line 1184 
                                          return -22;
  #line 1186 
  ret = hclge_tm_pri_schd_mode_cfg(hdev,(unsigned char)((int)((unsigned char)vport->vport_id)));
  #line 1187 
  if (ret != 0) 
                #line 1188 
                return ret;
  #line 1190 
  i = (unsigned char)0U;
  #line 1190 
  while ((int)kinfo->num_tc > (int)i) {
    {
      #line 1191 
      u8 sch_mode = hdev->tm_info.tc_info[(int)i].tc_sch_mode;
      #line 1193 
      ret = hclge_tm_qs_schd_mode_cfg(hdev,(unsigned short)((int)vport->qs_offset + (int)((unsigned short)i)),(unsigned char)((int)sch_mode));
      #line 1195 
      if (ret != 0) 
                    #line 1196 
                    return ret;
    }
    #line 1190 
    i = (u8)((int)i + 1);
  }
  #line 1199 
  return 0;
}

#line 1202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_lvl34_schd_mode_cfg(struct hclge_dev *hdev)
{
  #line 1205 
  int ret;
  #line 1206 
  u8 i;
  #line 1206 
  u8 k;
  #line 1204 
  struct hclge_vport *vport = hdev->vport;
  #line 1208 
  if ((unsigned int)hdev->tx_sch_mode == 1U) {
    #line 1209 
    i = (unsigned char)0U;
    #line 1209 
    while ((int)hdev->tm_info.num_tc > (int)i) {
      #line 1210 
      ret = hclge_tm_pri_schd_mode_cfg(hdev,(unsigned char)((int)i));
      #line 1211 
      if (ret != 0) 
                    #line 1212 
                    return ret;
      #line 1214 
      k = (unsigned char)0U;
      #line 1214 
      while ((int)((unsigned short)k) < (int)hdev->num_alloc_vport) {
        #line 1215 
        ret = hclge_tm_qs_schd_mode_cfg(hdev,(unsigned short)((int)(vport + (unsigned long)k)->qs_offset + (int)((unsigned short)i)),(unsigned char)1);
        #line 1218 
        if (ret != 0) 
                      #line 1219 
                      return ret;
        #line 1214 
        k = (u8)((int)k + 1);
      }
      #line 1209 
      i = (u8)((int)i + 1);
    }
  }
  else {
    #line 1223 
    i = (unsigned char)0U;
    #line 1223 
    while ((int)((unsigned short)i) < (int)hdev->num_alloc_vport) {
      #line 1224 
      ret = hclge_tm_schd_mode_vnet_base_cfg(vport);
      #line 1225 
      if (ret != 0) 
                    #line 1226 
                    return ret;
      #line 1228 
      vport ++;
      #line 1223 
      i = (u8)((int)i + 1);
    }
  }
  #line 1232 
  return 0;
}

#line 1235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_schd_mode_hw(struct hclge_dev *hdev)
{
  #line 1237 
  int ret;
  #line 1239 
  ret = hclge_tm_lvl2_schd_mode_cfg(hdev);
  #line 1240 
  if (ret != 0) 
                #line 1241 
                return ret;
  #line 1243 
  return hclge_tm_lvl34_schd_mode_cfg(hdev);
}

#line 1246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_tm_schd_setup_hw(struct hclge_dev *hdev)
{
  #line 1248 
  int ret;
  #line 1251 
  ret = hclge_tm_map_cfg(hdev);
  #line 1252 
  if (ret != 0) 
                #line 1253 
                return ret;
  #line 1256 
  ret = hclge_tm_shaper_cfg(hdev);
  #line 1257 
  if (ret != 0) 
                #line 1258 
                return ret;
  #line 1261 
  ret = hclge_tm_dwrr_cfg(hdev);
  #line 1262 
  if (ret != 0) 
                #line 1263 
                return ret;
  #line 1266 
  return hclge_tm_schd_mode_hw(hdev);
}

#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_pause_param_setup_hw(struct hclge_dev *hdev)
{
  #line 1271 
  struct hclge_mac *mac = & hdev->hw.mac;
  #line 1273 
  return hclge_pause_param_cfg(hdev,(u8 *)(& mac->mac_addr),(unsigned char)127,
                            (unsigned short)65535);
}

#line 1278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_pfc_setup_hw(struct hclge_dev *hdev)
{
  #line 1280 
  u8 enable_bitmap = (unsigned char)0U;
  #line 1282 
  if (hdev->tm_info.fc_mode == (unsigned int)HCLGE_FC_PFC) 
                                                           #line 1283 
                                                           enable_bitmap = (unsigned char)3U;
  #line 1286 
  return hclge_pfc_pause_en_cfg(hdev,(unsigned char)((int)enable_bitmap),
                             (unsigned char)((int)hdev->tm_info.pfc_en));
}

#line 1294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_bp_setup_hw(struct hclge_dev *hdev, u8 tc)
{
  #line 1296 
  int i;
  #line 1298 
  i = 0;
  #line 1298 
  while (i <= 31) {
    {
      #line 1300 
      int k;
      #line 1300 
      int ret;
      #line 1299 
      u32 qs_bitmap = 0U;
      #line 1302 
      k = 0;
      #line 1302 
      while ((int)hdev->num_alloc_vport > k) {
        {
          #line 1305 
          u8 grp;
          #line 1305 
          u8 sub_grp;
          #line 1303 
          struct hclge_vport *vport = hdev->vport + (unsigned long)k;
          #line 1304 
          u16 qs_id = (unsigned short)((int)vport->qs_offset + (int)((unsigned short)tc));
          #line 1307 
          grp = (unsigned char)((unsigned int)((unsigned char)((unsigned long)qs_id >> 5)) & 31U);
          #line 1309 
          sub_grp = (unsigned char)((unsigned int)((unsigned char)qs_id) & 31U);
          #line 1311 
          if ((int)grp == i) 
                             #line 1312 
                             qs_bitmap = (unsigned int)(1 << (int)sub_grp) | qs_bitmap;
        }
        #line 1302 
        k ++;
      }
      #line 1315 
      ret = hclge_tm_qs_bp_cfg(hdev,(unsigned char)((int)tc),(unsigned char)((int)((unsigned char)i)),qs_bitmap);
      #line 1316 
      if (ret != 0) 
                    #line 1317 
                    return ret;
    }
    #line 1298 
    i ++;
  }
  #line 1320 
  return 0;
}

#line 1323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_mac_pause_setup_hw(struct hclge_dev *hdev)
{
  #line 1325 
  bool tx_en;
  #line 1325 
  bool rx_en;
  #line 1327 
  switch ((unsigned int)hdev->tm_info.fc_mode) {
    #line 1328 
    case (unsigned int)0: 
                          #line 1328 
    ;
    #line 1329 
    tx_en = (_Bool)0;
    #line 1330 
    rx_en = (_Bool)0;
    #line 1331 
    break;
    #line 1332 
    case (unsigned int)1: 
                          #line 1332 
    ;
    #line 1333 
    tx_en = (_Bool)0;
    #line 1334 
    rx_en = (_Bool)1;
    #line 1335 
    break;
    #line 1336 
    case (unsigned int)2: 
                          #line 1336 
    ;
    #line 1337 
    tx_en = (_Bool)1;
    #line 1338 
    rx_en = (_Bool)0;
    #line 1339 
    break;
    #line 1340 
    case (unsigned int)3: 
                          #line 1340 
    ;
    #line 1341 
    tx_en = (_Bool)1;
    #line 1342 
    rx_en = (_Bool)1;
    #line 1343 
    break;
    #line 1344 
    case (unsigned int)4: 
                          #line 1344 
    ;
    #line 1345 
    tx_en = (_Bool)0;
    #line 1346 
    rx_en = (_Bool)0;
    #line 1347 
    break;
    #line 1348 
    default: 
             #line 1348 
    ;
    #line 1349 
    tx_en = (_Bool)1;
    #line 1350 
    rx_en = (_Bool)1;
  }
  #line 1353 
  return hclge_mac_pause_en_cfg(hdev,(_Bool)((bool)((int)tx_en) != 0),
                             (_Bool)((bool)((int)rx_en) != 0));
}

#line 1356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
static int hclge_tm_bp_setup(struct hclge_dev *hdev)
{
  #line 1359 
  int i;
  #line 1358 
  int ret = 0;
  #line 1361 
  i = 0;
  #line 1361 
  while ((int)hdev->tm_info.num_tc > i) {
    #line 1362 
    ret = hclge_bp_setup_hw(hdev,(unsigned char)((int)((unsigned char)i)));
    #line 1363 
    if (ret != 0) 
                  #line 1364 
                  return ret;
    #line 1361 
    i ++;
  }
  #line 1367 
  return ret;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_pause_setup_hw(struct hclge_dev *hdev, bool init)
{
  #line 1372 
  int ret;
  #line 1374 
  ret = hclge_pause_param_setup_hw(hdev);
  #line 1375 
  if (ret != 0) 
                #line 1376 
                return ret;
  #line 1378 
  ret = hclge_mac_pause_setup_hw(hdev);
  #line 1379 
  if (ret != 0) 
                #line 1380 
                return ret;
  #line 1383 
  if (((hdev->ae_dev)->flag & 4U) == 0U) 
                                         #line 1384 
                                         return 0;
  #line 1390 
  ret = hclge_pfc_setup_hw(hdev);
  #line 1391 
  if ((int)init != 0 && ret == -95) 
                                    #line 1392 
                                    _dev_warn(& (hdev->pdev)->dev,(char *)"GE MAC does not support pfc\n");
  else 
    #line 1393 
    if (ret != 0) {
      #line 1394 
      _dev_err(& (hdev->pdev)->dev,(char *)"config pfc failed! ret = %d\n",ret);
      #line 1396 
      return ret;
    }
  #line 1399 
  return hclge_tm_bp_setup(hdev);
}

#line 1402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
void hclge_tm_prio_tc_info_update(struct hclge_dev *hdev, u8 *prio_tc)
{
  #line 1405 
  struct hnae3_knic_private_info *kinfo;
  #line 1406 
  u32 i;
  #line 1406 
  u32 k;
  #line 1404 
  struct hclge_vport *vport = hdev->vport;
  #line 1408 
  i = 0U;
  #line 1408 
  while (i <= 7U) {
    #line 1409 
    hdev->tm_info.prio_tc[i] = *(prio_tc + (unsigned long)i);
    #line 1411 
    k = 0U;
    #line 1411 
    while ((unsigned int)hdev->num_alloc_vport > k) {
      #line 1412 
      kinfo = & (vport + (unsigned long)k)->nic.__anonCompField_hnae3_handle_167.kinfo;
      #line 1413 
      kinfo->prio_tc[i] = *(prio_tc + (unsigned long)i);
      #line 1411 
      k ++;
    }
    #line 1408 
    i ++;
  }
  #line 1416 
  return;
}

#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
void hclge_tm_schd_info_update(struct hclge_dev *hdev, u8 num_tc)
{
  #line 1421 
  u8 i;
  #line 1420 
  u8 bit_map = (unsigned char)0U;
  #line 1423 
  hdev->tm_info.num_tc = num_tc;
  #line 1425 
  i = (unsigned char)0U;
  #line 1425 
  while ((int)hdev->tm_info.num_tc > (int)i) {
    #line 1426 
    bit_map = (unsigned char)((int)((unsigned char)(1UL << (int)i)) | (int)bit_map);
    #line 1425 
    i = (u8)((int)i + 1);
  }
  #line 1428 
  if ((unsigned int)bit_map == 0U) {
    #line 1429 
    bit_map = (unsigned char)1U;
    #line 1430 
    hdev->tm_info.num_tc = (unsigned char)1U;
  }
  #line 1433 
  hdev->hw_tc_map = bit_map;
  #line 1435 
  hclge_tm_schd_info_init(hdev);
  #line 1436 
  return;
}

#line 1438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
void hclge_tm_pfc_info_update(struct hclge_dev *hdev)
{
  #line 1443 
  if ((unsigned int)hdev->tm_info.num_tc > 1U || (unsigned int)hdev->tm_info.pfc_en != 0U) 
    #line 1444 
    hdev->flag |= 4U; else 
                           #line 1446 
                           hdev->flag &= 4294967291U;
  #line 1448 
  hclge_pfc_info_init(hdev);
  #line 1449 
  return;
}

#line 1451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_tm_init_hw(struct hclge_dev *hdev, bool init)
{
  #line 1453 
  int ret;
  #line 1455 
  if ((unsigned int)hdev->tx_sch_mode + 255U > 1U) 
                                                   #line 1457 
                                                   return -524;
  #line 1459 
  ret = hclge_tm_schd_setup_hw(hdev);
  #line 1460 
  if (ret != 0) 
                #line 1461 
                return ret;
  #line 1463 
  ret = hclge_pause_setup_hw(hdev,(_Bool)((bool)((int)init) != 0));
  #line 1464 
  if (ret != 0) 
                #line 1465 
                return ret;
  #line 1467 
  return 0;
}

#line 1470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_tm_schd_init(struct hclge_dev *hdev)
{
  #line 1473 
  hdev->tm_info.fc_mode = HCLGE_FC_FULL;
  #line 1474 
  hdev->fc_mode_last_time = hdev->tm_info.fc_mode;
  #line 1476 
  if ((unsigned int)hdev->tx_sch_mode != 1U && (unsigned int)hdev->tm_info.num_pg != 1U) 
    #line 1478 
    return -22;
  #line 1480 
  hclge_tm_schd_info_init(hdev);
  #line 1482 
  return hclge_tm_init_hw(hdev,(_Bool)1);
}

#line 1485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_tm.c"
int hclge_tm_vport_map_update(struct hclge_dev *hdev)
{
  #line 1488 
  int ret;
  #line 1487 
  struct hclge_vport *vport = hdev->vport;
  #line 1490 
  hclge_tm_vport_tc_info_update(vport);
  #line 1492 
  ret = hclge_vport_q_to_qs_map(hdev,vport);
  #line 1493 
  if (ret != 0) 
                #line 1494 
                return ret;
  #line 1496 
  if (((unsigned long)hdev->flag & 4UL) == 0UL) 
                                                #line 1497 
                                                return 0;
  #line 1499 
  return hclge_tm_bp_setup(hdev);
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 70 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device *, char * , ...);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 18 
void *memset(void *, int, size_t);
#line 944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
#line 944 
struct hclge_vport *hclge_get_vport(struct hnae3_handle *handle);
#line 967 
#line 967 
int hclge_buffer_alloc(struct hclge_dev *hdev);
#line 968 
#line 968 
int hclge_rss_init_hw(struct hclge_dev *hdev);
#line 969 
#line 969 
void hclge_rss_indir_init_cfg(struct hclge_dev *hdev);
#line 981 
#line 981 
int hclge_notify_client(struct hclge_dev *hdev, enum hnae3_reset_notify_type type);
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c"
static int hclge_ieee_ets_to_tm_info(struct hclge_dev *hdev, struct ieee_ets *ets)
{
  #line 13 
  u8 i;
  #line 15 
  i = (unsigned char)0U;
  #line 15 
  while ((unsigned int)i <= 7U) {
    #line 16 
    switch ((int)ets->tc_tsa[(int)i]) {
      #line 17 
      case 0: 
              #line 17 
      ;
      #line 18 
      hdev->tm_info.tc_info[(int)i].tc_sch_mode = (unsigned char)0U;
      #line 20 
      hdev->tm_info.pg_info[0].tc_dwrr[(int)i] = (unsigned char)0U;
      #line 21 
      break;
      #line 22 
      case 2: 
              #line 22 
      ;
      #line 23 
      hdev->tm_info.tc_info[(int)i].tc_sch_mode = (unsigned char)1U;
      #line 25 
      hdev->tm_info.pg_info[0].tc_dwrr[(int)i] = ets->tc_tx_bw[(int)i];
      #line 27 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 34 
      return -22;
    }
    #line 15 
    i = (u8)((int)i + 1);
  }
  #line 38 
  hclge_tm_prio_tc_info_update(hdev,(u8 *)(& ets->prio_tc));
  #line 40 
  return 0;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c"
static void hclge_tm_info_to_ieee_ets(struct hclge_dev *hdev, struct ieee_ets *ets)
{
  #line 46 
  u32 i;
  #line 48 
  memset((void *)ets,0,59UL);
  #line 49 
  ets->willing = (unsigned char)1U;
  #line 50 
  ets->ets_cap = hdev->tc_max;
  #line 52 
  i = 0U;
  #line 52 
  while (i <= 7U) {
    #line 53 
    ets->prio_tc[i] = hdev->tm_info.prio_tc[i];
    #line 54 
    ets->tc_tx_bw[i] = hdev->tm_info.pg_info[0].tc_dwrr[i];
    #line 56 
    if ((unsigned int)hdev->tm_info.tc_info[i].tc_sch_mode == 0U) 
                                                                  #line 58 
                                                                  ets->tc_tsa[i] = (unsigned char)0U; else 
                                                                    #line 60 
                                                                    ets->tc_tsa[i] = (unsigned char)2U;
    #line 52 
    i ++;
  }
  #line 62 
  return;
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c"
static int hclge_ieee_getets(struct hnae3_handle *h, struct ieee_ets *ets)
{
  #line 67 
  struct hclge_vport *vport = hclge_get_vport(h);
  #line 68 
  struct hclge_dev *hdev = vport->back;
  #line 70 
  hclge_tm_info_to_ieee_ets(hdev,ets);
  #line 72 
  return 0;
}

#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c"
static int hclge_dcb_common_validate(struct hclge_dev *hdev, u8 num_tc, u8 *prio_tc)
{
  #line 78 
  int i;
  #line 80 
  if ((int)hdev->tc_max < (int)num_tc) {
    #line 81 
    _dev_err(& (hdev->pdev)->dev,(char *)"tc num checking failed, %u > tc_max(%u)\n",(int)num_tc,(int)hdev->tc_max);
    #line 84 
    return -22;
  }
  #line 87 
  i = 0;
  #line 87 
  while (i <= 7) {
    #line 88 
    if ((int)*(prio_tc + (unsigned long)i) >= (int)num_tc) {
      #line 89 
      _dev_err(& (hdev->pdev)->dev,(char *)"prio_tc[%d] checking failed, %u >= num_tc(%u)\n",i,(int)*(prio_tc + (unsigned long)i),(int)num_tc);
      #line 92 
      return -22;
    }
    #line 87 
    i ++;
  }
  #line 96 
  if ((int)((unsigned short)num_tc) > (int)(hdev->vport)->alloc_tqps) {
    #line 97 
    _dev_err(& (hdev->pdev)->dev,(char *)"allocated tqp checking failed, %u > tqp(%u)\n",(int)num_tc,(int)(hdev->vport)->alloc_tqps);
    #line 100 
    return -22;
  }
  #line 103 
  return 0;
}

#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c"
static int hclge_ets_validate(struct hclge_dev *hdev, struct ieee_ets *ets, u8 *tc, bool *changed)
{
  #line 112 
  int ret;
  #line 113 
  u8 i;
  #line 109 
  bool has_ets_tc = (_Bool)0;
  #line 110 
  u32 total_ets_bw = 0U;
  #line 111 
  u8 max_tc = (unsigned char)0U;
  #line 115 
  i = (unsigned char)0U;
  #line 115 
  while ((unsigned int)i <= 7U) {
    #line 116 
    if ((int)ets->prio_tc[(int)i] != (int)hdev->tm_info.prio_tc[(int)i]) 
      #line 117 
      *changed = (_Bool)1;
    #line 119 
    if ((int)ets->prio_tc[(int)i] > (int)max_tc) 
                                                 #line 120 
                                                 max_tc = ets->prio_tc[(int)i];
    #line 115 
    i = (u8)((int)i + 1);
  }
  #line 123 
  ret = hclge_dcb_common_validate(hdev,(unsigned char)((int)((unsigned int)max_tc + 1U)),(u8 *)(& ets->prio_tc));
  #line 124 
  if (ret != 0) 
                #line 125 
                return ret;
  #line 127 
  i = (unsigned char)0U;
  #line 127 
  while ((int)hdev->tc_max > (int)i) {
    #line 128 
    switch ((int)ets->tc_tsa[(int)i]) {
      #line 129 
      case 0: 
              #line 129 
      ;
      #line 130 
      if ((unsigned int)hdev->tm_info.tc_info[(int)i].tc_sch_mode != 0U) 
        #line 132 
        *changed = (_Bool)1;
      #line 133 
      break;
      #line 134 
      case 2: 
              #line 134 
      ;
      #line 135 
      if ((unsigned int)hdev->tm_info.tc_info[(int)i].tc_sch_mode != 1U) 
        #line 137 
        *changed = (_Bool)1;
      #line 139 
      total_ets_bw = (unsigned int)ets->tc_tx_bw[(int)i] + total_ets_bw;
      #line 140 
      has_ets_tc = (_Bool)1;
      #line 141 
      break;
      #line 142 
      default: 
               #line 142 
      ;
      #line 143 
      return -22;
    }
    #line 127 
    i = (u8)((int)i + 1);
  }
  #line 147 
  if ((int)has_ets_tc != 0 && total_ets_bw != 100U) 
                                                    #line 148 
                                                    return -22;
  #line 150 
  *tc = (unsigned char)((unsigned int)max_tc + 1U);
  #line 151 
  if ((int)*tc != (int)hdev->tm_info.num_tc) 
                                             #line 152 
                                             *changed = (_Bool)1;
  #line 154 
  return 0;
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c"
static int hclge_map_update(struct hclge_dev *hdev)
{
  #line 159 
  int ret;
  #line 161 
  ret = hclge_tm_schd_setup_hw(hdev);
  #line 162 
  if (ret != 0) 
                #line 163 
                return ret;
  #line 165 
  ret = hclge_pause_setup_hw(hdev,(_Bool)0);
  #line 166 
  if (ret != 0) 
                #line 167 
                return ret;
  #line 169 
  ret = hclge_buffer_alloc(hdev);
  #line 170 
  if (ret != 0) 
                #line 171 
                return ret;
  #line 173 
  hclge_rss_indir_init_cfg(hdev);
  #line 175 
  return hclge_rss_init_hw(hdev);
}

#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c"
static int hclge_client_setup_tc(struct hclge_dev *hdev)
{
  #line 181 
  struct hnae3_client *client;
  #line 182 
  struct hnae3_handle *handle;
  #line 183 
  int ret;
  #line 184 
  u32 i;
  #line 180 
  struct hclge_vport *vport = hdev->vport;
  #line 186 
  i = 0U;
  #line 186 
  while ((unsigned int)((int)hdev->num_vmdq_vport + 1) > i) {
    #line 187 
    handle = & (vport + (unsigned long)i)->nic;
    #line 188 
    client = handle->client;
    #line 190 
    if ((client == (struct hnae3_client *)0 || client->ops == (struct hnae3_client_ops *)0) || (client->ops)->setup_tc == (int (*)(struct hnae3_handle *, u8 ))0) 
      #line 191 
      goto __Cont;
    #line 193 
    ret = (*((client->ops)->setup_tc))(handle,(unsigned char)((int)hdev->tm_info.num_tc));
    #line 194 
    if (ret != 0) 
                  #line 195 
                  return ret;
    #line 186 
    __Cont: 
            #line 186 
    i ++;
  }
  #line 198 
  return 0;
}

#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c"
static int hclge_notify_down_uinit(struct hclge_dev *hdev)
{
  #line 203 
  int ret;
  #line 205 
  ret = hclge_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_DOWN_CLIENT);
  #line 206 
  if (ret != 0) 
                #line 207 
                return ret;
  #line 209 
  return hclge_notify_client(hdev,
                          (enum hnae3_reset_notify_type)HNAE3_UNINIT_CLIENT);
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c"
static int hclge_notify_init_up(struct hclge_dev *hdev)
{
  #line 214 
  int ret;
  #line 216 
  ret = hclge_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_INIT_CLIENT);
  #line 217 
  if (ret != 0) 
                #line 218 
                return ret;
  #line 220 
  return hclge_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_UP_CLIENT);
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c"
static int hclge_ieee_setets(struct hnae3_handle *h, struct ieee_ets *ets)
{
  #line 230 
  int ret;
  #line 225 
  struct hclge_vport *vport = hclge_get_vport(h);
  #line 226 
  struct net_device *netdev = h->__anonCompField_hnae3_handle_167.kinfo.netdev;
  #line 227 
  struct hclge_dev *hdev = vport->back;
  #line 228 
  bool map_changed = (_Bool)0;
  #line 229 
  u8 num_tc = (unsigned char)0U;
  #line 232 
  if (((int)hdev->dcbx_cap & 8) == 0 || ((unsigned long)hdev->flag & 8UL) != 0UL) 
    #line 234 
    return -22;
  #line 236 
  ret = hclge_ets_validate(hdev,ets,& num_tc,& map_changed);
  #line 237 
  if (ret != 0) 
                #line 238 
                return ret;
  #line 240 
  if ((int)map_changed != 0) {
    #line 241 
    if ((h->msg_enable & 1U) != 0U) {
      #line 241 
      bool branch;
      #line 241 
      struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"hclge", .function = (char *)"hclge_ieee_setets", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c", .format = (char *)"set ets\n", .lineno = (unsigned int)241U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 241 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
      #line 241 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 241 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,netdev,(char *)"set ets\n");
    }
    #line 243 
    ret = hclge_notify_down_uinit(hdev);
    #line 244 
    if (ret != 0) 
                  #line 245 
                  return ret;
  }
  #line 248 
  hclge_tm_schd_info_update(hdev,(unsigned char)((int)num_tc));
  #line 250 
  ret = hclge_ieee_ets_to_tm_info(hdev,ets);
  #line 251 
  if (ret != 0) 
                #line 252 
                goto err_out;
  #line 254 
  if ((int)map_changed != 0) {
    #line 255 
    ret = hclge_map_update(hdev);
    #line 256 
    if (ret != 0) 
                  #line 257 
                  goto err_out;
    #line 259 
    ret = hclge_client_setup_tc(hdev);
    #line 260 
    if (ret != 0) 
                  #line 261 
                  goto err_out;
    #line 263 
    ret = hclge_notify_init_up(hdev);
    #line 264 
    if (ret != 0) 
                  #line 265 
                  return ret;
  }
  #line 268 
  return hclge_tm_dwrr_cfg(hdev);
  #line 270 
  err_out: 
           #line 270 
  ;
  #line 271 
  if (! map_changed) 
                     #line 272 
                     return ret;
  #line 274 
  hclge_notify_init_up(hdev);
  #line 276 
  return ret;
}

#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c"
static int hclge_ieee_getpfc(struct hnae3_handle *h, struct ieee_pfc *pfc)
{
  #line 281 
  u64 requests[8U];
  #line 281 
  u64 indications[8U];
  #line 284 
  u8 i;
  #line 284 
  u8 j;
  #line 284 
  u8 pfc_map;
  #line 284 
  u8 *prio_tc;
  #line 285 
  int ret;
  #line 282 
  struct hclge_vport *vport = hclge_get_vport(h);
  #line 283 
  struct hclge_dev *hdev = vport->back;
  #line 287 
  memset((void *)pfc,0,136UL);
  #line 288 
  pfc->pfc_cap = hdev->pfc_max;
  #line 289 
  prio_tc = (u8 *)(& hdev->tm_info.prio_tc);
  #line 290 
  pfc_map = hdev->tm_info.hw_pfc_map;
  #line 293 
  i = (unsigned char)0U;
  #line 293 
  while ((int)hdev->tm_info.num_tc > (int)i) {
    #line 294 
    j = (unsigned char)0U;
    #line 294 
    while ((unsigned int)j <= 7U) {
      #line 295 
      if ((int)*(prio_tc + (unsigned long)j) == (int)i && (((unsigned long)pfc_map >> (int)i) & 1UL) != 0UL) 
        #line 296 
        pfc->pfc_en = (unsigned char)((int)pfc->pfc_en | (int)((unsigned char)(1UL << (int)j)));
      #line 294 
      j = (u8)((int)j + 1);
    }
    #line 293 
    i = (u8)((int)i + 1);
  }
  #line 300 
  ret = hclge_pfc_tx_stats_get(hdev,(u64 *)(& requests));
  #line 301 
  if (ret != 0) 
                #line 302 
                return ret;
  #line 304 
  ret = hclge_pfc_rx_stats_get(hdev,(u64 *)(& indications));
  #line 305 
  if (ret != 0) 
                #line 306 
                return ret;
  #line 308 
  i = (unsigned char)0U;
  #line 308 
  while ((unsigned int)i <= 7U) {
    #line 309 
    pfc->requests[(int)i] = requests[(int)i];
    #line 310 
    pfc->indications[(int)i] = indications[(int)i];
    #line 308 
    i = (u8)((int)i + 1);
  }
  #line 312 
  return 0;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c"
static int hclge_ieee_setpfc(struct hnae3_handle *h, struct ieee_pfc *pfc)
{
  #line 320 
  u8 i;
  #line 320 
  u8 j;
  #line 320 
  u8 pfc_map;
  #line 320 
  u8 *prio_tc;
  #line 321 
  int ret;
  #line 317 
  struct hclge_vport *vport = hclge_get_vport(h);
  #line 318 
  struct net_device *netdev = h->__anonCompField_hnae3_handle_167.kinfo.netdev;
  #line 319 
  struct hclge_dev *hdev = vport->back;
  #line 323 
  if (((int)hdev->dcbx_cap & 8) == 0 || ((unsigned long)hdev->flag & 8UL) != 0UL) 
    #line 325 
    return -22;
  #line 327 
  if ((int)pfc->pfc_en == (int)hdev->tm_info.pfc_en) 
                                                     #line 328 
                                                     return 0;
  #line 330 
  prio_tc = (u8 *)(& hdev->tm_info.prio_tc);
  #line 331 
  pfc_map = (unsigned char)0U;
  #line 333 
  i = (unsigned char)0U;
  #line 333 
  while ((int)hdev->tm_info.num_tc > (int)i) {
    #line 334 
    j = (unsigned char)0U;
    #line 334 
    while ((unsigned int)j <= 7U) {
      #line 335 
      if ((int)*(prio_tc + (unsigned long)j) == (int)i && (((unsigned long)pfc->pfc_en >> (int)j) & 1UL) != 0UL) {
        #line 336 
        pfc_map = (unsigned char)((int)((unsigned char)(1UL << (int)i)) | (int)pfc_map);
        #line 337 
        break;
      }
      #line 334 
      j = (u8)((int)j + 1);
    }
    #line 333 
    i = (u8)((int)i + 1);
  }
  #line 342 
  hdev->tm_info.hw_pfc_map = pfc_map;
  #line 343 
  hdev->tm_info.pfc_en = pfc->pfc_en;
  #line 345 
  if ((h->msg_enable & 1U) != 0U) {
    #line 345 
    bool branch;
    #line 345 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"hclge", .function = (char *)"hclge_ieee_setpfc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c", .format = (char *)"set pfc: pfc_en=%x, pfc_map=%x, num_tc=%u\n", .lineno = (unsigned int)345U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 345 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 345 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 345 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,netdev,(char *)"set pfc: pfc_en=%x, pfc_map=%x, num_tc=%u\n",(int)pfc->pfc_en,(int)pfc_map,(int)hdev->tm_info.num_tc);
  }
  #line 349 
  hclge_tm_pfc_info_update(hdev);
  #line 351 
  ret = hclge_pause_setup_hw(hdev,(_Bool)0);
  #line 352 
  if (ret != 0) 
                #line 353 
                return ret;
  #line 355 
  ret = hclge_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_DOWN_CLIENT);
  #line 356 
  if (ret != 0) 
                #line 357 
                return ret;
  #line 359 
  ret = hclge_buffer_alloc(hdev);
  #line 360 
  if (ret != 0) {
    #line 361 
    hclge_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_UP_CLIENT);
    #line 362 
    return ret;
  }
  #line 365 
  return hclge_notify_client(hdev,
                            (enum hnae3_reset_notify_type)HNAE3_UP_CLIENT);
}

#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c"
static u8 hclge_getdcbx(struct hnae3_handle *h)
{
  #line 371 
  struct hclge_vport *vport = hclge_get_vport(h);
  #line 372 
  struct hclge_dev *hdev = vport->back;
  #line 374 
  if (((unsigned long)hdev->flag & 8UL) != 0UL) 
                                                #line 375 
                                                return (unsigned char)0U;
  #line 377 
  return hdev->dcbx_cap;
}

#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c"
static u8 hclge_setdcbx(struct hnae3_handle *h, u8 mode)
{
  #line 382 
  struct hclge_vport *vport = hclge_get_vport(h);
  #line 383 
  struct net_device *netdev = h->__anonCompField_hnae3_handle_167.kinfo.netdev;
  #line 384 
  struct hclge_dev *hdev = vport->back;
  #line 386 
  if ((h->msg_enable & 1U) != 0U) {
    #line 386 
    bool branch;
    #line 386 
    struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"hclge", .function = (char *)"hclge_setdcbx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c", .format = (char *)"set dcbx: mode=%u\n", .lineno = (unsigned int)386U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 386 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
    #line 386 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 386 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,netdev,(char *)"set dcbx: mode=%u\n",(int)mode);
  }
  #line 389 
  if ((((int)mode & 2) != 0 || ((int)mode & 4) != 0) || ((int)mode & 1) == 0) 
    #line 392 
    return (unsigned char)1U;
  #line 394 
  hdev->dcbx_cap = mode;
  #line 396 
  return (unsigned char)0U;
}

#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c"
static int hclge_setup_tc(struct hnae3_handle *h, u8 tc, u8 *prio_tc)
{
  #line 404 
  int ret;
  #line 402 
  struct hclge_vport *vport = hclge_get_vport(h);
  #line 403 
  struct hclge_dev *hdev = vport->back;
  #line 406 
  if (((unsigned long)hdev->flag & 4UL) != 0UL) 
                                                #line 407 
                                                return -22;
  #line 409 
  ret = hclge_dcb_common_validate(hdev,(unsigned char)((int)tc),prio_tc);
  #line 410 
  if (ret != 0) 
                #line 411 
                return -22;
  #line 413 
  ret = hclge_notify_down_uinit(hdev);
  #line 414 
  if (ret != 0) 
                #line 415 
                return ret;
  #line 417 
  hclge_tm_schd_info_update(hdev,(unsigned char)((int)tc));
  #line 418 
  hclge_tm_prio_tc_info_update(hdev,prio_tc);
  #line 420 
  ret = hclge_tm_init_hw(hdev,(_Bool)0);
  #line 421 
  if (ret != 0) 
                #line 422 
                goto err_out;
  #line 424 
  ret = hclge_client_setup_tc(hdev);
  #line 425 
  if (ret != 0) 
                #line 426 
                goto err_out;
  #line 428 
  hdev->flag &= 4294967291U;
  #line 430 
  if ((unsigned int)tc > 1U) 
                             #line 431 
                             hdev->flag |= 8U; else 
                                                    #line 433 
                                                    hdev->flag &= 4294967287U;
  #line 435 
  return hclge_notify_init_up(hdev);
  #line 437 
  err_out: 
           #line 437 
  ;
  #line 438 
  hclge_notify_init_up(hdev);
  #line 440 
  return ret;
}

#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c"
static struct hnae3_dcb_ops hns3_dcb_ops = {.ieee_getets = & hclge_ieee_getets, .ieee_setets = & hclge_ieee_setets, .ieee_getpfc = & hclge_ieee_getpfc, .ieee_setpfc = & hclge_ieee_setpfc, .getdcbx = & hclge_getdcbx, .setdcbx = & hclge_setdcbx, .setup_tc = & hclge_setup_tc};
#line 453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_dcb.c"
void hclge_dcb_ops_set(struct hclge_dev *hdev)
{
  #line 456 
  struct hnae3_knic_private_info *kinfo;
  #line 455 
  struct hclge_vport *vport = hdev->vport;
  #line 461 
  if (((hdev->ae_dev)->flag & 4U) == 0U || (unsigned int)vport->vport_id != 0U) 
    #line 463 
    return;
  #line 465 
  kinfo = & vport->nic.__anonCompField_hnae3_handle_167.kinfo;
  #line 466 
  kinfo->dcb_ops = & hns3_dcb_ops;
  #line 467 
  hdev->dcbx_cap = (unsigned char)9U;
  #line 468 
  return;
}

/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_err.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 607 
#line 392  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_err.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/clock.h"
#line 21 
u64 sched_clock_cpu(int);
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/clock.h"
__inline static u64 local_clock(void)
{
  #line 84 
  int pscr_ret__;
  {
    #line 84 
    void *__vpp_verify = (void *)0;
    #line 84 
    void *tmp = __vpp_verify;
  }
  #line 84 
  switch (4UL) {
    #line 84 
    int pfo_ret___0;
    #line 84 
    int pfo_ret___1;
    #line 84 
    int pfo_ret___2;
    #line 84 
    int pfo_ret__;
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    switch (4UL) {
      #line 84 
      case (unsigned long)1: 
                             #line 84 
      ;
      #line 85 
      ldv_inline_asm();
      #line 84 
      break;
      #line 84 
      case (unsigned long)2: 
                             #line 84 
      ;
      #line 85 
      ldv_inline_asm();
      #line 84 
      break;
      #line 84 
      case (unsigned long)4: 
                             #line 84 
      ;
      #line 85 
      ldv_inline_asm();
      #line 84 
      break;
      #line 84 
      case (unsigned long)8: 
                             #line 84 
      ;
      #line 85 
      ldv_inline_asm();
      #line 84 
      break;
      #line 84 
      default: 
               #line 84 
      ;
      #line 84 
      __bad_percpu_size();
    }
    #line 84 
    pscr_ret__ = pfo_ret__;
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    switch (4UL) {
      #line 84 
      case (unsigned long)1: 
                             #line 84 
      ;
      #line 85 
      ldv_inline_asm();
      #line 84 
      break;
      #line 84 
      case (unsigned long)2: 
                             #line 84 
      ;
      #line 85 
      ldv_inline_asm();
      #line 84 
      break;
      #line 84 
      case (unsigned long)4: 
                             #line 84 
      ;
      #line 85 
      ldv_inline_asm();
      #line 84 
      break;
      #line 84 
      case (unsigned long)8: 
                             #line 84 
      ;
      #line 85 
      ldv_inline_asm();
      #line 84 
      break;
      #line 84 
      default: 
               #line 84 
      ;
      #line 84 
      __bad_percpu_size();
    }
    #line 84 
    pscr_ret__ = pfo_ret___0;
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    switch (4UL) {
      #line 84 
      case (unsigned long)1: 
                             #line 84 
      ;
      #line 85 
      ldv_inline_asm();
      #line 84 
      break;
      #line 84 
      case (unsigned long)2: 
                             #line 84 
      ;
      #line 85 
      ldv_inline_asm();
      #line 84 
      break;
      #line 84 
      case (unsigned long)4: 
                             #line 84 
      ;
      #line 85 
      ldv_inline_asm();
      #line 84 
      break;
      #line 84 
      case (unsigned long)8: 
                             #line 84 
      ;
      #line 85 
      ldv_inline_asm();
      #line 84 
      break;
      #line 84 
      default: 
               #line 84 
      ;
      #line 84 
      __bad_percpu_size();
    }
    #line 84 
    pscr_ret__ = pfo_ret___1;
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    switch (4UL) {
      #line 84 
      case (unsigned long)1: 
                             #line 84 
      ;
      #line 85 
      ldv_inline_asm();
      #line 84 
      break;
      #line 84 
      case (unsigned long)2: 
                             #line 84 
      ;
      #line 85 
      ldv_inline_asm();
      #line 84 
      break;
      #line 84 
      case (unsigned long)4: 
                             #line 84 
      ;
      #line 85 
      ldv_inline_asm();
      #line 84 
      break;
      #line 84 
      case (unsigned long)8: 
                             #line 84 
      ;
      #line 85 
      ldv_inline_asm();
      #line 84 
      break;
      #line 84 
      default: 
               #line 84 
      ;
      #line 84 
      __bad_percpu_size();
    }
    #line 84 
    pscr_ret__ = pfo_ret___2;
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_size_call_parameter();
    #line 84 
    break;
  }
  #line 84 
  return sched_clock_cpu(pscr_ret__);
}

#line 787  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kfifo.h"
#line 787 
unsigned int __kfifo_in_r(struct __kfifo *, void *, unsigned int, size_t);
#line 1091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
__inline static u32 hclge_read_reg(u8 *base, u32 reg)
{
  #line 1094 
  union __anonunion___u_2150 __u;
  #line 1093 
  __read_once_size((void *)(& base),(void *)(& __u.__c),8);
  #line 1093 
  u8 *reg_addr = (__u.__val);
  #line 1095 
  return readl((void *)(reg_addr + (unsigned long)reg));
}

#line 1105 
#line 1105 
void hclge_cmd_reuse_desc(struct hclge_desc *desc, bool is_read);
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
#line 961 
int hclge_inform_reset_assert_to_vf(struct hclge_vport *vport);
#line 1001 
#line 1001 
void hclge_report_hw_error(struct hclge_dev *hdev, enum hnae3_hw_error_type type);
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.h"
#line 907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
int hclge_config_mac_tnl_int(struct hclge_dev *hdev, bool en);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.h"
#line 1618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
int hclge_config_nic_hw_error(struct hclge_dev *hdev, bool state);
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.h"
#line 1545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
int hclge_config_rocee_ras_interrupt(struct hclge_dev *hdev, bool en);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.h"
#line 1960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
void hclge_handle_all_hns_hw_errors(struct hnae3_ae_dev *ae_dev);
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.h"
#line 1635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
pci_ers_result_t hclge_handle_hw_ras_error(struct hnae3_ae_dev *ae_dev);
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.h"
#line 1946  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
int hclge_handle_hw_msix_error(struct hclge_dev *hdev, unsigned long *reset_requests);
#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_imp_tcm_ecc_int[10U] = {{.int_msk = 2U, .msg = (char *)"imp_itcm0_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 8U, .msg = (char *)"imp_itcm1_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 32U, .msg = (char *)"imp_itcm2_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 128U, .msg = (char *)"imp_itcm3_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 512U, .msg = (char *)"imp_dtcm0_mem0_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 2048U, .msg = (char *)"imp_dtcm0_mem1_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 8192U, .msg = (char *)"imp_dtcm1_mem0_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 32768U, .msg = (char *)"imp_dtcm1_mem1_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 131072U, .msg = (char *)"imp_itcm4_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_cmdq_nic_mem_ecc_int[17U] = {{.int_msk = 2U, .msg = (char *)"cmdq_nic_rx_depth_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 8U, .msg = (char *)"cmdq_nic_tx_depth_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 32U, .msg = (char *)"cmdq_nic_rx_tail_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 128U, .msg = (char *)"cmdq_nic_tx_tail_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 512U, .msg = (char *)"cmdq_nic_rx_head_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 2048U, .msg = (char *)"cmdq_nic_tx_head_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 8192U, .msg = (char *)"cmdq_nic_rx_addr_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 32768U, .msg = (char *)"cmdq_nic_tx_addr_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 131072U, .msg = (char *)"cmdq_rocee_rx_depth_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 524288U, .msg = (char *)"cmdq_rocee_tx_depth_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 2097152U, .msg = (char *)"cmdq_rocee_rx_tail_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 8388608U, .msg = (char *)"cmdq_rocee_tx_tail_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 33554432U, .msg = (char *)"cmdq_rocee_rx_head_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 134217728U, .msg = (char *)"cmdq_rocee_tx_head_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 536870912U, .msg = (char *)"cmdq_rocee_rx_addr_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 2147483648U, .msg = (char *)"cmdq_rocee_tx_addr_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_tqp_int_ecc_int[7U] = {{.int_msk = 64U, .msg = (char *)"tqp_int_cfg_even_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 128U, .msg = (char *)"tqp_int_cfg_odd_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 256U, .msg = (char *)"tqp_int_ctrl_even_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 512U, .msg = (char *)"tqp_int_ctrl_odd_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 1024U, .msg = (char *)"tx_que_scan_int_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 2048U, .msg = (char *)"rx_que_scan_int_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_msix_sram_ecc_int[3U] = {{.int_msk = 2U, .msg = (char *)"msix_nic_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 8U, .msg = (char *)"msix_rocee_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_igu_int[3U] = {{.int_msk = 1U, .msg = (char *)"igu_rx_buf0_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4U, .msg = (char *)"igu_rx_buf1_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_igu_egu_tnl_int[7U] = {{.int_msk = 1U, .msg = (char *)"rx_buf_overflow", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2U, .msg = (char *)"rx_stp_fifo_overflow", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4U, .msg = (char *)"rx_stp_fifo_underflow", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8U, .msg = (char *)"tx_buf_overflow", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16U, .msg = (char *)"tx_buf_underrun", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 32U, .msg = (char *)"rx_stp_buf_overflow", .reset_level = HNAE3_GLOBAL_RESET}};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_ncsi_err_int[2U] = {{.int_msk = 2U, .msg = (char *)"ncsi_tx_ecc_mbit_err", .reset_level = HNAE3_NONE_RESET}};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_ppp_mpf_abnormal_int_st1[32U] = {{.int_msk = 1U, .msg = (char *)"vf_vlan_ad_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2U, .msg = (char *)"umv_mcast_group_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4U, .msg = (char *)"umv_key_mem0_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8U, .msg = (char *)"umv_key_mem1_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16U, .msg = (char *)"umv_key_mem2_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 32U, .msg = (char *)"umv_key_mem3_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 64U, .msg = (char *)"umv_ad_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 128U, .msg = (char *)"rss_tc_mode_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 256U, .msg = (char *)"rss_idt_mem0_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 512U, .msg = (char *)"rss_idt_mem1_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 1024U, .msg = (char *)"rss_idt_mem2_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2048U, .msg = (char *)"rss_idt_mem3_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4096U, .msg = (char *)"rss_idt_mem4_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8192U, .msg = (char *)"rss_idt_mem5_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16384U, .msg = (char *)"rss_idt_mem6_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 32768U, .msg = (char *)"rss_idt_mem7_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 65536U, .msg = (char *)"rss_idt_mem8_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 131072U, .msg = (char *)"rss_idt_mem9_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 262144U, .msg = (char *)"rss_idt_mem10_ecc_m1bit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 524288U, .msg = (char *)"rss_idt_mem11_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 1048576U, .msg = (char *)"rss_idt_mem12_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2097152U, .msg = (char *)"rss_idt_mem13_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4194304U, .msg = (char *)"rss_idt_mem14_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8388608U, .msg = (char *)"rss_idt_mem15_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16777216U, .msg = (char *)"port_vlan_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 33554432U, .msg = (char *)"mcast_linear_table_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 67108864U, .msg = (char *)"mcast_result_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 134217728U, .msg = (char *)"flow_director_ad_mem0_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 268435456U, .msg = (char *)"flow_director_ad_mem1_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 536870912U, .msg = (char *)"rx_vlan_tag_memory_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 1073741824U, .msg = (char *)"Tx_UP_mapping_config_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}};
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_ppp_pf_abnormal_int[3U] = {{.int_msk = 1U, .msg = (char *)"tx_vlan_tag_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 2U, .msg = (char *)"rss_list_tc_unassigned_queue_err", .reset_level = HNAE3_NONE_RESET}};
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_ppp_mpf_abnormal_int_st3[7U] = {{.int_msk = 1U, .msg = (char *)"hfs_fifo_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2U, .msg = (char *)"rslt_descr_fifo_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4U, .msg = (char *)"tx_vlan_tag_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8U, .msg = (char *)"FD_CN0_memory_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16U, .msg = (char *)"FD_CN1_memory_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 32U, .msg = (char *)"GRO_AD_memory_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}};
#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_tm_sch_rint[32U] = {{.int_msk = 2U, .msg = (char *)"tm_sch_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4U, .msg = (char *)"tm_sch_port_shap_sub_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8U, .msg = (char *)"tm_sch_port_shap_sub_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16U, .msg = (char *)"tm_sch_pg_pshap_sub_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 32U, .msg = (char *)"tm_sch_pg_pshap_sub_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 64U, .msg = (char *)"tm_sch_pg_cshap_sub_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 128U, .msg = (char *)"tm_sch_pg_cshap_sub_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 256U, .msg = (char *)"tm_sch_pri_pshap_sub_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 512U, .msg = (char *)"tm_sch_pri_pshap_sub_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 1024U, .msg = (char *)"tm_sch_pri_cshap_sub_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2048U, .msg = (char *)"tm_sch_pri_cshap_sub_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4096U, .msg = (char *)"tm_sch_port_shap_offset_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8192U, .msg = (char *)"tm_sch_port_shap_offset_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16384U, .msg = (char *)"tm_sch_pg_pshap_offset_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 32768U, .msg = (char *)"tm_sch_pg_pshap_offset_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 65536U, .msg = (char *)"tm_sch_pg_cshap_offset_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 131072U, .msg = (char *)"tm_sch_pg_cshap_offset_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 262144U, .msg = (char *)"tm_sch_pri_pshap_offset_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 524288U, .msg = (char *)"tm_sch_pri_pshap_offset_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 1048576U, .msg = (char *)"tm_sch_pri_cshap_offset_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2097152U, .msg = (char *)"tm_sch_pri_cshap_offset_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4194304U, .msg = (char *)"tm_sch_rq_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8388608U, .msg = (char *)"tm_sch_rq_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16777216U, .msg = (char *)"tm_sch_nq_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 33554432U, .msg = (char *)"tm_sch_nq_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 67108864U, .msg = (char *)"tm_sch_roce_up_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 134217728U, .msg = (char *)"tm_sch_roce_up_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 268435456U, .msg = (char *)"tm_sch_rcb_byte_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 536870912U, .msg = (char *)"tm_sch_rcb_byte_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 1073741824U, .msg = (char *)"tm_sch_ssu_byte_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2147483648U, .msg = (char *)"tm_sch_ssu_byte_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_qcn_fifo_rint[19U] = {{.int_msk = 1U, .msg = (char *)"qcn_shap_gp0_sch_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2U, .msg = (char *)"qcn_shap_gp0_sch_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4U, .msg = (char *)"qcn_shap_gp1_sch_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8U, .msg = (char *)"qcn_shap_gp1_sch_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16U, .msg = (char *)"qcn_shap_gp2_sch_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 32U, .msg = (char *)"qcn_shap_gp2_sch_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 64U, .msg = (char *)"qcn_shap_gp3_sch_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 128U, .msg = (char *)"qcn_shap_gp3_sch_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 256U, .msg = (char *)"qcn_shap_gp0_offset_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 512U, .msg = (char *)"qcn_shap_gp0_offset_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 1024U, .msg = (char *)"qcn_shap_gp1_offset_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2048U, .msg = (char *)"qcn_shap_gp1_offset_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4096U, .msg = (char *)"qcn_shap_gp2_offset_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8192U, .msg = (char *)"qcn_shap_gp2_offset_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16384U, .msg = (char *)"qcn_shap_gp3_offset_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 32768U, .msg = (char *)"qcn_shap_gp3_offset_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 65536U, .msg = (char *)"qcn_byte_info_fifo_rd_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 131072U, .msg = (char *)"qcn_byte_info_fifo_wr_err", .reset_level = HNAE3_GLOBAL_RESET}};
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_qcn_ecc_rint[12U] = {{.int_msk = 2U, .msg = (char *)"qcn_byte_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8U, .msg = (char *)"qcn_time_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 32U, .msg = (char *)"qcn_fb_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 128U, .msg = (char *)"qcn_link_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 512U, .msg = (char *)"qcn_rate_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2048U, .msg = (char *)"qcn_tmplt_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8192U, .msg = (char *)"qcn_shap_cfg_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 32768U, .msg = (char *)"qcn_gp0_barrel_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 131072U, .msg = (char *)"qcn_gp1_barrel_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 524288U, .msg = (char *)"qcn_gp2_barrel_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2097152U, .msg = (char *)"qcn_gp3_barral_mem_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}};
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_mac_afifo_tnl_int[15U] = {{.int_msk = 1U, .msg = (char *)"egu_cge_afifo_ecc_1bit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 2U, .msg = (char *)"egu_cge_afifo_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4U, .msg = (char *)"egu_lge_afifo_ecc_1bit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 8U, .msg = (char *)"egu_lge_afifo_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16U, .msg = (char *)"cge_igu_afifo_ecc_1bit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 32U, .msg = (char *)"cge_igu_afifo_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 64U, .msg = (char *)"lge_igu_afifo_ecc_1bit_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 128U, .msg = (char *)"lge_igu_afifo_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 256U, .msg = (char *)"cge_igu_afifo_overflow_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 512U, .msg = (char *)"lge_igu_afifo_overflow_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 1024U, .msg = (char *)"egu_cge_afifo_underrun_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2048U, .msg = (char *)"egu_lge_afifo_underrun_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4096U, .msg = (char *)"egu_ge_afifo_underrun_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8192U, .msg = (char *)"ge_igu_afifo_overflow_err", .reset_level = HNAE3_GLOBAL_RESET}};
#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_ppu_mpf_abnormal_int_st2[20U] = {{.int_msk = 8192U, .msg = (char *)"rpu_rx_pkt_bit32_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16384U, .msg = (char *)"rpu_rx_pkt_bit33_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 32768U, .msg = (char *)"rpu_rx_pkt_bit34_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 65536U, .msg = (char *)"rpu_rx_pkt_bit35_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 131072U, .msg = (char *)"rcb_tx_ring_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 262144U, .msg = (char *)"rcb_rx_ring_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 524288U, .msg = (char *)"rcb_tx_fbd_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 1048576U, .msg = (char *)"rcb_rx_ebd_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2097152U, .msg = (char *)"rcb_tso_info_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4194304U, .msg = (char *)"rcb_tx_int_info_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8388608U, .msg = (char *)"rcb_rx_int_info_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16777216U, .msg = (char *)"tpu_tx_pkt_0_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 33554432U, .msg = (char *)"tpu_tx_pkt_1_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 67108864U, .msg = (char *)"rd_bus_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 134217728U, .msg = (char *)"wr_bus_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 268435456U, .msg = (char *)"reg_search_miss", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 536870912U, .msg = (char *)"rx_q_search_miss", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 1073741824U, .msg = (char *)"ooo_ecc_err_detect", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 2147483648U, .msg = (char *)"ooo_ecc_err_multpl", .reset_level = HNAE3_GLOBAL_RESET}};
#line 414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_ppu_mpf_abnormal_int_st3[5U] = {{.int_msk = 16U, .msg = (char *)"gro_bd_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 32U, .msg = (char *)"gro_context_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 64U, .msg = (char *)"rx_stash_cfg_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 128U, .msg = (char *)"axi_rd_fbd_ecc_mbit_err", .reset_level = HNAE3_GLOBAL_RESET}};
#line 426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_ppu_pf_abnormal_int[7U] = {{.int_msk = 1U, .msg = (char *)"over_8bd_no_fe", .reset_level = HNAE3_FUNC_RESET}, {.int_msk = 2U, .msg = (char *)"tso_mss_cmp_min_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 4U, .msg = (char *)"tso_mss_cmp_max_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 8U, .msg = (char *)"tx_rd_fbd_poison", .reset_level = HNAE3_FUNC_RESET}, {.int_msk = 16U, .msg = (char *)"rx_rd_ebd_poison", .reset_level = HNAE3_FUNC_RESET}, {.int_msk = 32U, .msg = (char *)"buf_wait_timeout", .reset_level = HNAE3_NONE_RESET}};
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_ssu_com_err_int[11U] = {{.int_msk = 1U, .msg = (char *)"buf_sum_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 2U, .msg = (char *)"ppp_mb_num_err", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 4U, .msg = (char *)"ppp_mbid_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8U, .msg = (char *)"ppp_rlt_mac_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16U, .msg = (char *)"ppp_rlt_host_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 32U, .msg = (char *)"cks_edit_position_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 64U, .msg = (char *)"cks_edit_condition_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 128U, .msg = (char *)"vlan_edit_condition_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 256U, .msg = (char *)"vlan_num_ot_err", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 512U, .msg = (char *)"vlan_num_in_err", .reset_level = HNAE3_GLOBAL_RESET}};
#line 470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_ssu_mem_ecc_err_int[33U] = {{.int_msk = 1U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 32U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 64U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 128U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 256U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 512U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 1024U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2048U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4096U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8192U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16384U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 32768U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 65536U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 131072U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 262144U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 524288U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 1048576U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2097152U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4194304U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8388608U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16777216U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 33554432U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 67108864U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 134217728U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 268435456U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 536870912U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 1073741824U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2147483648U, .msg = (char *)"ssu_mem", .reset_level = HNAE3_GLOBAL_RESET}};
#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_ssu_port_based_err_int[14U] = {{.int_msk = 1U, .msg = (char *)"roc_pkt_without_key_port", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2U, .msg = (char *)"tpu_pkt_without_key_port", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4U, .msg = (char *)"igu_pkt_without_key_port", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8U, .msg = (char *)"roc_eof_mis_match_port", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16U, .msg = (char *)"tpu_eof_mis_match_port", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 32U, .msg = (char *)"igu_eof_mis_match_port", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 64U, .msg = (char *)"roc_sof_mis_match_port", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 128U, .msg = (char *)"tpu_sof_mis_match_port", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 256U, .msg = (char *)"igu_sof_mis_match_port", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2048U, .msg = (char *)"ets_rd_int_rx_port", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4096U, .msg = (char *)"ets_wr_int_rx_port", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8192U, .msg = (char *)"ets_rd_int_tx_port", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16384U, .msg = (char *)"ets_wr_int_tx_port", .reset_level = HNAE3_GLOBAL_RESET}};
#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_ssu_fifo_overflow_int[25U] = {{.int_msk = 1U, .msg = (char *)"ig_mac_inf_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2U, .msg = (char *)"ig_host_inf_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4U, .msg = (char *)"ig_roc_buf_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8U, .msg = (char *)"ig_host_data_fifo_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16U, .msg = (char *)"ig_host_key_fifo_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 32U, .msg = (char *)"tx_qcn_fifo_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 64U, .msg = (char *)"rx_qcn_fifo_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 128U, .msg = (char *)"tx_pf_rd_fifo_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 256U, .msg = (char *)"rx_pf_rd_fifo_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 512U, .msg = (char *)"qm_eof_fifo_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 1024U, .msg = (char *)"mb_rlt_fifo_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2048U, .msg = (char *)"dup_uncopy_fifo_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4096U, .msg = (char *)"dup_cnt_rd_fifo_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8192U, .msg = (char *)"dup_cnt_drop_fifo_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 16384U, .msg = (char *)"dup_cnt_wrb_fifo_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 32768U, .msg = (char *)"host_cmd_fifo_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 65536U, .msg = (char *)"mac_cmd_fifo_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 131072U, .msg = (char *)"host_cmd_bitmap_empty_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 262144U, .msg = (char *)"mac_cmd_bitmap_empty_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 524288U, .msg = (char *)"dup_bitmap_empty_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 1048576U, .msg = (char *)"out_queue_bitmap_empty_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2097152U, .msg = (char *)"bank2_bitmap_empty_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4194304U, .msg = (char *)"bank1_bitmap_empty_int", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8388608U, .msg = (char *)"bank0_bitmap_empty_int", .reset_level = HNAE3_GLOBAL_RESET}};
#line 588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_ssu_ets_tcg_int[5U] = {{.int_msk = 1U, .msg = (char *)"ets_rd_int_rx_tcg", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 2U, .msg = (char *)"ets_wr_int_rx_tcg", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 4U, .msg = (char *)"ets_rd_int_tx_tcg", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 8U, .msg = (char *)"ets_wr_int_tx_tcg", .reset_level = HNAE3_GLOBAL_RESET}};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_ssu_port_based_pf_int[4U] = {{.int_msk = 1U, .msg = (char *)"roc_pkt_without_key_port", .reset_level = HNAE3_GLOBAL_RESET}, {.int_msk = 512U, .msg = (char *)"low_water_line_err_port", .reset_level = HNAE3_NONE_RESET}, {.int_msk = 1024U, .msg = (char *)"hi_water_line_err_port", .reset_level = HNAE3_GLOBAL_RESET}};
#line 610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_error hclge_rocee_qmm_ovf_err_int[21U] = {{.msg = (char *)"rocee qmm ovf: sgid invalid err"}, {.int_msk = 4U, .msg = (char *)"rocee qmm ovf: sgid ovf err"}, {.int_msk = 8U, .msg = (char *)"rocee qmm ovf: smac invalid err"}, {.int_msk = 12U, .msg = (char *)"rocee qmm ovf: smac ovf err"}, {.int_msk = 16U, .msg = (char *)"rocee qmm ovf: cqc invalid err"}, {.int_msk = 17U, .msg = (char *)"rocee qmm ovf: cqc ovf err"}, {.int_msk = 18U, .msg = (char *)"rocee qmm ovf: cqc hopnum err"}, {.int_msk = 19U, .msg = (char *)"rocee qmm ovf: cqc ba0 err"}, {.int_msk = 20U, .msg = (char *)"rocee qmm ovf: srqc invalid err"}, {.int_msk = 21U, .msg = (char *)"rocee qmm ovf: srqc ovf err"}, {.int_msk = 22U, .msg = (char *)"rocee qmm ovf: srqc hopnum err"}, {.int_msk = 23U, .msg = (char *)"rocee qmm ovf: srqc ba0 err"}, {.int_msk = 24U, .msg = (char *)"rocee qmm ovf: mpt invalid err"}, {.int_msk = 25U, .msg = (char *)"rocee qmm ovf: mpt ovf err"}, {.int_msk = 26U, .msg = (char *)"rocee qmm ovf: mpt hopnum err"}, {.int_msk = 27U, .msg = (char *)"rocee qmm ovf: mpt ba0 err"}, {.int_msk = 28U, .msg = (char *)"rocee qmm ovf: qpc invalid err"}, {.int_msk = 29U, .msg = (char *)"rocee qmm ovf: qpc ovf err"}, {.int_msk = 30U, .msg = (char *)"rocee qmm ovf: qpc hopnum err"}, {.int_msk = 31U, .msg = (char *)"rocee qmm ovf: qpc ba0 err"}};
#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static void hclge_log_error(struct device *dev, char *reg, struct hclge_hw_error *err, u32 err_sts, unsigned long *reset_requests)
{
  #line 638 
  while (err->msg != (char *)0) {
    #line 639 
    if ((err->int_msk & err_sts) != 0U) {
      #line 640 
      _dev_err(dev,(char *)"%s %s found [error status=0x%x]\n",reg,err->msg,err_sts);
      #line 642 
      if (err->reset_level != (unsigned int)HNAE3_VF_RESET && err->reset_level != (unsigned int)HNAE3_NONE_RESET) 
        #line 644 
        cif_set_bit((long)err->reset_level,reset_requests);
    }
    #line 646 
    err ++;
  }
  #line 648 
  return;
}

#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_cmd_query_error(struct hclge_dev *hdev, struct hclge_desc *desc, u32 cmd, u16 flag)
{
  #line 663 
  int ret;
  #line 661 
  struct device *dev = & (hdev->pdev)->dev;
  #line 662 
  int desc_num = 1;
  #line 665 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)cmd,(_Bool)1);
  #line 666 
  if ((unsigned int)flag != 0U) {
    #line 667 
    desc->flag = (unsigned short)((int)desc->flag | (int)flag);
    #line 668 
    hclge_cmd_setup_basic_desc(desc + 1U,(enum hclge_opcode_type)cmd,(_Bool)1);
    #line 669 
    desc_num = 2;
  }
  #line 672 
  ret = hclge_cmd_send(& hdev->hw,desc,desc_num);
  #line 673 
  if (ret != 0) 
                #line 674 
                _dev_err(dev,(char *)"query error cmd failed (%d)\n",ret);
  #line 676 
  return ret;
}

#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_clear_mac_tnl_int(struct hclge_dev *hdev)
{
  #line 681 
  struct hclge_desc desc;
  #line 683 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_CLEAR_MAC_TNL_INT,(_Bool)0);
  #line 684 
  desc.data[0] = 1023U;
  #line 686 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 689  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_config_common_hw_err_int(struct hclge_dev *hdev, bool en)
{
  #line 692 
  struct hclge_desc desc[2U];
  #line 693 
  int ret;
  #line 691 
  struct device *dev = & (hdev->pdev)->dev;
  #line 696 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_COMMON_ECC_INT_CFG,(_Bool)0);
  #line 697 
  desc[0].flag = (unsigned short)((unsigned int)desc[0].flag | 4U);
  #line 698 
  hclge_cmd_setup_basic_desc(& desc[1],(enum hclge_opcode_type)HCLGE_COMMON_ECC_INT_CFG,(_Bool)0);
  #line 700 
  if ((int)en != 0) {
    #line 701 
    desc[0].data[0] = 4294901760U;
    #line 702 
    desc[0].data[2] = 4294967295U;
    #line 704 
    desc[0].data[3] = 256U;
    #line 705 
    desc[0].data[4] = 251662335U;
    #line 707 
    desc[0].data[5] = 768U;
  }
  #line 710 
  desc[1].data[0] = 4294901760U;
  #line 711 
  desc[1].data[2] = 4294967295U;
  #line 713 
  desc[1].data[3] = 256U;
  #line 714 
  desc[1].data[4] = 251662335U;
  #line 716 
  desc[1].data[5] = 768U;
  #line 718 
  ret = hclge_cmd_send(& hdev->hw,desc,2);
  #line 719 
  if (ret != 0) 
                #line 720 
                _dev_err(dev,(char *)"fail(%d) to configure common err interrupts\n",ret);
  #line 723 
  return ret;
}

#line 726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_config_ncsi_hw_err_int(struct hclge_dev *hdev, bool en)
{
  #line 729 
  struct hclge_desc desc;
  #line 730 
  int ret;
  #line 728 
  struct device *dev = & (hdev->pdev)->dev;
  #line 732 
  if ((unsigned int)(hdev->pdev)->revision <= 32U) 
                                                   #line 733 
                                                   return 0;
  #line 736 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_NCSI_INT_EN,(_Bool)0);
  #line 737 
  if ((int)en != 0) 
                    #line 738 
                    desc.data[0] = 3U;
  #line 740 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 741 
  if (ret != 0) 
                #line 742 
                _dev_err(dev,(char *)"fail(%d) to configure  NCSI error interrupts\n",ret);
  #line 745 
  return ret;
}

#line 748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_config_igu_egu_hw_err_int(struct hclge_dev *hdev, bool en)
{
  #line 751 
  struct hclge_desc desc;
  #line 752 
  int ret;
  #line 750 
  struct device *dev = & (hdev->pdev)->dev;
  #line 755 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_IGU_COMMON_INT_EN,(_Bool)0);
  #line 756 
  if ((int)en != 0) 
                    #line 757 
                    desc.data[0] = 1647U;
  #line 759 
  desc.data[1] = 15U;
  #line 761 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 762 
  if (ret != 0) {
    #line 763 
    _dev_err(dev,(char *)"fail(%d) to configure IGU common interrupts\n",ret);
    #line 765 
    return ret;
  }
  #line 768 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_IGU_EGU_TNL_INT_EN,(_Bool)0);
  #line 769 
  if ((int)en != 0) 
                    #line 770 
                    desc.data[0] = 174783U;
  #line 772 
  desc.data[1] = 63U;
  #line 774 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 775 
  if (ret != 0) {
    #line 776 
    _dev_err(dev,(char *)"fail(%d) to configure IGU-EGU TNL interrupts\n",ret);
    #line 778 
    return ret;
  }
  #line 781 
  ret = hclge_config_ncsi_hw_err_int(hdev,(_Bool)((bool)((int)en) != 0));
  #line 783 
  return ret;
}

#line 786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_config_ppp_error_interrupt(struct hclge_dev *hdev, u32 cmd, bool en)
{
  #line 790 
  struct hclge_desc desc[2U];
  #line 791 
  int ret;
  #line 789 
  struct device *dev = & (hdev->pdev)->dev;
  #line 794 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)cmd,(_Bool)0);
  #line 795 
  desc[0].flag = (unsigned short)((unsigned int)desc[0].flag | 4U);
  #line 796 
  hclge_cmd_setup_basic_desc(& desc[1],(enum hclge_opcode_type)cmd,(_Bool)0);
  #line 798 
  if (cmd == 8448U) {
    #line 799 
    if ((int)en != 0) {
      #line 800 
      desc[0].data[0] = 4294967295U;
      #line 802 
      desc[0].data[1] = 4294967295U;
      #line 804 
      desc[0].data[4] = 3U;
    }
    #line 807 
    desc[1].data[0] = 4294967295U;
    #line 809 
    desc[1].data[1] = 4294967295U;
    #line 811 
    if ((unsigned int)(hdev->pdev)->revision > 32U) 
                                                    #line 812 
                                                    desc[1].data[2] = 3U;
  }
  else 
    #line 814 
    if (cmd == 8449U) {
      #line 815 
      if ((int)en != 0) {
        #line 816 
        desc[0].data[0] = 63U;
        #line 818 
        desc[0].data[1] = 63U;
      }
      #line 822 
      desc[1].data[0] = 63U;
      #line 824 
      desc[1].data[1] = 63U;
    }
  #line 828 
  ret = hclge_cmd_send(& hdev->hw,desc,2);
  #line 829 
  if (ret != 0) 
                #line 830 
                _dev_err(dev,(char *)"fail(%d) to configure PPP error intr\n",ret);
  #line 832 
  return ret;
}

#line 835  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_config_ppp_hw_err_int(struct hclge_dev *hdev, bool en)
{
  #line 837 
  int ret;
  #line 839 
  ret = hclge_config_ppp_error_interrupt(hdev,8448U,(_Bool)((bool)((int)en) != 0));
  #line 841 
  if (ret != 0) 
                #line 842 
                return ret;
  #line 844 
  ret = hclge_config_ppp_error_interrupt(hdev,8449U,(_Bool)((bool)((int)en) != 0));
  #line 847 
  return ret;
}

#line 850  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_config_tm_hw_err_int(struct hclge_dev *hdev, bool en)
{
  #line 853 
  struct hclge_desc desc;
  #line 854 
  int ret;
  #line 852 
  struct device *dev = & (hdev->pdev)->dev;
  #line 857 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_TM_SCH_ECC_INT_EN,(_Bool)0);
  #line 858 
  if ((int)en != 0) 
                    #line 859 
                    desc.data[0] = 3U;
  #line 861 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 862 
  if (ret != 0) {
    #line 863 
    _dev_err(dev,(char *)"fail(%d) to configure TM SCH errors\n",ret);
    #line 864 
    return ret;
  }
  #line 868 
  ret = hclge_cmd_query_error(hdev,& desc,6676U,(unsigned short)0);
  #line 869 
  if (ret != 0) {
    #line 870 
    _dev_err(dev,(char *)"fail(%d) to read TM QCN CFG status\n",ret);
    #line 871 
    return ret;
  }
  #line 874 
  hclge_cmd_reuse_desc(& desc,(_Bool)0);
  #line 875 
  if ((int)en != 0) 
                    #line 876 
                    desc.data[1] = 16777215U;
  #line 878 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 879 
  if (ret != 0) 
                #line 880 
                _dev_err(dev,(char *)"fail(%d) to configure TM QCN mem errors\n",ret);
  #line 883 
  return ret;
}

#line 886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_config_mac_err_int(struct hclge_dev *hdev, bool en)
{
  #line 889 
  struct hclge_desc desc;
  #line 890 
  int ret;
  #line 888 
  struct device *dev = & (hdev->pdev)->dev;
  #line 893 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_MAC_COMMON_INT_EN,(_Bool)0);
  #line 894 
  if ((int)en != 0) 
                    #line 895 
                    desc.data[0] = 67583U;
  #line 897 
  desc.data[1] = 67583U;
  #line 899 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 900 
  if (ret != 0) 
                #line 901 
                _dev_err(dev,(char *)"fail(%d) to configure MAC COMMON error intr\n",ret);
  #line 904 
  return ret;
}

#line 907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
int hclge_config_mac_tnl_int(struct hclge_dev *hdev, bool en)
{
  #line 909 
  struct hclge_desc desc;
  #line 911 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_MAC_TNL_INT_EN,(_Bool)0);
  #line 912 
  if ((int)en != 0) 
                    #line 913 
                    desc.data[0] = 1023U; else 
                                               #line 915 
                                               desc.data[0] = 0U;
  #line 917 
  desc.data[1] = 1023U;
  #line 919 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 922  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_config_ppu_error_interrupts(struct hclge_dev *hdev, u32 cmd, bool en)
{
  #line 926 
  struct hclge_desc desc[2U];
  #line 928 
  int ret;
  #line 925 
  struct device *dev = & (hdev->pdev)->dev;
  #line 927 
  int desc_num = 1;
  #line 931 
  if (cmd == 2880U) {
    #line 932 
    hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)cmd,(_Bool)0);
    #line 933 
    desc[0].flag = (unsigned short)((unsigned int)desc[0].flag | 4U);
    #line 934 
    hclge_cmd_setup_basic_desc(& desc[1],(enum hclge_opcode_type)cmd,(_Bool)0);
    #line 935 
    if ((int)en != 0) {
      #line 936 
      desc[0].data[0] = 4294967295U;
      #line 938 
      desc[0].data[1] = 4294967295U;
      #line 940 
      desc[1].data[3] = 255U;
      #line 942 
      desc[1].data[4] = 1073692671U;
    }
    #line 946 
    desc[1].data[0] = 4294967295U;
    #line 948 
    desc[1].data[1] = 4294967295U;
    #line 950 
    desc[1].data[2] = 1073692671U;
    #line 952 
    desc[1].data[3] |= 16711680U;
    #line 954 
    desc_num = 2;
  }
  else 
    #line 955 
    if (cmd == 2881U) {
      #line 956 
      hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)cmd,(_Bool)0);
      #line 957 
      if ((int)en != 0) 
                        #line 958 
                        desc[0].data[0] = 11U;
      #line 961 
      desc[0].data[2] = 11U;
    }
    else 
      #line 963 
      if (cmd == 2882U) {
        #line 964 
        hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)cmd,(_Bool)0);
        #line 965 
        if ((int)en != 0) 
                          #line 966 
                          desc[0].data[0] = 63U;
        #line 969 
        desc[0].data[2] = 63U;
      }
      else {
        #line 972 
        _dev_err(dev,(char *)"Invalid cmd to configure PPU error interrupts\n");
        #line 973 
        return -22;
      }
  #line 976 
  ret = hclge_cmd_send(& hdev->hw,desc,desc_num);
  #line 978 
  return ret;
}

#line 981  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_config_ppu_hw_err_int(struct hclge_dev *hdev, bool en)
{
  #line 984 
  int ret;
  #line 983 
  struct device *dev = & (hdev->pdev)->dev;
  #line 986 
  ret = hclge_config_ppu_error_interrupts(hdev,2880U,(_Bool)((bool)((int)en) != 0));
  #line 988 
  if (ret != 0) {
    #line 989 
    _dev_err(dev,(char *)"fail(%d) to configure PPU MPF ECC error intr\n",ret);
    #line 991 
    return ret;
  }
  #line 994 
  ret = hclge_config_ppu_error_interrupts(hdev,2881U,(_Bool)((bool)((int)en) != 0));
  #line 997 
  if (ret != 0) {
    #line 998 
    _dev_err(dev,(char *)"fail(%d) to configure PPU MPF other intr\n",ret);
    #line 999 
    return ret;
  }
  #line 1002 
  ret = hclge_config_ppu_error_interrupts(hdev,2882U,(_Bool)((bool)((int)en) != 0));
  #line 1004 
  if (ret != 0) 
                #line 1005 
                _dev_err(dev,(char *)"fail(%d) to configure PPU PF error interrupts\n",ret);
  #line 1007 
  return ret;
}

#line 1010  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_config_ssu_hw_err_int(struct hclge_dev *hdev, bool en)
{
  #line 1013 
  struct hclge_desc desc[2U];
  #line 1014 
  int ret;
  #line 1012 
  struct device *dev = & (hdev->pdev)->dev;
  #line 1017 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_SSU_ECC_INT_CMD,(_Bool)0);
  #line 1018 
  desc[0].flag = (unsigned short)((unsigned int)desc[0].flag | 4U);
  #line 1019 
  hclge_cmd_setup_basic_desc(& desc[1],(enum hclge_opcode_type)HCLGE_SSU_ECC_INT_CMD,(_Bool)0);
  #line 1020 
  if ((int)en != 0) {
    #line 1021 
    desc[0].data[0] = 4294967295U;
    #line 1022 
    desc[0].data[1] = 4294967295U;
    #line 1024 
    desc[0].data[4] = 257U;
  }
  #line 1027 
  desc[1].data[0] = 4294967295U;
  #line 1028 
  desc[1].data[1] = 4294967295U;
  #line 1029 
  desc[1].data[2] = 257U;
  #line 1031 
  ret = hclge_cmd_send(& hdev->hw,desc,2);
  #line 1032 
  if (ret != 0) {
    #line 1033 
    _dev_err(dev,(char *)"fail(%d) to configure SSU ECC error interrupt\n",ret);
    #line 1035 
    return ret;
  }
  #line 1039 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_SSU_COMMON_INT_CMD,(_Bool)0);
  #line 1040 
  desc[0].flag = (unsigned short)((unsigned int)desc[0].flag | 4U);
  #line 1041 
  hclge_cmd_setup_basic_desc(& desc[1],(enum hclge_opcode_type)HCLGE_SSU_COMMON_INT_CMD,(_Bool)0);
  #line 1043 
  if ((int)en != 0) {
    #line 1044 
    if ((unsigned int)(hdev->pdev)->revision > 32U) 
                                                    #line 1045 
                                                    desc[0].data[0] = 1023U; else 
                                                                    #line 1048 
                                                                    desc[0].data[0] = 991U;
    #line 1050 
    desc[0].data[1] = 3071U;
    #line 1051 
    desc[0].data[2] = 16777215U;
  }
  #line 1055 
  desc[1].data[0] = 201262079U;
  #line 1057 
  desc[1].data[1] = 16777215U;
  #line 1059 
  ret = hclge_cmd_send(& hdev->hw,desc,2);
  #line 1060 
  if (ret != 0) 
                #line 1061 
                _dev_err(dev,(char *)"fail(%d) to configure SSU COMMON error intr\n",ret);
  #line 1064 
  return ret;
}

#line 1075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_query_bd_num(struct hclge_dev *hdev, bool is_ras, int *mpf_bd_num, int *pf_bd_num)
{
  #line 1079 
  u32 mpf_min_bd_num;
  #line 1079 
  u32 pf_min_bd_num;
  #line 1080 
  enum hclge_opcode_type opcode;
  #line 1081 
  struct hclge_desc desc_bd;
  #line 1082 
  int ret;
  #line 1078 
  struct device *dev = & (hdev->pdev)->dev;
  #line 1084 
  if ((int)is_ras != 0) {
    #line 1085 
    opcode = HCLGE_QUERY_RAS_INT_STS_BD_NUM;
    #line 1086 
    mpf_min_bd_num = 10U;
    #line 1087 
    pf_min_bd_num = 4U;
  }
  else {
    #line 1089 
    opcode = HCLGE_QUERY_MSIX_INT_STS_BD_NUM;
    #line 1090 
    mpf_min_bd_num = 10U;
    #line 1091 
    pf_min_bd_num = 4U;
  }
  #line 1094 
  hclge_cmd_setup_basic_desc(& desc_bd,opcode,(_Bool)1);
  #line 1095 
  ret = hclge_cmd_send(& hdev->hw,& desc_bd,1);
  #line 1096 
  if (ret != 0) {
    #line 1097 
    _dev_err(dev,(char *)"fail(%d) to query msix int status bd num\n",ret);
    #line 1099 
    return ret;
  }
  #line 1102 
  *mpf_bd_num = (int)desc_bd.data[0];
  #line 1103 
  *pf_bd_num = (int)desc_bd.data[1];
  #line 1104 
  if ((unsigned int)*mpf_bd_num < mpf_min_bd_num || (unsigned int)*pf_bd_num < pf_min_bd_num) {
    #line 1105 
    _dev_err(dev,(char *)"Invalid bd num: mpf(%d), pf(%d)\n",*mpf_bd_num,*pf_bd_num);
    #line 1107 
    return -22;
  }
  #line 1110 
  return 0;
}

#line 1121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_handle_mpf_ras_error(struct hclge_dev *hdev, struct hclge_desc *desc, int num)
{
  #line 1127 
  __le32 *desc_data;
  #line 1128 
  u32 status;
  #line 1129 
  int ret;
  #line 1125 
  struct hnae3_ae_dev *ae_dev = hdev->ae_dev;
  #line 1126 
  struct device *dev = & (hdev->pdev)->dev;
  #line 1132 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_QUERY_CLEAR_MPF_RAS_INT,(_Bool)1);
  #line 1134 
  ret = hclge_cmd_send(& hdev->hw,desc,num);
  #line 1135 
  if (ret != 0) {
    #line 1136 
    _dev_err(dev,(char *)"query all mpf ras int cmd failed (%d)\n",ret);
    #line 1137 
    return ret;
  }
  #line 1141 
  status = desc->data[0];
  #line 1142 
  if (status != 0U) 
                    #line 1143 
                    hclge_log_error(dev,(char *)"IMP_TCM_ECC_INT_STS",hclge_imp_tcm_ecc_int,status,& ae_dev->hw_err_reset_req);
  #line 1147 
  status = desc->data[1];
  #line 1148 
  if (status != 0U) 
                    #line 1149 
                    hclge_log_error(dev,(char *)"CMDQ_MEM_ECC_INT_STS",hclge_cmdq_nic_mem_ecc_int,status,& ae_dev->hw_err_reset_req);
  #line 1153 
  if (((unsigned long)desc->data[2] & 1UL) != 0UL) 
                                                   #line 1154 
                                                   _dev_warn(dev,(char *)"imp_rd_data_poison_err found\n");
  #line 1156 
  status = desc->data[3];
  #line 1157 
  if (status != 0U) 
                    #line 1158 
                    hclge_log_error(dev,(char *)"TQP_INT_ECC_INT_STS",hclge_tqp_int_ecc_int,status,& ae_dev->hw_err_reset_req);
  #line 1162 
  status = desc->data[4];
  #line 1163 
  if (status != 0U) 
                    #line 1164 
                    hclge_log_error(dev,(char *)"MSIX_ECC_INT_STS",hclge_msix_sram_ecc_int,status,& ae_dev->hw_err_reset_req);
  #line 1169 
  desc_data = (__le32 *)(desc + 2U);
  #line 1170 
  status = *(desc_data + 2U);
  #line 1171 
  if (status != 0U) 
                    #line 1172 
                    hclge_log_error(dev,(char *)"SSU_ECC_MULTI_BIT_INT_0",hclge_ssu_mem_ecc_err_int,status,& ae_dev->hw_err_reset_req);
  #line 1176 
  status = *(desc_data + 3U) & 1U;
  #line 1177 
  if (status != 0U) {
    #line 1178 
    _dev_err(dev,(char *)"SSU_ECC_MULTI_BIT_INT_1 ssu_mem32_ecc_mbit_err found [error status=0x%x]\n",status);
    #line 1180 
    cif_set_bit(6L,& ae_dev->hw_err_reset_req);
  }
  #line 1183 
  status = *(desc_data + 4U) & 1023U;
  #line 1184 
  if (status != 0U) 
                    #line 1185 
                    hclge_log_error(dev,(char *)"SSU_COMMON_ERR_INT",hclge_ssu_com_err_int,status,& ae_dev->hw_err_reset_req);
  #line 1190 
  desc_data = (__le32 *)(desc + 3U);
  #line 1191 
  status = *desc_data & 15U;
  #line 1192 
  if (status != 0U) 
                    #line 1193 
                    hclge_log_error(dev,(char *)"IGU_INT_STS",hclge_igu_int,status,& ae_dev->hw_err_reset_req);
  #line 1198 
  desc_data = (__le32 *)(desc + 4U);
  #line 1199 
  status = *(desc_data + 1U);
  #line 1200 
  if (status != 0U) 
                    #line 1201 
                    hclge_log_error(dev,(char *)"PPP_MPF_ABNORMAL_INT_ST1",hclge_ppp_mpf_abnormal_int_st1,status,& ae_dev->hw_err_reset_req);
  #line 1205 
  status = *(desc_data + 3U) & 63U;
  #line 1206 
  if (status != 0U) 
                    #line 1207 
                    hclge_log_error(dev,(char *)"PPP_MPF_ABNORMAL_INT_ST3",hclge_ppp_mpf_abnormal_int_st3,status,& ae_dev->hw_err_reset_req);
  #line 1212 
  desc_data = (__le32 *)(desc + 5U);
  #line 1213 
  status = *(desc_data + 1U);
  #line 1214 
  if (status != 0U) {
    #line 1215 
    _dev_err(dev,(char *)"PPU_MPF_ABNORMAL_INT_ST1 rpu_rx_pkt_ecc_mbit_err found\n");
    #line 1217 
    cif_set_bit(6L,& ae_dev->hw_err_reset_req);
  }
  #line 1220 
  status = *(desc_data + 2U);
  #line 1221 
  if (status != 0U) 
                    #line 1222 
                    hclge_log_error(dev,(char *)"PPU_MPF_ABNORMAL_INT_ST2",hclge_ppu_mpf_abnormal_int_st2,status,& ae_dev->hw_err_reset_req);
  #line 1226 
  status = *(desc_data + 3U) & 255U;
  #line 1227 
  if (status != 0U) 
                    #line 1228 
                    hclge_log_error(dev,(char *)"PPU_MPF_ABNORMAL_INT_ST3",hclge_ppu_mpf_abnormal_int_st3,status,& ae_dev->hw_err_reset_req);
  #line 1233 
  desc_data = (__le32 *)(desc + 6U);
  #line 1234 
  status = *desc_data;
  #line 1235 
  if (status != 0U) 
                    #line 1236 
                    hclge_log_error(dev,(char *)"TM_SCH_RINT",hclge_tm_sch_rint,status,& ae_dev->hw_err_reset_req);
  #line 1241 
  desc_data = (__le32 *)(desc + 7U);
  #line 1242 
  status = *desc_data & 262143U;
  #line 1243 
  if (status != 0U) 
                    #line 1244 
                    hclge_log_error(dev,(char *)"QCN_FIFO_RINT",hclge_qcn_fifo_rint,status,& ae_dev->hw_err_reset_req);
  #line 1248 
  status = *(desc_data + 1U) & 4194303U;
  #line 1249 
  if (status != 0U) 
                    #line 1250 
                    hclge_log_error(dev,(char *)"QCN_ECC_RINT",hclge_qcn_ecc_rint,status,& ae_dev->hw_err_reset_req);
  #line 1255 
  desc_data = (__le32 *)(desc + 9U);
  #line 1256 
  status = *desc_data & 3U;
  #line 1257 
  if (status != 0U) 
                    #line 1258 
                    hclge_log_error(dev,(char *)"NCSI_ECC_INT_RPT",hclge_ncsi_err_int,status,& ae_dev->hw_err_reset_req);
  #line 1263 
  hclge_cmd_reuse_desc(desc,(_Bool)0);
  #line 1264 
  ret = hclge_cmd_send(& hdev->hw,desc,num);
  #line 1265 
  if (ret != 0) 
                #line 1266 
                _dev_err(dev,(char *)"clear all mpf ras int cmd failed (%d)\n",ret);
  #line 1268 
  return ret;
}

#line 1279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_handle_pf_ras_error(struct hclge_dev *hdev, struct hclge_desc *desc, int num)
{
  #line 1285 
  __le32 *desc_data;
  #line 1286 
  u32 status;
  #line 1287 
  int ret;
  #line 1283 
  struct hnae3_ae_dev *ae_dev = hdev->ae_dev;
  #line 1284 
  struct device *dev = & (hdev->pdev)->dev;
  #line 1290 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_QUERY_CLEAR_PF_RAS_INT,(_Bool)1);
  #line 1292 
  ret = hclge_cmd_send(& hdev->hw,desc,num);
  #line 1293 
  if (ret != 0) {
    #line 1294 
    _dev_err(dev,(char *)"query all pf ras int cmd failed (%d)\n",ret);
    #line 1295 
    return ret;
  }
  #line 1299 
  status = desc->data[0];
  #line 1300 
  if (status != 0U) 
                    #line 1301 
                    hclge_log_error(dev,(char *)"SSU_PORT_BASED_ERR_INT",hclge_ssu_port_based_err_int,status,& ae_dev->hw_err_reset_req);
  #line 1305 
  status = desc->data[1];
  #line 1306 
  if (status != 0U) 
                    #line 1307 
                    hclge_log_error(dev,(char *)"SSU_FIFO_OVERFLOW_INT",hclge_ssu_fifo_overflow_int,status,& ae_dev->hw_err_reset_req);
  #line 1311 
  status = desc->data[2];
  #line 1312 
  if (status != 0U) 
                    #line 1313 
                    hclge_log_error(dev,(char *)"SSU_ETS_TCG_INT",hclge_ssu_ets_tcg_int,status,& ae_dev->hw_err_reset_req);
  #line 1318 
  desc_data = (__le32 *)(desc + 1U);
  #line 1319 
  status = *desc_data & 63U;
  #line 1320 
  if (status != 0U) 
                    #line 1321 
                    hclge_log_error(dev,(char *)"IGU_EGU_TNL_INT_STS",hclge_igu_egu_tnl_int,status,& ae_dev->hw_err_reset_req);
  #line 1326 
  desc_data = (__le32 *)(desc + 3U);
  #line 1327 
  status = *desc_data & 24U;
  #line 1328 
  if (status != 0U) {
    #line 1329 
    hclge_log_error(dev,(char *)"PPU_PF_ABNORMAL_INT_ST0",hclge_ppu_pf_abnormal_int,status,& ae_dev->hw_err_reset_req);
    #line 1332 
    hclge_report_hw_error(hdev,(enum hnae3_hw_error_type)HNAE3_PPU_POISON_ERROR);
  }
  #line 1336 
  hclge_cmd_reuse_desc(desc,(_Bool)0);
  #line 1337 
  ret = hclge_cmd_send(& hdev->hw,desc,num);
  #line 1338 
  if (ret != 0) 
                #line 1339 
                _dev_err(dev,(char *)"clear all pf ras int cmd failed (%d)\n",ret);
  #line 1341 
  return ret;
}

#line 1344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_handle_all_ras_errors(struct hclge_dev *hdev)
{
  #line 1355 
  unsigned int tmp;
  #line 1355 
  unsigned int __UNIQUE_ID___x442;
  #line 1346 
  u32 mpf_bd_num;
  #line 1346 
  u32 pf_bd_num;
  #line 1346 
  u32 bd_num;
  #line 1347 
  struct hclge_desc *desc;
  #line 1348 
  int ret;
  #line 1351 
  ret = hclge_query_bd_num(hdev,(_Bool)1,(int *)(& mpf_bd_num),(int *)(& pf_bd_num));
  #line 1352 
  if (ret != 0) 
                #line 1353 
                return ret;
  {
    #line 1355 
    __UNIQUE_ID___x442 = mpf_bd_num;
    #line 1355 
    unsigned int __UNIQUE_ID___y443 = pf_bd_num;
    #line 1355 
    if (__UNIQUE_ID___x442 > __UNIQUE_ID___y443) 
                                                 #line 1355 
                                                 tmp = __UNIQUE_ID___x442; else 
                                                                    #line 1355 
                                                                    tmp = __UNIQUE_ID___y443;
    }
  #line 1355 
  bd_num = tmp;
  #line 1356 
  desc = (struct hclge_desc *)kcalloc((unsigned long)bd_num,32UL,3264U);
  #line 1357 
  if (desc == (struct hclge_desc *)0) 
                                      #line 1358 
                                      return -12;
  #line 1361 
  ret = hclge_handle_mpf_ras_error(hdev,desc,(int)mpf_bd_num);
  #line 1362 
  if (ret != 0) {
    #line 1363 
    kfree((void *)desc);
    #line 1364 
    return ret;
  }
  #line 1366 
  memset((void *)desc,0,(unsigned long)bd_num * 32UL);
  #line 1369 
  ret = hclge_handle_pf_ras_error(hdev,desc,(int)pf_bd_num);
  #line 1370 
  kfree((void *)desc);
  #line 1372 
  return ret;
}

#line 1375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_log_rocee_axi_error(struct hclge_dev *hdev)
{
  #line 1378 
  struct hclge_desc desc[3U];
  #line 1379 
  int ret;
  #line 1377 
  struct device *dev = & (hdev->pdev)->dev;
  #line 1381 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_QUERY_ROCEE_AXI_RAS_INFO_CMD,(_Bool)1);
  #line 1383 
  hclge_cmd_setup_basic_desc(& desc[1],(enum hclge_opcode_type)HCLGE_QUERY_ROCEE_AXI_RAS_INFO_CMD,(_Bool)1);
  #line 1385 
  hclge_cmd_setup_basic_desc(& desc[2],(enum hclge_opcode_type)HCLGE_QUERY_ROCEE_AXI_RAS_INFO_CMD,(_Bool)1);
  #line 1387 
  desc[0].flag = (unsigned short)((unsigned int)desc[0].flag | 4U);
  #line 1388 
  desc[1].flag = (unsigned short)((unsigned int)desc[1].flag | 4U);
  #line 1390 
  ret = hclge_cmd_send(& hdev->hw,desc,3);
  #line 1391 
  if (ret != 0) {
    #line 1392 
    _dev_err(dev,(char *)"failed(%d) to query ROCEE AXI error sts\n",ret);
    #line 1393 
    return ret;
  }
  #line 1396 
  _dev_err(dev,(char *)"AXI1: %08X %08X %08X %08X %08X %08X\n",desc[0].data[0],desc[0].data[1],desc[0].data[2],desc[0].data[3],desc[0].data[4],desc[0].data[5]);
  #line 1400 
  _dev_err(dev,(char *)"AXI2: %08X %08X %08X %08X %08X %08X\n",desc[1].data[0],desc[1].data[1],desc[1].data[2],desc[1].data[3],desc[1].data[4],desc[1].data[5]);
  #line 1404 
  _dev_err(dev,(char *)"AXI3: %08X %08X %08X %08X\n",desc[2].data[0],desc[2].data[1],desc[2].data[2],desc[2].data[3]);
  #line 1408 
  return 0;
}

#line 1411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_log_rocee_ecc_error(struct hclge_dev *hdev)
{
  #line 1414 
  struct hclge_desc desc[2U];
  #line 1415 
  int ret;
  #line 1413 
  struct device *dev = & (hdev->pdev)->dev;
  #line 1417 
  ret = hclge_cmd_query_error(hdev,desc,5509U,(unsigned short)4);
  #line 1420 
  if (ret != 0) {
    #line 1421 
    _dev_err(dev,(char *)"failed(%d) to query ROCEE ECC error sts\n",ret);
    #line 1422 
    return ret;
  }
  #line 1425 
  _dev_err(dev,(char *)"ECC1: %08X %08X %08X %08X %08X %08X\n",desc[0].data[0],desc[0].data[1],desc[0].data[2],desc[0].data[3],desc[0].data[4],desc[0].data[5]);
  #line 1429 
  _dev_err(dev,(char *)"ECC2: %08X %08X %08X\n",desc[1].data[0],desc[1].data[1],desc[1].data[2]);
  #line 1432 
  return 0;
}

#line 1435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_log_rocee_ovf_error(struct hclge_dev *hdev)
{
  #line 1438 
  struct hclge_desc desc[2U];
  #line 1439 
  int ret;
  #line 1437 
  struct device *dev = & (hdev->pdev)->dev;
  #line 1442 
  ret = hclge_cmd_query_error(hdev,desc,5508U,(unsigned short)0);
  #line 1444 
  if (ret != 0) {
    #line 1445 
    _dev_err(dev,(char *)"failed(%d) to query ROCEE OVF error sts\n",ret);
    #line 1446 
    return ret;
  }
  #line 1450 
  if ((desc[0].data[0] & 65536U) != 0U) {
    #line 1451 
    struct hclge_hw_error *err;
    #line 1452 
    u32 err_sts;
    #line 1454 
    err = hclge_rocee_qmm_ovf_err_int;
    #line 1455 
    err_sts = desc[0].data[0] & 63U;
    #line 1457 
    while (err->msg != (char *)0) {
      #line 1458 
      if (err->int_msk == err_sts) {
        #line 1459 
        _dev_err(dev,(char *)"%s [error status=0x%x] found\n",err->msg,desc[0].data[0]);
        #line 1462 
        break;
      }
      #line 1464 
      err ++;
    }
  }
  #line 1468 
  if ((desc[0].data[1] & 65536U) != 0U) 
                                        #line 1469 
                                        _dev_err(dev,(char *)"ROCEE TSP OVF [error status=0x%x] found\n",desc[0].data[1]);
  #line 1473 
  if ((desc[0].data[2] & 65536U) != 0U) 
                                        #line 1474 
                                        _dev_err(dev,(char *)"ROCEE SCC OVF [error status=0x%x] found\n",desc[0].data[2]);
  #line 1478 
  return 0;
}

#line 1482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static enum hnae3_reset_type hclge_log_and_clear_rocee_ras_error(struct hclge_dev *hdev)
{
  #line 1486 
  struct hclge_desc desc[2U];
  #line 1487 
  unsigned int status;
  #line 1488 
  int ret;
  #line 1484 
  enum hnae3_reset_type reset_type = HNAE3_NONE_RESET;
  #line 1485 
  struct device *dev = & (hdev->pdev)->dev;
  #line 1491 
  ret = hclge_cmd_query_error(hdev,desc,5505U,(unsigned short)0);
  #line 1493 
  if (ret != 0) {
    #line 1494 
    _dev_err(dev,(char *)"failed(%d) to query ROCEE RAS INT SRC\n",ret);
    #line 1496 
    return HNAE3_GLOBAL_RESET;
  }
  #line 1499 
  status = desc[0].data[0];
  #line 1501 
  if (((unsigned long)status & 3UL) != 0UL) {
    #line 1502 
    if (((unsigned long)status & 1UL) != 0UL) 
                                              #line 1503 
                                              _dev_err(dev,(char *)"ROCEE RAS AXI rresp error\n");
    #line 1505 
    if (((unsigned long)status & 2UL) != 0UL) 
                                              #line 1506 
                                              _dev_err(dev,(char *)"ROCEE RAS AXI bresp error\n");
    #line 1508 
    reset_type = HNAE3_FUNC_RESET;
    #line 1510 
    ret = hclge_log_rocee_axi_error(hdev);
    #line 1511 
    if (ret != 0) 
                  #line 1512 
                  return HNAE3_GLOBAL_RESET;
  }
  #line 1515 
  if (((unsigned long)status & 4UL) != 0UL) {
    #line 1516 
    _dev_err(dev,(char *)"ROCEE RAS 2bit ECC error\n");
    #line 1517 
    reset_type = HNAE3_GLOBAL_RESET;
    #line 1519 
    ret = hclge_log_rocee_ecc_error(hdev);
    #line 1520 
    if (ret != 0) 
                  #line 1521 
                  return HNAE3_GLOBAL_RESET;
  }
  #line 1524 
  if (((unsigned long)status & 8UL) != 0UL) {
    #line 1525 
    ret = hclge_log_rocee_ovf_error(hdev);
    #line 1526 
    if (ret != 0) {
      #line 1527 
      _dev_err(dev,(char *)"failed(%d) to process ovf error\n",ret);
      #line 1529 
      return HNAE3_GLOBAL_RESET;
    }
  }
  #line 1534 
  hclge_cmd_reuse_desc(desc,(_Bool)0);
  #line 1535 
  ret = hclge_cmd_send(& hdev->hw,desc,1);
  #line 1536 
  if (ret != 0) {
    #line 1537 
    _dev_err(dev,(char *)"failed(%d) to clear ROCEE RAS error\n",ret);
    #line 1539 
    return HNAE3_GLOBAL_RESET;
  }
  #line 1542 
  return reset_type;
}

#line 1545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
int hclge_config_rocee_ras_interrupt(struct hclge_dev *hdev, bool en)
{
  #line 1548 
  struct hclge_desc desc;
  #line 1549 
  int ret;
  #line 1547 
  struct device *dev = & (hdev->pdev)->dev;
  #line 1551 
  if ((unsigned int)(hdev->pdev)->revision <= 32U || ((hdev->ae_dev)->flag & 2U) == 0U) 
    #line 1552 
    return 0;
  #line 1554 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_CONFIG_ROCEE_RAS_INT_EN,(_Bool)0);
  #line 1555 
  if ((int)en != 0) {
    #line 1557 
    desc.data[0] = 15U;
    #line 1558 
    desc.data[1] = 1U;
    #line 1560 
    hclge_log_and_clear_rocee_ras_error(hdev);
  }
  #line 1562 
  desc.data[2] = 15U;
  #line 1563 
  desc.data[3] = 1U;
  #line 1565 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 1566 
  if (ret != 0) 
                #line 1567 
                _dev_err(dev,(char *)"failed(%d) to config ROCEE RAS interrupt\n",ret);
  #line 1569 
  return ret;
}

#line 1572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static void hclge_handle_rocee_ras_error(struct hnae3_ae_dev *ae_dev)
{
  #line 1575 
  enum hnae3_reset_type reset_type;
  #line 1574 
  struct hclge_dev *hdev = (struct hclge_dev *)ae_dev->priv;
  #line 1577 
  if ((int)test_bit(9L,& hdev->state) != 0) 
                                            #line 1579 
                                            return;
  else 
    #line 1577 
    if ((unsigned int)(hdev->pdev)->revision <= 32U) 
                                                     #line 1579 
                                                     return;
  #line 1581 
  reset_type = hclge_log_and_clear_rocee_ras_error(hdev);
  #line 1582 
  if (reset_type != (unsigned int)HNAE3_NONE_RESET) 
                                                    #line 1583 
                                                    cif_set_bit((long)reset_type,& ae_dev->hw_err_reset_req);
  #line 1584 
  return;
}

#line 1586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static struct hclge_hw_blk hw_blk[8U] = {{.msk = 1U, .name = (char *)"IGU_EGU", .config_err_int = & hclge_config_igu_egu_hw_err_int}, {.msk = 2U, .name = (char *)"PPP", .config_err_int = & hclge_config_ppp_hw_err_int}, {.msk = 4U, .name = (char *)"SSU", .config_err_int = & hclge_config_ssu_hw_err_int}, {.msk = 8U, .name = (char *)"PPU", .config_err_int = & hclge_config_ppu_hw_err_int}, {.msk = 16U, .name = (char *)"TM", .config_err_int = & hclge_config_tm_hw_err_int}, {.msk = 32U, .name = (char *)"COMMON", .config_err_int = & hclge_config_common_hw_err_int}, {.msk = 256U, .name = (char *)"MAC", .config_err_int = & hclge_config_mac_err_int}};
#line 1618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
int hclge_config_nic_hw_error(struct hclge_dev *hdev, bool state)
{
  #line 1620 
  struct hclge_hw_blk *module = (struct hclge_hw_blk *)(& hw_blk);
  #line 1621 
  int ret = 0;
  #line 1623 
  while (module->name != (char *)0) {
    #line 1624 
    if (module->config_err_int != (int (*)(struct hclge_dev *, bool ))0) {
      #line 1625 
      ret = (*(module->config_err_int))(hdev,(_Bool)((bool)((int)state) != 0));
      #line 1626 
      if (ret != 0) 
                    #line 1627 
                    return ret;
    }
    #line 1629 
    module ++;
  }
  #line 1632 
  return ret;
}

#line 1635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
pci_ers_result_t hclge_handle_hw_ras_error(struct hnae3_ae_dev *ae_dev)
{
  #line 1639 
  u32 status;
  #line 1637 
  struct hclge_dev *hdev = (struct hclge_dev *)ae_dev->priv;
  #line 1638 
  struct device *dev = & (hdev->pdev)->dev;
  #line 1641 
  if (! test_bit(6L,& hdev->state)) {
    #line 1642 
    _dev_err(dev,(char *)"Can\'t recover - RAS error reported during dev init\n");
    #line 1644 
    return 1U;
  }
  #line 1647 
  status = hclge_read_reg((u8 *)hdev->hw.io_base,133888U);
  #line 1649 
  if ((status & 65280U) != 0U || (status & 50331648U) != 0U) 
                                                             #line 1651 
                                                             ae_dev->hw_err_reset_req = 0UL; else 
                                                                    #line 1653 
                                                                    goto out;
  #line 1656 
  if ((status & 65280U) != 0U) {
    #line 1657 
    _dev_err(dev,(char *)"HNS Non-Fatal RAS error(status=0x%x) identified\n",status);
    #line 1660 
    hclge_handle_all_ras_errors(hdev);
  }
  #line 1664 
  if ((unsigned int)(hdev->pdev)->revision > 32U && (status & 50331648U) != 0U) {
    #line 1666 
    _dev_err(dev,(char *)"ROCEE Non-Fatal RAS error identified\n");
    #line 1667 
    hclge_handle_rocee_ras_error(ae_dev);
  }
  #line 1670 
  if ((int)test_bit(9L,& hdev->state) != 0) 
                                            #line 1671 
                                            goto out;
  #line 1673 
  if (ae_dev->hw_err_reset_req != 0UL) 
                                       #line 1674 
                                       return 3U;
  #line 1676 
  out: 
       #line 1676 
  ;
  #line 1677 
  return 5U;
}

#line 1680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_clear_hw_msix_error(struct hclge_dev *hdev, struct hclge_desc *desc, bool is_mpf, u32 bd_num)
{
  #line 1684 
  if ((int)is_mpf != 0) 
                        #line 1685 
                        desc->opcode = (unsigned short)5396U; else 
                                                                   #line 1688 
                                                                   desc->opcode = (unsigned short)5397U;
  #line 1690 
  desc->flag = (unsigned short)17U;
  #line 1692 
  return hclge_cmd_send(& hdev->hw,desc,(int)bd_num);
}

#line 1704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_query_over_8bd_err_info(struct hclge_dev *hdev, u16 *vf_id, u16 *q_id)
{
  #line 1707 
  struct hclge_query_ppu_pf_other_int_dfx_cmd *req;
  #line 1708 
  struct hclge_desc desc;
  #line 1709 
  int ret;
  #line 1711 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_PPU_PF_OTHER_INT_DFX,(_Bool)1);
  #line 1712 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 1713 
  if (ret != 0) 
                #line 1714 
                return ret;
  #line 1716 
  req = (struct hclge_query_ppu_pf_other_int_dfx_cmd *)(& desc.data);
  #line 1717 
  *vf_id = req->over_8bd_no_fe_vf_id;
  #line 1718 
  *q_id = req->over_8bd_no_fe_qid;
  #line 1720 
  return 0;
}

#line 1730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static void hclge_handle_over_8bd_err(struct hclge_dev *hdev, unsigned long *reset_requests)
{
  #line 1734 
  u16 vf_id;
  #line 1735 
  u16 q_id;
  #line 1736 
  int ret;
  #line 1733 
  struct device *dev = & (hdev->pdev)->dev;
  #line 1738 
  ret = hclge_query_over_8bd_err_info(hdev,& vf_id,& q_id);
  #line 1739 
  if (ret != 0) {
    #line 1740 
    _dev_err(dev,(char *)"fail(%d) to query over_8bd_no_fe info\n",ret);
    #line 1742 
    return;
  }
  #line 1745 
  _dev_err(dev,(char *)"PPU_PF_ABNORMAL_INT_ST over_8bd_no_fe found, vf_id(%u), queue_id(%u)\n",(int)vf_id,(int)q_id);
  #line 1748 
  if ((unsigned int)vf_id != 0U) {
    #line 1749 
    if ((int)hdev->num_alloc_vport <= (int)vf_id) {
      #line 1750 
      _dev_err(dev,(char *)"invalid vf id(%u)\n",(int)vf_id);
      #line 1751 
      return;
    }
    #line 1758 
    if (*reset_requests != 0UL) 
                                #line 1759 
                                return;
    #line 1761 
    ret = hclge_inform_reset_assert_to_vf(hdev->vport + (unsigned long)vf_id);
    #line 1762 
    if (ret != 0) 
                  #line 1763 
                  _dev_err(dev,(char *)"inform reset to vf(%u) failed %d!\n",(int)(hdev->vport)->vport_id,ret);
  }
  else 
       #line 1766 
       cif_set_bit(5L,reset_requests);
  #line 1767 
  return;
}

#line 1779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_handle_mpf_msix_error(struct hclge_dev *hdev, struct hclge_desc *desc, int mpf_bd_num, unsigned long *reset_requests)
{
  #line 1785 
  __le32 *desc_data;
  #line 1786 
  u32 status;
  #line 1787 
  int ret;
  #line 1784 
  struct device *dev = & (hdev->pdev)->dev;
  #line 1789 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_QUERY_CLEAR_ALL_MPF_MSIX_INT,(_Bool)1);
  #line 1791 
  ret = hclge_cmd_send(& hdev->hw,desc,mpf_bd_num);
  #line 1792 
  if (ret != 0) {
    #line 1793 
    _dev_err(dev,(char *)"query all mpf msix int cmd failed (%d)\n",ret);
    #line 1794 
    return ret;
  }
  #line 1798 
  desc_data = (__le32 *)(desc + 1U);
  #line 1799 
  status = *desc_data;
  #line 1800 
  if (status != 0U) 
                    #line 1801 
                    hclge_log_error(dev,(char *)"MAC_AFIFO_TNL_INT_R",hclge_mac_afifo_tnl_int,status,reset_requests);
  #line 1806 
  desc_data = (__le32 *)(desc + 5U);
  #line 1807 
  status = *(desc_data + 2U) & 536870912U;
  #line 1809 
  if (status != 0U) 
                    #line 1810 
                    _dev_err(dev,(char *)"PPU_MPF_ABNORMAL_INT_ST2 rx_q_search_miss found [dfx status=0x%x\n]",status);
  #line 1814 
  ret = hclge_clear_hw_msix_error(hdev,desc,(_Bool)1,(unsigned int)mpf_bd_num);
  #line 1815 
  if (ret != 0) 
                #line 1816 
                _dev_err(dev,(char *)"clear all mpf msix int cmd failed (%d)\n",ret);
  #line 1818 
  return ret;
}

#line 1830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_handle_pf_msix_error(struct hclge_dev *hdev, struct hclge_desc *desc, int pf_bd_num, unsigned long *reset_requests)
{
  #line 1836 
  __le32 *desc_data;
  #line 1837 
  u32 status;
  #line 1838 
  int ret;
  #line 1835 
  struct device *dev = & (hdev->pdev)->dev;
  #line 1841 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_QUERY_CLEAR_ALL_PF_MSIX_INT,(_Bool)1);
  #line 1843 
  ret = hclge_cmd_send(& hdev->hw,desc,pf_bd_num);
  #line 1844 
  if (ret != 0) {
    #line 1845 
    _dev_err(dev,(char *)"query all pf msix int cmd failed (%d)\n",ret);
    #line 1846 
    return ret;
  }
  #line 1850 
  status = desc->data[0] & 31743U;
  #line 1851 
  if (status != 0U) 
                    #line 1852 
                    hclge_log_error(dev,(char *)"SSU_PORT_BASED_ERR_INT",hclge_ssu_port_based_pf_int,status,reset_requests);
  #line 1857 
  desc_data = (__le32 *)(desc + 2U);
  #line 1858 
  status = *desc_data;
  #line 1859 
  if (status != 0U) 
                    #line 1860 
                    hclge_log_error(dev,(char *)"PPP_PF_ABNORMAL_INT_ST0",hclge_ppp_pf_abnormal_int,status,reset_requests);
  #line 1865 
  desc_data = (__le32 *)(desc + 3U);
  #line 1866 
  status = *desc_data & 38U;
  #line 1867 
  if (status != 0U) 
                    #line 1868 
                    hclge_log_error(dev,(char *)"PPU_PF_ABNORMAL_INT_ST",hclge_ppu_pf_abnormal_int,status,reset_requests);
  #line 1872 
  status = *desc_data & 1U;
  #line 1873 
  if (status != 0U) 
                    #line 1874 
                    hclge_handle_over_8bd_err(hdev,reset_requests);
  #line 1877 
  ret = hclge_clear_hw_msix_error(hdev,desc,(_Bool)0,(unsigned int)pf_bd_num);
  #line 1878 
  if (ret != 0) 
                #line 1879 
                _dev_err(dev,(char *)"clear all pf msix int cmd failed (%d)\n",ret);
  #line 1881 
  return ret;
}

#line 1884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
static int hclge_handle_all_hw_msix_error(struct hclge_dev *hdev, unsigned long *reset_requests)
{
  #line 1899 
  unsigned int __UNIQUE_ID___x444;
  #line 1899 
  unsigned int tmp;
  #line 1887 
  struct hclge_mac_tnl_stats mac_tnl_stats;
  #line 1889 
  u32 mpf_bd_num;
  #line 1889 
  u32 pf_bd_num;
  #line 1889 
  u32 bd_num;
  #line 1890 
  struct hclge_desc *desc;
  #line 1891 
  u32 status;
  #line 1892 
  int ret;
  #line 1888 
  struct device *dev = & (hdev->pdev)->dev;
  #line 1895 
  ret = hclge_query_bd_num(hdev,(_Bool)0,(int *)(& mpf_bd_num),(int *)(& pf_bd_num));
  #line 1896 
  if (ret != 0) 
                #line 1897 
                goto out;
  {
    #line 1899 
    __UNIQUE_ID___x444 = mpf_bd_num;
    #line 1899 
    unsigned int __UNIQUE_ID___y445 = pf_bd_num;
    #line 1899 
    if (__UNIQUE_ID___x444 > __UNIQUE_ID___y445) 
                                                 #line 1899 
                                                 tmp = __UNIQUE_ID___x444; else 
                                                                    #line 1899 
                                                                    tmp = __UNIQUE_ID___y445;
    }
  #line 1899 
  bd_num = tmp;
  #line 1900 
  desc = (struct hclge_desc *)kcalloc((unsigned long)bd_num,32UL,3264U);
  #line 1901 
  if (desc == (struct hclge_desc *)0) {
    #line 1902 
    ret = -12;
    #line 1903 
    goto out;
  }
  #line 1906 
  ret = hclge_handle_mpf_msix_error(hdev,desc,(int)mpf_bd_num,reset_requests);
  #line 1908 
  if (ret != 0) 
                #line 1909 
                goto msi_error;
  #line 1911 
  memset((void *)desc,0,(unsigned long)bd_num * 32UL);
  #line 1912 
  ret = hclge_handle_pf_msix_error(hdev,desc,(int)pf_bd_num,reset_requests);
  #line 1913 
  if (ret != 0) 
                #line 1914 
                goto msi_error;
  #line 1917 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_OPC_QUERY_MAC_TNL_INT,(_Bool)1);
  #line 1919 
  ret = hclge_cmd_send(& hdev->hw,desc,1);
  #line 1920 
  if (ret != 0) {
    #line 1921 
    _dev_err(dev,(char *)"query mac tnl int cmd failed (%d)\n",ret);
    #line 1922 
    goto msi_error;
  }
  #line 1925 
  status = desc->data[0];
  #line 1926 
  if (status != 0U) {
    #line 1932 
    mac_tnl_stats.time = local_clock();
    #line 1933 
    mac_tnl_stats.status = status;
    {
      #line 1934 
      unsigned int __ret;
      #line 831  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
      struct __anonstruct___tmp_2167 *__tmp = (struct __anonstruct___tmp_2167 *)(& hdev->mac_tnl_log);
      #line 1934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
      struct hclge_mac_tnl_stats __val = mac_tnl_stats;
      #line 1934 
      size_t __recsize = 0UL;
      #line 1934 
      struct __kfifo *__kfifo = & __tmp->__anonCompField___anonstruct___tmp_2167_169.kfifo;
      #line 1934 
      if (__recsize != 0UL) 
                            #line 1934 
                            __ret = __kfifo_in_r(__kfifo,(void *)(& __val),16U,__recsize);
      else {
        #line 831  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
        struct __anonstruct___tmpl_2171 *__tmpl;
        #line 831 
        struct __anonstruct___tmpq_2169 *__tmpq;
        #line 831 
        __tmpq = (struct __anonstruct___tmpq_2169 *)__tmp;
        #line 831 
        __tmpl = (struct __anonstruct___tmpl_2171 *)__tmpq;
        #line 1934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
        ;
        #line 1934 
        __ret = (unsigned int)(((__tmpl->__anonCompField___anonstruct___tmpl_2171_171.kfifo.in - __tmpl->__anonCompField___anonstruct___tmpl_2171_171.kfifo.out) > __tmpq->__anonCompField___anonstruct___tmpq_2169_170.kfifo.mask) == 0);
        #line 1934 
        if (__ret != 0U) {
          #line 1934 
          *((struct hclge_mac_tnl_stats *)(& __tmp->buf) + (unsigned long)(__kfifo->in & __tmp->__anonCompField___anonstruct___tmp_2167_169.kfifo.mask)) = __val;
          #line 1935 
          ldv_inline_asm();
          #line 1934 
          (__kfifo->in) ++;
        }
      }
      #line 1934 
      unsigned int tmp_4 = __ret;
    }
    #line 1935 
    ret = hclge_clear_mac_tnl_int(hdev);
    #line 1936 
    if (ret != 0) 
                  #line 1937 
                  _dev_err(dev,(char *)"clear mac tnl int failed (%d)\n",ret);
  }
  #line 1940 
  msi_error: 
             #line 1940 
  ;
  #line 1941 
  kfree((void *)desc);
  #line 1942 
  out: 
       #line 1942 
  ;
  #line 1943 
  return ret;
}

#line 1946  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
int hclge_handle_hw_msix_error(struct hclge_dev *hdev, unsigned long *reset_requests)
{
  #line 1949 
  struct device *dev = & (hdev->pdev)->dev;
  #line 1951 
  if (! test_bit(6L,& hdev->state)) {
    #line 1952 
    _dev_err(dev,(char *)"Can\'t handle - MSIx error reported during dev init\n");
    #line 1954 
    return 0;
  }
  #line 1957 
  return hclge_handle_all_hw_msix_error(hdev,reset_requests);
}

#line 1960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_err.c"
void hclge_handle_all_hns_hw_errors(struct hnae3_ae_dev *ae_dev)
{
  #line 1979 
  unsigned int __UNIQUE_ID___x446;
  #line 1979 
  unsigned int tmp;
  #line 1966 
  u32 mpf_bd_num;
  #line 1966 
  u32 pf_bd_num;
  #line 1966 
  u32 bd_num;
  #line 1967 
  struct hclge_desc *desc;
  #line 1968 
  u32 status;
  #line 1969 
  int ret;
  #line 1964 
  struct hclge_dev *hdev = (struct hclge_dev *)ae_dev->priv;
  #line 1965 
  struct device *dev = & (hdev->pdev)->dev;
  #line 1971 
  ae_dev->hw_err_reset_req = 0UL;
  #line 1972 
  status = hclge_read_reg((u8 *)hdev->hw.io_base,133888U);
  #line 1975 
  ret = hclge_query_bd_num(hdev,(_Bool)0,(int *)(& mpf_bd_num),(int *)(& pf_bd_num));
  #line 1976 
  if (ret != 0) 
                #line 1977 
                return;
  {
    #line 1979 
    __UNIQUE_ID___x446 = mpf_bd_num;
    #line 1979 
    unsigned int __UNIQUE_ID___y447 = pf_bd_num;
    #line 1979 
    if (__UNIQUE_ID___x446 > __UNIQUE_ID___y447) 
                                                 #line 1979 
                                                 tmp = __UNIQUE_ID___x446; else 
                                                                    #line 1979 
                                                                    tmp = __UNIQUE_ID___y447;
    }
  #line 1979 
  bd_num = tmp;
  #line 1980 
  desc = (struct hclge_desc *)kcalloc((unsigned long)bd_num,32UL,3264U);
  #line 1981 
  if (desc == (struct hclge_desc *)0) 
                                      #line 1982 
                                      return;
  #line 1985 
  memset((void *)(& desc->data[0]),255,(unsigned long)mpf_bd_num * 32UL + 18446744073709551608UL);
  #line 1987 
  ret = hclge_clear_hw_msix_error(hdev,desc,(_Bool)1,mpf_bd_num);
  #line 1988 
  if (ret != 0) {
    #line 1989 
    _dev_err(dev,(char *)"fail(%d) to clear mpf msix int during init\n",ret);
    #line 1991 
    goto msi_error;
  }
  #line 1994 
  memset((void *)(& desc->data[0]),255,(unsigned long)pf_bd_num * 32UL + 18446744073709551608UL);
  #line 1996 
  ret = hclge_clear_hw_msix_error(hdev,desc,(_Bool)0,pf_bd_num);
  #line 1997 
  if (ret != 0) {
    #line 1998 
    _dev_err(dev,(char *)"fail(%d) to clear pf msix int during init\n",ret);
    #line 2000 
    goto msi_error;
  }
  #line 2004 
  if ((status & 65280U) != 0U) {
    #line 2005 
    _dev_err(dev,(char *)"HNS hw error(RAS) identified during init\n");
    #line 2006 
    hclge_handle_all_ras_errors(hdev);
  }
  #line 2009 
  msi_error: 
             #line 2009 
  ;
  #line 2010 
  kfree((void *)desc);
  #line 2011 
  return;
}

#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_err.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 117 
  ldv_set_bit(nr,addr);
  #line 118 
  return;
}

#line 392  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_err.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 395 
  return ldv_kcalloc(n,size,flags);
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_mbx.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 26 
#line 687 
static void cif_mutex_lock_vport_cfg_mutex_of_hclge_dev(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 694  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_mbx.i.aux"
static void cif_mutex_unlock_vport_cfg_mutex_of_hclge_dev(struct mutex *lock);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 190 
void kzfree(void *);
#line 668 
#line 413  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_mbx.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 1081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
__inline static void hclge_write_reg(void *base, u32 reg, u32 value)
{
  #line 1083 
  writel(value,base + (unsigned long)reg);
  #line 1084 
  return;
}

#line 1091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
__inline static u32 hclge_read_reg_0(u8 *base, u32 reg)
{
  #line 1094 
  union __anonunion___u_2881 __u;
  #line 1093 
  __read_once_size((void *)(& base),(void *)(& __u.__c),8);
  #line 1093 
  u8 *reg_addr = (__u.__val);
  #line 1095 
  return readl((void *)(reg_addr + (unsigned long)reg));
}

#line 933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
#line 933 
int hclge_set_vport_promisc_mode(struct hclge_vport *vport, bool en_uc_pmc, bool en_mc_pmc, bool en_bc_pmc);
#line 935 
#line 935 
int hclge_add_uc_addr_common(struct hclge_vport *vport, unsigned char *addr);
#line 937 
#line 937 
int hclge_rm_uc_addr_common(struct hclge_vport *vport, unsigned char *addr);
#line 939 
#line 939 
int hclge_add_mc_addr_common(struct hclge_vport *vport, unsigned char *addr);
#line 941 
#line 941 
int hclge_rm_mc_addr_common(struct hclge_vport *vport, unsigned char *addr);
#line 945 
#line 945 
int hclge_bind_ring_with_vector(struct hclge_vport *vport, int vector_id, bool en, struct hnae3_ring_chain_node *ring_chain);
#line 963 
#line 963 
int hclge_set_vlan_filter(struct hnae3_handle *handle, __be16 proto, u16 vlan_id, bool is_kill);
#line 965 
#line 965 
int hclge_en_hw_strip_rxvtag(struct hnae3_handle *handle, bool enable);
#line 971 
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
void hclge_mbx_handler(struct hclge_dev *hdev);
#line 973  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
#line 973 
void hclge_reset_vf_queue(struct hclge_vport *vport, u16 queue_id);
#line 975 
#line 975 
int hclge_func_reset_cmd(struct hclge_dev *hdev, int func_id);
#line 976 
#line 976 
int hclge_vport_start(struct hclge_vport *vport);
#line 977 
#line 977 
void hclge_vport_stop(struct hclge_vport *vport);
#line 978 
#line 978 
int hclge_set_vport_mtu(struct hclge_vport *vport, int new_mtu);
#line 980 
#line 980 
u16 hclge_covert_handle_qid_global(struct hnae3_handle *handle, u16 queue_id);
#line 983 
#line 983 
void hclge_add_vport_mac_table(struct hclge_vport *vport, u8 *mac_addr, enum HCLGE_MAC_ADDR_TYPE mac_type);
#line 985 
#line 985 
void hclge_rm_vport_mac_table(struct hclge_vport *vport, u8 *mac_addr, bool is_write_tbl, enum HCLGE_MAC_ADDR_TYPE mac_type);
#line 988 
#line 988 
void hclge_rm_vport_all_mac_table(struct hclge_vport *vport, bool is_del_list, enum HCLGE_MAC_ADDR_TYPE mac_type);
#line 991 
#line 991 
void hclge_rm_vport_all_vlan_table(struct hclge_vport *vport, bool is_del_list);
#line 993 
#line 993 
int hclge_update_port_base_vlan_cfg(struct hclge_vport *vport, u16 state, struct hclge_vlan_info *vlan_info);
#line 995 
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
int hclge_push_vf_port_base_vlan_info(struct hclge_vport *vport, u8 vfid, u16 state, u16 vlan_tag, u16 qos, u16 vlan_proto);
#line 998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
#line 998 
void hclge_task_schedule(struct hclge_dev *hdev, unsigned long delay_time);
#line 1003 
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
void hclge_inform_vf_promisc_info(struct hclge_vport *vport);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static int hclge_gen_resp_to_vf(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *vf_to_pf_req, int resp_status, u8 *resp_data, u16 resp_data_len)
{
  #line 20 
  struct hclge_mbx_pf_to_vf_cmd *resp_pf_to_vf;
  #line 22 
  enum hclge_cmd_status status;
  #line 23 
  struct hclge_desc desc;
  #line 21 
  struct hclge_dev *hdev = vport->back;
  #line 25 
  resp_pf_to_vf = (struct hclge_mbx_pf_to_vf_cmd *)(& desc.data);
  #line 27 
  if ((unsigned int)resp_data_len > 8U) {
    #line 28 
    _dev_err(& (hdev->pdev)->dev,(char *)"PF fail to gen resp to VF len %u exceeds max len %u\n",(int)resp_data_len,8U);
    #line 35 
    resp_data_len = (unsigned short)8U;
  }
  #line 38 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGEVF_OPC_MBX_PF_TO_VF,(_Bool)0);
  #line 40 
  resp_pf_to_vf->dest_vfid = vf_to_pf_req->mbx_src_vfid;
  #line 41 
  resp_pf_to_vf->msg_len = vf_to_pf_req->msg_len;
  #line 43 
  resp_pf_to_vf->msg[0] = (unsigned short)17U;
  #line 44 
  resp_pf_to_vf->msg[1] = (unsigned short)vf_to_pf_req->msg[0];
  #line 45 
  resp_pf_to_vf->msg[2] = (unsigned short)vf_to_pf_req->msg[1];
  #line 46 
  resp_pf_to_vf->msg[3] = (unsigned short)(resp_status != 0);
  #line 48 
  if (resp_data != (u8 *)0U && (unsigned int)resp_data_len != 0U) 
                                                                  #line 49 
                                                                  memcpy((void *)(& resp_pf_to_vf->msg[4]),(void *)resp_data,(unsigned long)resp_data_len);
  #line 51 
  status = (enum hclge_cmd_status)hclge_cmd_send(& hdev->hw,& desc,1);
  #line 52 
  if (status != HCLGE_STATUS_SUCCESS) 
                                      #line 53 
                                      _dev_err(& (hdev->pdev)->dev,(char *)"PF failed(=%d) to send response to VF\n",(int)status);
  #line 56 
  return (int)status;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static int hclge_send_mbx_msg(struct hclge_vport *vport, u8 *msg, u16 msg_len, u16 mbx_opcode, u8 dest_vfid)
{
  #line 62 
  struct hclge_mbx_pf_to_vf_cmd *resp_pf_to_vf;
  #line 64 
  enum hclge_cmd_status status;
  #line 65 
  struct hclge_desc desc;
  #line 63 
  struct hclge_dev *hdev = vport->back;
  #line 67 
  resp_pf_to_vf = (struct hclge_mbx_pf_to_vf_cmd *)(& desc.data);
  #line 69 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGEVF_OPC_MBX_PF_TO_VF,(_Bool)0);
  #line 71 
  resp_pf_to_vf->dest_vfid = dest_vfid;
  #line 72 
  resp_pf_to_vf->msg_len = (unsigned char)msg_len;
  #line 73 
  resp_pf_to_vf->msg[0] = mbx_opcode;
  #line 75 
  memcpy((void *)(& resp_pf_to_vf->msg[1]),(void *)msg,(unsigned long)msg_len);
  #line 77 
  status = (enum hclge_cmd_status)hclge_cmd_send(& hdev->hw,& desc,1);
  #line 78 
  if (status != HCLGE_STATUS_SUCCESS) 
                                      #line 79 
                                      _dev_err(& (hdev->pdev)->dev,(char *)"PF failed(=%d) to send mailbox message to VF\n",(int)status);
  #line 83 
  return (int)status;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
int hclge_inform_reset_assert_to_vf(struct hclge_vport *vport)
{
  #line 89 
  enum hnae3_reset_type reset_type;
  #line 90 
  u8 msg_data[2U];
  #line 91 
  u8 dest_vfid;
  #line 88 
  struct hclge_dev *hdev = vport->back;
  #line 93 
  dest_vfid = (unsigned char)vport->vport_id;
  #line 95 
  if (hdev->reset_type == (unsigned int)HNAE3_FUNC_RESET) 
                                                          #line 96 
                                                          reset_type = HNAE3_VF_PF_FUNC_RESET;
  else 
    #line 97 
    if (hdev->reset_type == (unsigned int)HNAE3_FLR_RESET) 
                                                           #line 98 
                                                           reset_type = HNAE3_VF_FULL_RESET; else 
                                                                    #line 100 
                                                                    reset_type = HNAE3_VF_FUNC_RESET;
  #line 102 
  memcpy((void *)(msg_data),(void *)(& reset_type),2UL);
  #line 105 
  return hclge_send_mbx_msg(vport,(u8 *)(& msg_data),(unsigned short)2,
                         (unsigned short)2,(unsigned char)((int)dest_vfid));
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static void hclge_free_vector_ring_chain(struct hnae3_ring_chain_node *head)
{
  #line 111 
  struct hnae3_ring_chain_node *chain_tmp;
  #line 111 
  struct hnae3_ring_chain_node *chain;
  #line 113 
  chain = head->next;
  #line 115 
  while (chain != (struct hnae3_ring_chain_node *)0) {
    #line 116 
    chain_tmp = chain->next;
    #line 117 
    kzfree((void *)chain);
    #line 118 
    chain = chain_tmp;
  }
  #line 120 
  return;
}

#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static int hclge_get_ring_chain_from_mbx(struct hclge_mbx_vf_to_pf_cmd *req, struct hnae3_ring_chain_node *ring_chain, struct hclge_vport *vport)
{
  #line 137 
  struct hnae3_ring_chain_node *cur_chain;
  #line 137 
  struct hnae3_ring_chain_node *new_chain;
  #line 138 
  int ring_num;
  #line 139 
  int i;
  #line 141 
  ring_num = (int)req->msg[2];
  #line 143 
  if (ring_num > 4) 
                    #line 146 
                    return -12;
  #line 148 
  ring_chain->flag &= 4294967294U;
  #line 148 
  ring_chain->flag |= (unsigned int)req->msg[3] & 1U;
  #line 149 
  ring_chain->tqp_index = (unsigned int)hclge_get_queue_id(*(vport->nic.__anonCompField_hnae3_handle_167.kinfo.tqp + (unsigned long)req->msg[4]));
  #line 151 
  ring_chain->int_gl_idx &= 4294967292U;
  #line 151 
  ring_chain->int_gl_idx |= (unsigned int)req->msg[5] & 3U;
  #line 155 
  cur_chain = ring_chain;
  #line 157 
  i = 1;
  #line 157 
  while (i < ring_num) {
    {
      #line 158 
      new_chain = (struct hnae3_ring_chain_node *)kzalloc(24UL,3264U);
      #line 159 
      if (new_chain == (struct hnae3_ring_chain_node *)0) 
                                                          #line 160 
                                                          goto err;
      #line 162 
      new_chain->flag &= 4294967294U;
      #line 162 
      new_chain->flag |= (unsigned int)req->msg[(i + 1) * 3] & 1U;
      #line 166 
      new_chain->tqp_index = (unsigned int)hclge_get_queue_id(*(vport->nic.__anonCompField_hnae3_handle_167.kinfo.tqp + (unsigned long)req->msg[
                             (i + 1) * 3 + 1]));
      #line 171 
      new_chain->int_gl_idx &= 4294967292U;
      #line 171 
      new_chain->int_gl_idx |= (unsigned int)req->msg[(i + 1) * 3 + 2] & 3U;
      #line 176 
      cur_chain->next = new_chain;
      #line 177 
      cur_chain = new_chain;
    }
    #line 157 
    i ++;
  }
  #line 180 
  return 0;
  #line 181 
  err: 
       #line 181 
  ;
  #line 182 
  hclge_free_vector_ring_chain(ring_chain);
  #line 183 
  return -12;
}

#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static int hclge_map_unmap_ring_to_vf_vector(struct hclge_vport *vport, bool en, struct hclge_mbx_vf_to_pf_cmd *req)
{
  #line 189 
  struct hnae3_ring_chain_node ring_chain;
  #line 191 
  int ret;
  #line 190 
  int vector_id = (int)req->msg[1];
  #line 193 
  memset((void *)(& ring_chain),0,24UL);
  #line 194 
  ret = hclge_get_ring_chain_from_mbx(req,& ring_chain,vport);
  #line 195 
  if (ret != 0) 
                #line 196 
                return ret;
  #line 198 
  ret = hclge_bind_ring_with_vector(vport,vector_id,(_Bool)((bool)((int)en) != 0),& ring_chain);
  #line 200 
  hclge_free_vector_ring_chain(& ring_chain);
  #line 202 
  return ret;
}

#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static int hclge_set_vf_promisc_mode(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *req)
{
  #line 215 
  int ret;
  #line 212 
  bool en_bc = (_Bool)((unsigned int)req->msg[1] != 0U);
  #line 213 
  bool en_uc = (_Bool)((unsigned int)req->msg[2] != 0U);
  #line 214 
  bool en_mc = (_Bool)((unsigned int)req->msg[3] != 0U);
  #line 217 
  if (vport->vf_info.trusted == 0U) {
    #line 218 
    en_uc = (_Bool)0;
    #line 219 
    en_mc = (_Bool)0;
  }
  #line 222 
  ret = hclge_set_vport_promisc_mode(vport,(_Bool)((bool)((int)en_uc) != 0),(_Bool)((bool)((int)en_mc) != 0),(_Bool)((bool)((int)en_bc) != 0));
  #line 223 
  if ((unsigned int)req->mbx_need_resp != 0U) 
                                              #line 224 
                                              hclge_gen_resp_to_vf(vport,req,ret,(u8 *)0U,(unsigned short)0);
  #line 226 
  vport->vf_info.promisc_enable = (unsigned short)(((int)en_uc != 0 || (int)en_mc != 0) != 0);
  #line 228 
  return ret;
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
void hclge_inform_vf_promisc_info(struct hclge_vport *vport)
{
  #line 234 
  u8 msg_data[2U];
  #line 233 
  u8 dest_vfid = (unsigned char)vport->vport_id;
  #line 236 
  memcpy((void *)(msg_data),(void *)(& vport->vf_info.promisc_enable),2UL);
  #line 238 
  hclge_send_mbx_msg(vport,(u8 *)(& msg_data),(unsigned short)2,(unsigned short)36,(unsigned char)((int)dest_vfid));
  #line 239 
  return;
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static int hclge_set_vf_uc_mac_addr(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *mbx_req)
{
  #line 247 
  int status;
  #line 245 
  u8 *mac_addr = & mbx_req->msg[2];
  #line 246 
  struct hclge_dev *hdev = vport->back;
  #line 249 
  if ((unsigned int)mbx_req->msg[1] == 0U) {
    #line 250 
    u8 *old_addr = & mbx_req->msg[8];
    #line 255 
    if (! is_zero_ether_addr((u8 *)(& vport->vf_info.mac))) {
      #line 256 
      if (! ether_addr_equal(mac_addr,(u8 *)(& vport->vf_info.mac))) {
        #line 257 
        status = -1;
        #line 258 
        goto out;
      }
    }
    #line 261 
    if (! is_valid_ether_addr(mac_addr)) {
      #line 262 
      status = -22;
      #line 263 
      goto out;
    }
    #line 266 
    hclge_rm_uc_addr_common(vport,old_addr);
    #line 267 
    status = hclge_add_uc_addr_common(vport,mac_addr);
    #line 268 
    if (status != 0) 
                     #line 269 
                     hclge_add_uc_addr_common(vport,old_addr);
    else {
      #line 271 
      hclge_rm_vport_mac_table(vport,mac_addr,(_Bool)0,(enum HCLGE_MAC_ADDR_TYPE)HCLGE_MAC_ADDR_UC);
      #line 273 
      hclge_add_vport_mac_table(vport,mac_addr,(enum HCLGE_MAC_ADDR_TYPE)HCLGE_MAC_ADDR_UC);
    }
  }
  else 
    #line 276 
    if ((unsigned int)mbx_req->msg[1] == 1U) {
      #line 277 
      status = hclge_add_uc_addr_common(vport,mac_addr);
      #line 278 
      if (status == 0) 
                       #line 279 
                       hclge_add_vport_mac_table(vport,mac_addr,(enum HCLGE_MAC_ADDR_TYPE)HCLGE_MAC_ADDR_UC);
    }
    else 
      #line 281 
      if ((unsigned int)mbx_req->msg[1] == 2U) {
        #line 282 
        status = hclge_rm_uc_addr_common(vport,mac_addr);
        #line 283 
        if (status == 0) 
                         #line 284 
                         hclge_rm_vport_mac_table(vport,mac_addr,(_Bool)0,(enum HCLGE_MAC_ADDR_TYPE)HCLGE_MAC_ADDR_UC);
      }
      else {
        #line 287 
        _dev_err(& (hdev->pdev)->dev,(char *)"failed to set unicast mac addr, unknown subcode %u\n",(int)mbx_req->msg[1]);
        #line 290 
        return -5;
      }
  #line 293 
  out: 
       #line 293 
  ;
  #line 294 
  if (((unsigned long)mbx_req->mbx_need_resp & 1UL) != 0UL) 
                                                            #line 295 
                                                            hclge_gen_resp_to_vf(vport,mbx_req,status,(u8 *)0U,(unsigned short)0);
  #line 297 
  return 0;
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static int hclge_set_vf_mc_mac_addr(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *mbx_req, bool gen_resp)
{
  #line 307 
  u8 resp_data;
  #line 308 
  int status;
  #line 304 
  u8 *mac_addr = & mbx_req->msg[2];
  #line 305 
  struct hclge_dev *hdev = vport->back;
  #line 306 
  u8 resp_len = (unsigned char)0U;
  #line 310 
  if ((unsigned int)mbx_req->msg[1] == 4U) {
    #line 311 
    status = hclge_add_mc_addr_common(vport,mac_addr);
    #line 312 
    if (status == 0) 
                     #line 313 
                     hclge_add_vport_mac_table(vport,mac_addr,(enum HCLGE_MAC_ADDR_TYPE)HCLGE_MAC_ADDR_MC);
  }
  else 
    #line 315 
    if ((unsigned int)mbx_req->msg[1] == 5U) {
      #line 316 
      status = hclge_rm_mc_addr_common(vport,mac_addr);
      #line 317 
      if (status == 0) 
                       #line 318 
                       hclge_rm_vport_mac_table(vport,mac_addr,(_Bool)0,(enum HCLGE_MAC_ADDR_TYPE)HCLGE_MAC_ADDR_MC);
    }
    else {
      #line 321 
      _dev_err(& (hdev->pdev)->dev,(char *)"failed to set mcast mac addr, unknown subcode %u\n",(int)mbx_req->msg[1]);
      #line 324 
      return -5;
    }
  #line 327 
  if ((int)gen_resp != 0) 
                          #line 328 
                          hclge_gen_resp_to_vf(vport,mbx_req,status,& resp_data,(unsigned short)((int)resp_len));
  #line 331 
  return 0;
}

#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
int hclge_push_vf_port_base_vlan_info(struct hclge_vport *vport, u8 vfid, u16 state, u16 vlan_tag, u16 qos, u16 vlan_proto)
{
  #line 340 
  u8 msg_data[8U];
  #line 342 
  memcpy((void *)(msg_data),(void *)(& state),2UL);
  #line 343 
  memcpy((void *)(& msg_data[2]),(void *)(& vlan_proto),2UL);
  #line 344 
  memcpy((void *)(& msg_data[4]),(void *)(& qos),2UL);
  #line 345 
  memcpy((void *)(& msg_data[6]),(void *)(& vlan_tag),2UL);
  #line 347 
  return hclge_send_mbx_msg(vport,(u8 *)(& msg_data),(unsigned short)8,
                         (unsigned short)34,(unsigned char)((int)vfid));
}

#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static int hclge_set_vf_vlan_cfg(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *mbx_req)
{
  #line 354 
  struct hclge_vf_vlan_cfg *msg_cmd;
  #line 355 
  int status = 0;
  #line 357 
  msg_cmd = (struct hclge_vf_vlan_cfg *)(& mbx_req->msg);
  #line 358 
  if ((unsigned int)msg_cmd->subcode == 0U) {
    #line 360 
    u16 vlan;
    #line 360 
    u16 proto;
    #line 361 
    bool is_kill;
    #line 359 
    struct hnae3_handle *handle = & vport->nic;
    #line 363 
    is_kill = (_Bool)((unsigned int)msg_cmd->is_kill != 0U);
    #line 364 
    vlan = msg_cmd->vlan;
    #line 365 
    proto = msg_cmd->proto;
    #line 366 
    ;
    #line 366 
    ;
    #line 366 
    ;
    #line 366 
    status = hclge_set_vlan_filter(handle,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)proto))),(unsigned short)((int)vlan),(_Bool)((bool)((int)is_kill) != 0));
    #line 368 
    if ((unsigned int)mbx_req->mbx_need_resp != 0U) {
      #line 369 
      return hclge_gen_resp_to_vf(vport,mbx_req,status,(u8 *)0U,(unsigned short)0);
    }
  }
  else 
    #line 371 
    if ((unsigned int)msg_cmd->subcode == 2U) {
      #line 372 
      struct hnae3_handle *handle_0 = & vport->nic;
      #line 373 
      bool en = (_Bool)((unsigned int)msg_cmd->is_kill != 0U);
      #line 375 
      status = hclge_en_hw_strip_rxvtag(handle_0,(_Bool)((bool)((int)en) != 0));
    }
    else 
      #line 376 
      if ((unsigned int)mbx_req->msg[1] == 3U) {
        #line 377 
        struct hclge_vlan_info *vlan_info;
        #line 378 
        u16 *state;
        #line 380 
        state = (u16 *)(& mbx_req->msg[2]);
        #line 381 
        vlan_info = (struct hclge_vlan_info *)(& mbx_req->msg[4]);
        #line 382 
        status = hclge_update_port_base_vlan_cfg(vport,(unsigned short)((int)*state),vlan_info);
      }
      else 
        #line 384 
        if ((unsigned int)mbx_req->msg[1] == 4U) {
          #line 385 
          u8 state_0;
          #line 387 
          state_0 = (unsigned char)vport->port_base_vlan_cfg.state;
          #line 388 
          status = hclge_gen_resp_to_vf(vport,mbx_req,0,& state_0,(unsigned short)1);
        }
  #line 392 
  return status;
}

#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static int hclge_set_vf_alive(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *mbx_req, bool gen_resp)
{
  #line 399 
  bool alive = (_Bool)((unsigned int)mbx_req->msg[2] != 0U);
  #line 400 
  int ret = 0;
  #line 402 
  if ((int)alive != 0) 
                       #line 403 
                       ret = hclge_vport_start(vport); else 
                                                            #line 405 
                                                            hclge_vport_stop(vport);
  #line 407 
  return ret;
}

#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static int hclge_get_vf_tcinfo(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *mbx_req, bool gen_resp)
{
  #line 416 
  unsigned int i;
  #line 417 
  int ret;
  #line 414 
  struct hnae3_knic_private_info *kinfo = & vport->nic.__anonCompField_hnae3_handle_167.kinfo;
  #line 415 
  u8 vf_tc_map = (unsigned char)0U;
  #line 419 
  i = 0U;
  #line 419 
  while ((unsigned int)kinfo->num_tc > i) {
    #line 420 
    vf_tc_map = (unsigned char)((int)((unsigned char)(1UL << i)) | (int)vf_tc_map);
    #line 419 
    i ++;
  }
  #line 422 
  ret = hclge_gen_resp_to_vf(vport,mbx_req,0,& vf_tc_map,(unsigned short)1);
  #line 425 
  return ret;
}

#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static int hclge_get_vf_queue_info(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *mbx_req, bool gen_resp)
{
  #line 433 
  u8 resp_data[6U];
  #line 434 
  struct hclge_dev *hdev = vport->back;
  #line 437 
  memcpy((void *)(resp_data),(void *)(& vport->alloc_tqps),2UL);
  #line 438 
  memcpy((void *)(& resp_data[2]),(void *)(& vport->nic.__anonCompField_hnae3_handle_167.kinfo.rss_size),2UL);
  #line 439 
  memcpy((void *)(& resp_data[4]),(void *)(& hdev->rx_buf_len),2UL);
  #line 441 
  return hclge_gen_resp_to_vf(vport,mbx_req,0,(u8 *)(& resp_data),
                           (unsigned short)6);
}

#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static int hclge_get_vf_mac_addr(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *mbx_req)
{
  #line 448 
  return hclge_gen_resp_to_vf(vport,mbx_req,0,(u8 *)(& vport->vf_info.mac),
                           (unsigned short)6);
}

#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static int hclge_get_vf_queue_depth(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *mbx_req, bool gen_resp)
{
  #line 457 
  u8 resp_data[4U];
  #line 458 
  struct hclge_dev *hdev = vport->back;
  #line 461 
  memcpy((void *)(resp_data),(void *)(& hdev->num_tx_desc),2UL);
  #line 462 
  memcpy((void *)(& resp_data[2]),(void *)(& hdev->num_rx_desc),2UL);
  #line 463 
  return hclge_gen_resp_to_vf(vport,mbx_req,0,(u8 *)(& resp_data),
                           (unsigned short)4);
}

#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static int hclge_get_vf_media_type(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *mbx_req)
{
  #line 471 
  u8 resp_data[2U];
  #line 470 
  struct hclge_dev *hdev = vport->back;
  #line 473 
  resp_data[0] = hdev->hw.mac.media_type;
  #line 474 
  resp_data[1] = (unsigned char)hdev->hw.mac.module_type;
  #line 475 
  return hclge_gen_resp_to_vf(vport,mbx_req,0,(u8 *)(& resp_data),
                           (unsigned short)2);
}

#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static int hclge_get_link_info(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *mbx_req)
{
  #line 486 
  u16 link_status;
  #line 487 
  u8 msg_data[8U];
  #line 488 
  u8 dest_vfid;
  #line 489 
  u16 duplex;
  #line 485 
  struct hclge_dev *hdev = vport->back;
  #line 492 
  switch (vport->vf_info.link_state) {
    #line 493 
    case 1: 
            #line 493 
    ;
    #line 494 
    link_status = (unsigned short)1U;
    #line 495 
    break;
    #line 496 
    case 2: 
            #line 496 
    ;
    #line 497 
    link_status = (unsigned short)0U;
    #line 498 
    break;
    #line 499 
    case 0: 
            #line 499 
    ;
    #line 500 
    default: 
             #line 500 
    ;
    #line 501 
    link_status = (unsigned short)hdev->hw.mac.link;
    #line 502 
    break;
  }
  #line 505 
  duplex = (unsigned short)hdev->hw.mac.duplex;
  #line 506 
  memcpy((void *)(msg_data),(void *)(& link_status),2UL);
  #line 507 
  memcpy((void *)(& msg_data[2]),(void *)(& hdev->hw.mac.speed),4UL);
  #line 508 
  memcpy((void *)(& msg_data[6]),(void *)(& duplex),2UL);
  #line 509 
  dest_vfid = mbx_req->mbx_src_vfid;
  #line 512 
  return hclge_send_mbx_msg(vport,(u8 *)(& msg_data),(unsigned short)8,
                         (unsigned short)23,(unsigned char)((int)dest_vfid));
}

#line 516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static void hclge_get_link_mode(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *mbx_req)
{
  #line 521 
  unsigned long advertising;
  #line 522 
  unsigned long supported;
  #line 523 
  unsigned long send_data;
  #line 524 
  u8 msg_data[10U];
  #line 525 
  u8 dest_vfid;
  #line 520 
  struct hclge_dev *hdev = vport->back;
  #line 527 
  advertising = hdev->hw.mac.advertising[0];
  #line 528 
  supported = hdev->hw.mac.supported[0];
  #line 529 
  dest_vfid = mbx_req->mbx_src_vfid;
  #line 530 
  msg_data[0] = mbx_req->msg[2];
  #line 532 
  if ((unsigned int)msg_data[0] == 1U) 
                                       #line 532 
                                       send_data = supported; else 
                                                                   #line 532 
                                                                   send_data = advertising;
  #line 534 
  memcpy((void *)(& msg_data[2]),(void *)(& send_data),8UL);
  #line 535 
  hclge_send_mbx_msg(vport,(u8 *)(& msg_data),(unsigned short)10,(unsigned short)32,(unsigned char)((int)dest_vfid));
  #line 536 
  return;
}

#line 539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static void hclge_mbx_reset_vf_queue(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *mbx_req)
{
  #line 542 
  u16 queue_id;
  #line 544 
  memcpy((void *)(& queue_id),(void *)(& mbx_req->msg[2]),2UL);
  #line 546 
  hclge_reset_vf_queue(vport,(unsigned short)((int)queue_id));
  #line 549 
  hclge_gen_resp_to_vf(vport,mbx_req,0,(u8 *)0U,(unsigned short)0);
  #line 550 
  return;
}

#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static void hclge_reset_vf(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *mbx_req)
{
  #line 556 
  int ret;
  #line 555 
  struct hclge_dev *hdev = vport->back;
  #line 558 
  _dev_warn(& (hdev->pdev)->dev,(char *)"PF received VF reset request from VF %u!",(int)vport->vport_id);
  #line 561 
  ret = hclge_func_reset_cmd(hdev,(int)vport->vport_id);
  #line 562 
  hclge_gen_resp_to_vf(vport,mbx_req,ret,(u8 *)0U,(unsigned short)0);
  #line 563 
  return;
}

#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static void hclge_vf_keep_alive(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *mbx_req)
{
  #line 568 
  vport->last_active_jiffies = jiffies;
  #line 569 
  return;
}

#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static int hclge_set_vf_mtu(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *mbx_req)
{
  #line 574 
  int ret;
  #line 575 
  u32 mtu;
  #line 577 
  memcpy((void *)(& mtu),(void *)(& mbx_req->msg[2]),4UL);
  #line 578 
  ret = hclge_set_vport_mtu(vport,(int)mtu);
  #line 580 
  return hclge_gen_resp_to_vf(vport,mbx_req,ret,(u8 *)0U,(unsigned short)0);
}

#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static int hclge_get_queue_id_in_pf(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *mbx_req)
{
  #line 586 
  u16 queue_id;
  #line 586 
  u16 qid_in_pf;
  #line 587 
  u8 resp_data[2U];
  #line 589 
  memcpy((void *)(& queue_id),(void *)(& mbx_req->msg[2]),2UL);
  #line 590 
  qid_in_pf = hclge_covert_handle_qid_global(& vport->nic,(unsigned short)((int)queue_id));
  #line 591 
  memcpy((void *)(& resp_data),(void *)(& qid_in_pf),2UL);
  #line 593 
  return hclge_gen_resp_to_vf(vport,mbx_req,0,(u8 *)(& resp_data),
                           (unsigned short)2);
}

#line 597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static int hclge_get_rss_key(struct hclge_vport *vport, struct hclge_mbx_vf_to_pf_cmd *mbx_req)
{
  #line 601 
  u8 resp_data[8U];
  #line 603 
  u8 index;
  #line 602 
  struct hclge_dev *hdev = vport->back;
  #line 605 
  index = mbx_req->msg[2];
  #line 607 
  memcpy((void *)(resp_data),(void *)(& (hdev->vport)->rss_hash_key[(int)index * 8]),8UL);
  #line 611 
  return hclge_gen_resp_to_vf(vport,mbx_req,0,(u8 *)(& resp_data),
                           (unsigned short)8);
}

#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static void hclge_link_fail_parse(struct hclge_dev *hdev, u8 link_fail_code)
{
  #line 617 
  switch ((int)link_fail_code) {
    #line 618 
    case 1: 
            #line 618 
    ;
    #line 619 
    _dev_warn(& (hdev->pdev)->dev,(char *)"Reference clock lost!\n");
    #line 620 
    break;
    #line 621 
    case 2: 
            #line 621 
    ;
    #line 622 
    _dev_warn(& (hdev->pdev)->dev,(char *)"SFP tx is disabled!\n");
    #line 623 
    break;
    #line 624 
    case 3: 
            #line 624 
    ;
    #line 625 
    _dev_warn(& (hdev->pdev)->dev,(char *)"SFP is absent!\n");
    #line 626 
    break;
    #line 627 
    default: 
             #line 627 
    ;
    #line 628 
    break;
  }
  #line 630 
  return;
}

#line 632  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static void hclge_handle_link_change_event(struct hclge_dev *hdev, struct hclge_mbx_vf_to_pf_cmd *req)
{
  #line 638 
  cif_clear_bit(7L,& hdev->state);
  #line 639 
  hclge_task_schedule(hdev,0UL);
  #line 641 
  if ((unsigned int)req->msg[1] == 0U) 
                                       #line 642 
                                       hclge_link_fail_parse(hdev,(unsigned char)((int)req->msg[2]));
  #line 643 
  return;
}

#line 645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static bool hclge_cmd_crq_empty(struct hclge_hw *hw)
{
  #line 647 
  u32 tail = hclge_read_reg_0((u8 *)hw->io_base,159780U);
  #line 649 
  return (_Bool)((unsigned int)hw->cmq.crq.next_to_use == tail);
}

#line 652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
static void hclge_handle_ncsi_error(struct hclge_dev *hdev)
{
  #line 654 
  struct hnae3_ae_dev *ae_dev = hdev->ae_dev;
  #line 656 
  (*((ae_dev->ops)->set_default_reset_request))(ae_dev,(enum hnae3_reset_type)HNAE3_GLOBAL_RESET);
  #line 657 
  _dev_warn(& (hdev->pdev)->dev,(char *)"requesting reset due to NCSI error\n");
  #line 658 
  (*((ae_dev->ops)->reset_event))(hdev->pdev,(struct hnae3_handle *)0);
  #line 659 
  return;
}

#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mbx.c"
void hclge_mbx_handler(struct hclge_dev *hdev)
{
  #line 664 
  struct hclge_mbx_vf_to_pf_cmd *req;
  #line 665 
  struct hclge_vport *vport;
  #line 666 
  struct hclge_desc *desc;
  #line 667 
  unsigned int flag;
  #line 668 
  int ret;
  #line 663 
  struct hclge_cmq_ring *crq = & hdev->hw.cmq.crq;
  #line 671 
  while (1) {
    #line 671 
    if (hclge_cmd_crq_empty(& hdev->hw)) 
                                         #line 671 
                                         break;
    {
      #line 672 
      if ((int)test_bit(13L,& hdev->state) != 0) {
        #line 673 
        _dev_warn(& (hdev->pdev)->dev,(char *)"command queue needs re-initializing\n");
        #line 675 
        return;
      }
      #line 678 
      desc = crq->desc + (unsigned long)crq->next_to_use;
      #line 679 
      req = (struct hclge_mbx_vf_to_pf_cmd *)(& desc->data);
      #line 681 
      flag = (unsigned int)(crq->desc + (unsigned long)crq->next_to_use)->flag;
      #line 682 
      if ((long)((flag & 2U) == 0U) != 0L) {
        #line 683 
        _dev_warn(& (hdev->pdev)->dev,(char *)"dropped invalid mailbox message, code = %u\n",(int)req->msg[0]);
        #line 688 
        (crq->desc + (unsigned long)crq->next_to_use)->flag = (unsigned short)0U;
        #line 689 
        crq->next_to_use = (crq->next_to_use + 1) % (int)crq->desc_num;
        #line 690 
        continue;
      }
      #line 693 
      vport = hdev->vport + (unsigned long)req->mbx_src_vfid;
      #line 695 
      switch ((int)req->msg[0]) {
        #line 696 
        case 6: 
                #line 696 
        ;
        #line 697 
        ret = hclge_map_unmap_ring_to_vf_vector(vport,(_Bool)1,req);
        #line 699 
        break;
        #line 700 
        case 7: 
                #line 700 
        ;
        #line 701 
        ret = hclge_map_unmap_ring_to_vf_vector(vport,(_Bool)0,req);
        #line 703 
        break;
        #line 704 
        case 8: 
                #line 704 
        ;
        #line 705 
        ret = hclge_set_vf_promisc_mode(vport,req);
        #line 706 
        if (ret != 0) 
                      #line 707 
                      _dev_err(& (hdev->pdev)->dev,(char *)"PF fail(%d) to set VF promisc mode\n",ret);
        #line 710 
        break;
        #line 711 
        case 3: 
                #line 711 
        ;
        #line 712 
        ret = hclge_set_vf_uc_mac_addr(vport,req);
        #line 713 
        if (ret != 0) 
                      #line 714 
                      _dev_err(& (hdev->pdev)->dev,(char *)"PF fail(%d) to set VF UC MAC Addr\n",ret);
        #line 717 
        break;
        #line 718 
        case 4: 
                #line 718 
        ;
        #line 719 
        ret = hclge_set_vf_mc_mac_addr(vport,req,(_Bool)0);
        #line 720 
        if (ret != 0) 
                      #line 721 
                      _dev_err(& (hdev->pdev)->dev,(char *)"PF fail(%d) to set VF MC MAC Addr\n",ret);
        #line 724 
        break;
        #line 725 
        case 5: 
                #line 725 
        ;
        #line 726 
        ret = hclge_set_vf_vlan_cfg(vport,req);
        #line 727 
        if (ret != 0) 
                      #line 728 
                      _dev_err(& (hdev->pdev)->dev,(char *)"PF failed(%d) to config VF\'s VLAN\n",ret);
        #line 731 
        break;
        #line 732 
        case 29: 
                 #line 732 
        ;
        #line 733 
        ret = hclge_set_vf_alive(vport,req,(_Bool)0);
        #line 734 
        if (ret != 0) 
                      #line 735 
                      _dev_err(& (hdev->pdev)->dev,(char *)"PF failed(%d) to set VF\'s ALIVE\n",ret);
        #line 738 
        break;
        #line 739 
        case 11: 
                 #line 739 
        ;
        #line 740 
        ret = hclge_get_vf_queue_info(vport,req,(_Bool)1);
        #line 741 
        if (ret != 0) 
                      #line 742 
                      _dev_err(& (hdev->pdev)->dev,(char *)"PF failed(%d) to get Q info for VF\n",ret);
        #line 745 
        break;
        #line 746 
        case 12: 
                 #line 746 
        ;
        #line 747 
        ret = hclge_get_vf_queue_depth(vport,req,(_Bool)1);
        #line 748 
        if (ret != 0) 
                      #line 749 
                      _dev_err(& (hdev->pdev)->dev,(char *)"PF failed(%d) to get Q depth for VF\n",ret);
        #line 752 
        break;
        #line 754 
        case 13: 
                 #line 754 
        ;
        #line 755 
        ret = hclge_get_vf_tcinfo(vport,req,(_Bool)1);
        #line 756 
        if (ret != 0) 
                      #line 757 
                      _dev_err(& (hdev->pdev)->dev,(char *)"PF failed(%d) to get TC info for VF\n",ret);
        #line 760 
        break;
        #line 761 
        case 26: 
                 #line 761 
        ;
        #line 762 
        ret = hclge_get_link_info(vport,req);
        #line 763 
        if (ret != 0) 
                      #line 764 
                      _dev_err(& (hdev->pdev)->dev,(char *)"PF fail(%d) to get link stat for VF\n",ret);
        #line 767 
        break;
        #line 768 
        case 27: 
                 #line 768 
        ;
        #line 769 
        hclge_mbx_reset_vf_queue(vport,req);
        #line 770 
        break;
        #line 771 
        case 1: 
                #line 771 
        ;
        #line 772 
        hclge_reset_vf(vport,req);
        #line 773 
        break;
        #line 774 
        case 28: 
                 #line 774 
        ;
        #line 775 
        hclge_vf_keep_alive(vport,req);
        #line 776 
        break;
        #line 777 
        case 30: 
                 #line 777 
        ;
        #line 778 
        ret = hclge_set_vf_mtu(vport,req);
        #line 779 
        if (ret != 0) 
                      #line 780 
                      _dev_err(& (hdev->pdev)->dev,(char *)"VF fail(%d) to set mtu\n",ret);
        #line 782 
        break;
        #line 783 
        case 31: 
                 #line 783 
        ;
        #line 784 
        ret = hclge_get_queue_id_in_pf(vport,req);
        #line 785 
        if (ret != 0) 
                      #line 786 
                      _dev_err(& (hdev->pdev)->dev,(char *)"PF failed(%d) to get qid for VF\n",ret);
        #line 789 
        break;
        #line 790 
        case 15: 
                 #line 790 
        ;
        #line 791 
        ret = hclge_get_rss_key(vport,req);
        #line 792 
        if (ret != 0) 
                      #line 793 
                      _dev_err(& (hdev->pdev)->dev,(char *)"PF fail(%d) to get rss key for VF\n",ret);
        #line 796 
        break;
        #line 797 
        case 33: 
                 #line 797 
        ;
        #line 798 
        hclge_get_link_mode(vport,req);
        #line 799 
        break;
        #line 800 
        case 200: 
                  #line 800 
        ;
        #line 801 
        cif_mutex_lock_vport_cfg_mutex_of_hclge_dev(& hdev->vport_cfg_mutex);
        #line 802 
        hclge_rm_vport_all_mac_table(vport,(_Bool)1,(enum HCLGE_MAC_ADDR_TYPE)HCLGE_MAC_ADDR_UC);
        #line 804 
        hclge_rm_vport_all_mac_table(vport,(_Bool)1,(enum HCLGE_MAC_ADDR_TYPE)HCLGE_MAC_ADDR_MC);
        #line 806 
        hclge_rm_vport_all_vlan_table(vport,(_Bool)1);
        #line 807 
        cif_mutex_unlock_vport_cfg_mutex_of_hclge_dev(& hdev->vport_cfg_mutex);
        #line 808 
        break;
        #line 809 
        case 35: 
                 #line 809 
        ;
        #line 810 
        ret = hclge_get_vf_media_type(vport,req);
        #line 811 
        if (ret != 0) 
                      #line 812 
                      _dev_err(& (hdev->pdev)->dev,(char *)"PF fail(%d) to media type for VF\n",ret);
        #line 815 
        break;
        #line 816 
        case 201: 
                  #line 816 
        ;
        #line 817 
        hclge_handle_link_change_event(hdev,req);
        #line 818 
        break;
        #line 819 
        case 16: 
                 #line 819 
        ;
        #line 820 
        ret = hclge_get_vf_mac_addr(vport,req);
        #line 821 
        if (ret != 0) 
                      #line 822 
                      _dev_err(& (hdev->pdev)->dev,(char *)"PF failed(%d) to get MAC for VF\n",ret);
        #line 825 
        break;
        #line 826 
        case 202: 
                  #line 826 
        ;
        #line 827 
        hclge_handle_ncsi_error(hdev);
        #line 828 
        break;
        #line 829 
        default: 
                 #line 829 
        ;
        #line 830 
        _dev_err(& (hdev->pdev)->dev,(char *)"un-supported mailbox message, code = %u\n",(int)req->msg[0]);
        #line 833 
        break;
      }
      #line 835 
      (crq->desc + (unsigned long)crq->next_to_use)->flag = (unsigned short)0U;
      #line 836 
      crq->next_to_use = (crq->next_to_use + 1) % (int)crq->desc_num;
    }
  }
  #line 840 
  hclge_write_reg(hdev->hw.io_base,159784U,(unsigned int)crq->next_to_use);
  #line 841 
  return;
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_mbx.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 124 
  ldv_clear_bit(nr,addr);
  #line 125 
  return;
}

#line 413  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_mbx.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 416 
  return ldv_kzalloc(size,flags);
}

#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_mbx.i.aux"
static void cif_mutex_lock_vport_cfg_mutex_of_hclge_dev(struct mutex *lock)
{
  #line 690 
  ldv_mutex_model_lock(lock,(char *)"vport_cfg_mutex_of_hclge_dev");
  #line 691 
  return;
}

#line 694  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_mbx.i.aux"
static void cif_mutex_unlock_vport_cfg_mutex_of_hclge_dev(struct mutex *lock)
{
  #line 697 
  ldv_mutex_model_unlock(lock,(char *)"vport_cfg_mutex_of_hclge_dev");
  #line 698 
  return;
}

/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  #line 368 
  int bitpos = -1;
  #line 369 
  ldv_inline_asm();
  #line 377 
  return bitpos + 1;
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 70 
unsigned long find_first_zero_bit(unsigned long *, unsigned long);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w)
{
  #line 45 
  unsigned long res;
  #line 46 
  ldv_inline_asm();
  #line 51 
  return res;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/byteorder/generic.h"
__inline static void cpu_to_be32_array(__be32 *dst, u32 *src, size_t len)
{
  #line 193 
  int i;
  #line 195 
  i = 0;
  #line 195 
  while ((unsigned long)i < len) {
    #line 196 
    *(dst + (unsigned long)i) = __builtin_bswap32(*(src + (unsigned long)i));
    #line 195 
    i ++;
  }
  #line 197 
  return;
}

#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/byteorder/generic.h"
__inline static void be32_to_cpu_array(u32 *dst, __be32 *src, size_t len)
{
  #line 201 
  int i;
  #line 203 
  i = 0;
  #line 203 
  while ((unsigned long)i < len) {
    #line 204 
    *(dst + (unsigned long)i) = __builtin_bswap32(*(src + (unsigned long)i));
    #line 203 
    i ++;
  }
  #line 205 
  return;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w)
{
  #line 72 
  unsigned long tmp_0;
  #line 72 
  if (0 != 0) 
              #line 72 
              tmp_0 = (unsigned long)((((unsigned int)((((((((((unsigned long long)w & 1ULL) != 0ULL) + (((unsigned long long)w & 2ULL) != 0ULL)) + (((unsigned long long)w & 4ULL) != 0ULL)) + (((unsigned long long)w & 8ULL) != 0ULL)) + (((unsigned long long)w & 16ULL) != 0ULL)) + (((unsigned long long)w & 32ULL) != 0ULL)) + (((unsigned long long)w & 64ULL) != 0ULL)) + (((unsigned long long)w & 128ULL) != 0ULL)) + (unsigned int)(((((((((w & 256UL) != 0UL) + ((w & 512UL) != 0UL)) + ((w & 1024UL) != 0UL)) + ((w & 2048UL) != 0UL)) + ((w & 4096UL) != 0UL)) + ((w & 8192UL) != 0UL)) + ((w & 16384UL) != 0UL)) + ((w & 32768UL) != 0UL))) + ((unsigned int)(((((((((w & 65536UL) != 0UL) + ((w & 131072UL) != 0UL)) + ((w & 262144UL) != 0UL)) + ((w & 524288UL) != 0UL)) + ((w & 1048576UL) != 0UL)) + ((w & 2097152UL) != 0UL)) + ((w & 4194304UL) != 0UL)) + ((w & 8388608UL) != 0UL)) + (unsigned int)(((((((((w & 16777216UL) != 0UL) + ((w & 33554432UL) != 0UL)) + ((w & 67108864UL) != 0UL)) + ((w & 134217728UL) != 0UL)) + ((w & 268435456UL) != 0UL)) + ((w & 536870912UL) != 0UL)) + ((w & 1073741824UL) != 0UL)) + ((w & 2147483648UL) != 0UL)))) + (((unsigned int)(((((((((w & 4294967296UL) != 0UL) + ((w & 8589934592UL) != 0UL)) + ((w & 17179869184UL) != 0UL)) + ((w & 34359738368UL) != 0UL)) + ((w & 68719476736UL) != 0UL)) + ((w & 137438953472UL) != 0UL)) + ((w & 274877906944UL) != 0UL)) + ((w & 549755813888UL) != 0UL)) + (unsigned int)(((((((((w & 1099511627776UL) != 0UL) + ((w & 2199023255552UL) != 0UL)) + ((w & 4398046511104UL) != 0UL)) + ((w & 8796093022208UL) != 0UL)) + ((w & 17592186044416UL) != 0UL)) + ((w & 35184372088832UL) != 0UL)) + ((w & 70368744177664UL) != 0UL)) + ((w & 140737488355328UL) != 0UL))) + ((unsigned int)(((((((((w & 281474976710656UL) != 0UL) + ((w & 562949953421312UL) != 0UL)) + ((w & 1125899906842624UL) != 0UL)) + ((w & 2251799813685248UL) != 0UL)) + ((w & 4503599627370496UL) != 0UL)) + ((w & 9007199254740992UL) != 0UL)) + ((w & 18014398509481984UL) != 0UL)) + ((w & 36028797018963968UL) != 0UL)) + (unsigned int)(((((((((w & 72057594037927936UL) != 0UL) + ((w & 144115188075855872UL) != 0UL)) + ((w & 288230376151711744UL) != 0UL)) + ((w & 576460752303423488UL) != 0UL)) + ((w & 1152921504606846976UL) != 0UL)) + ((w & 2305843009213693952UL) != 0UL)) + ((w & 4611686018427387904UL) != 0UL)) + ((w & 9223372036854775808UL) != 0UL))))); else 
                                                                    #line 72 
                                                                    tmp_0 = __arch_hweight64((unsigned long long)w);
  #line 72 
  return tmp_0;
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static unsigned int fls_long(unsigned long l)
{
  #line 183 
  return (unsigned int)fls64((unsigned long long)l);
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  #line 24 
  return fls(n) + -1;
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static unsigned long __roundup_pow_of_two(unsigned long n)
{
  #line 57 
  return 1UL << fls_long(n + 18446744073709551615UL);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 64 
void __dynamic_dev_dbg(struct _ddebug *, struct device *, char * , ...);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_2910 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_2912 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h)
{
  #line 743 
  h->next = (struct hlist_node *)0;
  #line 744 
  h->pprev = (struct hlist_node **)0;
  #line 745 
  return;
}

#line 747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node *h)
{
  #line 749 
  return h->pprev == (struct hlist_node **)0;
}

#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n)
{
  #line 759 
  struct hlist_node *next = n->next;
  #line 760 
  struct hlist_node **pprev = n->pprev;
  {
    #line 763 
    union __anonunion___u_2918 __u = {.__val = next};
    #line 762 
    __write_once_size((void *)pprev,(void *)(& __u.__c),8);
    #line 762 
    struct hlist_node *tmp = __u.__val;
  }
  #line 763 
  if (next != (struct hlist_node *)0) 
                                      #line 764 
                                      next->pprev = pprev;
  #line 765 
  return;
}

#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n)
{
  #line 769 
  __hlist_del(n);
  #line 770 
  n->next = (struct hlist_node *)(-2401263026318606080);
  #line 771 
  n->pprev = (struct hlist_node **)(-2401263026318606046);
  #line 772 
  return;
}

#line 774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n)
{
  #line 776 
  if (hlist_unhashed(n) == 0) {
    #line 777 
    __hlist_del(n);
    #line 778 
    INIT_HLIST_NODE(n);
  }
  #line 780 
  return;
}

#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
  #line 784 
  struct hlist_node *first = h->first;
  #line 785 
  n->next = first;
  #line 786 
  if (first != (struct hlist_node *)0) 
                                       #line 787 
                                       first->pprev = & n->next;
  {
    #line 789 
    union __anonunion___u_2920 __u = {.__val = n};
    #line 788 
    __write_once_size((void *)(& h->first),(void *)(& __u.__c),8);
    #line 788 
    struct hlist_node *tmp = __u.__val;
  }
  #line 789 
  n->pprev = & h->first;
  #line 790 
  return;
}

#line 802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_add_behind(struct hlist_node *n, struct hlist_node *prev)
{
  #line 805 
  n->next = prev->next;
  #line 806 
  prev->next = n;
  #line 807 
  n->pprev = & prev->next;
  #line 809 
  if (n->next != (struct hlist_node *)0) 
                                         #line 810 
                                         (n->next)->pprev = & n->next;
  #line 811 
  return;
}

#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 15 
void *__memcpy(void *, void *, size_t);
#line 61 
#line 61 
int memcmp(void *, void *, size_t);
#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 151 
int __bitmap_weight(unsigned long *, unsigned int);
#line 230 
#line 206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst, unsigned long *src, unsigned int nbits)
{
  #line 240 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 241 
  __memcpy((void *)dst,(void *)src,(unsigned long)len);
  #line 242 
  return;
}

#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long *src, unsigned int nbits)
{
  #line 390 
  if (0 != 0 && nbits + 4294967295U <= 63U) {
    #line 391 
    return (int)hweight_long(*src & (18446744073709551615UL >> (- nbits & 63U)));
  }
  #line 392 
  return __bitmap_weight(src,nbits);
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 39 
extern unsigned int nr_cpu_ids;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{
  #line 137 
  int __ret_warn_on = cpu >= bits;
  #line 137 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 138 
    ldv_inline_asm();
    #line 139 
    ldv_inline_asm();
  }
  #line 137 
  long tmp = (long)(__ret_warn_on != 0);
  #line 139 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  #line 144 
  cpu_max_bits_warn(cpu,nr_cpu_ids);
  #line 145 
  return cpu;
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_first(struct cpumask *srcp)
{
  #line 214 
  return (unsigned int)cif_find_first_bit((unsigned long *)(& srcp->bits),
                         (unsigned long)nr_cpu_ids);
}

#line 247 
#line 247 
unsigned int cpumask_local_spread(unsigned int, int);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
  #line 327 
  ;
  #line 327 
  cif_set_bit_0((long)cpumask_check(cpu),(unsigned long *)(& dstp->bits));
  #line 328 
  return;
}

#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask *srcp)
{
  #line 556 
  return (unsigned int)bitmap_weight((unsigned long *)(& srcp->bits),nr_cpu_ids);
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp, struct cpumask *srcp)
{
  #line 593 
  bitmap_copy((unsigned long *)(& dstp->bits),(unsigned long *)(& srcp->bits),nr_cpu_ids);
  #line 594 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 740  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_spin_lock_bh_fd_rule_lock_of_hclge_dev(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 749  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(spinlock_t *lock);
#line 26 
#line 758 
static void cif_mutex_lock_umv_mutex_of_hclge_dev(struct mutex *lock);
#line 26 
#line 772 
static void cif_mutex_lock_vport_cfg_mutex_of_hclge_dev_0(struct mutex *lock);
#line 26 
#line 786 
static void cif_mutex_lock_vport_lock_of_hclge_dev(struct mutex *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 27 
void *ldv_devm_kzalloc(size_t size, gfp_t flags);
#line 29 
#line 29 
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 27 
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 21 
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 22 
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 86 
void mutex_destroy(struct mutex *);
#line 128 
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 185 
#line 765  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_mutex_unlock_umv_mutex_of_hclge_dev(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 779  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_mutex_unlock_vport_cfg_mutex_of_hclge_dev_0(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 793  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_mutex_unlock_vport_lock_of_hclge_dev(struct mutex *lock);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 732  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 800  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 210 
unsigned long round_jiffies_relative(unsigned long);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 207 
#line 207 
void __init_work(struct work_struct *, int);
#line 385 
#line 385 
extern struct workqueue_struct *system_wq;
#line 446 
#line 313  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static bool cif_queue_work_on(int cpu, struct workqueue_struct *wq, struct work_struct *work);
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 449 
bool mod_delayed_work_on(int, struct workqueue_struct *, struct delayed_work *, unsigned long);
#line 461 
#line 461 
bool cancel_work_sync(struct work_struct *);
#line 465 
#line 465 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
#line 67 
struct cpumask *cpumask_of_node(int);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 414  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 435  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 709  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 1383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static int dev_to_node(struct device *dev)
{
  #line 1385 
  return dev->numa_node;
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  #line 671 
  int rc = dma_set_mask(dev,mask);
  #line 672 
  if (rc == 0) 
               #line 673 
               dma_set_coherent_mask(dev,mask);
  #line 674 
  return rc;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 61 
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
__inline static __u64 ethtool_get_flow_spec_ring(__u64 ring_cookie)
{
  #line 931 
  return ring_cookie & 4294967295ULL;
}

#line 934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
__inline static __u64 ethtool_get_flow_spec_ring_vf(__u64 ring_cookie)
{
  #line 936 
  return (ring_cookie >> 32) & 255ULL;
}

#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 716  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 724  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 352 
int irq_set_affinity_hint(unsigned int, struct cpumask *);
#line 355 
#line 355 
int irq_set_affinity_notifier(unsigned int, struct irq_affinity_notify *);
#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 730 
bool rps_may_expire_flow(struct net_device *, u16, u32, u16);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 *addr)
{
  #line 166 
  return (_Bool)((unsigned int)(((int)*((u16 *)addr) & (int)*((u16 *)(addr + 2U))) & (int)*((u16 *)(addr + 4U))) == 65535U);
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_zero_addr(u8 *addr)
{
  #line 251 
  memset((void *)addr,0,6UL);
  #line 252 
  return;
}

#line 1131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1161 
#line 1161 
void pci_clear_master(struct pci_dev *);
#line 1202 
#line 1202 
int pci_select_bars(struct pci_dev *, unsigned long);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1288 
#line 1288 
void pci_release_selected_regions(struct pci_dev *, int);
#line 1447 
#line 1447 
int pci_alloc_irq_vectors_affinity(struct pci_dev *, unsigned int, unsigned int, unsigned int, struct irq_affinity *);
#line 1451 
#line 1451 
void pci_free_irq_vectors(struct pci_dev *);
#line 1452 
#line 1452 
int pci_irq_vector(struct pci_dev *, unsigned int);
#line 1633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_release_mem_regions(struct pci_dev *pdev)
{
  #line 1635 
  ;
  #line 1635 
  pci_release_selected_regions(pdev,pci_select_bars(pdev,512UL));
  #line 1637 
  return;
}

#line 1768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_alloc_irq_vectors(struct pci_dev *dev, unsigned int min_vecs, unsigned int max_vecs, unsigned int flags)
{
  #line 1771 
  return pci_alloc_irq_vectors_affinity(dev,min_vecs,max_vecs,flags,
                                     (struct irq_affinity *)0);
}

#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1970 
#line 1970 
void *pcim_iomap(struct pci_dev *, int, unsigned long);
#line 1971 
#line 1971 
void pcim_iounmap(struct pci_dev *, void *);
#line 2033 
#line 2033 
int pci_num_vf(struct pci_dev *);
#line 2036 
#line 2036 
int pci_sriov_get_totalvfs(struct pci_dev *);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/crash_dump.h"
#line 16 
extern unsigned long long elfcorehdr_addr;
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/crash_dump.h"
__inline static bool is_kdump_kernel(void)
{
  #line 66 
  return (_Bool)(elfcorehdr_addr != 18446744073709551615ULL);
}

#line 1080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
#line 1080 
int hclge_cmd_init(struct hclge_dev *hdev);
#line 1091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
__inline static u32 hclge_read_reg_1(u8 *base, u32 reg)
{
  #line 1094 
  union __anonunion___u_3624 __u;
  #line 1093 
  __read_once_size((void *)(& base),(void *)(& __u.__c),8);
  #line 1093 
  u8 *reg_addr = (__u.__val);
  #line 1095 
  return readl((void *)(reg_addr + (unsigned long)reg));
}

#line 1112 
#line 1112 
void hclge_cmd_uninit(struct hclge_dev *hdev);
#line 1113 
#line 1113 
int hclge_cmd_queue_init(struct hclge_dev *hdev);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/linkmode.h"
__inline static void linkmode_zero(unsigned long *dst)
{
  #line 10 
  cif_bitmap_zero(dst,74U);
  #line 11 
  return;
}

#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/linkmode.h"
__inline static void linkmode_copy(unsigned long *dst, unsigned long *src)
{
  #line 15 
  bitmap_copy(dst,src,74U);
  #line 16 
  return;
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/linkmode.h"
__inline static void linkmode_set_bit(int nr, unsigned long *addr)
{
  #line 43 
  __set_bit((long)nr,addr);
  #line 44 
  return;
}

#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/linkmode.h"
__inline static int linkmode_test_bit(int nr, unsigned long *addr)
{
  #line 76 
  return (int)test_bit((long)nr,addr);
}

#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u32 linkmode_adv_to_lcl_adv_t(unsigned long *advertising)
{
  #line 476 
  u32 lcl_adv = 0U;
  #line 478 
  if (linkmode_test_bit(13,advertising) != 0) 
                                              #line 480 
                                              lcl_adv |= 1024U;
  #line 481 
  if (linkmode_test_bit(14,advertising) != 0) 
                                              #line 483 
                                              lcl_adv |= 2048U;
  #line 485 
  return lcl_adv;
}

#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u8 mii_resolve_flowctrl_fdx(u16 lcladv, u16 rmtadv)
{
  #line 513 
  u8 cap = (unsigned char)0U;
  #line 515 
  if ((((int)lcladv & (int)rmtadv) & 1024) != 0) 
                                                 #line 516 
                                                 cap = (unsigned char)3U;
  else 
    #line 517 
    if ((((int)lcladv & (int)rmtadv) & 2048) != 0) 
      #line 518 
      if (((int)lcladv & 1024) != 0) 
                                     #line 519 
                                     cap = (unsigned char)2U;
      else 
        #line 520 
        if (((int)rmtadv & 1024) != 0) 
                                       #line 521 
                                       cap = (unsigned char)1U;
  #line 524 
  return cap;
}

#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
#line 320 
int mdiobus_read(struct mii_bus *, int, u32);
#line 322 
#line 322 
int mdiobus_write(struct mii_bus *, int, u32, u16);
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
#line 268 
void mdiobus_unregister(struct mii_bus *);
#line 700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static int phy_read(struct phy_device *phydev, u32 regnum)
{
  #line 702 
  return mdiobus_read(phydev->mdio.bus,phydev->mdio.addr,regnum);
}

#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static int phy_write(struct phy_device *phydev, u32 regnum, u16 val)
{
  #line 729 
  return mdiobus_write(phydev->mdio.bus,phydev->mdio.addr,regnum,
                    (unsigned short)((int)val));
}

#line 1026 
#line 1026 
int phy_suspend(struct phy_device *);
#line 1027 
#line 1027 
int phy_resume(struct phy_device *);
#line 1029 
#line 1029 
int phy_loopback(struct phy_device *, bool);
#line 1049 
#line 1049 
int phy_start_aneg(struct phy_device *);
#line 1102 
#line 1102 
int genphy_read_status(struct phy_device *);
#line 1152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static int phy_read_status(struct phy_device *phydev)
{
  #line 1154 
  if (phydev->drv == (struct phy_driver *)0) 
                                             #line 1155 
                                             return -5;
  #line 1157 
  if ((phydev->drv)->read_status != (int (*)(struct phy_device *))0) {
    #line 1158 
    return (*((phydev->drv)->read_status))(phydev);
  }
  else {
    #line 1160 
    return genphy_read_status(phydev);
  }
}

#line 1177 
#line 1177 
int phy_mii_ioctl(struct phy_device *, struct ifreq *, int);
#line 1188 
#line 1188 
void phy_set_asym_pause(struct phy_device *, bool, bool);
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
#line 691 
void hnae3_unregister_ae_algo(struct hnae3_ae_algo *);
#line 692 
#line 692 
void hnae3_register_ae_algo(struct hnae3_ae_algo *);
#line 697 
#line 697 
void hnae3_set_client_init_flag(struct hnae3_client *, struct hnae3_ae_dev *, unsigned int);
#line 962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
#line 2451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_cfg_mac_speed_dup(struct hclge_dev *hdev, int speed, u8 duplex);
#line 972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
#line 8681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_reset_tqp(struct hnae3_handle *handle, u16 queue_id);
#line 974  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
#line 8797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_cfg_flowctrl(struct hclge_dev *hdev);
#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
#line 979 
int hclge_dbg_run_cmd(struct hnae3_handle *handle, char *cmd_buf);
#line 990 
#line 7480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
void hclge_uninit_vport_mac_table(struct hclge_dev *hdev);
#line 992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
#line 8254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
void hclge_uninit_vport_vlan_table(struct hclge_dev *hdev);
#line 999  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
#line 10142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_query_bd_num_cmd_send(struct hclge_dev *hdev, struct hclge_desc *desc);
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
#line 1004 
void hclge_dbg_dump_rst_info(struct hclge_dev *hdev);
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mdio.h"
#line 7 
int hclge_mac_mdio_config(struct hclge_dev *hdev);
#line 8 
#line 8 
int hclge_mac_connect_phy(struct hnae3_handle *handle);
#line 9 
#line 9 
void hclge_mac_disconnect_phy(struct hnae3_handle *handle);
#line 10 
#line 10 
void hclge_mac_start_phy(struct hclge_dev *hdev);
#line 11 
#line 11 
void hclge_mac_stop_phy(struct hclge_dev *hdev);
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
#line 8551 
static int hclge_set_mac_mtu(struct hclge_dev *hdev, int new_mps);
#line 61 
#line 8108 
static int hclge_init_vlan_config(struct hclge_dev *hdev);
#line 62 
#line 8518 
static void hclge_sync_vlan_filter(struct hclge_dev *hdev);
#line 63 
#line 9764 
static int hclge_reset_ae_dev(struct hnae3_ae_dev *ae_dev);
#line 64 
#line 6289 
static bool hclge_get_hw_reset_stat(struct hnae3_handle *handle);
#line 65 
#line 7125 
static int hclge_set_umv_space(struct hclge_dev *hdev, u16 space_size, u16 *allocated_size, bool is_alloc);
#line 67 
#line 6246 
static void hclge_rfs_filter_expire(struct hclge_dev *hdev);
#line 68 
#line 6278 
static void hclge_clear_arfs_rules(struct hnae3_handle *handle);
#line 69 
#line 3478 
static enum hnae3_reset_type hclge_get_reset_level(struct hnae3_ae_dev *ae_dev, unsigned long *addr);
#line 71 
#line 6705 
static int hclge_set_default_loopback(struct hclge_dev *hdev);
#line 73 
#line 10605 
static struct hnae3_ae_algo ae_algo;
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static struct pci_device_id ae_algo_pci_tbl[8U] = {{.vendor = 6629U, .device = 41504U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6629U, .device = 41505U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6629U, .device = 41506U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6629U, .device = 41507U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6629U, .device = 41508U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6629U, .device = 41509U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6629U, .device = 41510U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
struct pci_device_id __mod_pci__ae_algo_pci_tbl_device_table[8U];
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u32 cmdq_reg_addr_list[14U] = {159744U, 159748U, 159752U, 159760U, 159764U, 159768U, 159772U, 159776U, 159780U, 159784U, 160000U, 160004U, 160008U, 160012U};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u32 common_reg_addr_list[7U] = {132096U, 132608U, 132864U, 133120U, 133632U, 134144U, 163840U};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u32 ring_reg_addr_list[26U] = {524288U, 524292U, 524296U, 524300U, 524308U, 524312U, 524316U, 524320U, 524324U, 524328U, 524336U, 524340U, 524352U, 524356U, 524360U, 524364U, 524368U, 524372U, 524376U, 524380U, 524384U, 524388U, 524392U, 524400U, 524404U, 524432U};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u32 tqp_intr_reg_addr_list[5U] = {131072U, 131328U, 131584U, 131840U, 133376U};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static char hns3_nic_test_strs[4U][32U] = {{(char)'A', (char)'p', (char)'p', (char)' ', (char)' ', (char)' ', (char)' ', (char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t'}, {(char)'S', (char)'e', (char)'r', (char)'d', (char)'e', (char)'s', (char)' ', (char)'s', (char)'e', (char)'r', (char)'i', (char)'a', (char)'l', (char)' ', (char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t'}, {(char)'S', (char)'e', (char)'r', (char)'d', (char)'e', (char)'s', (char)' ', (char)'p', (char)'a', (char)'r', (char)'a', (char)'l', (char)'l', (char)'e', (char)'l', (char)' ', (char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t'}, {(char)'P', (char)'h', (char)'y', (char)' ', (char)' ', (char)' ', (char)' ', (char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t'}};
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static struct hclge_comm_stats_str g_mac_stats_string[84U] = {{.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'n', (char)'u', (char)'m'}}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 8UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 672UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 680UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 656UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'0', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 16UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'1', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 24UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'2', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 32UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'3', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 40UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'4', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 48UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'5', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 56UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'6', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 64UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'7', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 72UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 664UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'0', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 80UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'1', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 88UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'2', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 96UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'3', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 104UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'4', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 112UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'5', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 120UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'6', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 128UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'7', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 136UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 144UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 152UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 160UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 168UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 176UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 184UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 192UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 200UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 208UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 216UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 224UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 232UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 240UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 248UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 256UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 264UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 272UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'2', (char)'0', (char)'4', (char)'7', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 280UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'2', (char)'0', (char)'4', (char)'8', (char)'_', (char)'4', (char)'0', (char)'9', (char)'5', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 288UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'4', (char)'0', (char)'9', (char)'6', (char)'_', (char)'8', (char)'1', (char)'9', (char)'1', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 296UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'8', (char)'1', (char)'9', (char)'2', (char)'_', (char)'9', (char)'2', (char)'1', (char)'6', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 312UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'9', (char)'2', (char)'1', (char)'7', (char)'_', (char)'1', (char)'2', (char)'2', (char)'8', (char)'7', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 320UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'1', (char)'2', (char)'2', (char)'8', (char)'8', (char)'_', (char)'1', (char)'6', (char)'3', (char)'8', (char)'3', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 328UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 336UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 344UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 352UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 360UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 368UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 376UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 384UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 392UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 400UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 408UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 416UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 424UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 432UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 440UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 448UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 456UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 464UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 472UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 480UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'2', (char)'0', (char)'4', (char)'7', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 488UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'2', (char)'0', (char)'4', (char)'8', (char)'_', (char)'4', (char)'0', (char)'9', (char)'5', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 496UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'4', (char)'0', (char)'9', (char)'6', (char)'_', (char)'8', (char)'1', (char)'9', (char)'1', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 504UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'8', (char)'1', (char)'9', (char)'2', (char)'_', (char)'9', (char)'2', (char)'1', (char)'6', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 520UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'9', (char)'2', (char)'1', (char)'7', (char)'_', (char)'1', (char)'2', (char)'2', (char)'8', (char)'7', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 528UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'1', (char)'2', (char)'2', (char)'8', (char)'8', (char)'_', (char)'1', (char)'6', (char)'3', (char)'8', (char)'3', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 536UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 544UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 552UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'m', (char)'e', (char)'n', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 560UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'m', (char)'i', (char)'n', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 568UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 576UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'a', (char)'l', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 584UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'o', (char)'m', (char)'_', (char)'a', (char)'p', (char)'p', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 592UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'o', (char)'m', (char)'_', (char)'a', (char)'p', (char)'p', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 600UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'m', (char)'e', (char)'n', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 608UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'m', (char)'i', (char)'n', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 616UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 624UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'c', (char)'s', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 632UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'s', (char)'e', (char)'n', (char)'d', (char)'_', (char)'a', (char)'p', (char)'p', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 640UL}, {.desc = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'s', (char)'e', (char)'n', (char)'d', (char)'_', (char)'a', (char)'p', (char)'p', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 648UL}};
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static struct hclge_mac_mgr_tbl_entry_cmd hclge_mgr_table[1U] = {{.flags = (unsigned char)1U, .mac_addr = {(unsigned char)1U, (unsigned char)128U, (unsigned char)194U, [5] = (unsigned char)14U}, .ethter_type = (unsigned short)35020U, .i_port_bitmap = (unsigned char)1U}};
#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u8 hclge_hash_key[40U] = {(unsigned char)109U, (unsigned char)90U, (unsigned char)86U, (unsigned char)218U, (unsigned char)37U, (unsigned char)91U, (unsigned char)14U, (unsigned char)194U, (unsigned char)65U, (unsigned char)103U, (unsigned char)37U, (unsigned char)61U, (unsigned char)67U, (unsigned char)163U, (unsigned char)143U, (unsigned char)176U, (unsigned char)208U, (unsigned char)202U, (unsigned char)43U, (unsigned char)203U, (unsigned char)174U, (unsigned char)123U, (unsigned char)48U, (unsigned char)180U, (unsigned char)119U, (unsigned char)203U, (unsigned char)45U, (unsigned char)163U, (unsigned char)128U, (unsigned char)48U, (unsigned char)242U, (unsigned char)12U, (unsigned char)106U, (unsigned char)66U, (unsigned char)183U, (unsigned char)59U, (unsigned char)190U, (unsigned char)172U, (unsigned char)1U, (unsigned char)250U};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u32 hclge_dfx_bd_offset_list[12U] = {1U, 2U, 3U, 4U, 5U, 6U, 7U, 8U, 9U, 10U, 11U, 12U};
#line 356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static enum hclge_opcode_type hclge_dfx_reg_opcode_list[12U] = {HCLGE_OPC_DFX_BIOS_COMMON_REG, HCLGE_OPC_DFX_SSU_REG_0, HCLGE_OPC_DFX_SSU_REG_1, HCLGE_OPC_DFX_IGU_EGU_REG, HCLGE_OPC_DFX_RPU_REG_0, HCLGE_OPC_DFX_RPU_REG_1, HCLGE_OPC_DFX_NCSI_REG, HCLGE_OPC_DFX_RTC_REG, HCLGE_OPC_DFX_PPP_REG, HCLGE_OPC_DFX_RCB_REG, HCLGE_OPC_DFX_TQP_REG, HCLGE_OPC_DFX_SSU_REG_2};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static struct key_info meta_data_key_info[8U] = {{.key_length = (unsigned char)6U}, {.key_type = (unsigned char)1U, .key_length = (unsigned char)1U}, {.key_type = (unsigned char)2U, .key_length = (unsigned char)1U}, {.key_type = (unsigned char)3U, .key_length = (unsigned char)5U}, {.key_type = (unsigned char)4U, .key_length = (unsigned char)2U}, {.key_type = (unsigned char)5U, .key_length = (unsigned char)12U}, {.key_type = (unsigned char)6U, .key_length = (unsigned char)12U}, {.key_type = (unsigned char)7U, .key_length = (unsigned char)1U}};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static struct key_info tuple_key_info[30U] = {{.key_length = (unsigned char)48U}, {.key_type = (unsigned char)1U, .key_length = (unsigned char)48U}, {.key_type = (unsigned char)2U, .key_length = (unsigned char)16U}, {.key_type = (unsigned char)3U, .key_length = (unsigned char)16U}, {.key_type = (unsigned char)4U, .key_length = (unsigned char)16U}, {.key_type = (unsigned char)5U, .key_length = (unsigned char)16U}, {.key_type = (unsigned char)6U, .key_length = (unsigned char)8U}, {.key_type = (unsigned char)7U, .key_length = (unsigned char)8U}, {.key_type = (unsigned char)8U, .key_length = (unsigned char)32U}, {.key_type = (unsigned char)9U, .key_length = (unsigned char)32U}, {.key_type = (unsigned char)10U, .key_length = (unsigned char)16U}, {.key_type = (unsigned char)11U, .key_length = (unsigned char)16U}, {.key_type = (unsigned char)12U, .key_length = (unsigned char)16U}, {.key_type = (unsigned char)13U, .key_length = (unsigned char)32U}, {.key_type = (unsigned char)14U, .key_length = (unsigned char)24U}, {.key_type = (unsigned char)15U, .key_length = (unsigned char)8U}, {.key_type = (unsigned char)16U, .key_length = (unsigned char)48U}, {.key_type = (unsigned char)17U, .key_length = (unsigned char)48U}, {.key_type = (unsigned char)18U, .key_length = (unsigned char)16U}, {.key_type = (unsigned char)19U, .key_length = (unsigned char)16U}, {.key_type = (unsigned char)20U, .key_length = (unsigned char)16U}, {.key_type = (unsigned char)21U, .key_length = (unsigned char)16U}, {.key_type = (unsigned char)22U, .key_length = (unsigned char)8U}, {.key_type = (unsigned char)23U, .key_length = (unsigned char)8U}, {.key_type = (unsigned char)24U, .key_length = (unsigned char)32U}, {.key_type = (unsigned char)25U, .key_length = (unsigned char)32U}, {.key_type = (unsigned char)26U, .key_length = (unsigned char)16U}, {.key_type = (unsigned char)27U, .key_length = (unsigned char)16U}, {.key_type = (unsigned char)28U, .key_length = (unsigned char)16U}, {.key_type = (unsigned char)29U, .key_length = (unsigned char)32U}};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_mac_update_stats_defective(struct hclge_dev *hdev)
{
  #line 420 
  struct hclge_desc desc[21U];
  #line 421 
  __le64 *desc_data;
  #line 422 
  int i;
  #line 422 
  int k;
  #line 422 
  int n;
  #line 423 
  int ret;
  #line 419 
  u64 *data = (u64 *)(& hdev->hw_stats.mac_stats);
  #line 425 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_OPC_STATS_MAC,(_Bool)1);
  #line 426 
  ret = hclge_cmd_send(& hdev->hw,(struct hclge_desc *)(& desc),21);
  #line 427 
  if (ret != 0) {
    #line 428 
    _dev_err(& (hdev->pdev)->dev,(char *)"Get MAC pkt stats fail, status = %d.\n",ret);
    #line 431 
    return ret;
  }
  #line 434 
  i = 0;
  #line 434 
  while (i <= 20) {
    #line 436 
    if ((long)(i == 0) != 0L) {
      #line 437 
      desc_data = (__le64 *)(& desc[i].data[0]);
      #line 438 
      n = 2;
    }
    else {
      #line 440 
      desc_data = (__le64 *)(& desc[i]);
      #line 441 
      n = 4;
    }
    #line 444 
    k = 0;
    #line 444 
    while (k < n) {
      #line 445 
      *data += *desc_data;
      #line 446 
      data ++;
      #line 447 
      desc_data ++;
      #line 444 
      k ++;
    }
    #line 434 
    i ++;
  }
  #line 451 
  return 0;
}

#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_mac_update_stats_complete(struct hclge_dev *hdev, u32 desc_num)
{
  #line 457 
  struct hclge_desc *desc;
  #line 458 
  __le64 *desc_data;
  #line 459 
  u16 i;
  #line 459 
  u16 k;
  #line 459 
  u16 n;
  #line 460 
  int ret;
  #line 456 
  u64 *data = (u64 *)(& hdev->hw_stats.mac_stats);
  #line 465 
  desc = (struct hclge_desc *)kcalloc_0((unsigned long)desc_num,32UL,2592U);
  #line 466 
  if (desc == (struct hclge_desc *)0) 
                                      #line 467 
                                      return -12;
  #line 469 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_OPC_STATS_MAC_ALL,(_Bool)1);
  #line 470 
  ret = hclge_cmd_send(& hdev->hw,desc,(int)desc_num);
  #line 471 
  if (ret != 0) {
    #line 472 
    kfree((void *)desc);
    #line 473 
    return ret;
  }
  #line 476 
  i = (unsigned short)0U;
  #line 476 
  while ((unsigned int)i < desc_num) {
    #line 478 
    if ((unsigned int)i == 0U) {
      #line 479 
      desc_data = (__le64 *)(& (desc + (unsigned long)i)->data[0]);
      #line 480 
      n = (unsigned short)2U;
    }
    else {
      #line 482 
      desc_data = (__le64 *)(desc + (unsigned long)i);
      #line 483 
      n = (unsigned short)4U;
    }
    #line 486 
    k = (unsigned short)0U;
    #line 486 
    while ((int)k < (int)n) {
      #line 487 
      *data += *desc_data;
      #line 488 
      data ++;
      #line 489 
      desc_data ++;
      #line 486 
      k = (u16)((int)k + 1);
    }
    #line 476 
    i = (u16)((int)i + 1);
  }
  #line 493 
  kfree((void *)desc);
  #line 495 
  return 0;
}

#line 498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_mac_query_reg_num(struct hclge_dev *hdev, u32 *desc_num)
{
  #line 500 
  struct hclge_desc desc;
  #line 501 
  __le32 *desc_data;
  #line 502 
  u32 reg_num;
  #line 503 
  int ret;
  #line 513 
  unsigned int tmp;
  #line 505 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_QUERY_MAC_REG_NUM,(_Bool)1);
  #line 506 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 507 
  if (ret != 0) 
                #line 508 
                return ret;
  #line 510 
  desc_data = & desc.data[0];
  #line 511 
  reg_num = *desc_data;
  #line 513 
  if (((reg_num + 4294967293U) & 3U) != 0U) 
                                            #line 513 
                                            tmp = 1U; else 
                                                           #line 513 
                                                           tmp = 0U;
  #line 513 
  *desc_num = (((reg_num + 4294967293U) >> 2) + tmp) + 1U;
  #line 516 
  return 0;
}

#line 519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_mac_update_stats(struct hclge_dev *hdev)
{
  #line 521 
  u32 desc_num;
  #line 522 
  int ret;
  #line 524 
  ret = hclge_mac_query_reg_num(hdev,& desc_num);
  #line 527 
  if (ret == 0) 
                #line 528 
                ret = hclge_mac_update_stats_complete(hdev,desc_num);
  else 
    #line 529 
    if (ret == -95) 
                    #line 530 
                    ret = hclge_mac_update_stats_defective(hdev); else 
                                                                    #line 532 
                                                                    _dev_err(& (hdev->pdev)->dev,(char *)"query mac reg num fail!\n");
  #line 534 
  return ret;
}

#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_tqps_update_stats(struct hnae3_handle *handle)
{
  #line 542 
  struct hnae3_queue *queue;
  #line 543 
  struct hclge_desc desc[1U];
  #line 544 
  struct hclge_tqp *tqp;
  #line 545 
  int ret;
  #line 545 
  int i;
  #line 539 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_167.kinfo;
  #line 540 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 541 
  struct hclge_dev *hdev = vport->back;
  #line 547 
  i = 0;
  #line 547 
  while ((int)kinfo->num_tqps > i) {
    {
      #line 549 
      void *__mptr;
      #line 548 
      queue = *(handle->__anonCompField_hnae3_handle_167.kinfo.tqp + (unsigned long)i);
      #line 549 
      __mptr = (void *)queue;
      #line 549 
      tqp = ((struct hclge_tqp *)(__mptr + 18446744073709551608U));
      #line 551 
      hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_OPC_QUERY_RX_STATUS,(_Bool)1);
      #line 554 
      desc[0].data[0] = (unsigned int)tqp->index & 511U;
      #line 555 
      ret = hclge_cmd_send(& hdev->hw,(struct hclge_desc *)(& desc),1);
      #line 556 
      if (ret != 0) {
        #line 557 
        _dev_err(& (hdev->pdev)->dev,(char *)"Query tqp stat fail, status = %d,queue = %d\n",ret,i);
        #line 560 
        return ret;
      }
      #line 562 
      tqp->tqp_stats.rcb_rx_ring_pktnum_rcd += (unsigned long long)desc[0].data[1];
    }
    #line 547 
    i ++;
  }
  #line 566 
  i = 0;
  #line 566 
  while ((int)kinfo->num_tqps > i) {
    {
      #line 568 
      void *__mptr_0;
      #line 567 
      queue = *(handle->__anonCompField_hnae3_handle_167.kinfo.tqp + (unsigned long)i);
      #line 568 
      __mptr_0 = (void *)queue;
      #line 568 
      tqp = ((struct hclge_tqp *)(__mptr_0 + 18446744073709551608U));
      #line 570 
      hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_OPC_QUERY_TX_STATUS,(_Bool)1);
      #line 574 
      desc[0].data[0] = (unsigned int)tqp->index & 511U;
      #line 575 
      ret = hclge_cmd_send(& hdev->hw,(struct hclge_desc *)(& desc),1);
      #line 576 
      if (ret != 0) {
        #line 577 
        _dev_err(& (hdev->pdev)->dev,(char *)"Query tqp stat fail, status = %d,queue = %d\n",ret,i);
        #line 580 
        return ret;
      }
      #line 582 
      tqp->tqp_stats.rcb_tx_ring_pktnum_rcd += (unsigned long long)desc[0].data[1];
    }
    #line 566 
    i ++;
  }
  #line 586 
  return 0;
}

#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u64 *hclge_tqps_get_stats(struct hnae3_handle *handle, u64 *data)
{
  #line 592 
  struct hclge_tqp *tqp;
  #line 594 
  int i;
  #line 591 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_167.kinfo;
  #line 593 
  u64 *buff = data;
  #line 596 
  i = 0;
  #line 596 
  while ((int)kinfo->num_tqps > i) {
    {
      #line 597 
      void *__mptr;
      #line 598 
      u64 *tmp_0;
      #line 597 
      __mptr = (void *)*(kinfo->tqp + (unsigned long)i);
      #line 597 
      tqp = ((struct hclge_tqp *)(__mptr + 18446744073709551608U));
      #line 598 
      tmp_0 = buff;
      #line 598 
      buff ++;
      #line 598 
      *tmp_0 = tqp->tqp_stats.rcb_tx_ring_pktnum_rcd;
    }
    #line 596 
    i ++;
  }
  #line 601 
  i = 0;
  #line 601 
  while ((int)kinfo->num_tqps > i) {
    {
      #line 602 
      void *__mptr_0;
      #line 603 
      u64 *tmp_2;
      #line 602 
      __mptr_0 = (void *)*(kinfo->tqp + (unsigned long)i);
      #line 602 
      tqp = ((struct hclge_tqp *)(__mptr_0 + 18446744073709551608U));
      #line 603 
      tmp_2 = buff;
      #line 603 
      buff ++;
      #line 603 
      *tmp_2 = tqp->tqp_stats.rcb_rx_ring_pktnum_rcd;
    }
    #line 601 
    i ++;
  }
  #line 606 
  return buff;
}

#line 609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_tqps_get_sset_count(struct hnae3_handle *handle, int stringset)
{
  #line 611 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_167.kinfo;
  #line 614 
  return (int)kinfo->num_tqps * 2;
}

#line 617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u8 *hclge_tqps_get_strings(struct hnae3_handle *handle, u8 *data)
{
  #line 619 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_167.kinfo;
  #line 620 
  u8 *buff = data;
  #line 621 
  int i = 0;
  #line 623 
  i = 0;
  #line 623 
  while ((int)kinfo->num_tqps > i) {
    {
      #line 624 
      void *__mptr;
      #line 624 
      __mptr = (void *)*(handle->__anonCompField_hnae3_handle_167.kinfo.tqp + (unsigned long)i);
      #line 624 
      struct hclge_tqp *tqp = ((struct hclge_tqp *)(__mptr + 18446744073709551608U));
      #line 626 
      snprintf((char *)buff,32UL,(char *)"txq%d_pktnum_rcd",(int)tqp->index);
      #line 628 
      buff += 32U;
    }
    #line 623 
    i ++;
  }
  #line 631 
  i = 0;
  #line 631 
  while ((int)kinfo->num_tqps > i) {
    {
      #line 632 
      void *__mptr_0;
      #line 632 
      __mptr_0 = (void *)*(kinfo->tqp + (unsigned long)i);
      #line 632 
      struct hclge_tqp *tqp_0 = ((struct hclge_tqp *)(__mptr_0 + 18446744073709551608U));
      #line 634 
      snprintf((char *)buff,32UL,(char *)"rxq%d_pktnum_rcd",(int)tqp_0->index);
      #line 636 
      buff += 32U;
    }
    #line 631 
    i ++;
  }
  #line 639 
  return buff;
}

#line 642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u64 *hclge_comm_get_stats(void *comm_stats, struct hclge_comm_stats_str *strs, int size, u64 *data)
{
  #line 647 
  u32 i;
  #line 646 
  u64 *buf = data;
  #line 649 
  i = 0U;
  #line 649 
  while (i < (unsigned int)size) {
    #line 650 
    *(buf + (unsigned long)i) = *((u64 *)((u8 *)comm_stats + (strs + (unsigned long)i)->offset));
    #line 649 
    i ++;
  }
  #line 652 
  return buf + (unsigned long)size;
}

#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u8 *hclge_comm_get_strings(u32 stringset, struct hclge_comm_stats_str *strs, int size, u8 *data)
{
  #line 660 
  u32 i;
  #line 659 
  char *buff = (char *)data;
  #line 662 
  if (stringset != 1U) 
                       #line 663 
                       return (u8 *)buff;
  #line 665 
  i = 0U;
  #line 665 
  while (i < (unsigned int)size) {
    #line 666 
    snprintf(buff,32UL,(char *)"%s",(char *)(& (strs + (unsigned long)i)->desc));
    #line 667 
    buff += 32U;
    #line 665 
    i ++;
  }
  #line 670 
  return (u8 *)buff;
}

#line 673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_update_stats_for_all(struct hclge_dev *hdev)
{
  #line 675 
  struct hnae3_handle *handle;
  #line 676 
  int status;
  #line 678 
  handle = & (hdev->vport)->nic;
  #line 679 
  if (handle->client != (struct hnae3_client *)0) {
    #line 680 
    status = hclge_tqps_update_stats(handle);
    #line 681 
    if (status != 0) 
                     #line 682 
                     _dev_err(& (hdev->pdev)->dev,(char *)"Update TQPS stats fail, status = %d.\n",status);
  }
  #line 688 
  status = hclge_mac_update_stats(hdev);
  #line 689 
  if (status != 0) 
                   #line 690 
                   _dev_err(& (hdev->pdev)->dev,(char *)"Update MAC stats fail, status = %d.\n",status);
  #line 691 
  return;
}

#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_update_stats(struct hnae3_handle *handle, struct net_device_stats *net_stats)
{
  #line 699 
  int status;
  #line 697 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 698 
  struct hclge_dev *hdev = vport->back;
  #line 701 
  if ((int)test_and_set_bit(12L,& hdev->state) != 0) 
                                                     #line 702 
                                                     return;
  #line 704 
  status = hclge_mac_update_stats(hdev);
  #line 705 
  if (status != 0) 
                   #line 706 
                   _dev_err(& (hdev->pdev)->dev,(char *)"Update MAC stats fail, status = %d.\n",status);
  #line 710 
  status = hclge_tqps_update_stats(handle);
  #line 711 
  if (status != 0) 
                   #line 712 
                   _dev_err(& (hdev->pdev)->dev,(char *)"Update TQPS stats fail, status = %d.\n",status);
  #line 716 
  cif_clear_bit_0(12L,& hdev->state);
  #line 717 
  return;
}

#line 719  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_sset_count(struct hnae3_handle *handle, int stringset)
{
  #line 726 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 727 
  struct hclge_dev *hdev = vport->back;
  #line 728 
  int count = 0;
  #line 735 
  if (stringset == 0) {
    #line 737 
    handle->flags &= 18446744073709551592ULL;
    #line 738 
    if ((((unsigned int)(hdev->pdev)->revision > 32U || hdev->hw.mac.speed == 10U) || hdev->hw.mac.speed == 100U) || hdev->hw.mac.speed == 1000U) {
      #line 742 
      count ++;
      #line 743 
      handle->flags |= 1ULL;
    }
    #line 746 
    count += 2;
    #line 747 
    handle->flags |= 4ULL;
    #line 748 
    handle->flags |= 16ULL;
    #line 750 
    if (hdev->hw.mac.phydev != (struct phy_device *)0) {
      #line 751 
      count ++;
      #line 752 
      handle->flags |= 2ULL;
    }
  }
  else 
    #line 755 
    if (stringset == 1) {
      #line 756 
      count = (int)((unsigned int)hclge_tqps_get_sset_count(handle,stringset) + 84U);
    }
  #line 760 
  return count;
}

#line 763  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_get_strings(struct hnae3_handle *handle, u32 stringset, u8 *data)
{
  #line 767 
  int size;
  #line 766 
  u8 *p = data;
  #line 769 
  if (stringset == 1U) {
    #line 770 
    size = 84;
    #line 771 
    p = hclge_comm_get_strings(stringset,(struct hclge_comm_stats_str *)(& g_mac_stats_string),size,p);
    #line 773 
    p = hclge_tqps_get_strings(handle,p);
  }
  else 
    #line 774 
    if (stringset == 0U) {
      #line 775 
      if ((handle->flags & 1ULL) != 0ULL) {
        #line 776 
        memcpy((void *)p,(void *)(hns3_nic_test_strs),32UL);
        #line 778 
        p += 32U;
      }
      #line 780 
      if ((handle->flags & 4ULL) != 0ULL) {
        #line 781 
        memcpy((void *)p,(void *)(& hns3_nic_test_strs[1]),32UL);
        #line 783 
        p += 32U;
      }
      #line 785 
      if ((handle->flags & 16ULL) != 0ULL) {
        #line 786 
        memcpy((void *)p,(void *)(& hns3_nic_test_strs[2]),32UL);
        #line 789 
        p += 32U;
      }
      #line 791 
      if ((handle->flags & 2ULL) != 0ULL) {
        #line 792 
        memcpy((void *)p,(void *)(& hns3_nic_test_strs[3]),32UL);
        #line 794 
        p += 32U;
      }
    }
  #line 797 
  return;
}

#line 799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_get_stats(struct hnae3_handle *handle, u64 *data)
{
  #line 803 
  u64 *p;
  #line 801 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 802 
  struct hclge_dev *hdev = vport->back;
  #line 805 
  p = hclge_comm_get_stats((void *)(& hdev->hw_stats.mac_stats),(struct hclge_comm_stats_str *)(& g_mac_stats_string),84,data);
  #line 807 
  p = hclge_tqps_get_stats(handle,p);
  #line 808 
  return;
}

#line 810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_get_mac_stat(struct hnae3_handle *handle, struct hns3_mac_stats *mac_stats)
{
  #line 813 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 814 
  struct hclge_dev *hdev = vport->back;
  #line 816 
  hclge_update_stats(handle,(struct net_device_stats *)0);
  #line 818 
  mac_stats->tx_pause_cnt = hdev->hw_stats.mac_stats.mac_tx_mac_pause_num;
  #line 819 
  mac_stats->rx_pause_cnt = hdev->hw_stats.mac_stats.mac_rx_mac_pause_num;
  #line 820 
  return;
}

#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_parse_func_status(struct hclge_dev *hdev, struct hclge_func_status_cmd *status)
{
  #line 825 
  if (((unsigned long)status->pf_state & 1UL) == 0UL) 
                                                      #line 826 
                                                      return -22;
  #line 829 
  if (((unsigned long)status->pf_state & 2UL) != 0UL) 
                                                      #line 830 
                                                      hdev->flag |= 1U; else 
                                                                    #line 832 
                                                                    hdev->flag &= 4294967294U;
  #line 834 
  return 0;
}

#line 837  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_query_function_status(struct hclge_dev *hdev)
{
  #line 841 
  struct hclge_func_status_cmd *req;
  #line 842 
  struct hclge_desc desc;
  #line 844 
  int ret;
  #line 843 
  int timeout = 0;
  #line 846 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_QUERY_FUNC_STATUS,(_Bool)1);
  #line 847 
  req = (struct hclge_func_status_cmd *)(& desc.data);
  #line 849 
  while (1) {
    #line 861 
    int tmp;
    #line 850 
    ret = hclge_cmd_send(& hdev->hw,& desc,1);
    #line 851 
    if (ret != 0) {
      #line 852 
      _dev_err(& (hdev->pdev)->dev,(char *)"query function status failed %d.\n",ret);
      #line 854 
      return ret;
    }
    #line 858 
    if ((unsigned int)req->pf_state != 0U) 
                                           #line 859 
                                           break;
    #line 860 
    usleep_range(1000UL,2000UL);
    #line 861 
    tmp = timeout;
    #line 861 
    timeout ++;
    #line 861 
    ;
    #line 861 
    if (! (tmp <= 4)) 
                      #line 849 
                      break;
  }
  #line 863 
  ret = hclge_parse_func_status(hdev,req);
  #line 865 
  return ret;
}

#line 868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_query_pf_resource(struct hclge_dev *hdev)
{
  #line 900 
  unsigned int __y_0;
  #line 892 
  unsigned int __y;
  #line 870 
  struct hclge_pf_res_cmd *req;
  #line 871 
  struct hclge_desc desc;
  #line 872 
  int ret;
  #line 874 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_QUERY_PF_RSRC,(_Bool)1);
  #line 875 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 876 
  if (ret != 0) {
    #line 877 
    _dev_err(& (hdev->pdev)->dev,(char *)"query pf resource failed %d.\n",ret);
    #line 879 
    return ret;
  }
  #line 882 
  req = (struct hclge_pf_res_cmd *)(& desc.data);
  #line 883 
  hdev->num_tqps = req->tqp_num;
  #line 884 
  hdev->pkt_buf_size = (unsigned int)((int)req->buf_size << 7);
  #line 886 
  if ((unsigned int)req->tx_buf_size != 0U) 
                                            #line 887 
                                            hdev->tx_buf_size = (unsigned int)((int)req->tx_buf_size << 7); else 
                                                                    #line 890 
                                                                    hdev->tx_buf_size = 16384U;
  #line 892 
  __y = 256U;
  #line 892 
  hdev->tx_buf_size = ((((hdev->tx_buf_size + __y) + 4294967295U) / __y) * __y);
  #line 894 
  if ((unsigned int)req->dv_buf_size != 0U) 
                                            #line 895 
                                            hdev->dv_buf_size = (unsigned int)((int)req->dv_buf_size << 7); else 
                                                                    #line 898 
                                                                    hdev->dv_buf_size = 40960U;
  #line 900 
  __y_0 = 256U;
  #line 900 
  hdev->dv_buf_size = ((((hdev->dv_buf_size + __y_0) + 4294967295U) / __y_0) * __y_0);
  #line 902 
  if (((hdev->ae_dev)->flag & 2U) != 0U) {
    #line 903 
    hdev->roce_base_msix_offset = req->msixcap_localid_ba_rocee;
    #line 906 
    hdev->num_roce_msi = (unsigned short)((unsigned int)req->pf_intr_vector_number & 255U);
    #line 911 
    hdev->num_nic_msi = hdev->num_roce_msi;
    #line 916 
    hdev->num_msi = (unsigned short)((int)hdev->num_roce_msi + (int)hdev->roce_base_msix_offset);
  }
  else {
    #line 919 
    hdev->num_msi = (unsigned short)((unsigned int)req->pf_intr_vector_number & 255U);
    #line 923 
    hdev->num_nic_msi = hdev->num_msi;
  }
  #line 926 
  if ((unsigned int)hdev->num_nic_msi <= 1U) {
    #line 927 
    _dev_err(& (hdev->pdev)->dev,(char *)"Just %u msi resources, not enough for pf(min:2).\n",(int)hdev->num_nic_msi);
    #line 930 
    return -22;
  }
  #line 933 
  return 0;
}

#line 936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_parse_speed(int speed_cmd, int *speed)
{
  #line 938 
  switch (speed_cmd) {
    #line 939 
    case 6: 
            #line 939 
    ;
    #line 940 
    *speed = 10;
    #line 941 
    break;
    #line 942 
    case 7: 
            #line 942 
    ;
    #line 943 
    *speed = 100;
    #line 944 
    break;
    #line 945 
    case 0: 
            #line 945 
    ;
    #line 946 
    *speed = 1000;
    #line 947 
    break;
    #line 948 
    case 1: 
            #line 948 
    ;
    #line 949 
    *speed = 10000;
    #line 950 
    break;
    #line 951 
    case 2: 
            #line 951 
    ;
    #line 952 
    *speed = 25000;
    #line 953 
    break;
    #line 954 
    case 3: 
            #line 954 
    ;
    #line 955 
    *speed = 40000;
    #line 956 
    break;
    #line 957 
    case 4: 
            #line 957 
    ;
    #line 958 
    *speed = 50000;
    #line 959 
    break;
    #line 960 
    case 5: 
            #line 960 
    ;
    #line 961 
    *speed = 100000;
    #line 962 
    break;
    #line 963 
    default: 
             #line 963 
    ;
    #line 964 
    return -22;
  }
  #line 967 
  return 0;
}

#line 970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_check_port_speed(struct hnae3_handle *handle, u32 speed)
{
  #line 972 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 973 
  struct hclge_dev *hdev = vport->back;
  #line 974 
  u32 speed_ability = hdev->hw.mac.speed_ability;
  #line 975 
  u32 speed_bit = 0U;
  #line 977 
  switch (speed) {
    #line 978 
    case (u32)10: 
                  #line 978 
    ;
    #line 979 
    speed_bit = 128U;
    #line 980 
    break;
    #line 981 
    case (u32)100: 
                   #line 981 
    ;
    #line 982 
    speed_bit = 64U;
    #line 983 
    break;
    #line 984 
    case (u32)1000: 
                    #line 984 
    ;
    #line 985 
    speed_bit = 1U;
    #line 986 
    break;
    #line 987 
    case (u32)10000: 
                     #line 987 
    ;
    #line 988 
    speed_bit = 2U;
    #line 989 
    break;
    #line 990 
    case (u32)25000: 
                     #line 990 
    ;
    #line 991 
    speed_bit = 4U;
    #line 992 
    break;
    #line 993 
    case (u32)40000: 
                     #line 993 
    ;
    #line 994 
    speed_bit = 32U;
    #line 995 
    break;
    #line 996 
    case (u32)50000: 
                     #line 996 
    ;
    #line 997 
    speed_bit = 8U;
    #line 998 
    break;
    #line 999 
    case (u32)100000: 
                      #line 999 
    ;
    #line 1000 
    speed_bit = 16U;
    #line 1001 
    break;
    #line 1002 
    default: 
             #line 1002 
    ;
    #line 1003 
    return -22;
  }
  #line 1006 
  if ((speed_bit & speed_ability) != 0U) 
                                         #line 1007 
                                         return 0;
  #line 1009 
  return -22;
}

#line 1012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_convert_setting_sr(struct hclge_mac *mac, u8 speed_ability)
{
  #line 1014 
  if (((unsigned long)speed_ability & 2UL) != 0UL) 
                                                   #line 1015 
                                                   linkmode_set_bit(43,(unsigned long *)(& mac->supported));
  #line 1017 
  if (((unsigned long)speed_ability & 4UL) != 0UL) 
                                                   #line 1018 
                                                   linkmode_set_bit(33,(unsigned long *)(& mac->supported));
  #line 1020 
  if (((unsigned long)speed_ability & 32UL) != 0UL) 
                                                    #line 1021 
                                                    linkmode_set_bit(25,(unsigned long *)(& mac->supported));
  #line 1023 
  if (((unsigned long)speed_ability & 8UL) != 0UL) 
                                                   #line 1024 
                                                   linkmode_set_bit(40,(unsigned long *)(& mac->supported));
  #line 1026 
  if (((unsigned long)speed_ability & 16UL) != 0UL) 
                                                    #line 1027 
                                                    linkmode_set_bit(37,(unsigned long *)(& mac->supported));
  #line 1029 
  return;
}

#line 1031  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_convert_setting_lr(struct hclge_mac *mac, u8 speed_ability)
{
  #line 1033 
  if (((unsigned long)speed_ability & 2UL) != 0UL) 
                                                   #line 1034 
                                                   linkmode_set_bit(44,(unsigned long *)(& mac->supported));
  #line 1036 
  if (((unsigned long)speed_ability & 4UL) != 0UL) 
                                                   #line 1037 
                                                   linkmode_set_bit(33,(unsigned long *)(& mac->supported));
  #line 1039 
  if (((unsigned long)speed_ability & 8UL) != 0UL) 
                                                   #line 1040 
                                                   linkmode_set_bit(55,(unsigned long *)(& mac->supported));
  #line 1042 
  if (((unsigned long)speed_ability & 32UL) != 0UL) 
                                                    #line 1043 
                                                    linkmode_set_bit(26,(unsigned long *)(& mac->supported));
  #line 1045 
  if (((unsigned long)speed_ability & 16UL) != 0UL) 
                                                    #line 1046 
                                                    linkmode_set_bit(39,(unsigned long *)(& mac->supported));
  #line 1048 
  return;
}

#line 1050  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_convert_setting_cr(struct hclge_mac *mac, u8 speed_ability)
{
  #line 1052 
  if (((unsigned long)speed_ability & 2UL) != 0UL) 
                                                   #line 1053 
                                                   linkmode_set_bit(42,(unsigned long *)(& mac->supported));
  #line 1055 
  if (((unsigned long)speed_ability & 4UL) != 0UL) 
                                                   #line 1056 
                                                   linkmode_set_bit(31,(unsigned long *)(& mac->supported));
  #line 1058 
  if (((unsigned long)speed_ability & 32UL) != 0UL) 
                                                    #line 1059 
                                                    linkmode_set_bit(24,(unsigned long *)(& mac->supported));
  #line 1061 
  if (((unsigned long)speed_ability & 8UL) != 0UL) 
                                                   #line 1062 
                                                   linkmode_set_bit(34,(unsigned long *)(& mac->supported));
  #line 1064 
  if (((unsigned long)speed_ability & 16UL) != 0UL) 
                                                    #line 1065 
                                                    linkmode_set_bit(38,(unsigned long *)(& mac->supported));
  #line 1067 
  return;
}

#line 1069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_convert_setting_kr(struct hclge_mac *mac, u8 speed_ability)
{
  #line 1071 
  if (((unsigned long)speed_ability & 1UL) != 0UL) 
                                                   #line 1072 
                                                   linkmode_set_bit(17,(unsigned long *)(& mac->supported));
  #line 1074 
  if (((unsigned long)speed_ability & 2UL) != 0UL) 
                                                   #line 1075 
                                                   linkmode_set_bit(19,(unsigned long *)(& mac->supported));
  #line 1077 
  if (((unsigned long)speed_ability & 4UL) != 0UL) 
                                                   #line 1078 
                                                   linkmode_set_bit(32,(unsigned long *)(& mac->supported));
  #line 1080 
  if (((unsigned long)speed_ability & 32UL) != 0UL) 
                                                    #line 1081 
                                                    linkmode_set_bit(23,(unsigned long *)(& mac->supported));
  #line 1083 
  if (((unsigned long)speed_ability & 8UL) != 0UL) 
                                                   #line 1084 
                                                   linkmode_set_bit(35,(unsigned long *)(& mac->supported));
  #line 1086 
  if (((unsigned long)speed_ability & 16UL) != 0UL) 
                                                    #line 1087 
                                                    linkmode_set_bit(36,(unsigned long *)(& mac->supported));
  #line 1089 
  return;
}

#line 1091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_convert_setting_fec(struct hclge_mac *mac)
{
  #line 1093 
  linkmode_set_bit(51,(unsigned long *)(& mac->supported));
  #line 1094 
  linkmode_set_bit(50,(unsigned long *)(& mac->supported));
  #line 1096 
  switch (mac->speed) {
    #line 1097 
    case (u32)10000: 
                     #line 1097 
    ;
    #line 1098 
    case (u32)40000: 
                     #line 1098 
    ;
    #line 1099 
    linkmode_set_bit(51,(unsigned long *)(& mac->supported));
    #line 1101 
    mac->fec_ability = 3U;
    #line 1103 
    break;
    #line 1104 
    case (u32)25000: 
                     #line 1104 
    ;
    #line 1105 
    case (u32)50000: 
                     #line 1105 
    ;
    #line 1106 
    linkmode_set_bit(50,(unsigned long *)(& mac->supported));
    #line 1108 
    mac->fec_ability = 7U;
    #line 1111 
    break;
    #line 1112 
    case (u32)100000: 
                      #line 1112 
    ;
    #line 1113 
    linkmode_set_bit(50,(unsigned long *)(& mac->supported));
    #line 1114 
    mac->fec_ability = 5U;
    #line 1115 
    break;
    #line 1116 
    default: 
             #line 1116 
    ;
    #line 1117 
    mac->fec_ability = 0U;
    #line 1118 
    break;
  }
  #line 1120 
  return;
}

#line 1122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_parse_fiber_link_mode(struct hclge_dev *hdev, u8 speed_ability)
{
  #line 1125 
  struct hclge_mac *mac = & hdev->hw.mac;
  #line 1127 
  if (((unsigned long)speed_ability & 1UL) != 0UL) 
                                                   #line 1128 
                                                   linkmode_set_bit(41,(unsigned long *)(& mac->supported));
  #line 1131 
  hclge_convert_setting_sr(mac,(unsigned char)((int)speed_ability));
  #line 1132 
  hclge_convert_setting_lr(mac,(unsigned char)((int)speed_ability));
  #line 1133 
  hclge_convert_setting_cr(mac,(unsigned char)((int)speed_ability));
  #line 1134 
  if ((unsigned int)(hdev->pdev)->revision > 32U) 
                                                  #line 1135 
                                                  hclge_convert_setting_fec(mac);
  #line 1137 
  linkmode_set_bit(10,(unsigned long *)(& mac->supported));
  #line 1138 
  linkmode_set_bit(13,(unsigned long *)(& mac->supported));
  #line 1139 
  linkmode_set_bit(49,(unsigned long *)(& mac->supported));
  #line 1140 
  return;
}

#line 1142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_parse_backplane_link_mode(struct hclge_dev *hdev, u8 speed_ability)
{
  #line 1145 
  struct hclge_mac *mac = & hdev->hw.mac;
  #line 1147 
  hclge_convert_setting_kr(mac,(unsigned char)((int)speed_ability));
  #line 1148 
  if ((unsigned int)(hdev->pdev)->revision > 32U) 
                                                  #line 1149 
                                                  hclge_convert_setting_fec(mac);
  #line 1150 
  linkmode_set_bit(16,(unsigned long *)(& mac->supported));
  #line 1151 
  linkmode_set_bit(13,(unsigned long *)(& mac->supported));
  #line 1152 
  linkmode_set_bit(49,(unsigned long *)(& mac->supported));
  #line 1153 
  return;
}

#line 1155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_parse_copper_link_mode(struct hclge_dev *hdev, u8 speed_ability)
{
  #line 1158 
  unsigned long *supported = (unsigned long *)(& hdev->hw.mac.supported);
  #line 1161 
  if ((unsigned int)speed_ability == 0U) 
                                         #line 1162 
                                         speed_ability = (unsigned char)193U;
  #line 1164 
  if (((unsigned long)speed_ability & 1UL) != 0UL) 
                                                   #line 1165 
                                                   linkmode_set_bit(5,supported);
  #line 1168 
  if (((unsigned long)speed_ability & 64UL) != 0UL) {
    #line 1169 
    linkmode_set_bit(3,supported);
    #line 1171 
    linkmode_set_bit(2,supported);
  }
  #line 1175 
  if (((unsigned long)speed_ability & 128UL) != 0UL) {
    #line 1176 
    linkmode_set_bit(1,supported);
    #line 1177 
    linkmode_set_bit(0,supported);
  }
  #line 1180 
  linkmode_set_bit(6,supported);
  #line 1181 
  linkmode_set_bit(7,supported);
  #line 1182 
  linkmode_set_bit(13,supported);
  #line 1183 
  linkmode_set_bit(14,supported);
  #line 1184 
  return;
}

#line 1186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_parse_link_mode(struct hclge_dev *hdev, u8 speed_ability)
{
  #line 1188 
  u8 media_type = hdev->hw.mac.media_type;
  #line 1190 
  if ((unsigned int)media_type == 1U) 
                                      #line 1191 
                                      hclge_parse_fiber_link_mode(hdev,(unsigned char)((int)speed_ability));
  else 
    #line 1192 
    if ((unsigned int)media_type == 2U) 
                                        #line 1193 
                                        hclge_parse_copper_link_mode(hdev,(unsigned char)((int)speed_ability));
    else 
      #line 1194 
      if ((unsigned int)media_type == 3U) 
                                          #line 1195 
                                          hclge_parse_backplane_link_mode(hdev,(unsigned char)((int)speed_ability));
  #line 1196 
  return;
}

#line 1198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u32 hclge_get_max_speed(u8 speed_ability)
{
  #line 1200 
  if (((unsigned long)speed_ability & 16UL) != 0UL) 
                                                    #line 1201 
                                                    return 100000U;
  #line 1203 
  if (((unsigned long)speed_ability & 8UL) != 0UL) 
                                                   #line 1204 
                                                   return 50000U;
  #line 1206 
  if (((unsigned long)speed_ability & 32UL) != 0UL) 
                                                    #line 1207 
                                                    return 40000U;
  #line 1209 
  if (((unsigned long)speed_ability & 4UL) != 0UL) 
                                                   #line 1210 
                                                   return 25000U;
  #line 1212 
  if (((unsigned long)speed_ability & 2UL) != 0UL) 
                                                   #line 1213 
                                                   return 10000U;
  #line 1215 
  if (((unsigned long)speed_ability & 1UL) != 0UL) 
                                                   #line 1216 
                                                   return 1000U;
  #line 1218 
  if (((unsigned long)speed_ability & 64UL) != 0UL) 
                                                    #line 1219 
                                                    return 100U;
  #line 1221 
  if (((unsigned long)speed_ability & 128UL) != 0UL) 
                                                     #line 1222 
                                                     return 10U;
  #line 1224 
  return 1000U;
}

#line 1227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_parse_cfg(struct hclge_cfg *cfg, struct hclge_desc *desc)
{
  #line 1229 
  struct hclge_cfg_param_cmd *req;
  #line 1230 
  u64 mac_addr_tmp_high;
  #line 1231 
  u64 mac_addr_tmp;
  #line 1232 
  unsigned int i;
  #line 1234 
  req = (struct hclge_cfg_param_cmd *)(& desc->data);
  #line 1237 
  cfg->vmdq_vport_num = (unsigned char)req->param[0];
  #line 1240 
  cfg->tc_num = (unsigned char)((unsigned long)req->param[0] >> 8);
  #line 1242 
  cfg->tqp_desc_num = (unsigned short)(req->param[0] >> 16);
  #line 1246 
  cfg->phy_addr = (unsigned char)req->param[1];
  #line 1249 
  cfg->media_type = (unsigned char)((unsigned long)req->param[1] >> 8);
  #line 1252 
  cfg->rx_buf_len = (unsigned short)(req->param[1] >> 16);
  #line 1256 
  mac_addr_tmp = (unsigned long long)req->param[2];
  #line 1257 
  mac_addr_tmp_high = (unsigned long long)req->param[3] & 65535ULL;
  #line 1261 
  mac_addr_tmp = (mac_addr_tmp_high << 32) | mac_addr_tmp;
  #line 1263 
  cfg->default_speed = (unsigned char)((unsigned long)req->param[3] >> 16);
  #line 1266 
  cfg->rss_size_max = (unsigned short)(req->param[3] >> 24);
  #line 1270 
  i = 0U;
  #line 1270 
  while (i <= 5U) {
    #line 1271 
    cfg->mac_addr[i] = (unsigned char)(mac_addr_tmp >> i * 8U);
    #line 1270 
    i ++;
  }
  #line 1273 
  req = (struct hclge_cfg_param_cmd *)(& (desc + 1U)->data);
  #line 1274 
  cfg->numa_node_map = req->param[0];
  #line 1276 
  cfg->speed_ability = (unsigned char)req->param[1];
  #line 1279 
  cfg->umv_space = (unsigned short)(req->param[1] >> 16);
  #line 1282 
  if ((unsigned int)cfg->umv_space == 0U) 
                                          #line 1283 
                                          cfg->umv_space = (unsigned short)384U;
  #line 1284 
  return;
}

#line 1290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_cfg(struct hclge_dev *hdev, struct hclge_cfg *hcfg)
{
  #line 1292 
  struct hclge_desc desc[2U];
  #line 1293 
  struct hclge_cfg_param_cmd *req;
  #line 1294 
  unsigned int i;
  #line 1295 
  int ret;
  #line 1297 
  i = 0U;
  #line 1297 
  while (i <= 1U) {
    {
      #line 1298 
      u32 offset = 0U;
      #line 1300 
      req = (struct hclge_cfg_param_cmd *)(& desc[i].data);
      #line 1301 
      hclge_cmd_setup_basic_desc(& desc[i],(enum hclge_opcode_type)HCLGE_OPC_GET_CFG_PARAM,(_Bool)1);
      #line 1303 
      offset &= 4293918720U;
      #line 1303 
      offset = (i * 16U & 1048560U) | offset;
      #line 1306 
      offset &= 4043309055U;
      #line 1306 
      offset |= 67108864U;
      #line 1308 
      req->offset = offset;
    }
    #line 1297 
    i ++;
  }
  #line 1311 
  ret = hclge_cmd_send(& hdev->hw,(struct hclge_desc *)(& desc),2);
  #line 1312 
  if (ret != 0) {
    #line 1313 
    _dev_err(& (hdev->pdev)->dev,(char *)"get config failed %d.\n",ret);
    #line 1314 
    return ret;
  }
  #line 1317 
  hclge_parse_cfg(hcfg,(struct hclge_desc *)(& desc));
  #line 1319 
  return 0;
}

#line 1322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_cap(struct hclge_dev *hdev)
{
  #line 1324 
  int ret;
  #line 1326 
  ret = hclge_query_function_status(hdev);
  #line 1327 
  if (ret != 0) {
    #line 1328 
    _dev_err(& (hdev->pdev)->dev,(char *)"query function status error %d.\n",ret);
    #line 1330 
    return ret;
  }
  #line 1334 
  ret = hclge_query_pf_resource(hdev);
  #line 1335 
  if (ret != 0) 
                #line 1336 
                _dev_err(& (hdev->pdev)->dev,(char *)"query pf resource error %d.\n",ret);
  #line 1338 
  return ret;
}

#line 1341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_init_kdump_kernel_config(struct hclge_dev *hdev)
{
  #line 1346 
  if (! is_kdump_kernel()) 
                           #line 1347 
                           return;
  #line 1349 
  _dev_info(& (hdev->pdev)->dev,(char *)"Running kdump kernel. Using minimal resources\n");
  #line 1353 
  hdev->num_tqps = (unsigned short)((unsigned int)((int)hdev->num_vmdq_vport + (int)hdev->num_req_vfs) + 1U);
  #line 1354 
  hdev->num_tx_desc = (unsigned short)64U;
  #line 1355 
  hdev->num_rx_desc = (unsigned short)64U;
  #line 1356 
  return;
}

#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_configure(struct hclge_dev *hdev)
{
  #line 1360 
  struct hclge_cfg cfg;
  #line 1361 
  unsigned int i;
  #line 1362 
  int ret;
  #line 1364 
  ret = hclge_get_cfg(hdev,& cfg);
  #line 1365 
  if (ret != 0) {
    #line 1366 
    _dev_err(& (hdev->pdev)->dev,(char *)"get mac mode error %d.\n",ret);
    #line 1367 
    return ret;
  }
  #line 1370 
  hdev->num_vmdq_vport = (unsigned short)cfg.vmdq_vport_num;
  #line 1371 
  hdev->base_tqp_pid = (unsigned short)0U;
  #line 1372 
  hdev->rss_size_max = cfg.rss_size_max;
  #line 1373 
  hdev->rx_buf_len = cfg.rx_buf_len;
  #line 1374 
  ether_addr_copy((u8 *)(& hdev->hw.mac.mac_addr),(u8 *)(& cfg.mac_addr));
  #line 1375 
  hdev->hw.mac.media_type = cfg.media_type;
  #line 1376 
  hdev->hw.mac.phy_addr = cfg.phy_addr;
  #line 1377 
  hdev->num_tx_desc = cfg.tqp_desc_num;
  #line 1378 
  hdev->num_rx_desc = cfg.tqp_desc_num;
  #line 1379 
  hdev->tm_info.num_pg = (unsigned char)1U;
  #line 1380 
  hdev->tc_max = cfg.tc_num;
  #line 1381 
  hdev->tm_info.hw_pfc_map = (unsigned char)0U;
  #line 1382 
  hdev->wanted_umv_size = cfg.umv_space;
  #line 1384 
  if (((hdev->ae_dev)->flag & 64U) != 0U) {
    #line 1385 
    hdev->fd_en = (unsigned char)1U;
    #line 1386 
    hdev->fd_active_type = HCLGE_FD_RULE_NONE;
  }
  #line 1389 
  ret = hclge_parse_speed((int)cfg.default_speed,(int *)(& hdev->hw.mac.speed));
  #line 1390 
  if (ret != 0) {
    #line 1391 
    _dev_err(& (hdev->pdev)->dev,(char *)"Get wrong speed ret=%d.\n",ret);
    #line 1392 
    return ret;
  }
  #line 1395 
  hclge_parse_link_mode(hdev,(unsigned char)((int)cfg.speed_ability));
  #line 1397 
  hdev->hw.mac.max_speed = hclge_get_max_speed((unsigned char)((int)cfg.speed_ability));
  #line 1399 
  if ((unsigned int)hdev->tc_max + 255U > 7U) {
    #line 1401 
    _dev_warn(& (hdev->pdev)->dev,(char *)"TC num = %u.\n",(int)hdev->tc_max);
    #line 1403 
    hdev->tc_max = (unsigned char)1U;
  }
  #line 1407 
  if (((hdev->ae_dev)->flag & 4U) == 0U) {
    #line 1408 
    hdev->tc_max = (unsigned char)1U;
    #line 1409 
    hdev->pfc_max = (unsigned char)0U;
  }
  else 
       #line 1411 
       hdev->pfc_max = hdev->tc_max;
  #line 1414 
  hdev->tm_info.num_tc = (unsigned char)1U;
  #line 1417 
  i = 0U;
  #line 1417 
  while ((unsigned int)hdev->tm_info.num_tc > i) {
    #line 1418 
    hdev->hw_tc_map = (unsigned char)((int)hdev->hw_tc_map & ~ (1 << i));
    #line 1418 
    hdev->hw_tc_map = (unsigned char)((int)hdev->hw_tc_map | (1 << i));
    #line 1417 
    i ++;
  }
  #line 1420 
  hdev->tx_sch_mode = (unsigned char)1U;
  #line 1422 
  hclge_init_kdump_kernel_config(hdev);
  #line 1425 
  i = cpumask_weight(cpumask_of_node(dev_to_node(& (hdev->pdev)->dev)));
  #line 1426 
  if (i != 0U) 
               #line 1426 
               i = ((hdev->pdev)->devfn & 7U) % i; else 
                                                        #line 1426 
                                                        i = 0U;
  #line 1427 
  ;
  #line 1427 
  ;
  #line 1427 
  cpumask_set_cpu(cpumask_local_spread(i,dev_to_node(& (hdev->pdev)->dev)),& hdev->affinity_mask);
  #line 1430 
  return ret;
}

#line 1433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_config_tso(struct hclge_dev *hdev, unsigned int tso_mss_min, unsigned int tso_mss_max)
{
  #line 1436 
  struct hclge_cfg_tso_status_cmd *req;
  #line 1437 
  struct hclge_desc desc;
  #line 1438 
  u16 tso_mss;
  #line 1440 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_TSO_GENERIC_CONFIG,(_Bool)0);
  #line 1442 
  req = (struct hclge_cfg_tso_status_cmd *)(& desc.data);
  #line 1444 
  tso_mss = (unsigned short)0U;
  #line 1445 
  tso_mss = (unsigned short)((unsigned int)tso_mss & 49152U);
  #line 1445 
  tso_mss = (unsigned short)(((unsigned int)((unsigned short)tso_mss_min) & 16383U) | (unsigned int)tso_mss);
  #line 1447 
  req->tso_mss_min = tso_mss;
  #line 1449 
  tso_mss = (unsigned short)0U;
  #line 1450 
  tso_mss = (unsigned short)((unsigned int)tso_mss & 49152U);
  #line 1450 
  tso_mss = (unsigned short)(((unsigned int)((unsigned short)tso_mss_max) & 16383U) | (unsigned int)tso_mss);
  #line 1452 
  req->tso_mss_max = tso_mss;
  #line 1454 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 1457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_config_gro(struct hclge_dev *hdev, bool en)
{
  #line 1459 
  struct hclge_cfg_gro_status_cmd *req;
  #line 1460 
  struct hclge_desc desc;
  #line 1461 
  int ret;
  #line 1463 
  if (((hdev->ae_dev)->flag & 128U) == 0U) 
                                           #line 1464 
                                           return 0;
  #line 1466 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_GRO_GENERIC_CONFIG,(_Bool)0);
  #line 1467 
  req = (struct hclge_cfg_gro_status_cmd *)(& desc.data);
  #line 1469 
  if ((int)en != 0) 
                    #line 1469 
                    req->gro_en = (unsigned short)1U; else 
                                                           #line 1469 
                                                           req->gro_en = (unsigned short)0U;
  #line 1471 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 1472 
  if (ret != 0) 
                #line 1473 
                _dev_err(& (hdev->pdev)->dev,(char *)"GRO hardware config cmd failed, ret = %d\n",ret);
  #line 1476 
  return ret;
}

#line 1479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_alloc_tqps(struct hclge_dev *hdev)
{
  #line 1481 
  struct hclge_tqp *tqp;
  #line 1482 
  int i;
  #line 1484 
  hdev->htqp = (struct hclge_tqp *)cif_devm_kcalloc(& (hdev->pdev)->dev,(unsigned long)hdev->num_tqps,72UL,3264U);
  #line 1486 
  if (hdev->htqp == (struct hclge_tqp *)0) 
                                           #line 1487 
                                           return -12;
  #line 1489 
  tqp = hdev->htqp;
  #line 1491 
  i = 0;
  #line 1491 
  while ((int)hdev->num_tqps > i) {
    #line 1492 
    tqp->dev = & (hdev->pdev)->dev;
    #line 1493 
    tqp->index = (unsigned short)i;
    #line 1495 
    tqp->q.ae_algo = & ae_algo;
    #line 1496 
    tqp->q.buf_size = (unsigned int)hdev->rx_buf_len;
    #line 1497 
    tqp->q.tx_desc_num = hdev->num_tx_desc;
    #line 1498 
    tqp->q.rx_desc_num = hdev->num_rx_desc;
    #line 1499 
    tqp->q.io_base = hdev->hw.io_base + ((unsigned long)(i * 512) + (unsigned long)524288U);
    #line 1502 
    tqp ++;
    #line 1491 
    i ++;
  }
  #line 1505 
  return 0;
}

#line 1508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_map_tqps_to_func(struct hclge_dev *hdev, u16 func_id, u16 tqp_pid, u16 tqp_vid, bool is_pf)
{
  #line 1511 
  struct hclge_tqp_map_cmd *req;
  #line 1512 
  struct hclge_desc desc;
  #line 1513 
  int ret;
  #line 1515 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_SET_TQP_MAP,(_Bool)0);
  #line 1517 
  req = (struct hclge_tqp_map_cmd *)(& desc.data);
  #line 1518 
  req->tqp_id = tqp_pid;
  #line 1519 
  req->tqp_vf = (unsigned char)func_id;
  #line 1520 
  req->tqp_flag = (unsigned char)2U;
  #line 1521 
  if (! is_pf) 
               #line 1522 
               req->tqp_flag = (unsigned char)((unsigned int)req->tqp_flag | 1U);
  #line 1523 
  req->tqp_vid = tqp_vid;
  #line 1525 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 1526 
  if (ret != 0) 
                #line 1527 
                _dev_err(& (hdev->pdev)->dev,(char *)"TQP map failed %d.\n",ret);
  #line 1529 
  return ret;
}

#line 1532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_assign_tqp(struct hclge_vport *vport, u16 num_tqps)
{
  #line 1551 
  unsigned short __UNIQUE_ID___x445;
  #line 1551 
  int tmp;
  #line 1555 
  unsigned short __UNIQUE_ID___x447;
  #line 1555 
  int tmp_1;
  #line 1536 
  int i;
  #line 1536 
  int alloced;
  #line 1534 
  struct hnae3_knic_private_info *kinfo = & vport->nic.__anonCompField_hnae3_handle_167.kinfo;
  #line 1535 
  struct hclge_dev *hdev = vport->back;
  #line 1538 
  i = 0;
  #line 1538 
  alloced = 0;
  #line 1538 
  while ((int)hdev->num_tqps > i && (int)num_tqps > alloced) {
    #line 1540 
    if (! (hdev->htqp + (unsigned long)i)->alloced) {
      #line 1541 
      (hdev->htqp + (unsigned long)i)->q.handle = & vport->nic;
      #line 1542 
      (hdev->htqp + (unsigned long)i)->q.tqp_index = alloced;
      #line 1543 
      (hdev->htqp + (unsigned long)i)->q.tx_desc_num = kinfo->num_tx_desc;
      #line 1544 
      (hdev->htqp + (unsigned long)i)->q.rx_desc_num = kinfo->num_rx_desc;
      #line 1545 
      *(kinfo->tqp + (unsigned long)alloced) = & (hdev->htqp + (unsigned long)i)->q;
      #line 1546 
      (hdev->htqp + (unsigned long)i)->alloced = (_Bool)1;
      #line 1547 
      alloced ++;
    }
    #line 1539 
    i ++;
  }
  #line 1550 
  vport->alloc_tqps = (unsigned short)alloced;
  {
    #line 1551 
    __UNIQUE_ID___x445 = hdev->rss_size_max;
    #line 1551 
    unsigned short __UNIQUE_ID___y446 = (unsigned short)((int)vport->alloc_tqps / (int)hdev->tm_info.num_tc);
    #line 1551 
    if ((int)__UNIQUE_ID___x445 < (int)__UNIQUE_ID___y446) 
                                                           #line 1551 
                                                           tmp = (int)__UNIQUE_ID___x445; else 
                                                                    #line 1551 
                                                                    tmp = (int)__UNIQUE_ID___y446;
    }
  #line 1551 
  kinfo->rss_size = (unsigned short)tmp;
  {
    #line 1555 
    __UNIQUE_ID___x447 = kinfo->rss_size;
    #line 1555 
    unsigned short __UNIQUE_ID___y448 = (unsigned short)(((int)hdev->num_nic_msi + -1) / (int)hdev->tm_info.num_tc);
    #line 1555 
    if ((int)__UNIQUE_ID___x447 < (int)__UNIQUE_ID___y448) 
                                                           #line 1555 
                                                           tmp_1 = (int)__UNIQUE_ID___x447; else 
                                                                    #line 1555 
                                                                    tmp_1 = (int)__UNIQUE_ID___y448;
    }
  #line 1555 
  kinfo->rss_size = (unsigned short)tmp_1;
  #line 1558 
  return 0;
}

#line 1561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_knic_setup(struct hclge_vport *vport, u16 num_tqps, u16 num_tx_desc, u16 num_rx_desc)
{
  #line 1568 
  int ret;
  #line 1565 
  struct hnae3_handle *nic = & vport->nic;
  #line 1566 
  struct hnae3_knic_private_info *kinfo = & nic->__anonCompField_hnae3_handle_167.kinfo;
  #line 1567 
  struct hclge_dev *hdev = vport->back;
  #line 1570 
  kinfo->num_tx_desc = num_tx_desc;
  #line 1571 
  kinfo->num_rx_desc = num_rx_desc;
  #line 1573 
  kinfo->rx_buf_len = hdev->rx_buf_len;
  #line 1575 
  kinfo->tqp = (struct hnae3_queue **)cif_devm_kcalloc(& (hdev->pdev)->dev,(unsigned long)num_tqps,8UL,3264U);
  #line 1577 
  if (kinfo->tqp == (struct hnae3_queue **)0) 
                                              #line 1578 
                                              return -12;
  #line 1580 
  ret = hclge_assign_tqp(vport,(unsigned short)((int)num_tqps));
  #line 1581 
  if (ret != 0) 
                #line 1582 
                _dev_err(& (hdev->pdev)->dev,(char *)"fail to assign TQPs %d.\n",ret);
  #line 1584 
  return ret;
}

#line 1587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_map_tqp_to_vport(struct hclge_dev *hdev, struct hclge_vport *vport)
{
  #line 1591 
  struct hnae3_knic_private_info *kinfo;
  #line 1592 
  u16 i;
  #line 1590 
  struct hnae3_handle *nic = & vport->nic;
  #line 1594 
  kinfo = & nic->__anonCompField_hnae3_handle_167.kinfo;
  #line 1595 
  i = (unsigned short)0U;
  #line 1595 
  while ((int)vport->alloc_tqps > (int)i) {
    {
      #line 1597 
      void *__mptr;
      #line 1598 
      bool is_pf;
      #line 1599 
      int ret;
      #line 1597 
      __mptr = (void *)*(kinfo->tqp + (unsigned long)i);
      #line 1596 
      struct hclge_tqp *q = ((struct hclge_tqp *)(__mptr + 18446744073709551608U));
      #line 1601 
      is_pf = (_Bool)((unsigned int)vport->vport_id == 0U);
      #line 1602 
      ret = hclge_map_tqps_to_func(hdev,(unsigned short)((int)vport->vport_id),(unsigned short)((int)q->index),(unsigned short)((int)i),(_Bool)((bool)((int)is_pf) != 0));
      #line 1604 
      if (ret != 0) 
                    #line 1605 
                    return ret;
    }
    #line 1595 
    i = (u16)((int)i + 1);
  }
  #line 1608 
  return 0;
}

#line 1611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_map_tqp(struct hclge_dev *hdev)
{
  #line 1614 
  u16 i;
  #line 1614 
  u16 num_vport;
  #line 1613 
  struct hclge_vport *vport = hdev->vport;
  #line 1616 
  num_vport = (unsigned short)((unsigned int)((int)hdev->num_vmdq_vport + (int)hdev->num_req_vfs) + 1U);
  #line 1617 
  i = (unsigned short)0U;
  #line 1617 
  while ((int)i < (int)num_vport) {
    {
      #line 1618 
      int ret;
      #line 1620 
      ret = hclge_map_tqp_to_vport(hdev,vport);
      #line 1621 
      if (ret != 0) 
                    #line 1622 
                    return ret;
      #line 1624 
      vport ++;
    }
    #line 1617 
    i = (u16)((int)i + 1);
  }
  #line 1627 
  return 0;
}

#line 1630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_vport_setup(struct hclge_vport *vport, u16 num_tqps)
{
  #line 1634 
  int ret;
  #line 1632 
  struct hnae3_handle *nic = & vport->nic;
  #line 1633 
  struct hclge_dev *hdev = vport->back;
  #line 1636 
  nic->pdev = hdev->pdev;
  #line 1637 
  nic->ae_algo = & ae_algo;
  #line 1638 
  nic->numa_node_mask = hdev->numa_node_mask;
  #line 1640 
  ret = hclge_knic_setup(vport,(unsigned short)((int)num_tqps),(unsigned short)((int)hdev->num_tx_desc),(unsigned short)((int)hdev->num_rx_desc));
  #line 1642 
  if (ret != 0) 
                #line 1643 
                _dev_err(& (hdev->pdev)->dev,(char *)"knic setup failed %d\n",ret);
  #line 1645 
  return ret;
}

#line 1648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_alloc_vport(struct hclge_dev *hdev)
{
  #line 1651 
  struct hclge_vport *vport;
  #line 1652 
  u32 tqp_main_vport;
  #line 1653 
  u32 tqp_per_vport;
  #line 1654 
  int num_vport;
  #line 1654 
  int i;
  #line 1655 
  int ret;
  #line 1650 
  struct pci_dev *pdev = hdev->pdev;
  #line 1658 
  num_vport = ((int)hdev->num_vmdq_vport + (int)hdev->num_req_vfs) + 1;
  #line 1660 
  if ((int)hdev->num_tqps < num_vport) {
    #line 1661 
    _dev_err(& (hdev->pdev)->dev,(char *)"tqps(%u) is less than vports(%d)",(int)hdev->num_tqps,num_vport);
    #line 1663 
    return -22;
  }
  #line 1667 
  tqp_per_vport = (unsigned int)((int)hdev->num_tqps / num_vport);
  #line 1668 
  tqp_main_vport = (unsigned int)((int)hdev->num_tqps % num_vport) + tqp_per_vport;
  #line 1670 
  vport = (struct hclge_vport *)cif_devm_kcalloc(& pdev->dev,(unsigned long)num_vport,1584UL,3264U);
  #line 1672 
  if (vport == (struct hclge_vport *)0) 
                                        #line 1673 
                                        return -12;
  #line 1675 
  hdev->vport = vport;
  #line 1676 
  hdev->num_alloc_vport = (unsigned short)num_vport;
  #line 1679 
  hdev->num_alloc_vfs = (int)hdev->num_req_vfs;
  #line 1681 
  i = 0;
  #line 1681 
  while (i < num_vport) {
    #line 1682 
    vport->back = hdev;
    #line 1683 
    vport->vport_id = (unsigned short)i;
    #line 1684 
    vport->vf_info.link_state = 0;
    #line 1685 
    vport->mps = 1526U;
    #line 1686 
    vport->port_base_vlan_cfg.state = (unsigned short)0U;
    #line 1687 
    vport->rxvlan_cfg.rx_vlan_offload_en = (unsigned char)1U;
    #line 1688 
    INIT_LIST_HEAD(& vport->vlan_list);
    #line 1689 
    INIT_LIST_HEAD(& vport->uc_mac_list);
    #line 1690 
    INIT_LIST_HEAD(& vport->mc_mac_list);
    #line 1692 
    if (i == 0) 
                #line 1693 
                ret = hclge_vport_setup(vport,(unsigned short)((int)((unsigned short)tqp_main_vport))); else 
                                                                    #line 1695 
                                                                    ret = hclge_vport_setup(vport,(unsigned short)((int)((unsigned short)tqp_per_vport)));
    #line 1696 
    if (ret != 0) {
      #line 1697 
      _dev_err(& pdev->dev,(char *)"vport setup failed for vport %d, %d\n",i,ret);
      #line 1700 
      return ret;
    }
    #line 1703 
    vport ++;
    #line 1681 
    i ++;
  }
  #line 1706 
  return 0;
}

#line 1709  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_cmd_alloc_tx_buff(struct hclge_dev *hdev, struct hclge_pkt_buf_alloc *buf_alloc)
{
  #line 1715 
  struct hclge_tx_buff_alloc_cmd *req;
  #line 1716 
  struct hclge_desc desc;
  #line 1717 
  int ret;
  #line 1718 
  u8 i;
  #line 1720 
  req = (struct hclge_tx_buff_alloc_cmd *)(& desc.data);
  #line 1722 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_TX_BUFF_ALLOC,(_Bool)0);
  #line 1723 
  i = (unsigned char)0U;
  #line 1723 
  while ((unsigned int)i <= 7U) {
    {
      #line 1724 
      u32 buf_size = buf_alloc->priv_buf[(int)i].tx_buf_size;
      #line 1726 
      req->tx_pkt_buff[(int)i] = (unsigned short)((unsigned int)((unsigned short)(buf_size >> 7)) | 32768U);
    }
    #line 1723 
    i = (u8)((int)i + 1);
  }
  #line 1731 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 1732 
  if (ret != 0) 
                #line 1733 
                _dev_err(& (hdev->pdev)->dev,(char *)"tx buffer alloc cmd failed %d.\n",ret);
  #line 1736 
  return ret;
}

#line 1739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_tx_buffer_alloc(struct hclge_dev *hdev, struct hclge_pkt_buf_alloc *buf_alloc)
{
  #line 1742 
  int ret = hclge_cmd_alloc_tx_buff(hdev,buf_alloc);
  #line 1744 
  if (ret != 0) 
                #line 1745 
                _dev_err(& (hdev->pdev)->dev,(char *)"tx buffer alloc failed %d\n",ret);
  #line 1747 
  return ret;
}

#line 1750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u32 hclge_get_tc_num(struct hclge_dev *hdev)
{
  #line 1752 
  unsigned int i;
  #line 1753 
  u32 cnt = 0U;
  #line 1755 
  i = 0U;
  #line 1755 
  while (i <= 7U) {
    #line 1756 
    if ((((unsigned long)hdev->hw_tc_map >> i) & 1UL) != 0UL) 
                                                              #line 1757 
                                                              cnt ++;
    #line 1755 
    i ++;
  }
  #line 1758 
  return cnt;
}

#line 1762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_pfc_priv_num(struct hclge_dev *hdev, struct hclge_pkt_buf_alloc *buf_alloc)
{
  #line 1765 
  struct hclge_priv_buf *priv;
  #line 1766 
  unsigned int i;
  #line 1767 
  int cnt = 0;
  #line 1769 
  i = 0U;
  #line 1769 
  while (i <= 7U) {
    #line 1770 
    priv = & buf_alloc->priv_buf[i];
    #line 1771 
    if ((((unsigned long)hdev->tm_info.hw_pfc_map >> i) & 1UL) != 0UL && priv->enable != 0U) 
      #line 1773 
      cnt ++;
    #line 1769 
    i ++;
  }
  #line 1776 
  return cnt;
}

#line 1780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_no_pfc_priv_num(struct hclge_dev *hdev, struct hclge_pkt_buf_alloc *buf_alloc)
{
  #line 1783 
  struct hclge_priv_buf *priv;
  #line 1784 
  unsigned int i;
  #line 1785 
  int cnt = 0;
  #line 1787 
  i = 0U;
  #line 1787 
  while (i <= 7U) {
    #line 1788 
    priv = & buf_alloc->priv_buf[i];
    #line 1789 
    if (((((unsigned long)hdev->hw_tc_map >> i) & 1UL) != 0UL && (((unsigned long)hdev->tm_info.hw_pfc_map >> i) & 1UL) == 0UL) && priv->enable != 0U) 
      #line 1792 
      cnt ++;
    #line 1787 
    i ++;
  }
  #line 1795 
  return cnt;
}

#line 1798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u32 hclge_get_rx_priv_buff_alloced(struct hclge_pkt_buf_alloc *buf_alloc)
{
  #line 1800 
  struct hclge_priv_buf *priv;
  #line 1802 
  int i;
  #line 1801 
  u32 rx_priv = 0U;
  #line 1804 
  i = 0;
  #line 1804 
  while (i <= 7) {
    #line 1805 
    priv = & buf_alloc->priv_buf[i];
    #line 1806 
    if (priv->enable != 0U) 
                            #line 1807 
                            rx_priv = priv->buf_size + rx_priv;
    #line 1804 
    i ++;
  }
  #line 1809 
  return rx_priv;
}

#line 1812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u32 hclge_get_tx_buff_alloced(struct hclge_pkt_buf_alloc *buf_alloc)
{
  #line 1814 
  u32 i;
  #line 1814 
  u32 total_tx_size = 0U;
  #line 1816 
  i = 0U;
  #line 1816 
  while (i <= 7U) {
    #line 1817 
    total_tx_size = buf_alloc->priv_buf[i].tx_buf_size + total_tx_size;
    #line 1816 
    i ++;
  }
  #line 1819 
  return total_tx_size;
}

#line 1822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static bool hclge_is_rx_buf_ok(struct hclge_dev *hdev, struct hclge_pkt_buf_alloc *buf_alloc, u32 rx_all)
{
  #line 1842 
  unsigned int __y_0;
  #line 1842 
  unsigned int __UNIQUE_ID___x449;
  #line 1842 
  unsigned int tmp_1;
  #line 1849 
  u32 __x;
  #line 1832 
  unsigned int __y;
  #line 1826 
  u32 shared_buf_min;
  #line 1826 
  u32 shared_buf_tc;
  #line 1826 
  u32 shared_std;
  #line 1826 
  u32 hi_thrd;
  #line 1826 
  u32 lo_thrd;
  #line 1828 
  u32 shared_buf;
  #line 1828 
  u32 aligned_mps;
  #line 1829 
  u32 rx_priv;
  #line 1830 
  int i;
  #line 1827 
  u32 tc_num = hclge_get_tc_num(hdev);
  #line 1832 
  __y = 256U;
  #line 1832 
  aligned_mps = ((((hdev->mps + __y) + 4294967295U) / __y) * __y);
  #line 1834 
  if (((hdev->ae_dev)->flag & 4U) != 0U) 
                                         #line 1835 
                                         shared_buf_min = aligned_mps * 2U + hdev->dv_buf_size; else 
                                                                    #line 1838 
                                                                    shared_buf_min = (hdev->dv_buf_size + aligned_mps) + 5120U;
  #line 1841 
  shared_buf_tc = (tc_num + 1U) * aligned_mps;
  #line 1842 
  __y_0 = 256U;
  {
    #line 1842 
    __UNIQUE_ID___x449 = shared_buf_min;
    #line 1842 
    unsigned int __UNIQUE_ID___y450 = shared_buf_tc;
    #line 1842 
    if (__UNIQUE_ID___x449 > __UNIQUE_ID___y450) 
                                                 #line 1842 
                                                 tmp_1 = __UNIQUE_ID___x449; else 
                                                                    #line 1842 
                                                                    tmp_1 = __UNIQUE_ID___y450;
    }
  #line 1842 
  ;
  #line 1842 
  shared_std = ((((tmp_1 + __y_0) + 4294967295U) / __y_0) * __y_0);
  #line 1845 
  rx_priv = hclge_get_rx_priv_buff_alloced(buf_alloc);
  #line 1846 
  if (rx_priv + shared_std > rx_all) 
                                     #line 1847 
                                     return (_Bool)0;
  #line 1849 
  __x = rx_all - rx_priv;
  #line 1849 
  shared_buf = (__x & 4294967040U);
  #line 1850 
  buf_alloc->s_buf.buf_size = shared_buf;
  #line 1851 
  if (((hdev->ae_dev)->flag & 4U) != 0U) {
    #line 1854 
    unsigned int __y_1;
    #line 1852 
    buf_alloc->s_buf.self.high = shared_buf - hdev->dv_buf_size;
    #line 1854 
    __y_1 = 256U;
    #line 1853 
    buf_alloc->s_buf.self.low = buf_alloc->s_buf.self.high - ((((aligned_mps / 2U + __y_1) + 4294967295U) / __y_1) * __y_1);
  }
  else {
    #line 1857 
    buf_alloc->s_buf.self.high = aligned_mps + 5120U;
    #line 1859 
    buf_alloc->s_buf.self.low = aligned_mps;
  }
  #line 1862 
  if (((hdev->ae_dev)->flag & 4U) != 0U) {
    #line 1873 
    u32 __x_0;
    #line 1872 
    unsigned int __UNIQUE_ID___x451;
    #line 1872 
    unsigned int tmp_6;
    #line 1863 
    hi_thrd = shared_buf - hdev->dv_buf_size;
    #line 1865 
    if (tc_num <= 2U) 
                      #line 1866 
                      hi_thrd = (hi_thrd * 90U) / 100U;
    #line 1869 
    if (tc_num != 0U) 
                      #line 1870 
                      hi_thrd /= tc_num;
    {
      #line 1872 
      __UNIQUE_ID___x451 = hi_thrd;
      #line 1872 
      unsigned int __UNIQUE_ID___y452 = aligned_mps * 2U;
      #line 1872 
      if (__UNIQUE_ID___x451 > __UNIQUE_ID___y452) 
                                                   #line 1872 
                                                   tmp_6 = __UNIQUE_ID___x451; else 
                                                                    #line 1872 
                                                                    tmp_6 = __UNIQUE_ID___y452;
      }
    #line 1872 
    hi_thrd = tmp_6;
    #line 1873 
    __x_0 = hi_thrd;
    #line 1873 
    hi_thrd = (__x_0 & 4294967040U);
    #line 1874 
    lo_thrd = hi_thrd - aligned_mps / 2U;
  }
  else {
    #line 1876 
    hi_thrd = aligned_mps + 5120U;
    #line 1877 
    lo_thrd = aligned_mps;
  }
  #line 1880 
  i = 0;
  #line 1880 
  while (i <= 7) {
    #line 1881 
    buf_alloc->s_buf.tc_thrd[i].low = lo_thrd;
    #line 1882 
    buf_alloc->s_buf.tc_thrd[i].high = hi_thrd;
    #line 1880 
    i ++;
  }
  #line 1885 
  return (_Bool)1;
}

#line 1888  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_tx_buffer_calc(struct hclge_dev *hdev, struct hclge_pkt_buf_alloc *buf_alloc)
{
  #line 1891 
  u32 i;
  #line 1891 
  u32 total_size;
  #line 1893 
  total_size = hdev->pkt_buf_size;
  #line 1896 
  i = 0U;
  #line 1896 
  while (i <= 7U) {
    {
      #line 1897 
      struct hclge_priv_buf *priv = & buf_alloc->priv_buf[i];
      #line 1899 
      if ((((unsigned long)hdev->hw_tc_map >> i) & 1UL) != 0UL) {
        #line 1900 
        if (hdev->tx_buf_size > total_size) 
                                            #line 1901 
                                            return -12;
        #line 1903 
        priv->tx_buf_size = hdev->tx_buf_size;
      }
      else 
           #line 1905 
           priv->tx_buf_size = 0U;
      #line 1908 
      total_size -= priv->tx_buf_size;
    }
    #line 1896 
    i ++;
  }
  #line 1911 
  return 0;
}

#line 1914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static bool hclge_rx_buf_calc_all(struct hclge_dev *hdev, bool max, struct hclge_pkt_buf_alloc *buf_alloc)
{
  #line 1919 
  unsigned int i;
  #line 1917 
  u32 rx_all = hdev->pkt_buf_size - hclge_get_tx_buff_alloced(buf_alloc);
  #line 1918 
  u32 aligned_mps = ((hdev->mps + 4294967295U) | 255U) + 1U;
  #line 1921 
  i = 0U;
  #line 1921 
  while (i <= 7U) {
    {
      #line 1922 
      struct hclge_priv_buf *priv = & buf_alloc->priv_buf[i];
      #line 1924 
      priv->enable = 0U;
      #line 1925 
      priv->wl.low = 0U;
      #line 1926 
      priv->wl.high = 0U;
      #line 1927 
      priv->buf_size = 0U;
      #line 1929 
      if ((((unsigned long)hdev->hw_tc_map >> i) & 1UL) == 0UL) 
                                                                #line 1930 
                                                                goto __Cont;
      #line 1932 
      priv->enable = 1U;
      #line 1934 
      if ((((unsigned long)hdev->tm_info.hw_pfc_map >> i) & 1UL) != 0UL) {
        #line 1936 
        unsigned int __y;
        #line 1935 
        if ((int)max != 0) 
                           #line 1935 
                           priv->wl.low = aligned_mps; else 
                                                            #line 1935 
                                                            priv->wl.low = 256U;
        #line 1936 
        __y = 256U;
        #line 1936 
        priv->wl.high = (((((priv->wl.low + aligned_mps) + __y) + 4294967295U) / __y) * __y);
      }
      else {
        #line 1939 
        priv->wl.low = 0U;
        #line 1940 
        if ((int)max != 0) 
                           #line 1940 
                           priv->wl.high = aligned_mps * 2U; else 
                                                                  #line 1940 
                                                                  priv->wl.high = aligned_mps;
      }
      #line 1944 
      priv->buf_size = priv->wl.high + hdev->dv_buf_size;
    }
    #line 1921 
    __Cont: 
            #line 1921 
    i ++;
  }
  #line 1947 
  return hclge_is_rx_buf_ok(hdev,buf_alloc,rx_all);
}

#line 1950  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static bool hclge_drop_nopfc_buf_till_fit(struct hclge_dev *hdev, struct hclge_pkt_buf_alloc *buf_alloc)
{
  #line 1955 
  int i;
  #line 1953 
  u32 rx_all = hdev->pkt_buf_size - hclge_get_tx_buff_alloced(buf_alloc);
  #line 1954 
  int no_pfc_priv_num = hclge_get_no_pfc_priv_num(hdev,buf_alloc);
  #line 1958 
  i = 7;
  #line 1958 
  while (i >= 0) {
    {
      #line 1959 
      struct hclge_priv_buf *priv = & buf_alloc->priv_buf[i];
      #line 1960 
      unsigned int mask = (unsigned int)(1UL << (unsigned int)i);
      #line 1962 
      if (((unsigned int)hdev->hw_tc_map & mask) != 0U && ((unsigned int)hdev->tm_info.hw_pfc_map & mask) == 0U) {
        #line 1965 
        priv->wl.low = 0U;
        #line 1966 
        priv->wl.high = 0U;
        #line 1967 
        priv->buf_size = 0U;
        #line 1968 
        priv->enable = 0U;
        #line 1969 
        no_pfc_priv_num --;
      }
      #line 1972 
      if ((int)hclge_is_rx_buf_ok(hdev,buf_alloc,rx_all) != 0) 
                                                               #line 1974 
                                                               break;
      else 
        #line 1972 
        if (no_pfc_priv_num == 0) 
                                  #line 1974 
                                  break;
    }
    #line 1958 
    i --;
  }
  #line 1977 
  return hclge_is_rx_buf_ok(hdev,buf_alloc,rx_all);
}

#line 1980  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static bool hclge_drop_pfc_buf_till_fit(struct hclge_dev *hdev, struct hclge_pkt_buf_alloc *buf_alloc)
{
  #line 1985 
  int i;
  #line 1983 
  u32 rx_all = hdev->pkt_buf_size - hclge_get_tx_buff_alloced(buf_alloc);
  #line 1984 
  int pfc_priv_num = hclge_get_pfc_priv_num(hdev,buf_alloc);
  #line 1988 
  i = 7;
  #line 1988 
  while (i >= 0) {
    {
      #line 1989 
      struct hclge_priv_buf *priv = & buf_alloc->priv_buf[i];
      #line 1990 
      unsigned int mask = (unsigned int)(1UL << (unsigned int)i);
      #line 1992 
      if (((unsigned int)hdev->hw_tc_map & mask) != 0U && ((unsigned int)hdev->tm_info.hw_pfc_map & mask) != 0U) {
        #line 1995 
        priv->wl.low = 0U;
        #line 1996 
        priv->enable = 0U;
        #line 1997 
        priv->wl.high = 0U;
        #line 1998 
        priv->buf_size = 0U;
        #line 1999 
        pfc_priv_num --;
      }
      #line 2002 
      if ((int)hclge_is_rx_buf_ok(hdev,buf_alloc,rx_all) != 0) 
                                                               #line 2004 
                                                               break;
      else 
        #line 2002 
        if (pfc_priv_num == 0) 
                               #line 2004 
                               break;
    }
    #line 1988 
    i --;
  }
  #line 2007 
  return hclge_is_rx_buf_ok(hdev,buf_alloc,rx_all);
}

#line 2010  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_only_alloc_priv_buff(struct hclge_dev *hdev, struct hclge_pkt_buf_alloc *buf_alloc)
{
  #line 2020 
  u32 min_rx_priv;
  #line 2021 
  unsigned int i;
  #line 2017 
  u32 rx_priv = hdev->pkt_buf_size - hclge_get_tx_buff_alloced(buf_alloc);
  #line 2018 
  u32 tc_num = hclge_get_tc_num(hdev);
  #line 2019 
  u32 half_mps = hdev->mps >> 1;
  #line 2023 
  if (tc_num != 0U) 
                    #line 2024 
                    rx_priv /= tc_num;
  #line 2026 
  if (tc_num <= 2U) 
                    #line 2027 
                    rx_priv = (rx_priv * 90U) / 100U;
  #line 2029 
  min_rx_priv = (hdev->dv_buf_size + half_mps * 5U) + 15360U;
  #line 2031 
  min_rx_priv = ((min_rx_priv + 4294967295U) | 255U) + 1U;
  #line 2032 
  rx_priv &= 4294967040U;
  #line 2034 
  if (rx_priv < min_rx_priv) 
                             #line 2035 
                             return 0;
  #line 2037 
  i = 0U;
  #line 2037 
  while (i <= 7U) {
    {
      #line 2038 
      struct hclge_priv_buf *priv = & buf_alloc->priv_buf[i];
      #line 2040 
      priv->enable = 0U;
      #line 2041 
      priv->wl.low = 0U;
      #line 2042 
      priv->wl.high = 0U;
      #line 2043 
      priv->buf_size = 0U;
      #line 2045 
      if ((((unsigned long)hdev->hw_tc_map >> i) & 1UL) == 0UL) 
                                                                #line 2046 
                                                                goto __Cont;
      #line 2048 
      priv->enable = 1U;
      #line 2049 
      priv->buf_size = rx_priv;
      #line 2050 
      priv->wl.high = rx_priv - hdev->dv_buf_size;
      #line 2051 
      priv->wl.low = priv->wl.high + 4294961152U;
    }
    #line 2037 
    __Cont: 
            #line 2037 
    i ++;
  }
  #line 2054 
  buf_alloc->s_buf.buf_size = 0U;
  #line 2056 
  return 1;
}

#line 2064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_rx_buffer_calc(struct hclge_dev *hdev, struct hclge_pkt_buf_alloc *buf_alloc)
{
  #line 2068 
  if (((hdev->ae_dev)->flag & 4U) == 0U) {
    #line 2069 
    u32 rx_all = hdev->pkt_buf_size;
    #line 2071 
    rx_all -= hclge_get_tx_buff_alloced(buf_alloc);
    #line 2072 
    if (! hclge_is_rx_buf_ok(hdev,buf_alloc,rx_all)) 
                                                     #line 2073 
                                                     return -12;
    #line 2075 
    return 0;
  }
  #line 2078 
  if (hclge_only_alloc_priv_buff(hdev,buf_alloc) != 0) 
                                                       #line 2079 
                                                       return 0;
  #line 2081 
  if ((int)hclge_rx_buf_calc_all(hdev,(_Bool)1,buf_alloc) != 0) 
                                                                #line 2082 
                                                                return 0;
  #line 2085 
  if ((int)hclge_rx_buf_calc_all(hdev,(_Bool)0,buf_alloc) != 0) 
                                                                #line 2086 
                                                                return 0;
  #line 2088 
  if ((int)hclge_drop_nopfc_buf_till_fit(hdev,buf_alloc) != 0) 
                                                               #line 2089 
                                                               return 0;
  #line 2091 
  if ((int)hclge_drop_pfc_buf_till_fit(hdev,buf_alloc) != 0) 
                                                             #line 2092 
                                                             return 0;
  #line 2094 
  return -12;
}

#line 2097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_rx_priv_buf_alloc(struct hclge_dev *hdev, struct hclge_pkt_buf_alloc *buf_alloc)
{
  #line 2100 
  struct hclge_rx_priv_buff_cmd *req;
  #line 2101 
  struct hclge_desc desc;
  #line 2102 
  int ret;
  #line 2103 
  int i;
  #line 2105 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_RX_PRIV_BUFF_ALLOC,(_Bool)0);
  #line 2106 
  req = (struct hclge_rx_priv_buff_cmd *)(& desc.data);
  #line 2109 
  i = 0;
  #line 2109 
  while (i <= 7) {
    {
      #line 2110 
      struct hclge_priv_buf *priv = & buf_alloc->priv_buf[i];
      #line 2112 
      req->buf_num[i] = (unsigned short)(priv->buf_size >> 7);
      #line 2114 
      req->buf_num[i] = (unsigned short)((unsigned int)req->buf_num[i] | 32768U);
    }
    #line 2109 
    i ++;
  }
  #line 2118 
  req->shared_buf = (unsigned short)((unsigned int)((unsigned short)(buf_alloc->s_buf.buf_size >> 7)) | 32768U);
  #line 2122 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 2123 
  if (ret != 0) 
                #line 2124 
                _dev_err(& (hdev->pdev)->dev,(char *)"rx private buffer alloc cmd failed %d\n",ret);
  #line 2127 
  return ret;
}

#line 2130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_rx_priv_wl_config(struct hclge_dev *hdev, struct hclge_pkt_buf_alloc *buf_alloc)
{
  #line 2133 
  struct hclge_rx_priv_wl_buf *req;
  #line 2134 
  struct hclge_priv_buf *priv;
  #line 2135 
  struct hclge_desc desc[2U];
  #line 2136 
  int i;
  #line 2136 
  int j;
  #line 2137 
  int ret;
  #line 2139 
  i = 0;
  #line 2139 
  while (i <= 1) {
    #line 2140 
    hclge_cmd_setup_basic_desc(& desc[i],(enum hclge_opcode_type)HCLGE_OPC_RX_PRIV_WL_ALLOC,(_Bool)0);
    #line 2142 
    req = (struct hclge_rx_priv_wl_buf *)(& desc[i].data);
    #line 2145 
    if (i == 0) 
                #line 2146 
                desc[i].flag = (unsigned short)((unsigned int)desc[i].flag | 4U); else 
                                                                    #line 2148 
                                                                    desc[i].flag = (unsigned short)((unsigned int)desc[i].flag & 65531U);
    #line 2150 
    j = 0;
    #line 2150 
    while (j <= 3) {
      {
        #line 2151 
        u32 idx = (unsigned int)(i * 4 + j);
        #line 2153 
        priv = & buf_alloc->priv_buf[idx];
        #line 2154 
        req->tc_wl[j].high = (unsigned short)(priv->wl.high >> 7);
        #line 2156 
        req->tc_wl[j].high = (unsigned short)((unsigned int)req->tc_wl[j].high | 32768U);
        #line 2158 
        req->tc_wl[j].low = (unsigned short)(priv->wl.low >> 7);
        #line 2160 
        req->tc_wl[j].low = (unsigned short)((unsigned int)req->tc_wl[j].low | 32768U);
      }
      #line 2150 
      j ++;
    }
    #line 2139 
    i ++;
  }
  #line 2166 
  ret = hclge_cmd_send(& hdev->hw,(struct hclge_desc *)(& desc),2);
  #line 2167 
  if (ret != 0) 
                #line 2168 
                _dev_err(& (hdev->pdev)->dev,(char *)"rx private waterline config cmd failed %d\n",ret);
  #line 2171 
  return ret;
}

#line 2174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_common_thrd_config(struct hclge_dev *hdev, struct hclge_pkt_buf_alloc *buf_alloc)
{
  #line 2178 
  struct hclge_rx_com_thrd *req;
  #line 2179 
  struct hclge_desc desc[2U];
  #line 2180 
  struct hclge_tc_thrd *tc;
  #line 2181 
  int i;
  #line 2181 
  int j;
  #line 2182 
  int ret;
  #line 2177 
  struct hclge_shared_buf *s_buf = & buf_alloc->s_buf;
  #line 2184 
  i = 0;
  #line 2184 
  while (i <= 1) {
    #line 2185 
    hclge_cmd_setup_basic_desc(& desc[i],(enum hclge_opcode_type)HCLGE_OPC_RX_COM_THRD_ALLOC,(_Bool)0);
    #line 2187 
    req = (struct hclge_rx_com_thrd *)(& desc[i].data);
    #line 2190 
    if (i == 0) 
                #line 2191 
                desc[i].flag = (unsigned short)((unsigned int)desc[i].flag | 4U); else 
                                                                    #line 2193 
                                                                    desc[i].flag = (unsigned short)((unsigned int)desc[i].flag & 65531U);
    #line 2195 
    j = 0;
    #line 2195 
    while (j <= 3) {
      #line 2196 
      tc = & s_buf->tc_thrd[i * 4 + j];
      #line 2198 
      req->com_thrd[j].high = (unsigned short)(tc->high >> 7);
      #line 2200 
      req->com_thrd[j].high = (unsigned short)((unsigned int)req->com_thrd[j].high | 32768U);
      #line 2202 
      req->com_thrd[j].low = (unsigned short)(tc->low >> 7);
      #line 2204 
      req->com_thrd[j].low = (unsigned short)((unsigned int)req->com_thrd[j].low | 32768U);
      #line 2195 
      j ++;
    }
    #line 2184 
    i ++;
  }
  #line 2210 
  ret = hclge_cmd_send(& hdev->hw,(struct hclge_desc *)(& desc),2);
  #line 2211 
  if (ret != 0) 
                #line 2212 
                _dev_err(& (hdev->pdev)->dev,(char *)"common threshold config cmd failed %d\n",ret);
  #line 2214 
  return ret;
}

#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_common_wl_config(struct hclge_dev *hdev, struct hclge_pkt_buf_alloc *buf_alloc)
{
  #line 2221 
  struct hclge_rx_com_wl *req;
  #line 2222 
  struct hclge_desc desc;
  #line 2223 
  int ret;
  #line 2220 
  struct hclge_shared_buf *buf = & buf_alloc->s_buf;
  #line 2225 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_RX_COM_WL_ALLOC,(_Bool)0);
  #line 2227 
  req = (struct hclge_rx_com_wl *)(& desc.data);
  #line 2228 
  req->com_wl.high = (unsigned short)(buf->self.high >> 7);
  #line 2229 
  req->com_wl.high = (unsigned short)((unsigned int)req->com_wl.high | 32768U);
  #line 2231 
  req->com_wl.low = (unsigned short)(buf->self.low >> 7);
  #line 2232 
  req->com_wl.low = (unsigned short)((unsigned int)req->com_wl.low | 32768U);
  #line 2234 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 2235 
  if (ret != 0) 
                #line 2236 
                _dev_err(& (hdev->pdev)->dev,(char *)"common waterline config cmd failed %d\n",ret);
  #line 2239 
  return ret;
}

#line 2242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_buffer_alloc(struct hclge_dev *hdev)
{
  #line 2244 
  struct hclge_pkt_buf_alloc *pkt_buf;
  #line 2245 
  int ret;
  #line 2247 
  pkt_buf = (struct hclge_pkt_buf_alloc *)kzalloc_0(236UL,3264U);
  #line 2248 
  if (pkt_buf == (struct hclge_pkt_buf_alloc *)0) 
                                                  #line 2249 
                                                  return -12;
  #line 2251 
  ret = hclge_tx_buffer_calc(hdev,pkt_buf);
  #line 2252 
  if (ret != 0) {
    #line 2253 
    _dev_err(& (hdev->pdev)->dev,(char *)"could not calc tx buffer size for all TCs %d\n",ret);
    #line 2255 
    goto out;
  }
  #line 2258 
  ret = hclge_tx_buffer_alloc(hdev,pkt_buf);
  #line 2259 
  if (ret != 0) {
    #line 2260 
    _dev_err(& (hdev->pdev)->dev,(char *)"could not alloc tx buffers %d\n",ret);
    #line 2262 
    goto out;
  }
  #line 2265 
  ret = hclge_rx_buffer_calc(hdev,pkt_buf);
  #line 2266 
  if (ret != 0) {
    #line 2267 
    _dev_err(& (hdev->pdev)->dev,(char *)"could not calc rx priv buffer size for all TCs %d\n",ret);
    #line 2270 
    goto out;
  }
  #line 2273 
  ret = hclge_rx_priv_buf_alloc(hdev,pkt_buf);
  #line 2274 
  if (ret != 0) {
    #line 2275 
    _dev_err(& (hdev->pdev)->dev,(char *)"could not alloc rx priv buffer %d\n",ret);
    #line 2277 
    goto out;
  }
  #line 2280 
  if (((hdev->ae_dev)->flag & 4U) != 0U) {
    #line 2281 
    ret = hclge_rx_priv_wl_config(hdev,pkt_buf);
    #line 2282 
    if (ret != 0) {
      #line 2283 
      _dev_err(& (hdev->pdev)->dev,(char *)"could not configure rx private waterline %d\n",ret);
      #line 2286 
      goto out;
    }
    #line 2289 
    ret = hclge_common_thrd_config(hdev,pkt_buf);
    #line 2290 
    if (ret != 0) {
      #line 2291 
      _dev_err(& (hdev->pdev)->dev,(char *)"could not configure common threshold %d\n",ret);
      #line 2294 
      goto out;
    }
  }
  #line 2298 
  ret = hclge_common_wl_config(hdev,pkt_buf);
  #line 2299 
  if (ret != 0) 
                #line 2300 
                _dev_err(& (hdev->pdev)->dev,(char *)"could not configure common waterline %d\n",ret);
  #line 2303 
  out: 
       #line 2303 
  ;
  #line 2304 
  kfree((void *)pkt_buf);
  #line 2305 
  return ret;
}

#line 2308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_init_roce_base_info(struct hclge_vport *vport)
{
  #line 2310 
  struct hnae3_handle *roce = & vport->roce;
  #line 2311 
  struct hnae3_handle *nic = & vport->nic;
  #line 2313 
  roce->__anonCompField_hnae3_handle_167.rinfo.num_vectors = (int)(vport->back)->num_roce_msi;
  #line 2315 
  if ((int)(vport->back)->num_msi_left < vport->roce.__anonCompField_hnae3_handle_167.rinfo.num_vectors || (unsigned int)(vport->back)->num_msi_left == 0U) 
    #line 2317 
    return -22;
  #line 2319 
  roce->__anonCompField_hnae3_handle_167.rinfo.base_vector = (vport->back)->roce_base_vector;
  #line 2321 
  roce->__anonCompField_hnae3_handle_167.rinfo.netdev = nic->__anonCompField_hnae3_handle_167.kinfo.netdev;
  #line 2322 
  roce->__anonCompField_hnae3_handle_167.rinfo.roce_io_base = (vport->back)->hw.io_base;
  #line 2324 
  roce->pdev = nic->pdev;
  #line 2325 
  roce->ae_algo = nic->ae_algo;
  #line 2326 
  roce->numa_node_mask = nic->numa_node_mask;
  #line 2328 
  return 0;
}

#line 2331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_init_msi(struct hclge_dev *hdev)
{
  #line 2334 
  int vectors;
  #line 2335 
  int i;
  #line 2333 
  struct pci_dev *pdev = hdev->pdev;
  #line 2337 
  vectors = pci_alloc_irq_vectors(pdev,2U,(unsigned int)hdev->num_msi,6U);
  #line 2340 
  if (vectors < 0) {
    #line 2341 
    _dev_err(& pdev->dev,(char *)"failed(%d) to allocate MSI/MSI-X vectors\n",vectors);
    #line 2344 
    return vectors;
  }
  #line 2346 
  if ((int)hdev->num_msi > vectors) 
                                    #line 2347 
                                    _dev_warn(& (hdev->pdev)->dev,(char *)"requested %u MSI/MSI-X, but allocated %d MSI/MSI-X\n",(int)hdev->num_msi,vectors);
  #line 2351 
  hdev->num_msi = (unsigned short)vectors;
  #line 2352 
  hdev->num_msi_left = (unsigned short)vectors;
  #line 2354 
  hdev->base_msi_vector = pdev->irq;
  #line 2355 
  hdev->roce_base_vector = (int)(hdev->base_msi_vector + (unsigned int)hdev->roce_base_msix_offset);
  #line 2358 
  hdev->vector_status = (u16 *)cif_devm_kcalloc(& pdev->dev,(unsigned long)hdev->num_msi,2UL,3264U);
  #line 2360 
  if (hdev->vector_status == (u16 *)0U) {
    #line 2361 
    pci_free_irq_vectors(pdev);
    #line 2362 
    return -12;
  }
  #line 2365 
  i = 0;
  #line 2365 
  while ((int)hdev->num_msi > i) {
    #line 2366 
    *(hdev->vector_status + (unsigned long)i) = (unsigned short)65535U;
    #line 2365 
    i ++;
  }
  #line 2368 
  hdev->vector_irq = (int *)cif_devm_kcalloc(& pdev->dev,(unsigned long)hdev->num_msi,4UL,3264U);
  #line 2370 
  if (hdev->vector_irq == (int *)0) {
    #line 2371 
    pci_free_irq_vectors(pdev);
    #line 2372 
    return -12;
  }
  #line 2375 
  return 0;
}

#line 2378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u8 hclge_check_speed_dup(u8 duplex, int speed)
{
  #line 2380 
  if (speed != 10 && speed != 100) 
                                   #line 2381 
                                   duplex = (unsigned char)1U;
  #line 2383 
  return duplex;
}

#line 2386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_cfg_mac_speed_dup_hw(struct hclge_dev *hdev, int speed, u8 duplex)
{
  #line 2389 
  struct hclge_config_mac_speed_dup_cmd *req;
  #line 2390 
  struct hclge_desc desc;
  #line 2391 
  int ret;
  #line 2393 
  req = (struct hclge_config_mac_speed_dup_cmd *)(& desc.data);
  #line 2395 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_CONFIG_SPEED_DUP,(_Bool)0);
  #line 2397 
  if ((unsigned int)duplex != 0U) {
    #line 2398 
    req->speed_dup = (unsigned char)((unsigned int)req->speed_dup & 127U);
    #line 2398 
    req->speed_dup = (unsigned char)((unsigned int)req->speed_dup | 128U);
  }
  #line 2400 
  switch (speed) {
    #line 2401 
    case 10: 
             #line 2401 
    ;
    #line 2402 
    req->speed_dup = (unsigned char)((unsigned int)req->speed_dup & 192U);
    #line 2402 
    req->speed_dup = (unsigned char)((unsigned int)req->speed_dup | 6U);
    #line 2404 
    break;
    #line 2405 
    case 100: 
              #line 2405 
    ;
    #line 2406 
    req->speed_dup = (unsigned char)((unsigned int)req->speed_dup & 192U);
    #line 2406 
    req->speed_dup = (unsigned char)((unsigned int)req->speed_dup | 7U);
    #line 2408 
    break;
    #line 2409 
    case 1000: 
               #line 2409 
    ;
    #line 2410 
    req->speed_dup = (unsigned char)((unsigned int)req->speed_dup & 192U);
    #line 2410 
    req->speed_dup = req->speed_dup;
    #line 2412 
    break;
    #line 2413 
    case 10000: 
                #line 2413 
    ;
    #line 2414 
    req->speed_dup = (unsigned char)((unsigned int)req->speed_dup & 192U);
    #line 2414 
    req->speed_dup = (unsigned char)((unsigned int)req->speed_dup | 1U);
    #line 2416 
    break;
    #line 2417 
    case 25000: 
                #line 2417 
    ;
    #line 2418 
    req->speed_dup = (unsigned char)((unsigned int)req->speed_dup & 192U);
    #line 2418 
    req->speed_dup = (unsigned char)((unsigned int)req->speed_dup | 2U);
    #line 2420 
    break;
    #line 2421 
    case 40000: 
                #line 2421 
    ;
    #line 2422 
    req->speed_dup = (unsigned char)((unsigned int)req->speed_dup & 192U);
    #line 2422 
    req->speed_dup = (unsigned char)((unsigned int)req->speed_dup | 3U);
    #line 2424 
    break;
    #line 2425 
    case 50000: 
                #line 2425 
    ;
    #line 2426 
    req->speed_dup = (unsigned char)((unsigned int)req->speed_dup & 192U);
    #line 2426 
    req->speed_dup = (unsigned char)((unsigned int)req->speed_dup | 4U);
    #line 2428 
    break;
    #line 2429 
    case 100000: 
                 #line 2429 
    ;
    #line 2430 
    req->speed_dup = (unsigned char)((unsigned int)req->speed_dup & 192U);
    #line 2430 
    req->speed_dup = (unsigned char)((unsigned int)req->speed_dup | 5U);
    #line 2432 
    break;
    #line 2433 
    default: 
             #line 2433 
    ;
    #line 2434 
    _dev_err(& (hdev->pdev)->dev,(char *)"invalid speed (%d)\n",speed);
    #line 2435 
    return -22;
  }
  #line 2438 
  req->mac_change_fec_en = (unsigned char)((unsigned int)req->mac_change_fec_en & 254U);
  #line 2438 
  req->mac_change_fec_en = (unsigned char)((unsigned int)req->mac_change_fec_en | 1U);
  #line 2441 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 2442 
  if (ret != 0) {
    #line 2443 
    _dev_err(& (hdev->pdev)->dev,(char *)"mac speed/duplex config cmd failed %d.\n",ret);
    #line 2445 
    return ret;
  }
  #line 2448 
  return 0;
}

#line 2451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_cfg_mac_speed_dup(struct hclge_dev *hdev, int speed, u8 duplex)
{
  #line 2453 
  int ret;
  #line 2455 
  duplex = hclge_check_speed_dup((unsigned char)((int)duplex),speed);
  #line 2456 
  if (hdev->hw.mac.speed == (unsigned int)speed && (int)hdev->hw.mac.duplex == (int)duplex) 
    #line 2457 
    return 0;
  #line 2459 
  ret = hclge_cfg_mac_speed_dup_hw(hdev,speed,(unsigned char)((int)duplex));
  #line 2460 
  if (ret != 0) 
                #line 2461 
                return ret;
  #line 2463 
  hdev->hw.mac.speed = (unsigned int)speed;
  #line 2464 
  hdev->hw.mac.duplex = duplex;
  #line 2466 
  return 0;
}

#line 2469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_cfg_mac_speed_dup_h(struct hnae3_handle *handle, int speed, u8 duplex)
{
  #line 2472 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 2473 
  struct hclge_dev *hdev = vport->back;
  #line 2475 
  return hclge_cfg_mac_speed_dup(hdev,speed,(unsigned char)((int)duplex));
}

#line 2478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_autoneg_en(struct hclge_dev *hdev, bool enable)
{
  #line 2480 
  struct hclge_config_auto_neg_cmd *req;
  #line 2481 
  struct hclge_desc desc;
  #line 2483 
  int ret;
  #line 2482 
  u32 flag = 0U;
  #line 2485 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_CONFIG_AN_MODE,(_Bool)0);
  #line 2487 
  req = (struct hclge_config_auto_neg_cmd *)(& desc.data);
  #line 2488 
  if ((int)enable != 0) {
    #line 2489 
    flag &= 4294967294U;
    #line 2489 
    flag |= 1U;
  }
  #line 2490 
  req->cfg_an_cmd_flag = flag;
  #line 2492 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 2493 
  if (ret != 0) 
                #line 2494 
                _dev_err(& (hdev->pdev)->dev,(char *)"auto neg set cmd failed %d.\n",ret);
  #line 2497 
  return ret;
}

#line 2500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_autoneg(struct hnae3_handle *handle, bool enable)
{
  #line 2502 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 2503 
  struct hclge_dev *hdev = vport->back;
  #line 2505 
  if ((unsigned int)hdev->hw.mac.support_autoneg == 0U) 
    #line 2506 
    if ((int)enable != 0) {
      #line 2507 
      _dev_err(& (hdev->pdev)->dev,(char *)"autoneg is not supported by current port\n");
      #line 2509 
      return -95;
    }
    else 
         #line 2511 
         return 0;
  #line 2515 
  return hclge_set_autoneg_en(hdev,(_Bool)((bool)((int)enable) != 0));
}

#line 2518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_autoneg(struct hnae3_handle *handle)
{
  #line 2520 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 2521 
  struct hclge_dev *hdev = vport->back;
  #line 2522 
  struct phy_device *phydev = hdev->hw.mac.phydev;
  #line 2524 
  if (phydev != (struct phy_device *)0) 
                                        #line 2525 
                                        return (int)phydev->autoneg;
  #line 2527 
  return (int)hdev->hw.mac.autoneg;
}

#line 2530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_restart_autoneg(struct hnae3_handle *handle)
{
  #line 2534 
  int ret;
  #line 2532 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 2533 
  struct hclge_dev *hdev = vport->back;
  {
    #line 2536 
    bool branch;
    #line 2536 
    struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"hclge", .function = (char *)"hclge_restart_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c", .format = (char *)"restart autoneg\n", .lineno = (unsigned int)2536U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2536 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
    #line 2536 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2536 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug453,& (hdev->pdev)->dev,(char *)"restart autoneg\n");
  }
  #line 2538 
  ret = hclge_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_DOWN_CLIENT);
  #line 2539 
  if (ret != 0) 
                #line 2540 
                return ret;
  #line 2541 
  return hclge_notify_client(hdev,
                            (enum hnae3_reset_notify_type)HNAE3_UP_CLIENT);
}

#line 2544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_halt_autoneg(struct hnae3_handle *handle, bool halt)
{
  #line 2546 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 2547 
  struct hclge_dev *hdev = vport->back;
  #line 2549 
  if ((unsigned int)hdev->hw.mac.support_autoneg != 0U && (unsigned int)hdev->hw.mac.autoneg != 0U) {
    #line 2550 
    return hclge_set_autoneg_en(hdev,
                             (_Bool)((int)((_Bool)(! ((int)halt != 0)))));
  }
  #line 2552 
  return 0;
}

#line 2555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_fec_hw(struct hclge_dev *hdev, u32 fec_mode)
{
  #line 2557 
  struct hclge_config_fec_cmd *req;
  #line 2558 
  struct hclge_desc desc;
  #line 2559 
  int ret;
  #line 2561 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_CONFIG_FEC_MODE,(_Bool)0);
  #line 2563 
  req = (struct hclge_config_fec_cmd *)(& desc.data);
  #line 2564 
  if (((unsigned long)fec_mode & 1UL) != 0UL) {
    #line 2565 
    req->fec_mode = (unsigned char)((unsigned int)req->fec_mode & 254U);
    #line 2565 
    req->fec_mode = (unsigned char)((unsigned int)req->fec_mode | 1U);
  }
  #line 2566 
  if (((unsigned long)fec_mode & 4UL) != 0UL) {
    #line 2567 
    req->fec_mode = (unsigned char)((unsigned int)req->fec_mode & 241U);
    #line 2567 
    req->fec_mode = (unsigned char)((unsigned int)req->fec_mode | 4U);
  }
  #line 2569 
  if (((unsigned long)fec_mode & 2UL) != 0UL) {
    #line 2570 
    req->fec_mode = (unsigned char)((unsigned int)req->fec_mode & 241U);
    #line 2570 
    req->fec_mode = (unsigned char)((unsigned int)req->fec_mode | 2U);
  }
  #line 2573 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 2574 
  if (ret != 0) 
                #line 2575 
                _dev_err(& (hdev->pdev)->dev,(char *)"set fec mode failed %d.\n",ret);
  #line 2577 
  return ret;
}

#line 2580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_fec(struct hnae3_handle *handle, u32 fec_mode)
{
  #line 2585 
  int ret;
  #line 2582 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 2583 
  struct hclge_dev *hdev = vport->back;
  #line 2584 
  struct hclge_mac *mac = & hdev->hw.mac;
  #line 2587 
  if (fec_mode != 0U && (mac->fec_ability & fec_mode) == 0U) {
    #line 2588 
    _dev_err(& (hdev->pdev)->dev,(char *)"unsupported fec mode\n");
    #line 2589 
    return -22;
  }
  #line 2592 
  ret = hclge_set_fec_hw(hdev,fec_mode);
  #line 2593 
  if (ret != 0) 
                #line 2594 
                return ret;
  #line 2596 
  mac->user_fec_mode = fec_mode | 8U;
  #line 2597 
  return 0;
}

#line 2600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_get_fec(struct hnae3_handle *handle, u8 *fec_ability, u8 *fec_mode)
{
  #line 2603 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 2604 
  struct hclge_dev *hdev = vport->back;
  #line 2605 
  struct hclge_mac *mac = & hdev->hw.mac;
  #line 2607 
  if (fec_ability != (u8 *)0U) 
                               #line 2608 
                               *fec_ability = (unsigned char)mac->fec_ability;
  #line 2609 
  if (fec_mode != (u8 *)0U) 
                            #line 2610 
                            *fec_mode = (unsigned char)mac->fec_mode;
  #line 2611 
  return;
}

#line 2613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_mac_init(struct hclge_dev *hdev)
{
  #line 2616 
  int ret;
  #line 2615 
  struct hclge_mac *mac = & hdev->hw.mac;
  #line 2618 
  hdev->support_sfp_query = (unsigned char)1U;
  #line 2619 
  hdev->hw.mac.duplex = (unsigned char)1U;
  #line 2620 
  ret = hclge_cfg_mac_speed_dup_hw(hdev,(int)hdev->hw.mac.speed,(unsigned char)((int)hdev->hw.mac.duplex));
  #line 2622 
  if (ret != 0) {
    #line 2623 
    _dev_err(& (hdev->pdev)->dev,(char *)"Config mac speed dup fail ret=%d\n",ret);
    #line 2625 
    return ret;
  }
  #line 2628 
  if ((unsigned int)hdev->hw.mac.support_autoneg != 0U) {
    #line 2629 
    ret = hclge_set_autoneg_en(hdev,(_Bool)((unsigned int)hdev->hw.mac.autoneg != 0U));
    #line 2630 
    if (ret != 0) {
      #line 2631 
      _dev_err(& (hdev->pdev)->dev,(char *)"Config mac autoneg fail ret=%d\n",ret);
      #line 2633 
      return ret;
    }
  }
  #line 2637 
  mac->link = 0;
  #line 2639 
  if (((unsigned long)mac->user_fec_mode & 8UL) != 0UL) {
    #line 2640 
    ret = hclge_set_fec_hw(hdev,mac->user_fec_mode);
    #line 2641 
    if (ret != 0) {
      #line 2642 
      _dev_err(& (hdev->pdev)->dev,(char *)"Fec mode init fail, ret = %d\n",ret);
      #line 2644 
      return ret;
    }
  }
  #line 2648 
  ret = hclge_set_mac_mtu(hdev,(int)hdev->mps);
  #line 2649 
  if (ret != 0) {
    #line 2650 
    _dev_err(& (hdev->pdev)->dev,(char *)"set mtu failed ret=%d\n",ret);
    #line 2651 
    return ret;
  }
  #line 2654 
  ret = hclge_set_default_loopback(hdev);
  #line 2655 
  if (ret != 0) 
                #line 2656 
                return ret;
  #line 2658 
  ret = hclge_buffer_alloc(hdev);
  #line 2659 
  if (ret != 0) 
                #line 2660 
                _dev_err(& (hdev->pdev)->dev,(char *)"allocate buffer fail, ret=%d\n",ret);
  #line 2663 
  return ret;
}

#line 2666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_mbx_task_schedule(struct hclge_dev *hdev)
{
  #line 2668 
  if (! test_bit(13L,& hdev->state)) {
    #line 2669 
    if (! test_and_set_bit(10L,& hdev->state)) {
      #line 2670 
      ;
      #line 2670 
      ;
      #line 2670 
      cif_queue_work_on((int)cpumask_first(& hdev->affinity_mask),system_wq,& hdev->mbx_service_task);
    }
  }
  #line 2672 
  return;
}

#line 2674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_reset_task_schedule(struct hclge_dev *hdev)
{
  #line 2676 
  if (! test_bit(3L,& hdev->state)) {
    #line 2677 
    if (! test_and_set_bit(8L,& hdev->state)) {
      #line 2678 
      ;
      #line 2678 
      ;
      #line 2678 
      cif_queue_work_on((int)cpumask_first(& hdev->affinity_mask),system_wq,& hdev->rst_service_task);
    }
  }
  #line 2680 
  return;
}

#line 2682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
void hclge_task_schedule(struct hclge_dev *hdev, unsigned long delay_time)
{
  #line 2684 
  if (! test_bit(1L,& hdev->state)) {
    #line 2685 
    if (! test_bit(3L,& hdev->state)) {
      #line 2686 
      if (! test_and_set_bit(7L,& hdev->state)) {
        #line 2687 
        (hdev->hw_stats.stats_timer) ++;
        #line 2688 
        hdev->fd_arfs_expire_timer = (u16)((int)hdev->fd_arfs_expire_timer + 1);
        #line 2689 
        ;
        #line 2689 
        ;
        #line 2689 
        ;
        #line 2689 
        mod_delayed_work_on((int)cpumask_first(& hdev->affinity_mask),system_wq,& hdev->service_task,delay_time);
      }
    }
  }
  #line 2692 
  return;
}

#line 2695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_mac_link_status(struct hclge_dev *hdev)
{
  #line 2697 
  struct hclge_link_status_cmd *req;
  #line 2698 
  struct hclge_desc desc;
  #line 2699 
  int link_status;
  #line 2700 
  int ret;
  #line 2702 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_QUERY_LINK_STATUS,(_Bool)1);
  #line 2703 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 2704 
  if (ret != 0) {
    #line 2705 
    _dev_err(& (hdev->pdev)->dev,(char *)"get link status cmd failed %d\n",ret);
    #line 2707 
    return ret;
  }
  #line 2710 
  req = (struct hclge_link_status_cmd *)(& desc.data);
  #line 2711 
  link_status = (int)req->status & 1;
  #line 2713 
  return link_status != 0;
}

#line 2716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_mac_phy_link(struct hclge_dev *hdev)
{
  #line 2718 
  unsigned int mac_state;
  #line 2719 
  int link_stat;
  #line 2721 
  if ((int)test_bit(1L,& hdev->state) != 0) 
                                            #line 2722 
                                            return 0;
  #line 2724 
  mac_state = (unsigned int)hclge_get_mac_link_status(hdev);
  #line 2726 
  if (hdev->hw.mac.phydev != (struct phy_device *)0) 
    #line 2727 
    if ((hdev->hw.mac.phydev)->state == (unsigned int)PHY_RUNNING) 
                                                                   #line 2728 
                                                                   link_stat = (int)((unsigned int)(hdev->hw.mac.phydev)->link & mac_state); else 
                                                                    #line 2731 
                                                                    link_stat = 0;
  else 
       #line 2734 
       link_stat = (int)mac_state;
  #line 2737 
  return link_stat != 0;
}

#line 2740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_update_link_status(struct hclge_dev *hdev)
{
  #line 2744 
  struct hnae3_handle *rhandle;
  #line 2745 
  struct hnae3_handle *handle;
  #line 2746 
  int state;
  #line 2747 
  int i;
  #line 2742 
  struct hnae3_client *rclient = hdev->roce_client;
  #line 2743 
  struct hnae3_client *client = hdev->nic_client;
  #line 2749 
  if (client == (struct hnae3_client *)0) 
                                          #line 2750 
                                          return;
  #line 2751 
  state = hclge_get_mac_phy_link(hdev);
  #line 2752 
  if (hdev->hw.mac.link != state) {
    #line 2753 
    i = 0;
    #line 2753 
    while ((int)hdev->num_vmdq_vport >= i) {
      #line 2754 
      handle = & (hdev->vport + (unsigned long)i)->nic;
      #line 2755 
      (*((client->ops)->link_status_change))(handle,(_Bool)(state != 0));
      #line 2756 
      hclge_config_mac_tnl_int(hdev,(_Bool)(state != 0));
      #line 2757 
      rhandle = & (hdev->vport + (unsigned long)i)->roce;
      #line 2758 
      if (rclient != (struct hnae3_client *)0 && (rclient->ops)->link_status_change != (void (*)(struct hnae3_handle *, bool ))0) 
        #line 2759 
        (*((rclient->ops)->link_status_change))(rhandle,(_Bool)(state != 0));
      #line 2753 
      i ++;
    }
    #line 2762 
    hdev->hw.mac.link = state;
  }
  #line 2764 
  return;
}

#line 2766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_update_port_capability(struct hclge_mac *mac)
{
  #line 2769 
  hclge_convert_setting_fec(mac);
  #line 2774 
  if ((unsigned int)mac->media_type == 3U && mac->module_type == 0U) 
    #line 2776 
    mac->module_type = 5U;
  else 
    #line 2777 
    if ((unsigned int)mac->media_type == 2U) 
                                             #line 2778 
                                             mac->module_type = 6U;
  #line 2780 
  if ((unsigned int)mac->support_autoneg != 0U) {
    #line 2781 
    linkmode_set_bit(6,(unsigned long *)(& mac->supported));
    #line 2782 
    linkmode_copy((unsigned long *)(& mac->advertising),(unsigned long *)(& mac->supported));
  }
  else {
    #line 2784 
    linkmode_set_bit(6,(unsigned long *)(& mac->supported));
    #line 2786 
    linkmode_zero((unsigned long *)(& mac->advertising));
  }
  #line 2788 
  return;
}

#line 2790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_sfp_speed(struct hclge_dev *hdev, u32 *speed)
{
  #line 2792 
  struct hclge_sfp_info_cmd *resp;
  #line 2793 
  struct hclge_desc desc;
  #line 2794 
  int ret;
  #line 2796 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_GET_SFP_INFO,(_Bool)1);
  #line 2797 
  resp = (struct hclge_sfp_info_cmd *)(& desc.data);
  #line 2798 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 2799 
  if (ret == -95) {
    #line 2800 
    _dev_warn(& (hdev->pdev)->dev,(char *)"IMP do not support get SFP speed %d\n",ret);
    #line 2802 
    return ret;
  }
  else 
    #line 2803 
    if (ret != 0) {
      #line 2804 
      _dev_err(& (hdev->pdev)->dev,(char *)"get sfp speed failed %d\n",ret);
      #line 2805 
      return ret;
    }
  #line 2808 
  *speed = resp->speed;
  #line 2810 
  return 0;
}

#line 2813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_sfp_info(struct hclge_dev *hdev, struct hclge_mac *mac)
{
  #line 2815 
  struct hclge_sfp_info_cmd *resp;
  #line 2816 
  struct hclge_desc desc;
  #line 2817 
  int ret;
  #line 2819 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_GET_SFP_INFO,(_Bool)1);
  #line 2820 
  resp = (struct hclge_sfp_info_cmd *)(& desc.data);
  #line 2822 
  resp->query_type = (unsigned char)1U;
  #line 2824 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 2825 
  if (ret == -95) {
    #line 2826 
    _dev_warn(& (hdev->pdev)->dev,(char *)"IMP does not support get SFP info %d\n",ret);
    #line 2828 
    return ret;
  }
  else 
    #line 2829 
    if (ret != 0) {
      #line 2830 
      _dev_err(& (hdev->pdev)->dev,(char *)"get sfp info failed %d\n",ret);
      #line 2831 
      return ret;
    }
  #line 2834 
  mac->speed = resp->speed;
  #line 2838 
  if (resp->speed_ability != 0U) {
    #line 2839 
    mac->module_type = resp->module_type;
    #line 2840 
    mac->speed_ability = resp->speed_ability;
    #line 2841 
    mac->autoneg = resp->autoneg;
    #line 2842 
    mac->support_autoneg = resp->autoneg_ability;
    #line 2843 
    mac->speed_type = (unsigned char)1U;
    #line 2844 
    if ((unsigned int)resp->active_fec == 0U) 
                                              #line 2845 
                                              mac->fec_mode = 0U; else 
                                                                    #line 2847 
                                                                    mac->fec_mode = (unsigned int)(1UL << (int)resp->active_fec);
  }
  else 
       #line 2849 
       mac->speed_type = (unsigned char)0U;
  #line 2852 
  return 0;
}

#line 2855  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_update_port_info(struct hclge_dev *hdev)
{
  #line 2859 
  int ret;
  #line 2857 
  struct hclge_mac *mac = & hdev->hw.mac;
  #line 2858 
  int speed = 0;
  #line 2862 
  if ((unsigned int)mac->media_type == 2U) 
                                           #line 2863 
                                           return 0;
  #line 2866 
  if ((unsigned int)hdev->support_sfp_query == 0U) 
                                                   #line 2867 
                                                   return 0;
  #line 2869 
  if ((unsigned int)(hdev->pdev)->revision > 32U) 
                                                  #line 2870 
                                                  ret = hclge_get_sfp_info(hdev,mac); else 
                                                                    #line 2872 
                                                                    ret = hclge_get_sfp_speed(hdev,(u32 *)(& speed));
  #line 2874 
  if (ret == -95) {
    #line 2875 
    hdev->support_sfp_query = (unsigned char)0U;
    #line 2876 
    return ret;
  }
  else 
    #line 2877 
    if (ret != 0) 
                  #line 2878 
                  return ret;
  #line 2881 
  if ((unsigned int)(hdev->pdev)->revision > 32U) {
    #line 2882 
    if ((unsigned int)mac->speed_type == 1U) {
      #line 2883 
      hclge_update_port_capability(mac);
      #line 2884 
      return 0;
    }
    #line 2886 
    return hclge_cfg_mac_speed_dup(hdev,(int)mac->speed,(unsigned char)1);
  }
  else {
    #line 2889 
    if (speed == 0) 
                    #line 2890 
                    return 0;
    #line 2893 
    return hclge_cfg_mac_speed_dup(hdev,speed,(unsigned char)1);
  }
}

#line 2897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_status(struct hnae3_handle *handle)
{
  #line 2899 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 2900 
  struct hclge_dev *hdev = vport->back;
  #line 2902 
  hclge_update_link_status(hdev);
  #line 2904 
  return hdev->hw.mac.link;
}

#line 2907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static struct hclge_vport *hclge_get_vf_vport(struct hclge_dev *hdev, int vf)
{
  #line 2909 
  if (pci_num_vf(hdev->pdev) == 0) {
    #line 2910 
    _dev_err(& (hdev->pdev)->dev,(char *)"SRIOV is disabled, can not get vport(%d) info.\n",vf);
    #line 2912 
    return (struct hclge_vport *)0;
  }
  #line 2915 
  if (vf < 0) 
              #line 2915 
              goto _LOR;
  else {
    #line 2915 
    ;
    #line 2915 
    if (pci_num_vf(hdev->pdev) <= vf) {
      #line 2915 
      _LOR: {
              #line 2916 
              ;
              #line 2916 
              ;
              #line 2916 
              _dev_err(& (hdev->pdev)->dev,(char *)"vf id(%d) is out of range(0 <= vfid < %d)\n",vf,pci_num_vf(hdev->pdev));
              #line 2919 
              return (struct hclge_vport *)0;
            }
    }
  }
  #line 2923 
  vf ++;
  #line 2924 
  return hdev->vport + (unsigned long)vf;
}

#line 2927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_vf_config(struct hnae3_handle *handle, int vf, struct ifla_vf_info *ivf)
{
  #line 2930 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 2931 
  struct hclge_dev *hdev = vport->back;
  #line 2933 
  vport = hclge_get_vf_vport(hdev,vf);
  #line 2934 
  if (vport == (struct hclge_vport *)0) 
                                        #line 2935 
                                        return -22;
  #line 2937 
  ivf->vf = (unsigned int)vf;
  #line 2938 
  ivf->linkstate = (unsigned int)vport->vf_info.link_state;
  #line 2939 
  ivf->spoofchk = vport->vf_info.spoofchk;
  #line 2940 
  ivf->trusted = vport->vf_info.trusted;
  #line 2941 
  ivf->min_tx_rate = 0U;
  #line 2942 
  ivf->max_tx_rate = vport->vf_info.max_tx_rate;
  #line 2943 
  ether_addr_copy((u8 *)(& ivf->mac),(u8 *)(& vport->vf_info.mac));
  #line 2945 
  return 0;
}

#line 2948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_vf_link_state(struct hnae3_handle *handle, int vf, int link_state)
{
  #line 2951 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 2952 
  struct hclge_dev *hdev = vport->back;
  #line 2954 
  vport = hclge_get_vf_vport(hdev,vf);
  #line 2955 
  if (vport == (struct hclge_vport *)0) 
                                        #line 2956 
                                        return -22;
  #line 2958 
  vport->vf_info.link_state = link_state;
  #line 2960 
  return 0;
}

#line 2963  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u32 hclge_check_event_cause(struct hclge_dev *hdev, u32 *clearval)
{
  #line 2965 
  u32 rst_src_reg;
  #line 2965 
  u32 cmdq_src_reg;
  #line 2965 
  u32 msix_src_reg;
  #line 2968 
  rst_src_reg = hclge_read_reg_1((u8 *)hdev->hw.io_base,133120U);
  #line 2969 
  cmdq_src_reg = hclge_read_reg_1((u8 *)hdev->hw.io_base,160000U);
  #line 2970 
  msix_src_reg = hclge_read_reg_1((u8 *)hdev->hw.io_base,133120U);
  #line 2981 
  if ((rst_src_reg & 128U) != 0U) {
    #line 2982 
    _dev_info(& (hdev->pdev)->dev,(char *)"IMP reset interrupt\n");
    #line 2983 
    cif_set_bit_0(7L,& hdev->reset_pending);
    #line 2984 
    cif_set_bit_0(13L,& hdev->state);
    #line 2985 
    *clearval = 128U;
    #line 2986 
    (hdev->rst_stats.imp_rst_cnt) ++;
    #line 2987 
    return 0U;
  }
  #line 2990 
  if ((rst_src_reg & 32U) != 0U) {
    #line 2991 
    _dev_info(& (hdev->pdev)->dev,(char *)"global reset interrupt\n");
    #line 2992 
    cif_set_bit_0(13L,& hdev->state);
    #line 2993 
    cif_set_bit_0(6L,& hdev->reset_pending);
    #line 2994 
    *clearval = 32U;
    #line 2995 
    (hdev->rst_stats.global_rst_cnt) ++;
    #line 2996 
    return 0U;
  }
  #line 3000 
  if ((msix_src_reg & 130816U) != 0U) {
    #line 3001 
    _dev_info(& (hdev->pdev)->dev,(char *)"received event 0x%x\n",msix_src_reg);
    #line 3003 
    *clearval = msix_src_reg;
    #line 3004 
    return 2U;
  }
  #line 3008 
  if ((cmdq_src_reg & 2U) != 0U) {
    #line 3009 
    cmdq_src_reg &= 4294967293U;
    #line 3010 
    *clearval = cmdq_src_reg;
    #line 3011 
    return 1U;
  }
  #line 3015 
  _dev_info(& (hdev->pdev)->dev,(char *)"CMDQ INT status:0x%x, other INT status:0x%x\n",cmdq_src_reg,msix_src_reg);
  #line 3018 
  *clearval = msix_src_reg;
  #line 3020 
  return 3U;
}

#line 3023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_clear_event_cause(struct hclge_dev *hdev, u32 event_type, u32 regclr)
{
  #line 3026 
  switch (event_type) {
    #line 3027 
    case (u32)0: 
                 #line 3027 
    ;
    #line 3028 
    hclge_write_reg(hdev->hw.io_base,132864U,regclr);
    #line 3029 
    break;
    #line 3030 
    case (u32)1: 
                 #line 3030 
    ;
    #line 3031 
    hclge_write_reg(hdev->hw.io_base,160000U,regclr);
    #line 3032 
    break;
    #line 3033 
    default: 
             #line 3033 
    ;
    #line 3034 
    break;
  }
  #line 3036 
  return;
}

#line 3038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_clear_all_event_cause(struct hclge_dev *hdev)
{
  #line 3040 
  hclge_clear_event_cause(hdev,0U,224U);
  #line 3044 
  hclge_clear_event_cause(hdev,1U,0U);
  #line 3045 
  return;
}

#line 3047  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_enable_vector(struct hclge_misc_vector *vector, bool enable)
{
  #line 3049 
  writel((unsigned int)((int)enable != 0),(void *)vector->addr);
  #line 3050 
  return;
}

#line 3052  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static irqreturn_t hclge_misc_irq_handle(int irq, void *data)
{
  #line 3056 
  u32 event_cause;
  #line 3054 
  struct hclge_dev *hdev = (struct hclge_dev *)data;
  #line 3055 
  u32 clearval = 0U;
  #line 3058 
  hclge_enable_vector(& hdev->misc_vector,(_Bool)0);
  #line 3059 
  event_cause = hclge_check_event_cause(hdev,& clearval);
  #line 3062 
  switch (event_cause) {
    #line 3063 
    case (u32)2: 
                 #line 3063 
    ;
    #line 3074 
    cif_set_bit_0(8L,& hdev->reset_request);
    #line 3076 
    case (u32)0: 
                 #line 3076 
    ;
    #line 3077 
    hclge_reset_task_schedule(hdev);
    #line 3078 
    break;
    #line 3079 
    case (u32)1: 
                 #line 3079 
    ;
    #line 3089 
    hclge_mbx_task_schedule(hdev);
    #line 3090 
    break;
    #line 3091 
    default: 
             #line 3091 
    ;
    #line 3092 
    _dev_warn(& (hdev->pdev)->dev,(char *)"received unknown or unhandled event of vector0\n");
    #line 3094 
    break;
  }
  #line 3097 
  hclge_clear_event_cause(hdev,event_cause,clearval);
  #line 3104 
  if (clearval == 0U || event_cause == 1U) 
                                           #line 3106 
                                           hclge_enable_vector(& hdev->misc_vector,(_Bool)1);
  #line 3109 
  return IRQ_HANDLED;
}

#line 3112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_free_vector(struct hclge_dev *hdev, int vector_id)
{
  #line 3114 
  if ((unsigned int)*(hdev->vector_status + (unsigned long)vector_id) == 65535U) {
    #line 3115 
    _dev_warn(& (hdev->pdev)->dev,(char *)"vector(vector_id %d) has been freed.\n",vector_id);
    #line 3117 
    return;
  }
  #line 3120 
  *(hdev->vector_status + (unsigned long)vector_id) = (unsigned short)65535U;
  #line 3121 
  hdev->num_msi_left = (unsigned short)((unsigned int)hdev->num_msi_left + 1U);
  #line 3122 
  hdev->num_msi_used = (unsigned short)((unsigned int)hdev->num_msi_used + 65535U);
  #line 3123 
  return;
}

#line 3125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_get_misc_vector(struct hclge_dev *hdev)
{
  #line 3127 
  struct hclge_misc_vector *vector = & hdev->misc_vector;
  #line 3129 
  vector->vector_irq = pci_irq_vector(hdev->pdev,0U);
  #line 3131 
  vector->addr = (u8 *)(hdev->hw.io_base + 132096U);
  #line 3132 
  *(hdev->vector_status) = (unsigned short)0U;
  #line 3134 
  hdev->num_msi_left = (unsigned short)((unsigned int)hdev->num_msi_left + 65535U);
  #line 3135 
  hdev->num_msi_used = (unsigned short)((unsigned int)hdev->num_msi_used + 1U);
  #line 3136 
  return;
}

#line 3138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_irq_affinity_notify(struct irq_affinity_notify *notify, cpumask_t *mask)
{
  #line 3141 
  void *__mptr;
  #line 3141 
  __mptr = (void *)notify;
  #line 3141 
  struct hclge_dev *hdev = ((struct hclge_dev *)(__mptr + 18446744073709416224U));
  #line 3144 
  cpumask_copy(& hdev->affinity_mask,mask);
  #line 3145 
  return;
}

#line 3147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_irq_affinity_release(struct kref *ref)
{
  #line 3149 
  return;
}

#line 3151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_misc_affinity_setup(struct hclge_dev *hdev)
{
  #line 3153 
  irq_set_affinity_hint((unsigned int)hdev->misc_vector.vector_irq,& hdev->affinity_mask);
  #line 3156 
  hdev->affinity_notify.notify = & hclge_irq_affinity_notify;
  #line 3157 
  hdev->affinity_notify.release = & hclge_irq_affinity_release;
  #line 3158 
  irq_set_affinity_notifier((unsigned int)hdev->misc_vector.vector_irq,& hdev->affinity_notify);
  #line 3160 
  return;
}

#line 3162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_misc_affinity_teardown(struct hclge_dev *hdev)
{
  #line 3164 
  irq_set_affinity_notifier((unsigned int)hdev->misc_vector.vector_irq,(struct irq_affinity_notify *)0);
  #line 3165 
  irq_set_affinity_hint((unsigned int)hdev->misc_vector.vector_irq,(struct cpumask *)0);
  #line 3166 
  return;
}

#line 3168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_misc_irq_init(struct hclge_dev *hdev)
{
  #line 3170 
  int ret;
  #line 3172 
  hclge_get_misc_vector(hdev);
  #line 3175 
  ret = cif_request_irq((unsigned int)hdev->misc_vector.vector_irq,& hclge_misc_irq_handle,0UL,(char *)"hclge_misc",(void *)hdev);
  #line 3177 
  if (ret != 0) {
    #line 3178 
    hclge_free_vector(hdev,0);
    #line 3179 
    _dev_err(& (hdev->pdev)->dev,(char *)"request misc irq(%d) fail\n",hdev->misc_vector.vector_irq);
  }
  #line 3183 
  return ret;
}

#line 3186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_misc_irq_uninit(struct hclge_dev *hdev)
{
  #line 3188 
  cif_free_irq((unsigned int)hdev->misc_vector.vector_irq,(void *)hdev);
  #line 3189 
  hclge_free_vector(hdev,0);
  #line 3190 
  return;
}

#line 3192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_notify_client(struct hclge_dev *hdev, enum hnae3_reset_notify_type type)
{
  #line 3196 
  u16 i;
  #line 3195 
  struct hnae3_client *client = hdev->nic_client;
  #line 3198 
  if (test_bit(4L,& hdev->state)) {
    #line 3198 
    if (client == (struct hnae3_client *)0) 
                                            #line 3199 
                                            return 0;
  }
  else 
       #line 3199 
       return 0;
  #line 3201 
  if ((client->ops)->reset_notify == (int (*)(struct hnae3_handle *, enum hnae3_reset_notify_type ))0) 
    #line 3202 
    return -95;
  #line 3204 
  i = (unsigned short)0U;
  #line 3204 
  while ((int)hdev->num_vmdq_vport >= (int)i) {
    {
      #line 3206 
      int ret;
      #line 3205 
      struct hnae3_handle *handle = & (hdev->vport + (unsigned long)i)->nic;
      #line 3208 
      ret = (*((client->ops)->reset_notify))(handle,type);
      #line 3209 
      if (ret != 0) {
        #line 3210 
        _dev_err(& (hdev->pdev)->dev,(char *)"notify nic client failed %d(%d)\n",(unsigned int)type,ret);
        #line 3212 
        return ret;
      }
    }
    #line 3204 
    i = (u16)((int)i + 1);
  }
  #line 3216 
  return 0;
}

#line 3219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_notify_roce_client(struct hclge_dev *hdev, enum hnae3_reset_notify_type type)
{
  #line 3224 
  u16 i;
  #line 3222 
  struct hnae3_client *client = hdev->roce_client;
  #line 3223 
  int ret = 0;
  #line 3226 
  if (test_bit(5L,& hdev->state)) {
    #line 3226 
    if (client == (struct hnae3_client *)0) 
                                            #line 3227 
                                            return 0;
  }
  else 
       #line 3227 
       return 0;
  #line 3229 
  if ((client->ops)->reset_notify == (int (*)(struct hnae3_handle *, enum hnae3_reset_notify_type ))0) 
    #line 3230 
    return -95;
  #line 3232 
  i = (unsigned short)0U;
  #line 3232 
  while ((int)hdev->num_vmdq_vport >= (int)i) {
    {
      #line 3233 
      struct hnae3_handle *handle = & (hdev->vport + (unsigned long)i)->roce;
      #line 3235 
      ret = (*((client->ops)->reset_notify))(handle,type);
      #line 3236 
      if (ret != 0) {
        #line 3237 
        _dev_err(& (hdev->pdev)->dev,(char *)"notify roce client failed %d(%d)",(unsigned int)type,ret);
        #line 3240 
        return ret;
      }
    }
    #line 3232 
    i = (u16)((int)i + 1);
  }
  #line 3244 
  return ret;
}

#line 3247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_reset_wait(struct hclge_dev *hdev)
{
  #line 3251 
  u32 val;
  #line 3251 
  u32 reg;
  #line 3251 
  u32 reg_bit;
  #line 3252 
  u32 cnt = 0U;
  #line 3254 
  switch ((unsigned int)hdev->reset_type) {
    #line 3255 
    case (unsigned int)7: 
                          #line 3255 
    ;
    #line 3256 
    reg = 133632U;
    #line 3257 
    reg_bit = 2U;
    #line 3258 
    break;
    #line 3259 
    case (unsigned int)6: 
                          #line 3259 
    ;
    #line 3260 
    reg = 133632U;
    #line 3261 
    reg_bit = 0U;
    #line 3262 
    break;
    #line 3263 
    case (unsigned int)5: 
                          #line 3263 
    ;
    #line 3264 
    reg = 134144U;
    #line 3265 
    reg_bit = 0U;
    #line 3266 
    break;
    #line 3267 
    case (unsigned int)4: 
                          #line 3267 
    ;
    #line 3268 
    break;
    #line 3269 
    default: 
             #line 3269 
    ;
    #line 3270 
    _dev_err(& (hdev->pdev)->dev,(char *)"Wait for unsupported reset type: %d\n",(unsigned int)hdev->reset_type);
    #line 3273 
    return -22;
  }
  #line 3276 
  if (hdev->reset_type == (unsigned int)HNAE3_FLR_RESET) {
    #line 3277 
    while (1) {
      #line 3277 
      if (test_bit(1L,& hdev->flr_state)) 
                                          #line 3277 
                                          break;
      else {
        #line 3277 
        u32 tmp_0;
        #line 3277 
        tmp_0 = cnt;
        #line 3277 
        cnt ++;
        #line 3277 
        ;
        #line 3277 
        if (! (tmp_0 <= 199U)) 
                               #line 3277 
                               break;
      }
      #line 3279 
      msleep(100U);
    }
    #line 3281 
    if (! test_bit(1L,& hdev->flr_state)) {
      #line 3282 
      _dev_err(& (hdev->pdev)->dev,(char *)"flr wait timeout: %u\n",cnt);
      #line 3284 
      return -16;
    }
    #line 3287 
    return 0;
  }
  #line 3290 
  val = hclge_read_reg_1((u8 *)hdev->hw.io_base,reg);
  #line 3291 
  while (((unsigned int)(1 << reg_bit) & val) >> reg_bit != 0U && cnt <= 199U) {
    #line 3292 
    msleep(100U);
    #line 3293 
    val = hclge_read_reg_1((u8 *)hdev->hw.io_base,reg);
    #line 3294 
    cnt ++;
  }
  #line 3297 
  if (cnt > 199U) {
    #line 3298 
    _dev_warn(& (hdev->pdev)->dev,(char *)"Wait for reset timeout: %d\n",(unsigned int)hdev->reset_type);
    #line 3300 
    return -16;
  }
  #line 3303 
  return 0;
}

#line 3306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_vf_rst(struct hclge_dev *hdev, int func_id, bool reset)
{
  #line 3308 
  struct hclge_vf_rst_cmd *req;
  #line 3309 
  struct hclge_desc desc;
  #line 3311 
  req = (struct hclge_vf_rst_cmd *)(& desc.data);
  #line 3312 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_GBL_RST_STATUS,(_Bool)0);
  #line 3313 
  req->dest_vfid = (unsigned char)func_id;
  #line 3315 
  if ((int)reset != 0) 
                       #line 3316 
                       req->vf_rst = (unsigned char)1U;
  #line 3318 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 3321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_all_vf_rst(struct hclge_dev *hdev, bool reset)
{
  #line 3323 
  int i;
  #line 3325 
  i = (int)hdev->num_vmdq_vport + 1;
  #line 3325 
  while ((int)hdev->num_alloc_vport > i) {
    {
      #line 3327 
      int ret;
      #line 3326 
      struct hclge_vport *vport = hdev->vport + (unsigned long)i;
      #line 3330 
      ret = hclge_set_vf_rst(hdev,(int)vport->vport_id,(_Bool)((bool)((int)reset) != 0));
      #line 3331 
      if (ret != 0) {
        #line 3332 
        _dev_err(& (hdev->pdev)->dev,(char *)"set vf(%u) rst failed %d!\n",(int)vport->vport_id,ret);
        #line 3335 
        return ret;
      }
      #line 3338 
      if (! reset) 
                   #line 3339 
                   goto __Cont;
      else {
        #line 3338 
        if (! test_bit(0L,& vport->state)) 
                                           #line 3339 
                                           goto __Cont;
      }
      #line 3345 
      ret = hclge_inform_reset_assert_to_vf(vport);
      #line 3346 
      if (ret != 0) 
                    #line 3347 
                    _dev_warn(& (hdev->pdev)->dev,(char *)"inform reset to vf(%u) failed %d!\n",(int)vport->vport_id,ret);
    }
    #line 3325 
    __Cont: 
            #line 3325 
    i ++;
  }
  #line 3352 
  return 0;
}

#line 3355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_func_reset_sync_vf(struct hclge_dev *hdev)
{
  #line 3357 
  struct hclge_pf_rst_sync_cmd *req;
  #line 3358 
  struct hclge_desc desc;
  #line 3360 
  int ret;
  #line 3359 
  int cnt = 0;
  #line 3362 
  req = (struct hclge_pf_rst_sync_cmd *)(& desc.data);
  #line 3363 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_QUERY_VF_RST_RDY,(_Bool)1);
  #line 3365 
  while (1) {
    #line 3382 
    int tmp;
    #line 3366 
    ret = hclge_cmd_send(& hdev->hw,& desc,1);
    #line 3370 
    if (ret == -95) {
      #line 3371 
      msleep(100U);
      #line 3372 
      return 0;
    }
    else 
      #line 3373 
      if (ret != 0) {
        #line 3374 
        _dev_err(& (hdev->pdev)->dev,(char *)"sync with VF fail %d!\n",ret);
        #line 3376 
        return ret;
      }
      else 
        #line 3377 
        if ((unsigned int)req->all_vf_ready != 0U) 
                                                   #line 3378 
                                                   return 0;
    #line 3380 
    msleep(20U);
    #line 3381 
    hclge_cmd_reuse_desc(& desc,(_Bool)1);
    #line 3382 
    tmp = cnt;
    #line 3382 
    cnt ++;
    #line 3382 
    ;
    #line 3382 
    if (! (tmp <= 1499)) 
                         #line 3365 
                         break;
  }
  #line 3384 
  _dev_err(& (hdev->pdev)->dev,(char *)"sync with VF timeout!\n");
  #line 3385 
  return -62;
}

#line 3388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
void hclge_report_hw_error(struct hclge_dev *hdev, enum hnae3_hw_error_type type)
{
  #line 3392 
  u16 i;
  #line 3391 
  struct hnae3_client *client = hdev->nic_client;
  #line 3394 
  if (client == (struct hnae3_client *)0 || (client->ops)->process_hw_error == (void (*)(struct hnae3_handle *, enum hnae3_hw_error_type ))0) 
    #line 3396 
    return;
  else {
    #line 3395 
    if (! test_bit(4L,& hdev->state)) 
                                      #line 3396 
                                      return;
  }
  #line 3398 
  i = (unsigned short)0U;
  #line 3398 
  while ((int)hdev->num_vmdq_vport >= (int)i) {
    #line 3399 
    (*((client->ops)->process_hw_error))(& (hdev->vport + (unsigned long)i)->nic,type);
    #line 3398 
    i = (u16)((int)i + 1);
  }
  #line 3400 
  return;
}

#line 3402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_handle_imp_error(struct hclge_dev *hdev)
{
  #line 3404 
  u32 reg_val;
  #line 3406 
  reg_val = hclge_read_reg_1((u8 *)hdev->hw.io_base,132608U);
  #line 3407 
  if (((unsigned long)reg_val & 32UL) != 0UL) {
    #line 3408 
    hclge_report_hw_error(hdev,(enum hnae3_hw_error_type)HNAE3_IMP_RD_POISON_ERROR);
    #line 3409 
    reg_val &= 4294967263U;
    #line 3410 
    hclge_write_reg(hdev->hw.io_base,132608U,reg_val);
  }
  #line 3413 
  if (((unsigned long)reg_val & 16UL) != 0UL) {
    #line 3414 
    hclge_report_hw_error(hdev,(enum hnae3_hw_error_type)HNAE3_CMDQ_ECC_ERROR);
    #line 3415 
    reg_val &= 4294967279U;
    #line 3416 
    hclge_write_reg(hdev->hw.io_base,132608U,reg_val);
  }
  #line 3418 
  return;
}

#line 3420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_func_reset_cmd(struct hclge_dev *hdev, int func_id)
{
  #line 3422 
  struct hclge_desc desc;
  #line 3424 
  int ret;
  #line 3423 
  struct hclge_reset_cmd *req = (struct hclge_reset_cmd *)(& desc.data);
  #line 3426 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_CFG_RST_TRIGGER,(_Bool)0);
  #line 3427 
  req->mac_func_reset = (unsigned char)((unsigned int)req->mac_func_reset & 127U);
  #line 3427 
  req->mac_func_reset = (unsigned char)((unsigned int)req->mac_func_reset | 128U);
  #line 3428 
  req->fun_reset_vfid = (unsigned char)func_id;
  #line 3430 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 3431 
  if (ret != 0) 
                #line 3432 
                _dev_err(& (hdev->pdev)->dev,(char *)"send function reset cmd fail, status =%d\n",ret);
  #line 3435 
  return ret;
}

#line 3438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_do_reset(struct hclge_dev *hdev)
{
  #line 3442 
  u32 val;
  #line 3440 
  struct hnae3_handle *handle = & (hdev->vport)->nic;
  #line 3441 
  struct pci_dev *pdev = hdev->pdev;
  #line 3444 
  if ((int)hclge_get_hw_reset_stat(handle) != 0) {
    #line 3445 
    _dev_info(& pdev->dev,(char *)"Hardware reset not finish\n");
    #line 3446 
    ;
    #line 3446 
    _dev_info(& pdev->dev,(char *)"func_rst_reg:0x%x, global_rst_reg:0x%x\n",hclge_read_reg_1((u8 *)hdev->hw.io_base,134144U),hclge_read_reg_1((u8 *)hdev->hw.io_base,133632U));
    #line 3449 
    return;
  }
  #line 3452 
  switch ((unsigned int)hdev->reset_type) {
    #line 3453 
    case (unsigned int)6: 
                          #line 3453 
    ;
    #line 3454 
    val = hclge_read_reg_1((u8 *)hdev->hw.io_base,133632U);
    #line 3455 
    val &= 4294967294U;
    #line 3455 
    val |= 1U;
    #line 3456 
    hclge_write_reg(hdev->hw.io_base,133632U,val);
    #line 3457 
    _dev_info(& pdev->dev,(char *)"Global Reset requested\n");
    #line 3458 
    break;
    #line 3459 
    case (unsigned int)5: 
                          #line 3459 
    ;
    #line 3460 
    _dev_info(& pdev->dev,(char *)"PF Reset requested\n");
    #line 3462 
    cif_set_bit_0(5L,& hdev->reset_pending);
    #line 3463 
    hclge_reset_task_schedule(hdev);
    #line 3464 
    break;
    #line 3465 
    case (unsigned int)4: 
                          #line 3465 
    ;
    #line 3466 
    _dev_info(& pdev->dev,(char *)"FLR requested\n");
    #line 3468 
    cif_set_bit_0(4L,& hdev->reset_pending);
    #line 3469 
    hclge_reset_task_schedule(hdev);
    #line 3470 
    break;
    #line 3471 
    default: 
             #line 3471 
    ;
    #line 3472 
    _dev_warn(& pdev->dev,(char *)"Unsupported reset type: %d\n",(unsigned int)hdev->reset_type);
    #line 3474 
    break;
  }
  #line 3476 
  return;
}

#line 3478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static enum hnae3_reset_type hclge_get_reset_level(struct hnae3_ae_dev *ae_dev, unsigned long *addr)
{
  #line 3481 
  enum hnae3_reset_type rst_level = HNAE3_NONE_RESET;
  #line 3482 
  struct hclge_dev *hdev = (struct hclge_dev *)ae_dev->priv;
  #line 3485 
  if ((int)test_bit(8L,addr) != 0) {
    #line 3489 
    hclge_handle_hw_msix_error(hdev,addr);
    #line 3490 
    cif_clear_bit_0(8L,addr);
    #line 3498 
    hclge_enable_vector(& hdev->misc_vector,(_Bool)1);
  }
  #line 3502 
  if ((int)test_bit(7L,addr) != 0) {
    #line 3503 
    rst_level = HNAE3_IMP_RESET;
    #line 3504 
    cif_clear_bit_0(7L,addr);
    #line 3505 
    cif_clear_bit_0(6L,addr);
    #line 3506 
    cif_clear_bit_0(5L,addr);
  }
  else {
    #line 3507 
    if ((int)test_bit(6L,addr) != 0) {
      #line 3508 
      rst_level = HNAE3_GLOBAL_RESET;
      #line 3509 
      cif_clear_bit_0(6L,addr);
      #line 3510 
      cif_clear_bit_0(5L,addr);
    }
    else {
      #line 3511 
      if ((int)test_bit(5L,addr) != 0) {
        #line 3512 
        rst_level = HNAE3_FUNC_RESET;
        #line 3513 
        cif_clear_bit_0(5L,addr);
      }
      else {
        #line 3514 
        if ((int)test_bit(4L,addr) != 0) {
          #line 3515 
          rst_level = HNAE3_FLR_RESET;
          #line 3516 
          cif_clear_bit_0(4L,addr);
        }
      }
    }
  }
  #line 3519 
  if (hdev->reset_type != (unsigned int)HNAE3_NONE_RESET && hdev->reset_type > rst_level) 
    #line 3521 
    return HNAE3_NONE_RESET;
  #line 3523 
  return rst_level;
}

#line 3526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_clear_reset_cause(struct hclge_dev *hdev)
{
  #line 3528 
  u32 clearval = 0U;
  #line 3530 
  switch ((unsigned int)hdev->reset_type) {
    #line 3531 
    case (unsigned int)7: 
                          #line 3531 
    ;
    #line 3532 
    clearval = 128U;
    #line 3533 
    break;
    #line 3534 
    case (unsigned int)6: 
                          #line 3534 
    ;
    #line 3535 
    clearval = 32U;
    #line 3536 
    break;
    #line 3537 
    default: 
             #line 3537 
    ;
    #line 3538 
    break;
  }
  #line 3541 
  if (clearval == 0U) 
                      #line 3542 
                      return;
  #line 3547 
  if ((unsigned int)(hdev->pdev)->revision == 32U) 
                                                   #line 3548 
                                                   hclge_write_reg(hdev->hw.io_base,132864U,clearval);
  #line 3551 
  hclge_enable_vector(& hdev->misc_vector,(_Bool)1);
  #line 3552 
  return;
}

#line 3554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_reset_prepare_down(struct hclge_dev *hdev)
{
  #line 3556 
  int ret = 0;
  #line 3558 
  switch ((unsigned int)hdev->reset_type) {
    #line 3559 
    case (unsigned int)5: 
                          #line 3559 
    ;
    #line 3561 
    case (unsigned int)4: 
                          #line 3561 
    ;
    #line 3562 
    ret = hclge_set_all_vf_rst(hdev,(_Bool)1);
    #line 3563 
    break;
    #line 3564 
    default: 
             #line 3564 
    ;
    #line 3565 
    break;
  }
  #line 3568 
  return ret;
}

#line 3571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_reset_handshake(struct hclge_dev *hdev, bool enable)
{
  #line 3573 
  u32 reg_val;
  #line 3575 
  reg_val = hclge_read_reg_1((u8 *)hdev->hw.io_base,159752U);
  #line 3576 
  if ((int)enable != 0) 
                        #line 3577 
                        reg_val |= 65536U; else 
                                                #line 3579 
                                                reg_val &= 4294901759U;
  #line 3581 
  hclge_write_reg(hdev->hw.io_base,159752U,reg_val);
  #line 3582 
  return;
}

#line 3584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_reset_prepare_wait(struct hclge_dev *hdev)
{
  #line 3586 
  u32 reg_val;
  #line 3587 
  int ret = 0;
  #line 3589 
  switch ((unsigned int)hdev->reset_type) {
    #line 3590 
    case (unsigned int)5: 
                          #line 3590 
    ;
    #line 3594 
    ret = hclge_func_reset_sync_vf(hdev);
    #line 3595 
    if (ret != 0) 
                  #line 3596 
                  return ret;
    #line 3598 
    ret = hclge_func_reset_cmd(hdev,0);
    #line 3599 
    if (ret != 0) {
      #line 3600 
      _dev_err(& (hdev->pdev)->dev,(char *)"asserting function reset fail %d!\n",ret);
      #line 3602 
      return ret;
    }
    #line 3610 
    cif_set_bit_0(13L,& hdev->state);
    #line 3611 
    (hdev->rst_stats.pf_rst_cnt) ++;
    #line 3612 
    break;
    #line 3613 
    case (unsigned int)4: 
                          #line 3613 
    ;
    #line 3617 
    ret = hclge_func_reset_sync_vf(hdev);
    #line 3618 
    if (ret != 0) 
                  #line 3619 
                  return ret;
    #line 3621 
    cif_set_bit_0(13L,& hdev->state);
    #line 3622 
    cif_set_bit_0(0L,& hdev->flr_state);
    #line 3623 
    (hdev->rst_stats.flr_rst_cnt) ++;
    #line 3624 
    break;
    #line 3625 
    case (unsigned int)7: 
                          #line 3625 
    ;
    #line 3626 
    hclge_handle_imp_error(hdev);
    #line 3627 
    reg_val = hclge_read_reg_1((u8 *)hdev->hw.io_base,132608U);
    #line 3628 
    hclge_write_reg(hdev->hw.io_base,132608U,reg_val | 2U);
    #line 3630 
    break;
    #line 3631 
    default: 
             #line 3631 
    ;
    #line 3632 
    break;
  }
  #line 3636 
  msleep(100U);
  #line 3637 
  hclge_reset_handshake(hdev,(_Bool)1);
  #line 3638 
  _dev_info(& (hdev->pdev)->dev,(char *)"prepare wait ok\n");
  #line 3640 
  return ret;
}

#line 3643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static bool hclge_reset_err_handle(struct hclge_dev *hdev)
{
  #line 3647 
  if (hdev->reset_pending != 0UL) {
    #line 3648 
    _dev_info(& (hdev->pdev)->dev,(char *)"Reset pending %lu\n",hdev->reset_pending);
    #line 3650 
    return (_Bool)1;
  }
  else {
    #line 3651 
    if (((unsigned long)hclge_read_reg_1((u8 *)hdev->hw.io_base,133120U) & 224UL) != 0UL) {
      #line 3653 
      _dev_info(& (hdev->pdev)->dev,(char *)"reset failed because new reset interrupt\n");
      #line 3655 
      hclge_clear_reset_cause(hdev);
      #line 3656 
      return (_Bool)0;
    }
    else 
      #line 3657 
      if (hdev->rst_stats.reset_fail_cnt <= 4U) {
        #line 3658 
        (hdev->rst_stats.reset_fail_cnt) ++;
        #line 3659 
        cif_set_bit_0((long)hdev->reset_type,& hdev->reset_pending);
        #line 3660 
        _dev_info(& (hdev->pdev)->dev,(char *)"re-schedule reset task(%u)\n",hdev->rst_stats.reset_fail_cnt);
        #line 3663 
        return (_Bool)1;
      }
  }
  #line 3666 
  hclge_clear_reset_cause(hdev);
  #line 3669 
  hclge_reset_handshake(hdev,(_Bool)1);
  #line 3671 
  _dev_err(& (hdev->pdev)->dev,(char *)"Reset fail!\n");
  #line 3673 
  hclge_dbg_dump_rst_info(hdev);
  #line 3675 
  return (_Bool)0;
}

#line 3678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_rst_done(struct hclge_dev *hdev)
{
  #line 3680 
  struct hclge_pf_rst_done_cmd *req;
  #line 3681 
  struct hclge_desc desc;
  #line 3682 
  int ret;
  #line 3684 
  req = (struct hclge_pf_rst_done_cmd *)(& desc.data);
  #line 3685 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_PF_RST_DONE,(_Bool)0);
  #line 3686 
  req->pf_rst_done = (unsigned char)((unsigned int)req->pf_rst_done | 1U);
  #line 3688 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 3693 
  if (ret == -95) {
    #line 3694 
    _dev_warn(& (hdev->pdev)->dev,(char *)"current firmware does not support command(0x%x)!\n",38);
    #line 3697 
    return 0;
  }
  else 
    #line 3698 
    if (ret != 0) 
                  #line 3699 
                  _dev_err(& (hdev->pdev)->dev,(char *)"assert PF reset done fail %d!\n",ret);
  #line 3703 
  return ret;
}

#line 3706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_reset_prepare_up(struct hclge_dev *hdev)
{
  #line 3708 
  int ret = 0;
  #line 3710 
  switch ((unsigned int)hdev->reset_type) {
    #line 3711 
    case (unsigned int)5: 
                          #line 3711 
    ;
    #line 3713 
    case (unsigned int)4: 
                          #line 3713 
    ;
    #line 3714 
    ret = hclge_set_all_vf_rst(hdev,(_Bool)0);
    #line 3715 
    break;
    #line 3716 
    case (unsigned int)6: 
                          #line 3716 
    ;
    #line 3718 
    case (unsigned int)7: 
                          #line 3718 
    ;
    #line 3719 
    ret = hclge_set_rst_done(hdev);
    #line 3720 
    break;
    #line 3721 
    default: 
             #line 3721 
    ;
    #line 3722 
    break;
  }
  #line 3726 
  hclge_reset_handshake(hdev,(_Bool)0);
  #line 3728 
  return ret;
}

#line 3731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_reset_stack(struct hclge_dev *hdev)
{
  #line 3733 
  int ret;
  #line 3735 
  ret = hclge_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_UNINIT_CLIENT);
  #line 3736 
  if (ret != 0) 
                #line 3737 
                return ret;
  #line 3739 
  ret = hclge_reset_ae_dev(hdev->ae_dev);
  #line 3740 
  if (ret != 0) 
                #line 3741 
                return ret;
  #line 3743 
  ret = hclge_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_INIT_CLIENT);
  #line 3744 
  if (ret != 0) 
                #line 3745 
                return ret;
  #line 3747 
  return hclge_notify_client(hdev,
                          (enum hnae3_reset_notify_type)HNAE3_RESTORE_CLIENT);
}

#line 3750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_reset(struct hclge_dev *hdev)
{
  #line 3753 
  enum hnae3_reset_type reset_level;
  #line 3754 
  int ret;
  #line 3752 
  struct hnae3_ae_dev *ae_dev = pci_get_drvdata(hdev->pdev);
  #line 3759 
  ae_dev->reset_type = hdev->reset_type;
  #line 3760 
  (hdev->rst_stats.reset_cnt) ++;
  #line 3762 
  ret = hclge_notify_roce_client(hdev,(enum hnae3_reset_notify_type)HNAE3_DOWN_CLIENT);
  #line 3763 
  if (ret != 0) 
                #line 3764 
                goto err_reset;
  #line 3766 
  ret = hclge_reset_prepare_down(hdev);
  #line 3767 
  if (ret != 0) 
                #line 3768 
                goto err_reset;
  #line 3770 
  rtnl_lock();
  #line 3771 
  ret = hclge_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_DOWN_CLIENT);
  #line 3772 
  if (ret != 0) 
                #line 3773 
                goto err_reset_lock;
  #line 3775 
  rtnl_unlock();
  #line 3777 
  ret = hclge_reset_prepare_wait(hdev);
  #line 3778 
  if (ret != 0) 
                #line 3779 
                goto err_reset;
  #line 3781 
  if (hclge_reset_wait(hdev) != 0) 
                                   #line 3782 
                                   goto err_reset;
  #line 3784 
  (hdev->rst_stats.hw_reset_done_cnt) ++;
  #line 3786 
  ret = hclge_notify_roce_client(hdev,(enum hnae3_reset_notify_type)HNAE3_UNINIT_CLIENT);
  #line 3787 
  if (ret != 0) 
                #line 3788 
                goto err_reset;
  #line 3790 
  rtnl_lock();
  #line 3792 
  ret = hclge_reset_stack(hdev);
  #line 3793 
  if (ret != 0) 
                #line 3794 
                goto err_reset_lock;
  #line 3796 
  hclge_clear_reset_cause(hdev);
  #line 3798 
  ret = hclge_reset_prepare_up(hdev);
  #line 3799 
  if (ret != 0) 
                #line 3800 
                goto err_reset_lock;
  #line 3802 
  rtnl_unlock();
  #line 3804 
  ret = hclge_notify_roce_client(hdev,(enum hnae3_reset_notify_type)HNAE3_INIT_CLIENT);
  #line 3808 
  if (ret != 0 && hdev->rst_stats.reset_fail_cnt <= 3U) 
                                                        #line 3810 
                                                        goto err_reset;
  #line 3812 
  rtnl_lock();
  #line 3814 
  ret = hclge_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_UP_CLIENT);
  #line 3815 
  if (ret != 0) 
                #line 3816 
                goto err_reset_lock;
  #line 3818 
  rtnl_unlock();
  #line 3820 
  ret = hclge_notify_roce_client(hdev,(enum hnae3_reset_notify_type)HNAE3_UP_CLIENT);
  #line 3821 
  if (ret != 0) 
                #line 3822 
                goto err_reset;
  #line 3824 
  hdev->last_reset_time = jiffies;
  #line 3825 
  hdev->rst_stats.reset_fail_cnt = 0U;
  #line 3826 
  (hdev->rst_stats.reset_done_cnt) ++;
  #line 3827 
  ae_dev->reset_type = HNAE3_NONE_RESET;
  #line 3833 
  reset_level = hclge_get_reset_level(ae_dev,& hdev->default_reset_request);
  #line 3835 
  if (reset_level != (unsigned int)HNAE3_NONE_RESET) 
                                                     #line 3836 
                                                     cif_set_bit_0((long)reset_level,& hdev->reset_request);
  #line 3838 
  return;
  #line 3840 
  err_reset_lock: 
                  #line 3840 
  ;
  #line 3841 
  rtnl_unlock();
  #line 3842 
  err_reset: 
             #line 3842 
  ;
  #line 3843 
  if ((int)hclge_reset_err_handle(hdev) != 0) 
                                              #line 3844 
                                              hclge_reset_task_schedule(hdev);
  #line 3845 
  return;
}

#line 3847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_reset_event(struct pci_dev *pdev, struct hnae3_handle *handle)
{
  #line 3849 
  struct hnae3_ae_dev *ae_dev = pci_get_drvdata(pdev);
  #line 3850 
  struct hclge_dev *hdev = (struct hclge_dev *)ae_dev->priv;
  #line 3867 
  if (handle == (struct hnae3_handle *)0) 
                                          #line 3868 
                                          handle = & (hdev->vport)->nic;
  {
    #line 3870 
    unsigned long __dummy_1;
    #line 3870 
    unsigned long __dummy2_1;
    }
  #line 3870 
  if (1 != 0) {
    {
      #line 3870 
      unsigned long __dummy_2;
      #line 3870 
      unsigned long __dummy2_2;
      }
    #line 3870 
    if (1 != 0) {
      #line 3870 
      if ((long)((jiffies - hdev->last_reset_time) + 18446744073709549116UL) < 0L) {
        #line 3872 
        cif_mod_timer(& hdev->reset_timer,jiffies + 2500UL);
        #line 3873 
        return;
      }
      else 
           #line 3870 
           goto _LAND_0;
    }
    else 
         #line 3870 
         goto _LAND_0;
  }
  else {
    #line 3870 
    _LAND_0: 
             #line 3874 
    ;
    #line 3874 
    if (hdev->default_reset_request != 0UL) 
                                            #line 3875 
                                            hdev->reset_level = hclge_get_reset_level(ae_dev,& hdev->default_reset_request);
    else {
      {
        #line 3878 
        unsigned long __dummy;
        #line 3878 
        unsigned long __dummy2;
        }
      #line 3878 
      if (1 != 0) {
        {
          #line 3878 
          unsigned long __dummy_0;
          #line 3878 
          unsigned long __dummy2_0;
          }
        #line 3878 
        if (1 != 0) 
          #line 3878 
          if ((long)((hdev->last_reset_time - jiffies) + 5000UL) < 0L) 
            #line 3879 
            hdev->reset_level = HNAE3_FUNC_RESET;
      }
    }
  }
  #line 3882 
  _dev_info(& (hdev->pdev)->dev,(char *)"received reset event, reset type is %d\n",(unsigned int)hdev->reset_level);
  #line 3886 
  cif_set_bit_0((long)hdev->reset_level,& hdev->reset_request);
  #line 3887 
  hclge_reset_task_schedule(hdev);
  #line 3889 
  if (hdev->reset_level <= (unsigned int)HNAE3_FUNC_RESET) 
                                                           #line 3890 
                                                           (hdev->reset_level) ++;
  #line 3891 
  return;
}

#line 3893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_set_def_reset_request(struct hnae3_ae_dev *ae_dev, enum hnae3_reset_type rst_type)
{
  #line 3896 
  struct hclge_dev *hdev = (struct hclge_dev *)ae_dev->priv;
  #line 3898 
  cif_set_bit_0((long)rst_type,& hdev->default_reset_request);
  #line 3899 
  return;
}

#line 3901  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_reset_timer(struct timer_list *t)
{
  #line 3903 
  void *__mptr;
  #line 3903 
  __mptr = (void *)t;
  #line 3903 
  struct hclge_dev *hdev = ((struct hclge_dev *)(__mptr + 18446744073709550176U));
  #line 3908 
  if (hdev->default_reset_request == 0UL) 
                                          #line 3909 
                                          return;
  #line 3911 
  _dev_info(& (hdev->pdev)->dev,(char *)"triggering reset in reset timer\n");
  #line 3913 
  hclge_reset_event(hdev->pdev,(struct hnae3_handle *)0);
  #line 3914 
  return;
}

#line 3916  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_reset_subtask(struct hclge_dev *hdev)
{
  #line 3918 
  struct hnae3_ae_dev *ae_dev = pci_get_drvdata(hdev->pdev);
  #line 3929 
  hdev->last_reset_time = jiffies;
  #line 3930 
  hdev->reset_type = hclge_get_reset_level(ae_dev,& hdev->reset_pending);
  #line 3931 
  if (hdev->reset_type != (unsigned int)HNAE3_NONE_RESET) 
                                                          #line 3932 
                                                          hclge_reset(hdev);
  #line 3935 
  hdev->reset_type = hclge_get_reset_level(ae_dev,& hdev->reset_request);
  #line 3936 
  if (hdev->reset_type != (unsigned int)HNAE3_NONE_RESET) 
                                                          #line 3937 
                                                          hclge_do_reset(hdev);
  #line 3939 
  hdev->reset_type = HNAE3_NONE_RESET;
  #line 3940 
  return;
}

#line 3942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_reset_service_task(struct work_struct *work)
{
  #line 3945 
  void *__mptr;
  #line 3945 
  __mptr = (void *)work;
  #line 3944 
  struct hclge_dev *hdev = ((struct hclge_dev *)(__mptr + 18446744073709549904U));
  #line 3947 
  if ((int)test_and_set_bit(9L,& hdev->state) != 0) 
                                                    #line 3948 
                                                    return;
  #line 3950 
  cif_clear_bit_0(8L,& hdev->state);
  #line 3952 
  hclge_reset_subtask(hdev);
  #line 3954 
  cif_clear_bit_0(9L,& hdev->state);
  #line 3955 
  return;
}

#line 3957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_mailbox_service_task(struct work_struct *work)
{
  #line 3960 
  void *__mptr;
  #line 3960 
  __mptr = (void *)work;
  #line 3959 
  struct hclge_dev *hdev = ((struct hclge_dev *)(__mptr + 18446744073709549824U));
  #line 3962 
  if ((int)test_and_set_bit(11L,& hdev->state) != 0) 
                                                     #line 3963 
                                                     return;
  #line 3965 
  cif_clear_bit_0(10L,& hdev->state);
  #line 3967 
  hclge_mbx_handler(hdev);
  #line 3969 
  cif_clear_bit_0(11L,& hdev->state);
  #line 3970 
  return;
}

#line 3972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_update_vport_alive(struct hclge_dev *hdev)
{
  #line 3974 
  int i;
  #line 3977 
  i = 1;
  #line 3977 
  while ((int)hdev->num_alloc_vport > i) {
    {
      #line 3978 
      struct hclge_vport *vport = hdev->vport + (unsigned long)i;
      {
        #line 3980 
        unsigned long __dummy;
        #line 3980 
        unsigned long __dummy2;
        }
      #line 3980 
      if (1 != 0) {
        {
          #line 3980 
          unsigned long __dummy_0;
          #line 3980 
          unsigned long __dummy2_0;
          }
        #line 3980 
        if (1 != 0) 
          #line 3980 
          if ((long)((vport->last_active_jiffies - jiffies) + 2000UL) < 0L) 
            #line 3981 
            cif_clear_bit_0(0L,& vport->state);
      }
      #line 3984 
      if (! test_bit(0L,& vport->state)) 
                                         #line 3985 
                                         vport->mps = 1526U;
    }
    #line 3977 
    i ++;
  }
  #line 3987 
  return;
}

#line 3989  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_service_task(struct work_struct *work)
{
  #line 3992 
  void *__mptr;
  #line 3992 
  __mptr = (void *)work;
  #line 3991 
  struct hclge_dev *hdev = ((struct hclge_dev *)(__mptr + 18446744073709550088U));
  #line 3994 
  cif_clear_bit_0(7L,& hdev->state);
  #line 3996 
  if (hdev->hw_stats.stats_timer > 299U) {
    #line 3997 
    hclge_update_stats_for_all(hdev);
    #line 3998 
    hdev->hw_stats.stats_timer = 0U;
  }
  #line 4001 
  hclge_update_port_info(hdev);
  #line 4002 
  hclge_update_link_status(hdev);
  #line 4003 
  hclge_update_vport_alive(hdev);
  #line 4004 
  hclge_sync_vlan_filter(hdev);
  #line 4006 
  if ((unsigned int)hdev->fd_arfs_expire_timer > 4U) {
    #line 4007 
    hclge_rfs_filter_expire(hdev);
    #line 4008 
    hdev->fd_arfs_expire_timer = (unsigned short)0U;
  }
  #line 4011 
  ;
  #line 4011 
  hclge_task_schedule(hdev,round_jiffies_relative(250UL));
  #line 4012 
  return;
}

#line 4014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
struct hclge_vport *hclge_get_vport(struct hnae3_handle *handle)
{
  #line 4017 
  if (handle->client == (struct hnae3_client *)0) {
    #line 4018 
    void *__mptr;
    #line 4018 
    __mptr = (void *)handle;
    #line 4018 
    return ((struct hclge_vport *)(__mptr + 18446744073709550480U));
  }
  else 
    #line 4019 
    if ((handle->client)->type == (unsigned int)HNAE3_CLIENT_ROCE) {
      #line 4020 
      void *__mptr_0;
      #line 4020 
      __mptr_0 = (void *)handle;
      #line 4020 
      return ((struct hclge_vport *)(__mptr_0 + 18446744073709550304U));
    }
    else {
      #line 4022 
      void *__mptr_1;
      #line 4022 
      __mptr_1 = (void *)handle;
      #line 4022 
      return ((struct hclge_vport *)(__mptr_1 + 18446744073709550480U));
    }
}

#line 4025  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_vector(struct hnae3_handle *handle, u16 vector_num, struct hnae3_vector_info *vector_info)
{
  #line 4034 
  unsigned short __UNIQUE_ID___x454;
  #line 4034 
  int tmp_0;
  #line 4035 
  u16 __UNIQUE_ID___x456;
  #line 4035 
  int tmp_2;
  #line 4032 
  int i;
  #line 4032 
  int j;
  #line 4028 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 4029 
  struct hnae3_vector_info *vector = vector_info;
  #line 4030 
  struct hclge_dev *hdev = vport->back;
  #line 4031 
  int alloc = 0;
  {
    #line 4034 
    __UNIQUE_ID___x454 = (unsigned short)((unsigned int)hdev->num_nic_msi + 65535U);
    #line 4034 
    unsigned short __UNIQUE_ID___y455 = vector_num;
    #line 4034 
    if ((int)__UNIQUE_ID___x454 < (int)__UNIQUE_ID___y455) 
                                                           #line 4034 
                                                           tmp_0 = (int)__UNIQUE_ID___x454; else 
                                                                    #line 4034 
                                                                    tmp_0 = (int)__UNIQUE_ID___y455;
    }
  #line 4034 
  vector_num = (unsigned short)tmp_0;
  {
    #line 4035 
    __UNIQUE_ID___x456 = hdev->num_msi_left;
    #line 4035 
    u16 __UNIQUE_ID___y457 = vector_num;
    #line 4035 
    if ((int)__UNIQUE_ID___x456 < (int)__UNIQUE_ID___y457) 
                                                           #line 4035 
                                                           tmp_2 = (int)__UNIQUE_ID___x456; else 
                                                                    #line 4035 
                                                                    tmp_2 = (int)__UNIQUE_ID___y457;
    }
  #line 4035 
  vector_num = (unsigned short)tmp_2;
  #line 4037 
  j = 0;
  #line 4037 
  while ((int)vector_num > j) {
    #line 4038 
    i = 1;
    #line 4038 
    while ((int)hdev->num_msi > i) {
      #line 4039 
      if ((unsigned int)*(hdev->vector_status + (unsigned long)i) == 65535U) {
        #line 4040 
        vector->vector = pci_irq_vector(hdev->pdev,(unsigned int)i);
        #line 4041 
        vector->io_addr = (u8 *)(hdev->hw.io_base + (((unsigned long)((i + -1) * 4) + (unsigned long)((int)vport->vport_id * 1048576)) + (unsigned long)131072U));
        #line 4046 
        *(hdev->vector_status + (unsigned long)i) = vport->vport_id;
        #line 4047 
        *(hdev->vector_irq + (unsigned long)i) = vector->vector;
        #line 4049 
        vector ++;
        #line 4050 
        alloc ++;
        #line 4052 
        break;
      }
      #line 4038 
      i ++;
    }
    #line 4037 
    j ++;
  }
  #line 4056 
  hdev->num_msi_left = (unsigned short)((int)hdev->num_msi_left - (int)((unsigned short)alloc));
  #line 4057 
  hdev->num_msi_used = (unsigned short)((int)hdev->num_msi_used + (int)((unsigned short)alloc));
  #line 4059 
  return alloc;
}

#line 4062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_vector_index(struct hclge_dev *hdev, int vector)
{
  #line 4064 
  int i;
  #line 4066 
  i = 0;
  #line 4066 
  while ((int)hdev->num_msi > i) {
    #line 4067 
    if (*(hdev->vector_irq + (unsigned long)i) == vector) 
                                                          #line 4068 
                                                          return i;
    #line 4066 
    i ++;
  }
  #line 4070 
  return -22;
}

#line 4073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_put_vector(struct hnae3_handle *handle, int vector)
{
  #line 4077 
  int vector_id;
  #line 4075 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 4076 
  struct hclge_dev *hdev = vport->back;
  #line 4079 
  vector_id = hclge_get_vector_index(hdev,vector);
  #line 4080 
  if (vector_id < 0) {
    #line 4081 
    _dev_err(& (hdev->pdev)->dev,(char *)"Get vector index fail. vector_id =%d\n",vector_id);
    #line 4083 
    return vector_id;
  }
  #line 4086 
  hclge_free_vector(hdev,vector_id);
  #line 4088 
  return 0;
}

#line 4091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u32 hclge_get_rss_key_size(struct hnae3_handle *handle)
{
  #line 4093 
  return 40U;
}

#line 4096  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u32 hclge_get_rss_indir_size(struct hnae3_handle *handle)
{
  #line 4098 
  return 512U;
}

#line 4101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_rss_algo_key(struct hclge_dev *hdev, u8 hfunc, u8 *key)
{
  #line 4104 
  struct hclge_rss_config_cmd *req;
  #line 4106 
  struct hclge_desc desc;
  #line 4107 
  int key_counts;
  #line 4108 
  int key_size;
  #line 4109 
  int ret;
  #line 4105 
  unsigned int key_offset = 0U;
  #line 4111 
  key_counts = 40;
  #line 4112 
  req = (struct hclge_rss_config_cmd *)(& desc.data);
  #line 4114 
  while (key_counts != 0) {
    #line 4121 
    int __UNIQUE_ID___x458;
    #line 4121 
    int tmp;
    #line 4115 
    hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_RSS_GENERIC_CONFIG,(_Bool)0);
    #line 4118 
    req->hash_config = (unsigned char)((unsigned int)req->hash_config | ((unsigned int)hfunc & 15U));
    #line 4119 
    req->hash_config = (unsigned char)((int)req->hash_config | ((int)((unsigned char)key_offset) << 4U));
    {
      #line 4121 
      __UNIQUE_ID___x458 = 16;
      #line 4121 
      int __UNIQUE_ID___y459 = key_counts;
      #line 4121 
      if (__UNIQUE_ID___x458 < __UNIQUE_ID___y459) 
                                                   #line 4121 
                                                   tmp = __UNIQUE_ID___x458; else 
                                                                    #line 4121 
                                                                    tmp = __UNIQUE_ID___y459;
      }
    #line 4121 
    key_size = tmp;
    #line 4122 
    memcpy((void *)(& req->hash_key),(void *)(key + (unsigned long)(key_offset * 16U)),(unsigned long)key_size);
    #line 4125 
    key_counts -= key_size;
    #line 4126 
    key_offset ++;
    #line 4127 
    ret = hclge_cmd_send(& hdev->hw,& desc,1);
    #line 4128 
    if (ret != 0) {
      #line 4129 
      _dev_err(& (hdev->pdev)->dev,(char *)"Configure RSS config fail, status = %d\n",ret);
      #line 4132 
      return ret;
    }
  }
  #line 4135 
  return 0;
}

#line 4138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_rss_indir_table(struct hclge_dev *hdev, u8 *indir)
{
  #line 4140 
  struct hclge_rss_indirection_table_cmd *req;
  #line 4141 
  struct hclge_desc desc;
  #line 4142 
  int i;
  #line 4142 
  int j;
  #line 4143 
  int ret;
  #line 4145 
  req = (struct hclge_rss_indirection_table_cmd *)(& desc.data);
  #line 4147 
  i = 0;
  #line 4147 
  while (i <= 31) {
    #line 4148 
    hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_RSS_INDIR_TABLE,(_Bool)0);
    #line 4151 
    req->start_table_index = (unsigned short)((unsigned int)((unsigned short)i) * 16U);
    #line 4153 
    req->rss_set_bitmap = (unsigned short)65535U;
    #line 4155 
    j = 0;
    #line 4155 
    while (j <= 15) {
      #line 4156 
      req->rss_result[j] = *(indir + (unsigned long)(i * 16 + j));
      #line 4155 
      j ++;
    }
    #line 4159 
    ret = hclge_cmd_send(& hdev->hw,& desc,1);
    #line 4160 
    if (ret != 0) {
      #line 4161 
      _dev_err(& (hdev->pdev)->dev,(char *)"Configure rss indir table fail,status = %d\n",ret);
      #line 4164 
      return ret;
    }
    #line 4147 
    i ++;
  }
  #line 4167 
  return 0;
}

#line 4170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_rss_tc_mode(struct hclge_dev *hdev, u16 *tc_valid, u16 *tc_size, u16 *tc_offset)
{
  #line 4173 
  struct hclge_rss_tc_mode_cmd *req;
  #line 4174 
  struct hclge_desc desc;
  #line 4175 
  int ret;
  #line 4176 
  int i;
  #line 4178 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_RSS_TC_MODE,(_Bool)0);
  #line 4179 
  req = (struct hclge_rss_tc_mode_cmd *)(& desc.data);
  #line 4181 
  i = 0;
  #line 4181 
  while (i <= 7) {
    {
      #line 4182 
      u16 mode = (unsigned short)0U;
      #line 4184 
      mode = (unsigned short)((unsigned int)mode & 32767U);
      #line 4184 
      mode = (unsigned short)(((int)*(tc_valid + (unsigned long)i) << 15) | (int)mode);
      #line 4185 
      mode = (unsigned short)((unsigned int)mode & 36863U);
      #line 4185 
      mode = (unsigned short)(((unsigned int)((int)*(tc_size + (unsigned long)i) << 12U) & 28672U) | (unsigned int)mode);
      #line 4187 
      mode = (unsigned short)((unsigned int)mode & 64512U);
      #line 4187 
      mode = (unsigned short)(((unsigned int)*(tc_offset + (unsigned long)i) & 1023U) | (unsigned int)mode);
      #line 4190 
      req->rss_tc_mode[i] = mode;
    }
    #line 4181 
    i ++;
  }
  #line 4193 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 4194 
  if (ret != 0) 
                #line 4195 
                _dev_err(& (hdev->pdev)->dev,(char *)"Configure rss tc mode fail, status = %d\n",ret);
  #line 4198 
  return ret;
}

#line 4201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_get_rss_type(struct hclge_vport *vport)
{
  #line 4203 
  if ((((((unsigned int)vport->rss_tuple_sets.ipv4_tcp_en != 0U || (unsigned int)vport->rss_tuple_sets.ipv4_udp_en != 0U) || (unsigned int)vport->rss_tuple_sets.ipv4_sctp_en != 0U) || (unsigned int)vport->rss_tuple_sets.ipv6_tcp_en != 0U) || (unsigned int)vport->rss_tuple_sets.ipv6_udp_en != 0U) || (unsigned int)vport->rss_tuple_sets.ipv6_sctp_en != 0U) 
    #line 4209 
    vport->nic.__anonCompField_hnae3_handle_167.kinfo.rss_type = PKT_HASH_TYPE_L4;
  else 
    #line 4210 
    if ((unsigned int)vport->rss_tuple_sets.ipv4_fragment_en != 0U || (unsigned int)vport->rss_tuple_sets.ipv6_fragment_en != 0U) 
      #line 4212 
      vport->nic.__anonCompField_hnae3_handle_167.kinfo.rss_type = PKT_HASH_TYPE_L3; else 
                                                                    #line 4214 
                                                                    vport->nic.__anonCompField_hnae3_handle_167.kinfo.rss_type = PKT_HASH_TYPE_NONE;
  #line 4215 
  return;
}

#line 4217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_rss_input_tuple(struct hclge_dev *hdev)
{
  #line 4219 
  struct hclge_rss_input_tuple_cmd *req;
  #line 4220 
  struct hclge_desc desc;
  #line 4221 
  int ret;
  #line 4223 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_RSS_INPUT_TUPLE,(_Bool)0);
  #line 4225 
  req = (struct hclge_rss_input_tuple_cmd *)(& desc.data);
  #line 4228 
  req->ipv4_tcp_en = (hdev->vport)->rss_tuple_sets.ipv4_tcp_en;
  #line 4229 
  req->ipv4_udp_en = (hdev->vport)->rss_tuple_sets.ipv4_udp_en;
  #line 4230 
  req->ipv4_sctp_en = (hdev->vport)->rss_tuple_sets.ipv4_sctp_en;
  #line 4231 
  req->ipv4_fragment_en = (hdev->vport)->rss_tuple_sets.ipv4_fragment_en;
  #line 4232 
  req->ipv6_tcp_en = (hdev->vport)->rss_tuple_sets.ipv6_tcp_en;
  #line 4233 
  req->ipv6_udp_en = (hdev->vport)->rss_tuple_sets.ipv6_udp_en;
  #line 4234 
  req->ipv6_sctp_en = (hdev->vport)->rss_tuple_sets.ipv6_sctp_en;
  #line 4235 
  req->ipv6_fragment_en = (hdev->vport)->rss_tuple_sets.ipv6_fragment_en;
  #line 4236 
  hclge_get_rss_type(hdev->vport);
  #line 4237 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 4238 
  if (ret != 0) 
                #line 4239 
                _dev_err(& (hdev->pdev)->dev,(char *)"Configure rss input fail, status = %d\n",ret);
  #line 4241 
  return ret;
}

#line 4244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_rss(struct hnae3_handle *handle, u32 *indir, u8 *key, u8 *hfunc)
{
  #line 4248 
  int i;
  #line 4247 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 4251 
  if (hfunc != (u8 *)0U) 
    #line 4252 
    switch (vport->rss_algo) {
      #line 4253 
      case 0: 
              #line 4253 
      ;
      #line 4254 
      *hfunc = (unsigned char)1U;
      #line 4255 
      break;
      #line 4256 
      case 1: 
              #line 4256 
      ;
      #line 4257 
      *hfunc = (unsigned char)2U;
      #line 4258 
      break;
      #line 4259 
      default: 
               #line 4259 
      ;
      #line 4260 
      *hfunc = (unsigned char)0U;
      #line 4261 
      break;
    }
  #line 4266 
  if (key != (u8 *)0U) 
                       #line 4267 
                       memcpy((void *)key,(void *)(& vport->rss_hash_key),40UL);
  #line 4270 
  if (indir != (u32 *)0U) {
    #line 4271 
    i = 0;
    #line 4271 
    while (i <= 511) {
      #line 4272 
      *(indir + (unsigned long)i) = (unsigned int)vport->rss_indirection_tbl[i];
      #line 4271 
      i ++;
    }
  }
  #line 4274 
  return 0;
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_rss(struct hnae3_handle *handle, u32 *indir, u8 *key, u8 hfunc)
{
  #line 4282 
  u8 hash_algo;
  #line 4283 
  int ret;
  #line 4283 
  int i;
  #line 4280 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 4281 
  struct hclge_dev *hdev = vport->back;
  #line 4286 
  if (key != (u8 *)0U) {
    #line 4287 
    switch ((int)hfunc) {
      #line 4288 
      case 1: 
              #line 4288 
      ;
      #line 4289 
      hash_algo = (unsigned char)0U;
      #line 4290 
      break;
      #line 4291 
      case 2: 
              #line 4291 
      ;
      #line 4292 
      hash_algo = (unsigned char)1U;
      #line 4293 
      break;
      #line 4294 
      case 0: 
              #line 4294 
      ;
      #line 4295 
      hash_algo = (unsigned char)vport->rss_algo;
      #line 4296 
      break;
      #line 4297 
      default: 
               #line 4297 
      ;
      #line 4298 
      return -22;
    }
    #line 4301 
    ret = hclge_set_rss_algo_key(hdev,(unsigned char)((int)hash_algo),key);
    #line 4302 
    if (ret != 0) 
                  #line 4303 
                  return ret;
    #line 4306 
    memcpy((void *)(& vport->rss_hash_key),(void *)key,40UL);
    #line 4307 
    vport->rss_algo = (int)hash_algo;
  }
  #line 4311 
  i = 0;
  #line 4311 
  while (i <= 511) {
    #line 4312 
    vport->rss_indirection_tbl[i] = (unsigned char)*(indir + (unsigned long)i);
    #line 4311 
    i ++;
  }
  #line 4315 
  return hclge_set_rss_indir_table(hdev,(u8 *)(& vport->rss_indirection_tbl));
}

#line 4318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u8 hclge_get_rss_hash_bits(struct ethtool_rxnfc *nfc)
{
  #line 4320 
  u8 hash_sets = (unsigned char)((unsigned int)((unsigned char)(nfc->data >> 5)) & 2U);
  #line 4322 
  if ((nfc->data & 128ULL) != 0ULL) 
                                    #line 4323 
                                    hash_sets = (unsigned char)((unsigned int)hash_sets | 1U); else 
                                                                    #line 4325 
                                                                    hash_sets = (unsigned char)((unsigned int)hash_sets & 254U);
  #line 4327 
  if ((nfc->data & 16ULL) != 0ULL) 
                                   #line 4328 
                                   hash_sets = (unsigned char)((unsigned int)hash_sets | 8U); else 
                                                                    #line 4330 
                                                                    hash_sets = (unsigned char)((unsigned int)hash_sets & 247U);
  #line 4332 
  if ((nfc->data & 32ULL) != 0ULL) 
                                   #line 4333 
                                   hash_sets = (unsigned char)((unsigned int)hash_sets | 4U); else 
                                                                    #line 4335 
                                                                    hash_sets = (unsigned char)((unsigned int)hash_sets & 251U);
  #line 4337 
  if (nfc->flow_type == 3U || nfc->flow_type == 7U) 
                                                    #line 4338 
                                                    hash_sets = (unsigned char)((unsigned int)hash_sets | 16U);
  #line 4340 
  return hash_sets;
}

#line 4343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_rss_tuple(struct hnae3_handle *handle, struct ethtool_rxnfc *nfc)
{
  #line 4348 
  struct hclge_rss_input_tuple_cmd *req;
  #line 4349 
  struct hclge_desc desc;
  #line 4350 
  u8 tuple_sets;
  #line 4351 
  int ret;
  #line 4346 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 4347 
  struct hclge_dev *hdev = vport->back;
  #line 4353 
  if ((nfc->data & 18446744073709551375ULL) != 0ULL) 
                                                     #line 4355 
                                                     return -22;
  #line 4357 
  req = (struct hclge_rss_input_tuple_cmd *)(& desc.data);
  #line 4358 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_RSS_INPUT_TUPLE,(_Bool)0);
  #line 4360 
  req->ipv4_tcp_en = vport->rss_tuple_sets.ipv4_tcp_en;
  #line 4361 
  req->ipv4_udp_en = vport->rss_tuple_sets.ipv4_udp_en;
  #line 4362 
  req->ipv4_sctp_en = vport->rss_tuple_sets.ipv4_sctp_en;
  #line 4363 
  req->ipv4_fragment_en = vport->rss_tuple_sets.ipv4_fragment_en;
  #line 4364 
  req->ipv6_tcp_en = vport->rss_tuple_sets.ipv6_tcp_en;
  #line 4365 
  req->ipv6_udp_en = vport->rss_tuple_sets.ipv6_udp_en;
  #line 4366 
  req->ipv6_sctp_en = vport->rss_tuple_sets.ipv6_sctp_en;
  #line 4367 
  req->ipv6_fragment_en = vport->rss_tuple_sets.ipv6_fragment_en;
  #line 4369 
  tuple_sets = hclge_get_rss_hash_bits(nfc);
  #line 4370 
  switch (nfc->flow_type) {
    #line 4371 
    case (__u32)1: 
                   #line 4371 
    ;
    #line 4372 
    req->ipv4_tcp_en = tuple_sets;
    #line 4373 
    break;
    #line 4374 
    case (__u32)5: 
                   #line 4374 
    ;
    #line 4375 
    req->ipv6_tcp_en = tuple_sets;
    #line 4376 
    break;
    #line 4377 
    case (__u32)2: 
                   #line 4377 
    ;
    #line 4378 
    req->ipv4_udp_en = tuple_sets;
    #line 4379 
    break;
    #line 4380 
    case (__u32)6: 
                   #line 4380 
    ;
    #line 4381 
    req->ipv6_udp_en = tuple_sets;
    #line 4382 
    break;
    #line 4383 
    case (__u32)3: 
                   #line 4383 
    ;
    #line 4384 
    req->ipv4_sctp_en = tuple_sets;
    #line 4385 
    break;
    #line 4386 
    case (__u32)7: 
                   #line 4386 
    ;
    #line 4387 
    if ((nfc->data & 64ULL) != 0ULL || (nfc->data & 128ULL) != 0ULL) 
      #line 4389 
      return -22;
    #line 4391 
    req->ipv6_sctp_en = tuple_sets;
    #line 4392 
    break;
    #line 4393 
    case (__u32)16: 
                    #line 4393 
    ;
    #line 4394 
    req->ipv4_fragment_en = (unsigned char)15U;
    #line 4395 
    break;
    #line 4396 
    case (__u32)17: 
                    #line 4396 
    ;
    #line 4397 
    req->ipv6_fragment_en = (unsigned char)15U;
    #line 4398 
    break;
    #line 4399 
    default: 
             #line 4399 
    ;
    #line 4400 
    return -22;
  }
  #line 4403 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 4404 
  if (ret != 0) {
    #line 4405 
    _dev_err(& (hdev->pdev)->dev,(char *)"Set rss tuple fail, status = %d\n",ret);
    #line 4407 
    return ret;
  }
  #line 4410 
  vport->rss_tuple_sets.ipv4_tcp_en = req->ipv4_tcp_en;
  #line 4411 
  vport->rss_tuple_sets.ipv4_udp_en = req->ipv4_udp_en;
  #line 4412 
  vport->rss_tuple_sets.ipv4_sctp_en = req->ipv4_sctp_en;
  #line 4413 
  vport->rss_tuple_sets.ipv4_fragment_en = req->ipv4_fragment_en;
  #line 4414 
  vport->rss_tuple_sets.ipv6_tcp_en = req->ipv6_tcp_en;
  #line 4415 
  vport->rss_tuple_sets.ipv6_udp_en = req->ipv6_udp_en;
  #line 4416 
  vport->rss_tuple_sets.ipv6_sctp_en = req->ipv6_sctp_en;
  #line 4417 
  vport->rss_tuple_sets.ipv6_fragment_en = req->ipv6_fragment_en;
  #line 4418 
  hclge_get_rss_type(vport);
  #line 4419 
  return 0;
}

#line 4422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_rss_tuple(struct hnae3_handle *handle, struct ethtool_rxnfc *nfc)
{
  #line 4426 
  u8 tuple_sets;
  #line 4425 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 4428 
  nfc->data = 0ULL;
  #line 4430 
  switch (nfc->flow_type) {
    #line 4431 
    case (__u32)1: 
                   #line 4431 
    ;
    #line 4432 
    tuple_sets = vport->rss_tuple_sets.ipv4_tcp_en;
    #line 4433 
    break;
    #line 4434 
    case (__u32)2: 
                   #line 4434 
    ;
    #line 4435 
    tuple_sets = vport->rss_tuple_sets.ipv4_udp_en;
    #line 4436 
    break;
    #line 4437 
    case (__u32)5: 
                   #line 4437 
    ;
    #line 4438 
    tuple_sets = vport->rss_tuple_sets.ipv6_tcp_en;
    #line 4439 
    break;
    #line 4440 
    case (__u32)6: 
                   #line 4440 
    ;
    #line 4441 
    tuple_sets = vport->rss_tuple_sets.ipv6_udp_en;
    #line 4442 
    break;
    #line 4443 
    case (__u32)3: 
                   #line 4443 
    ;
    #line 4444 
    tuple_sets = vport->rss_tuple_sets.ipv4_sctp_en;
    #line 4445 
    break;
    #line 4446 
    case (__u32)7: 
                   #line 4446 
    ;
    #line 4447 
    tuple_sets = vport->rss_tuple_sets.ipv6_sctp_en;
    #line 4448 
    break;
    #line 4449 
    case (__u32)16: 
                    #line 4449 
    ;
    #line 4450 
    case (__u32)17: 
                    #line 4450 
    ;
    #line 4451 
    tuple_sets = (unsigned char)12U;
    #line 4452 
    break;
    #line 4453 
    default: 
             #line 4453 
    ;
    #line 4454 
    return -22;
  }
  #line 4457 
  if ((unsigned int)tuple_sets == 0U) 
                                      #line 4458 
                                      return 0;
  #line 4460 
  if (((unsigned long)tuple_sets & 1UL) != 0UL) 
                                                #line 4461 
                                                nfc->data |= 128ULL;
  #line 4462 
  if (((unsigned long)tuple_sets & 2UL) != 0UL) 
                                                #line 4463 
                                                nfc->data |= 64ULL;
  #line 4464 
  if (((unsigned long)tuple_sets & 4UL) != 0UL) 
                                                #line 4465 
                                                nfc->data |= 32ULL;
  #line 4466 
  if (((unsigned long)tuple_sets & 8UL) != 0UL) 
                                                #line 4467 
                                                nfc->data |= 16ULL;
  #line 4469 
  return 0;
}

#line 4472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_tc_size(struct hnae3_handle *handle)
{
  #line 4474 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 4475 
  struct hclge_dev *hdev = vport->back;
  #line 4477 
  return (int)hdev->rss_size_max;
}

#line 4480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_rss_init_hw(struct hclge_dev *hdev)
{
  #line 4489 
  u16 tc_valid[8U];
  #line 4490 
  u16 roundup_size;
  #line 4491 
  unsigned int i;
  #line 4492 
  int ret;
  #line 4482 
  struct hclge_vport *vport = hdev->vport;
  #line 4483 
  u8 *rss_indir = (u8 *)(& vport->rss_indirection_tbl);
  #line 4484 
  u16 rss_size = vport->alloc_rss_size;
  #line 4485 
  u16 tc_offset[8U] = {(unsigned short)0U};
  #line 4486 
  u16 tc_size[8U] = {(unsigned short)0U};
  #line 4487 
  u8 *key = (u8 *)(& vport->rss_hash_key);
  #line 4488 
  u8 hfunc = (unsigned char)vport->rss_algo;
  #line 4494 
  ret = hclge_set_rss_indir_table(hdev,rss_indir);
  #line 4495 
  if (ret != 0) 
                #line 4496 
                return ret;
  #line 4498 
  ret = hclge_set_rss_algo_key(hdev,(unsigned char)((int)hfunc),key);
  #line 4499 
  if (ret != 0) 
                #line 4500 
                return ret;
  #line 4502 
  ret = hclge_set_rss_input_tuple(hdev);
  #line 4503 
  if (ret != 0) 
                #line 4504 
                return ret;
  #line 4510 
  if ((unsigned int)rss_size + 65535U > 127U) {
    #line 4511 
    _dev_err(& (hdev->pdev)->dev,(char *)"Configure rss tc size failed, invalid TC_SIZE = %u\n",(int)rss_size);
    #line 4514 
    return -22;
  }
  #line 4517 
  if (0 != 0) {
    #line 4517 
    unsigned int tmp_48;
    #line 4517 
    unsigned int tmp_16;
    #line 4517 
    unsigned int tmp_17;
    #line 4517 
    unsigned int tmp_49;
    #line 4517 
    unsigned int tmp_50;
    #line 4517 
    unsigned int tmp_18;
    #line 4517 
    unsigned int tmp_19;
    #line 4517 
    unsigned int tmp_51;
    #line 4517 
    unsigned int tmp_52;
    #line 4517 
    unsigned int tmp_20;
    #line 4517 
    unsigned int tmp_21;
    #line 4517 
    unsigned int tmp_53;
    #line 4517 
    unsigned int tmp_54;
    #line 4517 
    unsigned int tmp_22;
    #line 4517 
    unsigned int tmp_23;
    #line 4517 
    unsigned int tmp_55;
    #line 4517 
    unsigned int tmp_56;
    #line 4517 
    unsigned int tmp_24;
    #line 4517 
    unsigned int tmp_25;
    #line 4517 
    unsigned int tmp_57;
    #line 4517 
    unsigned int tmp_58;
    #line 4517 
    unsigned int tmp_26;
    #line 4517 
    unsigned int tmp_27;
    #line 4517 
    unsigned int tmp_59;
    #line 4517 
    unsigned int tmp_60;
    #line 4517 
    unsigned int tmp_28;
    #line 4517 
    unsigned int tmp_29;
    #line 4517 
    unsigned int tmp_61;
    #line 4517 
    unsigned int tmp_30;
    #line 4517 
    unsigned int tmp_63;
    #line 4517 
    unsigned int tmp;
    #line 4517 
    unsigned int tmp_31;
    #line 4517 
    unsigned int tmp_32;
    #line 4517 
    unsigned int tmp_0;
    #line 4517 
    unsigned int tmp_1;
    #line 4517 
    unsigned int tmp_33;
    #line 4517 
    unsigned int tmp_34;
    #line 4517 
    unsigned int tmp_2;
    #line 4517 
    unsigned int tmp_3;
    #line 4517 
    unsigned int tmp_35;
    #line 4517 
    unsigned int tmp_36;
    #line 4517 
    unsigned int tmp_4;
    #line 4517 
    unsigned int tmp_5;
    #line 4517 
    unsigned int tmp_37;
    #line 4517 
    unsigned int tmp_38;
    #line 4517 
    unsigned int tmp_6;
    #line 4517 
    unsigned int tmp_7;
    #line 4517 
    unsigned int tmp_39;
    #line 4517 
    unsigned int tmp_40;
    #line 4517 
    unsigned int tmp_8;
    #line 4517 
    unsigned int tmp_9;
    #line 4517 
    unsigned int tmp_41;
    #line 4517 
    unsigned int tmp_42;
    #line 4517 
    unsigned int tmp_10;
    #line 4517 
    unsigned int tmp_11;
    #line 4517 
    unsigned int tmp_43;
    #line 4517 
    unsigned int tmp_44;
    #line 4517 
    unsigned int tmp_12;
    #line 4517 
    unsigned int tmp_13;
    #line 4517 
    unsigned int tmp_45;
    #line 4517 
    unsigned int tmp_46;
    #line 4517 
    unsigned int tmp_14;
    #line 4517 
    unsigned int tmp_15;
    #line 4517 
    unsigned int tmp_47;
    #line 4517 
    unsigned int tmp_64;
    #line 4517 
    if ((unsigned int)rss_size != 1U) {
      #line 4517 
      if (0 != 0) {
        #line 4517 
        if ((unsigned int)rss_size > 2U) {
          #line 4517 
          if (((unsigned long long)((int)rss_size + -1) & 9223372036854775808ULL) == 0ULL) {
            #line 4517 
            if (((unsigned long long)((int)rss_size + -1) & 4611686018427387904ULL) == 0ULL) {
              #line 4517 
              if (((unsigned long long)((int)rss_size + -1) & 2305843009213693952ULL) == 0ULL) {
                #line 4517 
                if (((unsigned long long)((int)rss_size + -1) & 1152921504606846976ULL) == 0ULL) {
                  #line 4517 
                  if (((unsigned long long)((int)rss_size + -1) & 576460752303423488ULL) == 0ULL) {
                    #line 4517 
                    if (((unsigned long long)((int)rss_size + -1) & 288230376151711744ULL) == 0ULL) {
                      #line 4517 
                      if (((unsigned long long)((int)rss_size + -1) & 144115188075855872ULL) == 0ULL) {
                        #line 4517 
                        if (((unsigned long long)((int)rss_size + -1) & 72057594037927936ULL) == 0ULL) {
                          #line 4517 
                          if (((unsigned long long)((int)rss_size + -1) & 36028797018963968ULL) == 0ULL) {
                            #line 4517 
                            if (((unsigned long long)((int)rss_size + -1) & 18014398509481984ULL) == 0ULL) {
                              #line 4517 
                              if (((unsigned long long)((int)rss_size + -1) & 9007199254740992ULL) == 0ULL) {
                                #line 4517 
                                if (((unsigned long long)((int)rss_size + -1) & 4503599627370496ULL) == 0ULL) {
                                  #line 4517 
                                  if (((unsigned long long)((int)rss_size + -1) & 2251799813685248ULL) == 0ULL) {
                                    #line 4517 
                                    if (((unsigned long long)((int)rss_size + -1) & 1125899906842624ULL) == 0ULL) {
                                      #line 4517 
                                      if (((unsigned long long)((int)rss_size + -1) & 562949953421312ULL) == 0ULL) {
                                        #line 4517 
                                        if (((unsigned long long)((int)rss_size + -1) & 281474976710656ULL) == 0ULL) {
                                          #line 4517 
                                          if (((unsigned long long)((int)rss_size + -1) & 140737488355328ULL) == 0ULL) {
                                            #line 4517 
                                            if (((unsigned long long)((int)rss_size + -1) & 70368744177664ULL) == 0ULL) {
                                              #line 4517 
                                              if (((unsigned long long)((int)rss_size + -1) & 35184372088832ULL) == 0ULL) {
                                                #line 4517 
                                                if (((unsigned long long)((int)rss_size + -1) & 17592186044416ULL) == 0ULL) {
                                                  #line 4517 
                                                  if (((unsigned long long)((int)rss_size + -1) & 8796093022208ULL) == 0ULL) {
                                                    #line 4517 
                                                    if (((unsigned long long)((int)rss_size + -1) & 4398046511104ULL) == 0ULL) {
                                                      #line 4517 
                                                      if (((unsigned long long)((int)rss_size + -1) & 2199023255552ULL) == 0ULL) {
                                                        #line 4517 
                                                        if (((unsigned long long)((int)rss_size + -1) & 1099511627776ULL) == 0ULL) {
                                                          #line 4517 
                                                          if (((unsigned long long)((int)rss_size + -1) & 549755813888ULL) == 0ULL) {
                                                            #line 4517 
                                                            if (((unsigned long long)((int)rss_size + -1) & 274877906944ULL) == 0ULL) {
                                                              #line 4517 
                                                              if (((unsigned long long)((int)rss_size + -1) & 137438953472ULL) == 0ULL) {
                                                                #line 4517 
                                                                if (((unsigned long long)((int)rss_size + -1) & 68719476736ULL) == 0ULL) {
                                                                  #line 4517 
                                                                  if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 34359738368ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 17179869184ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 8589934592ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 4294967296ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 2147483648ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 1073741824ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 536870912ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 268435456ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 134217728ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 67108864ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 33554432ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 16777216ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 8388608ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 4194304ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 2097152ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 1048576ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 524288ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 262144ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 131072ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 65536ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 32768ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 16384ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 8192ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 4096ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 2048ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 1024ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 512ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 256ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 128ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 64ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 32ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 16ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 8ULL) == 0ULL) {
                                                                    #line 4517 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 4ULL) != 0ULL) 
                                                                    #line 4517 
                                                                    tmp = 8U; else 
                                                                    #line 4517 
                                                                    tmp = 4U;
                                                                    #line 4517 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_0 = 16U;
                                                                    #line 4517 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_1 = 32U;
                                                                    #line 4517 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_2 = 64U;
                                                                    #line 4517 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_3 = 128U;
                                                                    #line 4517 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_4 = 256U;
                                                                    #line 4517 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_5 = 512U;
                                                                    #line 4517 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_6 = 1024U;
                                                                    #line 4517 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_7 = 2048U;
                                                                    #line 4517 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_8 = 4096U;
                                                                    #line 4517 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_9 = 8192U;
                                                                    #line 4517 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_10 = 16384U;
                                                                    #line 4517 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_11 = 32768U;
                                                                    #line 4517 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_12 = 0U;
                                                                    #line 4517 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_13 = 0U;
                                                                    #line 4517 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_14 = 0U;
                                                                    #line 4517 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_15 = 0U;
                                                                    #line 4517 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_16 = 0U;
                                                                    #line 4517 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_17 = 0U;
                                                                    #line 4517 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_18 = 0U;
                                                                    #line 4517 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_19 = 0U;
                                                                    #line 4517 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_20 = 0U;
                                                                    #line 4517 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_21 = 0U;
                                                                    #line 4517 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_22 = 0U;
                                                                    #line 4517 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_23 = 0U;
                                                                    #line 4517 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_24 = 0U;
                                                                    #line 4517 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_25 = 0U;
                                                                    #line 4517 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_26 = 0U;
                                                                    #line 4517 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_27 = 0U;
                                                                    #line 4517 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_28 = 0U;
                                                                    #line 4517 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_29 = 0U;
                                                                    #line 4517 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_30 = 0U;
                                                                    #line 4517 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 4517 
                                                                    tmp_31 = 0U;
                                                                    #line 4517 
                                                                    tmp_32 = tmp_31;
                                                                  }
                                                                  else 
                                                                    #line 4517 
                                                                    tmp_32 = 0U;
                                                                  #line 4517 
                                                                  tmp_33 = tmp_32;
                                                                }
                                                                else 
                                                                  #line 4517 
                                                                  tmp_33 = 0U;
                                                                #line 4517 
                                                                tmp_34 = tmp_33;
                                                              }
                                                              else 
                                                                   #line 4517 
                                                                   tmp_34 = 0U;
                                                              #line 4517 
                                                              tmp_35 = tmp_34;
                                                            }
                                                            else 
                                                                 #line 4517 
                                                                 tmp_35 = 0U;
                                                            #line 4517 
                                                            tmp_36 = tmp_35;
                                                          }
                                                          else 
                                                               #line 4517 
                                                               tmp_36 = 0U;
                                                          #line 4517 
                                                          tmp_37 = tmp_36;
                                                        }
                                                        else 
                                                             #line 4517 
                                                             tmp_37 = 0U;
                                                        #line 4517 
                                                        tmp_38 = tmp_37;
                                                      }
                                                      else 
                                                           #line 4517 
                                                           tmp_38 = 0U;
                                                      #line 4517 
                                                      tmp_39 = tmp_38;
                                                    }
                                                    else 
                                                         #line 4517 
                                                         tmp_39 = 0U;
                                                    #line 4517 
                                                    tmp_40 = tmp_39;
                                                  }
                                                  else 
                                                       #line 4517 
                                                       tmp_40 = 0U;
                                                  #line 4517 
                                                  tmp_41 = tmp_40;
                                                }
                                                else 
                                                     #line 4517 
                                                     tmp_41 = 0U;
                                                #line 4517 
                                                tmp_42 = tmp_41;
                                              }
                                              else 
                                                   #line 4517 
                                                   tmp_42 = 0U;
                                              #line 4517 
                                              tmp_43 = tmp_42;
                                            }
                                            else 
                                                 #line 4517 
                                                 tmp_43 = 0U;
                                            #line 4517 
                                            tmp_44 = tmp_43;
                                          }
                                          else 
                                               #line 4517 
                                               tmp_44 = 0U;
                                          #line 4517 
                                          tmp_45 = tmp_44;
                                        }
                                        else 
                                             #line 4517 
                                             tmp_45 = 0U;
                                        #line 4517 
                                        tmp_46 = tmp_45;
                                      }
                                      else 
                                           #line 4517 
                                           tmp_46 = 0U;
                                      #line 4517 
                                      tmp_47 = tmp_46;
                                    }
                                    else 
                                         #line 4517 
                                         tmp_47 = 0U;
                                    #line 4517 
                                    tmp_48 = tmp_47;
                                  }
                                  else 
                                       #line 4517 
                                       tmp_48 = 0U;
                                  #line 4517 
                                  tmp_49 = tmp_48;
                                }
                                else 
                                     #line 4517 
                                     tmp_49 = 0U;
                                #line 4517 
                                tmp_50 = tmp_49;
                              }
                              else 
                                   #line 4517 
                                   tmp_50 = 0U;
                              #line 4517 
                              tmp_51 = tmp_50;
                            }
                            else 
                                 #line 4517 
                                 tmp_51 = 0U;
                            #line 4517 
                            tmp_52 = tmp_51;
                          }
                          else 
                               #line 4517 
                               tmp_52 = 0U;
                          #line 4517 
                          tmp_53 = tmp_52;
                        }
                        else 
                             #line 4517 
                             tmp_53 = 0U;
                        #line 4517 
                        tmp_54 = tmp_53;
                      }
                      else 
                           #line 4517 
                           tmp_54 = 0U;
                      #line 4517 
                      tmp_55 = tmp_54;
                    }
                    else 
                         #line 4517 
                         tmp_55 = 0U;
                    #line 4517 
                    tmp_56 = tmp_55;
                  }
                  else 
                       #line 4517 
                       tmp_56 = 0U;
                  #line 4517 
                  tmp_57 = tmp_56;
                }
                else 
                     #line 4517 
                     tmp_57 = 0U;
                #line 4517 
                tmp_58 = tmp_57;
              }
              else 
                   #line 4517 
                   tmp_58 = 0U;
              #line 4517 
              tmp_59 = tmp_58;
            }
            else 
                 #line 4517 
                 tmp_59 = 0U;
            #line 4517 
            tmp_60 = tmp_59;
          }
          else 
               #line 4517 
               tmp_60 = 0U;
          #line 4517 
          tmp_61 = tmp_60;
        }
        else 
             #line 4517 
             tmp_61 = 2U;
        #line 4517 
        tmp_63 = tmp_61;
      }
      else {
        #line 4517 
        tmp_63 = (unsigned int)((unsigned short)(1UL << (__ilog2_u32((unsigned int)((int)rss_size + -1)) + 1)));
      }
      #line 4517 
      tmp_64 = tmp_63;
    }
    else 
         #line 4517 
         tmp_64 = 1U;
    #line 4517 
    roundup_size = (unsigned short)tmp_64;
  }
  else {
    #line 4517 
    roundup_size = (unsigned short)__roundup_pow_of_two((unsigned long)rss_size);
  }
  #line 4518 
  if (0 != 0) {
    #line 4518 
    unsigned int tmp_80;
    #line 4518 
    unsigned int tmp_112;
    #line 4518 
    unsigned int tmp_113;
    #line 4518 
    unsigned int tmp_81;
    #line 4518 
    unsigned int tmp_82;
    #line 4518 
    unsigned int tmp_114;
    #line 4518 
    unsigned int tmp_115;
    #line 4518 
    unsigned int tmp_83;
    #line 4518 
    unsigned int tmp_84;
    #line 4518 
    unsigned int tmp_116;
    #line 4518 
    unsigned int tmp_117;
    #line 4518 
    unsigned int tmp_85;
    #line 4518 
    unsigned int tmp_86;
    #line 4518 
    unsigned int tmp_118;
    #line 4518 
    unsigned int tmp_119;
    #line 4518 
    unsigned int tmp_87;
    #line 4518 
    unsigned int tmp_88;
    #line 4518 
    unsigned int tmp_120;
    #line 4518 
    unsigned int tmp_121;
    #line 4518 
    unsigned int tmp_89;
    #line 4518 
    unsigned int tmp_90;
    #line 4518 
    unsigned int tmp_122;
    #line 4518 
    unsigned int tmp_123;
    #line 4518 
    unsigned int tmp_91;
    #line 4518 
    unsigned int tmp_92;
    #line 4518 
    unsigned int tmp_124;
    #line 4518 
    unsigned int tmp_125;
    #line 4518 
    unsigned int tmp_93;
    #line 4518 
    unsigned int tmp_94;
    #line 4518 
    unsigned int tmp_126;
    #line 4518 
    unsigned int tmp_127;
    #line 4518 
    unsigned int tmp_95;
    #line 4518 
    unsigned int tmp_96;
    #line 4518 
    unsigned int tmp_97;
    #line 4518 
    unsigned int tmp_66;
    #line 4518 
    unsigned int tmp_98;
    #line 4518 
    unsigned int tmp_99;
    #line 4518 
    unsigned int tmp_67;
    #line 4518 
    unsigned int tmp_68;
    #line 4518 
    unsigned int tmp_100;
    #line 4518 
    unsigned int tmp_101;
    #line 4518 
    unsigned int tmp_69;
    #line 4518 
    unsigned int tmp_70;
    #line 4518 
    unsigned int tmp_102;
    #line 4518 
    unsigned int tmp_103;
    #line 4518 
    unsigned int tmp_71;
    #line 4518 
    unsigned int tmp_72;
    #line 4518 
    unsigned int tmp_104;
    #line 4518 
    unsigned int tmp_105;
    #line 4518 
    unsigned int tmp_73;
    #line 4518 
    unsigned int tmp_74;
    #line 4518 
    unsigned int tmp_106;
    #line 4518 
    unsigned int tmp_107;
    #line 4518 
    unsigned int tmp_75;
    #line 4518 
    unsigned int tmp_76;
    #line 4518 
    unsigned int tmp_108;
    #line 4518 
    unsigned int tmp_109;
    #line 4518 
    unsigned int tmp_77;
    #line 4518 
    unsigned int tmp_78;
    #line 4518 
    unsigned int tmp_110;
    #line 4518 
    unsigned int tmp_111;
    #line 4518 
    unsigned int tmp_79;
    #line 4518 
    unsigned int tmp_128;
    #line 4518 
    if ((unsigned int)roundup_size > 1U) {
      #line 4518 
      if (((unsigned long long)roundup_size & 9223372036854775808ULL) == 0ULL) {
        #line 4518 
        if (((unsigned long long)roundup_size & 4611686018427387904ULL) == 0ULL) {
          #line 4518 
          if (((unsigned long long)roundup_size & 2305843009213693952ULL) == 0ULL) {
            #line 4518 
            if (((unsigned long long)roundup_size & 1152921504606846976ULL) == 0ULL) {
              #line 4518 
              if (((unsigned long long)roundup_size & 576460752303423488ULL) == 0ULL) {
                #line 4518 
                if (((unsigned long long)roundup_size & 288230376151711744ULL) == 0ULL) {
                  #line 4518 
                  if (((unsigned long long)roundup_size & 144115188075855872ULL) == 0ULL) {
                    #line 4518 
                    if (((unsigned long long)roundup_size & 72057594037927936ULL) == 0ULL) {
                      #line 4518 
                      if (((unsigned long long)roundup_size & 36028797018963968ULL) == 0ULL) {
                        #line 4518 
                        if (((unsigned long long)roundup_size & 18014398509481984ULL) == 0ULL) {
                          #line 4518 
                          if (((unsigned long long)roundup_size & 9007199254740992ULL) == 0ULL) {
                            #line 4518 
                            if (((unsigned long long)roundup_size & 4503599627370496ULL) == 0ULL) {
                              #line 4518 
                              if (((unsigned long long)roundup_size & 2251799813685248ULL) == 0ULL) {
                                #line 4518 
                                if (((unsigned long long)roundup_size & 1125899906842624ULL) == 0ULL) {
                                  #line 4518 
                                  if (((unsigned long long)roundup_size & 562949953421312ULL) == 0ULL) {
                                    #line 4518 
                                    if (((unsigned long long)roundup_size & 281474976710656ULL) == 0ULL) {
                                      #line 4518 
                                      if (((unsigned long long)roundup_size & 140737488355328ULL) == 0ULL) {
                                        #line 4518 
                                        if (((unsigned long long)roundup_size & 70368744177664ULL) == 0ULL) {
                                          #line 4518 
                                          if (((unsigned long long)roundup_size & 35184372088832ULL) == 0ULL) {
                                            #line 4518 
                                            if (((unsigned long long)roundup_size & 17592186044416ULL) == 0ULL) {
                                              #line 4518 
                                              if (((unsigned long long)roundup_size & 8796093022208ULL) == 0ULL) {
                                                #line 4518 
                                                if (((unsigned long long)roundup_size & 4398046511104ULL) == 0ULL) {
                                                  #line 4518 
                                                  if (((unsigned long long)roundup_size & 2199023255552ULL) == 0ULL) {
                                                    #line 4518 
                                                    if (((unsigned long long)roundup_size & 1099511627776ULL) == 0ULL) {
                                                      #line 4518 
                                                      if (((unsigned long long)roundup_size & 549755813888ULL) == 0ULL) {
                                                        #line 4518 
                                                        if (((unsigned long long)roundup_size & 274877906944ULL) == 0ULL) {
                                                          #line 4518 
                                                          if (((unsigned long long)roundup_size & 137438953472ULL) == 0ULL) {
                                                            #line 4518 
                                                            if (((unsigned long long)roundup_size & 68719476736ULL) == 0ULL) {
                                                              #line 4518 
                                                              if (((unsigned long long)roundup_size & 34359738368ULL) == 0ULL) {
                                                                #line 4518 
                                                                if (((unsigned long long)roundup_size & 17179869184ULL) == 0ULL) {
                                                                  #line 4518 
                                                                  if (
                                                                    ((unsigned long long)roundup_size & 8589934592ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 4294967296ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 2147483648ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 1073741824ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 536870912ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 268435456ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 134217728ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 67108864ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 33554432ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 16777216ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 8388608ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 4194304ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 2097152ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 1048576ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 524288ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 262144ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 131072ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 65536ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 32768ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 16384ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 8192ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 4096ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 2048ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 1024ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 512ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 256ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 128ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 64ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 32ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 16ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 8ULL) == 0ULL) {
                                                                    #line 4518 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 4ULL) != 0ULL) 
                                                                    #line 4518 
                                                                    tmp_66 = 2U; else 
                                                                    #line 4518 
                                                                    tmp_66 = 1U;
                                                                    #line 4518 
                                                                    tmp_67 = tmp_66;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_67 = 3U;
                                                                    #line 4518 
                                                                    tmp_68 = tmp_67;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_68 = 4U;
                                                                    #line 4518 
                                                                    tmp_69 = tmp_68;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_69 = 5U;
                                                                    #line 4518 
                                                                    tmp_70 = tmp_69;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_70 = 6U;
                                                                    #line 4518 
                                                                    tmp_71 = tmp_70;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_71 = 7U;
                                                                    #line 4518 
                                                                    tmp_72 = tmp_71;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_72 = 8U;
                                                                    #line 4518 
                                                                    tmp_73 = tmp_72;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_73 = 9U;
                                                                    #line 4518 
                                                                    tmp_74 = tmp_73;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_74 = 10U;
                                                                    #line 4518 
                                                                    tmp_75 = tmp_74;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_75 = 11U;
                                                                    #line 4518 
                                                                    tmp_76 = tmp_75;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_76 = 12U;
                                                                    #line 4518 
                                                                    tmp_77 = tmp_76;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_77 = 13U;
                                                                    #line 4518 
                                                                    tmp_78 = tmp_77;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_78 = 14U;
                                                                    #line 4518 
                                                                    tmp_79 = tmp_78;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_79 = 15U;
                                                                    #line 4518 
                                                                    tmp_80 = tmp_79;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_80 = 16U;
                                                                    #line 4518 
                                                                    tmp_81 = tmp_80;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_81 = 17U;
                                                                    #line 4518 
                                                                    tmp_82 = tmp_81;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_82 = 18U;
                                                                    #line 4518 
                                                                    tmp_83 = tmp_82;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_83 = 19U;
                                                                    #line 4518 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_84 = 20U;
                                                                    #line 4518 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_85 = 21U;
                                                                    #line 4518 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_86 = 22U;
                                                                    #line 4518 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_87 = 23U;
                                                                    #line 4518 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_88 = 24U;
                                                                    #line 4518 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_89 = 25U;
                                                                    #line 4518 
                                                                    tmp_90 = tmp_89;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_90 = 26U;
                                                                    #line 4518 
                                                                    tmp_91 = tmp_90;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_91 = 27U;
                                                                    #line 4518 
                                                                    tmp_92 = tmp_91;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_92 = 28U;
                                                                    #line 4518 
                                                                    tmp_93 = tmp_92;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_93 = 29U;
                                                                    #line 4518 
                                                                    tmp_94 = tmp_93;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_94 = 30U;
                                                                    #line 4518 
                                                                    tmp_95 = tmp_94;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_95 = 31U;
                                                                    #line 4518 
                                                                    tmp_96 = tmp_95;
                                                                    }
                                                                    else 
                                                                    #line 4518 
                                                                    tmp_96 = 32U;
                                                                    #line 4518 
                                                                    tmp_97 = tmp_96;
                                                                  }
                                                                  else 
                                                                    #line 4518 
                                                                    tmp_97 = 33U;
                                                                  #line 4518 
                                                                  tmp_98 = tmp_97;
                                                                }
                                                                else 
                                                                  #line 4518 
                                                                  tmp_98 = 34U;
                                                                #line 4518 
                                                                tmp_99 = tmp_98;
                                                              }
                                                              else 
                                                                   #line 4518 
                                                                   tmp_99 = 35U;
                                                              #line 4518 
                                                              tmp_100 = tmp_99;
                                                            }
                                                            else 
                                                                 #line 4518 
                                                                 tmp_100 = 36U;
                                                            #line 4518 
                                                            tmp_101 = tmp_100;
                                                          }
                                                          else 
                                                               #line 4518 
                                                               tmp_101 = 37U;
                                                          #line 4518 
                                                          tmp_102 = tmp_101;
                                                        }
                                                        else 
                                                             #line 4518 
                                                             tmp_102 = 38U;
                                                        #line 4518 
                                                        tmp_103 = tmp_102;
                                                      }
                                                      else 
                                                           #line 4518 
                                                           tmp_103 = 39U;
                                                      #line 4518 
                                                      tmp_104 = tmp_103;
                                                    }
                                                    else 
                                                         #line 4518 
                                                         tmp_104 = 40U;
                                                    #line 4518 
                                                    tmp_105 = tmp_104;
                                                  }
                                                  else 
                                                       #line 4518 
                                                       tmp_105 = 41U;
                                                  #line 4518 
                                                  tmp_106 = tmp_105;
                                                }
                                                else 
                                                     #line 4518 
                                                     tmp_106 = 42U;
                                                #line 4518 
                                                tmp_107 = tmp_106;
                                              }
                                              else 
                                                   #line 4518 
                                                   tmp_107 = 43U;
                                              #line 4518 
                                              tmp_108 = tmp_107;
                                            }
                                            else 
                                                 #line 4518 
                                                 tmp_108 = 44U;
                                            #line 4518 
                                            tmp_109 = tmp_108;
                                          }
                                          else 
                                               #line 4518 
                                               tmp_109 = 45U;
                                          #line 4518 
                                          tmp_110 = tmp_109;
                                        }
                                        else 
                                             #line 4518 
                                             tmp_110 = 46U;
                                        #line 4518 
                                        tmp_111 = tmp_110;
                                      }
                                      else 
                                           #line 4518 
                                           tmp_111 = 47U;
                                      #line 4518 
                                      tmp_112 = tmp_111;
                                    }
                                    else 
                                         #line 4518 
                                         tmp_112 = 48U;
                                    #line 4518 
                                    tmp_113 = tmp_112;
                                  }
                                  else 
                                       #line 4518 
                                       tmp_113 = 49U;
                                  #line 4518 
                                  tmp_114 = tmp_113;
                                }
                                else 
                                     #line 4518 
                                     tmp_114 = 50U;
                                #line 4518 
                                tmp_115 = tmp_114;
                              }
                              else 
                                   #line 4518 
                                   tmp_115 = 51U;
                              #line 4518 
                              tmp_116 = tmp_115;
                            }
                            else 
                                 #line 4518 
                                 tmp_116 = 52U;
                            #line 4518 
                            tmp_117 = tmp_116;
                          }
                          else 
                               #line 4518 
                               tmp_117 = 53U;
                          #line 4518 
                          tmp_118 = tmp_117;
                        }
                        else 
                             #line 4518 
                             tmp_118 = 54U;
                        #line 4518 
                        tmp_119 = tmp_118;
                      }
                      else 
                           #line 4518 
                           tmp_119 = 55U;
                      #line 4518 
                      tmp_120 = tmp_119;
                    }
                    else 
                         #line 4518 
                         tmp_120 = 56U;
                    #line 4518 
                    tmp_121 = tmp_120;
                  }
                  else 
                       #line 4518 
                       tmp_121 = 57U;
                  #line 4518 
                  tmp_122 = tmp_121;
                }
                else 
                     #line 4518 
                     tmp_122 = 58U;
                #line 4518 
                tmp_123 = tmp_122;
              }
              else 
                   #line 4518 
                   tmp_123 = 59U;
              #line 4518 
              tmp_124 = tmp_123;
            }
            else 
                 #line 4518 
                 tmp_124 = 60U;
            #line 4518 
            tmp_125 = tmp_124;
          }
          else 
               #line 4518 
               tmp_125 = 61U;
          #line 4518 
          tmp_126 = tmp_125;
        }
        else 
             #line 4518 
             tmp_126 = 62U;
        #line 4518 
        tmp_127 = tmp_126;
      }
      else 
           #line 4518 
           tmp_127 = 63U;
      #line 4518 
      tmp_128 = tmp_127;
    }
    else 
         #line 4518 
         tmp_128 = 0U;
    #line 4518 
    roundup_size = (unsigned short)tmp_128;
  }
  else {
    #line 4518 
    roundup_size = (unsigned short)__ilog2_u32((unsigned int)roundup_size);
  }
  #line 4520 
  i = 0U;
  #line 4520 
  while (i <= 7U) {
    #line 4521 
    tc_valid[i] = (unsigned short)0U;
    #line 4523 
    if ((((unsigned long)hdev->hw_tc_map >> i) & 1UL) == 0UL) 
                                                              #line 4524 
                                                              goto __Cont;
    #line 4526 
    tc_valid[i] = (unsigned short)1U;
    #line 4527 
    tc_size[i] = roundup_size;
    #line 4528 
    tc_offset[i] = (unsigned short)((int)((unsigned short)i) * (int)rss_size);
    #line 4520 
    __Cont: 
            #line 4520 
    i ++;
  }
  #line 4531 
  return hclge_set_rss_tc_mode(hdev,(u16 *)(& tc_valid),(u16 *)(& tc_size),
                                (u16 *)(& tc_offset));
}

#line 4534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
void hclge_rss_indir_init_cfg(struct hclge_dev *hdev)
{
  #line 4537 
  int i;
  #line 4537 
  int j;
  #line 4536 
  struct hclge_vport *vport = hdev->vport;
  #line 4539 
  j = 0;
  #line 4539 
  while ((int)hdev->num_vmdq_vport >= j) {
    #line 4540 
    i = 0;
    #line 4540 
    while (i <= 511) {
      #line 4541 
      (vport + (unsigned long)j)->rss_indirection_tbl[i] = (unsigned char)(i % (int)(vport + (unsigned long)j)->alloc_rss_size);
      #line 4540 
      i ++;
    }
    #line 4539 
    j ++;
  }
  #line 4544 
  return;
}

#line 4546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_rss_init_cfg(struct hclge_dev *hdev)
{
  #line 4548 
  int i;
  #line 4548 
  int rss_algo = 0;
  #line 4549 
  struct hclge_vport *vport = hdev->vport;
  #line 4551 
  if ((unsigned int)(hdev->pdev)->revision > 32U) 
                                                  #line 4552 
                                                  rss_algo = 1;
  #line 4554 
  i = 0;
  #line 4554 
  while ((int)hdev->num_vmdq_vport >= i) {
    #line 4555 
    (vport + (unsigned long)i)->rss_tuple_sets.ipv4_tcp_en = (unsigned char)15U;
    #line 4557 
    (vport + (unsigned long)i)->rss_tuple_sets.ipv4_udp_en = (unsigned char)15U;
    #line 4559 
    (vport + (unsigned long)i)->rss_tuple_sets.ipv4_sctp_en = (unsigned char)31U;
    #line 4561 
    (vport + (unsigned long)i)->rss_tuple_sets.ipv4_fragment_en = (unsigned char)15U;
    #line 4563 
    (vport + (unsigned long)i)->rss_tuple_sets.ipv6_tcp_en = (unsigned char)15U;
    #line 4565 
    (vport + (unsigned long)i)->rss_tuple_sets.ipv6_udp_en = (unsigned char)15U;
    #line 4567 
    (vport + (unsigned long)i)->rss_tuple_sets.ipv6_sctp_en = (unsigned char)31U;
    #line 4569 
    (vport + (unsigned long)i)->rss_tuple_sets.ipv6_fragment_en = (unsigned char)15U;
    #line 4572 
    (vport + (unsigned long)i)->rss_algo = rss_algo;
    #line 4574 
    memcpy((void *)(& (vport + (unsigned long)i)->rss_hash_key),(void *)(& hclge_hash_key),40UL);
    #line 4554 
    i ++;
  }
  #line 4578 
  hclge_rss_indir_init_cfg(hdev);
  #line 4579 
  return;
}

#line 4581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_bind_ring_with_vector(struct hclge_vport *vport, int vector_id, bool en, struct hnae3_ring_chain_node *ring_chain)
{
  #line 4586 
  struct hnae3_ring_chain_node *node;
  #line 4587 
  struct hclge_desc desc;
  #line 4590 
  enum hclge_cmd_status status;
  #line 4591 
  enum hclge_opcode_type op;
  #line 4592 
  u16 tqp_type_and_id;
  #line 4593 
  int i;
  #line 4585 
  struct hclge_dev *hdev = vport->back;
  #line 4588 
  struct hclge_ctrl_vector_chain_cmd *req = (struct hclge_ctrl_vector_chain_cmd *)(& desc.data);
  #line 4595 
  if ((int)en != 0) 
                    #line 4595 
                    op = HCLGE_OPC_ADD_RING_TO_VECTOR; else 
                                                            #line 4595 
                                                            op = HCLGE_OPC_DEL_RING_TO_VECTOR;
  #line 4596 
  hclge_cmd_setup_basic_desc(& desc,op,(_Bool)0);
  #line 4597 
  req->int_vector_id = (unsigned char)vector_id;
  #line 4599 
  i = 0;
  #line 4600 
  node = ring_chain;
  #line 4600 
  while (node != (struct hnae3_ring_chain_node *)0) {
    #line 4601 
    tqp_type_and_id = req->tqp_type_and_id[i];
    #line 4602 
    tqp_type_and_id = (unsigned short)((unsigned int)tqp_type_and_id & 65532U);
    #line 4602 
    tqp_type_and_id = (unsigned short)(((unsigned int)((unsigned short)node->flag) & 1U) | (unsigned int)tqp_type_and_id);
    #line 4605 
    tqp_type_and_id = (unsigned short)((unsigned int)tqp_type_and_id & 57347U);
    #line 4605 
    tqp_type_and_id = (unsigned short)(((unsigned int)((int)((unsigned short)node->tqp_index) << 2U) & 8188U) | (unsigned int)tqp_type_and_id);
    #line 4607 
    tqp_type_and_id = (unsigned short)((unsigned int)tqp_type_and_id & 40959U);
    #line 4607 
    tqp_type_and_id = (unsigned short)(((unsigned int)((int)((unsigned short)node->int_gl_idx) << 13U) & 24576U) | (unsigned int)tqp_type_and_id);
    #line 4612 
    req->tqp_type_and_id[i] = tqp_type_and_id;
    #line 4613 
    i ++;
    #line 4613 
    if (i > 9) {
      #line 4614 
      req->int_cause_num = (unsigned char)10U;
      #line 4615 
      req->vfid = (unsigned char)vport->vport_id;
      #line 4617 
      status = (enum hclge_cmd_status)hclge_cmd_send(& hdev->hw,& desc,1);
      #line 4618 
      if (status != HCLGE_STATUS_SUCCESS) {
        #line 4619 
        _dev_err(& (hdev->pdev)->dev,(char *)"Map TQP fail, status is %d.\n",(int)status);
        #line 4622 
        return -5;
      }
      #line 4624 
      i = 0;
      #line 4626 
      hclge_cmd_setup_basic_desc(& desc,op,(_Bool)0);
      #line 4629 
      req->int_vector_id = (unsigned char)vector_id;
    }
    #line 4600 
    node = node->next;
  }
  #line 4633 
  if (i > 0) {
    #line 4634 
    req->int_cause_num = (unsigned char)i;
    #line 4635 
    req->vfid = (unsigned char)vport->vport_id;
    #line 4636 
    status = (enum hclge_cmd_status)hclge_cmd_send(& hdev->hw,& desc,1);
    #line 4637 
    if (status != HCLGE_STATUS_SUCCESS) {
      #line 4638 
      _dev_err(& (hdev->pdev)->dev,(char *)"Map TQP fail, status is %d.\n",(int)status);
      #line 4640 
      return -5;
    }
  }
  #line 4644 
  return 0;
}

#line 4647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_map_ring_to_vector(struct hnae3_handle *handle, int vector, struct hnae3_ring_chain_node *ring_chain)
{
  #line 4652 
  int vector_id;
  #line 4650 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 4651 
  struct hclge_dev *hdev = vport->back;
  #line 4654 
  vector_id = hclge_get_vector_index(hdev,vector);
  #line 4655 
  if (vector_id < 0) {
    #line 4656 
    _dev_err(& (hdev->pdev)->dev,(char *)"Get vector index fail. vector_id =%d\n",vector_id);
    #line 4658 
    return vector_id;
  }
  #line 4661 
  return hclge_bind_ring_with_vector(vport,vector_id,(_Bool)1,ring_chain);
}

#line 4664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_unmap_ring_frm_vector(struct hnae3_handle *handle, int vector, struct hnae3_ring_chain_node *ring_chain)
{
  #line 4669 
  int vector_id;
  #line 4669 
  int ret;
  #line 4667 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 4668 
  struct hclge_dev *hdev = vport->back;
  #line 4671 
  if ((int)test_bit(9L,& hdev->state) != 0) 
                                            #line 4672 
                                            return 0;
  #line 4674 
  vector_id = hclge_get_vector_index(hdev,vector);
  #line 4675 
  if (vector_id < 0) {
    #line 4676 
    _dev_err(& (handle->pdev)->dev,(char *)"Get vector index fail. ret =%d\n",vector_id);
    #line 4678 
    return vector_id;
  }
  #line 4681 
  ret = hclge_bind_ring_with_vector(vport,vector_id,(_Bool)0,ring_chain);
  #line 4682 
  if (ret != 0) 
                #line 4683 
                _dev_err(& (handle->pdev)->dev,(char *)"Unmap ring from vector fail. vectorid=%d, ret =%d\n",vector_id,ret);
  #line 4687 
  return ret;
}

#line 4690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_cmd_set_promisc_mode(struct hclge_dev *hdev, struct hclge_promisc_param *param)
{
  #line 4693 
  struct hclge_promisc_cfg_cmd *req;
  #line 4694 
  struct hclge_desc desc;
  #line 4695 
  int ret;
  #line 4697 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_CFG_PROMISC_MODE,(_Bool)0);
  #line 4699 
  req = (struct hclge_promisc_cfg_cmd *)(& desc.data);
  #line 4700 
  req->vf_id = param->vf_id;
  #line 4707 
  req->flag = (unsigned char)(((int)param->enable << 1) | 48);
  #line 4710 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 4711 
  if (ret != 0) 
                #line 4712 
                _dev_err(& (hdev->pdev)->dev,(char *)"Set promisc mode fail, status is %d.\n",ret);
  #line 4715 
  return ret;
}

#line 4718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_promisc_param_init(struct hclge_promisc_param *param, bool en_uc, bool en_mc, bool en_bc, int vport_id)
{
  #line 4722 
  if (param == (struct hclge_promisc_param *)0) 
                                                #line 4723 
                                                return;
  #line 4725 
  memset((void *)param,0,2UL);
  #line 4726 
  if ((int)en_uc != 0) 
                       #line 4727 
                       param->enable = (unsigned char)1U;
  #line 4728 
  if ((int)en_mc != 0) 
                       #line 4729 
                       param->enable = (unsigned char)((unsigned int)param->enable | 2U);
  #line 4730 
  if ((int)en_bc != 0) 
                       #line 4731 
                       param->enable = (unsigned char)((unsigned int)param->enable | 4U);
  #line 4732 
  param->vf_id = (unsigned char)vport_id;
  #line 4733 
  return;
}

#line 4735  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_set_vport_promisc_mode(struct hclge_vport *vport, bool en_uc_pmc, bool en_mc_pmc, bool en_bc_pmc)
{
  #line 4739 
  struct hclge_promisc_param param;
  #line 4738 
  struct hclge_dev *hdev = vport->back;
  #line 4741 
  hclge_promisc_param_init(& param,(_Bool)((bool)((int)en_uc_pmc) != 0),(_Bool)((bool)((int)en_mc_pmc) != 0),(_Bool)((bool)((int)en_bc_pmc) != 0),(int)vport->vport_id);
  #line 4743 
  return hclge_cmd_set_promisc_mode(hdev,& param);
}

#line 4746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_promisc_mode(struct hnae3_handle *handle, bool en_uc_pmc, bool en_mc_pmc)
{
  #line 4749 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 4750 
  bool en_bc_pmc = (_Bool)1;
  #line 4756 
  if ((unsigned int)(handle->pdev)->revision == 32U) 
                                                     #line 4757 
                                                     en_bc_pmc = (_Bool)(((int)((unsigned long)handle->netdev_flags >> 2) & 1) != 0);
  #line 4759 
  return hclge_set_vport_promisc_mode(vport,
                                     (_Bool)((bool)((int)en_uc_pmc) != 0),
                                     (_Bool)((bool)((int)en_mc_pmc) != 0),
                                     (_Bool)((bool)((int)en_bc_pmc) != 0));
}

#line 4763  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_fd_mode(struct hclge_dev *hdev, u8 *fd_mode)
{
  #line 4765 
  struct hclge_get_fd_mode_cmd *req;
  #line 4766 
  struct hclge_desc desc;
  #line 4767 
  int ret;
  #line 4769 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_FD_MODE_CTRL,(_Bool)1);
  #line 4771 
  req = (struct hclge_get_fd_mode_cmd *)(& desc.data);
  #line 4773 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 4774 
  if (ret != 0) {
    #line 4775 
    _dev_err(& (hdev->pdev)->dev,(char *)"get fd mode fail, ret=%d\n",ret);
    #line 4776 
    return ret;
  }
  #line 4779 
  *fd_mode = req->mode;
  #line 4781 
  return ret;
}

#line 4784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_fd_allocation(struct hclge_dev *hdev, u32 *stage1_entry_num, u32 *stage2_entry_num, u16 *stage1_counter_num, u16 *stage2_counter_num)
{
  #line 4790 
  struct hclge_get_fd_allocation_cmd *req;
  #line 4791 
  struct hclge_desc desc;
  #line 4792 
  int ret;
  #line 4794 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_FD_GET_ALLOCATION,(_Bool)1);
  #line 4796 
  req = (struct hclge_get_fd_allocation_cmd *)(& desc.data);
  #line 4798 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 4799 
  if (ret != 0) {
    #line 4800 
    _dev_err(& (hdev->pdev)->dev,(char *)"query fd allocation fail, ret=%d\n",ret);
    #line 4802 
    return ret;
  }
  #line 4805 
  *stage1_entry_num = req->stage1_entry_num;
  #line 4806 
  *stage2_entry_num = req->stage2_entry_num;
  #line 4807 
  *stage1_counter_num = req->stage1_counter_num;
  #line 4808 
  *stage2_counter_num = req->stage2_counter_num;
  #line 4810 
  return ret;
}

#line 4813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_fd_key_config(struct hclge_dev *hdev, int stage_num)
{
  #line 4815 
  struct hclge_set_fd_key_config_cmd *req;
  #line 4816 
  struct hclge_fd_key_cfg *stage;
  #line 4817 
  struct hclge_desc desc;
  #line 4818 
  int ret;
  #line 4820 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_FD_KEY_CONFIG,(_Bool)0);
  #line 4822 
  req = (struct hclge_set_fd_key_config_cmd *)(& desc.data);
  #line 4823 
  stage = & hdev->fd_cfg.key_cfg[stage_num];
  #line 4824 
  req->stage = (unsigned char)stage_num;
  #line 4825 
  req->key_select = stage->key_sel;
  #line 4826 
  req->inner_sipv6_word_en = stage->inner_sipv6_word_en;
  #line 4827 
  req->inner_dipv6_word_en = stage->inner_dipv6_word_en;
  #line 4828 
  req->outer_sipv6_word_en = stage->outer_sipv6_word_en;
  #line 4829 
  req->outer_dipv6_word_en = stage->outer_dipv6_word_en;
  #line 4830 
  req->tuple_mask = ~ stage->tuple_active;
  #line 4831 
  req->meta_data_mask = ~ stage->meta_data_active;
  #line 4833 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 4834 
  if (ret != 0) 
                #line 4835 
                _dev_err(& (hdev->pdev)->dev,(char *)"set fd key fail, ret=%d\n",ret);
  #line 4837 
  return ret;
}

#line 4840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_init_fd_config(struct hclge_dev *hdev)
{
  #line 4843 
  struct hclge_fd_key_cfg *key_cfg;
  #line 4844 
  int ret;
  #line 4846 
  if (((hdev->ae_dev)->flag & 64U) == 0U) 
                                          #line 4847 
                                          return 0;
  #line 4849 
  ret = hclge_get_fd_mode(hdev,& hdev->fd_cfg.fd_mode);
  #line 4850 
  if (ret != 0) 
                #line 4851 
                return ret;
  #line 4853 
  switch ((int)hdev->fd_cfg.fd_mode) {
    #line 4854 
    case 0: 
            #line 4854 
    ;
    #line 4855 
    hdev->fd_cfg.max_key_length = (unsigned short)400U;
    #line 4856 
    break;
    #line 4857 
    case 2: 
            #line 4857 
    ;
    #line 4858 
    hdev->fd_cfg.max_key_length = (unsigned short)200U;
    #line 4859 
    break;
    #line 4860 
    default: 
             #line 4860 
    ;
    #line 4861 
    _dev_err(& (hdev->pdev)->dev,(char *)"Unsupported flow director mode %u\n",(int)hdev->fd_cfg.fd_mode);
    #line 4864 
    return -95;
  }
  #line 4867 
  hdev->fd_cfg.proto_support = 15U;
  #line 4870 
  key_cfg = & hdev->fd_cfg.key_cfg[0];
  #line 4871 
  key_cfg->key_sel = (unsigned char)1U;
  #line 4871 
  key_cfg->inner_sipv6_word_en = (unsigned char)3U;
  #line 4873 
  key_cfg->inner_dipv6_word_en = (unsigned char)3U;
  #line 4874 
  key_cfg->outer_sipv6_word_en = (unsigned char)0U;
  #line 4875 
  key_cfg->outer_dipv6_word_en = (unsigned char)0U;
  #line 4877 
  key_cfg->tuple_active = 466878464U;
  #line 4883 
  if ((unsigned int)hdev->fd_cfg.max_key_length == 400U) {
    #line 4884 
    hdev->fd_cfg.proto_support |= 18U;
    #line 4885 
    key_cfg->tuple_active |= 196608U;
  }
  #line 4892 
  key_cfg->meta_data_active = 68U;
  #line 4894 
  ret = hclge_get_fd_allocation(hdev,& hdev->fd_cfg.rule_num[0],& hdev->fd_cfg.rule_num[1],& hdev->fd_cfg.cnt_num[0],& hdev->fd_cfg.cnt_num[1]);
  #line 4899 
  if (ret != 0) 
                #line 4900 
                return ret;
  #line 4902 
  return hclge_set_fd_key_config(hdev,0);
}

#line 4905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_fd_tcam_config(struct hclge_dev *hdev, u8 stage, bool sel_x, int loc, u8 *key, bool is_add)
{
  #line 4908 
  struct hclge_fd_tcam_config_1_cmd *req1;
  #line 4909 
  struct hclge_fd_tcam_config_2_cmd *req2;
  #line 4910 
  struct hclge_fd_tcam_config_3_cmd *req3;
  #line 4911 
  struct hclge_desc desc[3U];
  #line 4912 
  int ret;
  #line 4914 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_OPC_FD_TCAM_OP,(_Bool)0);
  #line 4915 
  desc[0].flag = (unsigned short)((unsigned int)desc[0].flag | 4U);
  #line 4916 
  hclge_cmd_setup_basic_desc(& desc[1],(enum hclge_opcode_type)HCLGE_OPC_FD_TCAM_OP,(_Bool)0);
  #line 4917 
  desc[1].flag = (unsigned short)((unsigned int)desc[1].flag | 4U);
  #line 4918 
  hclge_cmd_setup_basic_desc(& desc[2],(enum hclge_opcode_type)HCLGE_OPC_FD_TCAM_OP,(_Bool)0);
  #line 4920 
  req1 = (struct hclge_fd_tcam_config_1_cmd *)(& desc[0].data);
  #line 4921 
  req2 = (struct hclge_fd_tcam_config_2_cmd *)(& desc[1].data);
  #line 4922 
  req3 = (struct hclge_fd_tcam_config_3_cmd *)(& desc[2].data);
  #line 4924 
  req1->stage = stage;
  #line 4925 
  req1->xy_sel = (unsigned char)((int)sel_x != 0);
  #line 4926 
  req1->port_info = (unsigned char)((unsigned int)req1->port_info & 254U);
  #line 4926 
  req1->port_info = req1->port_info;
  #line 4927 
  req1->index = (unsigned int)loc;
  #line 4928 
  if ((int)sel_x != 0) 
                       #line 4928 
                       req1->entry_vld = (unsigned char)is_add; else 
                                                                  #line 4928 
                                                                  req1->entry_vld = (unsigned char)0U;
  #line 4930 
  if (key != (u8 *)0U) {
    #line 4931 
    memcpy((void *)(& req1->tcam_data),(void *)key,8UL);
    #line 4932 
    memcpy((void *)(& req2->tcam_data),(void *)(key + 8UL),24UL);
    #line 4934 
    memcpy((void *)(& req3->tcam_data),(void *)(key + 32UL),20UL);
  }
  #line 4938 
  ret = hclge_cmd_send(& hdev->hw,(struct hclge_desc *)(& desc),3);
  #line 4939 
  if (ret != 0) 
                #line 4940 
                _dev_err(& (hdev->pdev)->dev,(char *)"config tcam key fail, ret=%d\n",ret);
  #line 4944 
  return ret;
}

#line 4947  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_fd_ad_config(struct hclge_dev *hdev, u8 stage, int loc, struct hclge_fd_ad_data *action)
{
  #line 4950 
  struct hclge_fd_ad_config_cmd *req;
  #line 4951 
  struct hclge_desc desc;
  #line 4953 
  int ret;
  #line 4952 
  u64 ad_data = 0ULL;
  #line 4955 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_FD_AD_OP,(_Bool)0);
  #line 4957 
  req = (struct hclge_fd_ad_config_cmd *)(& desc.data);
  #line 4958 
  req->index = (unsigned int)loc;
  #line 4959 
  req->stage = stage;
  #line 4961 
  ad_data &= 18446744073709551614ULL;
  #line 4961 
  ad_data = ((unsigned long long)action->write_rule_id_to_bd & 1ULL) | ad_data;
  #line 4963 
  ad_data &= 18446744073709535233ULL;
  #line 4963 
  ad_data = ((unsigned long long)((int)action->rule_id << 1) & 16382ULL) | ad_data;
  #line 4965 
  ad_data <<= 32;
  #line 4966 
  ad_data &= 18446744073709551614ULL;
  #line 4966 
  ad_data = ((unsigned long long)action->drop_packet & 1ULL) | ad_data;
  #line 4967 
  ad_data &= 18446744073709551613ULL;
  #line 4967 
  ad_data = ((unsigned long long)((int)action->forward_to_direct_queue << 1) & 2ULL) | ad_data;
  #line 4969 
  ad_data &= 18446744073709543427ULL;
  #line 4969 
  ad_data = ((unsigned long long)((int)action->queue_id << 2) & 8188ULL) | ad_data;
  #line 4971 
  ad_data &= 18446744073709547519ULL;
  #line 4971 
  ad_data = ((unsigned long long)((int)action->use_counter << 12) & 4096ULL) | ad_data;
  #line 4972 
  ad_data &= 18446744073707462655ULL;
  #line 4972 
  ad_data = ((unsigned long long)((int)action->counter_id << 13) & 2088960ULL) | ad_data;
  #line 4974 
  ad_data &= 18446744073708503039ULL;
  #line 4974 
  ad_data = ((unsigned long long)((int)action->use_next_stage << 20) & 1048576ULL) | ad_data;
  #line 4975 
  ad_data &= 18446744073577431039ULL;
  #line 4975 
  ad_data = ((unsigned long long)((int)action->counter_id << 21) & 132120576ULL) | ad_data;
  #line 4978 
  req->ad_data = ad_data;
  #line 4979 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 4980 
  if (ret != 0) 
                #line 4981 
                _dev_err(& (hdev->pdev)->dev,(char *)"fd ad config fail, ret=%d\n",ret);
  #line 4983 
  return ret;
}

#line 4986  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static bool hclge_fd_convert_tuple(u32 tuple_bit, u8 *key_x, u8 *key_y, struct hclge_fd_rule *rule)
{
  #line 4989 
  u16 tmp_x_s;
  #line 4989 
  u16 tmp_y_s;
  #line 4990 
  u32 tmp_x_l;
  #line 4990 
  u32 tmp_y_l;
  #line 4991 
  int i;
  #line 4993 
  if ((rule->unused_tuple & tuple_bit) != 0U) 
                                              #line 4994 
                                              return (_Bool)1;
  #line 4996 
  switch (tuple_bit) {
    #line 4997 
    case (u32)0: 
                 #line 4997 
    ;
    #line 4998 
    return (_Bool)0;
    #line 4999 
    case (u32)65536: 
                     #line 4999 
    ;
    #line 5000 
    i = 0;
    #line 5000 
    while (i <= 5) {
      #line 5001 
      *(key_x + (unsigned long)(5 - i)) = (unsigned char)(~ ((int)rule->tuples.dst_mac[i]) & (int)rule->tuples_mask.dst_mac[i]);
      {
        #line 5003 
        u8 _k_ = rule->tuples.dst_mac[i];
        #line 5003 
        u8 _v_ = rule->tuples_mask.dst_mac[i];
        #line 5003 
        *(key_y + (unsigned long)(5 - i)) = (unsigned char)(~ ((int)_v_ ^ (int)_k_) & (int)_k_);
      }
      #line 5000 
      i ++;
    }
    #line 5007 
    return (_Bool)1;
    #line 5008 
    case (u32)131072: 
                      #line 5008 
    ;
    #line 5009 
    i = 0;
    #line 5009 
    while (i <= 5) {
      #line 5010 
      *(key_x + (unsigned long)(5 - i)) = (unsigned char)0U;
      {
        #line 5012 
        u8 _k__0 = rule->tuples.src_mac[i];
        #line 5012 
        u8 _v__0 = rule->tuples.src_mac[i];
        #line 5012 
        *(key_y + (unsigned long)(5 - i)) = (unsigned char)(~ ((int)_v__0 ^ (int)_k__0) & (int)_k__0);
      }
      #line 5009 
      i ++;
    }
    #line 5016 
    return (_Bool)1;
    #line 5017 
    case (u32)262144: 
                      #line 5017 
    ;
    #line 5018 
    tmp_x_s = (unsigned short)(~ ((int)rule->tuples.vlan_tag1) & (int)rule->tuples_mask.vlan_tag1);
    {
      #line 5020 
      u16 _k__1 = rule->tuples.vlan_tag1;
      #line 5020 
      u16 _v__1 = rule->tuples_mask.vlan_tag1;
      #line 5020 
      tmp_y_s = (unsigned short)(~ ((int)_v__1 ^ (int)_k__1) & (int)_k__1);
    }
    #line 5022 
    *((__le16 *)key_x) = tmp_x_s;
    #line 5023 
    *((__le16 *)key_y) = tmp_y_s;
    #line 5025 
    return (_Bool)1;
    #line 5026 
    case (u32)1048576: 
                       #line 5026 
    ;
    #line 5027 
    tmp_x_s = (unsigned short)(~ ((int)rule->tuples.ether_proto) & (int)rule->tuples_mask.ether_proto);
    {
      #line 5029 
      u16 _k__2 = rule->tuples.ether_proto;
      #line 5029 
      u16 _v__2 = rule->tuples_mask.ether_proto;
      #line 5029 
      tmp_y_s = (unsigned short)(~ ((int)_v__2 ^ (int)_k__2) & (int)_k__2);
    }
    #line 5031 
    *((__le16 *)key_x) = tmp_x_s;
    #line 5032 
    *((__le16 *)key_y) = tmp_y_s;
    #line 5034 
    return (_Bool)1;
    #line 5035 
    case (u32)4194304: 
                       #line 5035 
    ;
    #line 5036 
    *key_x = (unsigned char)(~ ((int)rule->tuples.ip_tos) & (int)rule->tuples_mask.ip_tos);
    {
      #line 5037 
      u8 _k__3 = rule->tuples.ip_tos;
      #line 5037 
      u8 _v__3 = rule->tuples_mask.ip_tos;
      #line 5037 
      *key_y = (unsigned char)(~ ((int)_v__3 ^ (int)_k__3) & (int)_k__3);
    }
    #line 5039 
    return (_Bool)1;
    #line 5040 
    case (u32)8388608: 
                       #line 5040 
    ;
    #line 5041 
    *key_x = (unsigned char)(~ ((int)rule->tuples.ip_proto) & (int)rule->tuples_mask.ip_proto);
    {
      #line 5043 
      u8 _k__4 = rule->tuples.ip_proto;
      #line 5043 
      u8 _v__4 = rule->tuples_mask.ip_proto;
      #line 5043 
      *key_y = (unsigned char)(~ ((int)_v__4 ^ (int)_k__4) & (int)_k__4);
    }
    #line 5046 
    return (_Bool)1;
    #line 5047 
    case (u32)16777216: 
                        #line 5047 
    ;
    #line 5048 
    tmp_x_l = ~ rule->tuples.src_ip[3] & rule->tuples_mask.src_ip[3];
    {
      #line 5050 
      u32 _k__5 = rule->tuples.src_ip[3];
      #line 5050 
      u32 _v__5 = rule->tuples_mask.src_ip[3];
      #line 5050 
      tmp_y_l = ~ (_v__5 ^ _k__5) & _k__5;
    }
    #line 5052 
    *((__le32 *)key_x) = tmp_x_l;
    #line 5053 
    *((__le32 *)key_y) = tmp_y_l;
    #line 5055 
    return (_Bool)1;
    #line 5056 
    case (u32)33554432: 
                        #line 5056 
    ;
    #line 5057 
    tmp_x_l = ~ rule->tuples.dst_ip[3] & rule->tuples_mask.dst_ip[3];
    {
      #line 5059 
      u32 _k__6 = rule->tuples.dst_ip[3];
      #line 5059 
      u32 _v__6 = rule->tuples_mask.dst_ip[3];
      #line 5059 
      tmp_y_l = ~ (_v__6 ^ _k__6) & _k__6;
    }
    #line 5061 
    *((__le32 *)key_x) = tmp_x_l;
    #line 5062 
    *((__le32 *)key_y) = tmp_y_l;
    #line 5064 
    return (_Bool)1;
    #line 5065 
    case (u32)134217728: 
                         #line 5065 
    ;
    #line 5066 
    tmp_x_s = (unsigned short)(~ ((int)rule->tuples.src_port) & (int)rule->tuples_mask.src_port);
    {
      #line 5068 
      u16 _k__7 = rule->tuples.src_port;
      #line 5068 
      u16 _v__7 = rule->tuples_mask.src_port;
      #line 5068 
      tmp_y_s = (unsigned short)(~ ((int)_v__7 ^ (int)_k__7) & (int)_k__7);
    }
    #line 5070 
    *((__le16 *)key_x) = tmp_x_s;
    #line 5071 
    *((__le16 *)key_y) = tmp_y_s;
    #line 5073 
    return (_Bool)1;
    #line 5074 
    case (u32)268435456: 
                         #line 5074 
    ;
    #line 5075 
    tmp_x_s = (unsigned short)(~ ((int)rule->tuples.dst_port) & (int)rule->tuples_mask.dst_port);
    {
      #line 5077 
      u16 _k__8 = rule->tuples.dst_port;
      #line 5077 
      u16 _v__8 = rule->tuples_mask.dst_port;
      #line 5077 
      tmp_y_s = (unsigned short)(~ ((int)_v__8 ^ (int)_k__8) & (int)_k__8);
    }
    #line 5079 
    *((__le16 *)key_x) = tmp_x_s;
    #line 5080 
    *((__le16 *)key_y) = tmp_y_s;
    #line 5082 
    return (_Bool)1;
    #line 5083 
    default: 
             #line 5083 
    ;
    #line 5084 
    return (_Bool)0;
  }
}

#line 5088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u32 hclge_get_port_number(enum HLCGE_PORT_TYPE port_type, u8 pf_id, u8 vf_id, u8 network_port_id)
{
  #line 5091 
  u32 port_number = 0U;
  #line 5093 
  if (port_type == (unsigned int)HOST_PORT) {
    #line 5094 
    port_number &= 4294967288U;
    #line 5094 
    port_number = ((unsigned int)pf_id & 7U) | port_number;
    #line 5096 
    port_number &= 4294965255U;
    #line 5096 
    port_number = ((unsigned int)((int)vf_id << 3) & 2040U) | port_number;
    #line 5098 
    port_number &= 4294965247U;
    #line 5098 
    port_number = port_number;
  }
  else {
    #line 5100 
    port_number &= 4294967280U;
    #line 5100 
    port_number = ((unsigned int)network_port_id & 15U) | port_number;
    #line 5102 
    port_number &= 4294965247U;
    #line 5102 
    port_number |= 2048U;
  }
  #line 5105 
  return port_number;
}

#line 5108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_fd_convert_meta_data(struct hclge_fd_key_cfg *key_cfg, __le32 *key_x, __le32 *key_y, struct hclge_fd_rule *rule)
{
  #line 5112 
  u32 tuple_bit;
  #line 5112 
  u32 tmp_x;
  #line 5112 
  u32 tmp_y;
  #line 5112 
  u32 port_number;
  #line 5113 
  u8 tuple_size;
  #line 5113 
  u8 shift_bits;
  #line 5114 
  unsigned int i;
  #line 5112 
  u32 meta_data = 0U;
  #line 5113 
  u8 cur_pos = (unsigned char)0U;
  #line 5116 
  i = 0U;
  #line 5116 
  while (i <= 7U) {
    #line 5117 
    tuple_size = meta_data_key_info[i].key_length;
    #line 5118 
    tuple_bit = key_cfg->meta_data_active & (unsigned int)(1UL << i);
    #line 5120 
    switch (tuple_bit) {
      #line 5121 
      case (u32)4: 
                   #line 5121 
      ;
      #line 5122 
      meta_data = (unsigned int)(~ (1 << (int)cur_pos)) & meta_data;
      #line 5122 
      meta_data = meta_data;
      #line 5123 
      cur_pos = (unsigned char)((int)cur_pos + (int)tuple_size);
      #line 5124 
      break;
      #line 5125 
      case (u32)64: 
                    #line 5125 
      ;
      #line 5126 
      port_number = hclge_get_port_number((enum HLCGE_PORT_TYPE)HOST_PORT,(unsigned char)0,(unsigned char)((int)((unsigned char)rule->vf_id)),(unsigned char)0);
      #line 5128 
      meta_data = ~ (- ((unsigned int)(1UL << (int)cur_pos)) & (unsigned int)(18446744073709551615UL >> (63 - ((int)cur_pos + (int)tuple_size)))) & meta_data;
      #line 5128 
      meta_data = ((port_number << (int)cur_pos) & (- ((unsigned int)(1UL << (int)cur_pos)) & (unsigned int)(18446744073709551615UL >> (63 - ((int)cur_pos + (int)tuple_size))))) | meta_data;
      #line 5131 
      cur_pos = (unsigned char)((int)cur_pos + (int)tuple_size);
      #line 5132 
      break;
      #line 5133 
      default: 
               #line 5133 
      ;
      #line 5134 
      break;
    }
    #line 5116 
    i ++;
  }
  #line 5138 
  tmp_x = ~ meta_data;
  {
    #line 5139 
    u32 _k_ = meta_data;
    #line 5139 
    unsigned int _v_ = 4294967295U;
    #line 5139 
    tmp_y = _k_;
  }
  #line 5140 
  shift_bits = (unsigned char)(32U - (unsigned int)cur_pos);
  #line 5142 
  *key_x = tmp_x << (int)shift_bits;
  #line 5143 
  *key_y = tmp_y << (int)shift_bits;
  #line 5144 
  return;
}

#line 5150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_config_key(struct hclge_dev *hdev, u8 stage, struct hclge_fd_rule *rule)
{
  #line 5154 
  u8 key_x[52U];
  #line 5154 
  u8 key_y[52U];
  #line 5155 
  u8 *cur_key_x;
  #line 5155 
  u8 *cur_key_y;
  #line 5156 
  unsigned int i;
  #line 5157 
  int ret;
  #line 5157 
  int tuple_size;
  #line 5158 
  u8 meta_data_region;
  #line 5153 
  struct hclge_fd_key_cfg *key_cfg = & hdev->fd_cfg.key_cfg[(int)stage];
  #line 5160 
  memset((void *)(& key_x),0,52UL);
  #line 5161 
  memset((void *)(& key_y),0,52UL);
  #line 5162 
  cur_key_x = (u8 *)(& key_x);
  #line 5163 
  cur_key_y = (u8 *)(& key_y);
  #line 5165 
  i = 0U;
  #line 5165 
  while (i <= 29U) {
    {
      #line 5166 
      bool tuple_valid;
      #line 5167 
      u32 check_tuple;
      #line 5169 
      tuple_size = (int)((unsigned int)tuple_key_info[i].key_length / 8U);
      #line 5170 
      check_tuple = key_cfg->tuple_active & (unsigned int)(1UL << i);
      #line 5172 
      tuple_valid = hclge_fd_convert_tuple(check_tuple,cur_key_x,cur_key_y,rule);
      #line 5174 
      if ((int)tuple_valid != 0) {
        #line 5175 
        cur_key_x += (unsigned long)tuple_size;
        #line 5176 
        cur_key_y += (unsigned long)tuple_size;
      }
    }
    #line 5165 
    i ++;
  }
  #line 5180 
  meta_data_region = (unsigned char)((unsigned int)((unsigned char)((unsigned int)hdev->fd_cfg.max_key_length / 8U)) + 252U);
  #line 5183 
  hclge_fd_convert_meta_data(key_cfg,(__le32 *)((u8 *)(& key_x) + (unsigned long)meta_data_region),(__le32 *)((u8 *)(& key_y) + (unsigned long)meta_data_region),rule);
  #line 5188 
  ret = hclge_fd_tcam_config(hdev,(unsigned char)((int)stage),(_Bool)0,(int)rule->location,(u8 *)(& key_y),(_Bool)1);
  #line 5190 
  if (ret != 0) {
    #line 5191 
    _dev_err(& (hdev->pdev)->dev,(char *)"fd key_y config fail, loc=%u, ret=%d\n",(int)rule->queue_id,ret);
    #line 5194 
    return ret;
  }
  #line 5197 
  ret = hclge_fd_tcam_config(hdev,(unsigned char)((int)stage),(_Bool)1,(int)rule->location,(u8 *)(& key_x),(_Bool)1);
  #line 5199 
  if (ret != 0) 
                #line 5200 
                _dev_err(& (hdev->pdev)->dev,(char *)"fd key_x config fail, loc=%u, ret=%d\n",(int)rule->queue_id,ret);
  #line 5203 
  return ret;
}

#line 5206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_config_action(struct hclge_dev *hdev, u8 stage, struct hclge_fd_rule *rule)
{
  #line 5209 
  struct hclge_fd_ad_data ad_data;
  #line 5211 
  ad_data.ad_id = rule->location;
  #line 5213 
  if ((unsigned int)rule->action == 1U) {
    #line 5214 
    ad_data.drop_packet = (unsigned char)1U;
    #line 5215 
    ad_data.forward_to_direct_queue = (unsigned char)0U;
    #line 5216 
    ad_data.queue_id = (unsigned short)0U;
  }
  else {
    #line 5218 
    ad_data.drop_packet = (unsigned char)0U;
    #line 5219 
    ad_data.forward_to_direct_queue = (unsigned char)1U;
    #line 5220 
    ad_data.queue_id = rule->queue_id;
  }
  #line 5223 
  ad_data.use_counter = (unsigned char)0U;
  #line 5224 
  ad_data.counter_id = (unsigned char)0U;
  #line 5226 
  ad_data.use_next_stage = (unsigned char)0U;
  #line 5227 
  ad_data.next_input_key = (unsigned char)0U;
  #line 5229 
  ad_data.write_rule_id_to_bd = (unsigned char)1U;
  #line 5230 
  ad_data.rule_id = rule->location;
  #line 5232 
  return hclge_fd_ad_config(hdev,(unsigned char)((int)stage),(int)ad_data.ad_id,
                         & ad_data);
}

#line 5235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_fd_check_spec(struct hclge_dev *hdev, struct ethtool_rx_flow_spec *fs, u32 *unused)
{
  #line 5238 
  struct ethtool_tcpip4_spec *tcp_ip4_spec;
  #line 5239 
  struct ethtool_usrip4_spec *usr_ip4_spec;
  #line 5240 
  struct ethtool_tcpip6_spec *tcp_ip6_spec;
  #line 5241 
  struct ethtool_usrip6_spec *usr_ip6_spec;
  #line 5242 
  struct ethhdr *ether_spec;
  #line 5244 
  if (fs->location >= hdev->fd_cfg.rule_num[0]) 
                                                #line 5245 
                                                return -22;
  #line 5247 
  if ((fs->flow_type & hdev->fd_cfg.proto_support) == 0U) 
                                                          #line 5248 
                                                          return -95;
  #line 5250 
  if ((fs->flow_type & 2147483648U) != 0U && (fs->h_ext.data[0] != 0U || fs->h_ext.data[1] != 0U)) {
    #line 5252 
    _dev_err(& (hdev->pdev)->dev,(char *)"user-def bytes are not supported\n");
    #line 5253 
    return -95;
  }
  #line 5256 
  switch (fs->flow_type & 1073741823U) {
    #line 5257 
    case (unsigned int)3: 
                          #line 5257 
    ;
    #line 5258 
    case (unsigned int)1: 
                          #line 5258 
    ;
    #line 5259 
    case (unsigned int)2: 
                          #line 5259 
    ;
    #line 5260 
    tcp_ip4_spec = & fs->h_u.tcp_ip4_spec;
    #line 5261 
    *unused |= 196608U;
    #line 5263 
    if (tcp_ip4_spec->ip4src == 0U) 
                                    #line 5264 
                                    *unused |= 16777216U;
    #line 5266 
    if (tcp_ip4_spec->ip4dst == 0U) 
                                    #line 5267 
                                    *unused |= 33554432U;
    #line 5269 
    if ((unsigned int)tcp_ip4_spec->psrc == 0U) 
                                                #line 5270 
                                                *unused |= 134217728U;
    #line 5272 
    if ((unsigned int)tcp_ip4_spec->pdst == 0U) 
                                                #line 5273 
                                                *unused |= 268435456U;
    #line 5275 
    if ((unsigned int)tcp_ip4_spec->tos == 0U) 
                                               #line 5276 
                                               *unused |= 4194304U;
    #line 5278 
    break;
    #line 5279 
    case (unsigned int)13: 
                           #line 5279 
    ;
    #line 5280 
    usr_ip4_spec = & fs->h_u.usr_ip4_spec;
    #line 5281 
    *unused |= 402849792U;
    #line 5284 
    if (usr_ip4_spec->ip4src == 0U) 
                                    #line 5285 
                                    *unused |= 16777216U;
    #line 5287 
    if (usr_ip4_spec->ip4dst == 0U) 
                                    #line 5288 
                                    *unused |= 33554432U;
    #line 5290 
    if ((unsigned int)usr_ip4_spec->tos == 0U) 
                                               #line 5291 
                                               *unused |= 4194304U;
    #line 5293 
    if ((unsigned int)usr_ip4_spec->proto == 0U) 
                                                 #line 5294 
                                                 *unused |= 8388608U;
    #line 5296 
    if (usr_ip4_spec->l4_4_bytes != 0U) 
                                        #line 5297 
                                        return -95;
    #line 5299 
    if ((unsigned int)usr_ip4_spec->ip_ver != 1U) 
                                                  #line 5300 
                                                  return -95;
    #line 5302 
    break;
    #line 5303 
    case (unsigned int)7: 
                          #line 5303 
    ;
    #line 5304 
    case (unsigned int)5: 
                          #line 5304 
    ;
    #line 5305 
    case (unsigned int)6: 
                          #line 5305 
    ;
    #line 5306 
    tcp_ip6_spec = & fs->h_u.tcp_ip6_spec;
    #line 5307 
    *unused |= 4390912U;
    #line 5311 
    if (((tcp_ip6_spec->ip6src[0] == 0U && tcp_ip6_spec->ip6src[1] == 0U) && tcp_ip6_spec->ip6src[2] == 0U) && tcp_ip6_spec->ip6src[3] == 0U) 
      #line 5313 
      *unused |= 16777216U;
    #line 5315 
    if (((tcp_ip6_spec->ip6dst[0] == 0U && tcp_ip6_spec->ip6dst[1] == 0U) && tcp_ip6_spec->ip6dst[2] == 0U) && tcp_ip6_spec->ip6dst[3] == 0U) 
      #line 5317 
      *unused |= 33554432U;
    #line 5319 
    if ((unsigned int)tcp_ip6_spec->psrc == 0U) 
                                                #line 5320 
                                                *unused |= 134217728U;
    #line 5322 
    if ((unsigned int)tcp_ip6_spec->pdst == 0U) 
                                                #line 5323 
                                                *unused |= 268435456U;
    #line 5325 
    if ((unsigned int)tcp_ip6_spec->tclass != 0U) 
                                                  #line 5326 
                                                  return -95;
    #line 5328 
    break;
    #line 5329 
    case (unsigned int)14: 
                           #line 5329 
    ;
    #line 5330 
    usr_ip6_spec = & fs->h_u.usr_ip6_spec;
    #line 5331 
    *unused |= 407044096U;
    #line 5336 
    if (((usr_ip6_spec->ip6src[0] == 0U && usr_ip6_spec->ip6src[1] == 0U) && usr_ip6_spec->ip6src[2] == 0U) && usr_ip6_spec->ip6src[3] == 0U) 
      #line 5338 
      *unused |= 16777216U;
    #line 5340 
    if (((usr_ip6_spec->ip6dst[0] == 0U && usr_ip6_spec->ip6dst[1] == 0U) && usr_ip6_spec->ip6dst[2] == 0U) && usr_ip6_spec->ip6dst[3] == 0U) 
      #line 5342 
      *unused |= 33554432U;
    #line 5344 
    if ((unsigned int)usr_ip6_spec->l4_proto == 0U) 
                                                    #line 5345 
                                                    *unused |= 8388608U;
    #line 5347 
    if ((unsigned int)usr_ip6_spec->tclass != 0U) 
                                                  #line 5348 
                                                  return -95;
    #line 5350 
    if (usr_ip6_spec->l4_4_bytes != 0U) 
                                        #line 5351 
                                        return -95;
    #line 5353 
    break;
    #line 5354 
    case (unsigned int)18: 
                           #line 5354 
    ;
    #line 5355 
    ether_spec = & fs->h_u.ether_spec;
    #line 5356 
    *unused |= 465567744U;
    #line 5360 
    if ((int)is_zero_ether_addr((u8 *)(& ether_spec->h_source)) != 0) 
      #line 5361 
      *unused |= 131072U;
    #line 5363 
    if ((int)is_zero_ether_addr((u8 *)(& ether_spec->h_dest)) != 0) 
                                                                    #line 5364 
                                                                    *unused |= 65536U;
    #line 5366 
    if ((unsigned int)ether_spec->h_proto == 0U) 
                                                 #line 5367 
                                                 *unused |= 1048576U;
    #line 5369 
    break;
    #line 5370 
    default: 
             #line 5370 
    ;
    #line 5371 
    return -95;
  }
  #line 5374 
  if ((fs->flow_type & 2147483648U) != 0U) {
    #line 5375 
    if ((unsigned int)fs->h_ext.vlan_etype != 0U) 
                                                  #line 5376 
                                                  return -95;
    #line 5377 
    if ((unsigned int)fs->h_ext.vlan_tci == 0U) 
                                                #line 5378 
                                                *unused |= 262144U;
    #line 5380 
    if ((unsigned int)fs->m_ext.vlan_tci != 0U) {
      #line 5381 
      if ((unsigned int)__builtin_bswap16((unsigned short)((int)fs->h_ext.vlan_tci)) > 4095U) 
        #line 5382 
        return -22;
    }
  }
  else 
       #line 5385 
       *unused |= 262144U;
  #line 5388 
  if ((fs->flow_type & 1073741824U) != 0U) {
    #line 5389 
    if ((hdev->fd_cfg.proto_support & 18U) == 0U) 
                                                  #line 5390 
                                                  return -95;
    #line 5392 
    if ((int)is_zero_ether_addr((u8 *)(& fs->h_ext.h_dest)) != 0) 
                                                                  #line 5393 
                                                                  *unused |= 65536U; else 
                                                                    #line 5395 
                                                                    *unused &= 4294901759U;
  }
  #line 5398 
  return 0;
}

#line 5401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static bool hclge_fd_rule_exist(struct hclge_dev *hdev, u16 location)
{
  #line 5407 
  void *__mptr;
  #line 5407 
  struct hclge_fd_rule *tmp_0;
  #line 5404 
  struct hlist_node *node2;
  #line 5403 
  struct hclge_fd_rule *rule = (struct hclge_fd_rule *)0;
  #line 5406 
  cif_spin_lock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
  {
    #line 5407 
    struct hlist_node *____ptr = hdev->fd_rule_list.first;
    #line 5407 
    if (____ptr != (struct hlist_node *)0) {
      #line 5407 
      __mptr = (void *)____ptr;
      #line 5407 
      tmp_0 = ((struct hclge_fd_rule *)__mptr);
    }
    else 
         #line 5407 
         tmp_0 = (struct hclge_fd_rule *)0;
    }
  #line 5407 
  rule = tmp_0;
  #line 5407 
  while (1) {
    #line 5407 
    struct hclge_fd_rule *tmp_3;
    #line 5407 
    void *__mptr_0;
    #line 5407 
    if (rule != (struct hclge_fd_rule *)0) {
      #line 5407 
      node2 = rule->rule_node.next;
      #line 5407 
      if (! (1 != 0)) 
                      #line 5407 
                      break;
    }
    else 
         #line 5407 
         break;
    #line 5408 
    if ((int)rule->location >= (int)location) 
                                              #line 5409 
                                              break;
    {
      #line 5407 
      struct hlist_node *____ptr_0 = node2;
      #line 5407 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 5407 
        __mptr_0 = (void *)____ptr_0;
        #line 5407 
        tmp_3 = ((struct hclge_fd_rule *)__mptr_0);
      }
      else 
           #line 5407 
           tmp_3 = (struct hclge_fd_rule *)0;
      }
    #line 5407 
    rule = tmp_3;
  }
  #line 5412 
  cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
  #line 5414 
  return (_Bool)((rule != (struct hclge_fd_rule *)0 && (int)rule->location == (int)location) != 0);
}

#line 5418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_fd_update_rule_list(struct hclge_dev *hdev, struct hclge_fd_rule *new_rule, u16 location, bool is_add)
{
  #line 5429 
  void *__mptr;
  #line 5429 
  struct hclge_fd_rule *tmp_0;
  #line 5424 
  struct hlist_node *node2;
  #line 5423 
  struct hclge_fd_rule *rule = (struct hclge_fd_rule *)0;
  #line 5423 
  struct hclge_fd_rule *parent = (struct hclge_fd_rule *)0;
  #line 5426 
  if ((int)is_add != 0 && new_rule == (struct hclge_fd_rule *)0) 
                                                                 #line 5427 
                                                                 return -22;
  {
    #line 5429 
    struct hlist_node *____ptr = hdev->fd_rule_list.first;
    #line 5429 
    if (____ptr != (struct hlist_node *)0) {
      #line 5429 
      __mptr = (void *)____ptr;
      #line 5429 
      tmp_0 = ((struct hclge_fd_rule *)__mptr);
    }
    else 
         #line 5429 
         tmp_0 = (struct hclge_fd_rule *)0;
    }
  #line 5429 
  rule = tmp_0;
  #line 5429 
  while (1) {
    #line 5429 
    struct hclge_fd_rule *tmp_3;
    #line 5429 
    void *__mptr_0;
    #line 5429 
    if (rule != (struct hclge_fd_rule *)0) {
      #line 5429 
      node2 = rule->rule_node.next;
      #line 5429 
      if (! (1 != 0)) 
                      #line 5429 
                      break;
    }
    else 
         #line 5429 
         break;
    #line 5431 
    if ((int)rule->location >= (int)location) 
                                              #line 5432 
                                              break;
    #line 5433 
    parent = rule;
    {
      #line 5429 
      struct hlist_node *____ptr_0 = node2;
      #line 5429 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 5429 
        __mptr_0 = (void *)____ptr_0;
        #line 5429 
        tmp_3 = ((struct hclge_fd_rule *)__mptr_0);
      }
      else 
           #line 5429 
           tmp_3 = (struct hclge_fd_rule *)0;
      }
    #line 5429 
    rule = tmp_3;
  }
  #line 5436 
  if (rule != (struct hclge_fd_rule *)0 && (int)rule->location == (int)location) {
    #line 5437 
    hlist_del(& rule->rule_node);
    #line 5438 
    kfree((void *)rule);
    #line 5439 
    hdev->hclge_fd_rule_num = (u16)((int)hdev->hclge_fd_rule_num - 1);
    #line 5441 
    if (! is_add) {
      #line 5442 
      if ((unsigned int)hdev->hclge_fd_rule_num == 0U) 
                                                       #line 5443 
                                                       hdev->fd_active_type = HCLGE_FD_RULE_NONE;
      #line 5444 
      cif_clear_bit_0((long)location,(unsigned long *)(& hdev->fd_bmap));
      #line 5446 
      return 0;
    }
  }
  else 
    #line 5448 
    if (! is_add) {
      #line 5449 
      _dev_err(& (hdev->pdev)->dev,(char *)"delete fail, rule %u is inexistent\n",(int)location);
      #line 5452 
      return -22;
    }
  #line 5455 
  INIT_HLIST_NODE(& new_rule->rule_node);
  #line 5457 
  if (parent != (struct hclge_fd_rule *)0) 
                                           #line 5458 
                                           hlist_add_behind(& new_rule->rule_node,& parent->rule_node); else 
                                                                    #line 5460 
                                                                    hlist_add_head(& new_rule->rule_node,& hdev->fd_rule_list);
  #line 5462 
  cif_set_bit_0((long)location,(unsigned long *)(& hdev->fd_bmap));
  #line 5463 
  hdev->hclge_fd_rule_num = (u16)((int)hdev->hclge_fd_rule_num + 1);
  #line 5464 
  hdev->fd_active_type = new_rule->rule_type;
  #line 5466 
  return 0;
}

#line 5469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_fd_get_tuple(struct hclge_dev *hdev, struct ethtool_rx_flow_spec *fs, struct hclge_fd_rule *rule)
{
  #line 5473 
  u32 flow_type = fs->flow_type & 1073741823U;
  #line 5475 
  switch (flow_type) {
    #line 5476 
    case (u32)3: 
                 #line 5476 
    ;
    #line 5477 
    case (u32)1: 
                 #line 5477 
    ;
    #line 5478 
    case (u32)2: 
                 #line 5478 
    ;
    #line 5479 
    rule->tuples.src_ip[3] = __builtin_bswap32(fs->h_u.tcp_ip4_spec.ip4src);
    #line 5481 
    rule->tuples_mask.src_ip[3] = __builtin_bswap32(fs->m_u.tcp_ip4_spec.ip4src);
    #line 5484 
    rule->tuples.dst_ip[3] = __builtin_bswap32(fs->h_u.tcp_ip4_spec.ip4dst);
    #line 5486 
    rule->tuples_mask.dst_ip[3] = __builtin_bswap32(fs->m_u.tcp_ip4_spec.ip4dst);
    #line 5489 
    rule->tuples.src_port = __builtin_bswap16((unsigned short)((int)fs->h_u.tcp_ip4_spec.psrc));
    #line 5490 
    rule->tuples_mask.src_port = __builtin_bswap16((unsigned short)((int)fs->m_u.tcp_ip4_spec.psrc));
    #line 5493 
    rule->tuples.dst_port = __builtin_bswap16((unsigned short)((int)fs->h_u.tcp_ip4_spec.pdst));
    #line 5494 
    rule->tuples_mask.dst_port = __builtin_bswap16((unsigned short)((int)fs->m_u.tcp_ip4_spec.pdst));
    #line 5497 
    rule->tuples.ip_tos = fs->h_u.tcp_ip4_spec.tos;
    #line 5498 
    rule->tuples_mask.ip_tos = fs->m_u.tcp_ip4_spec.tos;
    #line 5500 
    rule->tuples.ether_proto = (unsigned short)2048U;
    #line 5501 
    rule->tuples_mask.ether_proto = (unsigned short)65535U;
    #line 5503 
    break;
    #line 5504 
    case (u32)13: 
                  #line 5504 
    ;
    #line 5505 
    rule->tuples.src_ip[3] = __builtin_bswap32(fs->h_u.usr_ip4_spec.ip4src);
    #line 5507 
    rule->tuples_mask.src_ip[3] = __builtin_bswap32(fs->m_u.usr_ip4_spec.ip4src);
    #line 5510 
    rule->tuples.dst_ip[3] = __builtin_bswap32(fs->h_u.usr_ip4_spec.ip4dst);
    #line 5512 
    rule->tuples_mask.dst_ip[3] = __builtin_bswap32(fs->m_u.usr_ip4_spec.ip4dst);
    #line 5515 
    rule->tuples.ip_tos = fs->h_u.usr_ip4_spec.tos;
    #line 5516 
    rule->tuples_mask.ip_tos = fs->m_u.usr_ip4_spec.tos;
    #line 5518 
    rule->tuples.ip_proto = fs->h_u.usr_ip4_spec.proto;
    #line 5519 
    rule->tuples_mask.ip_proto = fs->m_u.usr_ip4_spec.proto;
    #line 5521 
    rule->tuples.ether_proto = (unsigned short)2048U;
    #line 5522 
    rule->tuples_mask.ether_proto = (unsigned short)65535U;
    #line 5524 
    break;
    #line 5525 
    case (u32)7: 
                 #line 5525 
    ;
    #line 5526 
    case (u32)5: 
                 #line 5526 
    ;
    #line 5527 
    case (u32)6: 
                 #line 5527 
    ;
    #line 5528 
    be32_to_cpu_array((u32 *)(& rule->tuples.src_ip),(__be32 *)(& fs->h_u.tcp_ip6_spec.ip6src),4UL);
    #line 5530 
    be32_to_cpu_array((u32 *)(& rule->tuples_mask.src_ip),(__be32 *)(& fs->m_u.tcp_ip6_spec.ip6src),4UL);
    #line 5533 
    be32_to_cpu_array((u32 *)(& rule->tuples.dst_ip),(__be32 *)(& fs->h_u.tcp_ip6_spec.ip6dst),4UL);
    #line 5535 
    be32_to_cpu_array((u32 *)(& rule->tuples_mask.dst_ip),(__be32 *)(& fs->m_u.tcp_ip6_spec.ip6dst),4UL);
    #line 5538 
    rule->tuples.src_port = __builtin_bswap16((unsigned short)((int)fs->h_u.tcp_ip6_spec.psrc));
    #line 5539 
    rule->tuples_mask.src_port = __builtin_bswap16((unsigned short)((int)fs->m_u.tcp_ip6_spec.psrc));
    #line 5542 
    rule->tuples.dst_port = __builtin_bswap16((unsigned short)((int)fs->h_u.tcp_ip6_spec.pdst));
    #line 5543 
    rule->tuples_mask.dst_port = __builtin_bswap16((unsigned short)((int)fs->m_u.tcp_ip6_spec.pdst));
    #line 5546 
    rule->tuples.ether_proto = (unsigned short)34525U;
    #line 5547 
    rule->tuples_mask.ether_proto = (unsigned short)65535U;
    #line 5549 
    break;
    #line 5550 
    case (u32)14: 
                  #line 5550 
    ;
    #line 5551 
    be32_to_cpu_array((u32 *)(& rule->tuples.src_ip),(__be32 *)(& fs->h_u.usr_ip6_spec.ip6src),4UL);
    #line 5553 
    be32_to_cpu_array((u32 *)(& rule->tuples_mask.src_ip),(__be32 *)(& fs->m_u.usr_ip6_spec.ip6src),4UL);
    #line 5556 
    be32_to_cpu_array((u32 *)(& rule->tuples.dst_ip),(__be32 *)(& fs->h_u.usr_ip6_spec.ip6dst),4UL);
    #line 5558 
    be32_to_cpu_array((u32 *)(& rule->tuples_mask.dst_ip),(__be32 *)(& fs->m_u.usr_ip6_spec.ip6dst),4UL);
    #line 5561 
    rule->tuples.ip_proto = fs->h_u.usr_ip6_spec.l4_proto;
    #line 5562 
    rule->tuples_mask.ip_proto = fs->m_u.usr_ip6_spec.l4_proto;
    #line 5564 
    rule->tuples.ether_proto = (unsigned short)34525U;
    #line 5565 
    rule->tuples_mask.ether_proto = (unsigned short)65535U;
    #line 5567 
    break;
    #line 5568 
    case (u32)18: 
                  #line 5568 
    ;
    #line 5569 
    ether_addr_copy((u8 *)(& rule->tuples.src_mac),(u8 *)(& fs->h_u.ether_spec.h_source));
    #line 5571 
    ether_addr_copy((u8 *)(& rule->tuples_mask.src_mac),(u8 *)(& fs->m_u.ether_spec.h_source));
    #line 5574 
    ether_addr_copy((u8 *)(& rule->tuples.dst_mac),(u8 *)(& fs->h_u.ether_spec.h_dest));
    #line 5576 
    ether_addr_copy((u8 *)(& rule->tuples_mask.dst_mac),(u8 *)(& fs->m_u.ether_spec.h_dest));
    #line 5579 
    rule->tuples.ether_proto = __builtin_bswap16((unsigned short)((int)fs->h_u.ether_spec.h_proto));
    #line 5581 
    rule->tuples_mask.ether_proto = __builtin_bswap16((unsigned short)((int)fs->m_u.ether_spec.h_proto));
    #line 5584 
    break;
    #line 5585 
    default: 
             #line 5585 
    ;
    #line 5586 
    return -95;
  }
  #line 5589 
  switch (flow_type) {
    #line 5590 
    case (u32)3: 
                 #line 5590 
    ;
    #line 5591 
    case (u32)7: 
                 #line 5591 
    ;
    #line 5592 
    rule->tuples.ip_proto = (unsigned char)132U;
    #line 5593 
    rule->tuples_mask.ip_proto = (unsigned char)255U;
    #line 5594 
    break;
    #line 5595 
    case (u32)1: 
                 #line 5595 
    ;
    #line 5596 
    case (u32)5: 
                 #line 5596 
    ;
    #line 5597 
    rule->tuples.ip_proto = (unsigned char)6U;
    #line 5598 
    rule->tuples_mask.ip_proto = (unsigned char)255U;
    #line 5599 
    break;
    #line 5600 
    case (u32)2: 
                 #line 5600 
    ;
    #line 5601 
    case (u32)6: 
                 #line 5601 
    ;
    #line 5602 
    rule->tuples.ip_proto = (unsigned char)17U;
    #line 5603 
    rule->tuples_mask.ip_proto = (unsigned char)255U;
    #line 5604 
    break;
    #line 5605 
    default: 
             #line 5605 
    ;
    #line 5606 
    break;
  }
  #line 5609 
  if ((fs->flow_type & 2147483648U) != 0U) {
    #line 5610 
    rule->tuples.vlan_tag1 = __builtin_bswap16((unsigned short)((int)fs->h_ext.vlan_tci));
    #line 5611 
    rule->tuples_mask.vlan_tag1 = __builtin_bswap16((unsigned short)((int)fs->m_ext.vlan_tci));
  }
  #line 5614 
  if ((fs->flow_type & 1073741824U) != 0U) {
    #line 5615 
    ether_addr_copy((u8 *)(& rule->tuples.dst_mac),(u8 *)(& fs->h_ext.h_dest));
    #line 5616 
    ether_addr_copy((u8 *)(& rule->tuples_mask.dst_mac),(u8 *)(& fs->m_ext.h_dest));
  }
  #line 5619 
  return 0;
}

#line 5623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_fd_config_rule(struct hclge_dev *hdev, struct hclge_fd_rule *rule)
{
  #line 5626 
  int ret;
  #line 5628 
  if (rule == (struct hclge_fd_rule *)0) {
    #line 5629 
    _dev_err(& (hdev->pdev)->dev,(char *)"The flow director rule is NULL\n");
    #line 5631 
    return -22;
  }
  #line 5635 
  hclge_fd_update_rule_list(hdev,rule,(unsigned short)((int)rule->location),(_Bool)1);
  #line 5637 
  ret = hclge_config_action(hdev,(unsigned char)0,rule);
  #line 5638 
  if (ret != 0) 
                #line 5639 
                goto clear_rule;
  #line 5641 
  ret = hclge_config_key(hdev,(unsigned char)0,rule);
  #line 5642 
  if (ret != 0) 
                #line 5643 
                goto clear_rule;
  #line 5645 
  return 0;
  #line 5647 
  clear_rule: 
              #line 5647 
  ;
  #line 5648 
  hclge_fd_update_rule_list(hdev,rule,(unsigned short)((int)rule->location),(_Bool)0);
  #line 5649 
  return ret;
}

#line 5652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_add_fd_entry(struct hnae3_handle *handle, struct ethtool_rxnfc *cmd)
{
  #line 5658 
  struct ethtool_rx_flow_spec *fs;
  #line 5659 
  struct hclge_fd_rule *rule;
  #line 5661 
  u8 action;
  #line 5662 
  int ret;
  #line 5655 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 5656 
  struct hclge_dev *hdev = vport->back;
  #line 5657 
  u16 dst_vport_id = (unsigned short)0U;
  #line 5657 
  u16 q_index = (unsigned short)0U;
  #line 5660 
  u32 unused = 0U;
  #line 5664 
  if (((hdev->ae_dev)->flag & 64U) == 0U) 
                                          #line 5665 
                                          return -95;
  #line 5667 
  if ((unsigned int)hdev->fd_en == 0U) {
    #line 5668 
    _dev_warn(& (hdev->pdev)->dev,(char *)"Please enable flow director first\n");
    #line 5670 
    return -95;
  }
  #line 5673 
  fs = & cmd->fs;
  #line 5675 
  ret = hclge_fd_check_spec(hdev,fs,& unused);
  #line 5676 
  if (ret != 0) {
    #line 5677 
    _dev_err(& (hdev->pdev)->dev,(char *)"Check fd spec failed\n");
    #line 5678 
    return ret;
  }
  #line 5681 
  if (fs->ring_cookie == 18446744073709551615ULL) 
                                                  #line 5682 
                                                  action = (unsigned char)1U;
  else {
    #line 5686 
    u16 tqps;
    #line 5684 
    u32 ring = (unsigned int)ethtool_get_flow_spec_ring(fs->ring_cookie);
    #line 5685 
    u8 vf = (unsigned char)ethtool_get_flow_spec_ring_vf(fs->ring_cookie);
    #line 5688 
    if ((int)((unsigned short)vf) > (int)hdev->num_req_vfs) {
      #line 5689 
      _dev_err(& (hdev->pdev)->dev,(char *)"Error: vf id (%u) > max vf num (%u)\n",(int)vf,(int)hdev->num_req_vfs);
      #line 5692 
      return -22;
    }
    #line 5695 
    if ((unsigned int)vf != 0U) 
                                #line 5695 
                                dst_vport_id = (hdev->vport + (unsigned long)vf)->vport_id; else 
                                                                    #line 5695 
                                                                    dst_vport_id = vport->vport_id;
    #line 5696 
    if ((unsigned int)vf != 0U) 
                                #line 5696 
                                tqps = (hdev->vport + (unsigned long)vf)->alloc_tqps; else 
                                                                    #line 5696 
                                                                    tqps = vport->alloc_tqps;
    #line 5698 
    if ((unsigned int)tqps <= ring) {
      #line 5699 
      _dev_err(& (hdev->pdev)->dev,(char *)"Error: queue id (%u) > max tqp num (%u)\n",ring,(int)tqps + -1);
      #line 5702 
      return -22;
    }
    #line 5705 
    action = (unsigned char)0U;
    #line 5706 
    q_index = (unsigned short)ring;
  }
  #line 5709 
  rule = (struct hclge_fd_rule *)kzalloc_0(152UL,3264U);
  #line 5710 
  if (rule == (struct hclge_fd_rule *)0) 
                                         #line 5711 
                                         return -12;
  #line 5713 
  ret = hclge_fd_get_tuple(hdev,fs,rule);
  #line 5714 
  if (ret != 0) {
    #line 5715 
    kfree((void *)rule);
    #line 5716 
    return ret;
  }
  #line 5719 
  rule->flow_type = fs->flow_type;
  #line 5721 
  rule->location = (unsigned short)fs->location;
  #line 5722 
  rule->unused_tuple = unused;
  #line 5723 
  rule->vf_id = dst_vport_id;
  #line 5724 
  rule->queue_id = q_index;
  #line 5725 
  rule->action = action;
  #line 5726 
  rule->rule_type = HCLGE_FD_EP_ACTIVE;
  #line 5731 
  hclge_clear_arfs_rules(handle);
  #line 5733 
  cif_spin_lock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
  #line 5734 
  ret = hclge_fd_config_rule(hdev,rule);
  #line 5736 
  cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
  #line 5738 
  return ret;
}

#line 5741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_del_fd_entry(struct hnae3_handle *handle, struct ethtool_rxnfc *cmd)
{
  #line 5746 
  struct ethtool_rx_flow_spec *fs;
  #line 5747 
  int ret;
  #line 5744 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 5745 
  struct hclge_dev *hdev = vport->back;
  #line 5749 
  if (((hdev->ae_dev)->flag & 64U) == 0U) 
                                          #line 5750 
                                          return -95;
  #line 5752 
  fs = & cmd->fs;
  #line 5754 
  if (fs->location >= hdev->fd_cfg.rule_num[0]) 
                                                #line 5755 
                                                return -22;
  #line 5757 
  if (! hclge_fd_rule_exist(hdev,
                            (unsigned short)((int)((unsigned short)fs->location)))) {
    #line 5758 
    _dev_err(& (hdev->pdev)->dev,(char *)"Delete fail, rule %u is inexistent\n",fs->location);
    #line 5760 
    return -2;
  }
  #line 5763 
  ret = hclge_fd_tcam_config(hdev,(unsigned char)0,(_Bool)1,(int)fs->location,(u8 *)0U,(_Bool)0);
  #line 5765 
  if (ret != 0) 
                #line 5766 
                return ret;
  #line 5768 
  cif_spin_lock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
  #line 5769 
  ret = hclge_fd_update_rule_list(hdev,(struct hclge_fd_rule *)0,(unsigned short)((int)((unsigned short)fs->location)),(_Bool)0);
  #line 5771 
  cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
  #line 5773 
  return ret;
}

#line 5776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_del_all_fd_entries(struct hnae3_handle *handle, bool clear_list)
{
  #line 5781 
  struct hclge_fd_rule *rule;
  #line 5782 
  struct hlist_node *node;
  #line 5783 
  u16 location;
  #line 5779 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 5780 
  struct hclge_dev *hdev = vport->back;
  #line 5785 
  if (((hdev->ae_dev)->flag & 64U) == 0U) 
                                          #line 5786 
                                          return;
  #line 5788 
  cif_spin_lock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
  #line 5789 
  location = (unsigned short)cif_find_first_bit((unsigned long *)(& hdev->fd_bmap),
                           (unsigned long)hdev->fd_cfg.rule_num[0]);
  #line 5789 
  while ((unsigned int)location < hdev->fd_cfg.rule_num[0]) {
    #line 5791 
    hclge_fd_tcam_config(hdev,(unsigned char)0,(_Bool)1,(int)location,(u8 *)0U,(_Bool)0);
    #line 5789 
    location = (unsigned short)cif_find_next_bit((unsigned long *)(& hdev->fd_bmap),
                          (unsigned long)hdev->fd_cfg.rule_num[0],
                          (unsigned long)((int)location + 1));
  }
  #line 5794 
  if ((int)clear_list != 0) {
    #line 5795 
    void *__mptr;
    #line 5795 
    struct hclge_fd_rule *tmp_3;
    {
      #line 5795 
      struct hlist_node *____ptr = hdev->fd_rule_list.first;
      #line 5795 
      if (____ptr != (struct hlist_node *)0) {
        #line 5795 
        __mptr = (void *)____ptr;
        #line 5795 
        tmp_3 = ((struct hclge_fd_rule *)__mptr);
      }
      else 
           #line 5795 
           tmp_3 = (struct hclge_fd_rule *)0;
      }
    #line 5795 
    rule = tmp_3;
    #line 5795 
    while (1) {
      #line 5795 
      void *__mptr_0;
      #line 5795 
      struct hclge_fd_rule *tmp_6;
      #line 5795 
      if (rule != (struct hclge_fd_rule *)0) {
        #line 5795 
        node = rule->rule_node.next;
        #line 5795 
        if (! (1 != 0)) 
                        #line 5795 
                        break;
      }
      else 
           #line 5795 
           break;
      #line 5797 
      hlist_del(& rule->rule_node);
      #line 5798 
      kfree((void *)rule);
      {
        #line 5795 
        struct hlist_node *____ptr_0 = node;
        #line 5795 
        if (____ptr_0 != (struct hlist_node *)0) {
          #line 5795 
          __mptr_0 = (void *)____ptr_0;
          #line 5795 
          tmp_6 = ((struct hclge_fd_rule *)__mptr_0);
        }
        else 
             #line 5795 
             tmp_6 = (struct hclge_fd_rule *)0;
        }
      #line 5795 
      rule = tmp_6;
    }
    #line 5800 
    hdev->fd_active_type = HCLGE_FD_RULE_NONE;
    #line 5801 
    hdev->hclge_fd_rule_num = (unsigned short)0U;
    #line 5802 
    cif_bitmap_zero((unsigned long *)(& hdev->fd_bmap),hdev->fd_cfg.rule_num[0]);
  }
  #line 5806 
  cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
  #line 5807 
  return;
}

#line 5809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_restore_fd_entries(struct hnae3_handle *handle)
{
  #line 5829 
  void *__mptr;
  #line 5829 
  struct hclge_fd_rule *tmp_1;
  #line 5813 
  struct hclge_fd_rule *rule;
  #line 5814 
  struct hlist_node *node;
  #line 5815 
  int ret;
  #line 5811 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 5812 
  struct hclge_dev *hdev = vport->back;
  #line 5821 
  if (((hdev->ae_dev)->flag & 64U) == 0U) 
                                          #line 5822 
                                          return 0;
  #line 5825 
  if ((unsigned int)hdev->fd_en == 0U) 
                                       #line 5826 
                                       return 0;
  #line 5828 
  cif_spin_lock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
  {
    #line 5829 
    struct hlist_node *____ptr = hdev->fd_rule_list.first;
    #line 5829 
    if (____ptr != (struct hlist_node *)0) {
      #line 5829 
      __mptr = (void *)____ptr;
      #line 5829 
      tmp_1 = ((struct hclge_fd_rule *)__mptr);
    }
    else 
         #line 5829 
         tmp_1 = (struct hclge_fd_rule *)0;
    }
  #line 5829 
  rule = tmp_1;
  #line 5829 
  while (1) {
    #line 5829 
    struct hclge_fd_rule *tmp_4;
    #line 5829 
    void *__mptr_0;
    #line 5829 
    if (rule != (struct hclge_fd_rule *)0) {
      #line 5829 
      node = rule->rule_node.next;
      #line 5829 
      if (! (1 != 0)) 
                      #line 5829 
                      break;
    }
    else 
         #line 5829 
         break;
    #line 5830 
    ret = hclge_config_action(hdev,(unsigned char)0,rule);
    #line 5831 
    if (ret == 0) 
                  #line 5832 
                  ret = hclge_config_key(hdev,(unsigned char)0,rule);
    #line 5834 
    if (ret != 0) {
      #line 5835 
      _dev_warn(& (hdev->pdev)->dev,(char *)"Restore rule %u failed, remove it\n",(int)rule->location);
      #line 5838 
      cif_clear_bit_0((long)rule->location,(unsigned long *)(& hdev->fd_bmap));
      #line 5839 
      hlist_del(& rule->rule_node);
      #line 5840 
      kfree((void *)rule);
      #line 5841 
      hdev->hclge_fd_rule_num = (u16)((int)hdev->hclge_fd_rule_num - 1);
    }
    {
      #line 5829 
      struct hlist_node *____ptr_0 = node;
      #line 5829 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 5829 
        __mptr_0 = (void *)____ptr_0;
        #line 5829 
        tmp_4 = ((struct hclge_fd_rule *)__mptr_0);
      }
      else 
           #line 5829 
           tmp_4 = (struct hclge_fd_rule *)0;
      }
    #line 5829 
    rule = tmp_4;
  }
  #line 5845 
  if ((unsigned int)hdev->hclge_fd_rule_num != 0U) 
                                                   #line 5846 
                                                   hdev->fd_active_type = HCLGE_FD_EP_ACTIVE;
  #line 5848 
  cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
  #line 5850 
  return 0;
}

#line 5853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_fd_rule_cnt(struct hnae3_handle *handle, struct ethtool_rxnfc *cmd)
{
  #line 5856 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 5857 
  struct hclge_dev *hdev = vport->back;
  #line 5859 
  if (((hdev->ae_dev)->flag & 64U) == 0U) 
                                          #line 5860 
                                          return -95;
  #line 5862 
  cmd->__anonCompField_ethtool_rxnfc_99.rule_cnt = (unsigned int)hdev->hclge_fd_rule_num;
  #line 5863 
  cmd->data = (unsigned long long)hdev->fd_cfg.rule_num[0];
  #line 5865 
  return 0;
}

#line 5868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_fd_rule_info(struct hnae3_handle *handle, struct ethtool_rxnfc *cmd)
{
  #line 5884 
  struct hclge_fd_rule *tmp_1;
  #line 5884 
  void *__mptr;
  #line 5874 
  struct ethtool_rx_flow_spec *fs;
  #line 5875 
  struct hlist_node *node2;
  #line 5871 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 5872 
  struct hclge_fd_rule *rule = (struct hclge_fd_rule *)0;
  #line 5873 
  struct hclge_dev *hdev = vport->back;
  #line 5877 
  if (((hdev->ae_dev)->flag & 64U) == 0U) 
                                          #line 5878 
                                          return -95;
  #line 5880 
  fs = & cmd->fs;
  #line 5882 
  cif_spin_lock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
  {
    #line 5884 
    struct hlist_node *____ptr = hdev->fd_rule_list.first;
    #line 5884 
    if (____ptr != (struct hlist_node *)0) {
      #line 5884 
      __mptr = (void *)____ptr;
      #line 5884 
      tmp_1 = ((struct hclge_fd_rule *)__mptr);
    }
    else 
         #line 5884 
         tmp_1 = (struct hclge_fd_rule *)0;
    }
  #line 5884 
  rule = tmp_1;
  #line 5884 
  while (1) {
    #line 5884 
    void *__mptr_0;
    #line 5884 
    struct hclge_fd_rule *tmp_4;
    #line 5884 
    if (rule != (struct hclge_fd_rule *)0) {
      #line 5884 
      node2 = rule->rule_node.next;
      #line 5884 
      if (! (1 != 0)) 
                      #line 5884 
                      break;
    }
    else 
         #line 5884 
         break;
    #line 5885 
    if ((unsigned int)rule->location >= fs->location) 
                                                      #line 5886 
                                                      break;
    {
      #line 5884 
      struct hlist_node *____ptr_0 = node2;
      #line 5884 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 5884 
        __mptr_0 = (void *)____ptr_0;
        #line 5884 
        tmp_4 = ((struct hclge_fd_rule *)__mptr_0);
      }
      else 
           #line 5884 
           tmp_4 = (struct hclge_fd_rule *)0;
      }
    #line 5884 
    rule = tmp_4;
  }
  #line 5889 
  if (rule == (struct hclge_fd_rule *)0 || fs->location != (unsigned int)rule->location) {
    #line 5890 
    cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
    #line 5892 
    return -2;
  }
  #line 5895 
  fs->flow_type = rule->flow_type;
  #line 5896 
  switch (fs->flow_type & 1073741823U) {
    #line 5897 
    case (unsigned int)3: 
                          #line 5897 
    ;
    #line 5898 
    case (unsigned int)1: 
                          #line 5898 
    ;
    #line 5899 
    case (unsigned int)2: 
                          #line 5899 
    ;
    #line 5900 
    fs->h_u.tcp_ip4_spec.ip4src = __builtin_bswap32(rule->tuples.src_ip[3]);
    #line 5902 
    if (((unsigned long)rule->unused_tuple & 16777216UL) == 0UL) 
                                                                 #line 5903 
                                                                 fs->m_u.tcp_ip4_spec.ip4src = __builtin_bswap32(rule->tuples_mask.src_ip[3]); else 
                                                                    #line 5902 
                                                                    fs->m_u.tcp_ip4_spec.ip4src = 0U;
    #line 5906 
    fs->h_u.tcp_ip4_spec.ip4dst = __builtin_bswap32(rule->tuples.dst_ip[3]);
    #line 5908 
    if (((unsigned long)rule->unused_tuple & 33554432UL) == 0UL) 
                                                                 #line 5909 
                                                                 fs->m_u.tcp_ip4_spec.ip4dst = __builtin_bswap32(rule->tuples_mask.dst_ip[3]); else 
                                                                    #line 5908 
                                                                    fs->m_u.tcp_ip4_spec.ip4dst = 0U;
    #line 5912 
    fs->h_u.tcp_ip4_spec.psrc = __builtin_bswap16((unsigned short)((int)rule->tuples.src_port));
    #line 5913 
    if (((unsigned long)rule->unused_tuple & 134217728UL) == 0UL) 
                                                                  #line 5915 
                                                                  fs->m_u.tcp_ip4_spec.psrc = __builtin_bswap16((unsigned short)((int)rule->tuples_mask.src_port)); else 
                                                                    #line 5913 
                                                                    fs->m_u.tcp_ip4_spec.psrc = (unsigned short)0U;
    #line 5917 
    fs->h_u.tcp_ip4_spec.pdst = __builtin_bswap16((unsigned short)((int)rule->tuples.dst_port));
    #line 5918 
    if (((unsigned long)rule->unused_tuple & 268435456UL) == 0UL) 
                                                                  #line 5920 
                                                                  fs->m_u.tcp_ip4_spec.pdst = __builtin_bswap16((unsigned short)((int)rule->tuples_mask.dst_port)); else 
                                                                    #line 5918 
                                                                    fs->m_u.tcp_ip4_spec.pdst = (unsigned short)0U;
    #line 5922 
    fs->h_u.tcp_ip4_spec.tos = rule->tuples.ip_tos;
    #line 5923 
    if (((unsigned long)rule->unused_tuple & 4194304UL) == 0UL) 
                                                                #line 5923 
                                                                fs->m_u.tcp_ip4_spec.tos = rule->tuples_mask.ip_tos; else 
                                                                    #line 5923 
                                                                    fs->m_u.tcp_ip4_spec.tos = (unsigned char)0U;
    #line 5927 
    break;
    #line 5928 
    case (unsigned int)13: 
                           #line 5928 
    ;
    #line 5929 
    fs->h_u.usr_ip4_spec.ip4src = __builtin_bswap32(rule->tuples.src_ip[3]);
    #line 5931 
    if (((unsigned long)rule->unused_tuple & 16777216UL) == 0UL) 
                                                                 #line 5932 
                                                                 fs->m_u.tcp_ip4_spec.ip4src = __builtin_bswap32(rule->tuples_mask.src_ip[3]); else 
                                                                    #line 5931 
                                                                    fs->m_u.tcp_ip4_spec.ip4src = 0U;
    #line 5935 
    fs->h_u.usr_ip4_spec.ip4dst = __builtin_bswap32(rule->tuples.dst_ip[3]);
    #line 5937 
    if (((unsigned long)rule->unused_tuple & 33554432UL) == 0UL) 
                                                                 #line 5938 
                                                                 fs->m_u.usr_ip4_spec.ip4dst = __builtin_bswap32(rule->tuples_mask.dst_ip[3]); else 
                                                                    #line 5937 
                                                                    fs->m_u.usr_ip4_spec.ip4dst = 0U;
    #line 5941 
    fs->h_u.usr_ip4_spec.tos = rule->tuples.ip_tos;
    #line 5942 
    if (((unsigned long)rule->unused_tuple & 4194304UL) == 0UL) 
                                                                #line 5942 
                                                                fs->m_u.usr_ip4_spec.tos = rule->tuples_mask.ip_tos; else 
                                                                    #line 5942 
                                                                    fs->m_u.usr_ip4_spec.tos = (unsigned char)0U;
    #line 5946 
    fs->h_u.usr_ip4_spec.proto = rule->tuples.ip_proto;
    #line 5947 
    if (((unsigned long)rule->unused_tuple & 8388608UL) == 0UL) 
                                                                #line 5947 
                                                                fs->m_u.usr_ip4_spec.proto = rule->tuples_mask.ip_proto; else 
                                                                    #line 5947 
                                                                    fs->m_u.usr_ip4_spec.proto = (unsigned char)0U;
    #line 5951 
    fs->h_u.usr_ip4_spec.ip_ver = (unsigned char)1U;
    #line 5953 
    break;
    #line 5954 
    case (unsigned int)7: 
                          #line 5954 
    ;
    #line 5955 
    case (unsigned int)5: 
                          #line 5955 
    ;
    #line 5956 
    case (unsigned int)6: 
                          #line 5956 
    ;
    #line 5957 
    cpu_to_be32_array((__be32 *)(& fs->h_u.tcp_ip6_spec.ip6src),(u32 *)(& rule->tuples.src_ip),4UL);
    #line 5959 
    if (((unsigned long)rule->unused_tuple & 16777216UL) != 0UL) 
                                                                 #line 5960 
                                                                 memset((void *)(& fs->m_u.tcp_ip6_spec.ip6src),0,16UL); else 
                                                                    #line 5963 
                                                                    cpu_to_be32_array((__be32 *)(& fs->m_u.tcp_ip6_spec.ip6src),(u32 *)(& rule->tuples_mask.src_ip),4UL);
    #line 5966 
    cpu_to_be32_array((__be32 *)(& fs->h_u.tcp_ip6_spec.ip6dst),(u32 *)(& rule->tuples.dst_ip),4UL);
    #line 5968 
    if (((unsigned long)rule->unused_tuple & 33554432UL) != 0UL) 
                                                                 #line 5969 
                                                                 memset((void *)(& fs->m_u.tcp_ip6_spec.ip6dst),0,16UL); else 
                                                                    #line 5972 
                                                                    cpu_to_be32_array((__be32 *)(& fs->m_u.tcp_ip6_spec.ip6dst),(u32 *)(& rule->tuples_mask.dst_ip),4UL);
    #line 5975 
    fs->h_u.tcp_ip6_spec.psrc = __builtin_bswap16((unsigned short)((int)rule->tuples.src_port));
    #line 5976 
    if (((unsigned long)rule->unused_tuple & 134217728UL) == 0UL) 
                                                                  #line 5978 
                                                                  fs->m_u.tcp_ip6_spec.psrc = __builtin_bswap16((unsigned short)((int)rule->tuples_mask.src_port)); else 
                                                                    #line 5976 
                                                                    fs->m_u.tcp_ip6_spec.psrc = (unsigned short)0U;
    #line 5980 
    fs->h_u.tcp_ip6_spec.pdst = __builtin_bswap16((unsigned short)((int)rule->tuples.dst_port));
    #line 5981 
    if (((unsigned long)rule->unused_tuple & 268435456UL) == 0UL) 
                                                                  #line 5983 
                                                                  fs->m_u.tcp_ip6_spec.pdst = __builtin_bswap16((unsigned short)((int)rule->tuples_mask.dst_port)); else 
                                                                    #line 5981 
                                                                    fs->m_u.tcp_ip6_spec.pdst = (unsigned short)0U;
    #line 5985 
    break;
    #line 5986 
    case (unsigned int)14: 
                           #line 5986 
    ;
    #line 5987 
    cpu_to_be32_array((__be32 *)(& fs->h_u.usr_ip6_spec.ip6src),(u32 *)(& rule->tuples.src_ip),4UL);
    #line 5989 
    if (((unsigned long)rule->unused_tuple & 16777216UL) != 0UL) 
                                                                 #line 5990 
                                                                 memset((void *)(& fs->m_u.usr_ip6_spec.ip6src),0,16UL); else 
                                                                    #line 5993 
                                                                    cpu_to_be32_array((__be32 *)(& fs->m_u.usr_ip6_spec.ip6src),(u32 *)(& rule->tuples_mask.src_ip),4UL);
    #line 5996 
    cpu_to_be32_array((__be32 *)(& fs->h_u.usr_ip6_spec.ip6dst),(u32 *)(& rule->tuples.dst_ip),4UL);
    #line 5998 
    if (((unsigned long)rule->unused_tuple & 33554432UL) != 0UL) 
                                                                 #line 5999 
                                                                 memset((void *)(& fs->m_u.usr_ip6_spec.ip6dst),0,16UL); else 
                                                                    #line 6002 
                                                                    cpu_to_be32_array((__be32 *)(& fs->m_u.usr_ip6_spec.ip6dst),(u32 *)(& rule->tuples_mask.dst_ip),4UL);
    #line 6005 
    fs->h_u.usr_ip6_spec.l4_proto = rule->tuples.ip_proto;
    #line 6006 
    if (((unsigned long)rule->unused_tuple & 8388608UL) == 0UL) 
                                                                #line 6006 
                                                                fs->m_u.usr_ip6_spec.l4_proto = rule->tuples_mask.ip_proto; else 
                                                                    #line 6006 
                                                                    fs->m_u.usr_ip6_spec.l4_proto = (unsigned char)0U;
    #line 6010 
    break;
    #line 6011 
    case (unsigned int)18: 
                           #line 6011 
    ;
    #line 6012 
    ether_addr_copy((u8 *)(& fs->h_u.ether_spec.h_source),(u8 *)(& rule->tuples.src_mac));
    #line 6014 
    if (((unsigned long)rule->unused_tuple & 131072UL) != 0UL) 
                                                               #line 6015 
                                                               eth_zero_addr((u8 *)(& fs->m_u.ether_spec.h_source)); else 
                                                                    #line 6017 
                                                                    ether_addr_copy((u8 *)(& fs->m_u.ether_spec.h_source),(u8 *)(& rule->tuples_mask.src_mac));
    #line 6020 
    ether_addr_copy((u8 *)(& fs->h_u.ether_spec.h_dest),(u8 *)(& rule->tuples.dst_mac));
    #line 6022 
    if (((unsigned long)rule->unused_tuple & 65536UL) != 0UL) 
                                                              #line 6023 
                                                              eth_zero_addr((u8 *)(& fs->m_u.ether_spec.h_dest)); else 
                                                                    #line 6025 
                                                                    ether_addr_copy((u8 *)(& fs->m_u.ether_spec.h_dest),(u8 *)(& rule->tuples_mask.dst_mac));
    #line 6028 
    fs->h_u.ether_spec.h_proto = __builtin_bswap16((unsigned short)((int)rule->tuples.ether_proto));
    #line 6030 
    if (((unsigned long)rule->unused_tuple & 1048576UL) == 0UL) 
                                                                #line 6032 
                                                                fs->m_u.ether_spec.h_proto = __builtin_bswap16((unsigned short)((int)rule->tuples_mask.ether_proto)); else 
                                                                    #line 6030 
                                                                    fs->m_u.ether_spec.h_proto = (unsigned short)0U;
    #line 6034 
    break;
    #line 6035 
    default: 
             #line 6035 
    ;
    #line 6036 
    cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
    #line 6037 
    return -95;
  }
  #line 6040 
  if ((fs->flow_type & 2147483648U) != 0U) {
    #line 6041 
    fs->h_ext.vlan_tci = __builtin_bswap16((unsigned short)((int)rule->tuples.vlan_tag1));
    #line 6042 
    if (((unsigned long)rule->unused_tuple & 262144UL) == 0UL) 
                                                               #line 6045 
                                                               fs->m_ext.vlan_tci = __builtin_bswap16((unsigned short)((int)rule->tuples_mask.vlan_tag1)); else 
                                                                    #line 6042 
                                                                    fs->m_ext.vlan_tci = (unsigned short)65295U;
  }
  #line 6048 
  if ((fs->flow_type & 1073741824U) != 0U) {
    #line 6049 
    ether_addr_copy((u8 *)(& fs->h_ext.h_dest),(u8 *)(& rule->tuples.dst_mac));
    #line 6050 
    if (((unsigned long)rule->unused_tuple & 65536UL) != 0UL) 
                                                              #line 6051 
                                                              eth_zero_addr((u8 *)(& fs->m_u.ether_spec.h_dest)); else 
                                                                    #line 6053 
                                                                    ether_addr_copy((u8 *)(& fs->m_u.ether_spec.h_dest),(u8 *)(& rule->tuples_mask.dst_mac));
  }
  #line 6057 
  if ((unsigned int)rule->action == 1U) 
                                        #line 6058 
                                        fs->ring_cookie = 18446744073709551615ULL;
  else {
    #line 6060 
    u64 vf_id;
    #line 6062 
    fs->ring_cookie = (unsigned long long)rule->queue_id;
    #line 6063 
    vf_id = (unsigned long long)rule->vf_id;
    #line 6064 
    vf_id <<= 32;
    #line 6065 
    fs->ring_cookie |= vf_id;
  }
  #line 6068 
  cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
  #line 6070 
  return 0;
}

#line 6073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_all_rules(struct hnae3_handle *handle, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  #line 6088 
  struct hclge_fd_rule *tmp_1;
  #line 6088 
  void *__mptr;
  #line 6078 
  struct hclge_fd_rule *rule;
  #line 6079 
  struct hlist_node *node2;
  #line 6076 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 6077 
  struct hclge_dev *hdev = vport->back;
  #line 6080 
  int cnt = 0;
  #line 6082 
  if (((hdev->ae_dev)->flag & 64U) == 0U) 
                                          #line 6083 
                                          return -95;
  #line 6085 
  cmd->data = (unsigned long long)hdev->fd_cfg.rule_num[0];
  #line 6087 
  cif_spin_lock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
  {
    #line 6088 
    struct hlist_node *____ptr = hdev->fd_rule_list.first;
    #line 6088 
    if (____ptr != (struct hlist_node *)0) {
      #line 6088 
      __mptr = (void *)____ptr;
      #line 6088 
      tmp_1 = ((struct hclge_fd_rule *)__mptr);
    }
    else 
         #line 6088 
         tmp_1 = (struct hclge_fd_rule *)0;
    }
  #line 6088 
  rule = tmp_1;
  #line 6088 
  while (1) {
    #line 6088 
    void *__mptr_0;
    #line 6088 
    struct hclge_fd_rule *tmp_4;
    #line 6088 
    if (rule != (struct hclge_fd_rule *)0) {
      #line 6088 
      node2 = rule->rule_node.next;
      #line 6088 
      if (! (1 != 0)) 
                      #line 6088 
                      break;
    }
    else 
         #line 6088 
         break;
    #line 6090 
    if (cmd->__anonCompField_ethtool_rxnfc_99.rule_cnt == (unsigned int)cnt) {
      #line 6091 
      cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
      #line 6092 
      return -90;
    }
    #line 6095 
    *(rule_locs + (unsigned long)cnt) = (unsigned int)rule->location;
    #line 6096 
    cnt ++;
    {
      #line 6088 
      struct hlist_node *____ptr_0 = node2;
      #line 6088 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 6088 
        __mptr_0 = (void *)____ptr_0;
        #line 6088 
        tmp_4 = ((struct hclge_fd_rule *)__mptr_0);
      }
      else 
           #line 6088 
           tmp_4 = (struct hclge_fd_rule *)0;
      }
    #line 6088 
    rule = tmp_4;
  }
  #line 6099 
  cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
  #line 6101 
  cmd->__anonCompField_ethtool_rxnfc_99.rule_cnt = (unsigned int)cnt;
  #line 6103 
  return 0;
}

#line 6106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_fd_get_flow_tuples(struct flow_keys *fkeys, struct hclge_fd_rule_tuples *tuples)
{
  #line 6109 
  tuples->ether_proto = __builtin_bswap16((unsigned short)((int)fkeys->basic.n_proto));
  #line 6110 
  tuples->ip_proto = fkeys->basic.ip_proto;
  #line 6111 
  tuples->dst_port = __builtin_bswap16((unsigned short)((int)fkeys->ports.__anonCompField_flow_dissector_key_ports_77.__anonCompField___anonunion_472_76.dst));
  #line 6113 
  if ((unsigned int)fkeys->basic.n_proto == 8U) {
    #line 6114 
    tuples->src_ip[3] = __builtin_bswap32(fkeys->addrs.__anonCompField_flow_dissector_key_addrs_75.v4addrs.src);
    #line 6115 
    tuples->dst_ip[3] = __builtin_bswap32(fkeys->addrs.__anonCompField_flow_dissector_key_addrs_75.v4addrs.dst);
  }
  else {
    #line 6117 
    memcpy((void *)(& tuples->src_ip),(void *)(& fkeys->addrs.__anonCompField_flow_dissector_key_addrs_75.v6addrs.src.in6_u.u6_addr32),16UL);
    #line 6120 
    memcpy((void *)(& tuples->dst_ip),(void *)(& fkeys->addrs.__anonCompField_flow_dissector_key_addrs_75.v6addrs.dst.in6_u.u6_addr32),16UL);
  }
  #line 6123 
  return;
}

#line 6128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static struct hclge_fd_rule *hclge_fd_search_flow_keys(struct hclge_dev *hdev, struct hclge_fd_rule_tuples *tuples)
{
  #line 6134 
  struct hclge_fd_rule *tmp_0;
  #line 6134 
  void *__mptr;
  #line 6132 
  struct hlist_node *node;
  #line 6131 
  struct hclge_fd_rule *rule = (struct hclge_fd_rule *)0;
  {
    #line 6134 
    struct hlist_node *____ptr = hdev->fd_rule_list.first;
    #line 6134 
    if (____ptr != (struct hlist_node *)0) {
      #line 6134 
      __mptr = (void *)____ptr;
      #line 6134 
      tmp_0 = ((struct hclge_fd_rule *)__mptr);
    }
    else 
         #line 6134 
         tmp_0 = (struct hclge_fd_rule *)0;
    }
  #line 6134 
  rule = tmp_0;
  #line 6134 
  while (1) {
    #line 6134 
    void *__mptr_0;
    #line 6134 
    struct hclge_fd_rule *tmp_3;
    #line 6134 
    if (rule != (struct hclge_fd_rule *)0) {
      #line 6134 
      node = rule->rule_node.next;
      #line 6134 
      if (! (1 != 0)) 
                      #line 6134 
                      break;
    }
    else 
         #line 6134 
         break;
    #line 6135 
    if (memcmp((void *)tuples,(void *)(& rule->tuples),56UL) == 0) 
                                                                   #line 6136 
                                                                   return rule;
    {
      #line 6134 
      struct hlist_node *____ptr_0 = node;
      #line 6134 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 6134 
        __mptr_0 = (void *)____ptr_0;
        #line 6134 
        tmp_3 = ((struct hclge_fd_rule *)__mptr_0);
      }
      else 
           #line 6134 
           tmp_3 = (struct hclge_fd_rule *)0;
      }
    #line 6134 
    rule = tmp_3;
  }
  #line 6139 
  return (struct hclge_fd_rule *)0;
}

#line 6142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_fd_build_arfs_rule(struct hclge_fd_rule_tuples *tuples, struct hclge_fd_rule *rule)
{
  #line 6145 
  rule->unused_tuple = 138870784U;
  #line 6148 
  rule->action = (unsigned char)0U;
  #line 6149 
  rule->vf_id = (unsigned short)0U;
  #line 6150 
  rule->rule_type = HCLGE_FD_ARFS_ACTIVE;
  #line 6151 
  if ((unsigned int)tuples->ether_proto == 2048U) 
    #line 6152 
    if ((unsigned int)tuples->ip_proto == 6U) 
                                              #line 6153 
                                              rule->flow_type = 1U; else 
                                                                    #line 6155 
                                                                    rule->flow_type = 2U;
  else 
    #line 6157 
    if ((unsigned int)tuples->ip_proto == 6U) 
                                              #line 6158 
                                              rule->flow_type = 5U; else 
                                                                    #line 6160 
                                                                    rule->flow_type = 6U;
  #line 6162 
  memcpy((void *)(& rule->tuples),(void *)tuples,56UL);
  #line 6163 
  memset((void *)(& rule->tuples_mask),255,56UL);
  #line 6164 
  return;
}

#line 6166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_add_fd_entry_by_arfs(struct hnae3_handle *handle, u16 queue_id, u16 flow_id, struct flow_keys *fkeys)
{
  #line 6170 
  struct hclge_fd_rule_tuples new_tuples;
  #line 6172 
  struct hclge_fd_rule *rule;
  #line 6173 
  u16 tmp_queue_id;
  #line 6174 
  u16 bit_id;
  #line 6175 
  int ret;
  #line 6169 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 6171 
  struct hclge_dev *hdev = vport->back;
  #line 6177 
  if (((hdev->ae_dev)->flag & 64U) == 0U) 
                                          #line 6178 
                                          return -95;
  #line 6180 
  memset((void *)(& new_tuples),0,56UL);
  #line 6181 
  hclge_fd_get_flow_tuples(fkeys,& new_tuples);
  #line 6183 
  cif_spin_lock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
  #line 6188 
  if (hdev->fd_active_type == (unsigned int)HCLGE_FD_EP_ACTIVE) {
    #line 6189 
    cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
    #line 6191 
    return -95;
  }
  #line 6199 
  rule = hclge_fd_search_flow_keys(hdev,& new_tuples);
  #line 6200 
  if (rule == (struct hclge_fd_rule *)0) {
    #line 6201 
    bit_id = (unsigned short)find_first_zero_bit((unsigned long *)(& hdev->fd_bmap),4096UL);
    #line 6202 
    if ((unsigned int)bit_id >= hdev->fd_cfg.rule_num[0]) {
      #line 6203 
      cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
      #line 6205 
      return -28;
    }
    #line 6208 
    rule = (struct hclge_fd_rule *)kzalloc_0(152UL,2592U);
    #line 6209 
    if (rule == (struct hclge_fd_rule *)0) {
      #line 6210 
      cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
      #line 6212 
      return -12;
    }
    #line 6215 
    cif_set_bit_0((long)bit_id,(unsigned long *)(& hdev->fd_bmap));
    #line 6216 
    rule->location = bit_id;
    #line 6217 
    rule->flow_id = flow_id;
    #line 6218 
    rule->queue_id = queue_id;
    #line 6219 
    hclge_fd_build_arfs_rule(& new_tuples,rule);
    #line 6220 
    ret = hclge_fd_config_rule(hdev,rule);
    #line 6222 
    cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
    #line 6224 
    if (ret != 0) 
                  #line 6225 
                  return ret;
    #line 6227 
    return (int)rule->location;
  }
  #line 6230 
  cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
  #line 6232 
  if ((int)rule->queue_id == (int)queue_id) 
                                            #line 6233 
                                            return (int)rule->location;
  #line 6235 
  tmp_queue_id = rule->queue_id;
  #line 6236 
  rule->queue_id = queue_id;
  #line 6237 
  ret = hclge_config_action(hdev,(unsigned char)0,rule);
  #line 6238 
  if (ret != 0) {
    #line 6239 
    rule->queue_id = tmp_queue_id;
    #line 6240 
    return ret;
  }
  #line 6243 
  return (int)rule->location;
}

#line 6246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_rfs_filter_expire(struct hclge_dev *hdev)
{
  #line 6270 
  struct hclge_fd_rule *tmp_7;
  #line 6259 
  void *__mptr;
  #line 6270 
  void *__mptr_1;
  #line 6259 
  struct hclge_fd_rule *tmp_0;
  #line 6250 
  struct hclge_fd_rule *rule;
  #line 6251 
  struct hlist_node *node;
  #line 6249 
  struct hnae3_handle *handle = & (hdev->vport)->nic;
  #line 6252 
  struct hlist_head del_list = {.first = (struct hlist_node *)0};
  #line 6254 
  cif_spin_lock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
  #line 6255 
  if (hdev->fd_active_type != (unsigned int)HCLGE_FD_ARFS_ACTIVE) {
    #line 6256 
    cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
    #line 6257 
    return;
  }
  {
    #line 6259 
    struct hlist_node *____ptr = hdev->fd_rule_list.first;
    #line 6259 
    if (____ptr != (struct hlist_node *)0) {
      #line 6259 
      __mptr = (void *)____ptr;
      #line 6259 
      tmp_0 = ((struct hclge_fd_rule *)__mptr);
    }
    else 
         #line 6259 
         tmp_0 = (struct hclge_fd_rule *)0;
    }
  #line 6259 
  rule = tmp_0;
  #line 6259 
  while (1) {
    #line 6259 
    void *__mptr_0;
    #line 6259 
    struct hclge_fd_rule *tmp_3;
    #line 6259 
    if (rule != (struct hclge_fd_rule *)0) {
      #line 6259 
      node = rule->rule_node.next;
      #line 6259 
      if (! (1 != 0)) 
                      #line 6259 
                      break;
    }
    else 
         #line 6259 
         break;
    #line 6260 
    if ((int)rps_may_expire_flow(handle->__anonCompField_hnae3_handle_167.netdev,
                            (unsigned short)((int)rule->queue_id),
                            (unsigned int)rule->flow_id,
                            (unsigned short)((int)rule->location)) != 0) {
      #line 6262 
      hlist_del_init(& rule->rule_node);
      #line 6263 
      hlist_add_head(& rule->rule_node,& del_list);
      #line 6264 
      hdev->hclge_fd_rule_num = (u16)((int)hdev->hclge_fd_rule_num - 1);
      #line 6265 
      cif_clear_bit_0((long)rule->location,(unsigned long *)(& hdev->fd_bmap));
    }
    {
      #line 6259 
      struct hlist_node *____ptr_0 = node;
      #line 6259 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 6259 
        __mptr_0 = (void *)____ptr_0;
        #line 6259 
        tmp_3 = ((struct hclge_fd_rule *)__mptr_0);
      }
      else 
           #line 6259 
           tmp_3 = (struct hclge_fd_rule *)0;
      }
    #line 6259 
    rule = tmp_3;
  }
  #line 6268 
  cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(& hdev->fd_rule_lock);
  {
    #line 6270 
    struct hlist_node *____ptr_1 = del_list.first;
    #line 6270 
    if (____ptr_1 != (struct hlist_node *)0) {
      #line 6270 
      __mptr_1 = (void *)____ptr_1;
      #line 6270 
      tmp_7 = ((struct hclge_fd_rule *)__mptr_1);
    }
    else 
         #line 6270 
         tmp_7 = (struct hclge_fd_rule *)0;
    }
  #line 6270 
  rule = tmp_7;
  #line 6270 
  while (1) {
    #line 6270 
    void *__mptr_2;
    #line 6270 
    struct hclge_fd_rule *tmp_10;
    #line 6270 
    if (rule != (struct hclge_fd_rule *)0) {
      #line 6270 
      node = rule->rule_node.next;
      #line 6270 
      if (! (1 != 0)) 
                      #line 6270 
                      break;
    }
    else 
         #line 6270 
         break;
    #line 6271 
    hclge_fd_tcam_config(hdev,(unsigned char)0,(_Bool)1,(int)rule->location,(u8 *)0U,(_Bool)0);
    #line 6273 
    kfree((void *)rule);
    {
      #line 6270 
      struct hlist_node *____ptr_2 = node;
      #line 6270 
      if (____ptr_2 != (struct hlist_node *)0) {
        #line 6270 
        __mptr_2 = (void *)____ptr_2;
        #line 6270 
        tmp_10 = ((struct hclge_fd_rule *)__mptr_2);
      }
      else 
           #line 6270 
           tmp_10 = (struct hclge_fd_rule *)0;
      }
    #line 6270 
    rule = tmp_10;
  }
  #line 6275 
  return;
}

#line 6278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_clear_arfs_rules(struct hnae3_handle *handle)
{
  #line 6281 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 6282 
  struct hclge_dev *hdev = vport->back;
  #line 6284 
  if (hdev->fd_active_type == (unsigned int)HCLGE_FD_ARFS_ACTIVE) 
                                                                  #line 6285 
                                                                  hclge_del_all_fd_entries(handle,(_Bool)1);
  #line 6286 
  return;
}

#line 6289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static bool hclge_get_hw_reset_stat(struct hnae3_handle *handle)
{
  #line 6294 
  int tmp_2;
  #line 6291 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 6292 
  struct hclge_dev *hdev = vport->back;
  #line 6294 
  if (hclge_read_reg_1((u8 *)hdev->hw.io_base,133632U) != 0U) 
                                                              #line 6294 
                                                              tmp_2 = 1;
  else {
    #line 6294 
    if (hclge_read_reg_1((u8 *)hdev->hw.io_base,134144U) != 0U) 
                                                                #line 6294 
                                                                tmp_2 = 1; else 
                                                                    #line 6294 
                                                                    tmp_2 = 0;
  }
  #line 6294 
  return (_Bool)(tmp_2 != 0);
}

#line 6298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static bool hclge_ae_dev_resetting(struct hnae3_handle *handle)
{
  #line 6300 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 6301 
  struct hclge_dev *hdev = vport->back;
  #line 6303 
  return test_bit(9L,& hdev->state);
}

#line 6306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static unsigned long hclge_ae_dev_reset_cnt(struct hnae3_handle *handle)
{
  #line 6308 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 6309 
  struct hclge_dev *hdev = vport->back;
  #line 6311 
  return (unsigned long)hdev->rst_stats.hw_reset_done_cnt;
}

#line 6314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_enable_fd(struct hnae3_handle *handle, bool enable)
{
  #line 6318 
  bool clear;
  #line 6316 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 6317 
  struct hclge_dev *hdev = vport->back;
  #line 6320 
  hdev->fd_en = (unsigned char)enable;
  #line 6321 
  clear = (_Bool)(hdev->fd_active_type == (unsigned int)HCLGE_FD_ARFS_ACTIVE);
  #line 6322 
  if (! enable) 
                #line 6323 
                hclge_del_all_fd_entries(handle,(_Bool)((bool)((int)clear) != 0)); else 
                                                                    #line 6325 
                                                                    hclge_restore_fd_entries(handle);
  #line 6326 
  return;
}

#line 6328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_cfg_mac_mode(struct hclge_dev *hdev, bool enable)
{
  #line 6330 
  struct hclge_desc desc;
  #line 6334 
  int ret;
  #line 6331 
  struct hclge_config_mac_mode_cmd *req = (struct hclge_config_mac_mode_cmd *)(& desc.data);
  #line 6333 
  u32 loop_en = 0U;
  #line 6336 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_CONFIG_MAC_MODE,(_Bool)0);
  #line 6338 
  if ((int)enable != 0) {
    #line 6339 
    loop_en &= 4294967231U;
    #line 6339 
    loop_en |= 64U;
    #line 6340 
    loop_en &= 4294967167U;
    #line 6340 
    loop_en |= 128U;
    #line 6341 
    loop_en &= 4294965247U;
    #line 6341 
    loop_en |= 2048U;
    #line 6342 
    loop_en &= 4294963199U;
    #line 6342 
    loop_en |= 4096U;
    #line 6343 
    loop_en &= 4294836223U;
    #line 6343 
    loop_en |= 131072U;
    #line 6344 
    loop_en &= 4293918719U;
    #line 6344 
    loop_en |= 1048576U;
    #line 6345 
    loop_en &= 4294443007U;
    #line 6345 
    loop_en |= 524288U;
    #line 6346 
    loop_en &= 4290772991U;
    #line 6346 
    loop_en |= 4194304U;
    #line 6347 
    loop_en &= 4294705151U;
    #line 6347 
    loop_en |= 262144U;
    #line 6348 
    loop_en &= 4292870143U;
    #line 6348 
    loop_en |= 2097152U;
  }
  #line 6351 
  req->txrx_pad_fcs_loop_en = loop_en;
  #line 6353 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 6354 
  if (ret != 0) 
                #line 6355 
                _dev_err(& (hdev->pdev)->dev,(char *)"mac enable fail, ret =%d.\n",ret);
  #line 6356 
  return;
}

#line 6359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_config_switch_param(struct hclge_dev *hdev, int vfid, u8 switch_param, u8 param_mask)
{
  #line 6362 
  struct hclge_mac_vlan_switch_cmd *req;
  #line 6363 
  struct hclge_desc desc;
  #line 6364 
  u32 func_id;
  #line 6365 
  int ret;
  #line 6367 
  func_id = hclge_get_port_number((enum HLCGE_PORT_TYPE)HOST_PORT,(unsigned char)0,(unsigned char)((int)((unsigned char)vfid)),(unsigned char)0);
  #line 6368 
  req = (struct hclge_mac_vlan_switch_cmd *)(& desc.data);
  #line 6371 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_MAC_VLAN_SWITCH_PARAM,(_Bool)1);
  #line 6373 
  req->roce_sel = (unsigned char)0U;
  #line 6374 
  req->func_id = func_id;
  #line 6376 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 6377 
  if (ret != 0) {
    #line 6378 
    _dev_err(& (hdev->pdev)->dev,(char *)"read mac vlan switch parameter fail, ret = %d\n",ret);
    #line 6380 
    return ret;
  }
  #line 6384 
  hclge_cmd_reuse_desc(& desc,(_Bool)0);
  #line 6385 
  req->switch_param = (unsigned char)(((int)req->switch_param & (int)param_mask) | (int)switch_param);
  #line 6386 
  req->param_mask = param_mask;
  #line 6388 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 6389 
  if (ret != 0) 
                #line 6390 
                _dev_err(& (hdev->pdev)->dev,(char *)"set mac vlan switch parameter fail, ret = %d\n",ret);
  #line 6392 
  return ret;
}

#line 6395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_phy_link_status_wait(struct hclge_dev *hdev, int link_ret)
{
  #line 6402 
  int ret;
  #line 6400 
  struct phy_device *phydev = hdev->hw.mac.phydev;
  #line 6401 
  int i = 0;
  #line 6404 
  while (1) {
    #line 6405 
    ret = phy_read_status(phydev);
    #line 6406 
    if (ret != 0) {
      #line 6407 
      _dev_err(& (hdev->pdev)->dev,(char *)"phy update link status fail, ret = %d\n",ret);
      #line 6409 
      return;
    }
    #line 6412 
    if ((int)phydev->link == link_ret) 
                                       #line 6413 
                                       break;
    #line 6415 
    msleep(10U);
    #line 6416 
    i ++;
    #line 6416 
    if (! (i <= 199)) 
                      #line 6404 
                      break;
  }
  #line 6417 
  return;
}

#line 6419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_mac_link_status_wait(struct hclge_dev *hdev, int link_ret)
{
  #line 6424 
  int ret;
  #line 6423 
  int i = 0;
  #line 6426 
  while (1) {
    #line 6427 
    ret = hclge_get_mac_link_status(hdev);
    #line 6428 
    if (ret < 0) 
                 #line 6429 
                 return ret;
    else 
      #line 6430 
      if (ret == link_ret) 
                           #line 6431 
                           return 0;
    #line 6433 
    msleep(10U);
    #line 6434 
    i ++;
    #line 6434 
    if (! (i <= 99)) 
                     #line 6426 
                     break;
  }
  #line 6435 
  return -16;
}

#line 6438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_mac_phy_link_status_wait(struct hclge_dev *hdev, bool en, bool is_phy)
{
  #line 6444 
  int link_ret;
  #line 6446 
  link_ret = (int)en != 0;
  #line 6448 
  if ((int)is_phy != 0) 
                        #line 6449 
                        hclge_phy_link_status_wait(hdev,link_ret);
  #line 6451 
  return hclge_mac_link_status_wait(hdev,link_ret);
}

#line 6454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_app_loopback(struct hclge_dev *hdev, bool en)
{
  #line 6456 
  struct hclge_config_mac_mode_cmd *req;
  #line 6457 
  struct hclge_desc desc;
  #line 6458 
  u32 loop_en;
  #line 6459 
  int ret;
  #line 6461 
  req = (struct hclge_config_mac_mode_cmd *)(& desc.data[0]);
  #line 6463 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_CONFIG_MAC_MODE,(_Bool)1);
  #line 6464 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 6465 
  if (ret != 0) {
    #line 6466 
    _dev_err(& (hdev->pdev)->dev,(char *)"mac loopback get fail, ret =%d.\n",ret);
    #line 6468 
    return ret;
  }
  #line 6472 
  loop_en = req->txrx_pad_fcs_loop_en;
  {
    #line 6473 
    unsigned int tmp;
    #line 6473 
    loop_en &= 4294934527U;
    #line 6473 
    if ((int)en != 0) 
                      #line 6473 
                      tmp = 32768U; else 
                                         #line 6473 
                                         tmp = 0U;
    #line 6473 
    loop_en = tmp | loop_en;
  }
  {
    #line 6474 
    unsigned int tmp_0;
    #line 6474 
    loop_en &= 4294967231U;
    #line 6474 
    if ((int)en != 0) 
                      #line 6474 
                      tmp_0 = 64U; else 
                                        #line 6474 
                                        tmp_0 = 0U;
    #line 6474 
    loop_en = tmp_0 | loop_en;
  }
  {
    #line 6475 
    unsigned int tmp_1;
    #line 6475 
    loop_en &= 4294967167U;
    #line 6475 
    if ((int)en != 0) 
                      #line 6475 
                      tmp_1 = 128U; else 
                                         #line 6475 
                                         tmp_1 = 0U;
    #line 6475 
    loop_en = tmp_1 | loop_en;
  }
  #line 6477 
  req->txrx_pad_fcs_loop_en = loop_en;
  #line 6482 
  hclge_cmd_reuse_desc(& desc,(_Bool)0);
  #line 6483 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 6484 
  if (ret != 0) 
                #line 6485 
                _dev_err(& (hdev->pdev)->dev,(char *)"mac loopback set fail, ret =%d.\n",ret);
  #line 6487 
  return ret;
}

#line 6490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_cfg_serdes_loopback(struct hclge_dev *hdev, bool en, enum hnae3_loop loop_mode)
{
  #line 6496 
  struct hclge_serdes_lb_cmd *req;
  #line 6497 
  struct hclge_desc desc;
  #line 6498 
  int ret;
  #line 6499 
  u8 loop_mode_b;
  #line 6498 
  int i = 0;
  #line 6501 
  req = (struct hclge_serdes_lb_cmd *)(& desc.data);
  #line 6502 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_SERDES_LOOPBACK,(_Bool)0);
  #line 6504 
  switch ((unsigned int)loop_mode) {
    #line 6505 
    case (unsigned int)1: 
                          #line 6505 
    ;
    #line 6506 
    loop_mode_b = (unsigned char)1U;
    #line 6507 
    break;
    #line 6508 
    case (unsigned int)2: 
                          #line 6508 
    ;
    #line 6509 
    loop_mode_b = (unsigned char)4U;
    #line 6510 
    break;
    #line 6511 
    default: 
             #line 6511 
    ;
    #line 6512 
    _dev_err(& (hdev->pdev)->dev,(char *)"unsupported serdes loopback mode %d\n",(unsigned int)loop_mode);
    #line 6514 
    return -524;
  }
  #line 6517 
  if ((int)en != 0) {
    #line 6518 
    req->enable = loop_mode_b;
    #line 6519 
    req->mask = loop_mode_b;
  }
  else 
       #line 6521 
       req->mask = loop_mode_b;
  #line 6524 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 6525 
  if (ret != 0) {
    #line 6526 
    _dev_err(& (hdev->pdev)->dev,(char *)"serdes loopback set fail, ret = %d\n",ret);
    #line 6528 
    return ret;
  }
  #line 6531 
  while (1) {
    #line 6532 
    msleep(10U);
    #line 6533 
    hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_SERDES_LOOPBACK,(_Bool)1);
    #line 6535 
    ret = hclge_cmd_send(& hdev->hw,& desc,1);
    #line 6536 
    if (ret != 0) {
      #line 6537 
      _dev_err(& (hdev->pdev)->dev,(char *)"serdes loopback get, ret = %d\n",ret);
      #line 6539 
      return ret;
    }
    #line 6541 
    i ++;
    #line 6541 
    if (i <= 99) {
      #line 6541 
      if (! (((unsigned long)req->result & 1UL) == 0UL)) 
                                                         #line 6531 
                                                         break;
    }
    else 
         #line 6531 
         break;
  }
  #line 6544 
  if (((unsigned long)req->result & 1UL) == 0UL) {
    #line 6545 
    _dev_err(& (hdev->pdev)->dev,(char *)"serdes loopback set timeout\n");
    #line 6546 
    return -16;
  }
  else 
    #line 6547 
    if (((unsigned long)req->result & 2UL) == 0UL) {
      #line 6548 
      _dev_err(& (hdev->pdev)->dev,(char *)"serdes loopback set failed in fw\n");
      #line 6549 
      return -5;
    }
  #line 6551 
  return ret;
}

#line 6554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_serdes_loopback(struct hclge_dev *hdev, bool en, enum hnae3_loop loop_mode)
{
  #line 6557 
  int ret;
  #line 6559 
  ret = hclge_cfg_serdes_loopback(hdev,(_Bool)((bool)((int)en) != 0),loop_mode);
  #line 6560 
  if (ret != 0) 
                #line 6561 
                return ret;
  #line 6563 
  hclge_cfg_mac_mode(hdev,(_Bool)((bool)((int)en) != 0));
  #line 6565 
  ret = hclge_mac_phy_link_status_wait(hdev,(_Bool)((bool)((int)en) != 0),(_Bool)0);
  #line 6566 
  if (ret != 0) 
                #line 6567 
                _dev_err(& (hdev->pdev)->dev,(char *)"serdes loopback config mac mode timeout\n");
  #line 6570 
  return ret;
}

#line 6573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_enable_phy_loopback(struct hclge_dev *hdev, struct phy_device *phydev)
{
  #line 6576 
  int ret;
  #line 6578 
  if ((unsigned int)phydev->suspended == 0U) {
    #line 6579 
    ret = phy_suspend(phydev);
    #line 6580 
    if (ret != 0) 
                  #line 6581 
                  return ret;
  }
  #line 6584 
  ret = phy_resume(phydev);
  #line 6585 
  if (ret != 0) 
                #line 6586 
                return ret;
  #line 6588 
  return phy_loopback(phydev,(_Bool)1);
}

#line 6591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_disable_phy_loopback(struct hclge_dev *hdev, struct phy_device *phydev)
{
  #line 6594 
  int ret;
  #line 6596 
  ret = phy_loopback(phydev,(_Bool)0);
  #line 6597 
  if (ret != 0) 
                #line 6598 
                return ret;
  #line 6600 
  return phy_suspend(phydev);
}

#line 6603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_phy_loopback(struct hclge_dev *hdev, bool en)
{
  #line 6606 
  int ret;
  #line 6605 
  struct phy_device *phydev = hdev->hw.mac.phydev;
  #line 6608 
  if (phydev == (struct phy_device *)0) 
                                        #line 6609 
                                        return -524;
  #line 6611 
  if ((int)en != 0) 
                    #line 6612 
                    ret = hclge_enable_phy_loopback(hdev,phydev); else 
                                                                    #line 6614 
                                                                    ret = hclge_disable_phy_loopback(hdev,phydev);
  #line 6615 
  if (ret != 0) {
    #line 6616 
    _dev_err(& (hdev->pdev)->dev,(char *)"set phy loopback fail, ret = %d\n",ret);
    #line 6618 
    return ret;
  }
  #line 6621 
  hclge_cfg_mac_mode(hdev,(_Bool)((bool)((int)en) != 0));
  #line 6623 
  ret = hclge_mac_phy_link_status_wait(hdev,(_Bool)((bool)((int)en) != 0),(_Bool)1);
  #line 6624 
  if (ret != 0) 
                #line 6625 
                _dev_err(& (hdev->pdev)->dev,(char *)"phy loopback config mac mode timeout\n");
  #line 6628 
  return ret;
}

#line 6631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_tqp_enable(struct hclge_dev *hdev, unsigned int tqp_id, int stream_id, bool enable)
{
  #line 6634 
  struct hclge_desc desc;
  #line 6637 
  int ret;
  #line 6635 
  struct hclge_cfg_com_tqp_queue_cmd *req = (struct hclge_cfg_com_tqp_queue_cmd *)(& desc.data);
  #line 6639 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_CFG_COM_TQP_QUEUE,(_Bool)0);
  #line 6640 
  req->tqp_id = (unsigned short)((unsigned int)((unsigned short)tqp_id) & 1023U);
  #line 6641 
  req->stream_id = (unsigned short)stream_id;
  #line 6642 
  if ((int)enable != 0) 
                        #line 6643 
                        req->enable = (unsigned char)((unsigned int)req->enable | 1U);
  #line 6645 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 6646 
  if (ret != 0) 
                #line 6647 
                _dev_err(& (hdev->pdev)->dev,(char *)"Tqp enable fail, status =%d.\n",ret);
  #line 6649 
  return ret;
}

#line 6652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_loopback(struct hnae3_handle *handle, enum hnae3_loop loop_mode, bool en)
{
  #line 6656 
  struct hnae3_knic_private_info *kinfo;
  #line 6658 
  int i;
  #line 6658 
  int ret;
  #line 6655 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 6657 
  struct hclge_dev *hdev = vport->back;
  #line 6665 
  if ((unsigned int)(hdev->pdev)->revision > 32U) {
    #line 6666 
    unsigned int tmp_0;
    #line 6666 
    if ((int)en != 0) 
                      #line 6666 
                      tmp_0 = 0U; else 
                                       #line 6666 
                                       tmp_0 = 2U;
    #line 6666 
    u8 switch_param = (unsigned char)tmp_0;
    #line 6668 
    ret = hclge_config_switch_param(hdev,0,(unsigned char)((int)switch_param),(unsigned char)253);
    #line 6670 
    if (ret != 0) 
                  #line 6671 
                  return ret;
  }
  #line 6674 
  switch ((unsigned int)loop_mode) {
    #line 6675 
    case (unsigned int)0: 
                          #line 6675 
    ;
    #line 6676 
    ret = hclge_set_app_loopback(hdev,(_Bool)((bool)((int)en) != 0));
    #line 6677 
    break;
    #line 6678 
    case (unsigned int)1: 
                          #line 6678 
    ;
    #line 6679 
    case (unsigned int)2: 
                          #line 6679 
    ;
    #line 6680 
    ret = hclge_set_serdes_loopback(hdev,(_Bool)((bool)((int)en) != 0),loop_mode);
    #line 6681 
    break;
    #line 6682 
    case (unsigned int)3: 
                          #line 6682 
    ;
    #line 6683 
    ret = hclge_set_phy_loopback(hdev,(_Bool)((bool)((int)en) != 0));
    #line 6684 
    break;
    #line 6685 
    default: 
             #line 6685 
    ;
    #line 6686 
    ret = -524;
    #line 6687 
    _dev_err(& (hdev->pdev)->dev,(char *)"loop_mode %d is not supported\n",(unsigned int)loop_mode);
    #line 6689 
    break;
  }
  #line 6692 
  if (ret != 0) 
                #line 6693 
                return ret;
  #line 6695 
  kinfo = & vport->nic.__anonCompField_hnae3_handle_167.kinfo;
  #line 6696 
  i = 0;
  #line 6696 
  while ((int)kinfo->num_tqps > i) {
    #line 6697 
    ret = hclge_tqp_enable(hdev,(unsigned int)i,0,(_Bool)((bool)((int)en) != 0));
    #line 6698 
    if (ret != 0) 
                  #line 6699 
                  return ret;
    #line 6696 
    i ++;
  }
  #line 6702 
  return 0;
}

#line 6705  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_default_loopback(struct hclge_dev *hdev)
{
  #line 6707 
  int ret;
  #line 6709 
  ret = hclge_set_app_loopback(hdev,(_Bool)0);
  #line 6710 
  if (ret != 0) 
                #line 6711 
                return ret;
  #line 6713 
  ret = hclge_cfg_serdes_loopback(hdev,(_Bool)0,(enum hnae3_loop)HNAE3_LOOP_SERIAL_SERDES);
  #line 6714 
  if (ret != 0) 
                #line 6715 
                return ret;
  #line 6717 
  return hclge_cfg_serdes_loopback(hdev,(_Bool)0,
                                (enum hnae3_loop)HNAE3_LOOP_PARALLEL_SERDES);
}

#line 6721  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_reset_tqp_stats(struct hnae3_handle *handle)
{
  #line 6724 
  struct hnae3_knic_private_info *kinfo;
  #line 6725 
  struct hnae3_queue *queue;
  #line 6726 
  struct hclge_tqp *tqp;
  #line 6727 
  int i;
  #line 6723 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 6729 
  kinfo = & vport->nic.__anonCompField_hnae3_handle_167.kinfo;
  #line 6730 
  i = 0;
  #line 6730 
  while ((int)kinfo->num_tqps > i) {
    {
      #line 6732 
      void *__mptr;
      #line 6731 
      queue = *(handle->__anonCompField_hnae3_handle_167.kinfo.tqp + (unsigned long)i);
      #line 6732 
      __mptr = (void *)queue;
      #line 6732 
      tqp = ((struct hclge_tqp *)(__mptr + 18446744073709551608U));
      #line 6733 
      memset((void *)(& tqp->tqp_stats),0,16UL);
    }
    #line 6730 
    i ++;
  }
  #line 6735 
  return;
}

#line 6737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_set_timer_task(struct hnae3_handle *handle, bool enable)
{
  #line 6739 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 6740 
  struct hclge_dev *hdev = vport->back;
  #line 6742 
  if ((int)enable != 0) {
    #line 6743 
    ;
    #line 6743 
    hclge_task_schedule(hdev,round_jiffies_relative(250UL));
  }
  else {
    #line 6748 
    cif_set_bit_0(1L,& hdev->state);
    #line 6749 
    cancel_delayed_work_sync(& hdev->service_task);
    #line 6750 
    cif_clear_bit_0(7L,& hdev->state);
  }
  #line 6752 
  return;
}

#line 6754  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_ae_start(struct hnae3_handle *handle)
{
  #line 6756 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 6757 
  struct hclge_dev *hdev = vport->back;
  #line 6760 
  hclge_cfg_mac_mode(hdev,(_Bool)1);
  #line 6761 
  cif_clear_bit_0(1L,& hdev->state);
  #line 6762 
  hdev->hw.mac.link = 0;
  #line 6765 
  hclge_reset_tqp_stats(handle);
  #line 6767 
  hclge_mac_start_phy(hdev);
  #line 6769 
  return 0;
}

#line 6772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_ae_stop(struct hnae3_handle *handle)
{
  #line 6776 
  int i;
  #line 6774 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 6775 
  struct hclge_dev *hdev = vport->back;
  #line 6778 
  cif_set_bit_0(1L,& hdev->state);
  #line 6780 
  hclge_clear_arfs_rules(handle);
  #line 6785 
  if ((int)test_bit(9L,& hdev->state) != 0) 
    #line 6785 
    if (hdev->reset_type != (unsigned int)HNAE3_FUNC_RESET) {
      #line 6787 
      hclge_mac_stop_phy(hdev);
      #line 6788 
      hclge_update_link_status(hdev);
      #line 6789 
      return;
    }
  #line 6792 
  i = 0;
  #line 6792 
  while ((int)handle->__anonCompField_hnae3_handle_167.kinfo.num_tqps > i) {
    #line 6793 
    hclge_reset_tqp(handle,(unsigned short)((int)((unsigned short)i)));
    #line 6792 
    i ++;
  }
  #line 6795 
  hclge_config_mac_tnl_int(hdev,(_Bool)0);
  #line 6798 
  hclge_cfg_mac_mode(hdev,(_Bool)0);
  #line 6800 
  hclge_mac_stop_phy(hdev);
  #line 6803 
  hclge_reset_tqp_stats(handle);
  #line 6804 
  hclge_update_link_status(hdev);
  #line 6805 
  return;
}

#line 6807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_vport_start(struct hclge_vport *vport)
{
  #line 6809 
  cif_set_bit_0(0L,& vport->state);
  #line 6810 
  vport->last_active_jiffies = jiffies;
  #line 6811 
  return 0;
}

#line 6814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
void hclge_vport_stop(struct hclge_vport *vport)
{
  #line 6816 
  cif_clear_bit_0(0L,& vport->state);
  #line 6817 
  return;
}

#line 6819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_client_start(struct hnae3_handle *handle)
{
  #line 6821 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 6823 
  return hclge_vport_start(vport);
}

#line 6826  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_client_stop(struct hnae3_handle *handle)
{
  #line 6828 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 6830 
  hclge_vport_stop(vport);
  #line 6831 
  return;
}

#line 6833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_mac_vlan_cmd_status(struct hclge_vport *vport, u16 cmdq_resp, u8 resp_code, enum hclge_mac_vlan_tbl_opcode op)
{
  #line 6837 
  struct hclge_dev *hdev = vport->back;
  #line 6839 
  if ((unsigned int)cmdq_resp != 0U) {
    #line 6840 
    _dev_err(& (hdev->pdev)->dev,(char *)"cmdq execute failed for get_mac_vlan_cmd_status,status=%u.\n",(int)cmdq_resp);
    #line 6843 
    return -5;
  }
  #line 6846 
  if (op == (unsigned int)HCLGE_MAC_VLAN_ADD) {
    #line 6847 
    if ((unsigned int)resp_code <= 1U) 
                                       #line 6848 
                                       return 0;
    else 
      #line 6849 
      if ((unsigned int)resp_code == 2U) {
        #line 6850 
        _dev_err(& (hdev->pdev)->dev,(char *)"add mac addr failed for uc_overflow.\n");
        #line 6852 
        return -28;
      }
      else 
        #line 6853 
        if ((unsigned int)resp_code == 3U) {
          #line 6854 
          _dev_err(& (hdev->pdev)->dev,(char *)"add mac addr failed for mc_overflow.\n");
          #line 6856 
          return -28;
        }
    #line 6859 
    _dev_err(& (hdev->pdev)->dev,(char *)"add mac addr failed for undefined, code=%u.\n",(int)resp_code);
    #line 6862 
    return -5;
  }
  else 
    #line 6863 
    if (op == (unsigned int)HCLGE_MAC_VLAN_REMOVE) {
      #line 6864 
      if ((unsigned int)resp_code == 0U) 
                                         #line 6865 
                                         return 0;
      else 
        #line 6866 
        if ((unsigned int)resp_code == 1U) {
          {
            #line 6867 
            bool branch;
            #line 6867 
            struct _ddebug __UNIQUE_ID_ddebug460 = {.modname = (char *)"hclge", .function = (char *)"hclge_get_mac_vlan_cmd_status", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c", .format = (char *)"remove mac addr failed for miss.\n", .lineno = (unsigned int)6867U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 6867 
            branch = arch_static_branch(& __UNIQUE_ID_ddebug460.key.dd_key_false.key,(_Bool)0);
            #line 6867 
            if ((long)((long)((int)branch != 0)) != 0L) 
                                                        #line 6867 
                                                        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug460,& (hdev->pdev)->dev,(char *)"remove mac addr failed for miss.\n");
          }
          #line 6869 
          return -2;
        }
      #line 6872 
      _dev_err(& (hdev->pdev)->dev,(char *)"remove mac addr failed for undefined, code=%u.\n",(int)resp_code);
      #line 6875 
      return -5;
    }
    else 
      #line 6876 
      if (op == (unsigned int)HCLGE_MAC_VLAN_LKUP) {
        #line 6877 
        if ((unsigned int)resp_code == 0U) 
                                           #line 6878 
                                           return 0;
        else 
          #line 6879 
          if ((unsigned int)resp_code == 1U) {
            {
              #line 6880 
              bool branch_0;
              #line 6880 
              struct _ddebug __UNIQUE_ID_ddebug461 = {.modname = (char *)"hclge", .function = (char *)"hclge_get_mac_vlan_cmd_status", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c", .format = (char *)"lookup mac addr failed for miss.\n", .lineno = (unsigned int)6880U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
              #line 6880 
              branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug461.key.dd_key_false.key,(_Bool)0);
              #line 6880 
              if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                            #line 6880 
                                                            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug461,& (hdev->pdev)->dev,(char *)"lookup mac addr failed for miss.\n");
            }
            #line 6882 
            return -2;
          }
        #line 6885 
        _dev_err(& (hdev->pdev)->dev,(char *)"lookup mac addr failed for undefined, code=%u.\n",(int)resp_code);
        #line 6888 
        return -5;
      }
  #line 6891 
  _dev_err(& (hdev->pdev)->dev,(char *)"unknown opcode for get_mac_vlan_cmd_status, opcode=%d.\n",(unsigned int)op);
  #line 6894 
  return -22;
}

#line 6897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_update_desc_vfid(struct hclge_desc *desc, int vfid, bool clr)
{
  #line 6901 
  unsigned int word_num;
  #line 6902 
  unsigned int bit_num;
  #line 6904 
  if ((unsigned int)vfid > 255U) 
                                 #line 6905 
                                 return -5;
  #line 6907 
  if ((unsigned int)vfid <= 191U) {
    #line 6908 
    word_num = (unsigned int)(vfid / 32);
    #line 6909 
    bit_num = (unsigned int)(vfid % 32);
    #line 6910 
    if ((int)clr != 0) 
                       #line 6911 
                       (desc + 1U)->data[word_num] &= (unsigned int)(~ (1 << bit_num)); else 
                                                                    #line 6913 
                                                                    (desc + 1U)->data[word_num] |= (unsigned int)(1 << bit_num);
  }
  else {
    #line 6915 
    word_num = (unsigned int)((vfid + -192) / 32);
    #line 6916 
    bit_num = (unsigned int)(vfid % 32);
    #line 6917 
    if ((int)clr != 0) 
                       #line 6918 
                       (desc + 2U)->data[word_num] &= (unsigned int)(~ (1 << bit_num)); else 
                                                                    #line 6920 
                                                                    (desc + 2U)->data[word_num] |= (unsigned int)(1 << bit_num);
  }
  #line 6923 
  return 0;
}

#line 6926  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static bool hclge_is_all_function_id_zero(struct hclge_desc *desc)
{
  #line 6930 
  int i;
  #line 6930 
  int j;
  #line 6932 
  i = 1;
  #line 6932 
  while (i <= 2) {
    #line 6933 
    j = 0;
    #line 6933 
    while (j <= 5) {
      #line 6934 
      if ((desc + (unsigned long)i)->data[j] != 0U) 
                                                    #line 6935 
                                                    return (_Bool)0;
      #line 6933 
      j ++;
    }
    #line 6932 
    i ++;
  }
  #line 6937 
  return (_Bool)1;
}

#line 6940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_prepare_mac_addr(struct hclge_mac_vlan_tbl_entry_cmd *new_req, u8 *addr, bool is_mc)
{
  #line 6943 
  unsigned char *mac_addr = addr;
  #line 6944 
  u32 high_val = (unsigned int)(((((int)*(mac_addr + 2U) << 16) | ((int)*(mac_addr + 3U) << 24)) | (int)*mac_addr) | ((int)*(mac_addr + 1U) << 8));
  #line 6946 
  u32 low_val = (unsigned int)((int)*(mac_addr + 4U) | ((int)*(mac_addr + 5U) << 8));
  #line 6948 
  new_req->flags = (unsigned char)((unsigned int)new_req->flags & 254U);
  #line 6948 
  new_req->flags = (unsigned char)((unsigned int)new_req->flags | 1U);
  #line 6949 
  if ((int)is_mc != 0) {
    #line 6950 
    new_req->entry_type = (unsigned char)((unsigned int)new_req->entry_type & 253U);
    #line 6950 
    new_req->entry_type = (unsigned char)((unsigned int)new_req->entry_type | 2U);
    #line 6951 
    new_req->mc_mac_en = (unsigned char)((unsigned int)new_req->mc_mac_en & 254U);
    #line 6951 
    new_req->mc_mac_en = (unsigned char)((unsigned int)new_req->mc_mac_en | 1U);
  }
  #line 6954 
  new_req->mac_addr_hi32 = high_val;
  #line 6955 
  new_req->mac_addr_lo16 = (unsigned short)low_val;
  #line 6956 
  return;
}

#line 6958  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_remove_mac_vlan_tbl(struct hclge_vport *vport, struct hclge_mac_vlan_tbl_entry_cmd *req)
{
  #line 6962 
  struct hclge_desc desc;
  #line 6963 
  u8 resp_code;
  #line 6964 
  u16 retval;
  #line 6965 
  int ret;
  #line 6961 
  struct hclge_dev *hdev = vport->back;
  #line 6967 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_MAC_VLAN_REMOVE,(_Bool)0);
  #line 6969 
  memcpy((void *)(& desc.data),(void *)req,24UL);
  #line 6971 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 6972 
  if (ret != 0) {
    #line 6973 
    _dev_err(& (hdev->pdev)->dev,(char *)"del mac addr failed for cmd_send, ret =%d.\n",ret);
    #line 6976 
    return ret;
  }
  #line 6978 
  resp_code = (unsigned char)(desc.data[0] >> 8);
  #line 6979 
  retval = desc.retval;
  #line 6981 
  return hclge_get_mac_vlan_cmd_status(vport,(unsigned short)((int)retval),
                                    (unsigned char)((int)resp_code),
                                    (enum hclge_mac_vlan_tbl_opcode)HCLGE_MAC_VLAN_REMOVE);
}

#line 6985  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_lookup_mac_vlan_tbl(struct hclge_vport *vport, struct hclge_mac_vlan_tbl_entry_cmd *req, struct hclge_desc *desc, bool is_mc)
{
  #line 6991 
  u8 resp_code;
  #line 6992 
  u16 retval;
  #line 6993 
  int ret;
  #line 6990 
  struct hclge_dev *hdev = vport->back;
  #line 6995 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_OPC_MAC_VLAN_ADD,(_Bool)1);
  #line 6996 
  if ((int)is_mc != 0) {
    #line 6997 
    desc->flag = (unsigned short)((unsigned int)desc->flag | 4U);
    #line 6998 
    memcpy((void *)(& desc->data),(void *)req,24UL);
    #line 7001 
    hclge_cmd_setup_basic_desc(desc + 1U,(enum hclge_opcode_type)HCLGE_OPC_MAC_VLAN_ADD,(_Bool)1);
    #line 7004 
    (desc + 1U)->flag = (unsigned short)((unsigned int)(desc + 1U)->flag | 4U);
    #line 7005 
    hclge_cmd_setup_basic_desc(desc + 2U,(enum hclge_opcode_type)HCLGE_OPC_MAC_VLAN_ADD,(_Bool)1);
    #line 7008 
    ret = hclge_cmd_send(& hdev->hw,desc,3);
  }
  else {
    #line 7010 
    memcpy((void *)(& desc->data),(void *)req,24UL);
    #line 7013 
    ret = hclge_cmd_send(& hdev->hw,desc,1);
  }
  #line 7015 
  if (ret != 0) {
    #line 7016 
    _dev_err(& (hdev->pdev)->dev,(char *)"lookup mac addr failed for cmd_send, ret =%d.\n",ret);
    #line 7019 
    return ret;
  }
  #line 7021 
  resp_code = (unsigned char)(desc->data[0] >> 8);
  #line 7022 
  retval = desc->retval;
  #line 7024 
  return hclge_get_mac_vlan_cmd_status(vport,(unsigned short)((int)retval),
                                    (unsigned char)((int)resp_code),
                                    (enum hclge_mac_vlan_tbl_opcode)HCLGE_MAC_VLAN_LKUP);
}

#line 7028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_add_mac_vlan_tbl(struct hclge_vport *vport, struct hclge_mac_vlan_tbl_entry_cmd *req, struct hclge_desc *mc_desc)
{
  #line 7033 
  int cfg_status;
  #line 7034 
  u8 resp_code;
  #line 7035 
  u16 retval;
  #line 7036 
  int ret;
  #line 7032 
  struct hclge_dev *hdev = vport->back;
  #line 7038 
  if (mc_desc == (struct hclge_desc *)0) {
    #line 7039 
    struct hclge_desc desc;
    #line 7041 
    hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_MAC_VLAN_ADD,(_Bool)0);
    #line 7044 
    memcpy((void *)(& desc.data),(void *)req,24UL);
    #line 7046 
    ret = hclge_cmd_send(& hdev->hw,& desc,1);
    #line 7047 
    resp_code = (unsigned char)(desc.data[0] >> 8);
    #line 7048 
    retval = desc.retval;
    #line 7050 
    cfg_status = hclge_get_mac_vlan_cmd_status(vport,(unsigned short)((int)retval),(unsigned char)((int)resp_code),(enum hclge_mac_vlan_tbl_opcode)HCLGE_MAC_VLAN_ADD);
  }
  else {
    #line 7054 
    hclge_cmd_reuse_desc(mc_desc,(_Bool)0);
    #line 7055 
    mc_desc->flag = (unsigned short)((unsigned int)mc_desc->flag | 4U);
    #line 7056 
    hclge_cmd_reuse_desc(mc_desc + 1U,(_Bool)0);
    #line 7057 
    (mc_desc + 1U)->flag = (unsigned short)((unsigned int)(mc_desc + 1U)->flag | 4U);
    #line 7058 
    hclge_cmd_reuse_desc(mc_desc + 2U,(_Bool)0);
    #line 7059 
    (mc_desc + 2U)->flag = (unsigned short)((unsigned int)(mc_desc + 2U)->flag & 65531U);
    #line 7060 
    memcpy((void *)(& mc_desc->data),(void *)req,24UL);
    #line 7062 
    ret = hclge_cmd_send(& hdev->hw,mc_desc,3);
    #line 7063 
    resp_code = (unsigned char)(mc_desc->data[0] >> 8);
    #line 7064 
    retval = mc_desc->retval;
    #line 7066 
    cfg_status = hclge_get_mac_vlan_cmd_status(vport,(unsigned short)((int)retval),(unsigned char)((int)resp_code),(enum hclge_mac_vlan_tbl_opcode)HCLGE_MAC_VLAN_ADD);
  }
  #line 7071 
  if (ret != 0) {
    #line 7072 
    _dev_err(& (hdev->pdev)->dev,(char *)"add mac addr failed for cmd_send, ret =%d.\n",ret);
    #line 7075 
    return ret;
  }
  #line 7078 
  return cfg_status;
}

#line 7081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_init_umv_space(struct hclge_dev *hdev)
{
  #line 7084 
  int ret;
  #line 7083 
  u16 allocated_size = (unsigned short)0U;
  #line 7086 
  ret = hclge_set_umv_space(hdev,(unsigned short)((int)hdev->wanted_umv_size),& allocated_size,(_Bool)1);
  #line 7088 
  if (ret != 0) 
                #line 7089 
                return ret;
  #line 7091 
  if ((int)hdev->wanted_umv_size > (int)allocated_size) 
                                                        #line 7092 
                                                        _dev_warn(& (hdev->pdev)->dev,(char *)"Alloc umv space failed, want %u, get %u\n",(int)hdev->wanted_umv_size,(int)allocated_size);
  {
    #line 7096 
    struct lock_class_key __key;
    #line 7096 
    __mutex_init(& hdev->umv_mutex,(char *)"&hdev->umv_mutex",& __key);
  }
  #line 7097 
  hdev->max_umv_size = allocated_size;
  #line 7102 
  hdev->priv_umv_size = (unsigned short)((int)hdev->max_umv_size / ((int)hdev->num_req_vfs + 2));
  #line 7103 
  hdev->share_umv_size = (unsigned short)((int)hdev->priv_umv_size + (int)((unsigned short)((int)hdev->max_umv_size % ((int)hdev->num_req_vfs + 2))));
  #line 7106 
  return 0;
}

#line 7109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_uninit_umv_space(struct hclge_dev *hdev)
{
  #line 7111 
  int ret;
  #line 7113 
  if ((unsigned int)hdev->max_umv_size != 0U) {
    #line 7114 
    ret = hclge_set_umv_space(hdev,(unsigned short)((int)hdev->max_umv_size),(u16 *)0U,(_Bool)0);
    #line 7116 
    if (ret != 0) 
                  #line 7117 
                  return ret;
    #line 7118 
    hdev->max_umv_size = (unsigned short)0U;
  }
  #line 7120 
  mutex_destroy(& hdev->umv_mutex);
  #line 7122 
  return 0;
}

#line 7125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_umv_space(struct hclge_dev *hdev, u16 space_size, u16 *allocated_size, bool is_alloc)
{
  #line 7128 
  struct hclge_umv_spc_alc_cmd *req;
  #line 7129 
  struct hclge_desc desc;
  #line 7130 
  int ret;
  #line 7132 
  req = (struct hclge_umv_spc_alc_cmd *)(& desc.data);
  #line 7133 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_MAC_VLAN_ALLOCATE,(_Bool)0);
  #line 7134 
  if (! is_alloc) {
    #line 7135 
    req->allocate = (unsigned char)((unsigned int)req->allocate & 254U);
    #line 7135 
    req->allocate = (unsigned char)((unsigned int)req->allocate | 1U);
  }
  #line 7137 
  req->space_size = (unsigned int)space_size;
  #line 7139 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 7140 
  if (ret != 0) {
    #line 7141 
    char *tmp;
    #line 7141 
    ;
    #line 7141 
    if ((int)is_alloc != 0) 
                            #line 7141 
                            tmp = (char *)"allocate"; else 
                                                           #line 7141 
                                                           tmp = (char *)"free";
    #line 7141 
    ;
    #line 7141 
    _dev_err(& (hdev->pdev)->dev,(char *)"%s umv space failed for cmd_send, ret =%d\n",tmp,ret);
    #line 7144 
    return ret;
  }
  #line 7147 
  if ((int)is_alloc != 0 && allocated_size != (u16 *)0U) 
                                                         #line 7148 
                                                         *allocated_size = (unsigned short)desc.data[1];
  #line 7150 
  return 0;
}

#line 7153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_reset_umv_space(struct hclge_dev *hdev)
{
  #line 7155 
  struct hclge_vport *vport;
  #line 7156 
  int i;
  #line 7158 
  i = 0;
  #line 7158 
  while ((int)hdev->num_alloc_vport > i) {
    #line 7159 
    vport = hdev->vport + (unsigned long)i;
    #line 7160 
    vport->used_umv_num = (unsigned short)0U;
    #line 7158 
    i ++;
  }
  #line 7163 
  cif_mutex_lock_umv_mutex_of_hclge_dev(& hdev->umv_mutex);
  #line 7164 
  hdev->share_umv_size = (unsigned short)((int)hdev->priv_umv_size + (int)((unsigned short)((int)hdev->max_umv_size % ((int)hdev->num_req_vfs + 2))));
  #line 7166 
  cif_mutex_unlock_umv_mutex_of_hclge_dev(& hdev->umv_mutex);
  #line 7167 
  return;
}

#line 7169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static bool hclge_is_umv_space_full(struct hclge_vport *vport)
{
  #line 7172 
  bool is_full;
  #line 7171 
  struct hclge_dev *hdev = vport->back;
  #line 7174 
  cif_mutex_lock_umv_mutex_of_hclge_dev(& hdev->umv_mutex);
  #line 7175 
  is_full = (_Bool)(((int)vport->used_umv_num >= (int)hdev->priv_umv_size && (unsigned int)hdev->share_umv_size == 0U) != 0);
  #line 7177 
  cif_mutex_unlock_umv_mutex_of_hclge_dev(& hdev->umv_mutex);
  #line 7179 
  return is_full;
}

#line 7182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_update_umv_space(struct hclge_vport *vport, bool is_free)
{
  #line 7184 
  struct hclge_dev *hdev = vport->back;
  #line 7186 
  cif_mutex_lock_umv_mutex_of_hclge_dev(& hdev->umv_mutex);
  #line 7187 
  if ((int)is_free != 0) {
    #line 7188 
    if ((int)vport->used_umv_num > (int)hdev->priv_umv_size) 
                                                             #line 7189 
                                                             hdev->share_umv_size = (u16)((int)hdev->share_umv_size + 1);
    #line 7191 
    if ((unsigned int)vport->used_umv_num != 0U) 
                                                 #line 7192 
                                                 vport->used_umv_num = (u16)((int)vport->used_umv_num - 1);
  }
  else {
    #line 7194 
    if ((int)vport->used_umv_num >= (int)hdev->priv_umv_size && (unsigned int)hdev->share_umv_size != 0U) 
      #line 7196 
      hdev->share_umv_size = (u16)((int)hdev->share_umv_size - 1);
    #line 7197 
    vport->used_umv_num = (u16)((int)vport->used_umv_num + 1);
  }
  #line 7199 
  cif_mutex_unlock_umv_mutex_of_hclge_dev(& hdev->umv_mutex);
  #line 7200 
  return;
}

#line 7202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_add_uc_addr(struct hnae3_handle *handle, unsigned char *addr)
{
  #line 7205 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 7207 
  return hclge_add_uc_addr_common(vport,addr);
}

#line 7210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_add_uc_addr_common(struct hclge_vport *vport, unsigned char *addr)
{
  #line 7214 
  struct hclge_mac_vlan_tbl_entry_cmd req;
  #line 7215 
  struct hclge_desc desc;
  #line 7217 
  int ret;
  #line 7213 
  struct hclge_dev *hdev = vport->back;
  #line 7216 
  u16 egress_port = (unsigned short)0U;
  #line 7220 
  if ((int)is_zero_ether_addr(addr) != 0) 
                                          #line 7220 
                                          goto _LOR;
  else {
    #line 7220 
    if ((int)is_broadcast_ether_addr(addr) != 0) 
                                                 #line 7220 
                                                 goto _LOR;
    else {
      #line 7221 
      if ((int)is_multicast_ether_addr(addr) != 0) {
        #line 7220 
        _LOR: {
                #line 7223 
                ;
                #line 7223 
                ;
                #line 7223 
                _dev_err(& (hdev->pdev)->dev,(char *)"Set_uc mac err! invalid mac:%pM. is_zero:%d,is_br=%d,is_mul=%d\n",addr,(int)is_zero_ether_addr(addr),(int)is_broadcast_ether_addr(addr),(int)is_multicast_ether_addr(addr));
                #line 7228 
                return -22;
              }
      }
    }
  }
  #line 7231 
  memset((void *)(& req),0,24UL);
  #line 7233 
  egress_port = (unsigned short)((unsigned int)egress_port & 63495U);
  #line 7233 
  egress_port = (unsigned short)(((unsigned int)((int)vport->vport_id << 3U) & 2040U) | (unsigned int)egress_port);
  #line 7236 
  req.egress_port = egress_port;
  #line 7238 
  hclge_prepare_mac_addr(& req,addr,(_Bool)0);
  #line 7244 
  ret = hclge_lookup_mac_vlan_tbl(vport,& req,& desc,(_Bool)0);
  #line 7245 
  if (ret == -2) {
    #line 7246 
    if (! hclge_is_umv_space_full(vport)) {
      #line 7247 
      ret = hclge_add_mac_vlan_tbl(vport,& req,(struct hclge_desc *)0);
      #line 7248 
      if (ret == 0) 
                    #line 7249 
                    hclge_update_umv_space(vport,(_Bool)0);
      #line 7250 
      return ret;
    }
    #line 7253 
    _dev_err(& (hdev->pdev)->dev,(char *)"UC MAC table full(%u)\n",(int)hdev->priv_umv_size);
    #line 7256 
    return -28;
  }
  #line 7260 
  if (ret == 0) {
    #line 7261 
    _dev_warn(& (hdev->pdev)->dev,(char *)"VF %u mac(%pM) exists\n",(int)vport->vport_id,addr);
    #line 7263 
    return 0;
  }
  #line 7266 
  _dev_err(& (hdev->pdev)->dev,(char *)"PF failed to add unicast entry(%pM) in the MAC table\n",addr);
  #line 7270 
  return ret;
}

#line 7273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_rm_uc_addr(struct hnae3_handle *handle, unsigned char *addr)
{
  #line 7276 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 7278 
  return hclge_rm_uc_addr_common(vport,addr);
}

#line 7281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_rm_uc_addr_common(struct hclge_vport *vport, unsigned char *addr)
{
  #line 7285 
  struct hclge_mac_vlan_tbl_entry_cmd req;
  #line 7286 
  int ret;
  #line 7284 
  struct hclge_dev *hdev = vport->back;
  #line 7289 
  if ((int)is_zero_ether_addr(addr) != 0) 
                                          #line 7289 
                                          goto _LOR;
  else {
    #line 7289 
    if ((int)is_broadcast_ether_addr(addr) != 0) 
                                                 #line 7289 
                                                 goto _LOR;
    else {
      #line 7290 
      if ((int)is_multicast_ether_addr(addr) != 0) {
        #line 7289 
        _LOR: {
                {
                  #line 7292 
                  bool branch;
                  #line 7292 
                  struct _ddebug __UNIQUE_ID_ddebug462 = {.modname = (char *)"hclge", .function = (char *)"hclge_rm_uc_addr_common", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c", .format = (char *)"Remove mac err! invalid mac:%pM.\n", .lineno = (unsigned int)7292U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
                  #line 7292 
                  branch = arch_static_branch(& __UNIQUE_ID_ddebug462.key.dd_key_false.key,(_Bool)0);
                  #line 7292 
                  if ((long)((long)((int)branch != 0)) != 0L) 
                                                              #line 7292 
                                                              __dynamic_dev_dbg(& __UNIQUE_ID_ddebug462,& (hdev->pdev)->dev,(char *)"Remove mac err! invalid mac:%pM.\n",addr);
                }
                #line 7294 
                return -22;
              }
      }
    }
  }
  #line 7297 
  memset((void *)(& req),0,24UL);
  #line 7298 
  req.entry_type = (unsigned char)((unsigned int)req.entry_type & 254U);
  #line 7298 
  req.entry_type = req.entry_type;
  #line 7299 
  hclge_prepare_mac_addr(& req,addr,(_Bool)0);
  #line 7300 
  ret = hclge_remove_mac_vlan_tbl(vport,& req);
  #line 7301 
  if (ret == 0) 
                #line 7302 
                hclge_update_umv_space(vport,(_Bool)1);
  #line 7304 
  return ret;
}

#line 7307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_add_mc_addr(struct hnae3_handle *handle, unsigned char *addr)
{
  #line 7310 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 7312 
  return hclge_add_mc_addr_common(vport,addr);
}

#line 7315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_add_mc_addr_common(struct hclge_vport *vport, unsigned char *addr)
{
  #line 7319 
  struct hclge_mac_vlan_tbl_entry_cmd req;
  #line 7320 
  struct hclge_desc desc[3U];
  #line 7321 
  int status;
  #line 7318 
  struct hclge_dev *hdev = vport->back;
  #line 7324 
  if (! is_multicast_ether_addr(addr)) {
    #line 7325 
    _dev_err(& (hdev->pdev)->dev,(char *)"Add mc mac err! invalid mac:%pM.\n",addr);
    #line 7328 
    return -22;
  }
  #line 7330 
  memset((void *)(& req),0,24UL);
  #line 7331 
  req.entry_type = (unsigned char)((unsigned int)req.entry_type & 254U);
  #line 7331 
  req.entry_type = req.entry_type;
  #line 7332 
  hclge_prepare_mac_addr(& req,addr,(_Bool)1);
  #line 7333 
  status = hclge_lookup_mac_vlan_tbl(vport,& req,(struct hclge_desc *)(& desc),(_Bool)1);
  #line 7334 
  if (status != 0) {
    #line 7336 
    memset((void *)(& desc[0].data),0,24UL);
    #line 7337 
    memset((void *)(& desc[1].data),0,24UL);
    #line 7338 
    memset((void *)(& desc[2].data),0,24UL);
  }
  #line 7340 
  status = hclge_update_desc_vfid((struct hclge_desc *)(& desc),(int)vport->vport_id,(_Bool)0);
  #line 7341 
  if (status != 0) 
                   #line 7342 
                   return status;
  #line 7343 
  status = hclge_add_mac_vlan_tbl(vport,& req,(struct hclge_desc *)(& desc));
  #line 7345 
  if (status == -28) 
                     #line 7346 
                     _dev_err(& (hdev->pdev)->dev,(char *)"mc mac vlan table is full\n");
  #line 7348 
  return status;
}

#line 7351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_rm_mc_addr(struct hnae3_handle *handle, unsigned char *addr)
{
  #line 7354 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 7356 
  return hclge_rm_mc_addr_common(vport,addr);
}

#line 7359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_rm_mc_addr_common(struct hclge_vport *vport, unsigned char *addr)
{
  #line 7363 
  struct hclge_mac_vlan_tbl_entry_cmd req;
  #line 7364 
  enum hclge_cmd_status status;
  #line 7365 
  struct hclge_desc desc[3U];
  #line 7362 
  struct hclge_dev *hdev = vport->back;
  #line 7368 
  if (! is_multicast_ether_addr(addr)) {
    {
      #line 7369 
      bool branch;
      #line 7369 
      struct _ddebug __UNIQUE_ID_ddebug463 = {.modname = (char *)"hclge", .function = (char *)"hclge_rm_mc_addr_common", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c", .format = (char *)"Remove mc mac err! invalid mac:%pM.\n", .lineno = (unsigned int)7369U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 7369 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug463.key.dd_key_false.key,(_Bool)0);
      #line 7369 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 7369 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug463,& (hdev->pdev)->dev,(char *)"Remove mc mac err! invalid mac:%pM.\n",addr);
    }
    #line 7372 
    return -22;
  }
  #line 7375 
  memset((void *)(& req),0,24UL);
  #line 7376 
  req.entry_type = (unsigned char)((unsigned int)req.entry_type & 254U);
  #line 7376 
  req.entry_type = req.entry_type;
  #line 7377 
  hclge_prepare_mac_addr(& req,addr,(_Bool)1);
  #line 7378 
  status = (enum hclge_cmd_status)hclge_lookup_mac_vlan_tbl(vport,& req,(struct hclge_desc *)(& desc),
                                  (_Bool)1);
  #line 7379 
  if (status == HCLGE_STATUS_SUCCESS) {
    #line 7381 
    status = (enum hclge_cmd_status)hclge_update_desc_vfid((struct hclge_desc *)(& desc),
                               (int)vport->vport_id,(_Bool)1);
    #line 7382 
    if (status != HCLGE_STATUS_SUCCESS) 
                                        #line 7383 
                                        return (int)status;
    #line 7385 
    if ((int)hclge_is_all_function_id_zero((struct hclge_desc *)(& desc)) != 0) {
      #line 7387 
      status = (enum hclge_cmd_status)hclge_remove_mac_vlan_tbl(vport,& req);
    }
    else {
      #line 7390 
      status = (enum hclge_cmd_status)hclge_add_mac_vlan_tbl(vport,& req,(struct hclge_desc *)(& desc));
    }
  }
  else 
       #line 7399 
       status = HCLGE_STATUS_SUCCESS;
  #line 7402 
  return (int)status;
}

#line 7405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
void hclge_add_vport_mac_table(struct hclge_vport *vport, u8 *mac_addr, enum HCLGE_MAC_ADDR_TYPE mac_type)
{
  #line 7408 
  struct hclge_vport_mac_addr_cfg *mac_cfg;
  #line 7409 
  struct list_head *list;
  #line 7411 
  if ((unsigned int)vport->vport_id == 0U) 
                                           #line 7412 
                                           return;
  #line 7414 
  mac_cfg = (struct hclge_vport_mac_addr_cfg *)kzalloc_0(32UL,3264U);
  #line 7415 
  if (mac_cfg == (struct hclge_vport_mac_addr_cfg *)0) 
                                                       #line 7416 
                                                       return;
  #line 7418 
  mac_cfg->hd_tbl_status = 1;
  #line 7419 
  memcpy((void *)(& mac_cfg->mac_addr),(void *)mac_addr,6UL);
  #line 7421 
  if (mac_type == (unsigned int)HCLGE_MAC_ADDR_UC) 
                                                   #line 7421 
                                                   list = & vport->uc_mac_list; else 
                                                                    #line 7421 
                                                                    list = & vport->mc_mac_list;
  #line 7424 
  list_add_tail(& mac_cfg->node,list);
  #line 7425 
  return;
}

#line 7427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
void hclge_rm_vport_mac_table(struct hclge_vport *vport, u8 *mac_addr, bool is_write_tbl, enum HCLGE_MAC_ADDR_TYPE mac_type)
{
  #line 7441 
  void *__mptr_0;
  #line 7441 
  void *__mptr;
  #line 7431 
  struct hclge_vport_mac_addr_cfg *mac_cfg;
  #line 7431 
  struct hclge_vport_mac_addr_cfg *tmp;
  #line 7432 
  struct list_head *list;
  #line 7433 
  bool uc_flag;
  #line 7433 
  bool mc_flag;
  #line 7435 
  if (mac_type == (unsigned int)HCLGE_MAC_ADDR_UC) 
                                                   #line 7435 
                                                   list = & vport->uc_mac_list; else 
                                                                    #line 7435 
                                                                    list = & vport->mc_mac_list;
  #line 7438 
  uc_flag = (_Bool)(((int)is_write_tbl != 0 && mac_type == (unsigned int)HCLGE_MAC_ADDR_UC) != 0);
  #line 7439 
  mc_flag = (_Bool)(((int)is_write_tbl != 0 && mac_type == (unsigned int)HCLGE_MAC_ADDR_MC) != 0);
  #line 7441 
  __mptr = (void *)list->next;
  #line 7441 
  mac_cfg = ((struct hclge_vport_mac_addr_cfg *)__mptr);
  #line 7441 
  __mptr_0 = (void *)mac_cfg->node.next;
  #line 7442 
  tmp = ((struct hclge_vport_mac_addr_cfg *)__mptr_0);
  #line 7441 
  while (& mac_cfg->node != list) {
    #line 7441 
    void *__mptr_1;
    #line 7442 
    if ((int)ether_addr_equal((u8 *)(& mac_cfg->mac_addr),mac_addr) != 0) {
      #line 7443 
      if ((int)uc_flag != 0 && mac_cfg->hd_tbl_status != 0) 
                                                            #line 7444 
                                                            hclge_rm_uc_addr_common(vport,mac_addr);
      #line 7446 
      if ((int)mc_flag != 0 && mac_cfg->hd_tbl_status != 0) 
                                                            #line 7447 
                                                            hclge_rm_mc_addr_common(vport,mac_addr);
      #line 7449 
      list_del(& mac_cfg->node);
      #line 7450 
      kfree((void *)mac_cfg);
      #line 7451 
      break;
    }
    #line 7441 
    mac_cfg = tmp;
    #line 7441 
    __mptr_1 = (void *)tmp->node.next;
    #line 7441 
    tmp = ((struct hclge_vport_mac_addr_cfg *)__mptr_1);
  }
  #line 7453 
  return;
}

#line 7456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
void hclge_rm_vport_all_mac_table(struct hclge_vport *vport, bool is_del_list, enum HCLGE_MAC_ADDR_TYPE mac_type)
{
  #line 7465 
  void *__mptr;
  #line 7465 
  void *__mptr_0;
  #line 7459 
  struct hclge_vport_mac_addr_cfg *mac_cfg;
  #line 7459 
  struct hclge_vport_mac_addr_cfg *tmp;
  #line 7460 
  struct list_head *list;
  #line 7462 
  if (mac_type == (unsigned int)HCLGE_MAC_ADDR_UC) 
                                                   #line 7462 
                                                   list = & vport->uc_mac_list; else 
                                                                    #line 7462 
                                                                    list = & vport->mc_mac_list;
  #line 7465 
  __mptr = (void *)list->next;
  #line 7465 
  mac_cfg = ((struct hclge_vport_mac_addr_cfg *)__mptr);
  #line 7465 
  __mptr_0 = (void *)mac_cfg->node.next;
  #line 7466 
  tmp = ((struct hclge_vport_mac_addr_cfg *)__mptr_0);
  #line 7465 
  while (& mac_cfg->node != list) {
    #line 7465 
    void *__mptr_1;
    #line 7466 
    if (mac_type == (unsigned int)HCLGE_MAC_ADDR_UC && mac_cfg->hd_tbl_status != 0) 
      #line 7467 
      hclge_rm_uc_addr_common(vport,(unsigned char *)(& mac_cfg->mac_addr));
    #line 7469 
    if (mac_type == (unsigned int)HCLGE_MAC_ADDR_MC && mac_cfg->hd_tbl_status != 0) 
      #line 7470 
      hclge_rm_mc_addr_common(vport,(unsigned char *)(& mac_cfg->mac_addr));
    #line 7472 
    mac_cfg->hd_tbl_status = 0;
    #line 7473 
    if ((int)is_del_list != 0) {
      #line 7474 
      list_del(& mac_cfg->node);
      #line 7475 
      kfree((void *)mac_cfg);
    }
    #line 7465 
    mac_cfg = tmp;
    #line 7465 
    __mptr_1 = (void *)tmp->node.next;
    #line 7465 
    tmp = ((struct hclge_vport_mac_addr_cfg *)__mptr_1);
  }
  #line 7478 
  return;
}

#line 7480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
void hclge_uninit_vport_mac_table(struct hclge_dev *hdev)
{
  #line 7482 
  struct hclge_vport_mac_addr_cfg *mac;
  #line 7482 
  struct hclge_vport_mac_addr_cfg *tmp;
  #line 7483 
  struct hclge_vport *vport;
  #line 7484 
  int i;
  #line 7486 
  cif_mutex_lock_vport_cfg_mutex_of_hclge_dev_0(& hdev->vport_cfg_mutex);
  #line 7487 
  i = 0;
  #line 7487 
  while ((int)hdev->num_alloc_vport > i) {
    {
      #line 7494 
      void *__mptr_2;
      #line 7489 
      void *__mptr;
      #line 7494 
      void *__mptr_3;
      #line 7489 
      void *__mptr_0;
      #line 7488 
      vport = hdev->vport + (unsigned long)i;
      #line 7489 
      __mptr = (void *)vport->uc_mac_list.next;
      #line 7489 
      mac = ((struct hclge_vport_mac_addr_cfg *)__mptr);
      #line 7489 
      __mptr_0 = (void *)mac->node.next;
      #line 7490 
      tmp = ((struct hclge_vport_mac_addr_cfg *)__mptr_0);
      #line 7489 
      while (& mac->node != & vport->uc_mac_list) {
        #line 7489 
        void *__mptr_1;
        #line 7490 
        list_del(& mac->node);
        #line 7491 
        kfree((void *)mac);
        #line 7489 
        mac = tmp;
        #line 7489 
        __mptr_1 = (void *)tmp->node.next;
        #line 7489 
        tmp = ((struct hclge_vport_mac_addr_cfg *)__mptr_1);
      }
      #line 7494 
      __mptr_2 = (void *)vport->mc_mac_list.next;
      #line 7494 
      mac = ((struct hclge_vport_mac_addr_cfg *)__mptr_2);
      #line 7494 
      __mptr_3 = (void *)mac->node.next;
      #line 7495 
      tmp = ((struct hclge_vport_mac_addr_cfg *)__mptr_3);
      #line 7494 
      while (& mac->node != & vport->mc_mac_list) {
        #line 7494 
        void *__mptr_4;
        #line 7495 
        list_del(& mac->node);
        #line 7496 
        kfree((void *)mac);
        #line 7494 
        mac = tmp;
        #line 7494 
        __mptr_4 = (void *)tmp->node.next;
        #line 7494 
        tmp = ((struct hclge_vport_mac_addr_cfg *)__mptr_4);
      }
    }
    #line 7487 
    i ++;
  }
  #line 7499 
  cif_mutex_unlock_vport_cfg_mutex_of_hclge_dev_0(& hdev->vport_cfg_mutex);
  #line 7500 
  return;
}

#line 7502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_mac_ethertype_cmd_status(struct hclge_dev *hdev, u16 cmdq_resp, u8 resp_code)
{
  #line 7510 
  int return_status;
  #line 7512 
  if ((unsigned int)cmdq_resp != 0U) {
    #line 7513 
    _dev_err(& (hdev->pdev)->dev,(char *)"cmdq execute failed for get_mac_ethertype_cmd_status, status=%u.\n",(int)cmdq_resp);
    #line 7516 
    return -5;
  }
  #line 7519 
  switch ((int)resp_code) {
    #line 7520 
    case 0: 
            #line 7520 
    ;
    #line 7521 
    case 1: 
            #line 7521 
    ;
    #line 7522 
    return_status = 0;
    #line 7523 
    break;
    #line 7524 
    case 2: 
            #line 7524 
    ;
    #line 7525 
    _dev_err(& (hdev->pdev)->dev,(char *)"add mac ethertype failed for manager table overflow.\n");
    #line 7527 
    return_status = -5;
    #line 7528 
    break;
    #line 7529 
    case 3: 
            #line 7529 
    ;
    #line 7530 
    _dev_err(& (hdev->pdev)->dev,(char *)"add mac ethertype failed for key conflict.\n");
    #line 7532 
    return_status = -5;
    #line 7533 
    break;
    #line 7534 
    default: 
             #line 7534 
    ;
    #line 7535 
    _dev_err(& (hdev->pdev)->dev,(char *)"add mac ethertype failed for undefined, code=%u.\n",(int)resp_code);
    #line 7538 
    return_status = -5;
  }
  #line 7541 
  return return_status;
}

#line 7544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static bool hclge_check_vf_mac_exist(struct hclge_vport *vport, int vf_idx, u8 *mac_addr)
{
  #line 7547 
  struct hclge_mac_vlan_tbl_entry_cmd req;
  #line 7549 
  struct hclge_desc desc;
  #line 7551 
  int i;
  #line 7548 
  struct hclge_dev *hdev = vport->back;
  #line 7550 
  u16 egress_port = (unsigned short)0U;
  #line 7553 
  if ((int)is_zero_ether_addr(mac_addr) != 0) 
                                              #line 7554 
                                              return (_Bool)0;
  #line 7556 
  memset((void *)(& req),0,24UL);
  #line 7557 
  egress_port = (unsigned short)((unsigned int)egress_port & 63495U);
  #line 7557 
  egress_port = (unsigned short)(((unsigned int)((int)vport->vport_id << 3U) & 2040U) | (unsigned int)egress_port);
  #line 7559 
  req.egress_port = egress_port;
  #line 7560 
  hclge_prepare_mac_addr(& req,mac_addr,(_Bool)0);
  #line 7562 
  if (hclge_lookup_mac_vlan_tbl(vport,& req,& desc,(_Bool)0) != -2) 
                                                                    #line 7563 
                                                                    return (_Bool)1;
  #line 7565 
  vf_idx ++;
  #line 7566 
  i = (int)hdev->num_vmdq_vport + 1;
  #line 7566 
  while ((int)hdev->num_alloc_vport > i) {
    #line 7567 
    if (i != vf_idx) {
      #line 7567 
      if ((int)ether_addr_equal(mac_addr,
                         (u8 *)(& (hdev->vport + (unsigned long)i)->vf_info.mac)) != 0) 
        #line 7569 
        return (_Bool)1;
    }
    #line 7566 
    i ++;
  }
  #line 7571 
  return (_Bool)0;
}

#line 7574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_vf_mac(struct hnae3_handle *handle, int vf, u8 *mac_addr)
{
  #line 7577 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 7578 
  struct hclge_dev *hdev = vport->back;
  #line 7580 
  vport = hclge_get_vf_vport(hdev,vf);
  #line 7581 
  if (vport == (struct hclge_vport *)0) 
                                        #line 7582 
                                        return -22;
  #line 7584 
  if ((int)ether_addr_equal(mac_addr,(u8 *)(& vport->vf_info.mac)) != 0) {
    #line 7585 
    _dev_info(& (hdev->pdev)->dev,(char *)"Specified MAC(=%pM) is same as before, no change committed!\n",mac_addr);
    #line 7588 
    return 0;
  }
  #line 7591 
  if ((int)hclge_check_vf_mac_exist(vport,vf,mac_addr) != 0) {
    #line 7592 
    _dev_err(& (hdev->pdev)->dev,(char *)"Specified MAC(=%pM) exists!\n",mac_addr);
    #line 7594 
    return -17;
  }
  #line 7597 
  ether_addr_copy((u8 *)(& vport->vf_info.mac),mac_addr);
  #line 7598 
  _dev_info(& (hdev->pdev)->dev,(char *)"MAC of VF %d has been set to %pM, and it will be reinitialized!\n",vf,mac_addr);
  #line 7602 
  return hclge_inform_reset_assert_to_vf(vport);
}

#line 7605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_add_mgr_tbl(struct hclge_dev *hdev, struct hclge_mac_mgr_tbl_entry_cmd *req)
{
  #line 7608 
  struct hclge_desc desc;
  #line 7609 
  u8 resp_code;
  #line 7610 
  u16 retval;
  #line 7611 
  int ret;
  #line 7613 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_MAC_ETHTYPE_ADD,(_Bool)0);
  #line 7614 
  memcpy((void *)(& desc.data),(void *)req,24UL);
  #line 7616 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 7617 
  if (ret != 0) {
    #line 7618 
    _dev_err(& (hdev->pdev)->dev,(char *)"add mac ethertype failed for cmd_send, ret =%d.\n",ret);
    #line 7621 
    return ret;
  }
  #line 7624 
  resp_code = (unsigned char)(desc.data[0] >> 8);
  #line 7625 
  retval = desc.retval;
  #line 7627 
  return hclge_get_mac_ethertype_cmd_status(hdev,(unsigned short)((int)retval),
                                         (unsigned char)((int)resp_code));
}

#line 7630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int init_mgr_tbl(struct hclge_dev *hdev)
{
  #line 7632 
  int ret;
  #line 7633 
  int i;
  #line 7635 
  i = 0;
  #line 7635 
  while (i == 0) {
    #line 7636 
    ret = hclge_add_mgr_tbl(hdev,& hclge_mgr_table[i]);
    #line 7637 
    if (ret != 0) {
      #line 7638 
      _dev_err(& (hdev->pdev)->dev,(char *)"add mac ethertype failed, ret =%d.\n",ret);
      #line 7641 
      return ret;
    }
    #line 7635 
    i ++;
  }
  #line 7645 
  return 0;
}

#line 7648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_get_mac_addr(struct hnae3_handle *handle, u8 *p)
{
  #line 7650 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 7651 
  struct hclge_dev *hdev = vport->back;
  #line 7653 
  ether_addr_copy(p,(u8 *)(& hdev->hw.mac.mac_addr));
  #line 7654 
  return;
}

#line 7656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_mac_addr(struct hnae3_handle *handle, void *p, bool is_first)
{
  #line 7662 
  int ret;
  #line 7659 
  unsigned char *new_addr = (unsigned char *)p;
  #line 7660 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 7661 
  struct hclge_dev *hdev = vport->back;
  #line 7665 
  if ((int)is_zero_ether_addr(new_addr) != 0) 
                                              #line 7665 
                                              goto _LOR;
  else {
    #line 7665 
    if ((int)is_broadcast_ether_addr(new_addr) != 0) 
                                                     #line 7665 
                                                     goto _LOR;
    else {
      #line 7666 
      if ((int)is_multicast_ether_addr(new_addr) != 0) {
        #line 7665 
        _LOR: {
                #line 7668 
                _dev_err(& (hdev->pdev)->dev,(char *)"Change uc mac err! invalid mac:%pM.\n",new_addr);
                #line 7671 
                return -22;
              }
      }
    }
  }
  #line 7674 
  if (! is_first) 
                  #line 7674 
                  goto _LOR_0;
  else {
    #line 7674 
    if ((int)is_kdump_kernel() != 0) {
      #line 7674 
      _LOR_0: 
      #line 7674 
      if (hclge_rm_uc_addr(handle,(unsigned char *)(& hdev->hw.mac.mac_addr)) != 0) 
        #line 7676 
        _dev_warn(& (hdev->pdev)->dev,(char *)"remove old uc mac address fail.\n");
    }
  }
  #line 7679 
  ret = hclge_add_uc_addr(handle,new_addr);
  #line 7680 
  if (ret != 0) {
    #line 7681 
    _dev_err(& (hdev->pdev)->dev,(char *)"add uc mac address fail, ret =%d.\n",ret);
    #line 7685 
    if (! is_first) {
      #line 7685 
      if (hclge_add_uc_addr(handle,(unsigned char *)(& hdev->hw.mac.mac_addr)) != 0) 
        #line 7687 
        _dev_err(& (hdev->pdev)->dev,(char *)"restore uc mac address fail.\n");
    }
    #line 7690 
    return -5;
  }
  #line 7693 
  ret = hclge_pause_addr_cfg(hdev,new_addr);
  #line 7694 
  if (ret != 0) {
    #line 7695 
    _dev_err(& (hdev->pdev)->dev,(char *)"configure mac pause address fail, ret =%d.\n",ret);
    #line 7698 
    return -5;
  }
  #line 7701 
  ether_addr_copy((u8 *)(& hdev->hw.mac.mac_addr),new_addr);
  #line 7703 
  return 0;
}

#line 7706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_do_ioctl(struct hnae3_handle *handle, struct ifreq *ifr, int cmd)
{
  #line 7709 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 7710 
  struct hclge_dev *hdev = vport->back;
  #line 7712 
  if (hdev->hw.mac.phydev == (struct phy_device *)0) 
                                                     #line 7713 
                                                     return -95;
  #line 7715 
  return phy_mii_ioctl(hdev->hw.mac.phydev,ifr,cmd);
}

#line 7718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_vlan_filter_ctrl(struct hclge_dev *hdev, u8 vlan_type, u8 fe_type, bool filter_en, u8 vf_id)
{
  #line 7721 
  struct hclge_vlan_filter_ctrl_cmd *req;
  #line 7722 
  struct hclge_desc desc;
  #line 7723 
  int ret;
  #line 7725 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_VLAN_FILTER_CTRL,(_Bool)0);
  #line 7727 
  req = (struct hclge_vlan_filter_ctrl_cmd *)(& desc.data);
  #line 7728 
  req->vlan_type = vlan_type;
  #line 7729 
  if ((int)filter_en != 0) 
                           #line 7729 
                           req->vlan_fe = fe_type; else 
                                                        #line 7729 
                                                        req->vlan_fe = (unsigned char)0U;
  #line 7730 
  req->vf_id = vf_id;
  #line 7732 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 7733 
  if (ret != 0) 
                #line 7734 
                _dev_err(& (hdev->pdev)->dev,(char *)"set vlan filter fail, ret =%d.\n",ret);
  #line 7737 
  return ret;
}

#line 7752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_enable_vlan_filter(struct hnae3_handle *handle, bool enable)
{
  #line 7754 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 7755 
  struct hclge_dev *hdev = vport->back;
  #line 7757 
  if ((unsigned int)(hdev->pdev)->revision > 32U) {
    #line 7758 
    hclge_set_vlan_filter_ctrl(hdev,(unsigned char)0,(unsigned char)10,(_Bool)((bool)((int)enable) != 0),(unsigned char)0);
    #line 7760 
    hclge_set_vlan_filter_ctrl(hdev,(unsigned char)1,(unsigned char)5,(_Bool)((bool)((int)enable) != 0),(unsigned char)0);
  }
  else 
       #line 7763 
       hclge_set_vlan_filter_ctrl(hdev,(unsigned char)0,(unsigned char)1,(_Bool)((bool)((int)enable) != 0),(unsigned char)0);
  #line 7767 
  if ((int)enable != 0) 
                        #line 7768 
                        handle->netdev_flags = (unsigned char)((unsigned int)handle->netdev_flags | 32U); else 
                                                                    #line 7770 
                                                                    handle->netdev_flags = (unsigned char)((unsigned int)handle->netdev_flags & 223U);
  #line 7771 
  return;
}

#line 7773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_vf_vlan_common(struct hclge_dev *hdev, u16 vfid, bool is_kill, u16 vlan, __be16 proto)
{
  #line 7778 
  struct hclge_vlan_filter_vf_cfg_cmd *req0;
  #line 7779 
  struct hclge_vlan_filter_vf_cfg_cmd *req1;
  #line 7780 
  struct hclge_desc desc[2U];
  #line 7781 
  u8 vf_byte_val;
  #line 7782 
  u8 vf_byte_off;
  #line 7783 
  int ret;
  #line 7777 
  struct hclge_vport *vport = hdev->vport + (unsigned long)vfid;
  #line 7790 
  if ((int)test_bit((long)vfid,(unsigned long *)(& hdev->vf_vlan_full)) != 0) 
    #line 7790 
    if (! is_kill) {
      #line 7791 
      if (vport->vf_info.spoofchk != 0U && (unsigned int)vlan != 0U) {
        #line 7792 
        _dev_err(& (hdev->pdev)->dev,(char *)"Can\'t add vlan due to spoof check is on and vf vlan table is full\n");
        #line 7794 
        return -1;
      }
      #line 7796 
      return 0;
    }
  #line 7799 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_OPC_VLAN_FILTER_VF_CFG,(_Bool)0);
  #line 7801 
  hclge_cmd_setup_basic_desc(& desc[1],(enum hclge_opcode_type)HCLGE_OPC_VLAN_FILTER_VF_CFG,(_Bool)0);
  #line 7804 
  desc[0].flag = (unsigned short)((unsigned int)desc[0].flag | 4U);
  #line 7806 
  vf_byte_off = (unsigned char)((unsigned int)vfid / 8U);
  #line 7807 
  vf_byte_val = (unsigned char)(1 << ((int)vfid & 7));
  #line 7809 
  req0 = (struct hclge_vlan_filter_vf_cfg_cmd *)(& desc[0].data);
  #line 7810 
  req1 = (struct hclge_vlan_filter_vf_cfg_cmd *)(& desc[1].data);
  #line 7812 
  req0->vlan_id = vlan;
  #line 7813 
  req0->vlan_cfg = (unsigned char)is_kill;
  #line 7815 
  if ((unsigned int)vf_byte_off <= 15U) 
                                        #line 7816 
                                        req0->vf_bitmap[(int)vf_byte_off] = vf_byte_val; else 
                                                                    #line 7818 
                                                                    req1->vf_bitmap[(int)vf_byte_off + -16] = vf_byte_val;
  #line 7820 
  ret = hclge_cmd_send(& hdev->hw,(struct hclge_desc *)(& desc),2);
  #line 7821 
  if (ret != 0) {
    #line 7822 
    _dev_err(& (hdev->pdev)->dev,(char *)"Send vf vlan command fail, ret =%d.\n",ret);
    #line 7825 
    return ret;
  }
  #line 7828 
  if (! is_kill) {
    #line 7830 
    if ((unsigned int)req0->resp_code <= 1U) 
                                             #line 7831 
                                             return 0;
    #line 7833 
    if ((unsigned int)req0->resp_code == 2U) {
      #line 7834 
      cif_set_bit_0((long)vfid,(unsigned long *)(& hdev->vf_vlan_full));
      #line 7835 
      _dev_warn(& (hdev->pdev)->dev,(char *)"vf vlan table is full, vf vlan filter is disabled\n");
      #line 7837 
      return 0;
    }
    #line 7840 
    _dev_err(& (hdev->pdev)->dev,(char *)"Add vf vlan filter fail, ret =%u.\n",(int)req0->resp_code);
  }
  else {
    #line 7845 
    if ((unsigned int)req0->resp_code == 0U) 
                                             #line 7846 
                                             return 0;
    #line 7853 
    if ((unsigned int)req0->resp_code == 1U) 
                                             #line 7854 
                                             return 0;
    #line 7856 
    _dev_err(& (hdev->pdev)->dev,(char *)"Kill vf vlan filter fail, ret =%u.\n",(int)req0->resp_code);
  }
  #line 7861 
  return -5;
}

#line 7864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_port_vlan_filter(struct hclge_dev *hdev, __be16 proto, u16 vlan_id, bool is_kill)
{
  #line 7867 
  struct hclge_vlan_filter_pf_cfg_cmd *req;
  #line 7868 
  struct hclge_desc desc;
  #line 7869 
  u8 vlan_offset_byte_val;
  #line 7870 
  u8 vlan_offset_byte;
  #line 7871 
  u8 vlan_offset_160;
  #line 7872 
  int ret;
  #line 7874 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_VLAN_FILTER_PF_CFG,(_Bool)0);
  #line 7876 
  vlan_offset_160 = (unsigned char)((unsigned int)vlan_id / 160U);
  #line 7877 
  vlan_offset_byte = (unsigned char)(((unsigned int)vlan_id % 160U) / 8U);
  #line 7879 
  vlan_offset_byte_val = (unsigned char)(1 << ((int)vlan_id & 7));
  #line 7881 
  req = (struct hclge_vlan_filter_pf_cfg_cmd *)(& desc.data);
  #line 7882 
  req->vlan_offset = vlan_offset_160;
  #line 7883 
  req->vlan_cfg = (unsigned char)is_kill;
  #line 7884 
  req->vlan_offset_bitmap[(int)vlan_offset_byte] = vlan_offset_byte_val;
  #line 7886 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 7887 
  if (ret != 0) 
                #line 7888 
                _dev_err(& (hdev->pdev)->dev,(char *)"port vlan command, send fail, ret =%d.\n",ret);
  #line 7890 
  return ret;
}

#line 7893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_vlan_filter_hw(struct hclge_dev *hdev, __be16 proto, u16 vport_id, u16 vlan_id, bool is_kill)
{
  #line 7897 
  u16 vport_idx;
  #line 7898 
  int ret;
  #line 7897 
  u16 vport_num = (unsigned short)0U;
  #line 7900 
  if ((int)is_kill != 0 && (unsigned int)vlan_id == 0U) 
                                                        #line 7901 
                                                        return 0;
  #line 7903 
  ret = hclge_set_vf_vlan_common(hdev,(unsigned short)((int)vport_id),(_Bool)((bool)((int)is_kill) != 0),(unsigned short)((int)vlan_id),(unsigned short)((int)proto));
  #line 7905 
  if (ret != 0) {
    #line 7906 
    _dev_err(& (hdev->pdev)->dev,(char *)"Set %u vport vlan filter config fail, ret =%d.\n",(int)vport_id,ret);
    #line 7909 
    return ret;
  }
  #line 7913 
  if (! is_kill && (unsigned int)vlan_id == 0U) {
    #line 7913 
    if ((int)test_bit((long)vport_id,
               (unsigned long *)(& hdev->vlan_table[(int)vlan_id])) != 0) 
      #line 7915 
      return 0;
  }
  #line 7917 
  if (! is_kill) {
    #line 7917 
    if ((int)test_and_set_bit((long)vport_id,
                         (unsigned long *)(& hdev->vlan_table[(int)vlan_id])) != 0) {
      #line 7918 
      _dev_err(& (hdev->pdev)->dev,(char *)"Add port vlan failed, vport %u is already in vlan %u\n",(int)vport_id,(int)vlan_id);
      #line 7921 
      return -22;
    }
  }
  #line 7924 
  if ((int)is_kill != 0) {
    #line 7925 
    if (! test_and_set_bit((long)vport_id,
                         (unsigned long *)(& hdev->vlan_table[(int)vlan_id]))) {
      #line 7926 
      _dev_err(& (hdev->pdev)->dev,(char *)"Delete port vlan failed, vport %u is not in vlan %u\n",(int)vport_id,(int)vlan_id);
      #line 7929 
      return -22;
    }
  }
  #line 7932 
  vport_idx = (unsigned short)cif_find_first_bit((unsigned long *)(& hdev->vlan_table[(int)vlan_id]),
                           256UL);
  #line 7932 
  while ((unsigned int)vport_idx <= 255U) {
    #line 7933 
    vport_num = (u16)((int)vport_num + 1);
    #line 7932 
    vport_idx = (unsigned short)cif_find_next_bit((unsigned long *)(& hdev->vlan_table[(int)vlan_id]),
                          256UL,(unsigned long)((int)vport_idx + 1));
  }
  #line 7935 
  if ((int)is_kill != 0 && (unsigned int)vport_num == 0U || ! is_kill && (unsigned int)vport_num == 1U) 
    #line 7936 
    ret = hclge_set_port_vlan_filter(hdev,(unsigned short)((int)proto),(unsigned short)((int)vlan_id),(_Bool)((bool)((int)is_kill) != 0));
  #line 7939 
  return ret;
}

#line 7942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_vlan_tx_offload_cfg(struct hclge_vport *vport)
{
  #line 7945 
  struct hclge_vport_vtag_tx_cfg_cmd *req;
  #line 7947 
  struct hclge_desc desc;
  #line 7948 
  u16 bmap_index;
  #line 7949 
  int status;
  #line 7944 
  struct hclge_tx_vtag_cfg *vcfg = & vport->txvlan_cfg;
  #line 7946 
  struct hclge_dev *hdev = vport->back;
  #line 7951 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_VLAN_PORT_TX_CFG,(_Bool)0);
  #line 7953 
  req = (struct hclge_vport_vtag_tx_cfg_cmd *)(& desc.data);
  #line 7954 
  req->def_vlan_tag1 = vcfg->default_tag1;
  #line 7955 
  req->def_vlan_tag2 = vcfg->default_tag2;
  #line 7956 
  req->vport_vlan_cfg = (unsigned char)((unsigned int)req->vport_vlan_cfg & 254U);
  #line 7956 
  req->vport_vlan_cfg = (unsigned char)((int)req->vport_vlan_cfg | ((int)vcfg->accept_tag1 != 0));
  {
    #line 7958 
    int tmp;
    #line 7958 
    req->vport_vlan_cfg = (unsigned char)((unsigned int)req->vport_vlan_cfg & 253U);
    #line 7958 
    if ((int)vcfg->accept_untag1 != 0) 
                                       #line 7958 
                                       tmp = 2; else 
                                                     #line 7958 
                                                     tmp = 0;
    #line 7958 
    req->vport_vlan_cfg = (unsigned char)((int)req->vport_vlan_cfg | tmp);
  }
  {
    #line 7960 
    int tmp_0;
    #line 7960 
    req->vport_vlan_cfg = (unsigned char)((unsigned int)req->vport_vlan_cfg & 223U);
    #line 7960 
    if ((int)vcfg->accept_tag2 != 0) 
                                     #line 7960 
                                     tmp_0 = 32; else 
                                                      #line 7960 
                                                      tmp_0 = 0;
    #line 7960 
    req->vport_vlan_cfg = (unsigned char)((int)req->vport_vlan_cfg | tmp_0);
  }
  {
    #line 7962 
    int tmp_1;
    #line 7962 
    req->vport_vlan_cfg = (unsigned char)((unsigned int)req->vport_vlan_cfg & 191U);
    #line 7962 
    if ((int)vcfg->accept_untag2 != 0) 
                                       #line 7962 
                                       tmp_1 = 64; else 
                                                        #line 7962 
                                                        tmp_1 = 0;
    #line 7962 
    req->vport_vlan_cfg = (unsigned char)((int)req->vport_vlan_cfg | tmp_1);
  }
  {
    #line 7964 
    int tmp_2;
    #line 7964 
    req->vport_vlan_cfg = (unsigned char)((unsigned int)req->vport_vlan_cfg & 251U);
    #line 7964 
    if ((int)vcfg->insert_tag1_en != 0) 
                                        #line 7964 
                                        tmp_2 = 4; else 
                                                        #line 7964 
                                                        tmp_2 = 0;
    #line 7964 
    req->vport_vlan_cfg = (unsigned char)((int)req->vport_vlan_cfg | tmp_2);
  }
  {
    #line 7966 
    int tmp_3;
    #line 7966 
    req->vport_vlan_cfg = (unsigned char)((unsigned int)req->vport_vlan_cfg & 247U);
    #line 7966 
    if ((int)vcfg->insert_tag2_en != 0) 
                                        #line 7966 
                                        tmp_3 = 8; else 
                                                        #line 7966 
                                                        tmp_3 = 0;
    #line 7966 
    req->vport_vlan_cfg = (unsigned char)((int)req->vport_vlan_cfg | tmp_3);
  }
  #line 7968 
  req->vport_vlan_cfg = (unsigned char)((unsigned int)req->vport_vlan_cfg & 239U);
  #line 7968 
  req->vport_vlan_cfg = req->vport_vlan_cfg;
  #line 7970 
  req->vf_offset = (unsigned char)((unsigned int)vport->vport_id / 64U);
  #line 7971 
  bmap_index = (unsigned short)(((unsigned int)vport->vport_id & 63U) / 8U);
  #line 7973 
  req->vf_bitmap[(int)bmap_index] = (unsigned char)(1U << ((int)vport->vport_id & 7));
  #line 7976 
  status = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 7977 
  if (status != 0) 
                   #line 7978 
                   _dev_err(& (hdev->pdev)->dev,(char *)"Send port txvlan cfg command fail, ret =%d\n",status);
  #line 7982 
  return status;
}

#line 7985  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_vlan_rx_offload_cfg(struct hclge_vport *vport)
{
  #line 7988 
  struct hclge_vport_vtag_rx_cfg_cmd *req;
  #line 7990 
  struct hclge_desc desc;
  #line 7991 
  u16 bmap_index;
  #line 7992 
  int status;
  #line 7987 
  struct hclge_rx_vtag_cfg *vcfg = & vport->rxvlan_cfg;
  #line 7989 
  struct hclge_dev *hdev = vport->back;
  #line 7994 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_VLAN_PORT_RX_CFG,(_Bool)0);
  #line 7996 
  req = (struct hclge_vport_vtag_rx_cfg_cmd *)(& desc.data);
  #line 7997 
  req->vport_vlan_cfg = (unsigned char)((unsigned int)req->vport_vlan_cfg & 254U);
  #line 7997 
  req->vport_vlan_cfg = (unsigned char)((int)req->vport_vlan_cfg | ((unsigned int)vcfg->strip_tag1_en != 0U));
  {
    #line 7999 
    int tmp;
    #line 7999 
    req->vport_vlan_cfg = (unsigned char)((unsigned int)req->vport_vlan_cfg & 253U);
    #line 7999 
    if ((unsigned int)vcfg->strip_tag2_en != 0U) 
                                                 #line 7999 
                                                 tmp = 2; else 
                                                               #line 7999 
                                                               tmp = 0;
    #line 7999 
    req->vport_vlan_cfg = (unsigned char)((int)req->vport_vlan_cfg | tmp);
  }
  {
    #line 8001 
    int tmp_0;
    #line 8001 
    req->vport_vlan_cfg = (unsigned char)((unsigned int)req->vport_vlan_cfg & 251U);
    #line 8001 
    if ((unsigned int)vcfg->vlan1_vlan_prionly != 0U) 
                                                      #line 8001 
                                                      tmp_0 = 4; else 
                                                                   #line 8001 
                                                                   tmp_0 = 0;
    #line 8001 
    req->vport_vlan_cfg = (unsigned char)((int)req->vport_vlan_cfg | tmp_0);
  }
  {
    #line 8003 
    int tmp_1;
    #line 8003 
    req->vport_vlan_cfg = (unsigned char)((unsigned int)req->vport_vlan_cfg & 247U);
    #line 8003 
    if ((unsigned int)vcfg->vlan2_vlan_prionly != 0U) 
                                                      #line 8003 
                                                      tmp_1 = 8; else 
                                                                   #line 8003 
                                                                   tmp_1 = 0;
    #line 8003 
    req->vport_vlan_cfg = (unsigned char)((int)req->vport_vlan_cfg | tmp_1);
  }
  #line 8006 
  req->vf_offset = (unsigned char)((unsigned int)vport->vport_id / 64U);
  #line 8007 
  bmap_index = (unsigned short)(((unsigned int)vport->vport_id & 63U) / 8U);
  #line 8009 
  req->vf_bitmap[(int)bmap_index] = (unsigned char)(1U << ((int)vport->vport_id & 7));
  #line 8012 
  status = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 8013 
  if (status != 0) 
                   #line 8014 
                   _dev_err(& (hdev->pdev)->dev,(char *)"Send port rxvlan cfg command fail, ret =%d\n",status);
  #line 8018 
  return status;
}

#line 8021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_vlan_offload_cfg(struct hclge_vport *vport, u16 port_base_vlan_state, u16 vlan_tag)
{
  #line 8025 
  int ret;
  #line 8027 
  if ((unsigned int)port_base_vlan_state == 0U) {
    #line 8028 
    vport->txvlan_cfg.accept_tag1 = (_Bool)1;
    #line 8029 
    vport->txvlan_cfg.insert_tag1_en = (_Bool)0;
    #line 8030 
    vport->txvlan_cfg.default_tag1 = (unsigned short)0U;
  }
  else {
    #line 8032 
    vport->txvlan_cfg.accept_tag1 = (_Bool)0;
    #line 8033 
    vport->txvlan_cfg.insert_tag1_en = (_Bool)1;
    #line 8034 
    vport->txvlan_cfg.default_tag1 = vlan_tag;
  }
  #line 8037 
  vport->txvlan_cfg.accept_untag1 = (_Bool)1;
  #line 8043 
  vport->txvlan_cfg.accept_tag2 = (_Bool)1;
  #line 8044 
  vport->txvlan_cfg.accept_untag2 = (_Bool)1;
  #line 8045 
  vport->txvlan_cfg.insert_tag2_en = (_Bool)0;
  #line 8046 
  vport->txvlan_cfg.default_tag2 = (unsigned short)0U;
  #line 8048 
  if ((unsigned int)port_base_vlan_state == 0U) {
    #line 8049 
    vport->rxvlan_cfg.strip_tag1_en = (unsigned char)0U;
    #line 8050 
    vport->rxvlan_cfg.strip_tag2_en = vport->rxvlan_cfg.rx_vlan_offload_en;
  }
  else {
    #line 8053 
    vport->rxvlan_cfg.strip_tag1_en = vport->rxvlan_cfg.rx_vlan_offload_en;
    #line 8055 
    vport->rxvlan_cfg.strip_tag2_en = (unsigned char)1U;
  }
  #line 8057 
  vport->rxvlan_cfg.vlan1_vlan_prionly = (unsigned char)0U;
  #line 8058 
  vport->rxvlan_cfg.vlan2_vlan_prionly = (unsigned char)0U;
  #line 8060 
  ret = hclge_set_vlan_tx_offload_cfg(vport);
  #line 8061 
  if (ret != 0) 
                #line 8062 
                return ret;
  #line 8064 
  return hclge_set_vlan_rx_offload_cfg(vport);
}

#line 8067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_vlan_protocol_type(struct hclge_dev *hdev)
{
  #line 8069 
  struct hclge_rx_vlan_type_cfg_cmd *rx_req;
  #line 8070 
  struct hclge_tx_vlan_type_cfg_cmd *tx_req;
  #line 8071 
  struct hclge_desc desc;
  #line 8072 
  int status;
  #line 8074 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_MAC_VLAN_TYPE_ID,(_Bool)0);
  #line 8075 
  rx_req = (struct hclge_rx_vlan_type_cfg_cmd *)(& desc.data);
  #line 8076 
  rx_req->ot_fst_vlan_type = hdev->vlan_type_cfg.rx_ot_fst_vlan_type;
  #line 8078 
  rx_req->ot_sec_vlan_type = hdev->vlan_type_cfg.rx_ot_sec_vlan_type;
  #line 8080 
  rx_req->in_fst_vlan_type = hdev->vlan_type_cfg.rx_in_fst_vlan_type;
  #line 8082 
  rx_req->in_sec_vlan_type = hdev->vlan_type_cfg.rx_in_sec_vlan_type;
  #line 8085 
  status = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 8086 
  if (status != 0) {
    #line 8087 
    _dev_err(& (hdev->pdev)->dev,(char *)"Send rxvlan protocol type command fail, ret =%d\n",status);
    #line 8090 
    return status;
  }
  #line 8093 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_MAC_VLAN_INSERT,(_Bool)0);
  #line 8095 
  tx_req = (struct hclge_tx_vlan_type_cfg_cmd *)(& desc.data);
  #line 8096 
  tx_req->ot_vlan_type = hdev->vlan_type_cfg.tx_ot_vlan_type;
  #line 8097 
  tx_req->in_vlan_type = hdev->vlan_type_cfg.tx_in_vlan_type;
  #line 8099 
  status = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 8100 
  if (status != 0) 
                   #line 8101 
                   _dev_err(& (hdev->pdev)->dev,(char *)"Send txvlan protocol type command fail, ret =%d\n",status);
  #line 8105 
  return status;
}

#line 8108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_init_vlan_config(struct hclge_dev *hdev)
{
  #line 8113 
  struct hclge_vport *vport;
  #line 8114 
  int ret;
  #line 8115 
  int i;
  #line 8112 
  struct hnae3_handle *handle = & (hdev->vport)->nic;
  #line 8117 
  if ((unsigned int)(hdev->pdev)->revision > 32U) {
    #line 8119 
    i = 0;
    #line 8119 
    while ((int)hdev->num_alloc_vport > i) {
      #line 8120 
      vport = hdev->vport + (unsigned long)i;
      #line 8121 
      ret = hclge_set_vlan_filter_ctrl(hdev,(unsigned char)0,(unsigned char)10,(_Bool)1,(unsigned char)((int)((unsigned char)vport->vport_id)));
      #line 8126 
      if (ret != 0) 
                    #line 8127 
                    return ret;
      #line 8119 
      i ++;
    }
    #line 8130 
    ret = hclge_set_vlan_filter_ctrl(hdev,(unsigned char)1,(unsigned char)5,(_Bool)1,(unsigned char)0);
    #line 8133 
    if (ret != 0) 
                  #line 8134 
                  return ret;
  }
  else {
    #line 8136 
    ret = hclge_set_vlan_filter_ctrl(hdev,(unsigned char)0,(unsigned char)1,(_Bool)1,(unsigned char)0);
    #line 8139 
    if (ret != 0) 
                  #line 8140 
                  return ret;
  }
  #line 8143 
  handle->netdev_flags = (unsigned char)((unsigned int)handle->netdev_flags | 32U);
  #line 8145 
  hdev->vlan_type_cfg.rx_in_fst_vlan_type = (unsigned short)33024U;
  #line 8146 
  hdev->vlan_type_cfg.rx_in_sec_vlan_type = (unsigned short)33024U;
  #line 8147 
  hdev->vlan_type_cfg.rx_ot_fst_vlan_type = (unsigned short)33024U;
  #line 8148 
  hdev->vlan_type_cfg.rx_ot_sec_vlan_type = (unsigned short)33024U;
  #line 8149 
  hdev->vlan_type_cfg.tx_ot_vlan_type = (unsigned short)33024U;
  #line 8150 
  hdev->vlan_type_cfg.tx_in_vlan_type = (unsigned short)33024U;
  #line 8152 
  ret = hclge_set_vlan_protocol_type(hdev);
  #line 8153 
  if (ret != 0) 
                #line 8154 
                return ret;
  #line 8156 
  i = 0;
  #line 8156 
  while ((int)hdev->num_alloc_vport > i) {
    {
      #line 8157 
      u16 vlan_tag;
      #line 8159 
      vport = hdev->vport + (unsigned long)i;
      #line 8160 
      vlan_tag = vport->port_base_vlan_cfg.vlan_info.vlan_tag;
      #line 8162 
      ret = hclge_vlan_offload_cfg(vport,(unsigned short)((int)vport->port_base_vlan_cfg.state),(unsigned short)((int)vlan_tag));
      #line 8165 
      if (ret != 0) 
                    #line 8166 
                    return ret;
    }
    #line 8156 
    i ++;
  }
  #line 8169 
  return hclge_set_vlan_filter(handle,(unsigned short)129,(unsigned short)0,
                            (_Bool)0);
}

#line 8172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_add_vport_vlan_table(struct hclge_vport *vport, u16 vlan_id, bool writen_to_tbl)
{
  #line 8175 
  struct hclge_vport_vlan_cfg *vlan;
  #line 8177 
  vlan = (struct hclge_vport_vlan_cfg *)kzalloc_0(24UL,3264U);
  #line 8178 
  if (vlan == (struct hclge_vport_vlan_cfg *)0) 
                                                #line 8179 
                                                return;
  #line 8181 
  vlan->hd_tbl_status = (int)writen_to_tbl;
  #line 8182 
  vlan->vlan_id = vlan_id;
  #line 8184 
  list_add_tail(& vlan->node,& vport->vlan_list);
  #line 8185 
  return;
}

#line 8187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_add_vport_all_vlan_table(struct hclge_vport *vport)
{
  #line 8193 
  void *__mptr;
  #line 8193 
  void *__mptr_0;
  #line 8189 
  struct hclge_vport_vlan_cfg *vlan;
  #line 8189 
  struct hclge_vport_vlan_cfg *tmp;
  #line 8191 
  int ret;
  #line 8190 
  struct hclge_dev *hdev = vport->back;
  #line 8193 
  __mptr = (void *)vport->vlan_list.next;
  #line 8193 
  vlan = ((struct hclge_vport_vlan_cfg *)__mptr);
  #line 8193 
  __mptr_0 = (void *)vlan->node.next;
  #line 8194 
  tmp = ((struct hclge_vport_vlan_cfg *)__mptr_0);
  #line 8193 
  while (& vlan->node != & vport->vlan_list) {
    #line 8193 
    void *__mptr_1;
    #line 8194 
    if (vlan->hd_tbl_status == 0) {
      #line 8195 
      ret = hclge_set_vlan_filter_hw(hdev,(unsigned short)129,(unsigned short)((int)vport->vport_id),(unsigned short)((int)vlan->vlan_id),(_Bool)0);
      #line 8198 
      if (ret != 0) {
        #line 8199 
        _dev_err(& (hdev->pdev)->dev,(char *)"restore vport vlan list failed, ret=%d\n",ret);
        #line 8202 
        return ret;
      }
    }
    #line 8205 
    vlan->hd_tbl_status = 1;
    #line 8193 
    vlan = tmp;
    #line 8193 
    __mptr_1 = (void *)tmp->node.next;
    #line 8193 
    tmp = ((struct hclge_vport_vlan_cfg *)__mptr_1);
  }
  #line 8208 
  return 0;
}

#line 8211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_rm_vport_vlan_table(struct hclge_vport *vport, u16 vlan_id, bool is_write_tbl)
{
  #line 8217 
  void *__mptr;
  #line 8217 
  void *__mptr_0;
  #line 8214 
  struct hclge_vport_vlan_cfg *vlan;
  #line 8214 
  struct hclge_vport_vlan_cfg *tmp;
  #line 8215 
  struct hclge_dev *hdev = vport->back;
  #line 8217 
  __mptr = (void *)vport->vlan_list.next;
  #line 8217 
  vlan = ((struct hclge_vport_vlan_cfg *)__mptr);
  #line 8217 
  __mptr_0 = (void *)vlan->node.next;
  #line 8218 
  tmp = ((struct hclge_vport_vlan_cfg *)__mptr_0);
  #line 8217 
  while (& vlan->node != & vport->vlan_list) {
    #line 8217 
    void *__mptr_1;
    #line 8218 
    if ((int)vlan->vlan_id == (int)vlan_id) {
      #line 8219 
      if ((int)is_write_tbl != 0 && vlan->hd_tbl_status != 0) 
                                                              #line 8220 
                                                              hclge_set_vlan_filter_hw(hdev,(unsigned short)129,(unsigned short)((int)vport->vport_id),(unsigned short)((int)vlan_id),(_Bool)1);
      #line 8226 
      list_del(& vlan->node);
      #line 8227 
      kfree((void *)vlan);
      #line 8228 
      break;
    }
    #line 8217 
    vlan = tmp;
    #line 8217 
    __mptr_1 = (void *)tmp->node.next;
    #line 8217 
    tmp = ((struct hclge_vport_vlan_cfg *)__mptr_1);
  }
  #line 8230 
  return;
}

#line 8233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
void hclge_rm_vport_all_vlan_table(struct hclge_vport *vport, bool is_del_list)
{
  #line 8238 
  void *__mptr;
  #line 8238 
  void *__mptr_0;
  #line 8235 
  struct hclge_vport_vlan_cfg *vlan;
  #line 8235 
  struct hclge_vport_vlan_cfg *tmp;
  #line 8236 
  struct hclge_dev *hdev = vport->back;
  #line 8238 
  __mptr = (void *)vport->vlan_list.next;
  #line 8238 
  vlan = ((struct hclge_vport_vlan_cfg *)__mptr);
  #line 8238 
  __mptr_0 = (void *)vlan->node.next;
  #line 8239 
  tmp = ((struct hclge_vport_vlan_cfg *)__mptr_0);
  #line 8238 
  while (& vlan->node != & vport->vlan_list) {
    #line 8238 
    void *__mptr_1;
    #line 8239 
    if (vlan->hd_tbl_status != 0) 
                                  #line 8240 
                                  hclge_set_vlan_filter_hw(hdev,(unsigned short)129,(unsigned short)((int)vport->vport_id),(unsigned short)((int)vlan->vlan_id),(_Bool)1);
    #line 8246 
    vlan->hd_tbl_status = 0;
    #line 8247 
    if ((int)is_del_list != 0) {
      #line 8248 
      list_del(& vlan->node);
      #line 8249 
      kfree((void *)vlan);
    }
    #line 8238 
    vlan = tmp;
    #line 8238 
    __mptr_1 = (void *)tmp->node.next;
    #line 8238 
    tmp = ((struct hclge_vport_vlan_cfg *)__mptr_1);
  }
  #line 8252 
  return;
}

#line 8254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
void hclge_uninit_vport_vlan_table(struct hclge_dev *hdev)
{
  #line 8256 
  struct hclge_vport_vlan_cfg *vlan;
  #line 8256 
  struct hclge_vport_vlan_cfg *tmp;
  #line 8257 
  struct hclge_vport *vport;
  #line 8258 
  int i;
  #line 8260 
  cif_mutex_lock_vport_cfg_mutex_of_hclge_dev_0(& hdev->vport_cfg_mutex);
  #line 8261 
  i = 0;
  #line 8261 
  while ((int)hdev->num_alloc_vport > i) {
    {
      #line 8263 
      void *__mptr;
      #line 8263 
      void *__mptr_0;
      #line 8262 
      vport = hdev->vport + (unsigned long)i;
      #line 8263 
      __mptr = (void *)vport->vlan_list.next;
      #line 8263 
      vlan = ((struct hclge_vport_vlan_cfg *)__mptr);
      #line 8263 
      __mptr_0 = (void *)vlan->node.next;
      #line 8264 
      tmp = ((struct hclge_vport_vlan_cfg *)__mptr_0);
      #line 8263 
      while (& vlan->node != & vport->vlan_list) {
        #line 8263 
        void *__mptr_1;
        #line 8264 
        list_del(& vlan->node);
        #line 8265 
        kfree((void *)vlan);
        #line 8263 
        vlan = tmp;
        #line 8263 
        __mptr_1 = (void *)tmp->node.next;
        #line 8263 
        tmp = ((struct hclge_vport_vlan_cfg *)__mptr_1);
      }
    }
    #line 8261 
    i ++;
  }
  #line 8268 
  cif_mutex_unlock_vport_cfg_mutex_of_hclge_dev_0(& hdev->vport_cfg_mutex);
  #line 8269 
  return;
}

#line 8271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_restore_vlan_table(struct hnae3_handle *handle)
{
  #line 8274 
  struct hclge_vport_vlan_cfg *vlan;
  #line 8274 
  struct hclge_vport_vlan_cfg *tmp;
  #line 8276 
  u16 vlan_proto;
  #line 8277 
  u16 state;
  #line 8277 
  u16 vlan_id;
  #line 8278 
  int i;
  #line 8273 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 8275 
  struct hclge_dev *hdev = vport->back;
  #line 8280 
  cif_mutex_lock_vport_cfg_mutex_of_hclge_dev_0(& hdev->vport_cfg_mutex);
  #line 8281 
  i = 0;
  #line 8281 
  while ((int)hdev->num_alloc_vport > i) {
    {
      #line 8294 
      void *__mptr;
      #line 8294 
      void *__mptr_0;
      #line 8282 
      vport = hdev->vport + (unsigned long)i;
      #line 8283 
      vlan_proto = vport->port_base_vlan_cfg.vlan_info.vlan_proto;
      #line 8284 
      vlan_id = vport->port_base_vlan_cfg.vlan_info.vlan_tag;
      #line 8285 
      state = vport->port_base_vlan_cfg.state;
      #line 8287 
      if ((unsigned int)state != 0U) {
        #line 8288 
        ;
        #line 8288 
        ;
        #line 8288 
        ;
        #line 8288 
        hclge_set_vlan_filter_hw(hdev,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)vlan_proto))),(unsigned short)((int)vport->vport_id),(unsigned short)((int)vlan_id),(_Bool)0);
        #line 8291 
        goto __Cont;
      }
      #line 8294 
      __mptr = (void *)vport->vlan_list.next;
      #line 8294 
      vlan = ((struct hclge_vport_vlan_cfg *)__mptr);
      #line 8294 
      __mptr_0 = (void *)vlan->node.next;
      #line 8295 
      tmp = ((struct hclge_vport_vlan_cfg *)__mptr_0);
      #line 8294 
      while (& vlan->node != & vport->vlan_list) {
        #line 8294 
        void *__mptr_1;
        {
          #line 8295 
          int ret;
          #line 8297 
          if (vlan->hd_tbl_status == 0) 
                                        #line 8298 
                                        goto __Cont_0;
          #line 8299 
          ret = hclge_set_vlan_filter_hw(hdev,(unsigned short)129,(unsigned short)((int)vport->vport_id),(unsigned short)((int)vlan->vlan_id),(_Bool)0);
          #line 8302 
          if (ret != 0) 
                        #line 8303 
                        break;
        }
        #line 8294 
        __Cont_0: 
                  #line 8294 
        vlan = tmp;
        #line 8294 
        __mptr_1 = (void *)tmp->node.next;
        #line 8294 
        tmp = ((struct hclge_vport_vlan_cfg *)__mptr_1);
      }
    }
    #line 8281 
    __Cont: 
            #line 8281 
    i ++;
  }
  #line 8307 
  cif_mutex_unlock_vport_cfg_mutex_of_hclge_dev_0(& hdev->vport_cfg_mutex);
  #line 8308 
  return;
}

#line 8310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_en_hw_strip_rxvtag(struct hnae3_handle *handle, bool enable)
{
  #line 8312 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 8314 
  if ((unsigned int)vport->port_base_vlan_cfg.state == 0U) {
    #line 8315 
    vport->rxvlan_cfg.strip_tag1_en = (unsigned char)0U;
    #line 8316 
    vport->rxvlan_cfg.strip_tag2_en = (unsigned char)enable;
  }
  else {
    #line 8318 
    vport->rxvlan_cfg.strip_tag1_en = (unsigned char)enable;
    #line 8319 
    vport->rxvlan_cfg.strip_tag2_en = (unsigned char)1U;
  }
  #line 8321 
  vport->rxvlan_cfg.vlan1_vlan_prionly = (unsigned char)0U;
  #line 8322 
  vport->rxvlan_cfg.vlan2_vlan_prionly = (unsigned char)0U;
  #line 8323 
  vport->rxvlan_cfg.rx_vlan_offload_en = (unsigned char)enable;
  #line 8325 
  return hclge_set_vlan_rx_offload_cfg(vport);
}

#line 8328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_update_vlan_filter_entries(struct hclge_vport *vport, u16 port_base_vlan_state, struct hclge_vlan_info *new_info, struct hclge_vlan_info *old_info)
{
  #line 8334 
  int ret;
  #line 8333 
  struct hclge_dev *hdev = vport->back;
  #line 8336 
  if ((unsigned int)port_base_vlan_state == 1U) {
    #line 8337 
    hclge_rm_vport_all_vlan_table(vport,(_Bool)0);
    #line 8338 
    ;
    #line 8338 
    ;
    #line 8338 
    ;
    #line 8338 
    return hclge_set_vlan_filter_hw(hdev,
                                 (unsigned short)((int)__builtin_bswap16((unsigned short)((int)new_info->vlan_proto))),
                                 (unsigned short)((int)vport->vport_id),
                                 (unsigned short)((int)new_info->vlan_tag),
                                 (_Bool)0);
  }
  #line 8345 
  ;
  #line 8345 
  ;
  #line 8345 
  ;
  #line 8345 
  ret = hclge_set_vlan_filter_hw(hdev,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)old_info->vlan_proto))),(unsigned short)((int)vport->vport_id),(unsigned short)((int)old_info->vlan_tag),(_Bool)1);
  #line 8348 
  if (ret != 0) 
                #line 8349 
                return ret;
  #line 8351 
  return hclge_add_vport_all_vlan_table(vport);
}

#line 8354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_update_port_base_vlan_cfg(struct hclge_vport *vport, u16 state, struct hclge_vlan_info *vlan_info)
{
  #line 8358 
  struct hclge_vlan_info *old_vlan_info;
  #line 8360 
  int ret;
  #line 8357 
  struct hnae3_handle *nic = & vport->nic;
  #line 8359 
  struct hclge_dev *hdev = vport->back;
  #line 8362 
  old_vlan_info = & vport->port_base_vlan_cfg.vlan_info;
  #line 8364 
  ret = hclge_vlan_offload_cfg(vport,(unsigned short)((int)state),(unsigned short)((int)vlan_info->vlan_tag));
  #line 8365 
  if (ret != 0) 
                #line 8366 
                return ret;
  #line 8368 
  if ((unsigned int)state == 2U) {
    #line 8370 
    ;
    #line 8370 
    ;
    #line 8370 
    ;
    #line 8370 
    ret = hclge_set_vlan_filter_hw(hdev,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)vlan_info->vlan_proto))),(unsigned short)((int)vport->vport_id),(unsigned short)((int)vlan_info->vlan_tag),(_Bool)0);
    #line 8375 
    if (ret != 0) 
                  #line 8376 
                  return ret;
    #line 8379 
    ;
    #line 8379 
    ;
    #line 8379 
    ;
    #line 8379 
    ret = hclge_set_vlan_filter_hw(hdev,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)old_vlan_info->vlan_proto))),(unsigned short)((int)vport->vport_id),(unsigned short)((int)old_vlan_info->vlan_tag),(_Bool)1);
    #line 8384 
    if (ret != 0) 
                  #line 8385 
                  return ret;
    #line 8387 
    goto update;
  }
  #line 8390 
  ret = hclge_update_vlan_filter_entries(vport,(unsigned short)((int)state),vlan_info,old_vlan_info);
  #line 8392 
  if (ret != 0) 
                #line 8393 
                return ret;
  #line 8396 
  vport->port_base_vlan_cfg.state = state;
  #line 8397 
  if ((unsigned int)state == 0U) 
                                 #line 8398 
                                 nic->port_base_vlan_state = HNAE3_PORT_BASE_VLAN_DISABLE; else 
                                                                    #line 8400 
                                                                    nic->port_base_vlan_state = HNAE3_PORT_BASE_VLAN_ENABLE;
  #line 8402 
  update: 
          #line 8402 
  ;
  #line 8403 
  vport->port_base_vlan_cfg.vlan_info.vlan_tag = vlan_info->vlan_tag;
  #line 8404 
  vport->port_base_vlan_cfg.vlan_info.qos = vlan_info->qos;
  #line 8405 
  vport->port_base_vlan_cfg.vlan_info.vlan_proto = vlan_info->vlan_proto;
  #line 8407 
  return 0;
}

#line 8410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u16 hclge_get_port_base_vlan_state(struct hclge_vport *vport, enum hnae3_port_base_vlan_state state, u16 vlan)
{
  #line 8414 
  if (state == (unsigned int)HNAE3_PORT_BASE_VLAN_DISABLE) 
    #line 8415 
    if ((unsigned int)vlan == 0U) 
                                  #line 8416 
                                  return (unsigned short)3U; else 
                                                                  #line 8418 
                                                                  return (unsigned short)1U;
  else 
    #line 8420 
    if ((unsigned int)vlan == 0U) 
                                  #line 8421 
                                  return (unsigned short)0U;
    else 
      #line 8422 
      if ((int)vport->port_base_vlan_cfg.vlan_info.vlan_tag == (int)vlan) 
        #line 8423 
        return (unsigned short)3U; else 
                                        #line 8425 
                                        return (unsigned short)2U;
}

#line 8429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_vf_vlan_filter(struct hnae3_handle *handle, int vfid, u16 vlan, u8 qos, __be16 proto)
{
  #line 8434 
  struct hclge_vlan_info vlan_info;
  #line 8435 
  u16 state;
  #line 8436 
  int ret;
  #line 8432 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 8433 
  struct hclge_dev *hdev = vport->back;
  #line 8438 
  if ((unsigned int)(hdev->pdev)->revision == 32U) 
                                                   #line 8439 
                                                   return -95;
  #line 8441 
  vport = hclge_get_vf_vport(hdev,vfid);
  #line 8442 
  if (vport == (struct hclge_vport *)0) 
                                        #line 8443 
                                        return -22;
  #line 8446 
  if ((unsigned int)vlan > 4095U || (unsigned int)qos > 7U) 
                                                            #line 8447 
                                                            return -22;
  #line 8448 
  if ((unsigned int)proto != 129U) 
                                   #line 8449 
                                   return -93;
  #line 8451 
  state = hclge_get_port_base_vlan_state(vport,(enum hnae3_port_base_vlan_state)vport->port_base_vlan_cfg.state,(unsigned short)((int)vlan));
  #line 8454 
  if ((unsigned int)state == 3U) 
                                 #line 8455 
                                 return 0;
  #line 8457 
  vlan_info.vlan_tag = vlan;
  #line 8458 
  vlan_info.qos = (unsigned short)qos;
  #line 8459 
  vlan_info.vlan_proto = __builtin_bswap16((unsigned short)((int)proto));
  #line 8461 
  if (test_bit(0L,& vport->state)) {
    #line 8465 
    ;
    #line 8465 
    ;
    #line 8465 
    ;
    #line 8465 
    ;
    #line 8465 
    ;
    #line 8465 
    ret = hclge_push_vf_port_base_vlan_info(hdev->vport,(unsigned char)((int)((unsigned char)vport->vport_id)),(unsigned short)((int)state),(unsigned short)((int)vlan),(unsigned short)((int)qos),(unsigned short)((int)__builtin_bswap16((unsigned short)((int)proto))));
    #line 8469 
    return ret;
  }
  else {
    #line 8462 
    return hclge_update_port_base_vlan_cfg(vport,(unsigned short)((int)state),
                                        & vlan_info);
  }
}

#line 8473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_set_vlan_filter(struct hnae3_handle *handle, __be16 proto, u16 vlan_id, bool is_kill)
{
  #line 8476 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 8477 
  struct hclge_dev *hdev = vport->back;
  #line 8478 
  bool writen_to_tbl = (_Bool)0;
  #line 8479 
  int ret = 0;
  #line 8485 
  if ((int)test_bit(9L,& hdev->state) != 0) 
    #line 8485 
    if ((int)is_kill != 0) {
      #line 8486 
      cif_set_bit_0((long)vlan_id,(unsigned long *)(& vport->vlan_del_fail_bmap));
      #line 8487 
      return -16;
    }
  #line 8496 
  if (handle->port_base_vlan_state == (unsigned int)HNAE3_PORT_BASE_VLAN_DISABLE) {
    #line 8497 
    ret = hclge_set_vlan_filter_hw(hdev,(unsigned short)((int)proto),(unsigned short)((int)vport->vport_id),(unsigned short)((int)vlan_id),(_Bool)((bool)((int)is_kill) != 0));
    #line 8499 
    writen_to_tbl = (_Bool)1;
  }
  #line 8502 
  if (ret == 0) 
    #line 8503 
    if ((int)is_kill != 0) 
                           #line 8504 
                           hclge_rm_vport_vlan_table(vport,(unsigned short)((int)vlan_id),(_Bool)0); else 
                                                                    #line 8506 
                                                                    hclge_add_vport_vlan_table(vport,(unsigned short)((int)vlan_id),(_Bool)((bool)((int)writen_to_tbl) != 0));
  else 
    #line 8508 
    if ((int)is_kill != 0) 
                           #line 8513 
                           cif_set_bit_0((long)vlan_id,(unsigned long *)(& vport->vlan_del_fail_bmap));
  #line 8515 
  return ret;
}

#line 8518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_sync_vlan_filter(struct hclge_dev *hdev)
{
  #line 8522 
  int i;
  #line 8522 
  int ret;
  #line 8523 
  u16 vlan_id;
  #line 8522 
  int sync_cnt = 0;
  #line 8526 
  i = 0;
  #line 8526 
  while ((int)hdev->num_alloc_vport > i) {
    {
      #line 8527 
      struct hclge_vport *vport = hdev->vport + (unsigned long)i;
      #line 8529 
      vlan_id = (unsigned short)cif_find_first_bit((unsigned long *)(& vport->vlan_del_fail_bmap),
                         4096UL);
      #line 8531 
      while ((unsigned int)vlan_id != 4096U) {
        #line 8532 
        ret = hclge_set_vlan_filter_hw(hdev,(unsigned short)129,(unsigned short)((int)vport->vport_id),(unsigned short)((int)vlan_id),(_Bool)1);
        #line 8535 
        if (ret != 0 && ret != -22) 
                                    #line 8536 
                                    return;
        #line 8538 
        cif_clear_bit_0((long)vlan_id,(unsigned long *)(& vport->vlan_del_fail_bmap));
        #line 8539 
        hclge_rm_vport_vlan_table(vport,(unsigned short)((int)vlan_id),(_Bool)0);
        #line 8541 
        sync_cnt ++;
        #line 8542 
        if (sync_cnt > 59) 
                           #line 8543 
                           return;
        #line 8545 
        vlan_id = (unsigned short)cif_find_first_bit((unsigned long *)(& vport->vlan_del_fail_bmap),
                           4096UL);
      }
    }
    #line 8526 
    i ++;
  }
  #line 8548 
  return;
}

#line 8551  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_mac_mtu(struct hclge_dev *hdev, int new_mps)
{
  #line 8553 
  struct hclge_config_max_frm_size_cmd *req;
  #line 8554 
  struct hclge_desc desc;
  #line 8556 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_CONFIG_MAX_FRM_SIZE,(_Bool)0);
  #line 8558 
  req = (struct hclge_config_max_frm_size_cmd *)(& desc.data);
  #line 8559 
  req->max_frm_size = (unsigned short)new_mps;
  #line 8560 
  req->min_frm_size = (unsigned char)64U;
  #line 8562 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 8565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_mtu(struct hnae3_handle *handle, int new_mtu)
{
  #line 8567 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 8569 
  return hclge_set_vport_mtu(vport,new_mtu);
}

#line 8572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_set_vport_mtu(struct hclge_vport *vport, int new_mtu)
{
  #line 8583 
  int __UNIQUE_ID___x464;
  #line 8583 
  int tmp;
  #line 8575 
  int i;
  #line 8575 
  int max_frm_size;
  #line 8575 
  int ret;
  #line 8574 
  struct hclge_dev *hdev = vport->back;
  #line 8578 
  max_frm_size = new_mtu + 26;
  #line 8579 
  if ((unsigned int)max_frm_size + 4294967232U > 9664U) 
                                                        #line 8581 
                                                        return -22;
  {
    #line 8583 
    __UNIQUE_ID___x464 = max_frm_size;
    #line 8583 
    int __UNIQUE_ID___y465 = 1526;
    #line 8583 
    if (__UNIQUE_ID___x464 > __UNIQUE_ID___y465) 
                                                 #line 8583 
                                                 tmp = __UNIQUE_ID___x464; else 
                                                                    #line 8583 
                                                                    tmp = __UNIQUE_ID___y465;
    }
  #line 8583 
  max_frm_size = tmp;
  #line 8584 
  cif_mutex_lock_vport_lock_of_hclge_dev(& hdev->vport_lock);
  #line 8586 
  if ((unsigned int)vport->vport_id != 0U && hdev->mps < (unsigned int)max_frm_size) {
    #line 8587 
    cif_mutex_unlock_vport_lock_of_hclge_dev(& hdev->vport_lock);
    #line 8588 
    return -22;
  }
  else 
    #line 8589 
    if ((unsigned int)vport->vport_id != 0U) {
      #line 8590 
      vport->mps = (unsigned int)max_frm_size;
      #line 8591 
      cif_mutex_unlock_vport_lock_of_hclge_dev(& hdev->vport_lock);
      #line 8592 
      return 0;
    }
  #line 8596 
  i = 1;
  #line 8596 
  while ((int)hdev->num_alloc_vport > i) {
    #line 8597 
    if ((hdev->vport + (unsigned long)i)->mps > (unsigned int)max_frm_size) {
      #line 8598 
      cif_mutex_unlock_vport_lock_of_hclge_dev(& hdev->vport_lock);
      #line 8599 
      return -22;
    }
    #line 8596 
    i ++;
  }
  #line 8602 
  hclge_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_DOWN_CLIENT);
  #line 8604 
  ret = hclge_set_mac_mtu(hdev,max_frm_size);
  #line 8605 
  if (ret != 0) {
    #line 8606 
    _dev_err(& (hdev->pdev)->dev,(char *)"Change mtu fail, ret =%d\n",ret);
    #line 8608 
    goto out;
  }
  #line 8611 
  hdev->mps = (unsigned int)max_frm_size;
  #line 8612 
  vport->mps = (unsigned int)max_frm_size;
  #line 8614 
  ret = hclge_buffer_alloc(hdev);
  #line 8615 
  if (ret != 0) 
                #line 8616 
                _dev_err(& (hdev->pdev)->dev,(char *)"Allocate buffer fail, ret =%d\n",ret);
  #line 8619 
  out: 
       #line 8619 
  ;
  #line 8620 
  hclge_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_UP_CLIENT);
  #line 8621 
  cif_mutex_unlock_vport_lock_of_hclge_dev(& hdev->vport_lock);
  #line 8622 
  return ret;
}

#line 8625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_send_reset_tqp_cmd(struct hclge_dev *hdev, u16 queue_id, bool enable)
{
  #line 8628 
  struct hclge_reset_tqp_queue_cmd *req;
  #line 8629 
  struct hclge_desc desc;
  #line 8630 
  int ret;
  #line 8632 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_RESET_TQP_QUEUE,(_Bool)0);
  #line 8634 
  req = (struct hclge_reset_tqp_queue_cmd *)(& desc.data);
  #line 8635 
  req->tqp_id = (unsigned short)((unsigned int)queue_id & 1023U);
  #line 8636 
  if ((int)enable != 0) {
    #line 8637 
    req->reset_req = (unsigned char)((unsigned int)req->reset_req & 254U);
    #line 8637 
    req->reset_req = (unsigned char)((unsigned int)req->reset_req | 1U);
  }
  #line 8639 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 8640 
  if (ret != 0) {
    #line 8641 
    _dev_err(& (hdev->pdev)->dev,(char *)"Send tqp reset cmd error, status =%d\n",ret);
    #line 8643 
    return ret;
  }
  #line 8646 
  return 0;
}

#line 8649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_reset_status(struct hclge_dev *hdev, u16 queue_id)
{
  #line 8651 
  struct hclge_reset_tqp_queue_cmd *req;
  #line 8652 
  struct hclge_desc desc;
  #line 8653 
  int ret;
  #line 8655 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_RESET_TQP_QUEUE,(_Bool)1);
  #line 8657 
  req = (struct hclge_reset_tqp_queue_cmd *)(& desc.data);
  #line 8658 
  req->tqp_id = (unsigned short)((unsigned int)queue_id & 1023U);
  #line 8660 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 8661 
  if (ret != 0) {
    #line 8662 
    _dev_err(& (hdev->pdev)->dev,(char *)"Get reset status error, status =%d\n",ret);
    #line 8664 
    return ret;
  }
  #line 8667 
  return (int)req->ready_to_reset & 1;
}

#line 8670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
u16 hclge_covert_handle_qid_global(struct hnae3_handle *handle, u16 queue_id)
{
  #line 8676 
  void *__mptr;
  #line 8672 
  struct hnae3_queue *queue;
  #line 8673 
  struct hclge_tqp *tqp;
  #line 8675 
  queue = *(handle->__anonCompField_hnae3_handle_167.kinfo.tqp + (unsigned long)queue_id);
  #line 8676 
  __mptr = (void *)queue;
  #line 8676 
  tqp = ((struct hclge_tqp *)(__mptr + 18446744073709551608U));
  #line 8678 
  return tqp->index;
}

#line 8681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_reset_tqp(struct hnae3_handle *handle, u16 queue_id)
{
  #line 8686 
  int reset_status;
  #line 8687 
  u16 queue_gid;
  #line 8688 
  int ret;
  #line 8683 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 8684 
  struct hclge_dev *hdev = vport->back;
  #line 8685 
  int reset_try_times = 0;
  #line 8690 
  queue_gid = hclge_covert_handle_qid_global(handle,(unsigned short)((int)queue_id));
  #line 8692 
  ret = hclge_tqp_enable(hdev,(unsigned int)queue_id,0,(_Bool)0);
  #line 8693 
  if (ret != 0) {
    #line 8694 
    _dev_err(& (hdev->pdev)->dev,(char *)"Disable tqp fail, ret = %d\n",ret);
    #line 8695 
    return ret;
  }
  #line 8698 
  ret = hclge_send_reset_tqp_cmd(hdev,(unsigned short)((int)queue_gid),(_Bool)1);
  #line 8699 
  if (ret != 0) {
    #line 8700 
    _dev_err(& (hdev->pdev)->dev,(char *)"Send reset tqp cmd fail, ret = %d\n",ret);
    #line 8702 
    return ret;
  }
  #line 8705 
  while (1) {
    #line 8705 
    int tmp_0;
    #line 8705 
    tmp_0 = reset_try_times;
    #line 8705 
    reset_try_times ++;
    #line 8705 
    ;
    #line 8705 
    if (! (tmp_0 <= 199)) 
                          #line 8705 
                          break;
    #line 8706 
    reset_status = hclge_get_reset_status(hdev,(unsigned short)((int)queue_gid));
    #line 8707 
    if (reset_status != 0) 
                           #line 8708 
                           break;
    #line 8711 
    usleep_range(1000UL,1200UL);
  }
  #line 8714 
  if (reset_try_times > 199) {
    #line 8715 
    _dev_err(& (hdev->pdev)->dev,(char *)"Reset TQP fail\n");
    #line 8716 
    return ret;
  }
  #line 8719 
  ret = hclge_send_reset_tqp_cmd(hdev,(unsigned short)((int)queue_gid),(_Bool)0);
  #line 8720 
  if (ret != 0) 
                #line 8721 
                _dev_err(& (hdev->pdev)->dev,(char *)"Deassert the soft reset fail, ret = %d\n",ret);
  #line 8724 
  return ret;
}

#line 8727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
void hclge_reset_vf_queue(struct hclge_vport *vport, u16 queue_id)
{
  #line 8731 
  int reset_status;
  #line 8732 
  u16 queue_gid;
  #line 8733 
  int ret;
  #line 8729 
  struct hclge_dev *hdev = vport->back;
  #line 8730 
  int reset_try_times = 0;
  #line 8735 
  queue_gid = hclge_covert_handle_qid_global(& vport->nic,(unsigned short)((int)queue_id));
  #line 8737 
  ret = hclge_send_reset_tqp_cmd(hdev,(unsigned short)((int)queue_gid),(_Bool)1);
  #line 8738 
  if (ret != 0) {
    #line 8739 
    _dev_warn(& (hdev->pdev)->dev,(char *)"Send reset tqp cmd fail, ret = %d\n",ret);
    #line 8741 
    return;
  }
  #line 8744 
  while (1) {
    #line 8744 
    int tmp;
    #line 8744 
    tmp = reset_try_times;
    #line 8744 
    reset_try_times ++;
    #line 8744 
    ;
    #line 8744 
    if (! (tmp <= 199)) 
                        #line 8744 
                        break;
    #line 8745 
    reset_status = hclge_get_reset_status(hdev,(unsigned short)((int)queue_gid));
    #line 8746 
    if (reset_status != 0) 
                           #line 8747 
                           break;
    #line 8750 
    usleep_range(1000UL,1200UL);
  }
  #line 8753 
  if (reset_try_times > 199) {
    #line 8754 
    _dev_warn(& (hdev->pdev)->dev,(char *)"Reset TQP fail\n");
    #line 8755 
    return;
  }
  #line 8758 
  ret = hclge_send_reset_tqp_cmd(hdev,(unsigned short)((int)queue_gid),(_Bool)0);
  #line 8759 
  if (ret != 0) 
                #line 8760 
                _dev_warn(& (hdev->pdev)->dev,(char *)"Deassert the soft reset fail, ret = %d\n",ret);
  #line 8761 
  return;
}

#line 8764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u32 hclge_get_fw_version(struct hnae3_handle *handle)
{
  #line 8766 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 8767 
  struct hclge_dev *hdev = vport->back;
  #line 8769 
  return hdev->fw_version;
}

#line 8772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_set_flowctrl_adv(struct hclge_dev *hdev, u32 rx_en, u32 tx_en)
{
  #line 8774 
  struct phy_device *phydev = hdev->hw.mac.phydev;
  #line 8776 
  if (phydev == (struct phy_device *)0) 
                                        #line 8777 
                                        return;
  #line 8779 
  phy_set_asym_pause(phydev,(_Bool)(rx_en != 0U),(_Bool)(tx_en != 0U));
  #line 8780 
  return;
}

#line 8782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_cfg_pauseparam(struct hclge_dev *hdev, u32 rx_en, u32 tx_en)
{
  #line 8784 
  int ret;
  #line 8786 
  if (hdev->tm_info.fc_mode == (unsigned int)HCLGE_FC_PFC) 
                                                           #line 8787 
                                                           return 0;
  #line 8789 
  ret = hclge_mac_pause_en_cfg(hdev,(_Bool)(tx_en != 0U),(_Bool)(rx_en != 0U));
  #line 8790 
  if (ret != 0) 
                #line 8791 
                _dev_err(& (hdev->pdev)->dev,(char *)"configure pauseparam error, ret = %d.\n",ret);
  #line 8794 
  return ret;
}

#line 8797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_cfg_flowctrl(struct hclge_dev *hdev)
{
  #line 8801 
  u16 local_advertising;
  #line 8802 
  u32 rx_pause;
  #line 8802 
  u32 tx_pause;
  #line 8803 
  u8 flowctl;
  #line 8799 
  struct phy_device *phydev = hdev->hw.mac.phydev;
  #line 8800 
  u16 remote_advertising = (unsigned short)0U;
  #line 8805 
  if ((unsigned int)phydev->link == 0U || (unsigned int)phydev->autoneg == 0U) 
    #line 8806 
    return 0;
  #line 8808 
  local_advertising = (unsigned short)linkmode_adv_to_lcl_adv_t((unsigned long *)(& phydev->advertising));
  #line 8810 
  if (phydev->pause != 0) 
                          #line 8811 
                          remote_advertising = (unsigned short)1024U;
  #line 8813 
  if (phydev->asym_pause != 0) 
                               #line 8814 
                               remote_advertising = (unsigned short)((unsigned int)remote_advertising | 2048U);
  #line 8816 
  flowctl = mii_resolve_flowctrl_fdx((unsigned short)((int)local_advertising),(unsigned short)((int)remote_advertising));
  #line 8818 
  tx_pause = (unsigned int)flowctl & 1U;
  #line 8819 
  rx_pause = (unsigned int)flowctl & 2U;
  #line 8821 
  if (phydev->duplex == 0) {
    #line 8822 
    tx_pause = 0U;
    #line 8823 
    rx_pause = 0U;
  }
  #line 8826 
  return hclge_cfg_pauseparam(hdev,rx_pause,tx_pause);
}

#line 8829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_get_pauseparam(struct hnae3_handle *handle, u32 *auto_neg, u32 *rx_en, u32 *tx_en)
{
  #line 8832 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 8833 
  struct hclge_dev *hdev = vport->back;
  #line 8834 
  struct phy_device *phydev = hdev->hw.mac.phydev;
  #line 8836 
  if (phydev != (struct phy_device *)0) {
    #line 8836 
    *auto_neg = (unsigned int)hclge_get_autoneg(handle);
  }
  else 
       #line 8836 
       *auto_neg = 0U;
  #line 8838 
  if (hdev->tm_info.fc_mode == (unsigned int)HCLGE_FC_PFC) {
    #line 8839 
    *rx_en = 0U;
    #line 8840 
    *tx_en = 0U;
    #line 8841 
    return;
  }
  #line 8844 
  if (hdev->tm_info.fc_mode == (unsigned int)HCLGE_FC_RX_PAUSE) {
    #line 8845 
    *rx_en = 1U;
    #line 8846 
    *tx_en = 0U;
  }
  else 
    #line 8847 
    if (hdev->tm_info.fc_mode == (unsigned int)HCLGE_FC_TX_PAUSE) {
      #line 8848 
      *tx_en = 1U;
      #line 8849 
      *rx_en = 0U;
    }
    else 
      #line 8850 
      if (hdev->tm_info.fc_mode == (unsigned int)HCLGE_FC_FULL) {
        #line 8851 
        *rx_en = 1U;
        #line 8852 
        *tx_en = 1U;
      }
      else {
        #line 8854 
        *rx_en = 0U;
        #line 8855 
        *tx_en = 0U;
      }
  #line 8857 
  return;
}

#line 8859  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_record_user_pauseparam(struct hclge_dev *hdev, u32 rx_en, u32 tx_en)
{
  #line 8862 
  if (rx_en != 0U && tx_en != 0U) 
                                  #line 8863 
                                  hdev->fc_mode_last_time = HCLGE_FC_FULL;
  else 
    #line 8864 
    if (rx_en != 0U && tx_en == 0U) 
                                    #line 8865 
                                    hdev->fc_mode_last_time = HCLGE_FC_RX_PAUSE;
    else 
      #line 8866 
      if (rx_en == 0U && tx_en != 0U) 
                                      #line 8867 
                                      hdev->fc_mode_last_time = HCLGE_FC_TX_PAUSE; else 
                                                                    #line 8869 
                                                                    hdev->fc_mode_last_time = HCLGE_FC_NONE;
  #line 8871 
  hdev->tm_info.fc_mode = hdev->fc_mode_last_time;
  #line 8872 
  return;
}

#line 8874  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_pauseparam(struct hnae3_handle *handle, u32 auto_neg, u32 rx_en, u32 tx_en)
{
  #line 8880 
  u32 fc_autoneg;
  #line 8877 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 8878 
  struct hclge_dev *hdev = vport->back;
  #line 8879 
  struct phy_device *phydev = hdev->hw.mac.phydev;
  #line 8882 
  if (phydev != (struct phy_device *)0) {
    #line 8883 
    fc_autoneg = (unsigned int)hclge_get_autoneg(handle);
    #line 8884 
    if (auto_neg != fc_autoneg) {
      #line 8885 
      _dev_info(& (hdev->pdev)->dev,(char *)"To change autoneg please use: ethtool -s <dev> autoneg <on|off>\n");
      #line 8887 
      return -95;
    }
  }
  #line 8891 
  if (hdev->tm_info.fc_mode == (unsigned int)HCLGE_FC_PFC) {
    #line 8892 
    _dev_info(& (hdev->pdev)->dev,(char *)"Priority flow control enabled. Cannot set link flow control.\n");
    #line 8894 
    return -95;
  }
  #line 8897 
  hclge_set_flowctrl_adv(hdev,rx_en,tx_en);
  #line 8899 
  hclge_record_user_pauseparam(hdev,rx_en,tx_en);
  #line 8901 
  if (auto_neg == 0U) {
    #line 8902 
    return hclge_cfg_pauseparam(hdev,rx_en,tx_en);
  }
  #line 8904 
  if (phydev != (struct phy_device *)0) {
    #line 8905 
    return phy_start_aneg(phydev);
  }
  #line 8907 
  return -95;
}

#line 8910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_get_ksettings_an_result(struct hnae3_handle *handle, u8 *auto_neg, u32 *speed, u8 *duplex)
{
  #line 8913 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 8914 
  struct hclge_dev *hdev = vport->back;
  #line 8916 
  if (speed != (u32 *)0U) 
                          #line 8917 
                          *speed = hdev->hw.mac.speed;
  #line 8918 
  if (duplex != (u8 *)0U) 
                          #line 8919 
                          *duplex = hdev->hw.mac.duplex;
  #line 8920 
  if (auto_neg != (u8 *)0U) 
                            #line 8921 
                            *auto_neg = hdev->hw.mac.autoneg;
  #line 8922 
  return;
}

#line 8924  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_get_media_type(struct hnae3_handle *handle, u8 *media_type, u8 *module_type)
{
  #line 8927 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 8928 
  struct hclge_dev *hdev = vport->back;
  #line 8930 
  if (media_type != (u8 *)0U) 
                              #line 8931 
                              *media_type = hdev->hw.mac.media_type;
  #line 8933 
  if (module_type != (u8 *)0U) 
                               #line 8934 
                               *module_type = (unsigned char)hdev->hw.mac.module_type;
  #line 8935 
  return;
}

#line 8937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_get_mdix_mode(struct hnae3_handle *handle, u8 *tp_mdix_ctrl, u8 *tp_mdix)
{
  #line 8943 
  int mdix_ctrl;
  #line 8943 
  int mdix;
  #line 8943 
  int is_resolved;
  #line 8944 
  unsigned int retval;
  #line 8940 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 8941 
  struct hclge_dev *hdev = vport->back;
  #line 8942 
  struct phy_device *phydev = hdev->hw.mac.phydev;
  #line 8946 
  if (phydev == (struct phy_device *)0) {
    #line 8947 
    *tp_mdix_ctrl = (unsigned char)0U;
    #line 8948 
    *tp_mdix = (unsigned char)0U;
    #line 8949 
    return;
  }
  #line 8952 
  phy_write(phydev,22U,(unsigned short)0);
  #line 8954 
  retval = (unsigned int)phy_read(phydev,16U);
  #line 8955 
  mdix_ctrl = (int)((unsigned long)retval >> 5) & 3;
  #line 8958 
  retval = (unsigned int)phy_read(phydev,17U);
  #line 8959 
  mdix = (int)(retval >> 6) & 1;
  #line 8960 
  is_resolved = (int)(retval >> 11) & 1;
  #line 8962 
  phy_write(phydev,22U,(unsigned short)0);
  #line 8964 
  switch (mdix_ctrl) {
    #line 8965 
    case 0: 
            #line 8965 
    ;
    #line 8966 
    *tp_mdix_ctrl = (unsigned char)1U;
    #line 8967 
    break;
    #line 8968 
    case 1: 
            #line 8968 
    ;
    #line 8969 
    *tp_mdix_ctrl = (unsigned char)2U;
    #line 8970 
    break;
    #line 8971 
    case 3: 
            #line 8971 
    ;
    #line 8972 
    *tp_mdix_ctrl = (unsigned char)3U;
    #line 8973 
    break;
    #line 8974 
    default: 
             #line 8974 
    ;
    #line 8975 
    *tp_mdix_ctrl = (unsigned char)0U;
    #line 8976 
    break;
  }
  #line 8979 
  if (is_resolved == 0) 
                        #line 8980 
                        *tp_mdix = (unsigned char)0U;
  else 
    #line 8981 
    if (mdix != 0) 
                   #line 8982 
                   *tp_mdix = (unsigned char)2U; else 
                                                      #line 8984 
                                                      *tp_mdix = (unsigned char)1U;
  #line 8985 
  return;
}

#line 8987  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_info_show(struct hclge_dev *hdev)
{
  #line 9003 
  char *tmp;
  #line 9005 
  char *tmp_0;
  #line 9007 
  char *tmp_1;
  #line 8989 
  struct device *dev = & (hdev->pdev)->dev;
  #line 8991 
  _dev_info(dev,(char *)"PF info begin:\n");
  #line 8993 
  _dev_info(dev,(char *)"Task queue pairs numbers: %u\n",(int)hdev->num_tqps);
  #line 8994 
  _dev_info(dev,(char *)"Desc num per TX queue: %u\n",(int)hdev->num_tx_desc);
  #line 8995 
  _dev_info(dev,(char *)"Desc num per RX queue: %u\n",(int)hdev->num_rx_desc);
  #line 8996 
  _dev_info(dev,(char *)"Numbers of vports: %u\n",(int)hdev->num_alloc_vport);
  #line 8997 
  _dev_info(dev,(char *)"Numbers of vmdp vports: %u\n",(int)hdev->num_vmdq_vport);
  #line 8998 
  _dev_info(dev,(char *)"Numbers of VF for this PF: %u\n",(int)hdev->num_req_vfs);
  #line 8999 
  _dev_info(dev,(char *)"HW tc map: 0x%x\n",(int)hdev->hw_tc_map);
  #line 9000 
  _dev_info(dev,(char *)"Total buffer size for TX/RX: %u\n",hdev->pkt_buf_size);
  #line 9001 
  _dev_info(dev,(char *)"TX buffer size for each TC: %u\n",hdev->tx_buf_size);
  #line 9002 
  _dev_info(dev,(char *)"DV buffer size for each TC: %u\n",hdev->dv_buf_size);
  #line 9003 
  if (((unsigned long)hdev->flag & 1UL) != 0UL) 
                                                #line 9003 
                                                tmp = (char *)"main"; else 
                                                                    #line 9003 
                                                                    tmp = (char *)"not main";
  #line 9003 
  ;
  #line 9003 
  _dev_info(dev,(char *)"This is %s PF\n",tmp);
  #line 9005 
  if (((unsigned long)hdev->flag & 4UL) != 0UL) 
                                                #line 9005 
                                                tmp_0 = (char *)"enable"; else 
                                                                    #line 9005 
                                                                    tmp_0 = (char *)"disable";
  #line 9005 
  ;
  #line 9005 
  _dev_info(dev,(char *)"DCB %s\n",tmp_0);
  #line 9007 
  if (((unsigned long)hdev->flag & 8UL) != 0UL) 
                                                #line 9007 
                                                tmp_1 = (char *)"enable"; else 
                                                                    #line 9007 
                                                                    tmp_1 = (char *)"disable";
  #line 9007 
  ;
  #line 9007 
  _dev_info(dev,(char *)"MQPRIO %s\n",tmp_1);
  #line 9010 
  _dev_info(dev,(char *)"PF info end.\n");
  #line 9011 
  return;
}

#line 9013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_init_nic_client_instance(struct hnae3_ae_dev *ae_dev, struct hclge_vport *vport)
{
  #line 9019 
  int ret;
  #line 9016 
  struct hnae3_client *client = vport->nic.client;
  #line 9017 
  struct hclge_dev *hdev = (struct hclge_dev *)ae_dev->priv;
  #line 9018 
  int rst_cnt = (int)hdev->rst_stats.reset_cnt;
  #line 9021 
  ret = (*((client->ops)->init_instance))(& vport->nic);
  #line 9022 
  if (ret != 0) 
                #line 9023 
                return ret;
  #line 9025 
  cif_set_bit_0(4L,& hdev->state);
  #line 9026 
  if ((int)test_bit(9L,& hdev->state) != 0) 
                                            #line 9026 
                                            goto _LOR;
  else 
    #line 9026 
    if (hdev->rst_stats.reset_cnt != (unsigned int)rst_cnt) {
      #line 9026 
      _LOR: {
              #line 9028 
              ret = -16;
              #line 9029 
              goto init_nic_err;
            }
    }
  #line 9033 
  ret = hclge_config_nic_hw_error(hdev,(_Bool)1);
  #line 9034 
  if (ret != 0) {
    #line 9035 
    _dev_err(& (ae_dev->pdev)->dev,(char *)"fail(%d) to enable hw error interrupts\n",ret);
    #line 9037 
    goto init_nic_err;
  }
  #line 9040 
  hnae3_set_client_init_flag(client,ae_dev,1U);
  #line 9042 
  if (((hdev->vport)->nic.msg_enable & 1U) != 0U) 
                                                  #line 9043 
                                                  hclge_info_show(hdev);
  #line 9045 
  return ret;
  #line 9047 
  init_nic_err: 
                #line 9047 
  ;
  #line 9048 
  cif_clear_bit_0(4L,& hdev->state);
  #line 9049 
  while (1) {
    #line 9049 
    if (! ((int)test_bit(9L,& hdev->state) != 0)) 
                                                  #line 9049 
                                                  break;
    #line 9050 
    msleep(100U);
  }
  #line 9052 
  (*((client->ops)->uninit_instance))(& vport->nic,(_Bool)0);
  #line 9054 
  return ret;
}

#line 9057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_init_roce_client_instance(struct hnae3_ae_dev *ae_dev, struct hclge_vport *vport)
{
  #line 9062 
  int rst_cnt;
  #line 9063 
  int ret;
  #line 9060 
  struct hnae3_client *client = vport->roce.client;
  #line 9061 
  struct hclge_dev *hdev = (struct hclge_dev *)ae_dev->priv;
  #line 9065 
  if ((((hdev->ae_dev)->flag & 2U) == 0U || hdev->roce_client == (struct hnae3_client *)0) || hdev->nic_client == (struct hnae3_client *)0) 
    #line 9067 
    return 0;
  #line 9069 
  client = hdev->roce_client;
  #line 9070 
  ret = hclge_init_roce_base_info(vport);
  #line 9071 
  if (ret != 0) 
                #line 9072 
                return ret;
  #line 9074 
  rst_cnt = (int)hdev->rst_stats.reset_cnt;
  #line 9075 
  ret = (*((client->ops)->init_instance))(& vport->roce);
  #line 9076 
  if (ret != 0) 
                #line 9077 
                return ret;
  #line 9079 
  cif_set_bit_0(5L,& hdev->state);
  #line 9080 
  if ((int)test_bit(9L,& hdev->state) != 0) 
                                            #line 9080 
                                            goto _LOR;
  else 
    #line 9080 
    if (hdev->rst_stats.reset_cnt != (unsigned int)rst_cnt) {
      #line 9080 
      _LOR: {
              #line 9082 
              ret = -16;
              #line 9083 
              goto init_roce_err;
            }
    }
  #line 9087 
  ret = hclge_config_rocee_ras_interrupt(hdev,(_Bool)1);
  #line 9088 
  if (ret != 0) {
    #line 9089 
    _dev_err(& (ae_dev->pdev)->dev,(char *)"fail(%d) to enable roce ras interrupts\n",ret);
    #line 9091 
    goto init_roce_err;
  }
  #line 9094 
  hnae3_set_client_init_flag(client,ae_dev,1U);
  #line 9096 
  return 0;
  #line 9098 
  init_roce_err: 
                 #line 9098 
  ;
  #line 9099 
  cif_clear_bit_0(5L,& hdev->state);
  #line 9100 
  while (1) {
    #line 9100 
    if (! ((int)test_bit(9L,& hdev->state) != 0)) 
                                                  #line 9100 
                                                  break;
    #line 9101 
    msleep(100U);
  }
  #line 9103 
  (*(((hdev->roce_client)->ops)->uninit_instance))(& vport->roce,(_Bool)0);
  #line 9105 
  return ret;
}

#line 9108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_init_client_instance(struct hnae3_client *client, struct hnae3_ae_dev *ae_dev)
{
  #line 9112 
  struct hclge_vport *vport;
  #line 9113 
  int i;
  #line 9113 
  int ret;
  #line 9111 
  struct hclge_dev *hdev = (struct hclge_dev *)ae_dev->priv;
  #line 9115 
  i = 0;
  #line 9115 
  while ((int)hdev->num_vmdq_vport >= i) {
    #line 9116 
    vport = hdev->vport + (unsigned long)i;
    #line 9118 
    switch ((unsigned int)client->type) {
      #line 9119 
      case (unsigned int)0: 
                            #line 9119 
      ;
      #line 9120 
      hdev->nic_client = client;
      #line 9121 
      vport->nic.client = client;
      #line 9122 
      ret = hclge_init_nic_client_instance(ae_dev,vport);
      #line 9123 
      if (ret != 0) 
                    #line 9124 
                    goto clear_nic;
      #line 9126 
      ret = hclge_init_roce_client_instance(ae_dev,vport);
      #line 9127 
      if (ret != 0) 
                    #line 9128 
                    goto clear_roce;
      #line 9130 
      break;
      #line 9131 
      case (unsigned int)1: 
                            #line 9131 
      ;
      #line 9132 
      if (((hdev->ae_dev)->flag & 2U) != 0U) {
        #line 9133 
        hdev->roce_client = client;
        #line 9134 
        vport->roce.client = client;
      }
      #line 9137 
      ret = hclge_init_roce_client_instance(ae_dev,vport);
      #line 9138 
      if (ret != 0) 
                    #line 9139 
                    goto clear_roce;
      #line 9141 
      break;
      #line 9142 
      default: 
               #line 9142 
      ;
      #line 9143 
      return -22;
    }
    #line 9115 
    i ++;
  }
  #line 9147 
  return 0;
  #line 9149 
  clear_nic: 
             #line 9149 
  ;
  #line 9150 
  hdev->nic_client = (struct hnae3_client *)0;
  #line 9151 
  vport->nic.client = (struct hnae3_client *)0;
  #line 9152 
  return ret;
  #line 9153 
  clear_roce: 
              #line 9153 
  ;
  #line 9154 
  hdev->roce_client = (struct hnae3_client *)0;
  #line 9155 
  vport->roce.client = (struct hnae3_client *)0;
  #line 9156 
  return ret;
}

#line 9159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_uninit_client_instance(struct hnae3_client *client, struct hnae3_ae_dev *ae_dev)
{
  #line 9163 
  struct hclge_vport *vport;
  #line 9164 
  int i;
  #line 9162 
  struct hclge_dev *hdev = (struct hclge_dev *)ae_dev->priv;
  #line 9166 
  i = 0;
  #line 9166 
  while ((int)hdev->num_vmdq_vport >= i) {
    #line 9167 
    vport = hdev->vport + (unsigned long)i;
    #line 9168 
    if (hdev->roce_client != (struct hnae3_client *)0) {
      #line 9169 
      cif_clear_bit_0(5L,& hdev->state);
      #line 9170 
      while (1) {
        #line 9170 
        if (! ((int)test_bit(9L,& hdev->state) != 0)) 
                                                      #line 9170 
                                                      break;
        #line 9171 
        msleep(100U);
      }
      #line 9173 
      (*(((hdev->roce_client)->ops)->uninit_instance))(& vport->roce,(_Bool)0);
      #line 9175 
      hdev->roce_client = (struct hnae3_client *)0;
      #line 9176 
      vport->roce.client = (struct hnae3_client *)0;
    }
    #line 9178 
    if (client->type == (unsigned int)HNAE3_CLIENT_ROCE) 
                                                         #line 9179 
                                                         return;
    #line 9180 
    if (hdev->nic_client != (struct hnae3_client *)0 && (client->ops)->uninit_instance != (void (*)(struct hnae3_handle *, bool ))0) {
      #line 9181 
      cif_clear_bit_0(4L,& hdev->state);
      #line 9182 
      while (1) {
        #line 9182 
        if (! ((int)test_bit(9L,& hdev->state) != 0)) 
                                                      #line 9182 
                                                      break;
        #line 9183 
        msleep(100U);
      }
      #line 9185 
      (*((client->ops)->uninit_instance))(& vport->nic,(_Bool)0);
      #line 9186 
      hdev->nic_client = (struct hnae3_client *)0;
      #line 9187 
      vport->nic.client = (struct hnae3_client *)0;
    }
    #line 9166 
    i ++;
  }
  #line 9190 
  return;
}

#line 9192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_pci_init(struct hclge_dev *hdev)
{
  #line 9195 
  struct hclge_hw *hw;
  #line 9196 
  int ret;
  #line 9194 
  struct pci_dev *pdev = hdev->pdev;
  #line 9198 
  ret = pci_enable_device(pdev);
  #line 9199 
  if (ret != 0) {
    #line 9200 
    _dev_err(& pdev->dev,(char *)"failed to enable PCI device\n");
    #line 9201 
    return ret;
  }
  #line 9204 
  ret = dma_set_mask_and_coherent(& pdev->dev,18446744073709551615ULL);
  #line 9205 
  if (ret != 0) {
    #line 9206 
    ret = dma_set_mask_and_coherent(& pdev->dev,4294967295ULL);
    #line 9207 
    if (ret != 0) {
      #line 9208 
      _dev_err(& pdev->dev,(char *)"can\'t set consistent PCI DMA");
      #line 9210 
      goto err_disable_device;
    }
    #line 9212 
    _dev_warn(& pdev->dev,(char *)"set DMA mask to 32 bits\n");
  }
  #line 9215 
  ret = pci_request_regions(pdev,(char *)"hclge");
  #line 9216 
  if (ret != 0) {
    #line 9217 
    _dev_err(& pdev->dev,(char *)"PCI request regions failed %d\n",ret);
    #line 9218 
    goto err_disable_device;
  }
  #line 9221 
  pci_set_master(pdev);
  #line 9222 
  hw = & hdev->hw;
  #line 9223 
  hw->io_base = pcim_iomap(pdev,2,0UL);
  #line 9224 
  if (hw->io_base == (void *)0) {
    #line 9225 
    _dev_err(& pdev->dev,(char *)"Can\'t map configuration register space\n");
    #line 9226 
    ret = -12;
    #line 9227 
    goto err_clr_master;
  }
  #line 9230 
  hdev->num_req_vfs = (unsigned short)pci_sriov_get_totalvfs(pdev);
  #line 9232 
  return 0;
  #line 9233 
  err_clr_master: 
                  #line 9233 
  ;
  #line 9234 
  pci_clear_master(pdev);
  #line 9235 
  pci_release_regions(pdev);
  #line 9236 
  err_disable_device: 
                      #line 9236 
  ;
  #line 9237 
  pci_disable_device(pdev);
  #line 9239 
  return ret;
}

#line 9242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_pci_uninit(struct hclge_dev *hdev)
{
  #line 9244 
  struct pci_dev *pdev = hdev->pdev;
  #line 9246 
  pcim_iounmap(pdev,hdev->hw.io_base);
  #line 9247 
  pci_free_irq_vectors(pdev);
  #line 9248 
  pci_clear_master(pdev);
  #line 9249 
  pci_release_mem_regions(pdev);
  #line 9250 
  pci_disable_device(pdev);
  #line 9251 
  return;
}

#line 9253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_state_init(struct hclge_dev *hdev)
{
  #line 9255 
  cif_set_bit_0(6L,& hdev->state);
  #line 9256 
  cif_set_bit_0(1L,& hdev->state);
  #line 9257 
  cif_clear_bit_0(8L,& hdev->state);
  #line 9258 
  cif_clear_bit_0(9L,& hdev->state);
  #line 9259 
  cif_clear_bit_0(10L,& hdev->state);
  #line 9260 
  cif_clear_bit_0(11L,& hdev->state);
  #line 9261 
  return;
}

#line 9263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_state_uninit(struct hclge_dev *hdev)
{
  #line 9265 
  cif_set_bit_0(1L,& hdev->state);
  #line 9266 
  cif_set_bit_0(3L,& hdev->state);
  #line 9268 
  if (hdev->reset_timer.function != (void (*)(struct timer_list *))0) 
    #line 9269 
    cif_del_timer_sync(& hdev->reset_timer);
  #line 9270 
  if (hdev->service_task.work.func != (void (*)(struct work_struct *))0) 
    #line 9271 
    cancel_delayed_work_sync(& hdev->service_task);
  #line 9272 
  if (hdev->rst_service_task.func != (void (*)(struct work_struct *))0) 
    #line 9273 
    cancel_work_sync(& hdev->rst_service_task);
  #line 9274 
  if (hdev->mbx_service_task.func != (void (*)(struct work_struct *))0) 
    #line 9275 
    cancel_work_sync(& hdev->mbx_service_task);
  #line 9276 
  return;
}

#line 9278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_flr_prepare(struct hnae3_ae_dev *ae_dev)
{
  #line 9282 
  struct hclge_dev *hdev = (struct hclge_dev *)ae_dev->priv;
  #line 9283 
  int cnt = 0;
  #line 9285 
  cif_clear_bit_0(0L,& hdev->flr_state);
  #line 9286 
  cif_clear_bit_0(1L,& hdev->flr_state);
  #line 9287 
  cif_set_bit_0(4L,& hdev->default_reset_request);
  #line 9288 
  hclge_reset_event(hdev->pdev,(struct hnae3_handle *)0);
  #line 9290 
  while (1) {
    #line 9290 
    if (test_bit(0L,& hdev->flr_state)) 
                                        #line 9290 
                                        break;
    else {
      #line 9290 
      int tmp_0;
      #line 9290 
      tmp_0 = cnt;
      #line 9290 
      cnt ++;
      #line 9290 
      ;
      #line 9290 
      if (! (tmp_0 <= 49)) 
                           #line 9290 
                           break;
    }
    #line 9292 
    msleep(100U);
  }
  #line 9294 
  if (! test_bit(0L,& hdev->flr_state)) 
                                        #line 9295 
                                        _dev_err(& (hdev->pdev)->dev,(char *)"flr wait down timeout: %d\n",cnt);
  #line 9296 
  return;
}

#line 9299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_flr_done(struct hnae3_ae_dev *ae_dev)
{
  #line 9301 
  struct hclge_dev *hdev = (struct hclge_dev *)ae_dev->priv;
  #line 9303 
  cif_set_bit_0(1L,& hdev->flr_state);
  #line 9304 
  return;
}

#line 9306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_clear_resetting_state(struct hclge_dev *hdev)
{
  #line 9308 
  u16 i;
  #line 9310 
  i = (unsigned short)0U;
  #line 9310 
  while ((int)hdev->num_alloc_vport > (int)i) {
    {
      #line 9312 
      int ret;
      #line 9311 
      struct hclge_vport *vport = hdev->vport + (unsigned long)i;
      #line 9315 
      ret = hclge_set_vf_rst(hdev,(int)vport->vport_id,(_Bool)0);
      #line 9316 
      if (ret != 0) 
                    #line 9317 
                    _dev_warn(& (hdev->pdev)->dev,(char *)"clear vf(%u) rst failed %d!\n",(int)vport->vport_id,ret);
    }
    #line 9310 
    i = (u16)((int)i + 1);
  }
  #line 9319 
  return;
}

#line 9323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_init_ae_dev(struct hnae3_ae_dev *ae_dev)
{
  #line 9326 
  struct hclge_dev *hdev;
  #line 9327 
  int ret;
  #line 9325 
  struct pci_dev *pdev = ae_dev->pdev;
  #line 9329 
  hdev = (struct hclge_dev *)cif_devm_kzalloc(& pdev->dev,135496UL,3264U);
  #line 9330 
  if (hdev == (struct hclge_dev *)0) {
    #line 9331 
    ret = -12;
    #line 9332 
    goto out;
  }
  #line 9335 
  hdev->pdev = pdev;
  #line 9336 
  hdev->ae_dev = ae_dev;
  #line 9337 
  hdev->reset_type = HNAE3_NONE_RESET;
  #line 9338 
  hdev->reset_level = HNAE3_FUNC_RESET;
  #line 9339 
  ae_dev->priv = (void *)hdev;
  #line 9342 
  hdev->mps = 1526U;
  {
    #line 9344 
    struct lock_class_key __key;
    #line 9344 
    __mutex_init(& hdev->vport_lock,(char *)"&hdev->vport_lock",& __key);
  }
  {
    #line 9345 
    struct lock_class_key __key_0;
    #line 9345 
    __mutex_init(& hdev->vport_cfg_mutex,(char *)"&hdev->vport_cfg_mutex",& __key_0);
  }
  #line 9346 
  spinlock_check(& hdev->fd_rule_lock);
  {
    #line 9346 
    struct lock_class_key __key_1;
    #line 9346 
    __raw_spin_lock_init(& hdev->fd_rule_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&hdev->fd_rule_lock)->rlock",& __key_1);
  }
  #line 9348 
  ret = hclge_pci_init(hdev);
  #line 9349 
  if (ret != 0) {
    #line 9350 
    _dev_err(& pdev->dev,(char *)"PCI init failed\n");
    #line 9351 
    goto out;
  }
  #line 9355 
  ret = hclge_cmd_queue_init(hdev);
  #line 9356 
  if (ret != 0) {
    #line 9357 
    _dev_err(& pdev->dev,(char *)"Cmd queue init failed, ret = %d.\n",ret);
    #line 9358 
    goto err_pci_uninit;
  }
  #line 9362 
  ret = hclge_cmd_init(hdev);
  #line 9363 
  if (ret != 0) 
                #line 9364 
                goto err_cmd_uninit;
  #line 9366 
  ret = hclge_get_cap(hdev);
  #line 9367 
  if (ret != 0) {
    #line 9368 
    _dev_err(& pdev->dev,(char *)"get hw capability error, ret = %d.\n",ret);
    #line 9370 
    goto err_cmd_uninit;
  }
  #line 9373 
  ret = hclge_configure(hdev);
  #line 9374 
  if (ret != 0) {
    #line 9375 
    _dev_err(& pdev->dev,(char *)"Configure dev error, ret = %d.\n",ret);
    #line 9376 
    goto err_cmd_uninit;
  }
  #line 9379 
  ret = hclge_init_msi(hdev);
  #line 9380 
  if (ret != 0) {
    #line 9381 
    _dev_err(& pdev->dev,(char *)"Init MSI/MSI-X error, ret = %d.\n",ret);
    #line 9382 
    goto err_cmd_uninit;
  }
  #line 9385 
  ret = hclge_misc_irq_init(hdev);
  #line 9386 
  if (ret != 0) {
    #line 9387 
    _dev_err(& pdev->dev,(char *)"Misc IRQ(vector0) init error, ret = %d.\n",ret);
    #line 9390 
    goto err_msi_uninit;
  }
  #line 9393 
  ret = hclge_alloc_tqps(hdev);
  #line 9394 
  if (ret != 0) {
    #line 9395 
    _dev_err(& pdev->dev,(char *)"Allocate TQPs error, ret = %d.\n",ret);
    #line 9396 
    goto err_msi_irq_uninit;
  }
  #line 9399 
  ret = hclge_alloc_vport(hdev);
  #line 9400 
  if (ret != 0) {
    #line 9401 
    _dev_err(& pdev->dev,(char *)"Allocate vport error, ret = %d.\n",ret);
    #line 9402 
    goto err_msi_irq_uninit;
  }
  #line 9405 
  ret = hclge_map_tqp(hdev);
  #line 9406 
  if (ret != 0) {
    #line 9407 
    _dev_err(& pdev->dev,(char *)"Map tqp error, ret = %d.\n",ret);
    #line 9408 
    goto err_msi_irq_uninit;
  }
  #line 9411 
  if ((unsigned int)hdev->hw.mac.media_type == 2U) {
    #line 9412 
    ret = hclge_mac_mdio_config(hdev);
    #line 9413 
    if (ret != 0) {
      #line 9414 
      _dev_err(& (hdev->pdev)->dev,(char *)"mdio config fail ret=%d\n",ret);
      #line 9416 
      goto err_msi_irq_uninit;
    }
  }
  #line 9420 
  ret = hclge_init_umv_space(hdev);
  #line 9421 
  if (ret != 0) {
    #line 9422 
    _dev_err(& pdev->dev,(char *)"umv space init error, ret=%d.\n",ret);
    #line 9423 
    goto err_mdiobus_unreg;
  }
  #line 9426 
  ret = hclge_mac_init(hdev);
  #line 9427 
  if (ret != 0) {
    #line 9428 
    _dev_err(& pdev->dev,(char *)"Mac init error, ret = %d\n",ret);
    #line 9429 
    goto err_mdiobus_unreg;
  }
  #line 9432 
  ret = hclge_config_tso(hdev,256U,9668U);
  #line 9433 
  if (ret != 0) {
    #line 9434 
    _dev_err(& pdev->dev,(char *)"Enable tso fail, ret =%d\n",ret);
    #line 9435 
    goto err_mdiobus_unreg;
  }
  #line 9438 
  ret = hclge_config_gro(hdev,(_Bool)1);
  #line 9439 
  if (ret != 0) 
                #line 9440 
                goto err_mdiobus_unreg;
  #line 9442 
  ret = hclge_init_vlan_config(hdev);
  #line 9443 
  if (ret != 0) {
    #line 9444 
    _dev_err(& pdev->dev,(char *)"VLAN init fail, ret =%d\n",ret);
    #line 9445 
    goto err_mdiobus_unreg;
  }
  #line 9448 
  ret = hclge_tm_schd_init(hdev);
  #line 9449 
  if (ret != 0) {
    #line 9450 
    _dev_err(& pdev->dev,(char *)"tm schd init fail, ret =%d\n",ret);
    #line 9451 
    goto err_mdiobus_unreg;
  }
  #line 9454 
  hclge_rss_init_cfg(hdev);
  #line 9455 
  ret = hclge_rss_init_hw(hdev);
  #line 9456 
  if (ret != 0) {
    #line 9457 
    _dev_err(& pdev->dev,(char *)"Rss init fail, ret =%d\n",ret);
    #line 9458 
    goto err_mdiobus_unreg;
  }
  #line 9461 
  ret = init_mgr_tbl(hdev);
  #line 9462 
  if (ret != 0) {
    #line 9463 
    _dev_err(& pdev->dev,(char *)"manager table init fail, ret =%d\n",ret);
    #line 9464 
    goto err_mdiobus_unreg;
  }
  #line 9467 
  ret = hclge_init_fd_config(hdev);
  #line 9468 
  if (ret != 0) {
    #line 9469 
    _dev_err(& pdev->dev,(char *)"fd table init fail, ret=%d\n",ret);
    #line 9471 
    goto err_mdiobus_unreg;
  }
  {
    #line 831  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
    struct __anonstruct___tmp_3642 *__tmp = (struct __anonstruct___tmp_3642 *)(& hdev->mac_tnl_log);
    #line 9474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
    struct __kfifo *__kfifo = & __tmp->__anonCompField___anonstruct___tmp_3642_175.kfifo;
    #line 9474 
    __kfifo->in = 0U;
    #line 9474 
    __kfifo->out = 0U;
    #line 9474 
    __kfifo->mask = 7U;
    #line 9474 
    __kfifo->esize = 16U;
    #line 9474 
    __kfifo->data = (void *)(& __tmp->buf);
  }
  #line 9476 
  hclge_dcb_ops_set(hdev);
  {
    #line 9478 
    struct lock_class_key __key_2;
    #line 9478 
    init_timer_key(& hdev->reset_timer,& hclge_reset_timer,0U,(char *)"(&hdev->reset_timer)",& __key_2);
  }
  {
    #line 9479 
    struct lock_class_key __key_3;
    #line 9479 
    __init_work(& hdev->service_task.work,0);
    #line 9479 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 9479 
    hdev->service_task.work.data = __constr_expr_34;
    #line 9479 
    lockdep_init_map(& hdev->service_task.work.lockdep_map,(char *)"(work_completion)",& __key_3,0);
    #line 9479 
    INIT_LIST_HEAD(& hdev->service_task.work.entry);
    #line 9479 
    hdev->service_task.work.func = & hclge_service_task;
  }
  {
    #line 9479 
    struct lock_class_key __key_4;
    #line 9479 
    init_timer_key(& hdev->service_task.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&hdev->service_task)->timer",& __key_4);
  }
  {
    #line 9480 
    struct lock_class_key __key_5;
    #line 9480 
    __init_work(& hdev->rst_service_task,0);
    #line 9480 
    atomic_long_t __constr_expr_35 = {.counter = 137438953408LL};
    #line 9480 
    hdev->rst_service_task.data = __constr_expr_35;
    #line 9480 
    lockdep_init_map(& hdev->rst_service_task.lockdep_map,(char *)"(work_completion)",& __key_5,0);
    #line 9480 
    INIT_LIST_HEAD(& hdev->rst_service_task.entry);
    #line 9480 
    hdev->rst_service_task.func = & hclge_reset_service_task;
  }
  {
    #line 9481 
    struct lock_class_key __key_6;
    #line 9481 
    __init_work(& hdev->mbx_service_task,0);
    #line 9481 
    atomic_long_t __constr_expr_36 = {.counter = 137438953408LL};
    #line 9481 
    hdev->mbx_service_task.data = __constr_expr_36;
    #line 9481 
    lockdep_init_map(& hdev->mbx_service_task.lockdep_map,(char *)"(work_completion)",& __key_6,0);
    #line 9481 
    INIT_LIST_HEAD(& hdev->mbx_service_task.entry);
    #line 9481 
    hdev->mbx_service_task.func = & hclge_mailbox_service_task;
  }
  #line 9486 
  hclge_misc_affinity_setup(hdev);
  #line 9488 
  hclge_clear_all_event_cause(hdev);
  #line 9489 
  hclge_clear_resetting_state(hdev);
  #line 9492 
  hclge_handle_all_hns_hw_errors(ae_dev);
  #line 9497 
  if (ae_dev->hw_err_reset_req != 0UL) {
    #line 9498 
    enum hnae3_reset_type reset_level;
    #line 9500 
    reset_level = hclge_get_reset_level(ae_dev,& ae_dev->hw_err_reset_req);
    #line 9502 
    hclge_set_def_reset_request(ae_dev,reset_level);
    #line 9503 
    cif_mod_timer(& hdev->reset_timer,jiffies + 2500UL);
  }
  #line 9507 
  hclge_enable_vector(& hdev->misc_vector,(_Bool)1);
  #line 9509 
  hclge_state_init(hdev);
  #line 9510 
  hdev->last_reset_time = jiffies;
  #line 9512 
  _dev_info(& (hdev->pdev)->dev,(char *)"%s driver initialization finished.\n",(char *)"hclge");
  #line 9515 
  return 0;
  #line 9517 
  err_mdiobus_unreg: 
                     #line 9517 
  ;
  #line 9518 
  if (hdev->hw.mac.phydev != (struct phy_device *)0) 
                                                     #line 9519 
                                                     mdiobus_unregister(hdev->hw.mac.mdio_bus);
  #line 9520 
  err_msi_irq_uninit: 
                      #line 9520 
  ;
  #line 9521 
  hclge_misc_irq_uninit(hdev);
  #line 9522 
  err_msi_uninit: 
                  #line 9522 
  ;
  #line 9523 
  pci_free_irq_vectors(pdev);
  #line 9524 
  err_cmd_uninit: 
                  #line 9524 
  ;
  #line 9525 
  hclge_cmd_uninit(hdev);
  #line 9526 
  err_pci_uninit: 
                  #line 9526 
  ;
  #line 9527 
  pcim_iounmap(pdev,hdev->hw.io_base);
  #line 9528 
  pci_clear_master(pdev);
  #line 9529 
  pci_release_regions(pdev);
  #line 9530 
  pci_disable_device(pdev);
  #line 9531 
  out: 
       #line 9531 
  ;
  #line 9532 
  return ret;
}

#line 9535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_stats_clear(struct hclge_dev *hdev)
{
  #line 9537 
  memset((void *)(& hdev->hw_stats),0,696UL);
  #line 9538 
  return;
}

#line 9540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_mac_spoofchk(struct hclge_dev *hdev, int vf, bool enable)
{
  #line 9542 
  return hclge_config_switch_param(hdev,vf,(unsigned char)((int)enable),
                                (unsigned char)254);
}

#line 9546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_vlan_spoofchk(struct hclge_dev *hdev, int vf, bool enable)
{
  #line 9548 
  return hclge_set_vlan_filter_ctrl(hdev,(unsigned char)0,(unsigned char)1,
                                 (_Bool)((bool)((int)enable) != 0),
                                 (unsigned char)((int)((unsigned char)vf)));
}

#line 9553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_vf_spoofchk_hw(struct hclge_dev *hdev, int vf, bool enable)
{
  #line 9555 
  int ret;
  #line 9557 
  ret = hclge_set_mac_spoofchk(hdev,vf,(_Bool)((bool)((int)enable) != 0));
  #line 9558 
  if (ret != 0) {
    #line 9559 
    char *tmp;
    #line 9559 
    ;
    #line 9559 
    if ((int)enable != 0) 
                          #line 9559 
                          tmp = (char *)"on"; else 
                                                   #line 9559 
                                                   tmp = (char *)"off";
    #line 9559 
    ;
    #line 9559 
    ;
    #line 9559 
    _dev_err(& (hdev->pdev)->dev,(char *)"Set vf %d mac spoof check %s failed, ret=%d\n",vf,tmp,ret);
    #line 9562 
    return ret;
  }
  #line 9565 
  ret = hclge_set_vlan_spoofchk(hdev,vf,(_Bool)((bool)((int)enable) != 0));
  #line 9566 
  if (ret != 0) {
    #line 9567 
    char *tmp_0;
    #line 9567 
    ;
    #line 9567 
    if ((int)enable != 0) 
                          #line 9567 
                          tmp_0 = (char *)"on"; else 
                                                     #line 9567 
                                                     tmp_0 = (char *)"off";
    #line 9567 
    ;
    #line 9567 
    ;
    #line 9567 
    _dev_err(& (hdev->pdev)->dev,(char *)"Set vf %d vlan spoof check %s failed, ret=%d\n",vf,tmp_0,ret);
  }
  #line 9571 
  return ret;
}

#line 9574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_vf_spoofchk(struct hnae3_handle *handle, int vf, bool enable)
{
  #line 9580 
  int ret;
  #line 9577 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 9578 
  struct hclge_dev *hdev = vport->back;
  #line 9579 
  u32 new_spoofchk = (unsigned int)((int)enable != 0);
  #line 9582 
  if ((unsigned int)(hdev->pdev)->revision == 32U) 
                                                   #line 9583 
                                                   return -95;
  #line 9585 
  vport = hclge_get_vf_vport(hdev,vf);
  #line 9586 
  if (vport == (struct hclge_vport *)0) 
                                        #line 9587 
                                        return -22;
  #line 9589 
  if (vport->vf_info.spoofchk == new_spoofchk) 
                                               #line 9590 
                                               return 0;
  #line 9592 
  if ((int)enable != 0) {
    #line 9592 
    if ((int)test_bit((long)vport->vport_id,
                 (unsigned long *)(& hdev->vf_vlan_full)) != 0) 
      #line 9593 
      _dev_warn(& (hdev->pdev)->dev,(char *)"vf %d vlan table is full, enable spoof check may cause its packet send fail\n",vf); else 
                                                                    #line 9592 
                                                                    goto _LAND;
  }
  else {
    #line 9592 
    _LAND: 
           #line 9596 
    ;
    #line 9596 
    if ((int)enable != 0) {
      #line 9596 
      if ((int)hclge_is_umv_space_full(vport) != 0) 
                                                    #line 9597 
                                                    _dev_warn(& (hdev->pdev)->dev,(char *)"vf %d mac table is full, enable spoof check may cause its packet send fail\n",vf);
    }
  }
  #line 9601 
  ret = hclge_set_vf_spoofchk_hw(hdev,(int)vport->vport_id,(_Bool)((bool)((int)enable) != 0));
  #line 9602 
  if (ret != 0) 
                #line 9603 
                return ret;
  #line 9605 
  vport->vf_info.spoofchk = new_spoofchk;
  #line 9606 
  return 0;
}

#line 9609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_reset_vport_spoofchk(struct hclge_dev *hdev)
{
  #line 9612 
  int ret;
  #line 9613 
  int i;
  #line 9611 
  struct hclge_vport *vport = hdev->vport;
  #line 9615 
  if ((unsigned int)(hdev->pdev)->revision == 32U) 
                                                   #line 9616 
                                                   return 0;
  #line 9619 
  i = 0;
  #line 9619 
  while ((int)hdev->num_alloc_vport > i) {
    #line 9620 
    ret = hclge_set_vf_spoofchk_hw(hdev,(int)vport->vport_id,(_Bool)(vport->vf_info.spoofchk != 0U));
    #line 9622 
    if (ret != 0) 
                  #line 9623 
                  return ret;
    #line 9625 
    vport ++;
    #line 9619 
    i ++;
  }
  #line 9628 
  return 0;
}

#line 9631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_vf_trust(struct hnae3_handle *handle, int vf, bool enable)
{
  #line 9636 
  bool en_bc_pmc;
  #line 9637 
  int ret;
  #line 9633 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 9634 
  struct hclge_dev *hdev = vport->back;
  #line 9635 
  u32 new_trusted = (unsigned int)((int)enable != 0);
  #line 9639 
  vport = hclge_get_vf_vport(hdev,vf);
  #line 9640 
  if (vport == (struct hclge_vport *)0) 
                                        #line 9641 
                                        return -22;
  #line 9643 
  if (vport->vf_info.trusted == new_trusted) 
                                             #line 9644 
                                             return 0;
  #line 9647 
  if (! enable && (unsigned int)vport->vf_info.promisc_enable != 0U) {
    #line 9648 
    en_bc_pmc = (_Bool)((unsigned int)(hdev->pdev)->revision != 32U);
    #line 9649 
    ret = hclge_set_vport_promisc_mode(vport,(_Bool)0,(_Bool)0,(_Bool)((bool)((int)en_bc_pmc) != 0));
    #line 9651 
    if (ret != 0) 
                  #line 9652 
                  return ret;
    #line 9653 
    vport->vf_info.promisc_enable = (unsigned short)0U;
    #line 9654 
    hclge_inform_vf_promisc_info(vport);
  }
  #line 9657 
  vport->vf_info.trusted = new_trusted;
  #line 9659 
  return 0;
}

#line 9662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_reset_vf_rate(struct hclge_dev *hdev)
{
  #line 9664 
  int ret;
  #line 9665 
  int vf;
  #line 9668 
  vf = 1;
  #line 9668 
  while ((int)hdev->num_alloc_vport > vf) {
    {
      #line 9669 
      struct hclge_vport *vport = hdev->vport + (unsigned long)vf;
      #line 9671 
      vport->vf_info.max_tx_rate = 0U;
      #line 9672 
      ret = hclge_tm_qs_shaper_cfg(vport,(int)vport->vf_info.max_tx_rate);
      #line 9673 
      if (ret != 0) 
                    #line 9674 
                    _dev_err(& (hdev->pdev)->dev,(char *)"vf%d failed to reset to default, ret=%d\n",vf + -1,ret);
    }
    #line 9668 
    vf ++;
  }
  #line 9676 
  return;
}

#line 9680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_vf_rate_param_check(struct hclge_dev *hdev, int vf, int min_tx_rate, int max_tx_rate)
{
  #line 9683 
  if ((min_tx_rate != 0 || max_tx_rate < 0) || hdev->hw.mac.max_speed < (unsigned int)max_tx_rate) {
    #line 9685 
    _dev_err(& (hdev->pdev)->dev,(char *)"min_tx_rate:%d [0], max_tx_rate:%d [0, %u]\n",min_tx_rate,max_tx_rate,hdev->hw.mac.max_speed);
    #line 9688 
    return -22;
  }
  #line 9691 
  return 0;
}

#line 9694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_vf_rate(struct hnae3_handle *handle, int vf, int min_tx_rate, int max_tx_rate, bool force)
{
  #line 9699 
  int ret;
  #line 9697 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 9698 
  struct hclge_dev *hdev = vport->back;
  #line 9701 
  ret = hclge_vf_rate_param_check(hdev,vf,min_tx_rate,max_tx_rate);
  #line 9702 
  if (ret != 0) 
                #line 9703 
                return ret;
  #line 9705 
  vport = hclge_get_vf_vport(hdev,vf);
  #line 9706 
  if (vport == (struct hclge_vport *)0) 
                                        #line 9707 
                                        return -22;
  #line 9709 
  if (! force && vport->vf_info.max_tx_rate == (unsigned int)max_tx_rate) 
    #line 9710 
    return 0;
  #line 9712 
  ret = hclge_tm_qs_shaper_cfg(vport,max_tx_rate);
  #line 9713 
  if (ret != 0) 
                #line 9714 
                return ret;
  #line 9716 
  vport->vf_info.max_tx_rate = (unsigned int)max_tx_rate;
  #line 9718 
  return 0;
}

#line 9721  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_resume_vf_rate(struct hclge_dev *hdev)
{
  #line 9724 
  struct hclge_vport *vport;
  #line 9725 
  int ret;
  #line 9726 
  int vf;
  #line 9723 
  struct hnae3_handle *handle = & (hdev->vport)->nic;
  #line 9729 
  vf = 0;
  #line 9729 
  while (1) {
    #line 9729 
    ;
    #line 9729 
    if (! (pci_num_vf(hdev->pdev) > vf)) 
                                         #line 9729 
                                         break;
    #line 9730 
    vport = hclge_get_vf_vport(hdev,vf);
    #line 9731 
    if (vport == (struct hclge_vport *)0) 
                                          #line 9732 
                                          return -22;
    #line 9737 
    if (vport->vf_info.max_tx_rate == 0U) 
                                          #line 9738 
                                          goto __Cont;
    #line 9740 
    ret = hclge_set_vf_rate(handle,vf,0,(int)vport->vf_info.max_tx_rate,(_Bool)1);
    #line 9742 
    if (ret != 0) {
      #line 9743 
      _dev_err(& (hdev->pdev)->dev,(char *)"vf%d failed to resume tx_rate:%u, ret=%d\n",vf,vport->vf_info.max_tx_rate,ret);
      #line 9746 
      return ret;
    }
    #line 9729 
    __Cont: 
            #line 9729 
    vf ++;
  }
  #line 9750 
  return 0;
}

#line 9753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_reset_vport_state(struct hclge_dev *hdev)
{
  #line 9756 
  int i;
  #line 9755 
  struct hclge_vport *vport = hdev->vport;
  #line 9758 
  i = 0;
  #line 9758 
  while ((int)hdev->num_alloc_vport > i) {
    #line 9759 
    hclge_vport_stop(vport);
    #line 9760 
    vport ++;
    #line 9758 
    i ++;
  }
  #line 9762 
  return;
}

#line 9764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_reset_ae_dev(struct hnae3_ae_dev *ae_dev)
{
  #line 9768 
  int ret;
  #line 9766 
  struct hclge_dev *hdev = (struct hclge_dev *)ae_dev->priv;
  #line 9767 
  struct pci_dev *pdev = ae_dev->pdev;
  #line 9770 
  cif_set_bit_0(1L,& hdev->state);
  #line 9772 
  hclge_stats_clear(hdev);
  #line 9773 
  memset((void *)(& hdev->vlan_table),0,131072UL);
  #line 9774 
  memset((void *)(& hdev->vf_vlan_full),0,32UL);
  #line 9776 
  ret = hclge_cmd_init(hdev);
  #line 9777 
  if (ret != 0) {
    #line 9778 
    _dev_err(& pdev->dev,(char *)"Cmd queue init failed\n");
    #line 9779 
    return ret;
  }
  #line 9782 
  ret = hclge_map_tqp(hdev);
  #line 9783 
  if (ret != 0) {
    #line 9784 
    _dev_err(& pdev->dev,(char *)"Map tqp error, ret = %d.\n",ret);
    #line 9785 
    return ret;
  }
  #line 9788 
  hclge_reset_umv_space(hdev);
  #line 9790 
  ret = hclge_mac_init(hdev);
  #line 9791 
  if (ret != 0) {
    #line 9792 
    _dev_err(& pdev->dev,(char *)"Mac init error, ret = %d\n",ret);
    #line 9793 
    return ret;
  }
  #line 9796 
  ret = hclge_config_tso(hdev,256U,9668U);
  #line 9797 
  if (ret != 0) {
    #line 9798 
    _dev_err(& pdev->dev,(char *)"Enable tso fail, ret =%d\n",ret);
    #line 9799 
    return ret;
  }
  #line 9802 
  ret = hclge_config_gro(hdev,(_Bool)1);
  #line 9803 
  if (ret != 0) 
                #line 9804 
                return ret;
  #line 9806 
  ret = hclge_init_vlan_config(hdev);
  #line 9807 
  if (ret != 0) {
    #line 9808 
    _dev_err(& pdev->dev,(char *)"VLAN init fail, ret =%d\n",ret);
    #line 9809 
    return ret;
  }
  #line 9812 
  ret = hclge_tm_init_hw(hdev,(_Bool)1);
  #line 9813 
  if (ret != 0) {
    #line 9814 
    _dev_err(& pdev->dev,(char *)"tm init hw fail, ret =%d\n",ret);
    #line 9815 
    return ret;
  }
  #line 9818 
  ret = hclge_rss_init_hw(hdev);
  #line 9819 
  if (ret != 0) {
    #line 9820 
    _dev_err(& pdev->dev,(char *)"Rss init fail, ret =%d\n",ret);
    #line 9821 
    return ret;
  }
  #line 9824 
  ret = hclge_init_fd_config(hdev);
  #line 9825 
  if (ret != 0) {
    #line 9826 
    _dev_err(& pdev->dev,(char *)"fd table init fail, ret=%d\n",ret);
    #line 9827 
    return ret;
  }
  #line 9831 
  hclge_handle_all_hns_hw_errors(ae_dev);
  #line 9836 
  ret = hclge_config_nic_hw_error(hdev,(_Bool)1);
  #line 9837 
  if (ret != 0) {
    #line 9838 
    _dev_err(& pdev->dev,(char *)"fail(%d) to re-enable NIC hw error interrupts\n",ret);
    #line 9841 
    return ret;
  }
  #line 9844 
  if (hdev->roce_client != (struct hnae3_client *)0) {
    #line 9845 
    ret = hclge_config_rocee_ras_interrupt(hdev,(_Bool)1);
    #line 9846 
    if (ret != 0) {
      #line 9847 
      _dev_err(& pdev->dev,(char *)"fail(%d) to re-enable roce ras interrupts\n",ret);
      #line 9850 
      return ret;
    }
  }
  #line 9854 
  hclge_reset_vport_state(hdev);
  #line 9855 
  ret = hclge_reset_vport_spoofchk(hdev);
  #line 9856 
  if (ret != 0) 
                #line 9857 
                return ret;
  #line 9859 
  ret = hclge_resume_vf_rate(hdev);
  #line 9860 
  if (ret != 0) 
                #line 9861 
                return ret;
  #line 9863 
  _dev_info(& pdev->dev,(char *)"Reset done, %s driver initialization finished.\n",(char *)"hclge");
  #line 9866 
  return 0;
}

#line 9869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_uninit_ae_dev(struct hnae3_ae_dev *ae_dev)
{
  #line 9871 
  struct hclge_dev *hdev = (struct hclge_dev *)ae_dev->priv;
  #line 9872 
  struct hclge_mac *mac = & hdev->hw.mac;
  #line 9874 
  hclge_reset_vf_rate(hdev);
  #line 9875 
  hclge_misc_affinity_teardown(hdev);
  #line 9876 
  hclge_state_uninit(hdev);
  #line 9878 
  if (mac->phydev != (struct phy_device *)0) 
                                             #line 9879 
                                             mdiobus_unregister(mac->mdio_bus);
  #line 9881 
  hclge_uninit_umv_space(hdev);
  #line 9884 
  hclge_enable_vector(& hdev->misc_vector,(_Bool)0);
  #line 9885 
  synchronize_irq((unsigned int)hdev->misc_vector.vector_irq);
  #line 9888 
  hclge_config_mac_tnl_int(hdev,(_Bool)0);
  #line 9889 
  hclge_config_nic_hw_error(hdev,(_Bool)0);
  #line 9890 
  hclge_config_rocee_ras_interrupt(hdev,(_Bool)0);
  #line 9892 
  hclge_cmd_uninit(hdev);
  #line 9893 
  hclge_misc_irq_uninit(hdev);
  #line 9894 
  hclge_pci_uninit(hdev);
  #line 9895 
  mutex_destroy(& hdev->vport_lock);
  #line 9896 
  hclge_uninit_vport_mac_table(hdev);
  #line 9897 
  hclge_uninit_vport_vlan_table(hdev);
  #line 9898 
  mutex_destroy(& hdev->vport_cfg_mutex);
  #line 9899 
  ae_dev->priv = (void *)0;
  #line 9900 
  return;
}

#line 9902  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static u32 hclge_get_max_channels(struct hnae3_handle *handle)
{
  #line 9908 
  unsigned int __UNIQUE_ID___x466;
  #line 9908 
  unsigned int tmp_0;
  #line 9904 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_167.kinfo;
  #line 9905 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 9906 
  struct hclge_dev *hdev = vport->back;
  {
    #line 9908 
    __UNIQUE_ID___x466 = (unsigned int)hdev->rss_size_max;
    #line 9908 
    unsigned int __UNIQUE_ID___y467 = (unsigned int)((int)vport->alloc_tqps / (int)kinfo->num_tc);
    #line 9908 
    if (__UNIQUE_ID___x466 < __UNIQUE_ID___y467) 
                                                 #line 9908 
                                                 tmp_0 = __UNIQUE_ID___x466; else 
                                                                    #line 9908 
                                                                    tmp_0 = __UNIQUE_ID___y467;
    }
  #line 9908 
  return tmp_0;
}

#line 9912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_get_channels(struct hnae3_handle *handle, struct ethtool_channels *ch)
{
  #line 9915 
  ch->max_combined = hclge_get_max_channels(handle);
  #line 9916 
  ch->other_count = 1U;
  #line 9917 
  ch->max_other = 1U;
  #line 9918 
  ch->combined_count = (unsigned int)handle->__anonCompField_hnae3_handle_167.kinfo.rss_size;
  #line 9919 
  return;
}

#line 9921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_get_tqps_and_rss_info(struct hnae3_handle *handle, u16 *alloc_tqps, u16 *max_rss_size)
{
  #line 9924 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 9925 
  struct hclge_dev *hdev = vport->back;
  #line 9927 
  *alloc_tqps = vport->alloc_tqps;
  #line 9928 
  *max_rss_size = hdev->rss_size_max;
  #line 9929 
  return;
}

#line 9931  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_channels(struct hnae3_handle *handle, u32 new_tqps_num, bool rxfh_configured)
{
  #line 9941 
  u16 tc_valid[8U];
  #line 9942 
  u16 roundup_size;
  #line 9943 
  u32 *rss_indir;
  #line 9944 
  unsigned int i;
  #line 9945 
  int ret;
  #line 9934 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 9935 
  struct hnae3_knic_private_info *kinfo = & vport->nic.__anonCompField_hnae3_handle_167.kinfo;
  #line 9936 
  u16 tc_offset[8U] = {(unsigned short)0U};
  #line 9937 
  struct hclge_dev *hdev = vport->back;
  #line 9938 
  u16 tc_size[8U] = {(unsigned short)0U};
  #line 9939 
  u16 cur_rss_size = kinfo->rss_size;
  #line 9940 
  u16 cur_tqps = kinfo->num_tqps;
  #line 9947 
  kinfo->req_rss_size = (unsigned short)new_tqps_num;
  #line 9949 
  ret = hclge_tm_vport_map_update(hdev);
  #line 9950 
  if (ret != 0) {
    #line 9951 
    _dev_err(& (hdev->pdev)->dev,(char *)"tm vport map fail, ret =%d\n",ret);
    #line 9952 
    return ret;
  }
  #line 9955 
  if (0 != 0) {
    #line 9955 
    unsigned int tmp_8;
    #line 9955 
    unsigned int tmp_40;
    #line 9955 
    unsigned int tmp_41;
    #line 9955 
    unsigned int tmp_9;
    #line 9955 
    unsigned int tmp_10;
    #line 9955 
    unsigned int tmp_42;
    #line 9955 
    unsigned int tmp_43;
    #line 9955 
    unsigned int tmp_11;
    #line 9955 
    unsigned int tmp_12;
    #line 9955 
    unsigned int tmp_44;
    #line 9955 
    unsigned int tmp_45;
    #line 9955 
    unsigned int tmp_13;
    #line 9955 
    unsigned int tmp_14;
    #line 9955 
    unsigned int tmp_46;
    #line 9955 
    unsigned int tmp_47;
    #line 9955 
    unsigned int tmp_15;
    #line 9955 
    unsigned int tmp_16;
    #line 9955 
    unsigned int tmp_48;
    #line 9955 
    unsigned int tmp_49;
    #line 9955 
    unsigned int tmp_17;
    #line 9955 
    unsigned int tmp_18;
    #line 9955 
    unsigned int tmp_50;
    #line 9955 
    unsigned int tmp_51;
    #line 9955 
    unsigned int tmp_19;
    #line 9955 
    unsigned int tmp_20;
    #line 9955 
    unsigned int tmp_52;
    #line 9955 
    unsigned int tmp_53;
    #line 9955 
    unsigned int tmp_21;
    #line 9955 
    unsigned int tmp_22;
    #line 9955 
    unsigned int tmp_54;
    #line 9955 
    unsigned int tmp_55;
    #line 9955 
    unsigned int tmp_23;
    #line 9955 
    unsigned int tmp_24;
    #line 9955 
    unsigned int tmp_56;
    #line 9955 
    unsigned int tmp_57;
    #line 9955 
    unsigned int tmp_25;
    #line 9955 
    unsigned int tmp_26;
    #line 9955 
    unsigned int tmp_58;
    #line 9955 
    unsigned int tmp_59;
    #line 9955 
    unsigned int tmp_27;
    #line 9955 
    unsigned int tmp_28;
    #line 9955 
    unsigned int tmp_60;
    #line 9955 
    unsigned int tmp_61;
    #line 9955 
    unsigned int tmp_29;
    #line 9955 
    unsigned int tmp_30;
    #line 9955 
    unsigned int tmp_62;
    #line 9955 
    unsigned int tmp_31;
    #line 9955 
    unsigned int tmp_64;
    #line 9955 
    unsigned int tmp_0;
    #line 9955 
    unsigned int tmp_32;
    #line 9955 
    unsigned int tmp_33;
    #line 9955 
    unsigned int tmp_1;
    #line 9955 
    unsigned int tmp_2;
    #line 9955 
    unsigned int tmp_34;
    #line 9955 
    unsigned int tmp_35;
    #line 9955 
    unsigned int tmp_3;
    #line 9955 
    unsigned int tmp_4;
    #line 9955 
    unsigned int tmp_36;
    #line 9955 
    unsigned int tmp_37;
    #line 9955 
    unsigned int tmp_5;
    #line 9955 
    unsigned int tmp_6;
    #line 9955 
    unsigned int tmp_38;
    #line 9955 
    unsigned int tmp_39;
    #line 9955 
    unsigned int tmp_7;
    #line 9955 
    unsigned int tmp_65;
    #line 9955 
    if ((unsigned int)kinfo->rss_size != 1U) {
      #line 9955 
      if (0 != 0) {
        #line 9955 
        if ((unsigned int)kinfo->rss_size > 2U) {
          #line 9955 
          if (((unsigned long long)((int)kinfo->rss_size + -1) & 9223372036854775808ULL) == 0ULL) {
            #line 9955 
            if (((unsigned long long)((int)kinfo->rss_size + -1) & 4611686018427387904ULL) == 0ULL) {
              #line 9955 
              if (((unsigned long long)((int)kinfo->rss_size + -1) & 2305843009213693952ULL) == 0ULL) {
                #line 9955 
                if (((unsigned long long)((int)kinfo->rss_size + -1) & 1152921504606846976ULL) == 0ULL) {
                  #line 9955 
                  if (((unsigned long long)((int)kinfo->rss_size + -1) & 576460752303423488ULL) == 0ULL) {
                    #line 9955 
                    if (((unsigned long long)((int)kinfo->rss_size + -1) & 288230376151711744ULL) == 0ULL) {
                      #line 9955 
                      if (((unsigned long long)((int)kinfo->rss_size + -1) & 144115188075855872ULL) == 0ULL) {
                        #line 9955 
                        if (((unsigned long long)((int)kinfo->rss_size + -1) & 72057594037927936ULL) == 0ULL) {
                          #line 9955 
                          if (((unsigned long long)((int)kinfo->rss_size + -1) & 36028797018963968ULL) == 0ULL) {
                            #line 9955 
                            if (((unsigned long long)((int)kinfo->rss_size + -1) & 18014398509481984ULL) == 0ULL) {
                              #line 9955 
                              if (((unsigned long long)((int)kinfo->rss_size + -1) & 9007199254740992ULL) == 0ULL) {
                                #line 9955 
                                if (((unsigned long long)((int)kinfo->rss_size + -1) & 4503599627370496ULL) == 0ULL) {
                                  #line 9955 
                                  if (((unsigned long long)((int)kinfo->rss_size + -1) & 2251799813685248ULL) == 0ULL) {
                                    #line 9955 
                                    if (((unsigned long long)((int)kinfo->rss_size + -1) & 1125899906842624ULL) == 0ULL) {
                                      #line 9955 
                                      if (((unsigned long long)((int)kinfo->rss_size + -1) & 562949953421312ULL) == 0ULL) {
                                        #line 9955 
                                        if (((unsigned long long)((int)kinfo->rss_size + -1) & 281474976710656ULL) == 0ULL) {
                                          #line 9955 
                                          if (((unsigned long long)((int)kinfo->rss_size + -1) & 140737488355328ULL) == 0ULL) {
                                            #line 9955 
                                            if (((unsigned long long)((int)kinfo->rss_size + -1) & 70368744177664ULL) == 0ULL) {
                                              #line 9955 
                                              if (((unsigned long long)((int)kinfo->rss_size + -1) & 35184372088832ULL) == 0ULL) {
                                                #line 9955 
                                                if (((unsigned long long)((int)kinfo->rss_size + -1) & 17592186044416ULL) == 0ULL) {
                                                  #line 9955 
                                                  if (((unsigned long long)((int)kinfo->rss_size + -1) & 8796093022208ULL) == 0ULL) {
                                                    #line 9955 
                                                    if (((unsigned long long)((int)kinfo->rss_size + -1) & 4398046511104ULL) == 0ULL) {
                                                      #line 9955 
                                                      if (((unsigned long long)((int)kinfo->rss_size + -1) & 2199023255552ULL) == 0ULL) {
                                                        #line 9955 
                                                        if (((unsigned long long)((int)kinfo->rss_size + -1) & 1099511627776ULL) == 0ULL) {
                                                          #line 9955 
                                                          if (((unsigned long long)((int)kinfo->rss_size + -1) & 549755813888ULL) == 0ULL) {
                                                            #line 9955 
                                                            if (((unsigned long long)((int)kinfo->rss_size + -1) & 274877906944ULL) == 0ULL) {
                                                              #line 9955 
                                                              if (((unsigned long long)((int)kinfo->rss_size + -1) & 137438953472ULL) == 0ULL) {
                                                                #line 9955 
                                                                if (((unsigned long long)((int)kinfo->rss_size + -1) & 68719476736ULL) == 0ULL) {
                                                                  #line 9955 
                                                                  if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 34359738368ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 17179869184ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 8589934592ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 4294967296ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 2147483648ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 1073741824ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 536870912ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 268435456ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 134217728ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 67108864ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 33554432ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 16777216ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 8388608ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 4194304ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 2097152ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 1048576ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 524288ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 262144ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 131072ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 65536ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 32768ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 16384ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 8192ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 4096ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 2048ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 1024ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 512ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 256ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 128ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 64ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 32ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 16ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 8ULL) == 0ULL) {
                                                                    #line 9955 
                                                                    if (
                                                                    ((unsigned long long)((int)kinfo->rss_size + -1) & 4ULL) != 0ULL) 
                                                                    #line 9955 
                                                                    tmp_0 = 8U; else 
                                                                    #line 9955 
                                                                    tmp_0 = 4U;
                                                                    #line 9955 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_1 = 16U;
                                                                    #line 9955 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_2 = 32U;
                                                                    #line 9955 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_3 = 64U;
                                                                    #line 9955 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_4 = 128U;
                                                                    #line 9955 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_5 = 256U;
                                                                    #line 9955 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_6 = 512U;
                                                                    #line 9955 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_7 = 1024U;
                                                                    #line 9955 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_8 = 2048U;
                                                                    #line 9955 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_9 = 4096U;
                                                                    #line 9955 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_10 = 8192U;
                                                                    #line 9955 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_11 = 16384U;
                                                                    #line 9955 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_12 = 32768U;
                                                                    #line 9955 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_13 = 0U;
                                                                    #line 9955 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_14 = 0U;
                                                                    #line 9955 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_15 = 0U;
                                                                    #line 9955 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_16 = 0U;
                                                                    #line 9955 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_17 = 0U;
                                                                    #line 9955 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_18 = 0U;
                                                                    #line 9955 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_19 = 0U;
                                                                    #line 9955 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_20 = 0U;
                                                                    #line 9955 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_21 = 0U;
                                                                    #line 9955 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_22 = 0U;
                                                                    #line 9955 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_23 = 0U;
                                                                    #line 9955 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_24 = 0U;
                                                                    #line 9955 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_25 = 0U;
                                                                    #line 9955 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_26 = 0U;
                                                                    #line 9955 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_27 = 0U;
                                                                    #line 9955 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_28 = 0U;
                                                                    #line 9955 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_29 = 0U;
                                                                    #line 9955 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_30 = 0U;
                                                                    #line 9955 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_31 = 0U;
                                                                    #line 9955 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    #line 9955 
                                                                    tmp_32 = 0U;
                                                                    #line 9955 
                                                                    tmp_33 = tmp_32;
                                                                  }
                                                                  else 
                                                                    #line 9955 
                                                                    tmp_33 = 0U;
                                                                  #line 9955 
                                                                  tmp_34 = tmp_33;
                                                                }
                                                                else 
                                                                  #line 9955 
                                                                  tmp_34 = 0U;
                                                                #line 9955 
                                                                tmp_35 = tmp_34;
                                                              }
                                                              else 
                                                                   #line 9955 
                                                                   tmp_35 = 0U;
                                                              #line 9955 
                                                              tmp_36 = tmp_35;
                                                            }
                                                            else 
                                                                 #line 9955 
                                                                 tmp_36 = 0U;
                                                            #line 9955 
                                                            tmp_37 = tmp_36;
                                                          }
                                                          else 
                                                               #line 9955 
                                                               tmp_37 = 0U;
                                                          #line 9955 
                                                          tmp_38 = tmp_37;
                                                        }
                                                        else 
                                                             #line 9955 
                                                             tmp_38 = 0U;
                                                        #line 9955 
                                                        tmp_39 = tmp_38;
                                                      }
                                                      else 
                                                           #line 9955 
                                                           tmp_39 = 0U;
                                                      #line 9955 
                                                      tmp_40 = tmp_39;
                                                    }
                                                    else 
                                                         #line 9955 
                                                         tmp_40 = 0U;
                                                    #line 9955 
                                                    tmp_41 = tmp_40;
                                                  }
                                                  else 
                                                       #line 9955 
                                                       tmp_41 = 0U;
                                                  #line 9955 
                                                  tmp_42 = tmp_41;
                                                }
                                                else 
                                                     #line 9955 
                                                     tmp_42 = 0U;
                                                #line 9955 
                                                tmp_43 = tmp_42;
                                              }
                                              else 
                                                   #line 9955 
                                                   tmp_43 = 0U;
                                              #line 9955 
                                              tmp_44 = tmp_43;
                                            }
                                            else 
                                                 #line 9955 
                                                 tmp_44 = 0U;
                                            #line 9955 
                                            tmp_45 = tmp_44;
                                          }
                                          else 
                                               #line 9955 
                                               tmp_45 = 0U;
                                          #line 9955 
                                          tmp_46 = tmp_45;
                                        }
                                        else 
                                             #line 9955 
                                             tmp_46 = 0U;
                                        #line 9955 
                                        tmp_47 = tmp_46;
                                      }
                                      else 
                                           #line 9955 
                                           tmp_47 = 0U;
                                      #line 9955 
                                      tmp_48 = tmp_47;
                                    }
                                    else 
                                         #line 9955 
                                         tmp_48 = 0U;
                                    #line 9955 
                                    tmp_49 = tmp_48;
                                  }
                                  else 
                                       #line 9955 
                                       tmp_49 = 0U;
                                  #line 9955 
                                  tmp_50 = tmp_49;
                                }
                                else 
                                     #line 9955 
                                     tmp_50 = 0U;
                                #line 9955 
                                tmp_51 = tmp_50;
                              }
                              else 
                                   #line 9955 
                                   tmp_51 = 0U;
                              #line 9955 
                              tmp_52 = tmp_51;
                            }
                            else 
                                 #line 9955 
                                 tmp_52 = 0U;
                            #line 9955 
                            tmp_53 = tmp_52;
                          }
                          else 
                               #line 9955 
                               tmp_53 = 0U;
                          #line 9955 
                          tmp_54 = tmp_53;
                        }
                        else 
                             #line 9955 
                             tmp_54 = 0U;
                        #line 9955 
                        tmp_55 = tmp_54;
                      }
                      else 
                           #line 9955 
                           tmp_55 = 0U;
                      #line 9955 
                      tmp_56 = tmp_55;
                    }
                    else 
                         #line 9955 
                         tmp_56 = 0U;
                    #line 9955 
                    tmp_57 = tmp_56;
                  }
                  else 
                       #line 9955 
                       tmp_57 = 0U;
                  #line 9955 
                  tmp_58 = tmp_57;
                }
                else 
                     #line 9955 
                     tmp_58 = 0U;
                #line 9955 
                tmp_59 = tmp_58;
              }
              else 
                   #line 9955 
                   tmp_59 = 0U;
              #line 9955 
              tmp_60 = tmp_59;
            }
            else 
                 #line 9955 
                 tmp_60 = 0U;
            #line 9955 
            tmp_61 = tmp_60;
          }
          else 
               #line 9955 
               tmp_61 = 0U;
          #line 9955 
          tmp_62 = tmp_61;
        }
        else 
             #line 9955 
             tmp_62 = 2U;
        #line 9955 
        tmp_64 = tmp_62;
      }
      else {
        #line 9955 
        tmp_64 = (unsigned int)((unsigned short)(1UL << (__ilog2_u32((unsigned int)((int)kinfo->rss_size + -1)) + 1)));
      }
      #line 9955 
      tmp_65 = tmp_64;
    }
    else 
         #line 9955 
         tmp_65 = 1U;
    #line 9955 
    roundup_size = (unsigned short)tmp_65;
  }
  else {
    #line 9955 
    roundup_size = (unsigned short)__roundup_pow_of_two((unsigned long)kinfo->rss_size);
  }
  #line 9956 
  if (0 != 0) {
    #line 9956 
    unsigned int tmp_104;
    #line 9956 
    unsigned int tmp_72;
    #line 9956 
    unsigned int tmp_73;
    #line 9956 
    unsigned int tmp_105;
    #line 9956 
    unsigned int tmp_106;
    #line 9956 
    unsigned int tmp_74;
    #line 9956 
    unsigned int tmp_75;
    #line 9956 
    unsigned int tmp_107;
    #line 9956 
    unsigned int tmp_108;
    #line 9956 
    unsigned int tmp_76;
    #line 9956 
    unsigned int tmp_77;
    #line 9956 
    unsigned int tmp_109;
    #line 9956 
    unsigned int tmp_110;
    #line 9956 
    unsigned int tmp_78;
    #line 9956 
    unsigned int tmp_79;
    #line 9956 
    unsigned int tmp_111;
    #line 9956 
    unsigned int tmp_112;
    #line 9956 
    unsigned int tmp_80;
    #line 9956 
    unsigned int tmp_81;
    #line 9956 
    unsigned int tmp_113;
    #line 9956 
    unsigned int tmp_114;
    #line 9956 
    unsigned int tmp_82;
    #line 9956 
    unsigned int tmp_83;
    #line 9956 
    unsigned int tmp_115;
    #line 9956 
    unsigned int tmp_116;
    #line 9956 
    unsigned int tmp_84;
    #line 9956 
    unsigned int tmp_85;
    #line 9956 
    unsigned int tmp_117;
    #line 9956 
    unsigned int tmp_118;
    #line 9956 
    unsigned int tmp_86;
    #line 9956 
    unsigned int tmp_87;
    #line 9956 
    unsigned int tmp_119;
    #line 9956 
    unsigned int tmp_120;
    #line 9956 
    unsigned int tmp_88;
    #line 9956 
    unsigned int tmp_89;
    #line 9956 
    unsigned int tmp_121;
    #line 9956 
    unsigned int tmp_122;
    #line 9956 
    unsigned int tmp_90;
    #line 9956 
    unsigned int tmp_91;
    #line 9956 
    unsigned int tmp_123;
    #line 9956 
    unsigned int tmp_124;
    #line 9956 
    unsigned int tmp_92;
    #line 9956 
    unsigned int tmp_93;
    #line 9956 
    unsigned int tmp_125;
    #line 9956 
    unsigned int tmp_126;
    #line 9956 
    unsigned int tmp_94;
    #line 9956 
    unsigned int tmp_95;
    #line 9956 
    unsigned int tmp_127;
    #line 9956 
    unsigned int tmp_128;
    #line 9956 
    unsigned int tmp_96;
    #line 9956 
    unsigned int tmp_97;
    #line 9956 
    unsigned int tmp_98;
    #line 9956 
    unsigned int tmp_67;
    #line 9956 
    unsigned int tmp_99;
    #line 9956 
    unsigned int tmp_100;
    #line 9956 
    unsigned int tmp_68;
    #line 9956 
    unsigned int tmp_69;
    #line 9956 
    unsigned int tmp_101;
    #line 9956 
    unsigned int tmp_102;
    #line 9956 
    unsigned int tmp_70;
    #line 9956 
    unsigned int tmp_71;
    #line 9956 
    unsigned int tmp_103;
    #line 9956 
    unsigned int tmp_129;
    #line 9956 
    if ((unsigned int)roundup_size > 1U) {
      #line 9956 
      if (((unsigned long long)roundup_size & 9223372036854775808ULL) == 0ULL) {
        #line 9956 
        if (((unsigned long long)roundup_size & 4611686018427387904ULL) == 0ULL) {
          #line 9956 
          if (((unsigned long long)roundup_size & 2305843009213693952ULL) == 0ULL) {
            #line 9956 
            if (((unsigned long long)roundup_size & 1152921504606846976ULL) == 0ULL) {
              #line 9956 
              if (((unsigned long long)roundup_size & 576460752303423488ULL) == 0ULL) {
                #line 9956 
                if (((unsigned long long)roundup_size & 288230376151711744ULL) == 0ULL) {
                  #line 9956 
                  if (((unsigned long long)roundup_size & 144115188075855872ULL) == 0ULL) {
                    #line 9956 
                    if (((unsigned long long)roundup_size & 72057594037927936ULL) == 0ULL) {
                      #line 9956 
                      if (((unsigned long long)roundup_size & 36028797018963968ULL) == 0ULL) {
                        #line 9956 
                        if (((unsigned long long)roundup_size & 18014398509481984ULL) == 0ULL) {
                          #line 9956 
                          if (((unsigned long long)roundup_size & 9007199254740992ULL) == 0ULL) {
                            #line 9956 
                            if (((unsigned long long)roundup_size & 4503599627370496ULL) == 0ULL) {
                              #line 9956 
                              if (((unsigned long long)roundup_size & 2251799813685248ULL) == 0ULL) {
                                #line 9956 
                                if (((unsigned long long)roundup_size & 1125899906842624ULL) == 0ULL) {
                                  #line 9956 
                                  if (((unsigned long long)roundup_size & 562949953421312ULL) == 0ULL) {
                                    #line 9956 
                                    if (((unsigned long long)roundup_size & 281474976710656ULL) == 0ULL) {
                                      #line 9956 
                                      if (((unsigned long long)roundup_size & 140737488355328ULL) == 0ULL) {
                                        #line 9956 
                                        if (((unsigned long long)roundup_size & 70368744177664ULL) == 0ULL) {
                                          #line 9956 
                                          if (((unsigned long long)roundup_size & 35184372088832ULL) == 0ULL) {
                                            #line 9956 
                                            if (((unsigned long long)roundup_size & 17592186044416ULL) == 0ULL) {
                                              #line 9956 
                                              if (((unsigned long long)roundup_size & 8796093022208ULL) == 0ULL) {
                                                #line 9956 
                                                if (((unsigned long long)roundup_size & 4398046511104ULL) == 0ULL) {
                                                  #line 9956 
                                                  if (((unsigned long long)roundup_size & 2199023255552ULL) == 0ULL) {
                                                    #line 9956 
                                                    if (((unsigned long long)roundup_size & 1099511627776ULL) == 0ULL) {
                                                      #line 9956 
                                                      if (((unsigned long long)roundup_size & 549755813888ULL) == 0ULL) {
                                                        #line 9956 
                                                        if (((unsigned long long)roundup_size & 274877906944ULL) == 0ULL) {
                                                          #line 9956 
                                                          if (((unsigned long long)roundup_size & 137438953472ULL) == 0ULL) {
                                                            #line 9956 
                                                            if (((unsigned long long)roundup_size & 68719476736ULL) == 0ULL) {
                                                              #line 9956 
                                                              if (((unsigned long long)roundup_size & 34359738368ULL) == 0ULL) {
                                                                #line 9956 
                                                                if (((unsigned long long)roundup_size & 17179869184ULL) == 0ULL) {
                                                                  #line 9956 
                                                                  if (
                                                                    ((unsigned long long)roundup_size & 8589934592ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 4294967296ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 2147483648ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 1073741824ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 536870912ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 268435456ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 134217728ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 67108864ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 33554432ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 16777216ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 8388608ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 4194304ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 2097152ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 1048576ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 524288ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 262144ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 131072ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 65536ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 32768ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 16384ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 8192ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 4096ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 2048ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 1024ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 512ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 256ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 128ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 64ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 32ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 16ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 8ULL) == 0ULL) {
                                                                    #line 9956 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 4ULL) != 0ULL) 
                                                                    #line 9956 
                                                                    tmp_67 = 2U; else 
                                                                    #line 9956 
                                                                    tmp_67 = 1U;
                                                                    #line 9956 
                                                                    tmp_68 = tmp_67;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_68 = 3U;
                                                                    #line 9956 
                                                                    tmp_69 = tmp_68;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_69 = 4U;
                                                                    #line 9956 
                                                                    tmp_70 = tmp_69;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_70 = 5U;
                                                                    #line 9956 
                                                                    tmp_71 = tmp_70;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_71 = 6U;
                                                                    #line 9956 
                                                                    tmp_72 = tmp_71;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_72 = 7U;
                                                                    #line 9956 
                                                                    tmp_73 = tmp_72;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_73 = 8U;
                                                                    #line 9956 
                                                                    tmp_74 = tmp_73;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_74 = 9U;
                                                                    #line 9956 
                                                                    tmp_75 = tmp_74;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_75 = 10U;
                                                                    #line 9956 
                                                                    tmp_76 = tmp_75;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_76 = 11U;
                                                                    #line 9956 
                                                                    tmp_77 = tmp_76;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_77 = 12U;
                                                                    #line 9956 
                                                                    tmp_78 = tmp_77;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_78 = 13U;
                                                                    #line 9956 
                                                                    tmp_79 = tmp_78;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_79 = 14U;
                                                                    #line 9956 
                                                                    tmp_80 = tmp_79;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_80 = 15U;
                                                                    #line 9956 
                                                                    tmp_81 = tmp_80;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_81 = 16U;
                                                                    #line 9956 
                                                                    tmp_82 = tmp_81;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_82 = 17U;
                                                                    #line 9956 
                                                                    tmp_83 = tmp_82;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_83 = 18U;
                                                                    #line 9956 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_84 = 19U;
                                                                    #line 9956 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_85 = 20U;
                                                                    #line 9956 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_86 = 21U;
                                                                    #line 9956 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_87 = 22U;
                                                                    #line 9956 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_88 = 23U;
                                                                    #line 9956 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_89 = 24U;
                                                                    #line 9956 
                                                                    tmp_90 = tmp_89;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_90 = 25U;
                                                                    #line 9956 
                                                                    tmp_91 = tmp_90;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_91 = 26U;
                                                                    #line 9956 
                                                                    tmp_92 = tmp_91;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_92 = 27U;
                                                                    #line 9956 
                                                                    tmp_93 = tmp_92;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_93 = 28U;
                                                                    #line 9956 
                                                                    tmp_94 = tmp_93;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_94 = 29U;
                                                                    #line 9956 
                                                                    tmp_95 = tmp_94;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_95 = 30U;
                                                                    #line 9956 
                                                                    tmp_96 = tmp_95;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_96 = 31U;
                                                                    #line 9956 
                                                                    tmp_97 = tmp_96;
                                                                    }
                                                                    else 
                                                                    #line 9956 
                                                                    tmp_97 = 32U;
                                                                    #line 9956 
                                                                    tmp_98 = tmp_97;
                                                                  }
                                                                  else 
                                                                    #line 9956 
                                                                    tmp_98 = 33U;
                                                                  #line 9956 
                                                                  tmp_99 = tmp_98;
                                                                }
                                                                else 
                                                                  #line 9956 
                                                                  tmp_99 = 34U;
                                                                #line 9956 
                                                                tmp_100 = tmp_99;
                                                              }
                                                              else 
                                                                   #line 9956 
                                                                   tmp_100 = 35U;
                                                              #line 9956 
                                                              tmp_101 = tmp_100;
                                                            }
                                                            else 
                                                                 #line 9956 
                                                                 tmp_101 = 36U;
                                                            #line 9956 
                                                            tmp_102 = tmp_101;
                                                          }
                                                          else 
                                                               #line 9956 
                                                               tmp_102 = 37U;
                                                          #line 9956 
                                                          tmp_103 = tmp_102;
                                                        }
                                                        else 
                                                             #line 9956 
                                                             tmp_103 = 38U;
                                                        #line 9956 
                                                        tmp_104 = tmp_103;
                                                      }
                                                      else 
                                                           #line 9956 
                                                           tmp_104 = 39U;
                                                      #line 9956 
                                                      tmp_105 = tmp_104;
                                                    }
                                                    else 
                                                         #line 9956 
                                                         tmp_105 = 40U;
                                                    #line 9956 
                                                    tmp_106 = tmp_105;
                                                  }
                                                  else 
                                                       #line 9956 
                                                       tmp_106 = 41U;
                                                  #line 9956 
                                                  tmp_107 = tmp_106;
                                                }
                                                else 
                                                     #line 9956 
                                                     tmp_107 = 42U;
                                                #line 9956 
                                                tmp_108 = tmp_107;
                                              }
                                              else 
                                                   #line 9956 
                                                   tmp_108 = 43U;
                                              #line 9956 
                                              tmp_109 = tmp_108;
                                            }
                                            else 
                                                 #line 9956 
                                                 tmp_109 = 44U;
                                            #line 9956 
                                            tmp_110 = tmp_109;
                                          }
                                          else 
                                               #line 9956 
                                               tmp_110 = 45U;
                                          #line 9956 
                                          tmp_111 = tmp_110;
                                        }
                                        else 
                                             #line 9956 
                                             tmp_111 = 46U;
                                        #line 9956 
                                        tmp_112 = tmp_111;
                                      }
                                      else 
                                           #line 9956 
                                           tmp_112 = 47U;
                                      #line 9956 
                                      tmp_113 = tmp_112;
                                    }
                                    else 
                                         #line 9956 
                                         tmp_113 = 48U;
                                    #line 9956 
                                    tmp_114 = tmp_113;
                                  }
                                  else 
                                       #line 9956 
                                       tmp_114 = 49U;
                                  #line 9956 
                                  tmp_115 = tmp_114;
                                }
                                else 
                                     #line 9956 
                                     tmp_115 = 50U;
                                #line 9956 
                                tmp_116 = tmp_115;
                              }
                              else 
                                   #line 9956 
                                   tmp_116 = 51U;
                              #line 9956 
                              tmp_117 = tmp_116;
                            }
                            else 
                                 #line 9956 
                                 tmp_117 = 52U;
                            #line 9956 
                            tmp_118 = tmp_117;
                          }
                          else 
                               #line 9956 
                               tmp_118 = 53U;
                          #line 9956 
                          tmp_119 = tmp_118;
                        }
                        else 
                             #line 9956 
                             tmp_119 = 54U;
                        #line 9956 
                        tmp_120 = tmp_119;
                      }
                      else 
                           #line 9956 
                           tmp_120 = 55U;
                      #line 9956 
                      tmp_121 = tmp_120;
                    }
                    else 
                         #line 9956 
                         tmp_121 = 56U;
                    #line 9956 
                    tmp_122 = tmp_121;
                  }
                  else 
                       #line 9956 
                       tmp_122 = 57U;
                  #line 9956 
                  tmp_123 = tmp_122;
                }
                else 
                     #line 9956 
                     tmp_123 = 58U;
                #line 9956 
                tmp_124 = tmp_123;
              }
              else 
                   #line 9956 
                   tmp_124 = 59U;
              #line 9956 
              tmp_125 = tmp_124;
            }
            else 
                 #line 9956 
                 tmp_125 = 60U;
            #line 9956 
            tmp_126 = tmp_125;
          }
          else 
               #line 9956 
               tmp_126 = 61U;
          #line 9956 
          tmp_127 = tmp_126;
        }
        else 
             #line 9956 
             tmp_127 = 62U;
        #line 9956 
        tmp_128 = tmp_127;
      }
      else 
           #line 9956 
           tmp_128 = 63U;
      #line 9956 
      tmp_129 = tmp_128;
    }
    else 
         #line 9956 
         tmp_129 = 0U;
    #line 9956 
    roundup_size = (unsigned short)tmp_129;
  }
  else {
    #line 9956 
    roundup_size = (unsigned short)__ilog2_u32((unsigned int)roundup_size);
  }
  #line 9958 
  i = 0U;
  #line 9958 
  while (i <= 7U) {
    #line 9959 
    tc_valid[i] = (unsigned short)0U;
    #line 9961 
    if ((((unsigned long)hdev->hw_tc_map >> i) & 1UL) == 0UL) 
                                                              #line 9962 
                                                              goto __Cont;
    #line 9964 
    tc_valid[i] = (unsigned short)1U;
    #line 9965 
    tc_size[i] = roundup_size;
    #line 9966 
    tc_offset[i] = (unsigned short)((int)kinfo->rss_size * (int)((unsigned short)i));
    #line 9958 
    __Cont: 
            #line 9958 
    i ++;
  }
  #line 9968 
  ret = hclge_set_rss_tc_mode(hdev,(u16 *)(& tc_valid),(u16 *)(& tc_size),(u16 *)(& tc_offset));
  #line 9969 
  if (ret != 0) 
                #line 9970 
                return ret;
  #line 9973 
  if ((int)rxfh_configured != 0) 
                                 #line 9974 
                                 goto out;
  #line 9977 
  rss_indir = (u32 *)kcalloc_0(512UL,4UL,3264U);
  #line 9978 
  if (rss_indir == (u32 *)0U) 
                              #line 9979 
                              return -12;
  #line 9981 
  i = 0U;
  #line 9981 
  while (i <= 511U) {
    #line 9982 
    *(rss_indir + (unsigned long)i) = i % (unsigned int)kinfo->rss_size;
    #line 9981 
    i ++;
  }
  #line 9984 
  ret = hclge_set_rss(handle,rss_indir,(u8 *)0U,(unsigned char)0);
  #line 9985 
  if (ret != 0) 
                #line 9986 
                _dev_err(& (hdev->pdev)->dev,(char *)"set rss indir table fail, ret=%d\n",ret);
  #line 9989 
  kfree((void *)rss_indir);
  #line 9991 
  out: 
       #line 9991 
  ;
  #line 9992 
  if (ret == 0) 
                #line 9993 
                _dev_info(& (hdev->pdev)->dev,(char *)"Channels changed, rss_size from %u to %u, tqps from %u to %u",(int)cur_rss_size,(int)kinfo->rss_size,(int)cur_tqps,(int)kinfo->rss_size * (int)kinfo->num_tc);
  #line 9998 
  return ret;
}

#line 10001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_regs_num(struct hclge_dev *hdev, u32 *regs_num_32_bit, u32 *regs_num_64_bit)
{
  #line 10004 
  struct hclge_desc desc;
  #line 10005 
  u32 total_num;
  #line 10006 
  int ret;
  #line 10008 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_QUERY_REG_NUM,(_Bool)1);
  #line 10009 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 10010 
  if (ret != 0) {
    #line 10011 
    _dev_err(& (hdev->pdev)->dev,(char *)"Query register number cmd failed, ret = %d.\n",ret);
    #line 10013 
    return ret;
  }
  #line 10016 
  *regs_num_32_bit = desc.data[0];
  #line 10017 
  *regs_num_64_bit = desc.data[1];
  #line 10019 
  total_num = *regs_num_32_bit + *regs_num_64_bit;
  #line 10020 
  if (total_num == 0U) 
                       #line 10021 
                       return -22;
  #line 10023 
  return 0;
}

#line 10026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_32_bit_regs(struct hclge_dev *hdev, u32 regs_num, void *data)
{
  #line 10032 
  struct hclge_desc *desc;
  #line 10034 
  __le32 *desc_data;
  #line 10035 
  int nodata_num;
  #line 10036 
  int cmd_num;
  #line 10037 
  int i;
  #line 10037 
  int k;
  #line 10037 
  int n;
  #line 10038 
  int ret;
  #line 10033 
  u32 *reg_val = (u32 *)data;
  #line 10040 
  if (regs_num == 0U) 
                      #line 10041 
                      return 0;
  #line 10043 
  nodata_num = 2;
  #line 10044 
  cmd_num = (int)(((regs_num + (unsigned int)nodata_num) + 7U) / 8U);
  #line 10046 
  desc = (struct hclge_desc *)kcalloc_0((unsigned long)cmd_num,32UL,3264U);
  #line 10047 
  if (desc == (struct hclge_desc *)0) 
                                      #line 10048 
                                      return -12;
  #line 10050 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_OPC_QUERY_32_BIT_REG,(_Bool)1);
  #line 10051 
  ret = hclge_cmd_send(& hdev->hw,desc,cmd_num);
  #line 10052 
  if (ret != 0) {
    #line 10053 
    _dev_err(& (hdev->pdev)->dev,(char *)"Query 32 bit register cmd failed, ret = %d.\n",ret);
    #line 10055 
    kfree((void *)desc);
    #line 10056 
    return ret;
  }
  #line 10059 
  i = 0;
  #line 10059 
  while (i < cmd_num) {
    #line 10060 
    if (i == 0) {
      #line 10061 
      desc_data = & (desc + (unsigned long)i)->data[0];
      #line 10062 
      n = 8 - nodata_num;
    }
    else {
      #line 10064 
      desc_data = (__le32 *)(desc + (unsigned long)i);
      #line 10065 
      n = 8;
    }
    #line 10067 
    k = 0;
    #line 10067 
    while (k < n) {
      {
        #line 10068 
        u32 *tmp_0;
        #line 10068 
        __le32 *tmp_1;
        #line 10068 
        tmp_0 = reg_val;
        #line 10068 
        reg_val ++;
        #line 10068 
        tmp_1 = desc_data;
        #line 10068 
        desc_data ++;
        #line 10068 
        *tmp_0 = *tmp_1;
        #line 10070 
        regs_num --;
        #line 10071 
        if (regs_num == 0U) 
                            #line 10072 
                            break;
      }
      #line 10067 
      k ++;
    }
    #line 10059 
    i ++;
  }
  #line 10076 
  kfree((void *)desc);
  #line 10077 
  return 0;
}

#line 10080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_64_bit_regs(struct hclge_dev *hdev, u32 regs_num, void *data)
{
  #line 10086 
  struct hclge_desc *desc;
  #line 10088 
  __le64 *desc_data;
  #line 10089 
  int nodata_len;
  #line 10090 
  int cmd_num;
  #line 10091 
  int i;
  #line 10091 
  int k;
  #line 10091 
  int n;
  #line 10092 
  int ret;
  #line 10087 
  u64 *reg_val = (u64 *)data;
  #line 10094 
  if (regs_num == 0U) 
                      #line 10095 
                      return 0;
  #line 10097 
  nodata_len = 1;
  #line 10098 
  cmd_num = (int)(((regs_num + (unsigned int)nodata_len) + 3U) / 4U);
  #line 10100 
  desc = (struct hclge_desc *)kcalloc_0((unsigned long)cmd_num,32UL,3264U);
  #line 10101 
  if (desc == (struct hclge_desc *)0) 
                                      #line 10102 
                                      return -12;
  #line 10104 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_OPC_QUERY_64_BIT_REG,(_Bool)1);
  #line 10105 
  ret = hclge_cmd_send(& hdev->hw,desc,cmd_num);
  #line 10106 
  if (ret != 0) {
    #line 10107 
    _dev_err(& (hdev->pdev)->dev,(char *)"Query 64 bit register cmd failed, ret = %d.\n",ret);
    #line 10109 
    kfree((void *)desc);
    #line 10110 
    return ret;
  }
  #line 10113 
  i = 0;
  #line 10113 
  while (i < cmd_num) {
    #line 10114 
    if (i == 0) {
      #line 10115 
      desc_data = (__le64 *)(& (desc + (unsigned long)i)->data[0]);
      #line 10116 
      n = 4 - nodata_len;
    }
    else {
      #line 10118 
      desc_data = (__le64 *)(desc + (unsigned long)i);
      #line 10119 
      n = 4;
    }
    #line 10121 
    k = 0;
    #line 10121 
    while (k < n) {
      {
        #line 10122 
        u64 *tmp_0;
        #line 10122 
        __le64 *tmp_1;
        #line 10122 
        tmp_0 = reg_val;
        #line 10122 
        reg_val ++;
        #line 10122 
        tmp_1 = desc_data;
        #line 10122 
        desc_data ++;
        #line 10122 
        *tmp_0 = *tmp_1;
        #line 10124 
        regs_num --;
        #line 10125 
        if (regs_num == 0U) 
                            #line 10126 
                            break;
      }
      #line 10121 
      k ++;
    }
    #line 10113 
    i ++;
  }
  #line 10130 
  kfree((void *)desc);
  #line 10131 
  return 0;
}

#line 10142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
int hclge_query_bd_num_cmd_send(struct hclge_dev *hdev, struct hclge_desc *desc)
{
  #line 10145 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_OPC_DFX_BD_NUM,(_Bool)1);
  #line 10146 
  desc->flag = (unsigned short)((unsigned int)desc->flag | 4U);
  #line 10147 
  hclge_cmd_setup_basic_desc(desc + 1U,(enum hclge_opcode_type)HCLGE_OPC_DFX_BD_NUM,(_Bool)1);
  #line 10148 
  (desc + 1U)->flag = (unsigned short)((unsigned int)(desc + 1U)->flag | 4U);
  #line 10149 
  hclge_cmd_setup_basic_desc(desc + 2U,(enum hclge_opcode_type)HCLGE_OPC_DFX_BD_NUM,(_Bool)1);
  #line 10150 
  (desc + 2U)->flag = (unsigned short)((unsigned int)(desc + 2U)->flag | 4U);
  #line 10151 
  hclge_cmd_setup_basic_desc(desc + 3U,(enum hclge_opcode_type)HCLGE_OPC_DFX_BD_NUM,(_Bool)1);
  #line 10153 
  return hclge_cmd_send(& hdev->hw,desc,4);
}

#line 10156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_dfx_reg_bd_num(struct hclge_dev *hdev, int *bd_num_list, u32 type_num)
{
  #line 10162 
  u32 entries_per_desc;
  #line 10162 
  u32 desc_index;
  #line 10162 
  u32 index;
  #line 10162 
  u32 offset;
  #line 10162 
  u32 i;
  #line 10163 
  struct hclge_desc desc[4U];
  #line 10164 
  int ret;
  #line 10166 
  ret = hclge_query_bd_num_cmd_send(hdev,(struct hclge_desc *)(& desc));
  #line 10167 
  if (ret != 0) {
    #line 10168 
    _dev_err(& (hdev->pdev)->dev,(char *)"Get dfx bd num fail, status is %d.\n",ret);
    #line 10170 
    return ret;
  }
  #line 10173 
  entries_per_desc = 6U;
  #line 10174 
  i = 0U;
  #line 10174 
  while (i < type_num) {
    #line 10175 
    offset = hclge_dfx_bd_offset_list[i];
    #line 10176 
    index = offset % entries_per_desc;
    #line 10177 
    desc_index = offset / entries_per_desc;
    #line 10178 
    *(bd_num_list + (unsigned long)i) = (int)desc[desc_index].data[index];
    #line 10174 
    i ++;
  }
  #line 10181 
  return ret;
}

#line 10184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_dfx_reg_cmd_send(struct hclge_dev *hdev, struct hclge_desc *desc_src, int bd_num, enum hclge_opcode_type cmd)
{
  #line 10189 
  int i;
  #line 10189 
  int ret;
  #line 10188 
  struct hclge_desc *desc = desc_src;
  #line 10191 
  hclge_cmd_setup_basic_desc(desc,cmd,(_Bool)1);
  #line 10192 
  i = 0;
  #line 10192 
  while (bd_num + -1 > i) {
    #line 10193 
    desc->flag = (unsigned short)((unsigned int)desc->flag | 4U);
    #line 10194 
    desc ++;
    #line 10195 
    hclge_cmd_setup_basic_desc(desc,cmd,(_Bool)1);
    #line 10192 
    i ++;
  }
  #line 10198 
  desc = desc_src;
  #line 10199 
  ret = hclge_cmd_send(& hdev->hw,desc,bd_num);
  #line 10200 
  if (ret != 0) 
                #line 10201 
                _dev_err(& (hdev->pdev)->dev,(char *)"Query dfx reg cmd(0x%x) send fail, status is %d.\n",(unsigned int)cmd,ret);
  #line 10205 
  return ret;
}

#line 10208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_dfx_reg_fetch_data(struct hclge_desc *desc_src, int bd_num, void *data)
{
  #line 10211 
  int entries_per_desc;
  #line 10211 
  int reg_num;
  #line 10211 
  int separator_num;
  #line 10211 
  int desc_index;
  #line 10211 
  int index;
  #line 10211 
  int i;
  #line 10212 
  struct hclge_desc *desc = desc_src;
  #line 10213 
  u32 *reg = (u32 *)data;
  #line 10215 
  entries_per_desc = 6;
  #line 10216 
  reg_num = entries_per_desc * bd_num;
  #line 10217 
  separator_num = 4 - (reg_num & 3);
  #line 10218 
  i = 0;
  #line 10218 
  while (i < reg_num) {
    {
      #line 10221 
      u32 *tmp;
      #line 10219 
      index = i % entries_per_desc;
      #line 10220 
      desc_index = i / entries_per_desc;
      #line 10221 
      tmp = reg;
      #line 10221 
      reg ++;
      #line 10221 
      *tmp = (desc + (unsigned long)desc_index)->data[index];
    }
    #line 10218 
    i ++;
  }
  #line 10223 
  i = 0;
  #line 10223 
  while (i < separator_num) {
    #line 10224 
    u32 *tmp_0;
    #line 10224 
    tmp_0 = reg;
    #line 10224 
    reg ++;
    #line 10224 
    *tmp_0 = 4261215226U;
    #line 10223 
    i ++;
  }
  #line 10226 
  return reg_num + separator_num;
}

#line 10229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_dfx_reg_len(struct hclge_dev *hdev, int *len)
{
  #line 10232 
  int data_len_per_desc;
  #line 10232 
  int data_len;
  #line 10232 
  int bd_num;
  #line 10232 
  int i;
  #line 10233 
  int bd_num_list[30U];
  #line 10234 
  int ret;
  #line 10231 
  u32 dfx_reg_type_num = 12U;
  #line 10236 
  ret = hclge_get_dfx_reg_bd_num(hdev,(int *)(& bd_num_list),dfx_reg_type_num);
  #line 10237 
  if (ret != 0) {
    #line 10238 
    _dev_err(& (hdev->pdev)->dev,(char *)"Get dfx reg bd num fail, status is %d.\n",ret);
    #line 10240 
    return ret;
  }
  #line 10243 
  data_len_per_desc = 24;
  #line 10244 
  *len = 0;
  #line 10245 
  i = 0;
  #line 10245 
  while ((unsigned int)i < dfx_reg_type_num) {
    #line 10246 
    bd_num = bd_num_list[i];
    #line 10247 
    data_len = data_len_per_desc * bd_num;
    #line 10248 
    *len = (int)((unsigned long)*len + ((unsigned long)data_len / 16UL + 1UL) * (unsigned long)16U);
    #line 10245 
    i ++;
  }
  #line 10251 
  return ret;
}

#line 10254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_dfx_reg(struct hclge_dev *hdev, void *data)
{
  #line 10257 
  int bd_num;
  #line 10257 
  int bd_num_max;
  #line 10257 
  int buf_len;
  #line 10257 
  int i;
  #line 10258 
  int bd_num_list[30U];
  #line 10259 
  struct hclge_desc *desc_src;
  #line 10261 
  int ret;
  #line 10256 
  u32 dfx_reg_type_num = 12U;
  #line 10260 
  u32 *reg = (u32 *)data;
  #line 10263 
  ret = hclge_get_dfx_reg_bd_num(hdev,(int *)(& bd_num_list),dfx_reg_type_num);
  #line 10264 
  if (ret != 0) {
    #line 10265 
    _dev_err(& (hdev->pdev)->dev,(char *)"Get dfx reg bd num fail, status is %d.\n",ret);
    #line 10267 
    return ret;
  }
  #line 10270 
  bd_num_max = bd_num_list[0];
  #line 10271 
  i = 1;
  #line 10271 
  while ((unsigned int)i < dfx_reg_type_num) {
    #line 10272 
    int __UNIQUE_ID___x468;
    #line 10272 
    int tmp;
    {
      #line 10272 
      __UNIQUE_ID___x468 = bd_num_max;
      #line 10272 
      int __UNIQUE_ID___y469 = bd_num_list[i];
      #line 10272 
      if (__UNIQUE_ID___x468 > __UNIQUE_ID___y469) 
                                                   #line 10272 
                                                   tmp = __UNIQUE_ID___x468; else 
                                                                    #line 10272 
                                                                    tmp = __UNIQUE_ID___y469;
      }
    #line 10272 
    bd_num_max = tmp;
    #line 10271 
    i ++;
  }
  #line 10274 
  buf_len = (int)((unsigned long)bd_num_max * (unsigned long)32U);
  #line 10275 
  desc_src = (struct hclge_desc *)kzalloc_0((unsigned long)buf_len,3264U);
  #line 10276 
  if (desc_src == (struct hclge_desc *)0) {
    #line 10277 
    _dev_err(& (hdev->pdev)->dev,(char *)"%s kzalloc failed\n",(char *)"hclge_get_dfx_reg");
    #line 10278 
    return -12;
  }
  #line 10281 
  i = 0;
  #line 10281 
  while ((unsigned int)i < dfx_reg_type_num) {
    {
      #line 10282 
      bd_num = bd_num_list[i];
      #line 10283 
      ret = hclge_dfx_reg_cmd_send(hdev,desc_src,bd_num,hclge_dfx_reg_opcode_list[i]);
      #line 10285 
      if (ret != 0) {
        #line 10286 
        _dev_err(& (hdev->pdev)->dev,(char *)"Get dfx reg fail, status is %d.\n",ret);
        #line 10288 
        break;
      }
      #line 10291 
      reg += (unsigned long)hclge_dfx_reg_fetch_data(desc_src,bd_num,(void *)reg);
    }
    #line 10281 
    i ++;
  }
  #line 10294 
  kfree((void *)desc_src);
  #line 10295 
  return ret;
}

#line 10298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_fetch_pf_reg(struct hclge_dev *hdev, void *data, struct hnae3_knic_private_info *kinfo)
{
  #line 10304 
  int i;
  #line 10304 
  int j;
  #line 10304 
  int reg_num;
  #line 10304 
  int separator_num;
  #line 10305 
  int data_num_sum;
  #line 10306 
  u32 *reg = (u32 *)data;
  #line 10309 
  reg_num = 14;
  #line 10310 
  separator_num = 4 - (reg_num & 3);
  #line 10311 
  i = 0;
  #line 10311 
  while (i < reg_num) {
    #line 10312 
    u32 *tmp;
    #line 10312 
    tmp = reg;
    #line 10312 
    reg ++;
    #line 10312 
    *tmp = hclge_read_reg_1((u8 *)hdev->hw.io_base,cmdq_reg_addr_list[i]);
    #line 10311 
    i ++;
  }
  #line 10313 
  i = 0;
  #line 10313 
  while (i < separator_num) {
    #line 10314 
    u32 *tmp_0;
    #line 10314 
    tmp_0 = reg;
    #line 10314 
    reg ++;
    #line 10314 
    *tmp_0 = 4261215226U;
    #line 10313 
    i ++;
  }
  #line 10315 
  data_num_sum = reg_num + separator_num;
  #line 10317 
  reg_num = 7;
  #line 10318 
  separator_num = 4 - (reg_num & 3);
  #line 10319 
  i = 0;
  #line 10319 
  while (i < reg_num) {
    #line 10320 
    u32 *tmp_1;
    #line 10320 
    tmp_1 = reg;
    #line 10320 
    reg ++;
    #line 10320 
    *tmp_1 = hclge_read_reg_1((u8 *)hdev->hw.io_base,common_reg_addr_list[i]);
    #line 10319 
    i ++;
  }
  #line 10321 
  i = 0;
  #line 10321 
  while (i < separator_num) {
    #line 10322 
    u32 *tmp_2;
    #line 10322 
    tmp_2 = reg;
    #line 10322 
    reg ++;
    #line 10322 
    *tmp_2 = 4261215226U;
    #line 10321 
    i ++;
  }
  #line 10323 
  data_num_sum = (reg_num + separator_num) + data_num_sum;
  #line 10325 
  reg_num = 26;
  #line 10326 
  separator_num = 4 - (reg_num & 3);
  #line 10327 
  j = 0;
  #line 10327 
  while ((int)kinfo->num_tqps > j) {
    #line 10328 
    i = 0;
    #line 10328 
    while (i < reg_num) {
      #line 10329 
      u32 *tmp_3;
      #line 10329 
      tmp_3 = reg;
      #line 10329 
      reg ++;
      #line 10329 
      *tmp_3 = hclge_read_reg_1((u8 *)hdev->hw.io_base,ring_reg_addr_list[i] + (unsigned int)(j * 512));
      #line 10328 
      i ++;
    }
    #line 10332 
    i = 0;
    #line 10332 
    while (i < separator_num) {
      #line 10333 
      u32 *tmp_4;
      #line 10333 
      tmp_4 = reg;
      #line 10333 
      reg ++;
      #line 10333 
      *tmp_4 = 4261215226U;
      #line 10332 
      i ++;
    }
    #line 10327 
    j ++;
  }
  #line 10335 
  data_num_sum = (reg_num + separator_num) * (int)kinfo->num_tqps + data_num_sum;
  #line 10337 
  reg_num = 5;
  #line 10338 
  separator_num = 4 - (reg_num & 3);
  #line 10339 
  j = 0;
  #line 10339 
  while ((int)hdev->num_msi_used + -1 > j) {
    #line 10340 
    i = 0;
    #line 10340 
    while (i < reg_num) {
      #line 10341 
      u32 *tmp_5;
      #line 10341 
      tmp_5 = reg;
      #line 10341 
      reg ++;
      #line 10341 
      *tmp_5 = hclge_read_reg_1((u8 *)hdev->hw.io_base,tqp_intr_reg_addr_list[i] + (unsigned int)(j * 4));
      #line 10340 
      i ++;
    }
    #line 10344 
    i = 0;
    #line 10344 
    while (i < separator_num) {
      #line 10345 
      u32 *tmp_6;
      #line 10345 
      tmp_6 = reg;
      #line 10345 
      reg ++;
      #line 10345 
      *tmp_6 = 4261215226U;
      #line 10344 
      i ++;
    }
    #line 10339 
    j ++;
  }
  #line 10347 
  data_num_sum = (reg_num + separator_num) * ((int)hdev->num_msi_used + -1) + data_num_sum;
  #line 10349 
  return data_num_sum;
}

#line 10352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_get_regs_len(struct hnae3_handle *handle)
{
  #line 10354 
  int cmdq_lines;
  #line 10354 
  int common_lines;
  #line 10354 
  int ring_lines;
  #line 10354 
  int tqp_intr_lines;
  #line 10358 
  int regs_num_32_bit;
  #line 10358 
  int regs_num_64_bit;
  #line 10358 
  int dfx_regs_len;
  #line 10359 
  int regs_lines_32_bit;
  #line 10359 
  int regs_lines_64_bit;
  #line 10360 
  int ret;
  #line 10355 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_167.kinfo;
  #line 10356 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 10357 
  struct hclge_dev *hdev = vport->back;
  #line 10362 
  ret = hclge_get_regs_num(hdev,(u32 *)(& regs_num_32_bit),(u32 *)(& regs_num_64_bit));
  #line 10363 
  if (ret != 0) {
    #line 10364 
    _dev_err(& (hdev->pdev)->dev,(char *)"Get register number failed, ret = %d.\n",ret);
    #line 10366 
    return ret;
  }
  #line 10369 
  ret = hclge_get_dfx_reg_len(hdev,& dfx_regs_len);
  #line 10370 
  if (ret != 0) {
    #line 10371 
    _dev_err(& (hdev->pdev)->dev,(char *)"Get dfx reg len failed, ret = %d.\n",ret);
    #line 10373 
    return ret;
  }
  #line 10376 
  cmdq_lines = 4;
  #line 10378 
  common_lines = 2;
  #line 10380 
  ring_lines = 7;
  #line 10382 
  tqp_intr_lines = 2;
  #line 10384 
  regs_lines_32_bit = (int)(((unsigned long)regs_num_32_bit * 4UL) / 16UL + (unsigned long)1U);
  #line 10386 
  regs_lines_64_bit = (int)(((unsigned long)regs_num_64_bit * 8UL) / 16UL + (unsigned long)1U);
  #line 10391 
  return (int)((unsigned long)(((((cmdq_lines + common_lines) + (int)kinfo->num_tqps * ring_lines) + ((int)hdev->num_msi_used + -1) * tqp_intr_lines) + regs_lines_32_bit) + regs_lines_64_bit) * (unsigned long)16U + (unsigned long)dfx_regs_len);
}

#line 10394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_get_regs(struct hnae3_handle *handle, u32 *version, void *data)
{
  #line 10400 
  u32 regs_num_32_bit;
  #line 10400 
  u32 regs_num_64_bit;
  #line 10401 
  int i;
  #line 10401 
  int reg_num;
  #line 10401 
  int separator_num;
  #line 10401 
  int ret;
  #line 10397 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_167.kinfo;
  #line 10398 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 10399 
  struct hclge_dev *hdev = vport->back;
  #line 10402 
  u32 *reg = (u32 *)data;
  #line 10404 
  *version = hdev->fw_version;
  #line 10406 
  ret = hclge_get_regs_num(hdev,& regs_num_32_bit,& regs_num_64_bit);
  #line 10407 
  if (ret != 0) {
    #line 10408 
    _dev_err(& (hdev->pdev)->dev,(char *)"Get register number failed, ret = %d.\n",ret);
    #line 10410 
    return;
  }
  #line 10413 
  reg += (unsigned long)hclge_fetch_pf_reg(hdev,(void *)reg,kinfo);
  #line 10415 
  ret = hclge_get_32_bit_regs(hdev,regs_num_32_bit,(void *)reg);
  #line 10416 
  if (ret != 0) {
    #line 10417 
    _dev_err(& (hdev->pdev)->dev,(char *)"Get 32 bit register failed, ret = %d.\n",ret);
    #line 10419 
    return;
  }
  #line 10421 
  reg_num = (int)regs_num_32_bit;
  #line 10422 
  reg += (unsigned long)reg_num;
  #line 10423 
  separator_num = 4 - (reg_num & 3);
  #line 10424 
  i = 0;
  #line 10424 
  while (i < separator_num) {
    #line 10425 
    u32 *tmp_1;
    #line 10425 
    tmp_1 = reg;
    #line 10425 
    reg ++;
    #line 10425 
    *tmp_1 = 4261215226U;
    #line 10424 
    i ++;
  }
  #line 10427 
  ret = hclge_get_64_bit_regs(hdev,regs_num_64_bit,(void *)reg);
  #line 10428 
  if (ret != 0) {
    #line 10429 
    _dev_err(& (hdev->pdev)->dev,(char *)"Get 64 bit register failed, ret = %d.\n",ret);
    #line 10431 
    return;
  }
  #line 10433 
  reg_num = (int)(regs_num_64_bit * 2U);
  #line 10434 
  reg += (unsigned long)reg_num;
  #line 10435 
  separator_num = 4 - (reg_num & 3);
  #line 10436 
  i = 0;
  #line 10436 
  while (i < separator_num) {
    #line 10437 
    u32 *tmp_2;
    #line 10437 
    tmp_2 = reg;
    #line 10437 
    reg ++;
    #line 10437 
    *tmp_2 = 4261215226U;
    #line 10436 
    i ++;
  }
  #line 10439 
  ret = hclge_get_dfx_reg(hdev,(void *)reg);
  #line 10440 
  if (ret != 0) 
                #line 10441 
                _dev_err(& (hdev->pdev)->dev,(char *)"Get dfx register failed, ret = %d.\n",ret);
  #line 10442 
  return;
}

#line 10445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_led_status(struct hclge_dev *hdev, u8 locate_led_status)
{
  #line 10447 
  struct hclge_set_led_state_cmd *req;
  #line 10448 
  struct hclge_desc desc;
  #line 10449 
  int ret;
  #line 10451 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_LED_STATUS_CFG,(_Bool)0);
  #line 10453 
  req = (struct hclge_set_led_state_cmd *)(& desc.data);
  #line 10454 
  req->locate_led_config = (unsigned char)((unsigned int)req->locate_led_config & 252U);
  #line 10454 
  req->locate_led_config = (unsigned char)((unsigned int)req->locate_led_config | ((unsigned int)locate_led_status & 3U));
  #line 10457 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 10458 
  if (ret != 0) 
                #line 10459 
                _dev_err(& (hdev->pdev)->dev,(char *)"Send set led state cmd error, ret =%d\n",ret);
  #line 10462 
  return ret;
}

#line 10471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_set_led_id(struct hnae3_handle *handle, enum ethtool_phys_id_state status)
{
  #line 10474 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 10475 
  struct hclge_dev *hdev = vport->back;
  #line 10477 
  switch ((unsigned int)status) {
    #line 10478 
    case (unsigned int)1: 
                          #line 10478 
    ;
    #line 10479 
    return hclge_set_led_status(hdev,(unsigned char)1);
    #line 10480 
    case (unsigned int)0: 
                          #line 10480 
    ;
    #line 10481 
    return hclge_set_led_status(hdev,(unsigned char)0);
    #line 10482 
    default: 
             #line 10482 
    ;
    #line 10483 
    return -22;
  }
}

#line 10487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_get_link_mode_0(struct hnae3_handle *handle, unsigned long *supported, unsigned long *advertising)
{
  #line 10491 
  unsigned int size = 2U;
  #line 10492 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 10493 
  struct hclge_dev *hdev = vport->back;
  #line 10494 
  unsigned int idx = 0U;
  #line 10496 
  while (idx < size) {
    #line 10497 
    *(supported + (unsigned long)idx) = hdev->hw.mac.supported[idx];
    #line 10498 
    *(advertising + (unsigned long)idx) = hdev->hw.mac.advertising[idx];
    #line 10496 
    idx ++;
  }
  #line 10500 
  return;
}

#line 10502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_gro_en(struct hnae3_handle *handle, bool enable)
{
  #line 10504 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 10505 
  struct hclge_dev *hdev = vport->back;
  #line 10507 
  return hclge_config_gro(hdev,(_Bool)((bool)((int)enable) != 0));
}

#line 10510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static struct hnae3_ae_ops hclge_ops = {.init_ae_dev = & hclge_init_ae_dev, .uninit_ae_dev = & hclge_uninit_ae_dev, .flr_prepare = & hclge_flr_prepare, .flr_done = & hclge_flr_done, .init_client_instance = & hclge_init_client_instance, .uninit_client_instance = & hclge_uninit_client_instance, .start = & hclge_ae_start, .stop = & hclge_ae_stop, .client_start = & hclge_client_start, .client_stop = & hclge_client_stop, .get_status = & hclge_get_status, .get_ksettings_an_result = & hclge_get_ksettings_an_result, .cfg_mac_speed_dup_h = & hclge_cfg_mac_speed_dup_h, .get_media_type = & hclge_get_media_type, .check_port_speed = & hclge_check_port_speed, .get_fec = & hclge_get_fec, .set_fec = & hclge_set_fec, .set_loopback = & hclge_set_loopback, .set_promisc_mode = & hclge_set_promisc_mode, .set_mtu = & hclge_set_mtu, .get_pauseparam = & hclge_get_pauseparam, .set_pauseparam = & hclge_set_pauseparam, .set_autoneg = & hclge_set_autoneg, .get_autoneg = & hclge_get_autoneg, .restart_autoneg = & hclge_restart_autoneg, .halt_autoneg = & hclge_halt_autoneg, .get_mac_addr = & hclge_get_mac_addr, .set_mac_addr = & hclge_set_mac_addr, .do_ioctl = & hclge_do_ioctl, .add_uc_addr = & hclge_add_uc_addr, .rm_uc_addr = & hclge_rm_uc_addr, .add_mc_addr = & hclge_add_mc_addr, .rm_mc_addr = & hclge_rm_mc_addr, .update_stats = & hclge_update_stats, .get_stats = & hclge_get_stats, .get_mac_stats = & hclge_get_mac_stat, .get_strings = & hclge_get_strings, .get_sset_count = & hclge_get_sset_count, .get_regs = & hclge_get_regs, .get_regs_len = & hclge_get_regs_len, .get_rss_key_size = & hclge_get_rss_key_size, .get_rss_indir_size = & hclge_get_rss_indir_size, .get_rss = & hclge_get_rss, .set_rss = & hclge_set_rss, .set_rss_tuple = & hclge_set_rss_tuple, .get_rss_tuple = & hclge_get_rss_tuple, .get_tc_size = & hclge_get_tc_size, .get_vector = & hclge_get_vector, .put_vector = & hclge_put_vector, .map_ring_to_vector = & hclge_map_ring_to_vector, .unmap_ring_from_vector = & hclge_unmap_ring_frm_vector, .reset_queue = & hclge_reset_tqp, .get_fw_version = & hclge_get_fw_version, .get_mdix_mode = & hclge_get_mdix_mode, .enable_vlan_filter = & hclge_enable_vlan_filter, .set_vlan_filter = & hclge_set_vlan_filter, .set_vf_vlan_filter = & hclge_set_vf_vlan_filter, .enable_hw_strip_rxvtag = & hclge_en_hw_strip_rxvtag, .reset_event = & hclge_reset_event, .get_reset_level = & hclge_get_reset_level, .set_default_reset_request = & hclge_set_def_reset_request, .get_channels = & hclge_get_channels, .get_tqps_and_rss_info = & hclge_get_tqps_and_rss_info, .set_channels = & hclge_set_channels, .set_led_id = & hclge_set_led_id, .get_link_mode = & hclge_get_link_mode_0, .add_fd_entry = & hclge_add_fd_entry, .del_fd_entry = & hclge_del_fd_entry, .del_all_fd_entries = & hclge_del_all_fd_entries, .get_fd_rule_cnt = & hclge_get_fd_rule_cnt, .get_fd_rule_info = & hclge_get_fd_rule_info, .get_fd_all_rules = & hclge_get_all_rules, .restore_fd_rules = & hclge_restore_fd_entries, .enable_fd = & hclge_enable_fd, .add_arfs_entry = & hclge_add_fd_entry_by_arfs, .dbg_run_cmd = & hclge_dbg_run_cmd, .handle_hw_ras_error = & hclge_handle_hw_ras_error, .get_hw_reset_stat = & hclge_get_hw_reset_stat, .ae_dev_resetting = & hclge_ae_dev_resetting, .ae_dev_reset_cnt = & hclge_ae_dev_reset_cnt, .set_gro_en = & hclge_gro_en, .get_global_queue_id = & hclge_covert_handle_qid_global, .set_timer_task = & hclge_set_timer_task, .mac_connect_phy = & hclge_mac_connect_phy, .mac_disconnect_phy = & hclge_mac_disconnect_phy, .restore_vlan_table = & hclge_restore_vlan_table, .get_vf_config = & hclge_get_vf_config, .set_vf_link_state = & hclge_set_vf_link_state, .set_vf_spoofchk = & hclge_set_vf_spoofchk, .set_vf_trust = & hclge_set_vf_trust, .set_vf_rate = & hclge_set_vf_rate, .set_vf_mac = & hclge_set_vf_mac};
#line 10605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static struct hnae3_ae_algo ae_algo = {.ops = & hclge_ops, .pdev_id_table = (struct pci_device_id *)(& ae_algo_pci_tbl)};
#line 10610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static int hclge_init(void)
{
  #line 10612 
  printk((char *)"\001",(char *)"hclge");
  #line 10614 
  hnae3_register_ae_algo(& ae_algo);
  #line 10616 
  return 0;
}

#line 10619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c"
static void hclge_exit(void)
{
  #line 10621 
  hnae3_unregister_ae_algo(& ae_algo);
  #line 10622 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
#line 93 
int emg_del_timer_sync(struct timer_list *arg0);
#line 94 
#line 94 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 95 
#line 95 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 96 
#line 96 
_Bool emg_queue_work_on(int arg0, struct workqueue_struct *arg1, struct work_struct *arg2);
#line 97 
#line 97 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
enum irqreturn emg_wrapper_hclge_misc_irq_handle(int arg0, void *arg1)
{
  #line 102 
  return hclge_misc_irq_handle(arg0,arg1);
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
void emg_hclge_exit(void)
{
  #line 107 
  hclge_exit();
  #line 108 
  return;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
int emg_hclge_init(void)
{
  #line 111 
  return hclge_init();
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 125 
  return ldv_find_next_bit(addr,size,offset);
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 132 
  ldv_set_bit(nr,addr);
  #line 133 
  return;
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 139 
  ldv_clear_bit(nr,addr);
  #line 140 
  return;
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 146 
  ldv_init_list_head(list);
  #line 147 
  return;
}

#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 167 
  return ldv_find_first_bit(addr,size);
}

#line 206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 209 
  ldv_bitmap_zero(dst,nbits);
  #line 210 
  return;
}

#line 313  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static bool cif_queue_work_on(int cpu, struct workqueue_struct *wq, struct work_struct *work)
{
  #line 317 
  return emg_queue_work_on(cpu,wq,work);
}

#line 414  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags)
{
  #line 417 
  return ldv_kcalloc(n,size,flags);
}

#line 435  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 438 
  return ldv_kzalloc(size,flags);
}

#line 709  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 712 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 716  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 720 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 724  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 728 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 732  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 736 
  return emg_mod_timer(timer,expires);
}

#line 740  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_spin_lock_bh_fd_rule_lock_of_hclge_dev(spinlock_t *lock)
{
  #line 743 
  ldv_spin_model_lock((char *)"fd_rule_lock_of_hclge_dev");
  #line 745 
  spin_lock_bh(lock);
  #line 746 
  return;
}

#line 749  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_spin_unlock_bh_fd_rule_lock_of_hclge_dev(spinlock_t *lock)
{
  #line 752 
  ldv_spin_model_unlock((char *)"fd_rule_lock_of_hclge_dev");
  #line 754 
  spin_unlock_bh(lock);
  #line 755 
  return;
}

#line 758  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_mutex_lock_umv_mutex_of_hclge_dev(struct mutex *lock)
{
  #line 761 
  ldv_mutex_model_lock(lock,(char *)"umv_mutex_of_hclge_dev");
  #line 762 
  return;
}

#line 765  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_mutex_unlock_umv_mutex_of_hclge_dev(struct mutex *lock)
{
  #line 768 
  ldv_mutex_model_unlock(lock,(char *)"umv_mutex_of_hclge_dev");
  #line 769 
  return;
}

#line 772  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_mutex_lock_vport_cfg_mutex_of_hclge_dev_0(struct mutex *lock)
{
  #line 775 
  ldv_mutex_model_lock(lock,(char *)"vport_cfg_mutex_of_hclge_dev");
  #line 776 
  return;
}

#line 779  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_mutex_unlock_vport_cfg_mutex_of_hclge_dev_0(struct mutex *lock)
{
  #line 782 
  ldv_mutex_model_unlock(lock,(char *)"vport_cfg_mutex_of_hclge_dev");
  #line 783 
  return;
}

#line 786  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_mutex_lock_vport_lock_of_hclge_dev(struct mutex *lock)
{
  #line 789 
  ldv_mutex_model_lock(lock,(char *)"vport_lock_of_hclge_dev");
  #line 790 
  return;
}

#line 793  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void cif_mutex_unlock_vport_lock_of_hclge_dev(struct mutex *lock)
{
  #line 796 
  ldv_mutex_model_unlock(lock,(char *)"vport_lock_of_hclge_dev");
  #line 797 
  return;
}

#line 800  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 804 
  return emg_del_timer_sync(timer);
}

#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_main.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags)
{
  #line 811 
  return ldv_devm_kzalloc(size,flags);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_cmd.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_cmd.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 705  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_cmd.i.aux"
static void cif_spin_lock_lock_of_hclge_cmq_ring(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_cmd.i.aux"
static void cif_spin_lock_bh_lock_of_hclge_cmq_ring(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 714  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_cmd.i.aux"
static void cif_spin_unlock_lock_of_hclge_cmq_ring(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 696  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_cmd.i.aux"
static void cif_spin_unlock_bh_lock_of_hclge_cmq_ring(spinlock_t *lock);
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 1091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
__inline static u32 hclge_read_reg_2(u8 *base, u32 reg)
{
  #line 1094 
  union __anonunion___u_4345 __u;
  #line 1093 
  __read_once_size((void *)(& base),(void *)(& __u.__c),8);
  #line 1093 
  u8 *reg_addr = (__u.__val);
  #line 1095 
  return readl((void *)(reg_addr + (unsigned long)reg));
}

#line 956  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
__inline static bool hclge_is_reset_pending(struct hclge_dev *hdev)
{
  #line 958 
  return (_Bool)(hdev->reset_pending != 0UL);
}

#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
static int hclge_ring_space(struct hclge_cmq_ring *ring)
{
  #line 20 
  int ntu = ring->next_to_use;
  #line 21 
  int ntc = ring->next_to_clean;
  #line 22 
  int used = ((ntu - ntc) + (int)ring->desc_num) % (int)ring->desc_num;
  #line 24 
  return ((int)ring->desc_num - used) + -1;
}

#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
static int is_valid_csq_clean_head(struct hclge_cmq_ring *ring, int head)
{
  #line 29 
  int ntu = ring->next_to_use;
  #line 30 
  int ntc = ring->next_to_clean;
  #line 32 
  if (ntu > ntc) 
                 #line 33 
                 return (head >= ntc && head <= ntu) != 0;
  #line 35 
  return (head >= ntc || head <= ntu) != 0;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
static int hclge_alloc_cmd_desc(struct hclge_cmq_ring *ring)
{
  #line 40 
  int size = (int)((unsigned int)ring->desc_num * 32U);
  #line 42 
  ring->desc = (struct hclge_desc *)dma_alloc_coherent(& ((ring->dev)->pdev)->dev,(unsigned long)size,& ring->desc_dma_addr,3264U);
  #line 44 
  if (ring->desc == (struct hclge_desc *)0) 
                                            #line 45 
                                            return -12;
  #line 47 
  return 0;
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
static void hclge_free_cmd_desc(struct hclge_cmq_ring *ring)
{
  #line 52 
  int size = (int)((unsigned int)ring->desc_num * 32U);
  #line 54 
  if (ring->desc != (struct hclge_desc *)0) {
    #line 55 
    dma_free_coherent(& ((ring->dev)->pdev)->dev,(unsigned long)size,(void *)ring->desc,ring->desc_dma_addr);
    #line 57 
    ring->desc = (struct hclge_desc *)0;
  }
  #line 59 
  return;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
static int hclge_alloc_cmd_queue(struct hclge_dev *hdev, int ring_type)
{
  #line 64 
  struct hclge_cmq_ring *tmp;
  #line 66 
  int ret;
  #line 63 
  struct hclge_hw *hw = & hdev->hw;
  #line 64 
  if (ring_type == 1) 
                      #line 64 
                      tmp = & hw->cmq.csq; else 
                                                #line 64 
                                                tmp = & hw->cmq.crq;
  #line 64 
  struct hclge_cmq_ring *ring = tmp;
  #line 68 
  ring->ring_type = (unsigned char)ring_type;
  #line 69 
  ring->dev = hdev;
  #line 71 
  ret = hclge_alloc_cmd_desc(ring);
  #line 72 
  if (ret != 0) {
    #line 73 
    char *tmp_0;
    #line 73 
    ;
    #line 73 
    if (ring_type == 1) 
                        #line 73 
                        tmp_0 = (char *)"CSQ"; else 
                                                    #line 73 
                                                    tmp_0 = (char *)"CRQ";
    #line 73 
    ;
    #line 73 
    _dev_err(& (hdev->pdev)->dev,(char *)"descriptor %s alloc error %d\n",tmp_0,ret);
    #line 75 
    return ret;
  }
  #line 78 
  return 0;
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
void hclge_cmd_reuse_desc(struct hclge_desc *desc, bool is_read)
{
  #line 83 
  desc->flag = (unsigned short)17U;
  #line 84 
  if ((int)is_read != 0) 
                         #line 85 
                         desc->flag = (unsigned short)((unsigned int)desc->flag | 8U); else 
                                                                    #line 87 
                                                                    desc->flag = (unsigned short)((unsigned int)desc->flag & 65527U);
  #line 88 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
void hclge_cmd_setup_basic_desc(struct hclge_desc *desc, enum hclge_opcode_type opcode, bool is_read)
{
  #line 93 
  memset((void *)desc,0,32UL);
  #line 94 
  desc->opcode = (unsigned short)opcode;
  #line 95 
  desc->flag = (unsigned short)17U;
  #line 97 
  if ((int)is_read != 0) 
                         #line 98 
                         desc->flag = (unsigned short)((unsigned int)desc->flag | 8U);
  #line 99 
  return;
}

#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
static void hclge_cmd_config_regs(struct hclge_cmq_ring *ring)
{
  #line 106 
  u32 reg_val;
  #line 103 
  dma_addr_t dma = ring->desc_dma_addr;
  #line 104 
  struct hclge_dev *hdev = ring->dev;
  #line 105 
  struct hclge_hw *hw = & hdev->hw;
  #line 108 
  if ((unsigned int)ring->ring_type == 1U) {
    #line 109 
    hclge_write_reg(hw->io_base,159744U,(unsigned int)dma);
    #line 111 
    hclge_write_reg(hw->io_base,159748U,(unsigned int)(dma >> 32));
    #line 113 
    reg_val = hclge_read_reg_2((u8 *)hw->io_base,159752U);
    #line 114 
    reg_val &= 65536U;
    #line 115 
    reg_val = (unsigned int)((int)ring->desc_num >> 3) | reg_val;
    #line 116 
    hclge_write_reg(hw->io_base,159752U,reg_val);
    #line 117 
    hclge_write_reg(hw->io_base,159764U,0U);
    #line 118 
    hclge_write_reg(hw->io_base,159760U,0U);
  }
  else {
    #line 120 
    hclge_write_reg(hw->io_base,159768U,(unsigned int)dma);
    #line 122 
    hclge_write_reg(hw->io_base,159772U,(unsigned int)(dma >> 32));
    #line 124 
    hclge_write_reg(hw->io_base,159776U,(unsigned int)((int)ring->desc_num >> 3));
    #line 126 
    hclge_write_reg(hw->io_base,159784U,0U);
    #line 127 
    hclge_write_reg(hw->io_base,159780U,0U);
  }
  #line 129 
  return;
}

#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
static void hclge_cmd_init_regs(struct hclge_hw *hw)
{
  #line 133 
  hclge_cmd_config_regs(& hw->cmq.csq);
  #line 134 
  hclge_cmd_config_regs(& hw->cmq.crq);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
static int hclge_cmd_csq_clean(struct hclge_hw *hw)
{
  #line 139 
  void *__mptr;
  #line 141 
  u32 head;
  #line 142 
  int clean;
  #line 139 
  __mptr = (void *)hw;
  #line 139 
  struct hclge_dev *hdev = ((struct hclge_dev *)(__mptr + 18446744073709551600U));
  #line 140 
  struct hclge_cmq_ring *csq = & hw->cmq.csq;
  #line 144 
  head = hclge_read_reg_2((u8 *)hw->io_base,159764U);
  #line 145 
  ldv_inline_asm();
  #line 147 
  if (is_valid_csq_clean_head(csq,(int)head) == 0) {
    #line 148 
    _dev_warn(& (hdev->pdev)->dev,(char *)"wrong cmd head (%u, %d-%d)\n",head,csq->next_to_use,csq->next_to_clean);
    #line 150 
    _dev_warn(& (hdev->pdev)->dev,(char *)"Disabling any further commands to IMP firmware\n");
    #line 152 
    cif_set_bit_1(13L,& hdev->state);
    #line 153 
    _dev_warn(& (hdev->pdev)->dev,(char *)"IMP firmware watchdog reset soon expected!\n");
    #line 155 
    return -5;
  }
  #line 158 
  clean = (int)(((head - (unsigned int)csq->next_to_clean) + (unsigned int)csq->desc_num) % (unsigned int)csq->desc_num);
  #line 159 
  csq->next_to_clean = (int)head;
  #line 160 
  return clean;
}

#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
static int hclge_cmd_csq_done(struct hclge_hw *hw)
{
  #line 165 
  u32 head = hclge_read_reg_2((u8 *)hw->io_base,159764U);
  #line 166 
  return (unsigned int)hw->cmq.csq.next_to_use == head;
}

#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
static bool hclge_is_special_opcode(u16 opcode)
{
  #line 184 
  int i;
  #line 174 
  u16 spec_opcode[10U] = {(unsigned short)48U, (unsigned short)49U, (unsigned short)50U, (unsigned short)52U, (unsigned short)65U, (unsigned short)66U, (unsigned short)5393U, (unsigned short)5394U, (unsigned short)5396U, (unsigned short)5397U};
  #line 186 
  i = 0;
  #line 186 
  while ((unsigned int)i <= 9U) {
    #line 187 
    if ((int)spec_opcode[i] == (int)opcode) 
                                            #line 188 
                                            return (_Bool)1;
    #line 186 
    i ++;
  }
  #line 191 
  return (_Bool)0;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
static int hclge_cmd_convert_err_code(u16 desc_ret)
{
  #line 196 
  switch ((int)desc_ret) {
    #line 197 
    case 0: 
            #line 197 
    ;
    #line 198 
    return 0;
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 200 
    return -1;
    #line 201 
    case 2: 
            #line 201 
    ;
    #line 202 
    return -95;
    #line 203 
    case 3: 
            #line 203 
    ;
    #line 204 
    return -54;
    #line 205 
    case 4: 
            #line 205 
    ;
    #line 206 
    return -63;
    #line 207 
    case 5: 
            #line 207 
    ;
    #line 208 
    return -15;
    #line 209 
    case 6: 
            #line 209 
    ;
    #line 210 
    return -22;
    #line 211 
    case 7: 
            #line 211 
    ;
    #line 212 
    return -34;
    #line 213 
    case 8: 
            #line 213 
    ;
    #line 214 
    return -62;
    #line 215 
    case 9: 
            #line 215 
    ;
    #line 216 
    return -67;
    #line 217 
    case 10: 
             #line 217 
    ;
    #line 218 
    return -6;
    #line 219 
    case 11: 
             #line 219 
    ;
    #line 220 
    return -53;
    #line 221 
    default: 
             #line 221 
    ;
    #line 222 
    return -5;
  }
}

#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
static int hclge_cmd_check_retval(struct hclge_hw *hw, struct hclge_desc *desc, int num, int ntc)
{
  #line 229 
  u16 opcode;
  #line 229 
  u16 desc_ret;
  #line 230 
  int handle;
  #line 239 
  int tmp_0;
  #line 232 
  opcode = desc->opcode;
  #line 233 
  handle = 0;
  #line 233 
  while (handle < num) {
    #line 234 
    *(desc + (unsigned long)handle) = *(hw->cmq.csq.desc + (unsigned long)ntc);
    #line 235 
    ntc ++;
    #line 236 
    if ((int)hw->cmq.csq.desc_num <= ntc) 
                                          #line 237 
                                          ntc = 0;
    #line 233 
    handle ++;
  }
  #line 239 
  if (hclge_is_special_opcode((unsigned short)((int)opcode))) 
                                                              #line 239 
                                                              tmp_0 = 0; else 
                                                                    #line 239 
                                                                    tmp_0 = 1;
  #line 239 
  if ((long)tmp_0 != 0L) 
                         #line 240 
                         desc_ret = (desc + ((unsigned long)num + 18446744073709551615U))->retval; else 
                                                                    #line 242 
                                                                    desc_ret = desc->retval;
  #line 244 
  hw->cmq.last_status = (enum hclge_cmd_status)desc_ret;
  #line 246 
  return hclge_cmd_convert_err_code((unsigned short)((int)desc_ret));
}

#line 258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
int hclge_cmd_send(struct hclge_hw *hw, struct hclge_desc *desc, int num)
{
  #line 260 
  void *__mptr;
  #line 262 
  struct hclge_desc *desc_to_use;
  #line 267 
  int ntc;
  #line 260 
  __mptr = (void *)hw;
  #line 260 
  struct hclge_dev *hdev = ((struct hclge_dev *)(__mptr + 18446744073709551600U));
  #line 261 
  struct hclge_cmq_ring *csq = & hw->cmq.csq;
  #line 263 
  bool complete = (_Bool)0;
  #line 264 
  u32 timeout = 0U;
  #line 265 
  int handle = 0;
  #line 266 
  int retval = 0;
  #line 269 
  cif_spin_lock_bh_lock_of_hclge_cmq_ring(& hw->cmq.csq.lock);
  #line 271 
  if ((int)test_bit(13L,& hdev->state) != 0) {
    #line 272 
    cif_spin_unlock_bh_lock_of_hclge_cmq_ring(& hw->cmq.csq.lock);
    #line 273 
    return -16;
  }
  #line 276 
  ;
  #line 276 
  if (hclge_ring_space(& hw->cmq.csq) < num) {
    #line 280 
    csq->next_to_clean = (int)hclge_read_reg_2((u8 *)hw->io_base,159764U);
    #line 281 
    cif_spin_unlock_bh_lock_of_hclge_cmq_ring(& hw->cmq.csq.lock);
    #line 282 
    return -16;
  }
  #line 289 
  ntc = hw->cmq.csq.next_to_use;
  #line 290 
  while (handle < num) {
    #line 291 
    desc_to_use = hw->cmq.csq.desc + (unsigned long)hw->cmq.csq.next_to_use;
    #line 292 
    *desc_to_use = *(desc + (unsigned long)handle);
    #line 293 
    (hw->cmq.csq.next_to_use) ++;
    #line 294 
    if (hw->cmq.csq.next_to_use >= (int)hw->cmq.csq.desc_num) 
                                                              #line 295 
                                                              hw->cmq.csq.next_to_use = 0;
    #line 296 
    handle ++;
  }
  #line 300 
  hclge_write_reg(hw->io_base,159760U,(unsigned int)hw->cmq.csq.next_to_use);
  #line 306 
  if (((unsigned long)desc->flag & 16UL) != 0UL) 
    #line 307 
    while (1) {
      {
        #line 308 
        if (hclge_cmd_csq_done(hw) != 0) {
          #line 309 
          complete = (_Bool)1;
          #line 310 
          break;
        }
        #line 312 
        __const_udelay(4295UL);
        #line 313 
        timeout ++;
      }
      #line 314 
      if (! ((unsigned int)hw->cmq.tx_timeout > timeout)) 
                                                          #line 307 
                                                          break;
    }
  #line 317 
  if (! complete) 
                  #line 318 
                  retval = -52; else 
                                     #line 320 
                                     retval = hclge_cmd_check_retval(hw,desc,num,ntc);
  #line 323 
  handle = hclge_cmd_csq_clean(hw);
  #line 324 
  if (handle < 0) 
                  #line 325 
                  retval = handle;
  else 
    #line 326 
    if (handle != num) 
                       #line 327 
                       _dev_warn(& (hdev->pdev)->dev,(char *)"cleaned %d, need to clean %d\n",handle,num);
  #line 330 
  cif_spin_unlock_bh_lock_of_hclge_cmq_ring(& hw->cmq.csq.lock);
  #line 332 
  return retval;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
static enum hclge_cmd_status hclge_cmd_query_firmware_version(struct hclge_hw *hw, u32 *version)
{
  #line 338 
  struct hclge_query_version_cmd *resp;
  #line 339 
  struct hclge_desc desc;
  #line 340 
  int ret;
  #line 342 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_QUERY_FW_VER,(_Bool)1);
  #line 343 
  resp = (struct hclge_query_version_cmd *)(& desc.data);
  #line 345 
  ret = hclge_cmd_send(hw,& desc,1);
  #line 346 
  if (ret == 0) 
                #line 347 
                *version = resp->firmware;
  #line 349 
  return (enum hclge_cmd_status)ret;
}

#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
int hclge_cmd_queue_init(struct hclge_dev *hdev)
{
  #line 354 
  int ret;
  #line 357 
  spinlock_check(& hdev->hw.cmq.csq.lock);
  {
    #line 357 
    struct lock_class_key __key;
    #line 357 
    __raw_spin_lock_init(& hdev->hw.cmq.csq.lock.__anonCompField_spinlock_25.rlock,(char *)"&(&hdev->hw.cmq.csq.lock)->rlock",& __key);
  }
  #line 358 
  spinlock_check(& hdev->hw.cmq.crq.lock);
  {
    #line 358 
    struct lock_class_key __key_0;
    #line 358 
    __raw_spin_lock_init(& hdev->hw.cmq.crq.lock.__anonCompField_spinlock_25.rlock,(char *)"&(&hdev->hw.cmq.crq.lock)->rlock",& __key_0);
  }
  #line 361 
  hdev->hw.cmq.csq.desc_num = (unsigned short)1024U;
  #line 362 
  hdev->hw.cmq.crq.desc_num = (unsigned short)1024U;
  #line 365 
  hdev->hw.cmq.tx_timeout = (unsigned short)30000U;
  #line 368 
  ret = hclge_alloc_cmd_queue(hdev,1);
  #line 369 
  if (ret != 0) {
    #line 370 
    _dev_err(& (hdev->pdev)->dev,(char *)"CSQ ring setup error %d\n",ret);
    #line 372 
    return ret;
  }
  #line 375 
  ret = hclge_alloc_cmd_queue(hdev,0);
  #line 376 
  if (ret != 0) {
    #line 377 
    _dev_err(& (hdev->pdev)->dev,(char *)"CRQ ring setup error %d\n",ret);
    #line 379 
    goto err_csq;
  }
  #line 382 
  return 0;
  #line 383 
  err_csq: 
           #line 383 
  ;
  #line 384 
  hclge_free_cmd_desc(& hdev->hw.cmq.csq);
  #line 385 
  return ret;
}

#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
static int hclge_firmware_compat_config(struct hclge_dev *hdev)
{
  #line 390 
  struct hclge_firmware_compat_cmd *req;
  #line 391 
  struct hclge_desc desc;
  #line 392 
  u32 compat = 0U;
  #line 394 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_M7_COMPAT_CFG,(_Bool)0);
  #line 396 
  req = (struct hclge_firmware_compat_cmd *)(& desc.data);
  #line 398 
  compat &= 4294967294U;
  #line 398 
  compat |= 1U;
  #line 399 
  compat &= 4294967293U;
  #line 399 
  compat |= 2U;
  #line 400 
  req->compat = compat;
  #line 402 
  return hclge_cmd_send(& hdev->hw,& desc,1);
}

#line 405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
int hclge_cmd_init(struct hclge_dev *hdev)
{
  #line 407 
  u32 version;
  #line 408 
  int ret;
  #line 410 
  cif_spin_lock_bh_lock_of_hclge_cmq_ring(& hdev->hw.cmq.csq.lock);
  #line 411 
  cif_spin_lock_lock_of_hclge_cmq_ring(& hdev->hw.cmq.crq.lock);
  #line 413 
  hdev->hw.cmq.csq.next_to_clean = 0;
  #line 414 
  hdev->hw.cmq.csq.next_to_use = 0;
  #line 415 
  hdev->hw.cmq.crq.next_to_clean = 0;
  #line 416 
  hdev->hw.cmq.crq.next_to_use = 0;
  #line 418 
  hclge_cmd_init_regs(& hdev->hw);
  #line 420 
  cif_spin_unlock_lock_of_hclge_cmq_ring(& hdev->hw.cmq.crq.lock);
  #line 421 
  cif_spin_unlock_bh_lock_of_hclge_cmq_ring(& hdev->hw.cmq.csq.lock);
  #line 423 
  cif_clear_bit_1(13L,& hdev->state);
  #line 428 
  if ((int)hclge_is_reset_pending(hdev) != 0) {
    #line 429 
    ret = -16;
    #line 430 
    goto err_cmd_init;
  }
  #line 433 
  ret = (int)hclge_cmd_query_firmware_version(& hdev->hw,& version);
  #line 434 
  if (ret != 0) {
    #line 435 
    _dev_err(& (hdev->pdev)->dev,(char *)"firmware version query failed %d\n",ret);
    #line 437 
    goto err_cmd_init;
  }
  #line 439 
  hdev->fw_version = version;
  #line 441 
  _dev_info(& (hdev->pdev)->dev,(char *)"The firmware version is %lu.%lu.%lu.%lu\n",(unsigned long)(version >> 24),((unsigned long)version >> 16) & 255UL,((unsigned long)version >> 8) & 255UL,(unsigned long)version & 255UL);
  #line 454 
  ret = hclge_firmware_compat_config(hdev);
  #line 455 
  if (ret != 0) 
                #line 456 
                _dev_warn(& (hdev->pdev)->dev,(char *)"Firmware compatible features not enabled(%d).\n",ret);
  #line 460 
  return 0;
  #line 462 
  err_cmd_init: 
                #line 462 
  ;
  #line 463 
  cif_set_bit_1(13L,& hdev->state);
  #line 465 
  return ret;
}

#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
static void hclge_cmd_uninit_regs(struct hclge_hw *hw)
{
  #line 470 
  hclge_write_reg(hw->io_base,159744U,0U);
  #line 471 
  hclge_write_reg(hw->io_base,159748U,0U);
  #line 472 
  hclge_write_reg(hw->io_base,159752U,0U);
  #line 473 
  hclge_write_reg(hw->io_base,159764U,0U);
  #line 474 
  hclge_write_reg(hw->io_base,159760U,0U);
  #line 475 
  hclge_write_reg(hw->io_base,159768U,0U);
  #line 476 
  hclge_write_reg(hw->io_base,159772U,0U);
  #line 477 
  hclge_write_reg(hw->io_base,159776U,0U);
  #line 478 
  hclge_write_reg(hw->io_base,159784U,0U);
  #line 479 
  hclge_write_reg(hw->io_base,159780U,0U);
  #line 480 
  return;
}

#line 482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
static void hclge_destroy_queue(struct hclge_cmq_ring *ring)
{
  #line 484 
  cif_spin_lock_lock_of_hclge_cmq_ring(& ring->lock);
  #line 485 
  hclge_free_cmd_desc(ring);
  #line 486 
  cif_spin_unlock_lock_of_hclge_cmq_ring(& ring->lock);
  #line 487 
  return;
}

#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
static void hclge_destroy_cmd_queue(struct hclge_hw *hw)
{
  #line 491 
  hclge_destroy_queue(& hw->cmq.csq);
  #line 492 
  hclge_destroy_queue(& hw->cmq.crq);
  #line 493 
  return;
}

#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.c"
void hclge_cmd_uninit(struct hclge_dev *hdev)
{
  #line 497 
  cif_spin_lock_bh_lock_of_hclge_cmq_ring(& hdev->hw.cmq.csq.lock);
  #line 498 
  cif_spin_lock_lock_of_hclge_cmq_ring(& hdev->hw.cmq.crq.lock);
  #line 499 
  cif_set_bit_1(13L,& hdev->state);
  #line 500 
  hclge_cmd_uninit_regs(& hdev->hw);
  #line 501 
  cif_spin_unlock_lock_of_hclge_cmq_ring(& hdev->hw.cmq.crq.lock);
  #line 502 
  cif_spin_unlock_bh_lock_of_hclge_cmq_ring(& hdev->hw.cmq.csq.lock);
  #line 504 
  hclge_destroy_cmd_queue(& hdev->hw);
  #line 505 
  return;
}

#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_cmd.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr)
{
  #line 117 
  ldv_set_bit(nr,addr);
  #line 118 
  return;
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_cmd.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr)
{
  #line 124 
  ldv_clear_bit(nr,addr);
  #line 125 
  return;
}

#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_cmd.i.aux"
static void cif_spin_lock_bh_lock_of_hclge_cmq_ring(spinlock_t *lock)
{
  #line 690 
  ldv_spin_model_lock((char *)"lock_of_hclge_cmq_ring");
  #line 692 
  spin_lock_bh_0(lock);
  #line 693 
  return;
}

#line 696  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_cmd.i.aux"
static void cif_spin_unlock_bh_lock_of_hclge_cmq_ring(spinlock_t *lock)
{
  #line 699 
  ldv_spin_model_unlock((char *)"lock_of_hclge_cmq_ring");
  #line 701 
  spin_unlock_bh_0(lock);
  #line 702 
  return;
}

#line 705  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_cmd.i.aux"
static void cif_spin_lock_lock_of_hclge_cmq_ring(spinlock_t *lock)
{
  #line 708 
  ldv_spin_model_lock((char *)"lock_of_hclge_cmq_ring");
  #line 710 
  spin_lock(lock);
  #line 711 
  return;
}

#line 714  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_cmd.i.aux"
static void cif_spin_unlock_lock_of_hclge_cmq_ring(spinlock_t *lock)
{
  #line 717 
  ldv_spin_model_unlock((char *)"lock_of_hclge_cmq_ring");
  #line 719 
  spin_unlock(lock);
  #line 720 
  return;
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 136 
int __bitmap_and(unsigned long *, unsigned long *, unsigned long *, unsigned int);
#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static int bitmap_and(unsigned long *dst, unsigned long *src1, unsigned long *src2, unsigned int nbits)
{
  #line 276 
  if (0 != 0 && nbits + 4294967295U <= 63U) {
    #line 277 
    *dst = ((*src1 & *src2) & (18446744073709551615UL >> (- nbits & 63U)));
    #line 277 
    return ((*src1 & *src2) & (18446744073709551615UL >> (- nbits & 63U))) != 0UL;
  }
  #line 278 
  return __bitmap_and(dst,src1,src2,nbits);
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/linkmode.h"
__inline static void linkmode_and(unsigned long *dst, unsigned long *a, unsigned long *b)
{
  #line 21 
  bitmap_and(dst,a,b,74U);
  #line 22 
  return;
}

#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
#line 328 
struct phy_device *mdiobus_get_phy(struct mii_bus *, int);
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
#line 266 
int __mdiobus_register(struct mii_bus *, struct module *);
#line 270 
#line 270 
struct mii_bus *devm_mdiobus_alloc_size(struct device *, int);
#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static struct mii_bus *devm_mdiobus_alloc(struct device *dev)
{
  #line 273 
  return devm_mdiobus_alloc_size(dev,0);
}

#line 1039 
#line 1039 
int phy_connect_direct(struct net_device *, struct phy_device *, void (*)(struct net_device *), phy_interface_t);
#line 1045 
#line 1045 
void phy_disconnect(struct phy_device *);
#line 1047 
#line 1047 
void phy_start(struct phy_device *);
#line 1048 
#line 1048 
void phy_stop(struct phy_device *);
#line 1091 
#line 1091 
void phy_attached_info(struct phy_device *);
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mdio.c"
static int hclge_mdio_write(struct mii_bus *bus, int phyid, int regnum, u16 data)
{
  #line 45 
  struct hclge_mdio_cfg_cmd *mdio_cmd;
  #line 47 
  struct hclge_desc desc;
  #line 48 
  int ret;
  #line 46 
  struct hclge_dev *hdev = (struct hclge_dev *)bus->priv;
  #line 50 
  if ((int)test_bit(13L,& hdev->state) != 0) 
                                             #line 51 
                                             return 0;
  #line 53 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_MDIO_CONFIG,(_Bool)0);
  #line 55 
  mdio_cmd = (struct hclge_mdio_cfg_cmd *)(& desc.data);
  #line 57 
  mdio_cmd->phyid = (unsigned char)((unsigned int)mdio_cmd->phyid & 224U);
  #line 57 
  mdio_cmd->phyid = (unsigned char)((unsigned int)mdio_cmd->phyid | ((unsigned int)((unsigned char)phyid) & 31U));
  #line 59 
  mdio_cmd->phyad = (unsigned char)((unsigned int)mdio_cmd->phyad & 224U);
  #line 59 
  mdio_cmd->phyad = (unsigned char)((unsigned int)mdio_cmd->phyad | ((unsigned int)((unsigned char)regnum) & 31U));
  #line 62 
  mdio_cmd->ctrl_bit = (unsigned char)((unsigned int)mdio_cmd->ctrl_bit & 254U);
  #line 62 
  mdio_cmd->ctrl_bit = (unsigned char)((unsigned int)mdio_cmd->ctrl_bit | 1U);
  #line 63 
  mdio_cmd->ctrl_bit = (unsigned char)((unsigned int)mdio_cmd->ctrl_bit & 249U);
  #line 63 
  mdio_cmd->ctrl_bit = (unsigned char)((unsigned int)mdio_cmd->ctrl_bit | 2U);
  #line 65 
  mdio_cmd->ctrl_bit = (unsigned char)((unsigned int)mdio_cmd->ctrl_bit & 231U);
  #line 65 
  mdio_cmd->ctrl_bit = (unsigned char)((unsigned int)mdio_cmd->ctrl_bit | 8U);
  #line 68 
  mdio_cmd->data_wr = data;
  #line 70 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 71 
  if (ret != 0) {
    #line 72 
    _dev_err(& (hdev->pdev)->dev,(char *)"mdio write fail when sending cmd, status is %d.\n",ret);
    #line 75 
    return ret;
  }
  #line 78 
  return 0;
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mdio.c"
static int hclge_mdio_read(struct mii_bus *bus, int phyid, int regnum)
{
  #line 83 
  struct hclge_mdio_cfg_cmd *mdio_cmd;
  #line 85 
  struct hclge_desc desc;
  #line 86 
  int ret;
  #line 84 
  struct hclge_dev *hdev = (struct hclge_dev *)bus->priv;
  #line 88 
  if ((int)test_bit(13L,& hdev->state) != 0) 
                                             #line 89 
                                             return 0;
  #line 91 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_MDIO_CONFIG,(_Bool)1);
  #line 93 
  mdio_cmd = (struct hclge_mdio_cfg_cmd *)(& desc.data);
  #line 95 
  mdio_cmd->phyid = (unsigned char)((unsigned int)mdio_cmd->phyid & 224U);
  #line 95 
  mdio_cmd->phyid = (unsigned char)((unsigned int)mdio_cmd->phyid | ((unsigned int)((unsigned char)phyid) & 31U));
  #line 97 
  mdio_cmd->phyad = (unsigned char)((unsigned int)mdio_cmd->phyad & 224U);
  #line 97 
  mdio_cmd->phyad = (unsigned char)((unsigned int)mdio_cmd->phyad | ((unsigned int)((unsigned char)regnum) & 31U));
  #line 100 
  mdio_cmd->ctrl_bit = (unsigned char)((unsigned int)mdio_cmd->ctrl_bit & 254U);
  #line 100 
  mdio_cmd->ctrl_bit = (unsigned char)((unsigned int)mdio_cmd->ctrl_bit | 1U);
  #line 101 
  mdio_cmd->ctrl_bit = (unsigned char)((unsigned int)mdio_cmd->ctrl_bit & 249U);
  #line 101 
  mdio_cmd->ctrl_bit = (unsigned char)((unsigned int)mdio_cmd->ctrl_bit | 2U);
  #line 103 
  mdio_cmd->ctrl_bit = (unsigned char)((unsigned int)mdio_cmd->ctrl_bit & 231U);
  #line 103 
  mdio_cmd->ctrl_bit = (unsigned char)((unsigned int)mdio_cmd->ctrl_bit | 16U);
  #line 107 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 108 
  if (ret != 0) {
    #line 109 
    _dev_err(& (hdev->pdev)->dev,(char *)"mdio read fail when get data, status is %d.\n",ret);
    #line 112 
    return ret;
  }
  #line 115 
  if (((int)mdio_cmd->sta & 1) != 0) {
    #line 116 
    _dev_err(& (hdev->pdev)->dev,(char *)"mdio read data error\n");
    #line 117 
    return -5;
  }
  #line 120 
  return (int)mdio_cmd->data_rd;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mdio.c"
int hclge_mac_mdio_config(struct hclge_dev *hdev)
{
  #line 128 
  struct phy_device *phydev;
  #line 129 
  struct mii_bus *mdio_bus;
  #line 130 
  int ret;
  #line 127 
  struct hclge_mac *mac = & hdev->hw.mac;
  #line 132 
  if ((unsigned int)hdev->hw.mac.phy_addr == 255U) {
    #line 133 
    _dev_info(& (hdev->pdev)->dev,(char *)"no phy device is connected to mdio bus\n");
    #line 135 
    return 0;
  }
  else 
    #line 136 
    if ((unsigned int)hdev->hw.mac.phy_addr > 31U) {
      #line 137 
      _dev_err(& (hdev->pdev)->dev,(char *)"phy_addr(%u) is too large.\n",(int)hdev->hw.mac.phy_addr);
      #line 139 
      return -22;
    }
  #line 142 
  mdio_bus = devm_mdiobus_alloc(& (hdev->pdev)->dev);
  #line 143 
  if (mdio_bus == (struct mii_bus *)0) 
                                       #line 144 
                                       return -12;
  #line 146 
  mdio_bus->name = (char *)"hisilicon MII bus";
  #line 147 
  mdio_bus->read = & hclge_mdio_read;
  #line 148 
  mdio_bus->write = & hclge_mdio_write;
  #line 149 
  ;
  #line 149 
  snprintf((char *)(& mdio_bus->id),61UL,(char *)"%s-%s",(char *)"mii",dev_name(& (hdev->pdev)->dev));
  #line 152 
  mdio_bus->parent = & (hdev->pdev)->dev;
  #line 153 
  mdio_bus->priv = (void *)hdev;
  #line 154 
  mdio_bus->phy_mask = (unsigned int)(~ (1 << (int)mac->phy_addr));
  #line 155 
  ret = __mdiobus_register(mdio_bus,& __this_module);
  #line 156 
  if (ret != 0) {
    #line 157 
    _dev_err(mdio_bus->parent,(char *)"Failed to register MDIO bus ret = %#x\n",ret);
    #line 159 
    return ret;
  }
  #line 162 
  phydev = mdiobus_get_phy(mdio_bus,(int)mac->phy_addr);
  #line 163 
  if (phydev == (struct phy_device *)0) {
    #line 164 
    _dev_err(mdio_bus->parent,(char *)"Failed to get phy device\n");
    #line 165 
    mdiobus_unregister(mdio_bus);
    #line 166 
    return -5;
  }
  #line 169 
  mac->phydev = phydev;
  #line 170 
  mac->mdio_bus = mdio_bus;
  #line 172 
  return 0;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mdio.c"
static void hclge_mac_adjust_link(struct net_device *netdev)
{
  #line 180 
  int duplex;
  #line 180 
  int speed;
  #line 181 
  int ret;
  #line 177 
  struct hnae3_handle *h = (struct hnae3_handle *)*((void **)netdev_priv(netdev));
  #line 178 
  struct hclge_vport *vport = hclge_get_vport(h);
  #line 179 
  struct hclge_dev *hdev = vport->back;
  #line 184 
  if ((unsigned int)(netdev->phydev)->link == 0U) 
                                                  #line 185 
                                                  return;
  #line 187 
  speed = (netdev->phydev)->speed;
  #line 188 
  duplex = (netdev->phydev)->duplex;
  #line 190 
  ret = hclge_cfg_mac_speed_dup(hdev,speed,(unsigned char)((int)((unsigned char)duplex)));
  #line 191 
  if (ret != 0) 
                #line 192 
                netdev_err(netdev,(char *)"failed to adjust link.\n");
  #line 194 
  ret = hclge_cfg_flowctrl(hdev);
  #line 195 
  if (ret != 0) 
                #line 196 
                netdev_err(netdev,(char *)"failed to configure flow control.\n");
  #line 197 
  return;
}

#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mdio.c"
int hclge_mac_connect_phy(struct hnae3_handle *handle)
{
  #line 206 
  int ret;
  #line 201 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 202 
  struct hclge_dev *hdev = vport->back;
  #line 203 
  struct net_device *netdev = (hdev->vport)->nic.__anonCompField_hnae3_handle_167.netdev;
  #line 204 
  struct phy_device *phydev = hdev->hw.mac.phydev;
  #line 205 
  unsigned long mask[2U] = {0UL};
  #line 208 
  if (phydev == (struct phy_device *)0) 
                                        #line 209 
                                        return 0;
  #line 211 
  linkmode_set_bit(10,(unsigned long *)(& phydev->supported));
  #line 213 
  phydev->dev_flags |= 4U;
  #line 215 
  ret = phy_connect_direct(netdev,phydev,& hclge_mac_adjust_link,(enum ldv_15532)PHY_INTERFACE_MODE_SGMII);
  #line 218 
  if (ret != 0) {
    #line 219 
    netdev_err(netdev,(char *)"phy_connect_direct err.\n");
    #line 220 
    return ret;
  }
  #line 223 
  linkmode_copy((unsigned long *)(& mask),(unsigned long *)(& hdev->hw.mac.supported));
  #line 224 
  linkmode_and((unsigned long *)(& phydev->supported),(unsigned long *)(& phydev->supported),(unsigned long *)(& mask));
  #line 225 
  linkmode_copy((unsigned long *)(& phydev->advertising),(unsigned long *)(& phydev->supported));
  #line 231 
  linkmode_set_bit(14,(unsigned long *)(& phydev->advertising));
  #line 234 
  phy_attached_info(phydev);
  #line 236 
  return 0;
}

#line 239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mdio.c"
void hclge_mac_disconnect_phy(struct hnae3_handle *handle)
{
  #line 241 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 242 
  struct hclge_dev *hdev = vport->back;
  #line 243 
  struct phy_device *phydev = hdev->hw.mac.phydev;
  #line 245 
  if (phydev == (struct phy_device *)0) 
                                        #line 246 
                                        return;
  #line 248 
  phy_disconnect(phydev);
  #line 249 
  return;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mdio.c"
void hclge_mac_start_phy(struct hclge_dev *hdev)
{
  #line 253 
  struct phy_device *phydev = hdev->hw.mac.phydev;
  #line 255 
  if (phydev == (struct phy_device *)0) 
                                        #line 256 
                                        return;
  #line 258 
  phy_start(phydev);
  #line 259 
  return;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mdio.c"
void hclge_mac_stop_phy(struct hclge_dev *hdev)
{
  #line 263 
  struct net_device *netdev = (hdev->vport)->nic.__anonCompField_hnae3_handle_167.netdev;
  #line 264 
  struct phy_device *phydev = netdev->phydev;
  #line 266 
  if (phydev == (struct phy_device *)0) 
                                        #line 267 
                                        return;
  #line 269 
  phy_stop(phydev);
  #line 270 
  return;
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 385 
int kstrtouint(char *, unsigned int, unsigned int *);
#line 408 
#line 408 
int kstrtou16(char *, unsigned int, u16 *);
#line 487 
#line 487 
int sscanf(char *, char * , ...);
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 42 
char *strncat(char *, char *, __kernel_size_t);
#line 52 
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_debugfs.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_debugfs.i.aux"
static size_t cif_strlen(char *s);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 25 
size_t ldv_strlen(char *s);
#line 27 
#line 27 
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 488  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_debugfs.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags);
#line 1091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_cmd.h"
__inline static u32 hclge_read_reg_3(u8 *base, u32 reg)
{
  #line 1094 
  union __anonunion___u_5788 __u;
  #line 1093 
  __read_once_size((void *)(& base),(void *)(& __u.__c),8);
  #line 1093 
  u8 *reg_addr = (__u.__val);
  #line 1095 
  return readl((void *)(reg_addr + (unsigned long)reg));
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
static struct hclge_dbg_dfx_message hclge_dbg_bios_common_reg[12U] = {{.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.flag = 1, .message = {(char)'B', (char)'P', (char)'_', (char)'C', (char)'P', (char)'U', (char)'_', (char)'S', (char)'T', (char)'A', (char)'T', (char)'E'}}, {.flag = 1, .message = {(char)'D', (char)'F', (char)'X', (char)'_', (char)'M', (char)'S', (char)'I', (char)'X', (char)'_', (char)'I', (char)'N', (char)'F', (char)'O', (char)'_', (char)'N', (char)'I', (char)'C', (char)'_', (char)'0'}}, {.flag = 1, .message = {(char)'D', (char)'F', (char)'X', (char)'_', (char)'M', (char)'S', (char)'I', (char)'X', (char)'_', (char)'I', (char)'N', (char)'F', (char)'O', (char)'_', (char)'N', (char)'I', (char)'C', (char)'_', (char)'1'}}, {.flag = 1, .message = {(char)'D', (char)'F', (char)'X', (char)'_', (char)'M', (char)'S', (char)'I', (char)'X', (char)'_', (char)'I', (char)'N', (char)'F', (char)'O', (char)'_', (char)'N', (char)'I', (char)'C', (char)'_', (char)'2'}}, {.flag = 1, .message = {(char)'D', (char)'F', (char)'X', (char)'_', (char)'M', (char)'S', (char)'I', (char)'X', (char)'_', (char)'I', (char)'N', (char)'F', (char)'O', (char)'_', (char)'N', (char)'I', (char)'C', (char)'_', (char)'3'}}, {.flag = 1, .message = {(char)'D', (char)'F', (char)'X', (char)'_', (char)'M', (char)'S', (char)'I', (char)'X', (char)'_', (char)'I', (char)'N', (char)'F', (char)'O', (char)'_', (char)'R', (char)'O', (char)'C', (char)'_', (char)'0'}}, {.flag = 1, .message = {(char)'D', (char)'F', (char)'X', (char)'_', (char)'M', (char)'S', (char)'I', (char)'X', (char)'_', (char)'I', (char)'N', (char)'F', (char)'O', (char)'_', (char)'R', (char)'O', (char)'C', (char)'_', (char)'1'}}, {.flag = 1, .message = {(char)'D', (char)'F', (char)'X', (char)'_', (char)'M', (char)'S', (char)'I', (char)'X', (char)'_', (char)'I', (char)'N', (char)'F', (char)'O', (char)'_', (char)'R', (char)'O', (char)'C', (char)'_', (char)'2'}}, {.flag = 1, .message = {(char)'D', (char)'F', (char)'X', (char)'_', (char)'M', (char)'S', (char)'I', (char)'X', (char)'_', (char)'I', (char)'N', (char)'F', (char)'O', (char)'_', (char)'R', (char)'O', (char)'C', (char)'_', (char)'3'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
static struct hclge_dbg_dfx_message hclge_dbg_ssu_reg_0[60U] = {{.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'E', (char)'T', (char)'S', (char)'_', (char)'P', (char)'O', (char)'R', (char)'T', (char)'_', (char)'S', (char)'T', (char)'A', (char)'T', (char)'U', (char)'S'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'E', (char)'T', (char)'S', (char)'_', (char)'T', (char)'C', (char)'G', (char)'_', (char)'S', (char)'T', (char)'A', (char)'T', (char)'U', (char)'S'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'B', (char)'P', (char)'_', (char)'S', (char)'T', (char)'A', (char)'T', (char)'U', (char)'S', (char)'_', (char)'0'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'B', (char)'P', (char)'_', (char)'S', (char)'T', (char)'A', (char)'T', (char)'U', (char)'S', (char)'_', (char)'1'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'B', (char)'P', (char)'_', (char)'S', (char)'T', (char)'A', (char)'T', (char)'U', (char)'S', (char)'_', (char)'2'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'B', (char)'P', (char)'_', (char)'S', (char)'T', (char)'A', (char)'T', (char)'U', (char)'S', (char)'_', (char)'3'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'B', (char)'P', (char)'_', (char)'S', (char)'T', (char)'A', (char)'T', (char)'U', (char)'S', (char)'_', (char)'4'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'B', (char)'P', (char)'_', (char)'S', (char)'T', (char)'A', (char)'T', (char)'U', (char)'S', (char)'_', (char)'5'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'F', (char)'C', (char)'_', (char)'I', (char)'N', (char)'D'}}, {.flag = 1, .message = {(char)'M', (char)'A', (char)'C', (char)'_', (char)'S', (char)'S', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'F', (char)'C', (char)'_', (char)'I', (char)'N', (char)'D'}}, {.flag = 1, .message = {(char)'B', (char)'T', (char)'M', (char)'P', (char)'_', (char)'A', (char)'G', (char)'E', (char)'I', (char)'N', (char)'G', (char)'_', (char)'S', (char)'T', (char)'_', (char)'B', (char)'0'}}, {.flag = 1, .message = {(char)'B', (char)'T', (char)'M', (char)'P', (char)'_', (char)'A', (char)'G', (char)'E', (char)'I', (char)'N', (char)'G', (char)'_', (char)'S', (char)'T', (char)'_', (char)'B', (char)'1'}}, {.flag = 1, .message = {(char)'B', (char)'T', (char)'M', (char)'P', (char)'_', (char)'A', (char)'G', (char)'E', (char)'I', (char)'N', (char)'G', (char)'_', (char)'S', (char)'T', (char)'_', (char)'B', (char)'2'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.flag = 1, .message = {(char)'F', (char)'U', (char)'L', (char)'L', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'N', (char)'U', (char)'M'}}, {.flag = 1, .message = {(char)'P', (char)'A', (char)'R', (char)'T', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'N', (char)'U', (char)'M'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'K', (char)'E', (char)'Y', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'N', (char)'U', (char)'M'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'R', (char)'L', (char)'T', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'N', (char)'U', (char)'M'}}, {.flag = 1, .message = {(char)'L', (char)'O', (char)'_', (char)'P', (char)'R', (char)'I', (char)'_', (char)'U', (char)'N', (char)'I', (char)'C', (char)'A', (char)'S', (char)'T', (char)'_', (char)'R', (char)'L', (char)'T', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'N', (char)'U', (char)'M'}}, {.flag = 1, .message = {(char)'H', (char)'I', (char)'_', (char)'P', (char)'R', (char)'I', (char)'_', (char)'M', (char)'U', (char)'L', (char)'T', (char)'I', (char)'C', (char)'A', (char)'S', (char)'T', (char)'_', (char)'R', (char)'L', (char)'T', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'N', (char)'U', (char)'M'}}, {.flag = 1, .message = {(char)'L', (char)'O', (char)'_', (char)'P', (char)'R', (char)'I', (char)'_', (char)'M', (char)'U', (char)'L', (char)'T', (char)'I', (char)'C', (char)'A', (char)'S', (char)'T', (char)'_', (char)'R', (char)'L', (char)'T', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'N', (char)'U', (char)'M'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'C', (char)'U', (char)'R', (char)'R', (char)'_', (char)'B', (char)'U', (char)'F', (char)'F', (char)'E', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'B', (char)'T', (char)'M', (char)'P', (char)'_', (char)'A', (char)'G', (char)'E', (char)'I', (char)'N', (char)'G', (char)'_', (char)'R', (char)'L', (char)'S', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'B', (char)'A', (char)'N', (char)'K', (char)'0'}}, {.flag = 1, .message = {(char)'B', (char)'T', (char)'M', (char)'P', (char)'_', (char)'A', (char)'G', (char)'E', (char)'I', (char)'N', (char)'G', (char)'_', (char)'R', (char)'L', (char)'S', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'B', (char)'A', (char)'N', (char)'K', (char)'1'}}, {.flag = 1, .message = {(char)'B', (char)'T', (char)'M', (char)'P', (char)'_', (char)'A', (char)'G', (char)'E', (char)'I', (char)'N', (char)'G', (char)'_', (char)'R', (char)'L', (char)'S', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'B', (char)'A', (char)'N', (char)'K', (char)'2'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'M', (char)'B', (char)'_', (char)'R', (char)'D', (char)'_', (char)'R', (char)'L', (char)'T', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'P', (char)'P', (char)'P', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'K', (char)'E', (char)'Y', (char)'_', (char)'N', (char)'U', (char)'M', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'P', (char)'P', (char)'P', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'K', (char)'E', (char)'Y', (char)'_', (char)'N', (char)'U', (char)'M', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'P', (char)'P', (char)'P', (char)'_', (char)'H', (char)'O', (char)'S', (char)'T', (char)'_', (char)'K', (char)'E', (char)'Y', (char)'_', (char)'N', (char)'U', (char)'M', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'P', (char)'P', (char)'P', (char)'_', (char)'H', (char)'O', (char)'S', (char)'T', (char)'_', (char)'K', (char)'E', (char)'Y', (char)'_', (char)'N', (char)'U', (char)'M', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'S', (char)'S', (char)'U', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'L', (char)'T', (char)'_', (char)'N', (char)'U', (char)'M', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'S', (char)'S', (char)'U', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'L', (char)'T', (char)'_', (char)'N', (char)'U', (char)'M', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'S', (char)'S', (char)'U', (char)'_', (char)'H', (char)'O', (char)'S', (char)'T', (char)'_', (char)'R', (char)'L', (char)'T', (char)'_', (char)'N', (char)'U', (char)'M', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'S', (char)'S', (char)'U', (char)'_', (char)'H', (char)'O', (char)'S', (char)'T', (char)'_', (char)'R', (char)'L', (char)'T', (char)'_', (char)'N', (char)'U', (char)'M', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'K', (char)'E', (char)'Y', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'N', (char)'U', (char)'M'}}, {.flag = 1, .message = {(char)'M', (char)'B', (char)'_', (char)'U', (char)'N', (char)'C', (char)'O', (char)'P', (char)'Y', (char)'_', (char)'N', (char)'U', (char)'M'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'O', (char)'Q', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'O', (char)'Q', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'B', (char)'A', (char)'N', (char)'K', (char)'_', (char)'U', (char)'N', (char)'B', (char)'A', (char)'L', (char)'A', (char)'N', (char)'C', (char)'E', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'B', (char)'A', (char)'N', (char)'K', (char)'_', (char)'U', (char)'N', (char)'B', (char)'A', (char)'L', (char)'A', (char)'N', (char)'C', (char)'E', (char)'_', (char)'R', (char)'X', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'I', (char)'C', (char)'_', (char)'L', (char)'2', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'R', (char)'O', (char)'C', (char)'_', (char)'L', (char)'2', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'I', (char)'C', (char)'_', (char)'L', (char)'2', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'R', (char)'X'}}, {.flag = 1, .message = {(char)'R', (char)'O', (char)'C', (char)'_', (char)'L', (char)'2', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'R', (char)'X'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'O', (char)'Q', (char)'_', (char)'G', (char)'L', (char)'B', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.flag = 1, .message = {(char)'L', (char)'O', (char)'_', (char)'P', (char)'R', (char)'I', (char)'_', (char)'U', (char)'N', (char)'I', (char)'C', (char)'A', (char)'S', (char)'T', (char)'_', (char)'C', (char)'U', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'H', (char)'I', (char)'_', (char)'P', (char)'R', (char)'I', (char)'_', (char)'M', (char)'U', (char)'L', (char)'T', (char)'I', (char)'C', (char)'A', (char)'S', (char)'T', (char)'_', (char)'C', (char)'U', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'L', (char)'O', (char)'_', (char)'P', (char)'R', (char)'I', (char)'_', (char)'M', (char)'U', (char)'L', (char)'T', (char)'I', (char)'C', (char)'A', (char)'S', (char)'T', (char)'_', (char)'C', (char)'U', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}};
#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
static struct hclge_dbg_dfx_message hclge_dbg_ssu_reg_1[90U] = {{.flag = 1, .message = {(char)'p', (char)'r', (char)'t', (char)'_', (char)'i', (char)'d'}}, {.flag = 1, .message = {(char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'C', (char)'U', (char)'R', (char)'R', (char)'_', (char)'B', (char)'U', (char)'F', (char)'F', (char)'E', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'0'}}, {.flag = 1, .message = {(char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'C', (char)'U', (char)'R', (char)'R', (char)'_', (char)'B', (char)'U', (char)'F', (char)'F', (char)'E', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'1'}}, {.flag = 1, .message = {(char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'C', (char)'U', (char)'R', (char)'R', (char)'_', (char)'B', (char)'U', (char)'F', (char)'F', (char)'E', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'2'}}, {.flag = 1, .message = {(char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'C', (char)'U', (char)'R', (char)'R', (char)'_', (char)'B', (char)'U', (char)'F', (char)'F', (char)'E', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'3'}}, {.flag = 1, .message = {(char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'C', (char)'U', (char)'R', (char)'R', (char)'_', (char)'B', (char)'U', (char)'F', (char)'F', (char)'E', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'4'}}, {.flag = 1, .message = {(char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'C', (char)'U', (char)'R', (char)'R', (char)'_', (char)'B', (char)'U', (char)'F', (char)'F', (char)'E', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'5'}}, {.flag = 1, .message = {(char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'C', (char)'U', (char)'R', (char)'R', (char)'_', (char)'B', (char)'U', (char)'F', (char)'F', (char)'E', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'6'}}, {.flag = 1, .message = {(char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'C', (char)'U', (char)'R', (char)'R', (char)'_', (char)'B', (char)'U', (char)'F', (char)'F', (char)'E', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'7'}}, {.flag = 1, .message = {(char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'C', (char)'U', (char)'R', (char)'R', (char)'_', (char)'B', (char)'U', (char)'F', (char)'F', (char)'E', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'O', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'O', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'O', (char)'C', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'O', (char)'C', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'0', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'0', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'1', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'1', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'2', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'2', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'3', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'3', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'4', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'4', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'5', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'5', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'6', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'6', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'7', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'7', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'0', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'0', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'1', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'1', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'2', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'2', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'3', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'3', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'4', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'4', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'5', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'5', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'6', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'6', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'7', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'7', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'0', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'0', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'1', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'1', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'2', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'2', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'3', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'3', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'4', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'4', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'5', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'5', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'6', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'6', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'7', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'I', (char)'N', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'7', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'0', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'0', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'1', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'1', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'2', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'2', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'3', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'3', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'4', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'4', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'5', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'5', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'6', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'6', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'7', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'C', (char)'K', (char)'E', (char)'T', (char)'_', (char)'T', (char)'C', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'7', (char)'_', (char)'H'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
static struct hclge_dbg_dfx_message hclge_dbg_ssu_reg_2[6U] = {{.flag = 1, .message = {(char)'O', (char)'Q', (char)'_', (char)'I', (char)'N', (char)'D', (char)'E', (char)'X'}}, {.flag = 1, .message = {(char)'Q', (char)'U', (char)'E', (char)'U', (char)'E', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
static struct hclge_dbg_dfx_message hclge_dbg_igu_egu_reg[54U] = {{.flag = 1, .message = {(char)'p', (char)'r', (char)'t', (char)'_', (char)'i', (char)'d'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'P', (char)'K', (char)'T'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'N', (char)'O', (char)'_', (char)'S', (char)'O', (char)'F', (char)'_', (char)'P', (char)'K', (char)'T'}}, {.flag = 1, .message = {(char)'E', (char)'G', (char)'U', (char)'_', (char)'T', (char)'X', (char)'_', (char)'1', (char)'5', (char)'8', (char)'8', (char)'_', (char)'S', (char)'H', (char)'O', (char)'R', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T'}}, {.flag = 1, .message = {(char)'E', (char)'G', (char)'U', (char)'_', (char)'T', (char)'X', (char)'_', (char)'1', (char)'5', (char)'8', (char)'8', (char)'_', (char)'P', (char)'K', (char)'T'}}, {.flag = 1, .message = {(char)'E', (char)'G', (char)'U', (char)'_', (char)'T', (char)'X', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'P', (char)'K', (char)'T'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'L', (char)'2', (char)'_', (char)'P', (char)'K', (char)'T'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'L', (char)'3', (char)'_', (char)'P', (char)'K', (char)'T'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'L', (char)'4', (char)'_', (char)'P', (char)'K', (char)'T'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'I', (char)'N', (char)'_', (char)'L', (char)'2', (char)'_', (char)'P', (char)'K', (char)'T'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'I', (char)'N', (char)'_', (char)'L', (char)'3', (char)'_', (char)'P', (char)'K', (char)'T'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'I', (char)'N', (char)'_', (char)'L', (char)'4', (char)'_', (char)'P', (char)'K', (char)'T'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'E', (char)'L', (char)'3', (char)'E', (char)'_', (char)'P', (char)'K', (char)'T'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'E', (char)'L', (char)'4', (char)'E', (char)'_', (char)'P', (char)'K', (char)'T'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'L', (char)'3', (char)'E', (char)'_', (char)'P', (char)'K', (char)'T'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'L', (char)'4', (char)'E', (char)'_', (char)'P', (char)'K', (char)'T'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'R', (char)'O', (char)'C', (char)'E', (char)'E', (char)'_', (char)'P', (char)'K', (char)'T'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'U', (char)'D', (char)'P', (char)'0', (char)'_', (char)'P', (char)'K', (char)'T'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'I', (char)'N', (char)'_', (char)'U', (char)'D', (char)'P', (char)'0', (char)'_', (char)'P', (char)'K', (char)'T'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'O', (char)'V', (char)'E', (char)'R', (char)'S', (char)'I', (char)'Z', (char)'E', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'O', (char)'V', (char)'E', (char)'R', (char)'S', (char)'I', (char)'Z', (char)'E', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'U', (char)'N', (char)'D', (char)'E', (char)'R', (char)'S', (char)'I', (char)'Z', (char)'E', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'U', (char)'N', (char)'D', (char)'E', (char)'R', (char)'S', (char)'I', (char)'Z', (char)'E', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'A', (char)'L', (char)'L', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'A', (char)'L', (char)'L', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'T', (char)'X', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'A', (char)'L', (char)'L', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'T', (char)'X', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'A', (char)'L', (char)'L', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'U', (char)'N', (char)'I', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'U', (char)'N', (char)'I', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'M', (char)'U', (char)'L', (char)'T', (char)'I', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'M', (char)'U', (char)'L', (char)'T', (char)'I', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'B', (char)'R', (char)'O', (char)'A', (char)'D', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'B', (char)'R', (char)'O', (char)'A', (char)'D', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'E', (char)'G', (char)'U', (char)'_', (char)'T', (char)'X', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'A', (char)'L', (char)'L', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'E', (char)'G', (char)'U', (char)'_', (char)'T', (char)'X', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'A', (char)'L', (char)'L', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'E', (char)'G', (char)'U', (char)'_', (char)'T', (char)'X', (char)'_', (char)'U', (char)'N', (char)'I', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'E', (char)'G', (char)'U', (char)'_', (char)'T', (char)'X', (char)'_', (char)'U', (char)'N', (char)'I', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'E', (char)'G', (char)'U', (char)'_', (char)'T', (char)'X', (char)'_', (char)'M', (char)'U', (char)'L', (char)'T', (char)'I', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'E', (char)'G', (char)'U', (char)'_', (char)'T', (char)'X', (char)'_', (char)'M', (char)'U', (char)'L', (char)'T', (char)'I', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'E', (char)'G', (char)'U', (char)'_', (char)'T', (char)'X', (char)'_', (char)'B', (char)'R', (char)'O', (char)'A', (char)'D', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'E', (char)'G', (char)'U', (char)'_', (char)'T', (char)'X', (char)'_', (char)'B', (char)'R', (char)'O', (char)'A', (char)'D', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'T', (char)'X', (char)'_', (char)'K', (char)'E', (char)'Y', (char)'_', (char)'N', (char)'U', (char)'M', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'T', (char)'X', (char)'_', (char)'K', (char)'E', (char)'Y', (char)'_', (char)'N', (char)'U', (char)'M', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'N', (char)'O', (char)'N', (char)'_', (char)'T', (char)'U', (char)'N', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'N', (char)'O', (char)'N', (char)'_', (char)'T', (char)'U', (char)'N', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'T', (char)'U', (char)'N', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'T', (char)'U', (char)'N', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'H'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
static struct hclge_dbg_dfx_message hclge_dbg_rpu_reg_0[6U] = {{.flag = 1, .message = {(char)'t', (char)'c', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'_', (char)'n', (char)'u', (char)'m'}}, {.flag = 1, .message = {(char)'F', (char)'S', (char)'M', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'0'}}, {.flag = 1, .message = {(char)'F', (char)'S', (char)'M', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'1'}}, {.flag = 1, .message = {(char)'R', (char)'P', (char)'U', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'B', (char)'U', (char)'F', (char)'_', (char)'W', (char)'A', (char)'I', (char)'T', (char)'_', (char)'T', (char)'I', (char)'M', (char)'E', (char)'O', (char)'U', (char)'T'}}, {.flag = 1, .message = {(char)'B', (char)'U', (char)'F', (char)'_', (char)'W', (char)'A', (char)'I', (char)'T', (char)'_', (char)'T', (char)'I', (char)'M', (char)'E', (char)'O', (char)'U', (char)'T', (char)'_', (char)'Q', (char)'I', (char)'D'}}};
#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
static struct hclge_dbg_dfx_message hclge_dbg_rpu_reg_1[12U] = {{.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.flag = 1, .message = {(char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'0'}}, {.flag = 1, .message = {(char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'1'}}, {.flag = 1, .message = {(char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'2'}}, {.flag = 1, .message = {(char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'3'}}, {.flag = 1, .message = {(char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'4'}}, {.flag = 1, .message = {(char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'5'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}};
#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
static struct hclge_dbg_dfx_message hclge_dbg_ncsi_reg[60U] = {{.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'E', (char)'G', (char)'U', (char)'_', (char)'T', (char)'X', (char)'_', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'S', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'P', (char)'A', (char)'U', (char)'S', (char)'E', (char)'_', (char)'S', (char)'T', (char)'A', (char)'T', (char)'U', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'R', (char)'X', (char)'_', (char)'C', (char)'T', (char)'R', (char)'L', (char)'_', (char)'D', (char)'M', (char)'A', (char)'C', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'R', (char)'X', (char)'_', (char)'C', (char)'T', (char)'R', (char)'L', (char)'_', (char)'S', (char)'M', (char)'A', (char)'C', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'R', (char)'X', (char)'_', (char)'C', (char)'T', (char)'R', (char)'L', (char)'_', (char)'C', (char)'K', (char)'S', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'R', (char)'X', (char)'_', (char)'C', (char)'T', (char)'R', (char)'L', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'T', (char)'_', (char)'D', (char)'M', (char)'A', (char)'C', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'T', (char)'_', (char)'S', (char)'M', (char)'A', (char)'C', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'R', (char)'X', (char)'_', (char)'F', (char)'C', (char)'S', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'T', (char)'X', (char)'_', (char)'C', (char)'T', (char)'R', (char)'L', (char)'_', (char)'D', (char)'M', (char)'A', (char)'C', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'T', (char)'X', (char)'_', (char)'C', (char)'T', (char)'R', (char)'L', (char)'_', (char)'S', (char)'M', (char)'A', (char)'C', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'T', (char)'X', (char)'_', (char)'C', (char)'T', (char)'R', (char)'L', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'T', (char)'_', (char)'D', (char)'M', (char)'A', (char)'C', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'T', (char)'_', (char)'S', (char)'M', (char)'A', (char)'C', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'T', (char)'R', (char)'U', (char)'N', (char)'C', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'T', (char)'X', (char)'_', (char)'C', (char)'T', (char)'R', (char)'L', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'R', (char)'X', (char)'_', (char)'C', (char)'T', (char)'R', (char)'L', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'T', (char)'R', (char)'U', (char)'N', (char)'C', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'R', (char)'X', (char)'_', (char)'C', (char)'T', (char)'R', (char)'L', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'F', (char)'L', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S', (char)'_', (char)'O', (char)'K'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S', (char)'_', (char)'B', (char)'A', (char)'D'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'U', (char)'C', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'M', (char)'C', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'B', (char)'C', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S', (char)'_', (char)'6', (char)'4', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S', (char)'_', (char)'6', (char)'5', (char)'T', (char)'O', (char)'1', (char)'2', (char)'7', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S', (char)'_', (char)'1', (char)'2', (char)'8', (char)'T', (char)'O', (char)'2', (char)'5', (char)'5', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S', (char)'_', (char)'2', (char)'5', (char)'5', (char)'T', (char)'O', (char)'5', (char)'1', (char)'1', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S', (char)'_', (char)'5', (char)'1', (char)'2', (char)'T', (char)'O', (char)'1', (char)'0', (char)'2', (char)'3', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'T', (char)'O', (char)'1', (char)'5', (char)'1', (char)'8', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'T', (char)'O', (char)'M', (char)'A', (char)'X', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'F', (char)'C', (char)'S', (char)'_', (char)'E', (char)'R', (char)'R', (char)'O', (char)'R', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'L', (char)'O', (char)'N', (char)'G', (char)'_', (char)'E', (char)'R', (char)'R', (char)'O', (char)'R', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'J', (char)'A', (char)'B', (char)'B', (char)'E', (char)'R', (char)'_', (char)'E', (char)'R', (char)'R', (char)'O', (char)'R', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'R', (char)'U', (char)'N', (char)'T', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'S', (char)'H', (char)'O', (char)'R', (char)'T', (char)'_', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'F', (char)'I', (char)'L', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S', (char)'_', (char)'T', (char)'O', (char)'T', (char)'A', (char)'L', (char)'_', (char)'F', (char)'I', (char)'L', (char)'T'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'T', (char)'X', (char)'_', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S', (char)'_', (char)'O', (char)'K'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'T', (char)'X', (char)'_', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S', (char)'_', (char)'B', (char)'A', (char)'D'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'T', (char)'X', (char)'_', (char)'U', (char)'C', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'T', (char)'X', (char)'_', (char)'M', (char)'C', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'T', (char)'X', (char)'_', (char)'B', (char)'C', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S', (char)'_', (char)'6', (char)'4', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S', (char)'_', (char)'6', (char)'5', (char)'T', (char)'O', (char)'1', (char)'2', (char)'7', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S', (char)'_', (char)'1', (char)'2', (char)'8', (char)'T', (char)'O', (char)'2', (char)'5', (char)'5', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S', (char)'_', (char)'2', (char)'5', (char)'6', (char)'T', (char)'O', (char)'5', (char)'1', (char)'1', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S', (char)'_', (char)'5', (char)'1', (char)'2', (char)'T', (char)'O', (char)'1', (char)'0', (char)'2', (char)'3', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'T', (char)'O', (char)'1', (char)'5', (char)'1', (char)'8', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'T', (char)'O', (char)'M', (char)'A', (char)'X', (char)'O', (char)'C', (char)'T', (char)'E', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'T', (char)'X', (char)'_', (char)'U', (char)'N', (char)'D', (char)'E', (char)'R', (char)'R', (char)'U', (char)'N'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'T', (char)'X', (char)'_', (char)'C', (char)'R', (char)'C', (char)'_', (char)'E', (char)'R', (char)'R', (char)'O', (char)'R'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'A', (char)'U', (char)'S', (char)'E', (char)'_', (char)'F', (char)'R', (char)'A', (char)'M', (char)'E', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'D', (char)'_', (char)'P', (char)'K', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'N', (char)'C', (char)'S', (char)'I', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'A', (char)'U', (char)'S', (char)'E', (char)'_', (char)'F', (char)'R', (char)'A', (char)'M', (char)'E', (char)'S'}}};
#line 456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
static struct hclge_dbg_dfx_message hclge_dbg_rtc_reg[24U] = {{.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.flag = 1, .message = {(char)'L', (char)'G', (char)'E', (char)'_', (char)'I', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'0'}}, {.flag = 1, .message = {(char)'L', (char)'G', (char)'E', (char)'_', (char)'I', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'1'}}, {.flag = 1, .message = {(char)'L', (char)'G', (char)'E', (char)'_', (char)'I', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'2'}}, {.flag = 1, .message = {(char)'L', (char)'G', (char)'E', (char)'_', (char)'I', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'3'}}, {.flag = 1, .message = {(char)'L', (char)'G', (char)'E', (char)'_', (char)'I', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'4'}}, {.flag = 1, .message = {(char)'L', (char)'G', (char)'E', (char)'_', (char)'I', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'5'}}, {.flag = 1, .message = {(char)'L', (char)'G', (char)'E', (char)'_', (char)'I', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'6'}}, {.flag = 1, .message = {(char)'L', (char)'G', (char)'E', (char)'_', (char)'I', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'7'}}, {.flag = 1, .message = {(char)'L', (char)'G', (char)'E', (char)'_', (char)'E', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'0'}}, {.flag = 1, .message = {(char)'L', (char)'G', (char)'E', (char)'_', (char)'E', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'1'}}, {.flag = 1, .message = {(char)'L', (char)'G', (char)'E', (char)'_', (char)'E', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'2'}}, {.flag = 1, .message = {(char)'L', (char)'G', (char)'E', (char)'_', (char)'E', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'3'}}, {.flag = 1, .message = {(char)'L', (char)'G', (char)'E', (char)'_', (char)'E', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'4'}}, {.flag = 1, .message = {(char)'L', (char)'G', (char)'E', (char)'_', (char)'E', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'5'}}, {.flag = 1, .message = {(char)'L', (char)'G', (char)'E', (char)'_', (char)'E', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'6'}}, {.flag = 1, .message = {(char)'L', (char)'G', (char)'E', (char)'_', (char)'E', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'7'}}, {.flag = 1, .message = {(char)'C', (char)'G', (char)'E', (char)'_', (char)'I', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'0'}}, {.flag = 1, .message = {(char)'C', (char)'G', (char)'E', (char)'_', (char)'I', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'1'}}, {.flag = 1, .message = {(char)'C', (char)'G', (char)'E', (char)'_', (char)'E', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'0'}}, {.flag = 1, .message = {(char)'C', (char)'G', (char)'E', (char)'_', (char)'E', (char)'G', (char)'U', (char)'_', (char)'A', (char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'1'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}};
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
static struct hclge_dbg_dfx_message hclge_dbg_ppp_reg[132U] = {{.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.flag = 1, .message = {(char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'F', (char)'R', (char)'O', (char)'M', (char)'_', (char)'P', (char)'R', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'F', (char)'R', (char)'O', (char)'M', (char)'_', (char)'H', (char)'O', (char)'S', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'T', (char)'X', (char)'_', (char)'V', (char)'L', (char)'A', (char)'N', (char)'_', (char)'P', (char)'R', (char)'O', (char)'C', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'M', (char)'N', (char)'G', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'F', (char)'D', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'N', (char)'O', (char)'_', (char)'D', (char)'S', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'M', (char)'C', (char)'_', (char)'M', (char)'B', (char)'I', (char)'D', (char)'_', (char)'F', (char)'U', (char)'L', (char)'L', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'S', (char)'C', (char)'_', (char)'F', (char)'I', (char)'L', (char)'T', (char)'E', (char)'R', (char)'E', (char)'D'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'M', (char)'C', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'P', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'M', (char)'A', (char)'C', (char)'_', (char)'A', (char)'N', (char)'T', (char)'I', (char)'_', (char)'S', (char)'P', (char)'O', (char)'O', (char)'F', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'I', (char)'G', (char)'_', (char)'V', (char)'F', (char)'V', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'I', (char)'G', (char)'_', (char)'P', (char)'R', (char)'T', (char)'V', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'C', (char)'N', (char)'M', (char)'_', (char)'P', (char)'F', (char)'C', (char)'_', (char)'P', (char)'A', (char)'U', (char)'S', (char)'E', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'T', (char)'O', (char)'R', (char)'U', (char)'S', (char)'_', (char)'T', (char)'C', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'T', (char)'O', (char)'R', (char)'U', (char)'S', (char)'_', (char)'L', (char)'P', (char)'B', (char)'K', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'H', (char)'F', (char)'S', (char)'_', (char)'S', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'M', (char)'C', (char)'_', (char)'R', (char)'S', (char)'L', (char)'T', (char)'_', (char)'S', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'P', (char)'3', (char)'U', (char)'_', (char)'S', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'R', (char)'S', (char)'L', (char)'T', (char)'_', (char)'D', (char)'E', (char)'S', (char)'C', (char)'R', (char)'_', (char)'S', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'U', (char)'M', (char)'V', (char)'_', (char)'S', (char)'T', (char)'S', (char)'_', (char)'0'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'U', (char)'M', (char)'V', (char)'_', (char)'S', (char)'T', (char)'S', (char)'_', (char)'1'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'V', (char)'F', (char)'V', (char)'_', (char)'S', (char)'T', (char)'S'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'G', (char)'R', (char)'O', (char)'_', (char)'K', (char)'E', (char)'Y', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'G', (char)'R', (char)'O', (char)'_', (char)'I', (char)'N', (char)'F', (char)'O', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'G', (char)'R', (char)'O', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'G', (char)'R', (char)'O', (char)'_', (char)'O', (char)'U', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'G', (char)'R', (char)'O', (char)'_', (char)'K', (char)'E', (char)'Y', (char)'_', (char)'M', (char)'A', (char)'T', (char)'C', (char)'H', (char)'_', (char)'D', (char)'A', (char)'T', (char)'A', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'G', (char)'R', (char)'O', (char)'_', (char)'K', (char)'E', (char)'Y', (char)'_', (char)'M', (char)'A', (char)'T', (char)'C', (char)'H', (char)'_', (char)'T', (char)'C', (char)'A', (char)'M', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'G', (char)'R', (char)'O', (char)'_', (char)'I', (char)'N', (char)'F', (char)'O', (char)'_', (char)'M', (char)'A', (char)'T', (char)'C', (char)'H', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'G', (char)'R', (char)'O', (char)'_', (char)'F', (char)'R', (char)'E', (char)'E', (char)'_', (char)'E', (char)'N', (char)'T', (char)'R', (char)'Y', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'G', (char)'R', (char)'O', (char)'_', (char)'I', (char)'N', (char)'N', (char)'E', (char)'R', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'I', (char)'G', (char)'N', (char)'A', (char)'L'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.flag = 1, .message = {(char)'G', (char)'E', (char)'T', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'G', (char)'E', (char)'T', (char)'_', (char)'R', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'G', (char)'E', (char)'T', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'G', (char)'E', (char)'T', (char)'_', (char)'T', (char)'X', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'U', (char)'C', (char)'_', (char)'P', (char)'R', (char)'T', (char)'2', (char)'H', (char)'O', (char)'S', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'U', (char)'C', (char)'_', (char)'P', (char)'R', (char)'T', (char)'2', (char)'H', (char)'O', (char)'S', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'U', (char)'C', (char)'_', (char)'P', (char)'R', (char)'T', (char)'2', (char)'P', (char)'R', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'U', (char)'C', (char)'_', (char)'P', (char)'R', (char)'T', (char)'2', (char)'P', (char)'R', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'U', (char)'C', (char)'_', (char)'H', (char)'O', (char)'S', (char)'T', (char)'2', (char)'H', (char)'O', (char)'S', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'U', (char)'C', (char)'_', (char)'H', (char)'O', (char)'S', (char)'T', (char)'2', (char)'H', (char)'O', (char)'S', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'U', (char)'C', (char)'_', (char)'H', (char)'O', (char)'S', (char)'T', (char)'2', (char)'P', (char)'R', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'U', (char)'C', (char)'_', (char)'H', (char)'O', (char)'S', (char)'T', (char)'2', (char)'P', (char)'R', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'M', (char)'C', (char)'_', (char)'F', (char)'R', (char)'O', (char)'M', (char)'_', (char)'P', (char)'R', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'M', (char)'C', (char)'_', (char)'F', (char)'R', (char)'O', (char)'M', (char)'_', (char)'P', (char)'R', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'M', (char)'C', (char)'_', (char)'F', (char)'R', (char)'O', (char)'M', (char)'_', (char)'H', (char)'O', (char)'S', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'M', (char)'C', (char)'_', (char)'F', (char)'R', (char)'O', (char)'M', (char)'_', (char)'H', (char)'O', (char)'S', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'M', (char)'C', (char)'_', (char)'R', (char)'D', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'M', (char)'C', (char)'_', (char)'R', (char)'D', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'M', (char)'C', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'M', (char)'C', (char)'_', (char)'D', (char)'R', (char)'O', (char)'P', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'M', (char)'C', (char)'_', (char)'R', (char)'D', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'S', (char)'S', (char)'U', (char)'_', (char)'M', (char)'C', (char)'_', (char)'R', (char)'D', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'M', (char)'C', (char)'_', (char)'2', (char)'H', (char)'O', (char)'S', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'M', (char)'C', (char)'_', (char)'2', (char)'H', (char)'O', (char)'S', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'M', (char)'C', (char)'_', (char)'2', (char)'P', (char)'R', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'M', (char)'C', (char)'_', (char)'2', (char)'P', (char)'R', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'N', (char)'T', (char)'S', (char)'N', (char)'O', (char)'S', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'N', (char)'T', (char)'S', (char)'N', (char)'O', (char)'S', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'N', (char)'T', (char)'U', (char)'P', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'N', (char)'T', (char)'U', (char)'P', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'N', (char)'T', (char)'L', (char)'C', (char)'L', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'N', (char)'T', (char)'L', (char)'C', (char)'L', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'N', (char)'T', (char)'T', (char)'G', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'N', (char)'T', (char)'T', (char)'G', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'T', (char)'N', (char)'S', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'T', (char)'N', (char)'S', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'T', (char)'L', (char)'P', (char)'B', (char)'K', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'T', (char)'L', (char)'P', (char)'B', (char)'K', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'N', (char)'R', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'N', (char)'R', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'R', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'R', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'M', (char)'N', (char)'G', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'M', (char)'N', (char)'G', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'F', (char)'D', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'F', (char)'D', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'F', (char)'D', (char)'_', (char)'L', (char)'K', (char)'U', (char)'P', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'F', (char)'D', (char)'_', (char)'L', (char)'K', (char)'U', (char)'P', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'B', (char)'C', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'B', (char)'C', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'U', (char)'M', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'U', (char)'C', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'U', (char)'M', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'U', (char)'C', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'U', (char)'M', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'M', (char)'C', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'U', (char)'M', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'M', (char)'C', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'U', (char)'M', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'V', (char)'M', (char)'D', (char)'Q', (char)'1', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'U', (char)'M', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'V', (char)'M', (char)'D', (char)'Q', (char)'1', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'M', (char)'T', (char)'A', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'M', (char)'T', (char)'A', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'F', (char)'W', (char)'D', (char)'_', (char)'B', (char)'O', (char)'N', (char)'D', (char)'I', (char)'N', (char)'G', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'F', (char)'W', (char)'D', (char)'_', (char)'B', (char)'O', (char)'N', (char)'D', (char)'I', (char)'N', (char)'G', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'P', (char)'R', (char)'O', (char)'M', (char)'I', (char)'S', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'P', (char)'R', (char)'O', (char)'M', (char)'I', (char)'S', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'G', (char)'E', (char)'T', (char)'_', (char)'T', (char)'U', (char)'N', (char)'L', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'G', (char)'E', (char)'T', (char)'_', (char)'T', (char)'U', (char)'N', (char)'L', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'G', (char)'E', (char)'T', (char)'_', (char)'B', (char)'M', (char)'C', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'G', (char)'E', (char)'T', (char)'_', (char)'B', (char)'M', (char)'C', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'U', (char)'C', (char)'_', (char)'P', (char)'R', (char)'T', (char)'2', (char)'B', (char)'M', (char)'C', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'U', (char)'C', (char)'_', (char)'P', (char)'R', (char)'T', (char)'2', (char)'B', (char)'M', (char)'C', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'U', (char)'C', (char)'_', (char)'H', (char)'O', (char)'S', (char)'T', (char)'2', (char)'B', (char)'M', (char)'C', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'U', (char)'C', (char)'_', (char)'H', (char)'O', (char)'S', (char)'T', (char)'2', (char)'B', (char)'M', (char)'C', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'U', (char)'C', (char)'_', (char)'B', (char)'M', (char)'C', (char)'2', (char)'H', (char)'O', (char)'S', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'U', (char)'C', (char)'_', (char)'B', (char)'M', (char)'C', (char)'2', (char)'H', (char)'O', (char)'S', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'U', (char)'C', (char)'_', (char)'B', (char)'M', (char)'C', (char)'2', (char)'P', (char)'R', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'S', (char)'E', (char)'N', (char)'D', (char)'_', (char)'U', (char)'C', (char)'_', (char)'B', (char)'M', (char)'C', (char)'2', (char)'P', (char)'R', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'M', (char)'C', (char)'_', (char)'2', (char)'B', (char)'M', (char)'C', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'P', (char)'P', (char)'P', (char)'_', (char)'M', (char)'C', (char)'_', (char)'2', (char)'B', (char)'M', (char)'C', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'V', (char)'L', (char)'A', (char)'N', (char)'_', (char)'M', (char)'I', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'V', (char)'L', (char)'A', (char)'N', (char)'_', (char)'M', (char)'I', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'_', (char)'M', (char)'I', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'I', (char)'G', (char)'_', (char)'M', (char)'I', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'E', (char)'G', (char)'_', (char)'M', (char)'I', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'E', (char)'G', (char)'_', (char)'M', (char)'I', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'D', (char)'E', (char)'F', (char)'A', (char)'U', (char)'L', (char)'T', (char)'_', (char)'H', (char)'O', (char)'S', (char)'T', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'D', (char)'E', (char)'F', (char)'A', (char)'U', (char)'L', (char)'T', (char)'_', (char)'H', (char)'O', (char)'S', (char)'T', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'L', (char)'A', (char)'N', (char)'_', (char)'P', (char)'A', (char)'I', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'L', (char)'A', (char)'N', (char)'_', (char)'P', (char)'A', (char)'I', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'U', (char)'M', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'M', (char)'C', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'U', (char)'M', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'M', (char)'C', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'M', (char)'T', (char)'A', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'M', (char)'T', (char)'A', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.flag = 1, .message = {(char)'P', (char)'R', (char)'O', (char)'M', (char)'I', (char)'S', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'L'}}, {.flag = 1, .message = {(char)'P', (char)'R', (char)'O', (char)'M', (char)'I', (char)'S', (char)'_', (char)'T', (char)'B', (char)'L', (char)'_', (char)'H', (char)'I', (char)'T', (char)'_', (char)'P', (char)'K', (char)'T', (char)'_', (char)'C', (char)'N', (char)'T', (char)'_', (char)'H'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}};
#line 642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
static struct hclge_dbg_dfx_message hclge_dbg_rcb_reg[60U] = {{.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.flag = 1, .message = {(char)'F', (char)'S', (char)'M', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'0'}}, {.flag = 1, .message = {(char)'F', (char)'S', (char)'M', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'1'}}, {.flag = 1, .message = {(char)'F', (char)'S', (char)'M', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'2'}}, {.flag = 1, .message = {(char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'0'}}, {.flag = 1, .message = {(char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'1'}}, {.flag = 1, .message = {(char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'2'}}, {.flag = 1, .message = {(char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'3'}}, {.flag = 1, .message = {(char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'4'}}, {.flag = 1, .message = {(char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'5'}}, {.flag = 1, .message = {(char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'6'}}, {.flag = 1, .message = {(char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'7'}}, {.flag = 1, .message = {(char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'8'}}, {.flag = 1, .message = {(char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'9'}}, {.flag = 1, .message = {(char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'1', (char)'0'}}, {.flag = 1, .message = {(char)'F', (char)'I', (char)'F', (char)'O', (char)'_', (char)'D', (char)'F', (char)'X', (char)'_', (char)'S', (char)'T', (char)'1', (char)'1'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'0'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'1'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'2'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'3'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'4'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'5'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'6'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'7'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'8'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'9'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'1', (char)'0'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'1', (char)'1'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'1', (char)'2'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'1', (char)'3'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'1', (char)'4'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'1', (char)'5'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'1', (char)'6'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'1', (char)'7'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'1', (char)'8'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'1', (char)'9'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'2', (char)'0'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'2', (char)'1'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'2', (char)'2'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'2', (char)'3'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'2', (char)'4'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'2', (char)'5'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'2', (char)'6'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'2', (char)'7'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'2', (char)'8'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'2', (char)'9'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'3', (char)'0'}}, {.flag = 1, .message = {(char)'Q', (char)'_', (char)'C', (char)'R', (char)'E', (char)'D', (char)'I', (char)'T', (char)'_', (char)'V', (char)'L', (char)'D', (char)'_', (char)'3', (char)'1'}}, {.flag = 1, .message = {(char)'G', (char)'R', (char)'O', (char)'_', (char)'B', (char)'D', (char)'_', (char)'S', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'G', (char)'R', (char)'O', (char)'_', (char)'C', (char)'O', (char)'N', (char)'T', (char)'E', (char)'X', (char)'T', (char)'_', (char)'S', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'S', (char)'T', (char)'A', (char)'S', (char)'H', (char)'_', (char)'C', (char)'F', (char)'G', (char)'_', (char)'S', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'A', (char)'X', (char)'I', (char)'_', (char)'R', (char)'D', (char)'_', (char)'F', (char)'B', (char)'D', (char)'_', (char)'S', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'G', (char)'R', (char)'O', (char)'_', (char)'B', (char)'D', (char)'_', (char)'M', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'G', (char)'R', (char)'O', (char)'_', (char)'C', (char)'O', (char)'N', (char)'T', (char)'E', (char)'X', (char)'T', (char)'_', (char)'M', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'R', (char)'X', (char)'_', (char)'S', (char)'T', (char)'A', (char)'S', (char)'H', (char)'_', (char)'C', (char)'F', (char)'G', (char)'_', (char)'M', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.flag = 1, .message = {(char)'A', (char)'X', (char)'I', (char)'_', (char)'R', (char)'D', (char)'_', (char)'F', (char)'B', (char)'D', (char)'_', (char)'M', (char)'E', (char)'R', (char)'R', (char)'_', (char)'C', (char)'N', (char)'T'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}, {.message = {(char)'R', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d'}}};
#line 714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.h"
static struct hclge_dbg_dfx_message hclge_dbg_tqp_reg[12U] = {{.flag = 1, .message = {(char)'q', (char)'_', (char)'n', (char)'u', (char)'m'}}, {.flag = 1, .message = {(char)'R', (char)'C', (char)'B', (char)'_', (char)'C', (char)'F', (char)'G', (char)'_', (char)'R', (char)'X', (char)'_', (char)'R', (char)'I', (char)'N', (char)'G', (char)'_', (char)'T', (char)'A', (char)'I', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'C', (char)'B', (char)'_', (char)'C', (char)'F', (char)'G', (char)'_', (char)'R', (char)'X', (char)'_', (char)'R', (char)'I', (char)'N', (char)'G', (char)'_', (char)'H', (char)'E', (char)'A', (char)'D'}}, {.flag = 1, .message = {(char)'R', (char)'C', (char)'B', (char)'_', (char)'C', (char)'F', (char)'G', (char)'_', (char)'R', (char)'X', (char)'_', (char)'R', (char)'I', (char)'N', (char)'G', (char)'_', (char)'F', (char)'B', (char)'D', (char)'N', (char)'U', (char)'M'}}, {.flag = 1, .message = {(char)'R', (char)'C', (char)'B', (char)'_', (char)'C', (char)'F', (char)'G', (char)'_', (char)'R', (char)'X', (char)'_', (char)'R', (char)'I', (char)'N', (char)'G', (char)'_', (char)'O', (char)'F', (char)'F', (char)'S', (char)'E', (char)'T'}}, {.flag = 1, .message = {(char)'R', (char)'C', (char)'B', (char)'_', (char)'C', (char)'F', (char)'G', (char)'_', (char)'R', (char)'X', (char)'_', (char)'R', (char)'I', (char)'N', (char)'G', (char)'_', (char)'F', (char)'B', (char)'D', (char)'O', (char)'F', (char)'F', (char)'S', (char)'E', (char)'T'}}, {.flag = 1, .message = {(char)'R', (char)'C', (char)'B', (char)'_', (char)'C', (char)'F', (char)'G', (char)'_', (char)'R', (char)'X', (char)'_', (char)'R', (char)'I', (char)'N', (char)'G', (char)'_', (char)'P', (char)'K', (char)'T', (char)'N', (char)'U', (char)'M', (char)'_', (char)'R', (char)'E', (char)'C', (char)'O', (char)'R', (char)'D'}}, {.flag = 1, .message = {(char)'R', (char)'C', (char)'B', (char)'_', (char)'C', (char)'F', (char)'G', (char)'_', (char)'T', (char)'X', (char)'_', (char)'R', (char)'I', (char)'N', (char)'G', (char)'_', (char)'T', (char)'A', (char)'I', (char)'L'}}, {.flag = 1, .message = {(char)'R', (char)'C', (char)'B', (char)'_', (char)'C', (char)'F', (char)'G', (char)'_', (char)'T', (char)'X', (char)'_', (char)'R', (char)'I', (char)'N', (char)'G', (char)'_', (char)'H', (char)'E', (char)'A', (char)'D'}}, {.flag = 1, .message = {(char)'R', (char)'C', (char)'B', (char)'_', (char)'C', (char)'F', (char)'G', (char)'_', (char)'T', (char)'X', (char)'_', (char)'R', (char)'I', (char)'N', (char)'G', (char)'_', (char)'F', (char)'B', (char)'D', (char)'N', (char)'U', (char)'M'}}, {.flag = 1, .message = {(char)'R', (char)'C', (char)'B', (char)'_', (char)'C', (char)'F', (char)'G', (char)'_', (char)'T', (char)'X', (char)'_', (char)'R', (char)'I', (char)'N', (char)'G', (char)'_', (char)'O', (char)'F', (char)'F', (char)'S', (char)'E', (char)'T'}}, {.flag = 1, .message = {(char)'R', (char)'C', (char)'B', (char)'_', (char)'C', (char)'F', (char)'G', (char)'_', (char)'T', (char)'X', (char)'_', (char)'R', (char)'I', (char)'N', (char)'G', (char)'_', (char)'E', (char)'B', (char)'D', (char)'N', (char)'U', (char)'M'}}};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kfifo.h"
__inline static unsigned int __kfifo_uint_must_check_helper(unsigned int val)
{
  #line 165 
  return val;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static struct hclge_dbg_reg_type_info hclge_dbg_reg_info[12U] = {{.reg_type = (char *)"bios common", .dfx_msg = hclge_dbg_bios_common_reg, .reg_msg = {.msg_num = 12, .offset = 1, .cmd = HCLGE_OPC_DFX_BIOS_COMMON_REG}}, {.reg_type = (char *)"ssu", .dfx_msg = hclge_dbg_ssu_reg_0, .reg_msg = {.msg_num = 60, .offset = 2, .cmd = HCLGE_OPC_DFX_SSU_REG_0}}, {.reg_type = (char *)"ssu", .dfx_msg = hclge_dbg_ssu_reg_1, .reg_msg = {.msg_num = 90, .offset = 3, .cmd = HCLGE_OPC_DFX_SSU_REG_1}}, {.reg_type = (char *)"ssu", .dfx_msg = hclge_dbg_ssu_reg_2, .reg_msg = {.msg_num = 6, .offset = 12, .cmd = HCLGE_OPC_DFX_SSU_REG_2}}, {.reg_type = (char *)"igu egu", .dfx_msg = hclge_dbg_igu_egu_reg, .reg_msg = {.msg_num = 54, .offset = 4, .cmd = HCLGE_OPC_DFX_IGU_EGU_REG}}, {.reg_type = (char *)"rpu", .dfx_msg = hclge_dbg_rpu_reg_0, .reg_msg = {.msg_num = 6, .offset = 5, .cmd = HCLGE_OPC_DFX_RPU_REG_0}}, {.reg_type = (char *)"rpu", .dfx_msg = hclge_dbg_rpu_reg_1, .reg_msg = {.msg_num = 12, .offset = 6, .cmd = HCLGE_OPC_DFX_RPU_REG_1}}, {.reg_type = (char *)"ncsi", .dfx_msg = hclge_dbg_ncsi_reg, .reg_msg = {.msg_num = 60, .offset = 7, .cmd = HCLGE_OPC_DFX_NCSI_REG}}, {.reg_type = (char *)"rtc", .dfx_msg = hclge_dbg_rtc_reg, .reg_msg = {.msg_num = 24, .offset = 8, .cmd = HCLGE_OPC_DFX_RTC_REG}}, {.reg_type = (char *)"ppp", .dfx_msg = hclge_dbg_ppp_reg, .reg_msg = {.msg_num = 132, .offset = 9, .cmd = HCLGE_OPC_DFX_PPP_REG}}, {.reg_type = (char *)"rcb", .dfx_msg = hclge_dbg_rcb_reg, .reg_msg = {.msg_num = 60, .offset = 10, .cmd = HCLGE_OPC_DFX_RCB_REG}}, {.reg_type = (char *)"tqp", .dfx_msg = hclge_dbg_tqp_reg, .reg_msg = {.msg_num = 12, .offset = 11, .cmd = HCLGE_OPC_DFX_TQP_REG}}};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static int hclge_dbg_get_dfx_bd_num(struct hclge_dev *hdev, int offset)
{
  #line 78 
  struct hclge_desc desc[4U];
  #line 79 
  int entries_per_desc;
  #line 80 
  int index;
  #line 81 
  int ret;
  #line 83 
  ret = hclge_query_bd_num_cmd_send(hdev,(struct hclge_desc *)(& desc));
  #line 84 
  if (ret != 0) {
    #line 85 
    _dev_err(& (hdev->pdev)->dev,(char *)"get dfx bdnum fail, ret = %d\n",ret);
    #line 87 
    return ret;
  }
  #line 90 
  entries_per_desc = 6;
  #line 91 
  index = offset % entries_per_desc;
  #line 92 
  return (int)desc[offset / entries_per_desc].data[index];
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static int hclge_dbg_cmd_send(struct hclge_dev *hdev, struct hclge_desc *desc_src, int index, int bd_num, enum hclge_opcode_type cmd)
{
  #line 101 
  int ret;
  #line 101 
  int i;
  #line 100 
  struct hclge_desc *desc = desc_src;
  #line 103 
  hclge_cmd_setup_basic_desc(desc,cmd,(_Bool)1);
  #line 104 
  desc->data[0] = (unsigned int)index;
  #line 106 
  i = 1;
  #line 106 
  while (i < bd_num) {
    #line 107 
    desc->flag = (unsigned short)((unsigned int)desc->flag | 4U);
    #line 108 
    desc ++;
    #line 109 
    hclge_cmd_setup_basic_desc(desc,cmd,(_Bool)1);
    #line 106 
    i ++;
  }
  #line 112 
  ret = hclge_cmd_send(& hdev->hw,desc_src,bd_num);
  #line 113 
  if (ret != 0) 
                #line 114 
                _dev_err(& (hdev->pdev)->dev,(char *)"cmd(0x%x) send fail, ret = %d\n",(unsigned int)cmd,ret);
  #line 116 
  return ret;
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_dump_reg_common(struct hclge_dev *hdev, struct hclge_dbg_reg_type_info *reg_info, char *cmd_buf)
{
  #line 163 
  int __UNIQUE_ID___x442;
  #line 163 
  int tmp_1;
  #line 128 
  struct hclge_desc *desc_src;
  #line 129 
  struct hclge_desc *desc;
  #line 130 
  int entries_per_desc;
  #line 131 
  int bd_num;
  #line 131 
  int buf_len;
  #line 133 
  int min_num;
  #line 134 
  int ret;
  #line 134 
  int i;
  #line 125 
  char *s = cmd_buf + (cif_strlen(reg_info->reg_type) + 1UL);
  #line 126 
  struct hclge_dbg_dfx_message *dfx_message = reg_info->dfx_msg;
  #line 127 
  struct hclge_dbg_reg_common_msg *reg_msg = & reg_info->reg_msg;
  #line 132 
  int index = 0;
  #line 136 
  if ((int)*s != 0) {
    #line 137 
    ret = kstrtouint(s,0U,(unsigned int *)(& index));
    #line 138 
    if (ret == 0) 
                  #line 138 
                  index = index; else 
                                      #line 138 
                                      index = 0;
  }
  #line 141 
  bd_num = hclge_dbg_get_dfx_bd_num(hdev,reg_msg->offset);
  #line 142 
  if (bd_num <= 0) {
    #line 143 
    _dev_err(& (hdev->pdev)->dev,(char *)"get cmd(%d) bd num(%d) failed\n",reg_msg->offset,bd_num);
    #line 145 
    return;
  }
  #line 148 
  buf_len = (int)((unsigned long)bd_num * (unsigned long)32U);
  #line 149 
  desc_src = (struct hclge_desc *)kzalloc_1((unsigned long)buf_len,3264U);
  #line 150 
  if (desc_src == (struct hclge_desc *)0) {
    #line 151 
    _dev_err(& (hdev->pdev)->dev,(char *)"call kzalloc failed\n");
    #line 152 
    return;
  }
  #line 155 
  desc = desc_src;
  #line 156 
  ret = hclge_dbg_cmd_send(hdev,desc,index,bd_num,reg_msg->cmd);
  #line 157 
  if (ret != 0) {
    #line 158 
    kfree((void *)desc_src);
    #line 159 
    return;
  }
  #line 162 
  entries_per_desc = 6;
  {
    #line 163 
    __UNIQUE_ID___x442 = bd_num * entries_per_desc;
    #line 163 
    int __UNIQUE_ID___y443 = reg_msg->msg_num;
    #line 163 
    if (__UNIQUE_ID___x442 < __UNIQUE_ID___y443) 
                                                 #line 163 
                                                 tmp_1 = __UNIQUE_ID___x442; else 
                                                                    #line 163 
                                                                    tmp_1 = __UNIQUE_ID___y443;
    }
  #line 163 
  min_num = tmp_1;
  #line 165 
  desc = desc_src;
  #line 166 
  i = 0;
  #line 166 
  while (i < min_num) {
    #line 167 
    if (i > 0 && i % entries_per_desc == 0) 
                                            #line 168 
                                            desc ++;
    #line 169 
    if (dfx_message->flag != 0) 
                                #line 170 
                                _dev_info(& (hdev->pdev)->dev,(char *)"%s: 0x%x\n",(char *)(& dfx_message->message),desc->data[i % entries_per_desc]);
    #line 174 
    dfx_message ++;
    #line 166 
    i ++;
  }
  #line 177 
  kfree((void *)desc_src);
  #line 178 
  return;
}

#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_dump_dcb(struct hclge_dev *hdev, char *cmd_buf)
{
  #line 183 
  struct hclge_dbg_bitmap_cmd *bitmap;
  #line 184 
  int rq_id;
  #line 184 
  int pri_id;
  #line 184 
  int qset_id;
  #line 185 
  int port_id;
  #line 185 
  int nq_id;
  #line 185 
  int pg_id;
  #line 186 
  struct hclge_desc desc[2U];
  #line 188 
  int cnt;
  #line 188 
  int ret;
  #line 182 
  struct device *dev = & (hdev->pdev)->dev;
  #line 190 
  cnt = sscanf(cmd_buf,(char *)"%i %i %i %i %i %i",& port_id,& pri_id,& pg_id,& rq_id,& nq_id,& qset_id);
  #line 192 
  if (cnt != 6) {
    #line 193 
    _dev_err(& (hdev->pdev)->dev,(char *)"dump dcb: bad command parameter, cnt=%d\n",cnt);
    #line 195 
    return;
  }
  #line 198 
  ret = hclge_dbg_cmd_send(hdev,(struct hclge_desc *)(& desc),qset_id,1,(enum hclge_opcode_type)HCLGE_OPC_QSET_DFX_STS);
  #line 200 
  if (ret != 0) 
                #line 201 
                return;
  #line 203 
  bitmap = (struct hclge_dbg_bitmap_cmd *)(& desc[0].data[1]);
  #line 204 
  _dev_info(dev,(char *)"roce_qset_mask: 0x%x\n",(int)bitmap->__anonCompField_hclge_dbg_bitmap_cmd_161.__anonCompField___anonunion_5789_160.bit0);
  #line 205 
  _dev_info(dev,(char *)"nic_qs_mask: 0x%x\n",(int)bitmap->__anonCompField_hclge_dbg_bitmap_cmd_161.__anonCompField___anonunion_5789_160.bit1);
  #line 206 
  _dev_info(dev,(char *)"qs_shaping_pass: 0x%x\n",(int)bitmap->__anonCompField_hclge_dbg_bitmap_cmd_161.__anonCompField___anonunion_5789_160.bit2);
  #line 207 
  _dev_info(dev,(char *)"qs_bp_sts: 0x%x\n",(int)bitmap->__anonCompField_hclge_dbg_bitmap_cmd_161.__anonCompField___anonunion_5789_160.bit3);
  #line 209 
  ret = hclge_dbg_cmd_send(hdev,(struct hclge_desc *)(& desc),pri_id,1,(enum hclge_opcode_type)HCLGE_OPC_PRI_DFX_STS);
  #line 210 
  if (ret != 0) 
                #line 211 
                return;
  #line 213 
  bitmap = (struct hclge_dbg_bitmap_cmd *)(& desc[0].data[1]);
  #line 214 
  _dev_info(dev,(char *)"pri_mask: 0x%x\n",(int)bitmap->__anonCompField_hclge_dbg_bitmap_cmd_161.__anonCompField___anonunion_5789_160.bit0);
  #line 215 
  _dev_info(dev,(char *)"pri_cshaping_pass: 0x%x\n",(int)bitmap->__anonCompField_hclge_dbg_bitmap_cmd_161.__anonCompField___anonunion_5789_160.bit1);
  #line 216 
  _dev_info(dev,(char *)"pri_pshaping_pass: 0x%x\n",(int)bitmap->__anonCompField_hclge_dbg_bitmap_cmd_161.__anonCompField___anonunion_5789_160.bit2);
  #line 218 
  ret = hclge_dbg_cmd_send(hdev,(struct hclge_desc *)(& desc),pg_id,1,(enum hclge_opcode_type)HCLGE_OPC_PG_DFX_STS);
  #line 219 
  if (ret != 0) 
                #line 220 
                return;
  #line 222 
  bitmap = (struct hclge_dbg_bitmap_cmd *)(& desc[0].data[1]);
  #line 223 
  _dev_info(dev,(char *)"pg_mask: 0x%x\n",(int)bitmap->__anonCompField_hclge_dbg_bitmap_cmd_161.__anonCompField___anonunion_5789_160.bit0);
  #line 224 
  _dev_info(dev,(char *)"pg_cshaping_pass: 0x%x\n",(int)bitmap->__anonCompField_hclge_dbg_bitmap_cmd_161.__anonCompField___anonunion_5789_160.bit1);
  #line 225 
  _dev_info(dev,(char *)"pg_pshaping_pass: 0x%x\n",(int)bitmap->__anonCompField_hclge_dbg_bitmap_cmd_161.__anonCompField___anonunion_5789_160.bit2);
  #line 227 
  ret = hclge_dbg_cmd_send(hdev,(struct hclge_desc *)(& desc),port_id,1,(enum hclge_opcode_type)HCLGE_OPC_PORT_DFX_STS);
  #line 229 
  if (ret != 0) 
                #line 230 
                return;
  #line 232 
  bitmap = (struct hclge_dbg_bitmap_cmd *)(& desc[0].data[1]);
  #line 233 
  _dev_info(dev,(char *)"port_mask: 0x%x\n",(int)bitmap->__anonCompField_hclge_dbg_bitmap_cmd_161.__anonCompField___anonunion_5789_160.bit0);
  #line 234 
  _dev_info(dev,(char *)"port_shaping_pass: 0x%x\n",(int)bitmap->__anonCompField_hclge_dbg_bitmap_cmd_161.__anonCompField___anonunion_5789_160.bit1);
  #line 236 
  ret = hclge_dbg_cmd_send(hdev,(struct hclge_desc *)(& desc),nq_id,1,(enum hclge_opcode_type)HCLGE_OPC_SCH_NQ_CNT);
  #line 237 
  if (ret != 0) 
                #line 238 
                return;
  #line 240 
  _dev_info(dev,(char *)"sch_nq_cnt: 0x%x\n",desc[0].data[1]);
  #line 242 
  ret = hclge_dbg_cmd_send(hdev,(struct hclge_desc *)(& desc),nq_id,1,(enum hclge_opcode_type)HCLGE_OPC_SCH_RQ_CNT);
  #line 243 
  if (ret != 0) 
                #line 244 
                return;
  #line 246 
  _dev_info(dev,(char *)"sch_rq_cnt: 0x%x\n",desc[0].data[1]);
  #line 248 
  ret = hclge_dbg_cmd_send(hdev,(struct hclge_desc *)(& desc),0,2,(enum hclge_opcode_type)HCLGE_OPC_TM_INTERNAL_STS);
  #line 249 
  if (ret != 0) 
                #line 250 
                return;
  #line 252 
  _dev_info(dev,(char *)"pri_bp: 0x%x\n",desc[0].data[1]);
  #line 253 
  _dev_info(dev,(char *)"fifo_dfx_info: 0x%x\n",desc[0].data[2]);
  #line 254 
  _dev_info(dev,(char *)"sch_roce_fifo_afull_gap: 0x%x\n",desc[0].data[3]);
  #line 256 
  _dev_info(dev,(char *)"tx_private_waterline: 0x%x\n",desc[0].data[4]);
  #line 258 
  _dev_info(dev,(char *)"tm_bypass_en: 0x%x\n",desc[0].data[5]);
  #line 259 
  _dev_info(dev,(char *)"SSU_TM_BYPASS_EN: 0x%x\n",desc[1].data[0]);
  #line 260 
  _dev_info(dev,(char *)"SSU_RESERVE_CFG: 0x%x\n",desc[1].data[1]);
  #line 262 
  ret = hclge_dbg_cmd_send(hdev,(struct hclge_desc *)(& desc),port_id,1,(enum hclge_opcode_type)HCLGE_OPC_TM_INTERNAL_CNT);
  #line 264 
  if (ret != 0) 
                #line 265 
                return;
  #line 267 
  _dev_info(dev,(char *)"SCH_NIC_NUM: 0x%x\n",desc[0].data[1]);
  #line 268 
  _dev_info(dev,(char *)"SCH_ROCE_NUM: 0x%x\n",desc[0].data[2]);
  #line 270 
  ret = hclge_dbg_cmd_send(hdev,(struct hclge_desc *)(& desc),port_id,1,(enum hclge_opcode_type)HCLGE_OPC_TM_INTERNAL_STS_1);
  #line 272 
  if (ret != 0) 
                #line 273 
                return;
  #line 275 
  _dev_info(dev,(char *)"TC_MAP_SEL: 0x%x\n",desc[0].data[1]);
  #line 276 
  _dev_info(dev,(char *)"IGU_PFC_PRI_EN: 0x%x\n",desc[0].data[2]);
  #line 277 
  _dev_info(dev,(char *)"MAC_PFC_PRI_EN: 0x%x\n",desc[0].data[3]);
  #line 278 
  _dev_info(dev,(char *)"IGU_PRI_MAP_TC_CFG: 0x%x\n",desc[0].data[4]);
  #line 280 
  _dev_info(dev,(char *)"IGU_TX_PRI_MAP_TC_CFG: 0x%x\n",desc[0].data[5]);
  #line 281 
  return;
}

#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_dump_reg_cmd(struct hclge_dev *hdev, char *cmd_buf)
{
  #line 286 
  struct hclge_dbg_reg_type_info *reg_info;
  #line 288 
  int i;
  #line 287 
  bool has_dump = (_Bool)0;
  #line 290 
  i = 0;
  #line 290 
  while ((unsigned int)i <= 11U) {
    {
      #line 291 
      reg_info = & hclge_dbg_reg_info[i];
      #line 292 
      ;
      #line 292 
      ;
      #line 292 
      if (cif_strncmp(cmd_buf,reg_info->reg_type,
                    cif_strlen(reg_info->reg_type)) == 0) {
        #line 294 
        hclge_dbg_dump_reg_common(hdev,reg_info,cmd_buf);
        #line 295 
        has_dump = (_Bool)1;
      }
    }
    #line 290 
    i ++;
  }
  #line 299 
  if (cif_strncmp(cmd_buf,(char *)"dcb",3UL) == 0) {
    #line 300 
    hclge_dbg_dump_dcb(hdev,cmd_buf + 4UL);
    #line 301 
    has_dump = (_Bool)1;
  }
  #line 304 
  if (! has_dump) {
    #line 305 
    _dev_info(& (hdev->pdev)->dev,(char *)"unknown command\n");
    #line 306 
    return;
  }
  #line 308 
  return;
}

#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_title_idx_print(struct hclge_dev *hdev, bool flag, int index, char *title_buf, char *true_buf, char *false_buf)
{
  #line 314 
  if ((int)flag != 0) 
                      #line 315 
                      _dev_info(& (hdev->pdev)->dev,(char *)"%s(%d): %s\n",title_buf,index,true_buf); else 
                                                                    #line 318 
                                                                    _dev_info(& (hdev->pdev)->dev,(char *)"%s(%d): %s\n",title_buf,index,false_buf);
  #line 319 
  return;
}

#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_dump_tc(struct hclge_dev *hdev)
{
  #line 324 
  struct hclge_ets_tc_weight_cmd *ets_weight;
  #line 325 
  struct hclge_desc desc;
  #line 326 
  int i;
  #line 326 
  int ret;
  #line 328 
  if (((hdev->ae_dev)->flag & 4U) == 0U) {
    #line 329 
    _dev_info(& (hdev->pdev)->dev,(char *)"Only DCB-supported dev supports tc\n");
    #line 331 
    return;
  }
  #line 334 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_ETS_TC_WEIGHT,(_Bool)1);
  #line 336 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 337 
  if (ret != 0) {
    #line 338 
    _dev_err(& (hdev->pdev)->dev,(char *)"dump tc fail, ret = %d\n",ret);
    #line 339 
    return;
  }
  #line 342 
  ets_weight = (struct hclge_ets_tc_weight_cmd *)(& desc.data);
  #line 344 
  _dev_info(& (hdev->pdev)->dev,(char *)"dump tc\n");
  #line 345 
  _dev_info(& (hdev->pdev)->dev,(char *)"weight_offset: %u\n",(int)ets_weight->weight_offset);
  #line 348 
  i = 0;
  #line 348 
  while (i <= 7) {
    #line 349 
    hclge_title_idx_print(hdev,(_Bool)((unsigned int)ets_weight->tc_weight[i] != 0U),i,(char *)"tc",(char *)"no sp mode",(char *)"sp mode");
    #line 348 
    i ++;
  }
  #line 351 
  return;
}

#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_dump_tm_pg(struct hclge_dev *hdev)
{
  #line 355 
  struct hclge_port_shapping_cmd *port_shap_cfg_cmd;
  #line 356 
  struct hclge_bp_to_qs_map_cmd *bp_to_qs_map_cmd;
  #line 357 
  struct hclge_pg_shapping_cmd *pg_shap_cfg_cmd;
  #line 358 
  enum hclge_opcode_type cmd;
  #line 359 
  struct hclge_desc desc;
  #line 360 
  int ret;
  #line 362 
  cmd = HCLGE_OPC_TM_PG_C_SHAPPING;
  #line 363 
  hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
  #line 364 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 365 
  if (ret != 0) 
                #line 366 
                goto err_tm_pg_cmd_send;
  #line 368 
  pg_shap_cfg_cmd = (struct hclge_pg_shapping_cmd *)(& desc.data);
  #line 369 
  _dev_info(& (hdev->pdev)->dev,(char *)"PG_C pg_id: %u\n",(int)pg_shap_cfg_cmd->pg_id);
  #line 370 
  _dev_info(& (hdev->pdev)->dev,(char *)"PG_C pg_shapping: 0x%x\n",pg_shap_cfg_cmd->pg_shapping_para);
  #line 373 
  cmd = HCLGE_OPC_TM_PG_P_SHAPPING;
  #line 374 
  hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
  #line 375 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 376 
  if (ret != 0) 
                #line 377 
                goto err_tm_pg_cmd_send;
  #line 379 
  pg_shap_cfg_cmd = (struct hclge_pg_shapping_cmd *)(& desc.data);
  #line 380 
  _dev_info(& (hdev->pdev)->dev,(char *)"PG_P pg_id: %u\n",(int)pg_shap_cfg_cmd->pg_id);
  #line 381 
  _dev_info(& (hdev->pdev)->dev,(char *)"PG_P pg_shapping: 0x%x\n",pg_shap_cfg_cmd->pg_shapping_para);
  #line 384 
  cmd = HCLGE_OPC_TM_PORT_SHAPPING;
  #line 385 
  hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
  #line 386 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 387 
  if (ret != 0) 
                #line 388 
                goto err_tm_pg_cmd_send;
  #line 390 
  port_shap_cfg_cmd = (struct hclge_port_shapping_cmd *)(& desc.data);
  #line 391 
  _dev_info(& (hdev->pdev)->dev,(char *)"PORT port_shapping: 0x%x\n",port_shap_cfg_cmd->port_shapping_para);
  #line 394 
  cmd = HCLGE_OPC_TM_PG_SCH_MODE_CFG;
  #line 395 
  hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
  #line 396 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 397 
  if (ret != 0) 
                #line 398 
                goto err_tm_pg_cmd_send;
  #line 400 
  _dev_info(& (hdev->pdev)->dev,(char *)"PG_SCH pg_id: %u\n",desc.data[0]);
  #line 403 
  cmd = HCLGE_OPC_TM_PRI_SCH_MODE_CFG;
  #line 404 
  hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
  #line 405 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 406 
  if (ret != 0) 
                #line 407 
                goto err_tm_pg_cmd_send;
  #line 409 
  _dev_info(& (hdev->pdev)->dev,(char *)"PRI_SCH pri_id: %u\n",desc.data[0]);
  #line 412 
  cmd = HCLGE_OPC_TM_QS_SCH_MODE_CFG;
  #line 413 
  hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
  #line 414 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 415 
  if (ret != 0) 
                #line 416 
                goto err_tm_pg_cmd_send;
  #line 418 
  _dev_info(& (hdev->pdev)->dev,(char *)"QS_SCH qs_id: %u\n",desc.data[0]);
  #line 421 
  if (((hdev->ae_dev)->flag & 4U) == 0U) {
    #line 422 
    _dev_info(& (hdev->pdev)->dev,(char *)"Only DCB-supported dev supports tm mapping\n");
    #line 424 
    return;
  }
  #line 427 
  cmd = HCLGE_OPC_TM_BP_TO_QSET_MAPPING;
  #line 428 
  hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
  #line 429 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 430 
  if (ret != 0) 
                #line 431 
                goto err_tm_pg_cmd_send;
  #line 433 
  bp_to_qs_map_cmd = (struct hclge_bp_to_qs_map_cmd *)(& desc.data);
  #line 434 
  _dev_info(& (hdev->pdev)->dev,(char *)"BP_TO_QSET tc_id: %u\n",(int)bp_to_qs_map_cmd->tc_id);
  #line 436 
  _dev_info(& (hdev->pdev)->dev,(char *)"BP_TO_QSET qs_group_id: 0x%x\n",(int)bp_to_qs_map_cmd->qs_group_id);
  #line 438 
  _dev_info(& (hdev->pdev)->dev,(char *)"BP_TO_QSET qs_bit_map: 0x%x\n",bp_to_qs_map_cmd->qs_bit_map);
  #line 440 
  return;
  #line 442 
  err_tm_pg_cmd_send: 
                      #line 442 
  ;
  #line 443 
  _dev_err(& (hdev->pdev)->dev,(char *)"dump tm_pg fail(0x%x), ret = %d\n",(unsigned int)cmd,ret);
  #line 444 
  return;
}

#line 447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_dump_tm(struct hclge_dev *hdev)
{
  #line 449 
  struct hclge_priority_weight_cmd *priority_weight;
  #line 450 
  struct hclge_pg_to_pri_link_cmd *pg_to_pri_map;
  #line 451 
  struct hclge_qs_to_pri_link_cmd *qs_to_pri_map;
  #line 452 
  struct hclge_nq_to_qs_link_cmd *nq_to_qs_map;
  #line 453 
  struct hclge_pri_shapping_cmd *shap_cfg_cmd;
  #line 454 
  struct hclge_pg_weight_cmd *pg_weight;
  #line 455 
  struct hclge_qs_weight_cmd *qs_weight;
  #line 456 
  enum hclge_opcode_type cmd;
  #line 457 
  struct hclge_desc desc;
  #line 458 
  int ret;
  #line 460 
  cmd = HCLGE_OPC_TM_PG_TO_PRI_LINK;
  #line 461 
  hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
  #line 462 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 463 
  if (ret != 0) 
                #line 464 
                goto err_tm_cmd_send;
  #line 466 
  pg_to_pri_map = (struct hclge_pg_to_pri_link_cmd *)(& desc.data);
  #line 467 
  _dev_info(& (hdev->pdev)->dev,(char *)"dump tm\n");
  #line 468 
  _dev_info(& (hdev->pdev)->dev,(char *)"PG_TO_PRI gp_id: %u\n",(int)pg_to_pri_map->pg_id);
  #line 470 
  _dev_info(& (hdev->pdev)->dev,(char *)"PG_TO_PRI map: 0x%x\n",(int)pg_to_pri_map->pri_bit_map);
  #line 473 
  cmd = HCLGE_OPC_TM_QS_TO_PRI_LINK;
  #line 474 
  hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
  #line 475 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 476 
  if (ret != 0) 
                #line 477 
                goto err_tm_cmd_send;
  #line 479 
  qs_to_pri_map = (struct hclge_qs_to_pri_link_cmd *)(& desc.data);
  #line 480 
  _dev_info(& (hdev->pdev)->dev,(char *)"QS_TO_PRI qs_id: %u\n",(int)qs_to_pri_map->qs_id);
  #line 482 
  _dev_info(& (hdev->pdev)->dev,(char *)"QS_TO_PRI priority: %u\n",(int)qs_to_pri_map->priority);
  #line 484 
  _dev_info(& (hdev->pdev)->dev,(char *)"QS_TO_PRI link_vld: %u\n",(int)qs_to_pri_map->link_vld);
  #line 487 
  cmd = HCLGE_OPC_TM_NQ_TO_QS_LINK;
  #line 488 
  hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
  #line 489 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 490 
  if (ret != 0) 
                #line 491 
                goto err_tm_cmd_send;
  #line 493 
  nq_to_qs_map = (struct hclge_nq_to_qs_link_cmd *)(& desc.data);
  #line 494 
  _dev_info(& (hdev->pdev)->dev,(char *)"NQ_TO_QS nq_id: %u\n",(int)nq_to_qs_map->nq_id);
  #line 496 
  _dev_info(& (hdev->pdev)->dev,(char *)"NQ_TO_QS qset_id: 0x%x\n",(int)nq_to_qs_map->qset_id);
  #line 499 
  cmd = HCLGE_OPC_TM_PG_WEIGHT;
  #line 500 
  hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
  #line 501 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 502 
  if (ret != 0) 
                #line 503 
                goto err_tm_cmd_send;
  #line 505 
  pg_weight = (struct hclge_pg_weight_cmd *)(& desc.data);
  #line 506 
  _dev_info(& (hdev->pdev)->dev,(char *)"PG pg_id: %u\n",(int)pg_weight->pg_id);
  #line 507 
  _dev_info(& (hdev->pdev)->dev,(char *)"PG dwrr: %u\n",(int)pg_weight->dwrr);
  #line 509 
  cmd = HCLGE_OPC_TM_QS_WEIGHT;
  #line 510 
  hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
  #line 511 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 512 
  if (ret != 0) 
                #line 513 
                goto err_tm_cmd_send;
  #line 515 
  qs_weight = (struct hclge_qs_weight_cmd *)(& desc.data);
  #line 516 
  _dev_info(& (hdev->pdev)->dev,(char *)"QS qs_id: %u\n",(int)qs_weight->qs_id);
  #line 518 
  _dev_info(& (hdev->pdev)->dev,(char *)"QS dwrr: %u\n",(int)qs_weight->dwrr);
  #line 520 
  cmd = HCLGE_OPC_TM_PRI_WEIGHT;
  #line 521 
  hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
  #line 522 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 523 
  if (ret != 0) 
                #line 524 
                goto err_tm_cmd_send;
  #line 526 
  priority_weight = (struct hclge_priority_weight_cmd *)(& desc.data);
  #line 527 
  _dev_info(& (hdev->pdev)->dev,(char *)"PRI pri_id: %u\n",(int)priority_weight->pri_id);
  #line 528 
  _dev_info(& (hdev->pdev)->dev,(char *)"PRI dwrr: %u\n",(int)priority_weight->dwrr);
  #line 530 
  cmd = HCLGE_OPC_TM_PRI_C_SHAPPING;
  #line 531 
  hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
  #line 532 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 533 
  if (ret != 0) 
                #line 534 
                goto err_tm_cmd_send;
  #line 536 
  shap_cfg_cmd = (struct hclge_pri_shapping_cmd *)(& desc.data);
  #line 537 
  _dev_info(& (hdev->pdev)->dev,(char *)"PRI_C pri_id: %u\n",(int)shap_cfg_cmd->pri_id);
  #line 538 
  _dev_info(& (hdev->pdev)->dev,(char *)"PRI_C pri_shapping: 0x%x\n",shap_cfg_cmd->pri_shapping_para);
  #line 541 
  cmd = HCLGE_OPC_TM_PRI_P_SHAPPING;
  #line 542 
  hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
  #line 543 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 544 
  if (ret != 0) 
                #line 545 
                goto err_tm_cmd_send;
  #line 547 
  shap_cfg_cmd = (struct hclge_pri_shapping_cmd *)(& desc.data);
  #line 548 
  _dev_info(& (hdev->pdev)->dev,(char *)"PRI_P pri_id: %u\n",(int)shap_cfg_cmd->pri_id);
  #line 549 
  _dev_info(& (hdev->pdev)->dev,(char *)"PRI_P pri_shapping: 0x%x\n",shap_cfg_cmd->pri_shapping_para);
  #line 552 
  hclge_dbg_dump_tm_pg(hdev);
  #line 554 
  return;
  #line 556 
  err_tm_cmd_send: 
                   #line 556 
  ;
  #line 557 
  _dev_err(& (hdev->pdev)->dev,(char *)"dump tm fail(0x%x), ret = %d\n",(unsigned int)cmd,ret);
  #line 558 
  return;
}

#line 561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_dump_tm_map(struct hclge_dev *hdev, char *cmd_buf)
{
  #line 564 
  struct hclge_bp_to_qs_map_cmd *bp_to_qs_map_cmd;
  #line 565 
  struct hclge_nq_to_qs_link_cmd *nq_to_qs_map;
  #line 566 
  struct hclge_qs_to_pri_link_cmd *map;
  #line 567 
  struct hclge_tqp_tx_queue_tc_cmd *tc;
  #line 568 
  enum hclge_opcode_type cmd;
  #line 569 
  struct hclge_desc desc;
  #line 570 
  int queue_id;
  #line 570 
  int group_id;
  #line 571 
  u32 qset_maping[32U];
  #line 572 
  int tc_id;
  #line 572 
  int qset_id;
  #line 573 
  int pri_id;
  #line 573 
  int ret;
  #line 574 
  u32 i;
  #line 576 
  ret = kstrtouint(cmd_buf,0U,(unsigned int *)(& queue_id));
  #line 577 
  if (ret == 0) 
                #line 577 
                queue_id = queue_id; else 
                                          #line 577 
                                          queue_id = 0;
  #line 579 
  cmd = HCLGE_OPC_TM_NQ_TO_QS_LINK;
  #line 580 
  nq_to_qs_map = (struct hclge_nq_to_qs_link_cmd *)(& desc.data);
  #line 581 
  hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
  #line 582 
  nq_to_qs_map->nq_id = (unsigned short)queue_id;
  #line 583 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 584 
  if (ret != 0) 
                #line 585 
                goto err_tm_map_cmd_send;
  #line 586 
  qset_id = (int)nq_to_qs_map->qset_id & 1023;
  #line 588 
  cmd = HCLGE_OPC_TM_QS_TO_PRI_LINK;
  #line 589 
  map = (struct hclge_qs_to_pri_link_cmd *)(& desc.data);
  #line 590 
  hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
  #line 591 
  map->qs_id = (unsigned short)qset_id;
  #line 592 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 593 
  if (ret != 0) 
                #line 594 
                goto err_tm_map_cmd_send;
  #line 595 
  pri_id = (int)map->priority;
  #line 597 
  cmd = HCLGE_OPC_TQP_TX_QUEUE_TC;
  #line 598 
  tc = (struct hclge_tqp_tx_queue_tc_cmd *)(& desc.data);
  #line 599 
  hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
  #line 600 
  tc->queue_id = (unsigned short)queue_id;
  #line 601 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 602 
  if (ret != 0) 
                #line 603 
                goto err_tm_map_cmd_send;
  #line 604 
  tc_id = (int)tc->tc_id & 7;
  #line 606 
  _dev_info(& (hdev->pdev)->dev,(char *)"queue_id | qset_id | pri_id | tc_id\n");
  #line 607 
  _dev_info(& (hdev->pdev)->dev,(char *)"%04d     | %04d    | %02d     | %02d\n",queue_id,qset_id,pri_id,tc_id);
  #line 610 
  if (((hdev->ae_dev)->flag & 4U) == 0U) {
    #line 611 
    _dev_info(& (hdev->pdev)->dev,(char *)"Only DCB-supported dev supports tm mapping\n");
    #line 613 
    return;
  }
  #line 616 
  cmd = HCLGE_OPC_TM_BP_TO_QSET_MAPPING;
  #line 617 
  bp_to_qs_map_cmd = (struct hclge_bp_to_qs_map_cmd *)(& desc.data);
  #line 618 
  group_id = 0;
  #line 618 
  while (group_id <= 31) {
    #line 619 
    hclge_cmd_setup_basic_desc(& desc,cmd,(_Bool)1);
    #line 620 
    bp_to_qs_map_cmd->tc_id = (unsigned char)tc_id;
    #line 621 
    bp_to_qs_map_cmd->qs_group_id = (unsigned char)group_id;
    #line 622 
    ret = hclge_cmd_send(& hdev->hw,& desc,1);
    #line 623 
    if (ret != 0) 
                  #line 624 
                  goto err_tm_map_cmd_send;
    #line 626 
    qset_maping[group_id] = bp_to_qs_map_cmd->qs_bit_map;
    #line 618 
    group_id ++;
  }
  #line 629 
  _dev_info(& (hdev->pdev)->dev,(char *)"index | tm bp qset maping:\n");
  #line 631 
  i = 0U;
  #line 632 
  group_id = 0;
  #line 632 
  while (group_id <= 3) {
    #line 633 
    _dev_info(& (hdev->pdev)->dev,(char *)"%04d  | %08x:%08x:%08x:%08x:%08x:%08x:%08x:%08x\n",group_id * 256,qset_maping[i + 7U],qset_maping[i + 6U],qset_maping[i + 5U],qset_maping[i + 4U],qset_maping[i + 3U],qset_maping[i + 2U],qset_maping[i + 1U],qset_maping[i]);
    #line 640 
    i += 8U;
    #line 632 
    group_id ++;
  }
  #line 643 
  return;
  #line 645 
  err_tm_map_cmd_send: 
                       #line 645 
  ;
  #line 646 
  _dev_err(& (hdev->pdev)->dev,(char *)"dump tqp map fail(0x%x), ret = %d\n",(unsigned int)cmd,ret);
  #line 647 
  return;
}

#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_dump_qos_pause_cfg(struct hclge_dev *hdev)
{
  #line 652 
  struct hclge_cfg_pause_param_cmd *pause_param;
  #line 653 
  struct hclge_desc desc;
  #line 654 
  int ret;
  #line 656 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_CFG_MAC_PARA,(_Bool)1);
  #line 658 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 659 
  if (ret != 0) {
    #line 660 
    _dev_err(& (hdev->pdev)->dev,(char *)"dump checksum fail, ret = %d\n",ret);
    #line 662 
    return;
  }
  #line 665 
  pause_param = (struct hclge_cfg_pause_param_cmd *)(& desc.data);
  #line 666 
  _dev_info(& (hdev->pdev)->dev,(char *)"dump qos pause cfg\n");
  #line 667 
  _dev_info(& (hdev->pdev)->dev,(char *)"pause_trans_gap: 0x%x\n",(int)pause_param->pause_trans_gap);
  #line 669 
  _dev_info(& (hdev->pdev)->dev,(char *)"pause_trans_time: 0x%x\n",(int)pause_param->pause_trans_time);
  #line 670 
  return;
}

#line 673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_dump_qos_pri_map(struct hclge_dev *hdev)
{
  #line 675 
  struct hclge_qos_pri_map_cmd *pri_map;
  #line 676 
  struct hclge_desc desc;
  #line 677 
  int ret;
  #line 679 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_PRI_TO_TC_MAPPING,(_Bool)1);
  #line 681 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 682 
  if (ret != 0) {
    #line 683 
    _dev_err(& (hdev->pdev)->dev,(char *)"dump qos pri map fail, ret = %d\n",ret);
    #line 685 
    return;
  }
  #line 688 
  pri_map = (struct hclge_qos_pri_map_cmd *)(& desc.data);
  #line 689 
  _dev_info(& (hdev->pdev)->dev,(char *)"dump qos pri map\n");
  #line 690 
  _dev_info(& (hdev->pdev)->dev,(char *)"vlan_to_pri: 0x%x\n",(int)pri_map->vlan_pri);
  #line 691 
  _dev_info(& (hdev->pdev)->dev,(char *)"pri_0_to_tc: 0x%x\n",(int)pri_map->pri0_tc);
  #line 692 
  _dev_info(& (hdev->pdev)->dev,(char *)"pri_1_to_tc: 0x%x\n",(int)pri_map->pri1_tc);
  #line 693 
  _dev_info(& (hdev->pdev)->dev,(char *)"pri_2_to_tc: 0x%x\n",(int)pri_map->pri2_tc);
  #line 694 
  _dev_info(& (hdev->pdev)->dev,(char *)"pri_3_to_tc: 0x%x\n",(int)pri_map->pri3_tc);
  #line 695 
  _dev_info(& (hdev->pdev)->dev,(char *)"pri_4_to_tc: 0x%x\n",(int)pri_map->pri4_tc);
  #line 696 
  _dev_info(& (hdev->pdev)->dev,(char *)"pri_5_to_tc: 0x%x\n",(int)pri_map->pri5_tc);
  #line 697 
  _dev_info(& (hdev->pdev)->dev,(char *)"pri_6_to_tc: 0x%x\n",(int)pri_map->pri6_tc);
  #line 698 
  _dev_info(& (hdev->pdev)->dev,(char *)"pri_7_to_tc: 0x%x\n",(int)pri_map->pri7_tc);
  #line 699 
  return;
}

#line 701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_dump_qos_buf_cfg(struct hclge_dev *hdev)
{
  #line 703 
  struct hclge_tx_buff_alloc_cmd *tx_buf_cmd;
  #line 704 
  struct hclge_rx_priv_buff_cmd *rx_buf_cmd;
  #line 705 
  struct hclge_rx_priv_wl_buf *rx_priv_wl;
  #line 706 
  struct hclge_rx_com_wl *rx_packet_cnt;
  #line 707 
  struct hclge_rx_com_thrd *rx_com_thrd;
  #line 708 
  struct hclge_rx_com_wl *rx_com_wl;
  #line 709 
  enum hclge_opcode_type cmd;
  #line 710 
  struct hclge_desc desc[2U];
  #line 711 
  int i;
  #line 711 
  int ret;
  #line 713 
  cmd = HCLGE_OPC_TX_BUFF_ALLOC;
  #line 714 
  hclge_cmd_setup_basic_desc((struct hclge_desc *)(& desc),cmd,(_Bool)1);
  #line 715 
  ret = hclge_cmd_send(& hdev->hw,(struct hclge_desc *)(& desc),1);
  #line 716 
  if (ret != 0) 
                #line 717 
                goto err_qos_cmd_send;
  #line 719 
  _dev_info(& (hdev->pdev)->dev,(char *)"dump qos buf cfg\n");
  #line 721 
  tx_buf_cmd = (struct hclge_tx_buff_alloc_cmd *)(& desc[0].data);
  #line 722 
  i = 0;
  #line 722 
  while (i <= 7) {
    #line 723 
    _dev_info(& (hdev->pdev)->dev,(char *)"tx_packet_buf_tc_%d: 0x%x\n",i,(int)tx_buf_cmd->tx_pkt_buff[i]);
    #line 722 
    i ++;
  }
  #line 726 
  cmd = HCLGE_OPC_RX_PRIV_BUFF_ALLOC;
  #line 727 
  hclge_cmd_setup_basic_desc((struct hclge_desc *)(& desc),cmd,(_Bool)1);
  #line 728 
  ret = hclge_cmd_send(& hdev->hw,(struct hclge_desc *)(& desc),1);
  #line 729 
  if (ret != 0) 
                #line 730 
                goto err_qos_cmd_send;
  #line 732 
  _dev_info(& (hdev->pdev)->dev,(char *)"\n");
  #line 733 
  rx_buf_cmd = (struct hclge_rx_priv_buff_cmd *)(& desc[0].data);
  #line 734 
  i = 0;
  #line 734 
  while (i <= 7) {
    #line 735 
    _dev_info(& (hdev->pdev)->dev,(char *)"rx_packet_buf_tc_%d: 0x%x\n",i,(int)rx_buf_cmd->buf_num[i]);
    #line 734 
    i ++;
  }
  #line 738 
  _dev_info(& (hdev->pdev)->dev,(char *)"rx_share_buf: 0x%x\n",(int)rx_buf_cmd->shared_buf);
  #line 741 
  cmd = HCLGE_OPC_RX_COM_WL_ALLOC;
  #line 742 
  hclge_cmd_setup_basic_desc((struct hclge_desc *)(& desc),cmd,(_Bool)1);
  #line 743 
  ret = hclge_cmd_send(& hdev->hw,(struct hclge_desc *)(& desc),1);
  #line 744 
  if (ret != 0) 
                #line 745 
                goto err_qos_cmd_send;
  #line 747 
  rx_com_wl = (struct hclge_rx_com_wl *)(& desc[0].data);
  #line 748 
  _dev_info(& (hdev->pdev)->dev,(char *)"\n");
  #line 749 
  _dev_info(& (hdev->pdev)->dev,(char *)"rx_com_wl: high: 0x%x, low: 0x%x\n",(int)rx_com_wl->com_wl.high,(int)rx_com_wl->com_wl.low);
  #line 753 
  cmd = HCLGE_OPC_RX_GBL_PKT_CNT;
  #line 754 
  hclge_cmd_setup_basic_desc((struct hclge_desc *)(& desc),cmd,(_Bool)1);
  #line 755 
  ret = hclge_cmd_send(& hdev->hw,(struct hclge_desc *)(& desc),1);
  #line 756 
  if (ret != 0) 
                #line 757 
                goto err_qos_cmd_send;
  #line 759 
  rx_packet_cnt = (struct hclge_rx_com_wl *)(& desc[0].data);
  #line 760 
  _dev_info(& (hdev->pdev)->dev,(char *)"rx_global_packet_cnt: high: 0x%x, low: 0x%x\n",(int)rx_packet_cnt->com_wl.high,(int)rx_packet_cnt->com_wl.low);
  #line 764 
  _dev_info(& (hdev->pdev)->dev,(char *)"\n");
  #line 766 
  if (((hdev->ae_dev)->flag & 4U) == 0U) {
    #line 767 
    _dev_info(& (hdev->pdev)->dev,(char *)"Only DCB-supported dev supports rx priv wl\n");
    #line 769 
    return;
  }
  #line 771 
  cmd = HCLGE_OPC_RX_PRIV_WL_ALLOC;
  #line 772 
  hclge_cmd_setup_basic_desc(desc,cmd,(_Bool)1);
  #line 773 
  desc[0].flag = (unsigned short)((unsigned int)desc[0].flag | 4U);
  #line 774 
  hclge_cmd_setup_basic_desc(& desc[1],cmd,(_Bool)1);
  #line 775 
  ret = hclge_cmd_send(& hdev->hw,(struct hclge_desc *)(& desc),2);
  #line 776 
  if (ret != 0) 
                #line 777 
                goto err_qos_cmd_send;
  #line 779 
  rx_priv_wl = (struct hclge_rx_priv_wl_buf *)(& desc[0].data);
  #line 780 
  i = 0;
  #line 780 
  while (i <= 3) {
    #line 781 
    _dev_info(& (hdev->pdev)->dev,(char *)"rx_priv_wl_tc_%d: high: 0x%x, low: 0x%x\n",i,(int)rx_priv_wl->tc_wl[i].high,(int)rx_priv_wl->tc_wl[i].low);
    #line 780 
    i ++;
  }
  #line 786 
  rx_priv_wl = (struct hclge_rx_priv_wl_buf *)(& desc[1].data);
  #line 787 
  i = 0;
  #line 787 
  while (i <= 3) {
    #line 788 
    _dev_info(& (hdev->pdev)->dev,(char *)"rx_priv_wl_tc_%d: high: 0x%x, low: 0x%x\n",i + 4,(int)rx_priv_wl->tc_wl[i].high,(int)rx_priv_wl->tc_wl[i].low);
    #line 787 
    i ++;
  }
  #line 794 
  cmd = HCLGE_OPC_RX_COM_THRD_ALLOC;
  #line 795 
  hclge_cmd_setup_basic_desc(desc,cmd,(_Bool)1);
  #line 796 
  desc[0].flag = (unsigned short)((unsigned int)desc[0].flag | 4U);
  #line 797 
  hclge_cmd_setup_basic_desc(& desc[1],cmd,(_Bool)1);
  #line 798 
  ret = hclge_cmd_send(& hdev->hw,(struct hclge_desc *)(& desc),2);
  #line 799 
  if (ret != 0) 
                #line 800 
                goto err_qos_cmd_send;
  #line 802 
  _dev_info(& (hdev->pdev)->dev,(char *)"\n");
  #line 803 
  rx_com_thrd = (struct hclge_rx_com_thrd *)(& desc[0].data);
  #line 804 
  i = 0;
  #line 804 
  while (i <= 3) {
    #line 805 
    _dev_info(& (hdev->pdev)->dev,(char *)"rx_com_thrd_tc_%d: high: 0x%x, low: 0x%x\n",i,(int)rx_com_thrd->com_thrd[i].high,(int)rx_com_thrd->com_thrd[i].low);
    #line 804 
    i ++;
  }
  #line 810 
  rx_com_thrd = (struct hclge_rx_com_thrd *)(& desc[1].data);
  #line 811 
  i = 0;
  #line 811 
  while (i <= 3) {
    #line 812 
    _dev_info(& (hdev->pdev)->dev,(char *)"rx_com_thrd_tc_%d: high: 0x%x, low: 0x%x\n",i + 4,(int)rx_com_thrd->com_thrd[i].high,(int)rx_com_thrd->com_thrd[i].low);
    #line 811 
    i ++;
  }
  #line 817 
  return;
  #line 819 
  err_qos_cmd_send: 
                    #line 819 
  ;
  #line 820 
  _dev_err(& (hdev->pdev)->dev,(char *)"dump qos buf cfg fail(0x%x), ret = %d\n",(unsigned int)cmd,ret);
  #line 821 
  return;
}

#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_dump_mng_table(struct hclge_dev *hdev)
{
  #line 826 
  struct hclge_mac_ethertype_idx_rd_cmd *req0;
  #line 827 
  char printf_buf[256U];
  #line 828 
  struct hclge_desc desc;
  #line 829 
  int ret;
  #line 829 
  int i;
  #line 831 
  _dev_info(& (hdev->pdev)->dev,(char *)"mng tab:\n");
  #line 832 
  memset((void *)(& printf_buf),0,256UL);
  #line 833 
  strncat((char *)(& printf_buf),(char *)"entry|mac_addr         |mask|ether|mask|vlan|mask",255UL);
  #line 836 
  strncat((char *)(& printf_buf) + cif_strlen((char *)(& printf_buf)),(char *)"|i_map|i_dir|e_type|pf_id|vf_id|q_id|drop\n",255UL - cif_strlen((char *)(& printf_buf)));
  #line 840 
  _dev_info(& (hdev->pdev)->dev,(char *)"%s",(char *)(& printf_buf));
  #line 842 
  i = 0;
  #line 842 
  while (i <= 63) {
    {
      #line 843 
      hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_MAC_ETHERTYPE_IDX_RD,(_Bool)1);
      #line 845 
      req0 = (struct hclge_mac_ethertype_idx_rd_cmd *)(& desc.data);
      #line 846 
      req0->index = (unsigned short)i;
      #line 848 
      ret = hclge_cmd_send(& hdev->hw,& desc,1);
      #line 849 
      if (ret != 0) {
        #line 850 
        _dev_err(& (hdev->pdev)->dev,(char *)"call hclge_cmd_send fail, ret = %d\n",ret);
        #line 852 
        return;
      }
      #line 855 
      if ((unsigned int)req0->resp_code == 0U) 
                                               #line 856 
                                               goto __Cont;
      #line 858 
      memset((void *)(& printf_buf),0,256UL);
      #line 859 
      snprintf((char *)(& printf_buf),256UL,(char *)"%02u   |%02x:%02x:%02x:%02x:%02x:%02x|",(int)req0->index,(int)req0->mac_addr[0],(int)req0->mac_addr[1],(int)req0->mac_addr[2],(int)req0->mac_addr[3],(int)req0->mac_addr[4],(int)req0->mac_addr[5]);
      #line 866 
      ;
      #line 866 
      ;
      #line 866 
      ;
      #line 866 
      ;
      #line 866 
      ;
      #line 866 
      ;
      #line 866 
      ;
      #line 866 
      snprintf((char *)(& printf_buf) + cif_strlen((char *)(& printf_buf)),256UL - cif_strlen((char *)(& printf_buf)),(char *)"%x   |%04x |%x   |%04x|%x   |%02x   |%02x   |",((unsigned long)req0->flags & 2UL) != 0UL,(int)req0->ethter_type,((unsigned long)req0->flags & 4UL) != 0UL,(int)req0->vlan_tag & 4095,((unsigned long)req0->flags & 1UL) != 0UL,(int)req0->i_port_bitmap,(int)req0->i_port_direction);
      #line 876 
      ;
      #line 876 
      ;
      #line 876 
      ;
      #line 876 
      ;
      #line 876 
      ;
      #line 876 
      snprintf((char *)(& printf_buf) + cif_strlen((char *)(& printf_buf)),256UL - cif_strlen((char *)(& printf_buf)),(char *)"%d     |%d    |%02d   |%04d|%x\n",((unsigned long)req0->egress_port & 2048UL) != 0UL,(int)req0->egress_port & 7,((int)req0->egress_port >> 3) & 255,(int)req0->egress_queue,((unsigned long)req0->egress_port & 8192UL) != 0UL);
      #line 885 
      _dev_info(& (hdev->pdev)->dev,(char *)"%s",(char *)(& printf_buf));
    }
    #line 842 
    __Cont: 
            #line 842 
    i ++;
  }
  #line 887 
  return;
}

#line 889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_fd_tcam_read(struct hclge_dev *hdev, u8 stage, bool sel_x, u32 loc)
{
  #line 892 
  struct hclge_fd_tcam_config_1_cmd *req1;
  #line 893 
  struct hclge_fd_tcam_config_2_cmd *req2;
  #line 894 
  struct hclge_fd_tcam_config_3_cmd *req3;
  #line 895 
  struct hclge_desc desc[3U];
  #line 896 
  int ret;
  #line 896 
  int i;
  #line 897 
  u32 *req;
  #line 917 
  char *tmp;
  #line 899 
  hclge_cmd_setup_basic_desc(desc,(enum hclge_opcode_type)HCLGE_OPC_FD_TCAM_OP,(_Bool)1);
  #line 900 
  desc[0].flag = (unsigned short)((unsigned int)desc[0].flag | 4U);
  #line 901 
  hclge_cmd_setup_basic_desc(& desc[1],(enum hclge_opcode_type)HCLGE_OPC_FD_TCAM_OP,(_Bool)1);
  #line 902 
  desc[1].flag = (unsigned short)((unsigned int)desc[1].flag | 4U);
  #line 903 
  hclge_cmd_setup_basic_desc(& desc[2],(enum hclge_opcode_type)HCLGE_OPC_FD_TCAM_OP,(_Bool)1);
  #line 905 
  req1 = (struct hclge_fd_tcam_config_1_cmd *)(& desc[0].data);
  #line 906 
  req2 = (struct hclge_fd_tcam_config_2_cmd *)(& desc[1].data);
  #line 907 
  req3 = (struct hclge_fd_tcam_config_3_cmd *)(& desc[2].data);
  #line 909 
  req1->stage = stage;
  #line 910 
  req1->xy_sel = (unsigned char)((int)sel_x != 0);
  #line 911 
  req1->index = loc;
  #line 913 
  ret = hclge_cmd_send(& hdev->hw,(struct hclge_desc *)(& desc),3);
  #line 914 
  if (ret != 0) 
                #line 915 
                return;
  #line 917 
  ;
  #line 917 
  if ((int)sel_x != 0) 
                       #line 917 
                       tmp = (char *)"x"; else 
                                               #line 917 
                                               tmp = (char *)"y";
  #line 917 
  ;
  #line 917 
  _dev_info(& (hdev->pdev)->dev,(char *)" read result tcam key %s(%u):\n",tmp,loc);
  #line 921 
  req = (u32 *)(& req1->tcam_data);
  #line 922 
  i = 0;
  #line 922 
  while (i <= 1) {
    #line 923 
    u32 *tmp_0;
    #line 923 
    tmp_0 = req;
    #line 923 
    req ++;
    #line 923 
    ;
    #line 923 
    ;
    #line 923 
    _dev_info(& (hdev->pdev)->dev,(char *)"%08x\n",*tmp_0);
    #line 922 
    i ++;
  }
  #line 926 
  req = (u32 *)(& req2->tcam_data);
  #line 927 
  i = 0;
  #line 927 
  while (i <= 5) {
    #line 928 
    u32 *tmp_1;
    #line 928 
    tmp_1 = req;
    #line 928 
    req ++;
    #line 928 
    ;
    #line 928 
    ;
    #line 928 
    _dev_info(& (hdev->pdev)->dev,(char *)"%08x\n",*tmp_1);
    #line 927 
    i ++;
  }
  #line 931 
  req = (u32 *)(& req3->tcam_data);
  #line 932 
  i = 0;
  #line 932 
  while (i <= 4) {
    #line 933 
    u32 *tmp_2;
    #line 933 
    tmp_2 = req;
    #line 933 
    req ++;
    #line 933 
    ;
    #line 933 
    ;
    #line 933 
    _dev_info(& (hdev->pdev)->dev,(char *)"%08x\n",*tmp_2);
    #line 932 
    i ++;
  }
  #line 934 
  return;
}

#line 936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_fd_tcam(struct hclge_dev *hdev)
{
  #line 938 
  u32 i;
  #line 940 
  i = 0U;
  #line 940 
  while (hdev->fd_cfg.rule_num[0] > i) {
    #line 941 
    hclge_dbg_fd_tcam_read(hdev,(unsigned char)0,(_Bool)1,i);
    #line 942 
    hclge_dbg_fd_tcam_read(hdev,(unsigned char)0,(_Bool)0,i);
    #line 940 
    i ++;
  }
  #line 944 
  return;
}

#line 946  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
void hclge_dbg_dump_rst_info(struct hclge_dev *hdev)
{
  #line 948 
  _dev_info(& (hdev->pdev)->dev,(char *)"PF reset count: %u\n",hdev->rst_stats.pf_rst_cnt);
  #line 950 
  _dev_info(& (hdev->pdev)->dev,(char *)"FLR reset count: %u\n",hdev->rst_stats.flr_rst_cnt);
  #line 952 
  _dev_info(& (hdev->pdev)->dev,(char *)"GLOBAL reset count: %u\n",hdev->rst_stats.global_rst_cnt);
  #line 954 
  _dev_info(& (hdev->pdev)->dev,(char *)"IMP reset count: %u\n",hdev->rst_stats.imp_rst_cnt);
  #line 956 
  _dev_info(& (hdev->pdev)->dev,(char *)"reset done count: %u\n",hdev->rst_stats.reset_done_cnt);
  #line 958 
  _dev_info(& (hdev->pdev)->dev,(char *)"HW reset done count: %u\n",hdev->rst_stats.hw_reset_done_cnt);
  #line 960 
  _dev_info(& (hdev->pdev)->dev,(char *)"reset count: %u\n",hdev->rst_stats.reset_cnt);
  #line 962 
  _dev_info(& (hdev->pdev)->dev,(char *)"reset fail count: %u\n",hdev->rst_stats.reset_fail_cnt);
  #line 964 
  ;
  #line 964 
  _dev_info(& (hdev->pdev)->dev,(char *)"vector0 interrupt enable status: 0x%x\n",hclge_read_reg_3((u8 *)hdev->hw.io_base,132096U));
  #line 966 
  ;
  #line 966 
  _dev_info(& (hdev->pdev)->dev,(char *)"reset interrupt source: 0x%x\n",hclge_read_reg_3((u8 *)hdev->hw.io_base,132864U));
  #line 968 
  ;
  #line 968 
  _dev_info(& (hdev->pdev)->dev,(char *)"reset interrupt status: 0x%x\n",hclge_read_reg_3((u8 *)hdev->hw.io_base,133120U));
  #line 970 
  ;
  #line 970 
  _dev_info(& (hdev->pdev)->dev,(char *)"hardware reset status: 0x%x\n",hclge_read_reg_3((u8 *)hdev->hw.io_base,133632U));
  #line 972 
  ;
  #line 972 
  _dev_info(& (hdev->pdev)->dev,(char *)"handshake status: 0x%x\n",hclge_read_reg_3((u8 *)hdev->hw.io_base,159752U));
  #line 974 
  ;
  #line 974 
  _dev_info(& (hdev->pdev)->dev,(char *)"function reset status: 0x%x\n",hclge_read_reg_3((u8 *)hdev->hw.io_base,134144U));
  #line 976 
  _dev_info(& (hdev->pdev)->dev,(char *)"hdev state: 0x%lx\n",hdev->state);
  #line 977 
  return;
}

#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_get_m7_stats_info(struct hclge_dev *hdev)
{
  #line 981 
  struct hclge_desc *desc_src;
  #line 981 
  struct hclge_desc *desc_tmp;
  #line 982 
  struct hclge_get_m7_bd_cmd *req;
  #line 983 
  struct hclge_desc desc;
  #line 984 
  u32 bd_num;
  #line 984 
  u32 buf_len;
  #line 985 
  int ret;
  #line 985 
  int i;
  #line 987 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_M7_STATS_BD,(_Bool)1);
  #line 989 
  req = (struct hclge_get_m7_bd_cmd *)(& desc.data);
  #line 990 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 991 
  if (ret != 0) {
    #line 992 
    _dev_err(& (hdev->pdev)->dev,(char *)"get firmware statistics bd number failed, ret = %d\n",ret);
    #line 995 
    return;
  }
  #line 998 
  bd_num = req->bd_num;
  #line 1000 
  buf_len = bd_num * 32U;
  #line 1001 
  desc_src = (struct hclge_desc *)kzalloc_1((unsigned long)buf_len,3264U);
  #line 1002 
  if (desc_src == (struct hclge_desc *)0) {
    #line 1003 
    _dev_err(& (hdev->pdev)->dev,(char *)"allocate desc for get_m7_stats failed\n");
    #line 1005 
    return;
  }
  #line 1008 
  desc_tmp = desc_src;
  #line 1009 
  ret = hclge_dbg_cmd_send(hdev,desc_tmp,0,(int)bd_num,(enum hclge_opcode_type)HCLGE_OPC_M7_STATS_INFO);
  #line 1011 
  if (ret != 0) {
    #line 1012 
    kfree((void *)desc_src);
    #line 1013 
    _dev_err(& (hdev->pdev)->dev,(char *)"get firmware statistics failed, ret = %d\n",ret);
    #line 1015 
    return;
  }
  #line 1018 
  i = 0;
  #line 1018 
  while ((unsigned int)i < bd_num) {
    #line 1019 
    _dev_info(& (hdev->pdev)->dev,(char *)"0x%08x  0x%08x  0x%08x\n",desc_tmp->data[0],desc_tmp->data[1],desc_tmp->data[2]);
    #line 1023 
    _dev_info(& (hdev->pdev)->dev,(char *)"0x%08x  0x%08x  0x%08x\n",desc_tmp->data[3],desc_tmp->data[4],desc_tmp->data[5]);
    #line 1028 
    desc_tmp ++;
    #line 1018 
    i ++;
  }
  #line 1031 
  kfree((void *)desc_src);
  #line 1032 
  return;
}

#line 1036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_ncl_config_data_print(struct hclge_dev *hdev, struct hclge_desc *desc, int *offset, int *length)
{
  #line 1042 
  int i;
  #line 1043 
  int j;
  #line 1045 
  i = 0;
  #line 1045 
  while (i <= 4) {
    #line 1046 
    j = 0;
    #line 1046 
    while (j <= 5) {
      #line 1047 
      if (i == 0 && j == 0) 
                            #line 1048 
                            goto __Cont;
      #line 1050 
      _dev_info(& (hdev->pdev)->dev,(char *)"0x%04x | 0x%08x\n",*offset,(desc + (unsigned long)i)->data[j]);
      #line 1053 
      *offset = (int)((unsigned int)*offset + 4U);
      #line 1054 
      *length = (int)((unsigned int)*length + 4294967292U);
      #line 1055 
      if (*length <= 0) 
                        #line 1056 
                        return;
      #line 1046 
      __Cont: 
              #line 1046 
      j ++;
    }
    #line 1045 
    i ++;
  }
  #line 1059 
  return;
}

#line 1065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_dump_ncl_config(struct hclge_dev *hdev, char *cmd_buf)
{
  #line 1071 
  struct hclge_desc desc[5U];
  #line 1073 
  int offset;
  #line 1074 
  int length;
  #line 1075 
  int data0;
  #line 1076 
  int ret;
  #line 1072 
  int bd_num = 5;
  #line 1078 
  ret = sscanf(cmd_buf,(char *)"%x %x",& offset,& length);
  #line 1079 
  if ((ret != 2 || offset > 4095) || 4096 - offset < length) {
    #line 1081 
    _dev_err(& (hdev->pdev)->dev,(char *)"Invalid offset or length.\n");
    #line 1082 
    return;
  }
  #line 1084 
  if (offset < 0 || length <= 0) {
    #line 1085 
    _dev_err(& (hdev->pdev)->dev,(char *)"Non-positive offset or length.\n");
    #line 1086 
    return;
  }
  #line 1089 
  _dev_info(& (hdev->pdev)->dev,(char *)"offset |    data\n");
  #line 1091 
  while (length > 0) {
    #line 1092 
    data0 = offset;
    #line 1093 
    if (length > 115) 
                      #line 1094 
                      data0 |= 7602176; else 
                                             #line 1096 
                                             data0 = (length << 16) | data0;
    #line 1097 
    ret = hclge_dbg_cmd_send(hdev,(struct hclge_desc *)(& desc),data0,bd_num,(enum hclge_opcode_type)HCLGE_OPC_QUERY_NCL_CONFIG);
    #line 1099 
    if (ret != 0) 
                  #line 1100 
                  return;
    #line 1102 
    hclge_ncl_config_data_print(hdev,(struct hclge_desc *)(& desc),& offset,& length);
  }
  #line 1104 
  return;
}

#line 1109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_dump_mac_tnl_status(struct hclge_dev *hdev)
{
  #line 1113 
  struct hclge_mac_tnl_stats stats;
  #line 1114 
  unsigned long rem_nsec;
  #line 1116 
  _dev_info(& (hdev->pdev)->dev,(char *)"Recently generated mac tnl interruption:\n");
  #line 1118 
  while (1) {
    #line 1118 
    unsigned int __ret;
    {
      #line 831  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
      struct __anonstruct___tmp_5824 *__tmp = (struct __anonstruct___tmp_5824 *)(& hdev->mac_tnl_log);
      #line 1118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
      struct hclge_mac_tnl_stats *__val = & stats;
      #line 1118 
      size_t __recsize = 0UL;
      #line 1118 
      struct __kfifo *__kfifo = & __tmp->__anonCompField___anonstruct___tmp_5824_171.kfifo;
      {
        #line 831  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.h"
        struct __anonstruct___tmpq_5826 *__tmpq;
        #line 831 
        __tmpq = (struct __anonstruct___tmpq_5826 *)__tmp;
        #line 1118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
        __ret = (unsigned int)((__tmpq->__anonCompField___anonstruct___tmpq_5826_172.kfifo.in == __tmpq->__anonCompField___anonstruct___tmpq_5826_172.kfifo.out) == 0);
        #line 1118 
        if (__ret != 0U) {
          #line 1118 
          *__val = *((struct hclge_mac_tnl_stats *)(& __tmp->buf) + (unsigned long)(__kfifo->out & __tmp->__anonCompField___anonstruct___tmp_5824_171.kfifo.mask));
          #line 1119 
          ldv_inline_asm();
          #line 1118 
          (__kfifo->out) ++;
        }
      }
      }
    #line 1118 
    if (! (__kfifo_uint_must_check_helper(__ret) != 0U)) 
                                                         #line 1118 
                                                         break;
    {
      #line 1119 
      uint32_t __rem;
      {
        #line 1119 
        uint32_t __base = 1000000000U;
        #line 1119 
        __rem = (unsigned int)(stats.time % (unsigned long long)__base);
        #line 1119 
        stats.time /= (unsigned long long)__base;
        }
      #line 1119 
      rem_nsec = (unsigned long)__rem;
      #line 1120 
      _dev_info(& (hdev->pdev)->dev,(char *)"[%07lu.%03lu] status = 0x%x\n",(unsigned long)stats.time,rem_nsec / 1000UL,stats.status);
    }
  }
  #line 1122 
  return;
}

#line 1126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_dump_qs_shaper_single(struct hclge_dev *hdev, u16 qsid)
{
  #line 1128 
  struct hclge_qs_shapping_cmd *shap_cfg_cmd;
  #line 1129 
  u8 ir_u;
  #line 1129 
  u8 ir_b;
  #line 1129 
  u8 ir_s;
  #line 1129 
  u8 bs_b;
  #line 1129 
  u8 bs_s;
  #line 1130 
  struct hclge_desc desc;
  #line 1131 
  u32 shapping_para;
  #line 1132 
  int ret;
  #line 1134 
  hclge_cmd_setup_basic_desc(& desc,(enum hclge_opcode_type)HCLGE_OPC_QCN_SHAPPING_CFG,(_Bool)1);
  #line 1136 
  shap_cfg_cmd = (struct hclge_qs_shapping_cmd *)(& desc.data);
  #line 1137 
  shap_cfg_cmd->qs_id = qsid;
  #line 1139 
  ret = hclge_cmd_send(& hdev->hw,& desc,1);
  #line 1140 
  if (ret != 0) {
    #line 1141 
    _dev_err(& (hdev->pdev)->dev,(char *)"qs%u failed to get tx_rate, ret=%d\n",(int)qsid,ret);
    #line 1144 
    return;
  }
  #line 1147 
  shapping_para = shap_cfg_cmd->qs_shapping_para;
  #line 1148 
  ir_b = (unsigned char)shapping_para;
  #line 1149 
  ir_u = (unsigned char)((unsigned int)((unsigned char)((unsigned long)shapping_para >> 8)) & 15U);
  #line 1150 
  ir_s = (unsigned char)((unsigned int)((unsigned char)((unsigned long)shapping_para >> 12)) & 15U);
  #line 1151 
  bs_b = (unsigned char)((unsigned int)((unsigned char)((unsigned long)shapping_para >> 16)) & 31U);
  #line 1152 
  bs_s = (unsigned char)((unsigned int)((unsigned char)((unsigned long)shapping_para >> 21)) & 31U);
  #line 1154 
  _dev_info(& (hdev->pdev)->dev,(char *)"qs%u ir_b:%u, ir_u:%u, ir_s:%u, bs_b:%u, bs_s:%u\n",(int)qsid,(int)ir_b,(int)ir_u,(int)ir_s,(int)bs_b,(int)bs_s);
  #line 1155 
  return;
}

#line 1159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_dump_qs_shaper_all(struct hclge_dev *hdev)
{
  #line 1161 
  struct hnae3_knic_private_info *kinfo;
  #line 1162 
  struct hclge_vport *vport;
  #line 1163 
  int vport_id;
  #line 1163 
  int i;
  #line 1165 
  vport_id = 0;
  #line 1165 
  while (1) {
    #line 1165 
    ;
    #line 1165 
    if (! (pci_num_vf(hdev->pdev) >= vport_id)) 
                                                #line 1165 
                                                break;
    #line 1166 
    vport = hdev->vport + (unsigned long)vport_id;
    #line 1167 
    kinfo = & vport->nic.__anonCompField_hnae3_handle_167.kinfo;
    #line 1169 
    _dev_info(& (hdev->pdev)->dev,(char *)"qs cfg of vport%d:\n",vport_id);
    #line 1171 
    i = 0;
    #line 1171 
    while ((int)kinfo->num_tc > i) {
      {
        #line 1172 
        u16 qsid = (unsigned short)((int)vport->qs_offset + (int)((unsigned short)i));
        #line 1174 
        hclge_dbg_dump_qs_shaper_single(hdev,(unsigned short)((int)qsid));
      }
      #line 1171 
      i ++;
    }
    #line 1165 
    vport_id ++;
  }
  #line 1177 
  return;
}

#line 1179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
static void hclge_dbg_dump_qs_shaper(struct hclge_dev *hdev, char *cmd_buf)
{
  #line 1184 
  u16 qsid;
  #line 1185 
  int ret;
  #line 1187 
  ret = kstrtou16(cmd_buf,0U,& qsid);
  #line 1188 
  if (ret != 0) {
    #line 1189 
    hclge_dbg_dump_qs_shaper_all(hdev);
    #line 1190 
    return;
  }
  #line 1193 
  if ((unsigned int)qsid > 1023U) {
    #line 1194 
    _dev_err(& (hdev->pdev)->dev,(char *)"qsid(%u) out of range[0-1023]\n",(int)qsid);
    #line 1196 
    return;
  }
  #line 1199 
  hclge_dbg_dump_qs_shaper_single(hdev,(unsigned short)((int)qsid));
  #line 1200 
  return;
}

#line 1202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_debugfs.c"
int hclge_dbg_run_cmd(struct hnae3_handle *handle, char *cmd_buf)
{
  #line 1207 
  struct hclge_vport *vport = hclge_get_vport(handle);
  #line 1208 
  struct hclge_dev *hdev = vport->back;
  #line 1210 
  if (cif_strncmp(cmd_buf,(char *)"dump fd tcam",12UL) == 0) 
                                                             #line 1211 
                                                             hclge_dbg_fd_tcam(hdev);
  else {
    #line 1212 
    if (cif_strncmp(cmd_buf,(char *)"dump tc",7UL) == 0) 
                                                         #line 1213 
                                                         hclge_dbg_dump_tc(hdev);
    else {
      #line 1214 
      ;
      #line 1214 
      if (cif_strncmp(cmd_buf,(char *)"dump tm map",
                     cif_strlen((char *)"dump tm map")) == 0) 
        #line 1215 
        hclge_dbg_dump_tm_map(hdev,cmd_buf + 12UL);
      else {
        #line 1216 
        if (cif_strncmp(cmd_buf,(char *)"dump tm",7UL) == 0) 
                                                             #line 1217 
                                                             hclge_dbg_dump_tm(hdev);
        else {
          #line 1218 
          if (cif_strncmp(cmd_buf,(char *)"dump qos pause cfg",18UL) == 0) 
            #line 1219 
            hclge_dbg_dump_qos_pause_cfg(hdev);
          else {
            #line 1220 
            if (cif_strncmp(cmd_buf,(char *)"dump qos pri map",16UL) == 0) 
              #line 1221 
              hclge_dbg_dump_qos_pri_map(hdev);
            else {
              #line 1222 
              if (cif_strncmp(cmd_buf,(char *)"dump qos buf cfg",16UL) == 0) 
                #line 1223 
                hclge_dbg_dump_qos_buf_cfg(hdev);
              else {
                #line 1224 
                if (cif_strncmp(cmd_buf,(char *)"dump mng tbl",12UL) == 0) 
                  #line 1225 
                  hclge_dbg_dump_mng_table(hdev);
                else {
                  #line 1226 
                  ;
                  #line 1226 
                  if (cif_strncmp(cmd_buf,(char *)"dump reg",
                    cif_strlen((char *)"dump reg")) == 0) 
                    #line 1227 
                    hclge_dbg_dump_reg_cmd(hdev,cmd_buf + 9UL);
                  else {
                    #line 1228 
                    if (cif_strncmp(cmd_buf,(char *)"dump reset info",15UL) == 0) 
                      #line 1229 
                      hclge_dbg_dump_rst_info(hdev);
                    else {
                      #line 1230 
                      if (cif_strncmp(cmd_buf,(char *)"dump m7 info",12UL) == 0) 
                        #line 1231 
                        hclge_dbg_get_m7_stats_info(hdev);
                      else {
                        #line 1232 
                        if (cif_strncmp(cmd_buf,(char *)"dump ncl_config",15UL) == 0) 
                          #line 1233 
                          hclge_dbg_dump_ncl_config(hdev,cmd_buf + 16UL);
                        else {
                          #line 1235 
                          if (cif_strncmp(cmd_buf,(char *)"dump mac tnl status",19UL) == 0) 
                            #line 1236 
                            hclge_dbg_dump_mac_tnl_status(hdev);
                          else {
                            #line 1237 
                            if (cif_strncmp(cmd_buf,(char *)"dump qs shaper",14UL) == 0) 
                              #line 1238 
                              hclge_dbg_dump_qs_shaper(hdev,cmd_buf + 15UL);
                            else {
                              #line 1241 
                              _dev_info(& (hdev->pdev)->dev,(char *)"unknown command\n");
                              #line 1242 
                              return -22;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #line 1245 
  return 0;
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_debugfs.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 138 
  return ldv_strncmp(cs,ct,count);
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_debugfs.i.aux"
static size_t cif_strlen(char *s)
{
  #line 145 
  return ldv_strlen(s);
}

#line 488  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/0/concurrency safety/weaver/hclge_debugfs.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  #line 491 
  return ldv_kzalloc(size,flags);
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
#line 57 
void emg_dispatch_instance_deregister_2(struct timer_list *arg0);
#line 39 
#line 75 
void emg_dispatch_instance_register_4(struct timer_list *arg0);
#line 40 
#line 66 
void emg_dispatch_irq_deregister_3(int arg0);
#line 41 
#line 86 
void emg_dispatch_irq_register_6(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 42 
#line 329 
void *emg_entry_point_insmod(void *arg0);
#line 44 
#line 100 
void *emg_interrupt_interrupt_scenario_hclge_misc_irq_handle(void *arg0);
#line 48 
#line 163 
void *emg_timer_timer_scenario_1(void *arg0);
#line 49 
#line 358 
int main(void);
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_7;
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_8;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_2(struct timer_list *arg0)
{
  #line 58 
  int ret;
  #line 59 
  struct emg_struct_timer_scenario_1_8 *cf_arg_8;
  #line 60 
  ret = pthread_join(emg_thread_8,(void **)0);
  #line 61 
  __VERIFIER_assume(ret == 0);
  #line 62 
  return;
}

#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_3(int arg0)
{
  #line 67 
  int ret;
  #line 68 
  struct emg_struct_free_irq_3 *cf_arg_7;
  #line 69 
  ret = pthread_join(emg_thread_7,(void **)0);
  #line 70 
  __VERIFIER_assume(ret == 0);
  #line 71 
  return;
}

#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_4(struct timer_list *arg0)
{
  #line 76 
  int ret;
  #line 77 
  struct emg_struct_timer_scenario_1_8 *cf_arg_8;
  #line 78 
  cf_arg_8 = (struct emg_struct_timer_scenario_1_8 *)ldv_xmalloc(16UL);
  #line 79 
  cf_arg_8->arg0 = arg0;
  #line 80 
  ret = pthread_create(& emg_thread_8,(pthread_attr_t *)0,& emg_timer_timer_scenario_1,(void *)cf_arg_8);
  #line 81 
  __VERIFIER_assume(ret == 0);
  #line 82 
  return;
}

#line 86  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_6(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 87 
  int ret;
  #line 88 
  struct emg_struct_interrupt_scenario_hclge_misc_irq_handle_7 *cf_arg_7;
  #line 89 
  cf_arg_7 = (struct emg_struct_interrupt_scenario_hclge_misc_irq_handle_7 *)ldv_xmalloc(40UL);
  #line 90 
  cf_arg_7->arg0 = arg0;
  #line 91 
  cf_arg_7->arg1 = arg1;
  #line 92 
  cf_arg_7->arg2 = arg2;
  #line 93 
  cf_arg_7->arg3 = arg3;
  #line 94 
  ret = pthread_create(& emg_thread_7,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_hclge_misc_irq_handle,(void *)cf_arg_7);
  #line 95 
  __VERIFIER_assume(ret == 0);
  #line 96 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_hclge_misc_irq_handle(void *arg0)
{
  #line 103 
  enum irqreturn (*emg_7_callback)(int , void *);
  #line 104 
  void *emg_7_data;
  #line 105 
  int emg_7_line;
  #line 106 
  enum irqreturn emg_7_ret_val;
  #line 107 
  enum irqreturn (*emg_7_thread)(int , void *);
  #line 109 
  struct emg_struct_interrupt_scenario_hclge_misc_irq_handle_7 *data = (struct emg_struct_interrupt_scenario_hclge_misc_irq_handle_7 *)arg0;
  #line 112 
  emg_7_callback = & emg_wrapper_hclge_misc_irq_handle;
  #line 115 
  if (data != (struct emg_struct_interrupt_scenario_hclge_misc_irq_handle_7 *)0) {
    #line 116 
    emg_7_line = data->arg0;
    #line 117 
    emg_7_callback = data->arg1;
    #line 118 
    emg_7_thread = data->arg2;
    #line 119 
    emg_7_data = data->arg3;
    #line 120 
    ldv_free((void *)data);
  }
  #line 126 
  ldv_switch_to_interrupt_context();
  #line 130 
  emg_7_ret_val = emg_wrapper_hclge_misc_irq_handle(emg_7_line,emg_7_data);
  #line 135 
  ldv_switch_to_process_context();
  #line 138 
  if (ldv_undef_int() != 0) {
    #line 140 
    __VERIFIER_assume(emg_7_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 144 
    if (emg_7_thread != (enum irqreturn (*)(int , void *))0) 
                                                             #line 145 
                                                             (*emg_7_thread)(emg_7_line,emg_7_data);
  }
  else 
       #line 150 
       __VERIFIER_assume(emg_7_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 158 
  return (void *)0;
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_1(void *arg0)
{
  #line 166 
  struct timer_list *emg_8_container;
  #line 167 
  unsigned long emg_8_emg_param_0_0;
  #line 169 
  struct emg_struct_timer_scenario_1_8 *data = (struct emg_struct_timer_scenario_1_8 *)arg0;
  #line 174 
  if (data != (struct emg_struct_timer_scenario_1_8 *)0) {
    #line 175 
    emg_8_container = data->arg0;
    #line 176 
    ldv_free((void *)data);
  }
  #line 182 
  ldv_switch_to_interrupt_context();
  #line 186 
  if (emg_8_container->function != (void (*)(struct timer_list *))0) 
    #line 187 
    (*(emg_8_container->function))((struct timer_list *)emg_8_emg_param_0_0);
  #line 193 
  ldv_switch_to_process_context();
  #line 200 
  return (void *)0;
}

#line 205  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 208 
  struct timer_list *emg_2_timer_list;
  #line 211 
  emg_2_timer_list = arg0;
  #line 215 
  emg_dispatch_instance_deregister_2(emg_2_timer_list);
  #line 216 
  ;
  #line 216 
  return 0;
}

#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 225 
  int emg_3_line;
  #line 228 
  emg_3_line = (int)arg0;
  #line 232 
  emg_dispatch_irq_deregister_3(emg_3_line);
  #line 233 
  ;
  #line 233 
  return (void *)0;
}

#line 239  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 242 
  struct timer_list *emg_4_timer_list;
  #line 244 
  if (ldv_undef_int() != 0) {
    #line 246 
    emg_4_timer_list = arg0;
    #line 250 
    emg_dispatch_instance_register_4(emg_4_timer_list);
    #line 254 
    return 1;
  }
  else 
       #line 258 
       return 0;
}

#line 266  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_work_on(int arg0, struct workqueue_struct *arg1, struct work_struct *arg2)
{
  #line 269 
  struct work_struct *emg_5_work_struct;
  #line 271 
  if (ldv_undef_int() != 0) {
    #line 273 
    emg_5_work_struct = arg2;
    #line 277 
    if (emg_5_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 278 
      (*(emg_5_work_struct->func))(emg_5_work_struct);
    #line 283 
    return (_Bool)1;
  }
  else 
       #line 287 
       return (_Bool)0;
}

#line 295  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 298 
  enum irqreturn (*emg_6_callback)(int , void *);
  #line 299 
  void *emg_6_data;
  #line 300 
  int emg_6_line;
  #line 301 
  enum irqreturn (*emg_6_thread)(int , void *);
  #line 303 
  emg_6_callback = & emg_wrapper_hclge_misc_irq_handle;
  #line 304 
  if (ldv_undef_int() != 0) {
    #line 306 
    emg_6_line = (int)arg0;
    #line 307 
    emg_6_callback = arg1;
    #line 308 
    emg_6_thread = (enum irqreturn (*)(int , void *))0;
    #line 309 
    emg_6_data = arg4;
    #line 313 
    emg_dispatch_irq_register_6(emg_6_line,emg_6_callback,emg_6_thread,emg_6_data);
    #line 317 
    return 0;
  }
  else {
    #line 321 
    return ldv_undef_int_negative();
  }
}

#line 329  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 332 
  int emg_1_ret;
  #line 335 
  emg_1_ret = emg_hclge_init();
  #line 336 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 339 
  if (ldv_undef_int() != 0) {
    #line 341 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 345 
    emg_hclge_exit();
  }
  else 
       #line 349 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 353 
  return (void *)0;
}

#line 358  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 360 
  ldv_initialize();
  #line 362 
  emg_entry_point_insmod((void *)0);
  #line 364 
  return 0;
}

