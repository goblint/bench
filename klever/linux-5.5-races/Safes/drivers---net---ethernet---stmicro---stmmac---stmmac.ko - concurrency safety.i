/* Generated by Frama-C */
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_9 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_9 key ;
} __attribute__((__aligned__(8)));
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stmmac.h"
struct stmmac_dma_cfg {
   int pbl ;
   int txpbl ;
   int rxpbl ;
   bool pblx8 ;
   int fixed_burst ;
   int mixed_burst ;
   bool aal ;
   bool eame ;
};
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stmmac.h"
struct stmmac_axi {
   bool axi_lpi_en ;
   bool axi_xit_frm ;
   u32 axi_wr_osr_lmt ;
   u32 axi_rd_osr_lmt ;
   bool axi_kbbe ;
   u32 axi_blen[7U] ;
   bool axi_fb ;
   bool axi_mb ;
   bool axi_rb ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/descs.h"
struct stmmac_extra_stats;
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
struct dma_features;
#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
struct stmmac_dma_ops {
   int (*reset)(void *) ;
   void (*init)(void *, struct stmmac_dma_cfg *, int ) ;
   void (*init_chan)(void *, struct stmmac_dma_cfg *, u32 ) ;
   void (*init_rx_chan)(void *, struct stmmac_dma_cfg *, dma_addr_t , u32 ) ;
   void (*init_tx_chan)(void *, struct stmmac_dma_cfg *, dma_addr_t , u32 ) ;
   void (*axi)(void *, struct stmmac_axi *) ;
   void (*dump_regs)(void *, u32 *) ;
   void (*dma_rx_mode)(void *, int , u32 , int , u8 ) ;
   void (*dma_tx_mode)(void *, int , u32 , int , u8 ) ;
   void (*dma_diagnostic_fr)(void *, struct stmmac_extra_stats *, void *) ;
   void (*enable_dma_transmission)(void *) ;
   void (*enable_dma_irq)(void *, u32 ) ;
   void (*disable_dma_irq)(void *, u32 ) ;
   void (*start_tx)(void *, u32 ) ;
   void (*stop_tx)(void *, u32 ) ;
   void (*start_rx)(void *, u32 ) ;
   void (*stop_rx)(void *, u32 ) ;
   int (*dma_interrupt)(void *, struct stmmac_extra_stats *, u32 ) ;
   void (*get_hw_feature)(void *, struct dma_features *) ;
   void (*rx_watchdog)(void *, u32 , u32 ) ;
   void (*set_tx_ring_len)(void *, u32 , u32 ) ;
   void (*set_rx_ring_len)(void *, u32 , u32 ) ;
   void (*set_rx_tail_ptr)(void *, u32 , u32 ) ;
   void (*set_tx_tail_ptr)(void *, u32 , u32 ) ;
   void (*enable_tso)(void *, bool , u32 ) ;
   void (*qmode)(void *, u32 , u8 ) ;
   void (*set_bfsize)(void *, int , u32 ) ;
   void (*enable_sph)(void *, bool , u32 ) ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
struct stmmac_extra_stats {
   unsigned long tx_underflow ;
   unsigned long tx_carrier ;
   unsigned long tx_losscarrier ;
   unsigned long vlan_tag ;
   unsigned long tx_deferred ;
   unsigned long tx_vlan ;
   unsigned long tx_jabber ;
   unsigned long tx_frame_flushed ;
   unsigned long tx_payload_error ;
   unsigned long tx_ip_header_error ;
   unsigned long rx_desc ;
   unsigned long sa_filter_fail ;
   unsigned long overflow_error ;
   unsigned long ipc_csum_error ;
   unsigned long rx_collision ;
   unsigned long rx_crc_errors ;
   unsigned long dribbling_bit ;
   unsigned long rx_length ;
   unsigned long rx_mii ;
   unsigned long rx_multicast ;
   unsigned long rx_gmac_overflow ;
   unsigned long rx_watchdog ;
   unsigned long da_rx_filter_fail ;
   unsigned long sa_rx_filter_fail ;
   unsigned long rx_missed_cntr ;
   unsigned long rx_overflow_cntr ;
   unsigned long rx_vlan ;
   unsigned long rx_split_hdr_pkt_n ;
   unsigned long tx_undeflow_irq ;
   unsigned long tx_process_stopped_irq ;
   unsigned long tx_jabber_irq ;
   unsigned long rx_overflow_irq ;
   unsigned long rx_buf_unav_irq ;
   unsigned long rx_process_stopped_irq ;
   unsigned long rx_watchdog_irq ;
   unsigned long tx_early_irq ;
   unsigned long fatal_bus_error_irq ;
   unsigned long rx_early_irq ;
   unsigned long threshold ;
   unsigned long tx_pkt_n ;
   unsigned long rx_pkt_n ;
   unsigned long normal_irq_n ;
   unsigned long rx_normal_irq_n ;
   unsigned long napi_poll ;
   unsigned long tx_normal_irq_n ;
   unsigned long tx_clean ;
   unsigned long tx_set_ic_bit ;
   unsigned long irq_receive_pmt_irq_n ;
   unsigned long mmc_tx_irq_n ;
   unsigned long mmc_rx_irq_n ;
   unsigned long mmc_rx_csum_offload_irq_n ;
   unsigned long irq_tx_path_in_lpi_mode_n ;
   unsigned long irq_tx_path_exit_lpi_mode_n ;
   unsigned long irq_rx_path_in_lpi_mode_n ;
   unsigned long irq_rx_path_exit_lpi_mode_n ;
   unsigned long phy_eee_wakeup_error_n ;
   unsigned long ip_hdr_err ;
   unsigned long ip_payload_err ;
   unsigned long ip_csum_bypassed ;
   unsigned long ipv4_pkt_rcvd ;
   unsigned long ipv6_pkt_rcvd ;
   unsigned long no_ptp_rx_msg_type_ext ;
   unsigned long ptp_rx_msg_type_sync ;
   unsigned long ptp_rx_msg_type_follow_up ;
   unsigned long ptp_rx_msg_type_delay_req ;
   unsigned long ptp_rx_msg_type_delay_resp ;
   unsigned long ptp_rx_msg_type_pdelay_req ;
   unsigned long ptp_rx_msg_type_pdelay_resp ;
   unsigned long ptp_rx_msg_type_pdelay_follow_up ;
   unsigned long ptp_rx_msg_type_announce ;
   unsigned long ptp_rx_msg_type_management ;
   unsigned long ptp_rx_msg_pkt_reserved_type ;
   unsigned long ptp_frame_type ;
   unsigned long ptp_ver ;
   unsigned long timestamp_dropped ;
   unsigned long av_pkt_rcvd ;
   unsigned long av_tagged_pkt_rcvd ;
   unsigned long vlan_tag_priority_val ;
   unsigned long l3_filter_match ;
   unsigned long l4_filter_match ;
   unsigned long l3_l4_filter_no_match ;
   unsigned long irq_pcs_ane_n ;
   unsigned long irq_pcs_link_n ;
   unsigned long irq_rgmii_n ;
   unsigned long pcs_link ;
   unsigned long pcs_duplex ;
   unsigned long pcs_speed ;
   unsigned long mtl_tx_status_fifo_full ;
   unsigned long mtl_tx_fifo_not_empty ;
   unsigned long mmtl_fifo_ctrl ;
   unsigned long mtl_tx_fifo_read_ctrl_write ;
   unsigned long mtl_tx_fifo_read_ctrl_wait ;
   unsigned long mtl_tx_fifo_read_ctrl_read ;
   unsigned long mtl_tx_fifo_read_ctrl_idle ;
   unsigned long mac_tx_in_pause ;
   unsigned long mac_tx_frame_ctrl_xfer ;
   unsigned long mac_tx_frame_ctrl_idle ;
   unsigned long mac_tx_frame_ctrl_wait ;
   unsigned long mac_tx_frame_ctrl_pause ;
   unsigned long mac_gmii_tx_proto_engine ;
   unsigned long mtl_rx_fifo_fill_level_full ;
   unsigned long mtl_rx_fifo_fill_above_thresh ;
   unsigned long mtl_rx_fifo_fill_below_thresh ;
   unsigned long mtl_rx_fifo_fill_level_empty ;
   unsigned long mtl_rx_fifo_read_ctrl_flush ;
   unsigned long mtl_rx_fifo_read_ctrl_read_data ;
   unsigned long mtl_rx_fifo_read_ctrl_status ;
   unsigned long mtl_rx_fifo_read_ctrl_idle ;
   unsigned long mtl_rx_fifo_ctrl_active ;
   unsigned long mac_rx_frame_ctrl_fifo ;
   unsigned long mac_gmii_rx_proto_engine ;
   unsigned long tx_tso_frames ;
   unsigned long tx_tso_nfrags ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
struct dma_features {
   unsigned int mbps_10_100 ;
   unsigned int mbps_1000 ;
   unsigned int half_duplex ;
   unsigned int hash_filter ;
   unsigned int multi_addr ;
   unsigned int pcs ;
   unsigned int sma_mdio ;
   unsigned int pmt_remote_wake_up ;
   unsigned int pmt_magic_frame ;
   unsigned int rmon ;
   unsigned int time_stamp ;
   unsigned int atime_stamp ;
   unsigned int eee ;
   unsigned int av ;
   unsigned int hash_tb_sz ;
   unsigned int tsoen ;
   unsigned int tx_coe ;
   unsigned int rx_coe ;
   unsigned int rx_coe_type1 ;
   unsigned int rx_coe_type2 ;
   unsigned int rxfifo_over_2048 ;
   unsigned int number_rx_channel ;
   unsigned int number_tx_channel ;
   unsigned int number_rx_queues ;
   unsigned int number_tx_queues ;
   unsigned int pps_out_num ;
   unsigned int enh_desc ;
   unsigned int tx_fifo_size ;
   unsigned int rx_fifo_size ;
   unsigned int asp ;
   unsigned int frpsel ;
   unsigned int frpbs ;
   unsigned int frpes ;
   unsigned int addr64 ;
   unsigned int rssen ;
   unsigned int vlhash ;
   unsigned int sphen ;
   unsigned int vlins ;
   unsigned int dvlan ;
   unsigned int l3l4fnum ;
   unsigned int arpoffsel ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 1165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/descs.h"
struct dma_desc {
   __le32 des0 ;
   __le32 des1 ;
   __le32 des2 ;
   __le32 des3 ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/descs.h"
struct dma_extended_desc {
   struct dma_desc basic ;
   __le32 des4 ;
   __le32 des5 ;
   __le32 des6 ;
   __le32 des7 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
struct stmmac_desc_ops {
   void (*init_rx_desc)(struct dma_desc *, int , int , int , int ) ;
   void (*init_tx_desc)(struct dma_desc *, int , int ) ;
   void (*prepare_tx_desc)(struct dma_desc *, int , int , bool , int , bool , bool , unsigned int ) ;
   void (*prepare_tso_tx_desc)(struct dma_desc *, int , int , int , bool , bool , unsigned int , unsigned int ) ;
   void (*set_tx_owner)(struct dma_desc *) ;
   int (*get_tx_owner)(struct dma_desc *) ;
   void (*release_tx_desc)(struct dma_desc *, int ) ;
   void (*set_tx_ic)(struct dma_desc *) ;
   int (*get_tx_ls)(struct dma_desc *) ;
   int (*tx_status)(void *, struct stmmac_extra_stats *, struct dma_desc *, void *) ;
   int (*get_tx_len)(struct dma_desc *) ;
   void (*set_rx_owner)(struct dma_desc *, int ) ;
   int (*get_rx_frame_len)(struct dma_desc *, int ) ;
   int (*rx_status)(void *, struct stmmac_extra_stats *, struct dma_desc *) ;
   void (*rx_extended_status)(void *, struct stmmac_extra_stats *, struct dma_extended_desc *) ;
   void (*enable_tx_timestamp)(struct dma_desc *) ;
   int (*get_tx_timestamp_status)(struct dma_desc *) ;
   void (*get_timestamp)(void *, u32 , u64 *) ;
   int (*get_rx_timestamp_status)(void *, void *, u32 ) ;
   void (*display_ring)(void *, unsigned int , bool ) ;
   void (*set_mss)(struct dma_desc *, unsigned int ) ;
   void (*get_addr)(struct dma_desc *, unsigned int *) ;
   void (*set_addr)(struct dma_desc *, dma_addr_t ) ;
   void (*clear)(struct dma_desc *) ;
   int (*get_rx_hash)(struct dma_desc *, u32 *, enum pkt_hash_types *) ;
   int (*get_rx_header_len)(struct dma_desc *, unsigned int *) ;
   void (*set_sec_addr)(struct dma_desc *, dma_addr_t ) ;
   void (*set_sarc)(struct dma_desc *, u32 ) ;
   void (*set_vlan_tag)(struct dma_desc *, u16 , u16 , u32 ) ;
   void (*set_vlan)(struct dma_desc *, u32 ) ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_2128 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_2128 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/chain_mode.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_2148 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_2150 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_2149 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_2150 __anonCompField___anonstruct_nanosleep_2149_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_2151 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_2147 {
   struct __anonstruct_futex_2148 futex ;
   struct __anonstruct_nanosleep_2149 nanosleep ;
   struct __anonstruct_poll_2151 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_2147 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_2174 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_2174 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_2175 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_2175 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_2177 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_2177 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_2178 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_2178 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_2180 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_2181 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_2179 {
   atomic_t val ;
   struct __anonstruct_2180 __anonCompField___anonunion_2179_7 ;
   struct __anonstruct_2181 __anonCompField___anonunion_2179_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_2179 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_2183 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_2182 {
   atomic_t cnts ;
   struct __anonstruct_2183 __anonCompField___anonunion_2182_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_2182 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_2211 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_2212 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_2210 {
   struct __anonstruct_2211 __anonCompField___anonunion_2210_17 ;
   struct __anonstruct_2212 __anonCompField___anonunion_2210_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_2213 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_2210 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_2213 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_2216 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_2216 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_2217 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_2217 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_2219 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_2218 {
   struct raw_spinlock rlock ;
   struct __anonstruct_2219 __anonCompField___anonunion_2218_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_2218 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_2220 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_2220 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 40 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_2235 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_2235 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
struct system_device_crosststamp {
   ktime_t device ;
   ktime_t sys_realtime ;
   ktime_t sys_monoraw ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct notifier_block;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 235 
struct clk;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
struct __anonstruct_nodemask_t_2284 {
   unsigned long bits[16U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
typedef struct __anonstruct_nodemask_t_2284 nodemask_t;
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/numa.h"
struct ldt_struct;
#line 81 
struct vdso_image;
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/numa.h"
struct __anonstruct_mm_context_t_2285 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/numa.h"
typedef struct __anonstruct_mm_context_t_2285 mm_context_t;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 97 
struct inode;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_2305 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_2306 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_2304 {
   struct __anonstruct_2305 __anonCompField___anonunion_2304_29 ;
   struct __anonstruct_2306 __anonCompField___anonunion_2304_30 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_2304 __anonCompField_uprobe_task_31 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct address_space;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_2308 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_2309 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_2312 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_2311 {
   struct list_head slab_list ;
   struct __anonstruct_2312 __anonCompField___anonunion_2311_34 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_2314 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_2313 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_2314 __anonCompField___anonunion_2313_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_2310 {
   union __anonunion_2311 __anonCompField___anonstruct_2310_35 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_2313 __anonCompField___anonstruct_2310_37 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_2315 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_2316 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_2318 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_2317 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_2318 __anonCompField___anonstruct_2317_41 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_2319 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_2307 {
   struct __anonstruct_2308 __anonCompField___anonunion_2307_32 ;
   struct __anonstruct_2309 __anonCompField___anonunion_2307_33 ;
   struct __anonstruct_2310 __anonCompField___anonunion_2307_38 ;
   struct __anonstruct_2315 __anonCompField___anonunion_2307_39 ;
   struct __anonstruct_2316 __anonCompField___anonunion_2307_40 ;
   struct __anonstruct_2317 __anonCompField___anonunion_2307_42 ;
   struct __anonstruct_2319 __anonCompField___anonunion_2307_43 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_2320 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_2307 __anonCompField_page_44 ;
   union __anonunion_2320 __anonCompField_page_45 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278 
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_2321 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_2321 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_2322 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_2322 __anonCompField_mm_struct_46 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_2373 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_2373 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_2374 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_2374 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sched.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_2401 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_2401 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_2402 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_2403 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_2404 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_2405 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_2408 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_2409 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_2407 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_2408 _addr_bnd ;
   struct __anonstruct__addr_pkey_2409 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_2406 {
   void *_addr ;
   union __anonunion_2407 __anonCompField___anonstruct__sigfault_2406_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_2410 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_2411 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_2402 _kill ;
   struct __anonstruct__timer_2403 _timer ;
   struct __anonstruct__rt_2404 _rt ;
   struct __anonstruct__sigchld_2405 _sigchld ;
   struct __anonstruct__sigfault_2406 _sigfault ;
   struct __anonstruct__sigpoll_2410 _sigpoll ;
   struct __anonstruct__sigsys_2411 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_2416 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_2416 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_2421 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_2421 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_2423 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_2423 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_2502 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_2504 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_2503 {
   unsigned long nr_segs ;
   struct __anonstruct_2504 __anonCompField___anonunion_2503_54 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_2502 __anonCompField_iov_iter_53 ;
   union __anonunion_2503 __anonCompField_iov_iter_55 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 
struct kiocb;
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_2507 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_2507 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_2508 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_2508 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_2509 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_2509 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_2510 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_2510 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_2511 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_2511 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_2512 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_2512 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_2513 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_2513 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_2514 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_2514 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_2515 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_2516 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_2515 ifr_ifrn ;
   union __anonunion_ifr_ifru_2516 ifr_ifru ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_2531 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_2530 {
   struct __anonstruct_2531 __anonCompField___anonunion_2530_58 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_2530 __anonCompField_lockref_59 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_2533 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_2532 {
   struct __anonstruct_2533 __anonCompField___anonunion_2532_60 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_2532 __anonCompField_qstr_61 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_2534 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_2535 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_2534 __anonCompField_dentry_62 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_2535 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_2553 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_2553 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_2554 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_2555 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_2554 __anonCompField_io_cq_65 ;
   union __anonunion_2555 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct export_operations;
#line 290 
struct kobject;
#line 292 
struct kstatfs;
#line 293 
struct swap_info_struct;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_context;
#line 299 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_2556 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_2556 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_2557 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_2557 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_2562 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_2563 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_2564 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628 
struct cdev;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_2565 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_2562 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_2563 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_2564 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_2565 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_2566 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_2566 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_2568 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_2567 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_2568 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_2567 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct sk_buff;
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_2616 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_2616 __anonCompField_kernfs_node_73 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct pdev_archdata {
   };
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_2619 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_2619 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_2620 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_2620 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_2642 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_2641 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_2642 __anonCompField___anonstruct_2641_86 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_2640 {
   struct __anonstruct_2641 __anonCompField___anonunion_2640_87 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_2643 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_2644 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_2646 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_2645 {
   struct __anonstruct_2646 __anonCompField___anonunion_2645_91 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_2648 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_2647 {
   __wsum csum ;
   struct __anonstruct_2648 __anonCompField___anonunion_2647_93 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_2649 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_2650 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_2651 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_2640 __anonCompField_sk_buff_88 ;
   union __anonunion_2643 __anonCompField_sk_buff_89 ;
   union __anonunion_2644 __anonCompField_sk_buff_90 ;
   char cb[48U] ;
   union __anonunion_2645 __anonCompField_sk_buff_92 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_2647 __anonCompField_sk_buff_94 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_2649 __anonCompField_sk_buff_95 ;
   __u32 secmark ;
   union __anonunion_2650 __anonCompField_sk_buff_96 ;
   union __anonunion_2651 __anonCompField_sk_buff_97 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_2677 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_2677 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_2680 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_2680 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_2682 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_2681 {
   struct __anonstruct_2682 __anonCompField___anonunion_2681_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_2681 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_2683 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_2683 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_2684 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_2684 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_2685 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_2685 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_2686 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_2686 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 43 
struct xt_table;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_2688 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_2688 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_2701 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_2700 {
   struct __anonstruct_2701 __anonCompField___anonunion_2700_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_2700 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_2702 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_2703 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_2705 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_2704 {
   struct keyring_index_key index_key ;
   struct __anonstruct_2705 __anonCompField___anonunion_2704_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_2707 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_2706 {
   union key_payload payload ;
   struct __anonstruct_2707 __anonCompField___anonunion_2706_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_2702 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_2703 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_2704 __anonCompField_key_107 ;
   union __anonunion_2706 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_2710 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_2710 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_2711 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_2711 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_2713 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_2712 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_2713 __anonCompField___anonunion_2712_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_2712 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_2715 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_2717 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_2716 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_2717 __anonCompField___anonstruct_2716_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_2718 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_2719 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_2720 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_2721 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_2723 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_2722 {
   union __anonunion_2723 __anonCompField___anonstruct_2722_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_2724 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_2725 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_2726 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_2727 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_2728 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_2715 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_2716 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_2718 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_2719 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_2720 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_2721 test ;
   struct __anonstruct_2722 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_2724 info ;
   struct __anonstruct_query_2725 query ;
   struct __anonstruct_raw_tracepoint_2726 raw_tracepoint ;
   struct __anonstruct_2727 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_2728 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_2761 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_2761 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_2763 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_2762 {
   struct __anonstruct_tail_call_2763 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_2762 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_2764 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_2764 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_2766 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_2766 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 52 
struct page_pool;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_2791 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_2791 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_2796 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_2797 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_2798 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_2799 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_2795 {
   struct __anonstruct_2796 __anonCompField___anonunion_2795_155 ;
   struct __anonstruct_2797 __anonCompField___anonunion_2795_156 ;
   struct __anonstruct_2798 __anonCompField___anonunion_2795_157 ;
   struct __anonstruct_xsk_2799 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_2795 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14555 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14556 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_2800 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_2801 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_2800 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14555 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14556 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_2801 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct mfd_cell;
#line 749 
struct platform_device_id;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_device {
   char *name ;
   int id ;
   bool id_auto ;
   struct device dev ;
   u64 dma_mask ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id *id_entry ;
   char *driver_override ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mdio.h"
typedef unsigned long kernel_ulong_t;
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 823 
struct gpio_desc;
#line 824 
struct mii_bus;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct reset_control;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_device {
   struct device dev ;
   struct mii_bus *bus ;
   char modalias[32U] ;
   int (*bus_match)(struct device *, struct device_driver *) ;
   void (*device_free)(struct mdio_device *) ;
   void (*device_remove)(struct mdio_device *) ;
   int addr ;
   int flags ;
   struct gpio_desc *reset_gpio ;
   struct reset_control *reset_ctrl ;
   unsigned int reset_assert_delay ;
   unsigned int reset_deassert_delay ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_driver_common {
   struct device_driver driver ;
   int flags ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_2822 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_2822 __anonCompField_kernel_param_160 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
enum ldv_15641 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_INTERNAL = 1,
    PHY_INTERFACE_MODE_MII = 2,
    PHY_INTERFACE_MODE_GMII = 3,
    PHY_INTERFACE_MODE_SGMII = 4,
    PHY_INTERFACE_MODE_TBI = 5,
    PHY_INTERFACE_MODE_REVMII = 6,
    PHY_INTERFACE_MODE_RMII = 7,
    PHY_INTERFACE_MODE_RGMII = 8,
    PHY_INTERFACE_MODE_RGMII_ID = 9,
    PHY_INTERFACE_MODE_RGMII_RXID = 10,
    PHY_INTERFACE_MODE_RGMII_TXID = 11,
    PHY_INTERFACE_MODE_RTBI = 12,
    PHY_INTERFACE_MODE_SMII = 13,
    PHY_INTERFACE_MODE_XGMII = 14,
    PHY_INTERFACE_MODE_MOCA = 15,
    PHY_INTERFACE_MODE_QSGMII = 16,
    PHY_INTERFACE_MODE_TRGMII = 17,
    PHY_INTERFACE_MODE_1000BASEX = 18,
    PHY_INTERFACE_MODE_2500BASEX = 19,
    PHY_INTERFACE_MODE_RXAUI = 20,
    PHY_INTERFACE_MODE_XAUI = 21,
    PHY_INTERFACE_MODE_10GKR = 22,
    PHY_INTERFACE_MODE_USXGMII = 23,
    PHY_INTERFACE_MODE_MAX = 24
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
typedef enum ldv_15641 phy_interface_t;
#line 186 
struct phylink;
#line 188 
enum ldv_15656 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct mii_bus {
   struct module *owner ;
   char *name ;
   char id[61U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_15656 state ;
   struct device dev ;
   struct mdio_device *mdio_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int irq[32U] ;
   int reset_delay_us ;
   struct gpio_desc *reset_gpiod ;
};
#line 278 
enum phy_state {
    PHY_DOWN = 0,
    PHY_READY = 1,
    PHY_HALTED = 2,
    PHY_UP = 3,
    PHY_RUNNING = 4,
    PHY_NOLINK = 5
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};
#line 363 
struct phy_driver;
#line 363 
struct phy_led_trigger;
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_device {
   struct mdio_device mdio ;
   struct phy_driver *drv ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   unsigned int is_c45 : 1 ;
   unsigned int is_internal : 1 ;
   unsigned int is_pseudo_fixed_link : 1 ;
   unsigned int is_gigabit_capable : 1 ;
   unsigned int has_fixups : 1 ;
   unsigned int suspended : 1 ;
   unsigned int sysfs_links : 1 ;
   unsigned int loopback_enabled : 1 ;
   unsigned int autoneg : 1 ;
   unsigned int link : 1 ;
   unsigned int autoneg_complete : 1 ;
   unsigned int interrupts : 1 ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
   unsigned long adv_old[2U] ;
   u32 eee_broken_modes ;
   struct phy_led_trigger *phy_led_triggers ;
   unsigned int phy_num_led_triggers ;
   struct phy_led_trigger *last_triggered ;
   struct phy_led_trigger *led_link_trigger ;
   int irq ;
   void *priv ;
   struct delayed_work state_queue ;
   struct mutex lock ;
   bool sfp_bus_attached ;
   struct sfp_bus *sfp_bus ;
   struct phylink *phylink ;
   struct net_device *attached_dev ;
   u8 mdix ;
   u8 mdix_ctrl ;
   void (*phy_link_change)(struct phy_device *, bool , bool ) ;
   void (*adjust_link)(struct net_device *) ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_driver {
   struct mdio_driver_common mdiodrv ;
   u32 phy_id ;
   char *name ;
   u32 phy_id_mask ;
   unsigned long *features ;
   u32 flags ;
   void *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*get_features)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   int (*handle_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd)(struct phy_device *, int , u16 ) ;
   int (*write_mmd)(struct phy_device *, int , u16 , u16 ) ;
   int (*read_page)(struct phy_device *) ;
   int (*write_page)(struct phy_device *, int ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_sset_count)(struct phy_device *) ;
   void (*get_strings)(struct phy_device *, u8 *) ;
   void (*get_stats)(struct phy_device *, struct ethtool_stats *, u64 *) ;
   int (*get_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_loopback)(struct phy_device *, bool ) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stmmac.h"
struct stmmac_mdio_bus_data {
   unsigned int phy_mask ;
   int *irqs ;
   int probed_phy_irq ;
   bool needs_reset ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stmmac.h"
struct stmmac_rxq_cfg {
   u8 mode_to_use ;
   u32 chan ;
   u8 pkt_route ;
   bool use_prio ;
   u32 prio ;
};
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stmmac.h"
struct stmmac_txq_cfg {
   u32 weight ;
   u8 mode_to_use ;
   u32 send_slope ;
   u32 idle_slope ;
   u32 high_credit ;
   u32 low_credit ;
   bool use_prio ;
   u32 prio ;
};
#line 132 
struct mac_device_info;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stmmac.h"
struct plat_stmmacenet_data {
   int bus_id ;
   int phy_addr ;
   int interface ;
   phy_interface_t phy_interface ;
   struct stmmac_mdio_bus_data *mdio_bus_data ;
   struct device_node *phy_node ;
   struct device_node *phylink_node ;
   struct device_node *mdio_node ;
   struct stmmac_dma_cfg *dma_cfg ;
   int clk_csr ;
   int has_gmac ;
   int enh_desc ;
   int tx_coe ;
   int rx_coe ;
   int bugged_jumbo ;
   int pmt ;
   int force_sf_dma_mode ;
   int force_thresh_dma_mode ;
   int riwt_off ;
   int max_speed ;
   int maxmtu ;
   int multicast_filter_bins ;
   int unicast_filter_entries ;
   int tx_fifo_size ;
   int rx_fifo_size ;
   u32 rx_queues_to_use ;
   u32 tx_queues_to_use ;
   u8 rx_sched_algorithm ;
   u8 tx_sched_algorithm ;
   struct stmmac_rxq_cfg rx_queues_cfg[8U] ;
   struct stmmac_txq_cfg tx_queues_cfg[8U] ;
   void (*fix_mac_speed)(void *, unsigned int ) ;
   int (*init)(struct platform_device *, void *) ;
   void (*exit)(struct platform_device *, void *) ;
   struct mac_device_info *(*setup)(void *) ;
   void *bsp_priv ;
   struct clk *stmmac_clk ;
   struct clk *pclk ;
   struct clk *clk_ptp_ref ;
   unsigned int clk_ptp_rate ;
   unsigned int clk_ref_rate ;
   s32 ptp_max_adj ;
   struct reset_control *stmmac_rst ;
   struct stmmac_axi *axi ;
   int has_gmac4 ;
   bool has_sun8i ;
   bool tso_en ;
   int rss_en ;
   int mac_port_sel_speed ;
   bool en_tx_lpi_clockgating ;
   int has_xgmac ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phylink.h"
enum phylink_op_type {
    PHYLINK_NETDEV = 0,
    PHYLINK_DEV = 1
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phylink.h"
struct phylink_config {
   struct device *dev ;
   enum phylink_op_type type ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/descs.h"
struct stmmac_safety_stats;
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
struct rgmii_adv;
#line 213 
struct stmmac_tc_entry;
#line 214 
struct stmmac_pps_cfg;
#line 215 
struct stmmac_rss;
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
struct stmmac_ops {
   void (*core_init)(struct mac_device_info *, struct net_device *) ;
   void (*set_mac)(void *, bool ) ;
   int (*rx_ipc)(struct mac_device_info *) ;
   void (*rx_queue_enable)(struct mac_device_info *, u8 , u32 ) ;
   void (*rx_queue_prio)(struct mac_device_info *, u32 , u32 ) ;
   void (*tx_queue_prio)(struct mac_device_info *, u32 , u32 ) ;
   void (*rx_queue_routing)(struct mac_device_info *, u8 , u32 ) ;
   void (*prog_mtl_rx_algorithms)(struct mac_device_info *, u32 ) ;
   void (*prog_mtl_tx_algorithms)(struct mac_device_info *, u32 ) ;
   void (*set_mtl_tx_queue_weight)(struct mac_device_info *, u32 , u32 ) ;
   void (*map_mtl_to_dma)(struct mac_device_info *, u32 , u32 ) ;
   void (*config_cbs)(struct mac_device_info *, u32 , u32 , u32 , u32 , u32 ) ;
   void (*dump_regs)(struct mac_device_info *, u32 *) ;
   int (*host_irq_status)(struct mac_device_info *, struct stmmac_extra_stats *) ;
   int (*host_mtl_irq_status)(struct mac_device_info *, u32 ) ;
   void (*set_filter)(struct mac_device_info *, struct net_device *) ;
   void (*flow_ctrl)(struct mac_device_info *, unsigned int , unsigned int , unsigned int , u32 ) ;
   void (*pmt)(struct mac_device_info *, unsigned long ) ;
   void (*set_umac_addr)(struct mac_device_info *, unsigned char *, unsigned int ) ;
   void (*get_umac_addr)(struct mac_device_info *, unsigned char *, unsigned int ) ;
   void (*set_eee_mode)(struct mac_device_info *, bool ) ;
   void (*reset_eee_mode)(struct mac_device_info *) ;
   void (*set_eee_timer)(struct mac_device_info *, int , int ) ;
   void (*set_eee_pls)(struct mac_device_info *, int ) ;
   void (*debug)(void *, struct stmmac_extra_stats *, u32 , u32 ) ;
   void (*pcs_ctrl_ane)(void *, bool , bool , bool ) ;
   void (*pcs_rane)(void *, bool ) ;
   void (*pcs_get_adv_lp)(void *, struct rgmii_adv *) ;
   int (*safety_feat_config)(void *, unsigned int ) ;
   int (*safety_feat_irq_status)(struct net_device *, void *, unsigned int , struct stmmac_safety_stats *) ;
   int (*safety_feat_dump)(struct stmmac_safety_stats *, int , unsigned long *, char **) ;
   int (*rxp_config)(void *, struct stmmac_tc_entry *, unsigned int ) ;
   int (*flex_pps_config)(void *, int , struct stmmac_pps_cfg *, bool , u32 , u32 ) ;
   void (*set_mac_loopback)(void *, bool ) ;
   int (*rss_configure)(struct mac_device_info *, struct stmmac_rss *, u32 ) ;
   void (*update_vlan_hash)(struct mac_device_info *, u32 , __le16 , bool ) ;
   void (*enable_vlan)(struct mac_device_info *, u32 ) ;
   int (*get_mac_tx_timestamp)(struct mac_device_info *, u64 *) ;
   void (*sarc_configure)(void *, int ) ;
   int (*config_l3_filter)(struct mac_device_info *, u32 , bool , bool , bool , bool , u32 ) ;
   int (*config_l4_filter)(struct mac_device_info *, u32 , bool , bool , bool , bool , u32 ) ;
   void (*set_arp_offload)(struct mac_device_info *, bool , u32 ) ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
struct stmmac_hwtimestamp {
   void (*config_hw_tstamping)(void *, u32 ) ;
   void (*config_sub_second_increment)(void *, u32 , int , u32 *) ;
   int (*init_systime)(void *, u32 , u32 ) ;
   int (*config_addend)(void *, u32 ) ;
   int (*adjust_systime)(void *, u32 , u32 , int , int ) ;
   void (*get_systime)(void *, u64 *) ;
};
#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
struct stmmac_mode_ops {
   void (*init)(void *, dma_addr_t , unsigned int , unsigned int ) ;
   unsigned int (*is_jumbo_frm)(int , int ) ;
   int (*jumbo_frm)(void *, struct sk_buff *, int ) ;
   int (*set_16kib_bfsize)(int ) ;
   void (*init_desc3)(struct dma_desc *) ;
   void (*refill_desc3)(void *, struct dma_desc *) ;
   void (*clean_desc3)(void *, struct dma_desc *) ;
};
#line 497 
struct stmmac_priv;
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
struct stmmac_tc_ops {
   int (*init)(struct stmmac_priv *) ;
   int (*setup_cls_u32)(struct stmmac_priv *, struct tc_cls_u32_offload *) ;
   int (*setup_cbs)(struct stmmac_priv *, struct tc_cbs_qopt_offload *) ;
   int (*setup_cls)(struct stmmac_priv *, struct flow_cls_offload *) ;
};
#line 526 
struct stmmac_counters;
#line 539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
struct stmmac_mmc_ops {
   void (*ctrl)(void *, unsigned int ) ;
   void (*intr_all_mask)(void *) ;
   void (*read)(void *, struct stmmac_counters *) ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/mmc.h"
struct stmmac_counters {
   unsigned int mmc_tx_octetcount_gb ;
   unsigned int mmc_tx_framecount_gb ;
   unsigned int mmc_tx_broadcastframe_g ;
   unsigned int mmc_tx_multicastframe_g ;
   unsigned int mmc_tx_64_octets_gb ;
   unsigned int mmc_tx_65_to_127_octets_gb ;
   unsigned int mmc_tx_128_to_255_octets_gb ;
   unsigned int mmc_tx_256_to_511_octets_gb ;
   unsigned int mmc_tx_512_to_1023_octets_gb ;
   unsigned int mmc_tx_1024_to_max_octets_gb ;
   unsigned int mmc_tx_unicast_gb ;
   unsigned int mmc_tx_multicast_gb ;
   unsigned int mmc_tx_broadcast_gb ;
   unsigned int mmc_tx_underflow_error ;
   unsigned int mmc_tx_singlecol_g ;
   unsigned int mmc_tx_multicol_g ;
   unsigned int mmc_tx_deferred ;
   unsigned int mmc_tx_latecol ;
   unsigned int mmc_tx_exesscol ;
   unsigned int mmc_tx_carrier_error ;
   unsigned int mmc_tx_octetcount_g ;
   unsigned int mmc_tx_framecount_g ;
   unsigned int mmc_tx_excessdef ;
   unsigned int mmc_tx_pause_frame ;
   unsigned int mmc_tx_vlan_frame_g ;
   unsigned int mmc_rx_framecount_gb ;
   unsigned int mmc_rx_octetcount_gb ;
   unsigned int mmc_rx_octetcount_g ;
   unsigned int mmc_rx_broadcastframe_g ;
   unsigned int mmc_rx_multicastframe_g ;
   unsigned int mmc_rx_crc_error ;
   unsigned int mmc_rx_align_error ;
   unsigned int mmc_rx_run_error ;
   unsigned int mmc_rx_jabber_error ;
   unsigned int mmc_rx_undersize_g ;
   unsigned int mmc_rx_oversize_g ;
   unsigned int mmc_rx_64_octets_gb ;
   unsigned int mmc_rx_65_to_127_octets_gb ;
   unsigned int mmc_rx_128_to_255_octets_gb ;
   unsigned int mmc_rx_256_to_511_octets_gb ;
   unsigned int mmc_rx_512_to_1023_octets_gb ;
   unsigned int mmc_rx_1024_to_max_octets_gb ;
   unsigned int mmc_rx_unicast_g ;
   unsigned int mmc_rx_length_error ;
   unsigned int mmc_rx_autofrangetype ;
   unsigned int mmc_rx_pause_frames ;
   unsigned int mmc_rx_fifo_overflow ;
   unsigned int mmc_rx_vlan_frames_gb ;
   unsigned int mmc_rx_watchdog_error ;
   unsigned int mmc_rx_ipc_intr_mask ;
   unsigned int mmc_rx_ipc_intr ;
   unsigned int mmc_rx_ipv4_gd ;
   unsigned int mmc_rx_ipv4_hderr ;
   unsigned int mmc_rx_ipv4_nopay ;
   unsigned int mmc_rx_ipv4_frag ;
   unsigned int mmc_rx_ipv4_udsbl ;
   unsigned int mmc_rx_ipv4_gd_octets ;
   unsigned int mmc_rx_ipv4_hderr_octets ;
   unsigned int mmc_rx_ipv4_nopay_octets ;
   unsigned int mmc_rx_ipv4_frag_octets ;
   unsigned int mmc_rx_ipv4_udsbl_octets ;
   unsigned int mmc_rx_ipv6_gd_octets ;
   unsigned int mmc_rx_ipv6_hderr_octets ;
   unsigned int mmc_rx_ipv6_nopay_octets ;
   unsigned int mmc_rx_ipv6_gd ;
   unsigned int mmc_rx_ipv6_hderr ;
   unsigned int mmc_rx_ipv6_nopay ;
   unsigned int mmc_rx_udp_gd ;
   unsigned int mmc_rx_udp_err ;
   unsigned int mmc_rx_tcp_gd ;
   unsigned int mmc_rx_tcp_err ;
   unsigned int mmc_rx_icmp_gd ;
   unsigned int mmc_rx_icmp_err ;
   unsigned int mmc_rx_udp_gd_octets ;
   unsigned int mmc_rx_udp_err_octets ;
   unsigned int mmc_rx_tcp_gd_octets ;
   unsigned int mmc_rx_tcp_err_octets ;
   unsigned int mmc_rx_icmp_gd_octets ;
   unsigned int mmc_rx_icmp_err_octets ;
   unsigned int mmc_tx_fpe_fragment_cntr ;
   unsigned int mmc_tx_hold_req_cntr ;
   unsigned int mmc_rx_packet_assembly_err_cntr ;
   unsigned int mmc_rx_packet_smd_err_cntr ;
   unsigned int mmc_rx_packet_assembly_ok_cntr ;
   unsigned int mmc_rx_fpe_fragment_cntr ;
};
#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
struct stmmac_safety_stats {
   unsigned long mac_errors[32U] ;
   unsigned long mtl_errors[32U] ;
   unsigned long dma_errors[32U] ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
struct rgmii_adv {
   unsigned int pause ;
   unsigned int duplex ;
   unsigned int lp_pause ;
   unsigned int lp_duplex ;
};
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
struct __anonstruct_xgmii_2824 {
   u32 speed2500 ;
   u32 speed5000 ;
   u32 speed10000 ;
};
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
struct mac_link {
   u32 speed_mask ;
   u32 speed10 ;
   u32 speed100 ;
   u32 speed1000 ;
   u32 speed2500 ;
   u32 duplex ;
   struct __anonstruct_xgmii_2824 xgmii ;
};
#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
struct mii_regs {
   unsigned int addr ;
   unsigned int data ;
   unsigned int addr_shift ;
   unsigned int reg_shift ;
   unsigned int addr_mask ;
   unsigned int reg_mask ;
   unsigned int clk_csr_shift ;
   unsigned int clk_csr_mask ;
};
#line 435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
struct mac_device_info {
   struct stmmac_ops *mac ;
   struct stmmac_desc_ops *desc ;
   struct stmmac_dma_ops *dma ;
   struct stmmac_mode_ops *mode ;
   struct stmmac_hwtimestamp *ptp ;
   struct stmmac_tc_ops *tc ;
   struct stmmac_mmc_ops *mmc ;
   struct mii_regs mii ;
   struct mac_link link ;
   void *pcsr ;
   unsigned int multicast_filter_bins ;
   unsigned int unicast_filter_entries ;
   unsigned int mcast_bits_log2 ;
   unsigned int rx_csum ;
   unsigned int pcs ;
   unsigned int pmt ;
   unsigned int ps ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_clock_time {
   __s64 sec ;
   __u32 nsec ;
   __u32 reserved ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_extts_request {
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[2U] ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_perout_request {
   struct ptp_clock_time start ;
   struct ptp_clock_time period ;
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[4U] ;
};
#line 138 
enum ptp_pin_function {
    PTP_PF_NONE = 0,
    PTP_PF_EXTTS = 1,
    PTP_PF_PEROUT = 2,
    PTP_PF_PHYSYNC = 3
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_pin_desc {
   char name[64U] ;
   unsigned int index ;
   unsigned int func ;
   unsigned int chan ;
   unsigned int rsv[5U] ;
};
#line 205 
enum ldv_16704 {
    PTP_CLK_REQ_EXTTS = 0,
    PTP_CLK_REQ_PEROUT = 1,
    PTP_CLK_REQ_PPS = 2
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
union __anonunion_2825 {
   struct ptp_extts_request extts ;
   struct ptp_perout_request perout ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_request {
   enum ldv_16704 type ;
   union __anonunion_2825 __anonCompField_ptp_clock_request_162 ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_info {
   struct module *owner ;
   char name[16U] ;
   s32 max_adj ;
   int n_alarm ;
   int n_ext_ts ;
   int n_per_out ;
   int n_pins ;
   int pps ;
   struct ptp_pin_desc *pin_config ;
   int (*adjfine)(struct ptp_clock_info *, long ) ;
   int (*adjfreq)(struct ptp_clock_info *, s32 ) ;
   int (*adjtime)(struct ptp_clock_info *, s64 ) ;
   int (*gettime64)(struct ptp_clock_info *, struct timespec64 *) ;
   int (*gettimex64)(struct ptp_clock_info *, struct timespec64 *, struct ptp_system_timestamp *) ;
   int (*getcrosststamp)(struct ptp_clock_info *, struct system_device_crosststamp *) ;
   int (*settime64)(struct ptp_clock_info *, struct timespec64 *) ;
   int (*enable)(struct ptp_clock_info *, struct ptp_clock_request *, int ) ;
   int (*verify)(struct ptp_clock_info *, unsigned int , enum ptp_pin_function , unsigned int ) ;
   long (*do_aux_work)(struct ptp_clock_info *) ;
};
#line 144 
struct ptp_clock;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/net_tstamp.h"
struct hwtstamp_config {
   int flags ;
   int tx_type ;
   int rx_filter ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptr_ring.h"
struct ptr_ring {
   int producer ;
   spinlock_t producer_lock ;
   int consumer_head ;
   int consumer_tail ;
   spinlock_t consumer_lock ;
   int size ;
   int batch ;
   void **queue ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/page_pool.h"
struct pp_alloc_cache {
   u32 count ;
   void *cache[128U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/page_pool.h"
struct page_pool_params {
   unsigned int flags ;
   unsigned int order ;
   unsigned int pool_size ;
   int nid ;
   struct device *dev ;
   enum dma_data_direction dma_dir ;
   unsigned int max_len ;
   unsigned int offset ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/page_pool.h"
struct page_pool {
   struct page_pool_params p ;
   struct delayed_work release_dw ;
   void (*disconnect)(void *) ;
   unsigned long defer_start ;
   unsigned long defer_warn ;
   u32 pages_state_hold_cnt ;
   struct pp_alloc_cache alloc ;
   struct ptr_ring ring ;
   atomic_t pages_state_release_cnt ;
   refcount_t user_cnt ;
   u64 destroy_cnt ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
struct stmmac_tx_info {
   dma_addr_t buf ;
   bool map_as_page ;
   unsigned int len ;
   bool last_segment ;
   bool is_jumbo ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
struct stmmac_tx_queue {
   u32 tx_count_frames ;
   struct timer_list txtimer ;
   u32 queue_index ;
   struct stmmac_priv *priv_data ;
   struct dma_extended_desc *dma_etx ;
   struct dma_desc *dma_tx ;
   struct sk_buff **tx_skbuff ;
   struct stmmac_tx_info *tx_skbuff_dma ;
   unsigned int cur_tx ;
   unsigned int dirty_tx ;
   dma_addr_t dma_tx_phy ;
   u32 tx_tail_addr ;
   u32 mss ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
struct stmmac_rx_buffer {
   struct page *page ;
   struct page *sec_page ;
   dma_addr_t addr ;
   dma_addr_t sec_addr ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
struct __anonstruct_state_2837 {
   struct sk_buff *skb ;
   unsigned int len ;
   unsigned int error ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
struct stmmac_rx_queue {
   u32 rx_count_frames ;
   u32 queue_index ;
   struct page_pool *page_pool ;
   struct stmmac_rx_buffer *buf_pool ;
   struct stmmac_priv *priv_data ;
   struct dma_extended_desc *dma_erx ;
   struct dma_desc *dma_rx ;
   unsigned int cur_rx ;
   unsigned int dirty_rx ;
   u32 rx_zeroc_thresh ;
   dma_addr_t dma_rx_phy ;
   u32 rx_tail_addr ;
   unsigned int state_saved ;
   struct __anonstruct_state_2837 state ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
struct stmmac_channel {
   struct napi_struct rx_napi ;
   struct napi_struct tx_napi ;
   struct stmmac_priv *priv_data ;
   u32 index ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
struct __anonstruct_val_2838 {
   u32 match_data ;
   u32 match_en ;
   u8 af : 1 ;
   u8 rf : 1 ;
   u8 im : 1 ;
   u8 nc : 1 ;
   u8 res1 : 4 ;
   u8 frame_offset ;
   u8 ok_index ;
   u8 dma_ch_no ;
   u32 res2 ;
} __attribute__((__packed__));
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
struct stmmac_tc_entry {
   bool in_use ;
   bool in_hw ;
   bool is_last ;
   bool is_frag ;
   void *frag_ptr ;
   unsigned int table_pos ;
   u32 handle ;
   u32 prio ;
   struct __anonstruct_val_2838 val ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
struct stmmac_pps_cfg {
   bool available ;
   struct timespec64 start ;
   struct timespec64 period ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
struct stmmac_rss {
   int enable ;
   u8 key[40U] ;
   u32 table[256U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
struct stmmac_flow_entry {
   unsigned long cookie ;
   unsigned long action ;
   u8 ip_proto ;
   int in_use ;
   int idx ;
   int is_l4 ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
struct stmmac_priv {
   u32 tx_coal_frames ;
   u32 tx_coal_timer ;
   u32 rx_coal_frames ;
   int tx_coalesce ;
   int hwts_tx_en ;
   bool tx_path_in_lpi_mode ;
   bool tso ;
   int sph ;
   u32 sarc_type ;
   unsigned int dma_buf_sz ;
   unsigned int rx_copybreak ;
   u32 rx_riwt ;
   int hwts_rx_en ;
   void *ioaddr ;
   struct net_device *dev ;
   struct device *device ;
   struct mac_device_info *hw ;
   int (*hwif_quirks)(struct stmmac_priv *) ;
   struct mutex lock ;
   struct stmmac_rx_queue rx_queue[8U] ;
   struct stmmac_tx_queue tx_queue[8U] ;
   struct stmmac_channel channel[8U] ;
   int speed ;
   unsigned int flow_ctrl ;
   unsigned int pause ;
   struct mii_bus *mii ;
   int mii_irq[32U] ;
   struct phylink_config phylink_config ;
   struct phylink *phylink ;
   struct stmmac_extra_stats xstats ;
   struct stmmac_safety_stats sstats ;
   struct plat_stmmacenet_data *plat ;
   struct dma_features dma_cap ;
   struct stmmac_counters mmc ;
   int hw_cap_support ;
   int synopsys_id ;
   u32 msg_enable ;
   int wolopts ;
   int wol_irq ;
   int clk_csr ;
   struct timer_list eee_ctrl_timer ;
   int lpi_irq ;
   int eee_enabled ;
   int eee_active ;
   int tx_lpi_timer ;
   unsigned int mode ;
   unsigned int chain_mode ;
   int extend_desc ;
   struct hwtstamp_config tstamp_config ;
   struct ptp_clock *ptp_clock ;
   struct ptp_clock_info ptp_clock_ops ;
   unsigned int default_addend ;
   u32 sub_second_inc ;
   u32 systime_flags ;
   u32 adv_ts ;
   int use_riwt ;
   int irq_wake ;
   spinlock_t ptp_lock ;
   void *mmcaddr ;
   void *ptpaddr ;
   unsigned long active_vlans[64U] ;
   struct dentry *dbgfs_dir ;
   unsigned long state ;
   struct workqueue_struct *wq ;
   struct work_struct service_task ;
   unsigned int tc_entries_max ;
   unsigned int tc_off_max ;
   struct stmmac_tc_entry *tc_entries ;
   unsigned int flow_entries_max ;
   struct stmmac_flow_entry *flow_entries ;
   struct stmmac_pps_cfg pps[4U] ;
   struct stmmac_rss rss ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u8 uint8_t;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 uint64_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 288 
struct hd_geometry;
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_6095 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_6094 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_6095 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_6094 read_descriptor_t;
#line 1771 
struct block_device_operations;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_8932 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_8932 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector {
   unsigned int used_keys ;
   unsigned short offset[27U] ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_6150 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_6151 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_6152 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_6153 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_6150 ports ;
   struct __anonstruct_icmpt_6151 icmpt ;
   struct __anonstruct_dnports_6152 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_6153 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_6154 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_6154 u ;
} __attribute__((__aligned__(8)));
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct flow_rule;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_data/dsa.h"
struct dsa_chip_data {
   struct device *host_dev ;
   int sw_addr ;
   struct device *netdev[12U] ;
   int eeprom_len ;
   struct device_node *of_node ;
   char *port_names[12U] ;
   struct device_node *port_dn[12U] ;
   s8 rtable[4U] ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_data/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   struct net_device *of_netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phylink.h"
struct phylink_link_state {
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
   phy_interface_t interface ;
   int speed ;
   int duplex ;
   int pause ;
   unsigned int link : 1 ;
   unsigned int an_enabled : 1 ;
   unsigned int an_complete : 1 ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_6315 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_6314 {
   struct __anonstruct_6315 __anonCompField___anonunion_6314_153 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_6314 __anonCompField_sock_cgroup_data_154 ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 178 
struct request_sock;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 925 
struct devlink;
#line 2367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct packet_type {
   __be16 type ;
   bool ignore_outgoing ;
   struct net_device *dev ;
   int (*func)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   void (*list_func)(struct list_head *, struct packet_type *, struct net_device *) ;
   bool (*id_match)(struct packet_type *, struct sock *) ;
   void *af_packet_priv ;
   struct list_head list ;
};
#line 4991 
enum devlink_port_type {
    DEVLINK_PORT_TYPE_NOTSET = 0,
    DEVLINK_PORT_TYPE_AUTO = 1,
    DEVLINK_PORT_TYPE_ETH = 2,
    DEVLINK_PORT_TYPE_IB = 3
};
#line 4998 
enum devlink_sb_pool_type {
    DEVLINK_SB_POOL_TYPE_INGRESS = 0,
    DEVLINK_SB_POOL_TYPE_EGRESS = 1
};
#line 5003 
enum devlink_sb_threshold_type {
    DEVLINK_SB_THRESHOLD_TYPE_STATIC = 0,
    DEVLINK_SB_THRESHOLD_TYPE_DYNAMIC = 1
};
#line 5020 
enum devlink_eswitch_encap_mode {
    DEVLINK_ESWITCH_ENCAP_MODE_NONE = 0,
    DEVLINK_ESWITCH_ENCAP_MODE_BASIC = 1
};
#line 5025 
enum devlink_port_flavour {
    DEVLINK_PORT_FLAVOUR_PHYSICAL = 0,
    DEVLINK_PORT_FLAVOUR_CPU = 1,
    DEVLINK_PORT_FLAVOUR_DSA = 2,
    DEVLINK_PORT_FLAVOUR_PCI_PF = 3,
    DEVLINK_PORT_FLAVOUR_PCI_VF = 4
};
#line 5033 
enum devlink_param_cmode {
    DEVLINK_PARAM_CMODE_RUNTIME = 0,
    DEVLINK_PARAM_CMODE_DRIVERINIT = 1,
    DEVLINK_PARAM_CMODE_PERMANENT = 2,
    __DEVLINK_PARAM_CMODE_MAX = 3,
    DEVLINK_PARAM_CMODE_MAX = 2
};
#line 5062 
enum devlink_trap_action {
    DEVLINK_TRAP_ACTION_DROP = 0,
    DEVLINK_TRAP_ACTION_TRAP = 1
};
#line 5067 
enum devlink_trap_type {
    DEVLINK_TRAP_TYPE_DROP = 0,
    DEVLINK_TRAP_TYPE_EXCEPTION = 1
};
#line 5222 
enum devlink_dpipe_field_mapping_type {
    DEVLINK_DPIPE_FIELD_MAPPING_TYPE_NONE = 0,
    DEVLINK_DPIPE_FIELD_MAPPING_TYPE_IFINDEX = 1
};
#line 5257 
struct devlink_ops;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_dpipe_headers;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink {
   struct list_head list ;
   struct list_head port_list ;
   struct list_head sb_list ;
   struct list_head dpipe_table_list ;
   struct list_head resource_list ;
   struct list_head param_list ;
   struct list_head region_list ;
   u32 snapshot_id ;
   struct list_head reporter_list ;
   struct mutex reporters_lock ;
   struct devlink_dpipe_headers *dpipe_headers ;
   struct list_head trap_list ;
   struct list_head trap_group_list ;
   struct devlink_ops *ops ;
   struct device *dev ;
   possible_net_t _net ;
   struct mutex lock ;
   u8 reload_failed : 1 ;
   u8 reload_enabled : 1 ;
   u8 registered : 1 ;
   char priv[0U] ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_port_phys_attrs {
   u32 port_number ;
   u32 split_subport_number ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_port_pci_pf_attrs {
   u16 pf ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_port_pci_vf_attrs {
   u16 pf ;
   u16 vf ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
union __anonunion_6355 {
   struct devlink_port_phys_attrs phys ;
   struct devlink_port_pci_pf_attrs pci_pf ;
   struct devlink_port_pci_vf_attrs pci_vf ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_port_attrs {
   u8 set : 1 ;
   u8 split : 1 ;
   u8 switch_port : 1 ;
   enum devlink_port_flavour flavour ;
   struct netdev_phys_item_id switch_id ;
   union __anonunion_6355 __anonCompField_devlink_port_attrs_162 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_port {
   struct list_head list ;
   struct list_head param_list ;
   struct devlink *devlink ;
   unsigned int index ;
   bool registered ;
   spinlock_t type_lock ;
   enum devlink_port_type type ;
   enum devlink_port_type desired_type ;
   void *type_dev ;
   struct devlink_port_attrs attrs ;
   struct delayed_work type_warn_dw ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_sb_pool_info {
   enum devlink_sb_pool_type pool_type ;
   u32 size ;
   enum devlink_sb_threshold_type threshold_type ;
   u32 cell_size ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_dpipe_field {
   char *name ;
   unsigned int id ;
   unsigned int bitwidth ;
   enum devlink_dpipe_field_mapping_type mapping_type ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_dpipe_header {
   char *name ;
   unsigned int id ;
   struct devlink_dpipe_field *fields ;
   unsigned int fields_count ;
   bool global ;
};
#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_dpipe_headers {
   struct devlink_dpipe_header **headers ;
   unsigned int headers_count ;
};
#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
union devlink_param_value {
   u8 vu8 ;
   u16 vu16 ;
   u32 vu32 ;
   char vstr[32U] ;
   bool vbool ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_param_gset_ctx {
   union devlink_param_value val ;
   enum devlink_param_cmode cmode ;
};
#line 410 
struct devlink_info_req;
#line 533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_trap_group {
   char *name ;
   u16 id ;
   bool generic ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_trap {
   enum devlink_trap_type type ;
   enum devlink_trap_action init_action ;
   bool generic ;
   u16 id ;
   char *name ;
   struct devlink_trap_group group ;
   u32 metadata_cap ;
};
#line 698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_ops {
   int (*reload_down)(struct devlink *, bool , struct netlink_ext_ack *) ;
   int (*reload_up)(struct devlink *, struct netlink_ext_ack *) ;
   int (*port_type_set)(struct devlink_port *, enum devlink_port_type ) ;
   int (*port_split)(struct devlink *, unsigned int , unsigned int , struct netlink_ext_ack *) ;
   int (*port_unsplit)(struct devlink *, unsigned int , struct netlink_ext_ack *) ;
   int (*sb_pool_get)(struct devlink *, unsigned int , u16 , struct devlink_sb_pool_info *) ;
   int (*sb_pool_set)(struct devlink *, unsigned int , u16 , u32 , enum devlink_sb_threshold_type , struct netlink_ext_ack *) ;
   int (*sb_port_pool_get)(struct devlink_port *, unsigned int , u16 , u32 *) ;
   int (*sb_port_pool_set)(struct devlink_port *, unsigned int , u16 , u32 , struct netlink_ext_ack *) ;
   int (*sb_tc_pool_bind_get)(struct devlink_port *, unsigned int , u16 , enum devlink_sb_pool_type , u16 *, u32 *) ;
   int (*sb_tc_pool_bind_set)(struct devlink_port *, unsigned int , u16 , enum devlink_sb_pool_type , u16 , u32 , struct netlink_ext_ack *) ;
   int (*sb_occ_snapshot)(struct devlink *, unsigned int ) ;
   int (*sb_occ_max_clear)(struct devlink *, unsigned int ) ;
   int (*sb_occ_port_pool_get)(struct devlink_port *, unsigned int , u16 , u32 *, u32 *) ;
   int (*sb_occ_tc_port_bind_get)(struct devlink_port *, unsigned int , u16 , enum devlink_sb_pool_type , u32 *, u32 *) ;
   int (*eswitch_mode_get)(struct devlink *, u16 *) ;
   int (*eswitch_mode_set)(struct devlink *, u16 , struct netlink_ext_ack *) ;
   int (*eswitch_inline_mode_get)(struct devlink *, u8 *) ;
   int (*eswitch_inline_mode_set)(struct devlink *, u8 , struct netlink_ext_ack *) ;
   int (*eswitch_encap_mode_get)(struct devlink *, enum devlink_eswitch_encap_mode *) ;
   int (*eswitch_encap_mode_set)(struct devlink *, enum devlink_eswitch_encap_mode , struct netlink_ext_ack *) ;
   int (*info_get)(struct devlink *, struct devlink_info_req *, struct netlink_ext_ack *) ;
   int (*flash_update)(struct devlink *, char *, char *, struct netlink_ext_ack *) ;
   int (*trap_init)(struct devlink *, struct devlink_trap *, void *) ;
   void (*trap_fini)(struct devlink *, struct devlink_trap *, void *) ;
   int (*trap_action_set)(struct devlink *, struct devlink_trap *, enum devlink_trap_action ) ;
   int (*trap_group_init)(struct devlink *, struct devlink_trap_group *) ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_6363 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_6362 {
   void *validation_data ;
   struct __anonstruct_6363 __anonCompField___anonunion_6362_164 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_6362 __anonCompField_nla_policy_165 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_6364 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_6364 __anonCompField_bdi_writeback_166 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_6365 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_6365 __anonCompField_bio_167 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_6368 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_6369 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_6371 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_6372 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_6370 {
   struct __anonstruct_elv_6371 elv ;
   struct __anonstruct_flush_6372 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_6373 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_6368 __anonCompField_request_168 ;
   union __anonunion_6369 __anonCompField_request_169 ;
   union __anonunion_6370 __anonCompField_request_170 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_6373 __anonCompField_request_171 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match {
   struct flow_dissector *dissector ;
   void *mask ;
   void *key ;
};
#line 112 
enum flow_action_id {
    FLOW_ACTION_ACCEPT = 0,
    FLOW_ACTION_DROP = 1,
    FLOW_ACTION_TRAP = 2,
    FLOW_ACTION_GOTO = 3,
    FLOW_ACTION_REDIRECT = 4,
    FLOW_ACTION_MIRRED = 5,
    FLOW_ACTION_REDIRECT_INGRESS = 6,
    FLOW_ACTION_MIRRED_INGRESS = 7,
    FLOW_ACTION_VLAN_PUSH = 8,
    FLOW_ACTION_VLAN_POP = 9,
    FLOW_ACTION_VLAN_MANGLE = 10,
    FLOW_ACTION_TUNNEL_ENCAP = 11,
    FLOW_ACTION_TUNNEL_DECAP = 12,
    FLOW_ACTION_MANGLE = 13,
    FLOW_ACTION_ADD = 14,
    FLOW_ACTION_CSUM = 15,
    FLOW_ACTION_MARK = 16,
    FLOW_ACTION_PTYPE = 17,
    FLOW_ACTION_WAKE = 18,
    FLOW_ACTION_QUEUE = 19,
    FLOW_ACTION_SAMPLE = 20,
    FLOW_ACTION_POLICE = 21,
    FLOW_ACTION_CT = 22,
    FLOW_ACTION_MPLS_PUSH = 23,
    FLOW_ACTION_MPLS_POP = 24,
    FLOW_ACTION_MPLS_MANGLE = 25,
    NUM_FLOW_ACTIONS = 26
};
#line 142 
enum flow_action_mangle_base {
    FLOW_ACT_MANGLE_UNSPEC = 0,
    FLOW_ACT_MANGLE_HDR_TYPE_ETH = 1,
    FLOW_ACT_MANGLE_HDR_TYPE_IP4 = 2,
    FLOW_ACT_MANGLE_HDR_TYPE_IP6 = 3,
    FLOW_ACT_MANGLE_HDR_TYPE_TCP = 4,
    FLOW_ACT_MANGLE_HDR_TYPE_UDP = 5
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_vlan_6451 {
   u16 vid ;
   __be16 proto ;
   u8 prio ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mangle_6452 {
   enum flow_action_mangle_base htype ;
   u32 offset ;
   u32 mask ;
   u32 val ;
};
#line 159 
struct ip_tunnel_info;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_queue_6453 {
   u32 ctx ;
   u32 index ;
   u8 vf ;
};
#line 159 
struct psample_group;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_sample_6454 {
   struct psample_group *psample_group ;
   u32 rate ;
   u32 trunc_size ;
   bool truncate ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_police_6455 {
   s64 burst ;
   u64 rate_bytes_ps ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_ct_6456 {
   int action ;
   u16 zone ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mpls_push_6457 {
   u32 label ;
   __be16 proto ;
   u8 tc ;
   u8 bos ;
   u8 ttl ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mpls_pop_6458 {
   __be16 proto ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mpls_mangle_6459 {
   u32 label ;
   u8 tc ;
   u8 bos ;
   u8 ttl ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
union __anonunion_6450 {
   u32 chain_index ;
   struct net_device *dev ;
   struct __anonstruct_vlan_6451 vlan ;
   struct __anonstruct_mangle_6452 mangle ;
   struct ip_tunnel_info *tunnel ;
   u32 csum_flags ;
   u32 mark ;
   u16 ptype ;
   struct __anonstruct_queue_6453 queue ;
   struct __anonstruct_sample_6454 sample ;
   struct __anonstruct_police_6455 police ;
   struct __anonstruct_ct_6456 ct ;
   struct __anonstruct_mpls_push_6457 mpls_push ;
   struct __anonstruct_mpls_pop_6458 mpls_pop ;
   struct __anonstruct_mpls_mangle_6459 mpls_mangle ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_action_entry {
   enum flow_action_id id ;
   void (*destructor)(void *) ;
   void *destructor_priv ;
   union __anonunion_6450 __anonCompField_flow_action_entry_172 ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_action {
   unsigned int num_entries ;
   struct flow_action_entry entries[0U] ;
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_rule {
   struct flow_match match ;
   struct flow_action action ;
};
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_stats {
   u64 pkts ;
   u64 bytes ;
   u64 lastused ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 341 
enum flow_cls_command {
    FLOW_CLS_REPLACE = 0,
    FLOW_CLS_DESTROY = 1,
    FLOW_CLS_STATS = 2,
    FLOW_CLS_TMPLT_CREATE = 3,
    FLOW_CLS_TMPLT_DESTROY = 4
};
#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_cls_common_offload {
   u32 chain_index ;
   __be16 protocol ;
   u32 prio ;
   struct netlink_ext_ack *extack ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_cls_offload {
   struct flow_cls_common_offload common ;
   enum flow_cls_command command ;
   unsigned long cookie ;
   struct flow_rule *rule ;
   struct flow_stats stats ;
   u32 classid ;
};
#line 412 
struct Qdisc_ops;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_6467 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_6468 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_6466 {
   struct __anonstruct_6467 __anonCompField___anonunion_6466_173 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_6468 __anonCompField___anonunion_6466_174 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_6466 __anonCompField_tcf_result_175 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_6470 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_6470 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_6483 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_6483 __anonCompField_bpf_prog_177 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_6505 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_6505 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_6507 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6506 {
   __addrpair skc_addrpair ;
   struct __anonstruct_6507 __anonCompField___anonunion_6506_179 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6508 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_6510 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6509 {
   __portpair skc_portpair ;
   struct __anonstruct_6510 __anonCompField___anonunion_6509_182 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6511 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6512 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6513 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6514 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6515 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_6506 __anonCompField_sock_common_180 ;
   union __anonunion_6508 __anonCompField_sock_common_181 ;
   union __anonunion_6509 __anonCompField_sock_common_183 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_6511 __anonCompField_sock_common_184 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_6512 __anonCompField_sock_common_185 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_6513 __anonCompField_sock_common_186 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_6514 __anonCompField_sock_common_187 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_6515 __anonCompField_sock_common_188 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_6516 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6517 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6518 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_6516 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_6517 __anonCompField_sock_189 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_6518 __anonCompField_sock_190 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_6553 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_6553 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/switchdev.h"
enum switchdev_obj_id {
    SWITCHDEV_OBJ_ID_UNDEFINED = 0,
    SWITCHDEV_OBJ_ID_PORT_VLAN = 1,
    SWITCHDEV_OBJ_ID_PORT_MDB = 2,
    SWITCHDEV_OBJ_ID_HOST_MDB = 3
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/switchdev.h"
struct switchdev_obj {
   struct net_device *orig_dev ;
   enum switchdev_obj_id id ;
   u32 flags ;
   void *complete_priv ;
   void (*complete)(struct net_device *, int , void *) ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/switchdev.h"
struct switchdev_obj_port_vlan {
   struct switchdev_obj obj ;
   u16 flags ;
   u16 vid_begin ;
   u16 vid_end ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/switchdev.h"
struct switchdev_obj_port_mdb {
   struct switchdev_obj obj ;
   unsigned char addr[6U] ;
   u16 vid ;
};
#line 198 
struct fixed_phy_status;
#line 199 
enum dsa_tag_protocol {
    DSA_TAG_PROTO_NONE = 0,
    DSA_TAG_PROTO_BRCM = 1,
    DSA_TAG_PROTO_BRCM_PREPEND = 2,
    DSA_TAG_PROTO_DSA = 3,
    DSA_TAG_PROTO_EDSA = 4,
    DSA_TAG_PROTO_GSWIP = 5,
    DSA_TAG_PROTO_KSZ9477 = 6,
    DSA_TAG_PROTO_KSZ9893 = 7,
    DSA_TAG_PROTO_LAN9303 = 8,
    DSA_TAG_PROTO_MTK = 9,
    DSA_TAG_PROTO_QCA = 10,
    DSA_TAG_PROTO_TRAILER = 11,
    DSA_TAG_PROTO_8021Q = 12,
    DSA_TAG_PROTO_SJA1105 = 13,
    DSA_TAG_PROTO_KSZ8795 = 14,
    DSA_TAG_PROTO_OCELOT = 15
};
#line 218 
struct dsa_switch;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dsa.h"
struct dsa_device_ops {
   struct sk_buff *(*xmit)(struct sk_buff *, struct net_device *) ;
   struct sk_buff *(*rcv)(struct sk_buff *, struct net_device *, struct packet_type *) ;
   int (*flow_dissect)(struct sk_buff *, __be16 *, int *) ;
   bool (*filter)(struct sk_buff *, struct net_device *) ;
   unsigned int overhead ;
   char *name ;
   enum dsa_tag_protocol proto ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dsa.h"
struct dsa_switch_tree {
   struct list_head list ;
   struct raw_notifier_head nh ;
   unsigned int index ;
   struct kref refcount ;
   bool setup ;
   struct dsa_platform_data *pd ;
   struct list_head ports ;
   struct list_head rtable ;
};
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dsa.h"
struct dsa_mall_mirror_tc_entry {
   u8 to_local_port ;
   bool ingress ;
};
#line 152 
enum ldv_20172 {
    DSA_PORT_TYPE_UNUSED = 0,
    DSA_PORT_TYPE_CPU = 1,
    DSA_PORT_TYPE_DSA = 2,
    DSA_PORT_TYPE_USER = 3
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dsa.h"
union __anonunion_6647 {
   struct net_device *master ;
   struct net_device *slave ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dsa.h"
struct dsa_port {
   union __anonunion_6647 __anonCompField_dsa_port_198 ;
   struct dsa_device_ops *tag_ops ;
   struct dsa_switch_tree *dst ;
   struct sk_buff *(*rcv)(struct sk_buff *, struct net_device *, struct packet_type *) ;
   bool (*filter)(struct sk_buff *, struct net_device *) ;
   enum ldv_20172 type ;
   struct dsa_switch *ds ;
   unsigned int index ;
   char *name ;
   struct dsa_port *cpu_dp ;
   char *mac ;
   struct device_node *dn ;
   unsigned int ageing_time ;
   bool vlan_filtering ;
   u8 stp_state ;
   struct net_device *bridge_dev ;
   struct devlink_port devlink_port ;
   struct phylink *pl ;
   struct phylink_config pl_config ;
   struct work_struct xmit_work ;
   struct sk_buff_head xmit_queue ;
   struct list_head list ;
   void *priv ;
   struct ethtool_ops *orig_ethtool_ops ;
   struct net_device_ops *orig_ndo_ops ;
   bool setup ;
};
#line 228 
struct dsa_switch_ops;
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dsa.h"
struct dsa_switch {
   bool setup ;
   struct device *dev ;
   struct dsa_switch_tree *dst ;
   unsigned int index ;
   struct notifier_block nb ;
   void *priv ;
   struct dsa_chip_data *cd ;
   struct dsa_switch_ops *ops ;
   u32 phys_mii_mask ;
   struct mii_bus *slave_mii_bus ;
   unsigned int ageing_time_min ;
   unsigned int ageing_time_max ;
   struct devlink *devlink ;
   unsigned int num_tx_queues ;
   bool vlan_filtering_is_global ;
   bool vlan_filtering ;
   size_t num_ports ;
};
#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dsa.h"
typedef int dsa_fdb_dump_cb_t(unsigned char *, u16 , bool , void *);
#line 378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dsa.h"
struct dsa_switch_ops {
   enum dsa_tag_protocol (*get_tag_protocol)(struct dsa_switch *, int ) ;
   int (*setup)(struct dsa_switch *) ;
   void (*teardown)(struct dsa_switch *) ;
   u32 (*get_phy_flags)(struct dsa_switch *, int ) ;
   int (*phy_read)(struct dsa_switch *, int , int ) ;
   int (*phy_write)(struct dsa_switch *, int , int , u16 ) ;
   void (*adjust_link)(struct dsa_switch *, int , struct phy_device *) ;
   void (*fixed_link_update)(struct dsa_switch *, int , struct fixed_phy_status *) ;
   void (*phylink_validate)(struct dsa_switch *, int , unsigned long *, struct phylink_link_state *) ;
   int (*phylink_mac_link_state)(struct dsa_switch *, int , struct phylink_link_state *) ;
   void (*phylink_mac_config)(struct dsa_switch *, int , unsigned int , struct phylink_link_state *) ;
   void (*phylink_mac_an_restart)(struct dsa_switch *, int ) ;
   void (*phylink_mac_link_down)(struct dsa_switch *, int , unsigned int , phy_interface_t ) ;
   void (*phylink_mac_link_up)(struct dsa_switch *, int , unsigned int , phy_interface_t , struct phy_device *) ;
   void (*phylink_fixed_state)(struct dsa_switch *, int , struct phylink_link_state *) ;
   void (*get_strings)(struct dsa_switch *, int , u32 , uint8_t *) ;
   void (*get_ethtool_stats)(struct dsa_switch *, int , uint64_t *) ;
   int (*get_sset_count)(struct dsa_switch *, int , int ) ;
   void (*get_ethtool_phy_stats)(struct dsa_switch *, int , uint64_t *) ;
   void (*get_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*set_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*get_ts_info)(struct dsa_switch *, int , struct ethtool_ts_info *) ;
   int (*suspend)(struct dsa_switch *) ;
   int (*resume)(struct dsa_switch *) ;
   int (*port_enable)(struct dsa_switch *, int , struct phy_device *) ;
   void (*port_disable)(struct dsa_switch *, int ) ;
   int (*set_mac_eee)(struct dsa_switch *, int , struct ethtool_eee *) ;
   int (*get_mac_eee)(struct dsa_switch *, int , struct ethtool_eee *) ;
   int (*get_eeprom_len)(struct dsa_switch *) ;
   int (*get_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*get_regs_len)(struct dsa_switch *, int ) ;
   void (*get_regs)(struct dsa_switch *, int , struct ethtool_regs *, void *) ;
   int (*set_ageing_time)(struct dsa_switch *, unsigned int ) ;
   int (*port_bridge_join)(struct dsa_switch *, int , struct net_device *) ;
   void (*port_bridge_leave)(struct dsa_switch *, int , struct net_device *) ;
   void (*port_stp_state_set)(struct dsa_switch *, int , u8 ) ;
   void (*port_fast_age)(struct dsa_switch *, int ) ;
   int (*port_egress_floods)(struct dsa_switch *, int , bool , bool ) ;
   int (*port_vlan_filtering)(struct dsa_switch *, int , bool ) ;
   int (*port_vlan_prepare)(struct dsa_switch *, int , struct switchdev_obj_port_vlan *) ;
   void (*port_vlan_add)(struct dsa_switch *, int , struct switchdev_obj_port_vlan *) ;
   int (*port_vlan_del)(struct dsa_switch *, int , struct switchdev_obj_port_vlan *) ;
   int (*port_fdb_add)(struct dsa_switch *, int , unsigned char *, u16 ) ;
   int (*port_fdb_del)(struct dsa_switch *, int , unsigned char *, u16 ) ;
   int (*port_fdb_dump)(struct dsa_switch *, int , dsa_fdb_dump_cb_t *, void *) ;
   int (*port_mdb_prepare)(struct dsa_switch *, int , struct switchdev_obj_port_mdb *) ;
   void (*port_mdb_add)(struct dsa_switch *, int , struct switchdev_obj_port_mdb *) ;
   int (*port_mdb_del)(struct dsa_switch *, int , struct switchdev_obj_port_mdb *) ;
   int (*get_rxnfc)(struct dsa_switch *, int , struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct dsa_switch *, int , struct ethtool_rxnfc *) ;
   int (*port_mirror_add)(struct dsa_switch *, int , struct dsa_mall_mirror_tc_entry *, bool ) ;
   void (*port_mirror_del)(struct dsa_switch *, int , struct dsa_mall_mirror_tc_entry *) ;
   int (*port_setup_tc)(struct dsa_switch *, int , enum tc_setup_type , void *) ;
   int (*crosschip_bridge_join)(struct dsa_switch *, int , int , struct net_device *) ;
   void (*crosschip_bridge_leave)(struct dsa_switch *, int , int , struct net_device *) ;
   int (*port_hwtstamp_get)(struct dsa_switch *, int , struct ifreq *) ;
   int (*port_hwtstamp_set)(struct dsa_switch *, int , struct ifreq *) ;
   bool (*port_txtstamp)(struct dsa_switch *, int , struct sk_buff *, unsigned int ) ;
   bool (*port_rxtstamp)(struct dsa_switch *, int , struct sk_buff *, unsigned int ) ;
   netdev_tx_t (*port_deferred_xmit)(struct dsa_switch *, int , struct sk_buff *) ;
   int (*devlink_param_get)(struct dsa_switch *, u32 , struct devlink_param_gset_ctx *) ;
   int (*devlink_param_set)(struct dsa_switch *, u32 , struct devlink_param_gset_ctx *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_8851 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_basic {
   __be16 n_proto ;
   u8 ip_proto ;
   u8 padding ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ipv4_addrs {
   __be32 src ;
   __be32 dst ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_9285 {
   __be16 src ;
   __be16 dst ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_9284 {
   __be32 ports ;
   struct __anonstruct_9285 __anonCompField___anonunion_9284_77 ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ports {
   union __anonunion_9284 __anonCompField_flow_dissector_key_ports_78 ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 1163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
enum tca_id {
    TCA_ID_UNSPEC = 0,
    TCA_ID_POLICE = 1,
    TCA_ID_GACT = 5,
    TCA_ID_IPT = 6,
    TCA_ID_PEDIT = 7,
    TCA_ID_MIRRED = 8,
    TCA_ID_NAT = 9,
    TCA_ID_XT = 10,
    TCA_ID_SKBEDIT = 11,
    TCA_ID_VLAN = 12,
    TCA_ID_BPF = 13,
    TCA_ID_CONNMARK = 14,
    TCA_ID_SKBMOD = 15,
    TCA_ID_CSUM = 16,
    TCA_ID_TUNNEL_KEY = 17,
    TCA_ID_SIMP = 22,
    TCA_ID_IFE = 25,
    TCA_ID_SAMPLE = 26,
    TCA_ID_CTINFO = 27,
    TCA_ID_MPLS = 28,
    TCA_ID_CT = 29,
    __TCA_ID_MAX = 255
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_cls.h"
struct tcf_t {
   __u64 install ;
   __u64 lastuse ;
   __u64 expires ;
   __u64 firstuse ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_cls.h"
struct tc_u32_key {
   __be32 mask ;
   __be32 val ;
   int off ;
   int offmask ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_cls.h"
struct tc_u32_sel {
   unsigned char flags ;
   unsigned char offshift ;
   unsigned char nkeys ;
   __be16 offmask ;
   __u16 off ;
   short offoff ;
   short hoff ;
   __be32 hmask ;
   struct tc_u32_key keys[0U] ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/udp.h"
struct udphdr {
   __be16 source ;
   __be16 dest ;
   __be16 len ;
   __sum16 check ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct qdisc_walker {
   int stop ;
   int skip ;
   int count ;
   int (*fn)(struct Qdisc *, unsigned long , struct qdisc_walker *) ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct tc_cbs_qopt_offload {
   u8 enable ;
   s32 queue ;
   s32 hicredit ;
   s32 locredit ;
   s32 idleslope ;
   s32 sendslope ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct __anonstruct_s_9732 {
   unsigned int len ;
   struct callback_head rcu ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
union __anonunion_9731 {
   struct __anonstruct_s_9732 s ;
   void *ptr[0U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct net_generic {
   union __anonunion_9731 __anonCompField_net_generic_190 ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/act_api.h"
struct tcf_idrinfo {
   struct mutex lock ;
   struct idr action_idr ;
   struct net *net ;
};
#line 20 
struct tc_action_ops;
#line 23 
struct tc_cookie;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/act_api.h"
struct tc_action {
   struct tc_action_ops *ops ;
   __u32 type ;
   struct tcf_idrinfo *idrinfo ;
   u32 tcfa_index ;
   refcount_t tcfa_refcnt ;
   atomic_t tcfa_bindcnt ;
   int tcfa_action ;
   struct tcf_t tcfa_tm ;
   struct gnet_stats_basic_packed tcfa_bstats ;
   struct gnet_stats_basic_packed tcfa_bstats_hw ;
   struct gnet_stats_queue tcfa_qstats ;
   struct net_rate_estimator *tcfa_rate_est ;
   spinlock_t tcfa_lock ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_basic_cpu *cpu_bstats_hw ;
   struct gnet_stats_queue *cpu_qstats ;
   struct tc_cookie *act_cookie ;
   struct tcf_chain *goto_chain ;
   u32 tcfa_flags ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/act_api.h"
typedef void (*tc_action_priv_destructor)(void *);
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/act_api.h"
struct tc_action_ops {
   struct list_head head ;
   char kind[16U] ;
   enum tca_id id ;
   size_t size ;
   struct module *owner ;
   int (*act)(struct sk_buff *, struct tc_action *, struct tcf_result *) ;
   int (*dump)(struct sk_buff *, struct tc_action *, int , int ) ;
   void (*cleanup)(struct tc_action *) ;
   int (*lookup)(struct net *, struct tc_action **, u32 ) ;
   int (*init)(struct net *, struct nlattr *, struct nlattr *, struct tc_action **, int , int , bool , struct tcf_proto *, u32 , struct netlink_ext_ack *) ;
   int (*walk)(struct net *, struct sk_buff *, struct netlink_callback *, int , struct tc_action_ops *, struct netlink_ext_ack *) ;
   void (*stats_update)(struct tc_action *, u64 , u32 , u64 , bool ) ;
   size_t (*get_fill_size)(struct tc_action *) ;
   struct net_device *(*get_dev)(struct tc_action *, tc_action_priv_destructor *) ;
   struct psample_group *(*get_psample_group)(struct tc_action *, tc_action_priv_destructor *) ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
struct tcf_walker {
   int stop ;
   int skip ;
   int count ;
   bool nonempty ;
   unsigned long cookie ;
   int (*fn)(struct tcf_proto *, void *, struct tcf_walker *) ;
};
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
struct tcf_exts {
   __u32 type ;
   int nr_actions ;
   struct tc_action **actions ;
   struct net *net ;
   int action ;
   int police ;
};
#line 529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
struct tc_cls_u32_knode {
   struct tcf_exts *exts ;
   struct tcf_result *res ;
   struct tc_u32_sel *sel ;
   u32 handle ;
   u32 val ;
   u32 mask ;
   u32 link_handle ;
   u8 fshift ;
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
struct tc_cls_u32_hnode {
   u32 handle ;
   u32 prio ;
   unsigned int divisor ;
};
#line 545 
enum tc_clsu32_command {
    TC_CLSU32_NEW_KNODE = 0,
    TC_CLSU32_REPLACE_KNODE = 1,
    TC_CLSU32_DELETE_KNODE = 2,
    TC_CLSU32_NEW_HNODE = 3,
    TC_CLSU32_REPLACE_HNODE = 4,
    TC_CLSU32_DELETE_HNODE = 5
};
#line 555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
union __anonunion_9735 {
   struct tc_cls_u32_knode knode ;
   struct tc_cls_u32_hnode hnode ;
};
#line 555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
struct tc_cls_u32_offload {
   struct flow_cls_common_offload common ;
   enum tc_clsu32_command command ;
   union __anonunion_9735 __anonCompField_tc_cls_u32_offload_191 ;
};
#line 678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
struct tc_cookie {
   u8 *data ;
   u32 len ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_arp.h"
struct arphdr {
   __be16 ar_hrd ;
   __be16 ar_pro ;
   unsigned char ar_hln ;
   unsigned char ar_pln ;
   __be16 ar_op ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
union __anonunion_9778 {
   struct hlist_head head ;
   struct hlist_nulls_head nulls_head ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   unsigned int count ;
   union __anonunion_9778 __anonCompField_inet_listen_hashbucket_201 ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   unsigned int lhash2_mask ;
   struct inet_listen_hashbucket *lhash2 ;
   struct inet_listen_hashbucket listening_hash[32U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock_reuseport.h"
struct sock_reuseport {
   struct callback_head rcu ;
   u16 max_socks ;
   u16 num_socks ;
   unsigned int synq_overflow_ts ;
   unsigned int reuseport_id ;
   unsigned int bind_inany : 1 ;
   unsigned int has_conns : 1 ;
   struct bpf_prog *prog ;
   struct sock *socks[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_9781 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_9781 __anonCompField_ip_ra_chain_202 ;
   struct callback_head rcu ;
};
#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
enum tcp_ca_event {
    CA_EVENT_TX_START = 0,
    CA_EVENT_CWND_RESTART = 1,
    CA_EVENT_COMPLETE_CWR = 2,
    CA_EVENT_LOSS = 3,
    CA_EVENT_ECN_NO_CE = 4,
    CA_EVENT_ECN_IS_CE = 5
};
#line 994 
union tcp_cc_info;
#line 1013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct ack_sample {
   u32 pkts_acked ;
   s32 rtt_us ;
   u32 in_flight ;
};
#line 1027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct rate_sample {
   u64 prior_mstamp ;
   u32 prior_delivered ;
   s32 delivered ;
   long interval_us ;
   u32 snd_interval_us ;
   u32 rcv_interval_us ;
   long rtt_us ;
   int losses ;
   u32 acked_sacked ;
   u32 prior_in_flight ;
   bool is_app_limited ;
   bool is_retrans ;
   bool is_ack_delayed ;
};
#line 1043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_congestion_ops {
   struct list_head list ;
   u32 key ;
   u32 flags ;
   void (*init)(struct sock *) ;
   void (*release)(struct sock *) ;
   u32 (*ssthresh)(struct sock *) ;
   void (*cong_avoid)(struct sock *, u32 , u32 ) ;
   void (*set_state)(struct sock *, u8 ) ;
   void (*cwnd_event)(struct sock *, enum tcp_ca_event ) ;
   void (*in_ack_event)(struct sock *, u32 ) ;
   u32 (*undo_cwnd)(struct sock *) ;
   void (*pkts_acked)(struct sock *, struct ack_sample *) ;
   u32 (*min_tso_segs)(struct sock *) ;
   u32 (*sndbuf_expand)(struct sock *) ;
   void (*cong_control)(struct sock *, struct rate_sample *) ;
   size_t (*get_info)(struct sock *, u32 , int *, union tcp_cc_info *) ;
   char name[16U] ;
   struct module *owner ;
};
#line 1661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_fastopen_context {
   siphash_key_t key[2U] ;
   int num ;
   struct callback_head rcu ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_hslot {
   struct hlist_head head ;
   int count ;
   spinlock_t lock ;
} __attribute__((__aligned__(16)));
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_table {
   struct udp_hslot *hash ;
   struct udp_hslot *hash2 ;
   unsigned int mask ;
   unsigned int log ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tc_act/tc_gact.h"
struct tcf_gact {
   struct tc_action common ;
   u16 tcfg_ptype ;
   u16 tcfg_pval ;
   int tcfg_paction ;
   atomic_t packets ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
struct stmmachdr {
   __be32 version ;
   __be64 magic ;
   u8 id ;
} __attribute__((__packed__));
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
struct stmmac_packet_attrs {
   int vlan ;
   int vlan_id_in ;
   int vlan_id_out ;
   unsigned char *src ;
   unsigned char *dst ;
   u32 ip_src ;
   u32 ip_dst ;
   int tcp ;
   int sport ;
   int dport ;
   u32 exp_hash ;
   int dont_wait ;
   int timeout ;
   int size ;
   int max_size ;
   int remove_sa ;
   u8 id ;
   int sarc ;
   u16 queue_mapping ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
struct stmmac_test_priv {
   struct stmmac_packet_attrs *packet ;
   struct packet_type pt ;
   struct completion comp ;
   int double_vlan ;
   int vlan_id ;
   int ok ;
};
#line 1451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
struct __anonstruct_keys_9857 {
   struct flow_dissector_key_basic bkey ;
   struct flow_dissector_key_ports key ;
} __attribute__((__aligned__(8)));
#line 1455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
struct __anonstruct_masks_9858 {
   struct flow_dissector_key_basic bmask ;
   struct flow_dissector_key_ports mask ;
} __attribute__((__aligned__(8)));
#line 1755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
struct stmmac_test {
   char name[32U] ;
   int lb ;
   int (*fn)(struct stmmac_priv *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
struct stmmac_stats {
   char stat_string[32U] ;
   int sizeof_stat ;
   int stat_offset ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
struct stmmac_regs_off {
   u32 ptp_off ;
   u32 mmc_off ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.c"
struct stmmac_hwif_entry {
   bool gmac ;
   bool gmac4 ;
   bool xgmac ;
   u32 min_id ;
   struct stmmac_regs_off regs ;
   void *desc ;
   void *dma ;
   void *mac ;
   void *hwtimestamp ;
   void *mode ;
   void *tc ;
   void *mmc ;
   int (*setup)(struct stmmac_priv *) ;
   int (*quirks)(struct stmmac_priv *) ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gpio/consumer.h"
enum gpiod_flags {
    GPIOD_ASIS = 0,
    GPIOD_IN = 1,
    GPIOD_OUT_LOW = 3,
    GPIOD_OUT_HIGH = 7,
    GPIOD_OUT_LOW_OPEN_DRAIN = 11,
    GPIOD_OUT_HIGH_OPEN_DRAIN = 15
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
struct stmmac_rx_routing {
   u32 reg_mask ;
   u32 reg_shift ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
struct dwmac5_error_desc {
   bool valid ;
   char *desc ;
   char *detailed_desc ;
};
#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
struct dwmac5_error {
   struct dwmac5_error_desc *desc ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 969  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 975  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
typedef enum irqreturn irqreturn_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_18071 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_18073 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 2525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_notifier_info {
   struct net_device *dev ;
   struct netlink_ext_ack *extack ;
};
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_vlan_proto ;
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
enum flow_block_command {
    FLOW_BLOCK_BIND = 0,
    FLOW_BLOCK_UNBIND = 1
};
#line 275 
enum flow_block_binder_type {
    FLOW_BLOCK_BINDER_TYPE_UNSPEC = 0,
    FLOW_BLOCK_BINDER_TYPE_CLSACT_INGRESS = 1,
    FLOW_BLOCK_BINDER_TYPE_CLSACT_EGRESS = 2
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block_offload {
   enum flow_block_command command ;
   enum flow_block_binder_type binder_type ;
   bool block_shared ;
   bool unlocked_driver_cb ;
   struct net *net ;
   struct flow_block *block ;
   struct list_head cb_list ;
   struct list_head *driver_block_list ;
   struct netlink_ext_ack *extack ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phylink.h"
struct phylink_mac_ops {
   void (*validate)(struct phylink_config *, unsigned long *, struct phylink_link_state *) ;
   void (*mac_pcs_get_state)(struct phylink_config *, struct phylink_link_state *) ;
   void (*mac_config)(struct phylink_config *, unsigned int , struct phylink_link_state *) ;
   void (*mac_an_restart)(struct phylink_config *) ;
   void (*mac_link_down)(struct phylink_config *, unsigned int , phy_interface_t ) ;
   void (*mac_link_up)(struct phylink_config *, unsigned int , phy_interface_t , struct phy_device *) ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
struct stmmac_resources {
   void *addr ;
   char *mac ;
   int wol_irq ;
   int lpi_irq ;
   int irq ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
struct dwxgmac3_error_desc {
   bool valid ;
   char *desc ;
   char *detailed_desc ;
};
#line 865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
struct dwxgmac3_error {
   struct dwxgmac3_error_desc *desc ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
enum flow_dissector_key_id {
    FLOW_DISSECTOR_KEY_CONTROL = 0,
    FLOW_DISSECTOR_KEY_BASIC = 1,
    FLOW_DISSECTOR_KEY_IPV4_ADDRS = 2,
    FLOW_DISSECTOR_KEY_IPV6_ADDRS = 3,
    FLOW_DISSECTOR_KEY_PORTS = 4,
    FLOW_DISSECTOR_KEY_PORTS_RANGE = 5,
    FLOW_DISSECTOR_KEY_ICMP = 6,
    FLOW_DISSECTOR_KEY_ETH_ADDRS = 7,
    FLOW_DISSECTOR_KEY_TIPC = 8,
    FLOW_DISSECTOR_KEY_ARP = 9,
    FLOW_DISSECTOR_KEY_VLAN = 10,
    FLOW_DISSECTOR_KEY_FLOW_LABEL = 11,
    FLOW_DISSECTOR_KEY_GRE_KEYID = 12,
    FLOW_DISSECTOR_KEY_MPLS_ENTROPY = 13,
    FLOW_DISSECTOR_KEY_ENC_KEYID = 14,
    FLOW_DISSECTOR_KEY_ENC_IPV4_ADDRS = 15,
    FLOW_DISSECTOR_KEY_ENC_IPV6_ADDRS = 16,
    FLOW_DISSECTOR_KEY_ENC_CONTROL = 17,
    FLOW_DISSECTOR_KEY_ENC_PORTS = 18,
    FLOW_DISSECTOR_KEY_MPLS = 19,
    FLOW_DISSECTOR_KEY_TCP = 20,
    FLOW_DISSECTOR_KEY_IP = 21,
    FLOW_DISSECTOR_KEY_CVLAN = 22,
    FLOW_DISSECTOR_KEY_ENC_IP = 23,
    FLOW_DISSECTOR_KEY_ENC_OPTS = 24,
    FLOW_DISSECTOR_KEY_META = 25,
    FLOW_DISSECTOR_KEY_CT = 26,
    FLOW_DISSECTOR_KEY_MAX = 27
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_basic {
   struct flow_dissector_key_basic *key ;
   struct flow_dissector_key_basic *mask ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_ipv4_addrs {
   struct flow_dissector_key_ipv4_addrs *key ;
   struct flow_dissector_key_ipv4_addrs *mask ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_ports {
   struct flow_dissector_key_ports *key ;
   struct flow_dissector_key_ports *mask ;
};
#line 514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
struct __anonstruct_tc_flow_parsers_20069 {
   int (*fn)(struct stmmac_priv *, struct flow_cls_offload *, struct stmmac_flow_entry *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_21849 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_21849 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_21850 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_21850 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_21866 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_21866 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_21870 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_21870 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_21871 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_21872 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_21871 __anonCompField_media_link_90 ;
   union __anonunion_21872 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_21874 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_21873 {
   struct __anonstruct_dev_21874 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_21873 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_21888 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_21889 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_21887 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_21888 i2c ;
   struct __anonstruct_custom_21889 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_21887 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_22790 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_22790 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 17  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_5 {
   int arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_stmmac_interrupt_13 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_character_driver_scenario_stmmac_dma_cap_fops_11 {
   struct file_operations *arg0 ;
   int signal_pending ;
};
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_stmmac_check_if_running_14 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_4_15 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 56 
void __dynamic_pr_debug(struct _ddebug *, char * , ...);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_dma.c"
struct stmmac_dma_ops dwmac1000_dma_ops;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_dma.h"
#line 132 
void dwmac_enable_dma_transmission(void *ioaddr);
#line 133 
#line 133 
void dwmac_enable_dma_irq(void *ioaddr, u32 chan);
#line 134 
#line 134 
void dwmac_disable_dma_irq(void *ioaddr, u32 chan);
#line 135 
#line 135 
void dwmac_dma_start_tx(void *ioaddr, u32 chan);
#line 136 
#line 136 
void dwmac_dma_stop_tx(void *ioaddr, u32 chan);
#line 137 
#line 137 
void dwmac_dma_start_rx(void *ioaddr, u32 chan);
#line 138 
#line 138 
void dwmac_dma_stop_rx(void *ioaddr, u32 chan);
#line 139 
#line 139 
int dwmac_dma_interrupt(void *ioaddr, struct stmmac_extra_stats *x, u32 chan);
#line 141 
#line 141 
int dwmac_dma_reset(void *ioaddr);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_dma.c"
static void dwmac1000_dma_axi(void *ioaddr, struct stmmac_axi *axi)
{
  #line 22 
  int i;
  #line 24 
  char *tmp_0;
  #line 21 
  u32 value = readl(ioaddr + 4136U);
  #line 24 
  if (((unsigned long)value & 1UL) == 0UL) 
                                           #line 24 
                                           tmp_0 = (char *)"fixed"; else 
                                                                    #line 24 
                                                                    tmp_0 = (char *)"any";
  #line 24 
  printk((char *)"\001",tmp_0);
  #line 27 
  if ((int)axi->axi_lpi_en != 0) 
                                 #line 28 
                                 value |= 2147483648U;
  #line 29 
  if ((int)axi->axi_xit_frm != 0) 
                                  #line 30 
                                  value |= 1073741824U;
  #line 32 
  value &= 4279238655U;
  #line 33 
  value = ((axi->axi_wr_osr_lmt << 20) & 15728640U) | value;
  #line 36 
  value &= 4293984255U;
  #line 37 
  value = ((axi->axi_rd_osr_lmt << 16) & 983040U) | value;
  #line 44 
  i = 0;
  #line 44 
  while (i <= 6) {
    #line 45 
    switch (axi->axi_blen[i]) {
      #line 46 
      case (u32)256: 
                     #line 46 
      ;
      #line 47 
      value |= 128U;
      #line 48 
      break;
      #line 49 
      case (u32)128: 
                     #line 49 
      ;
      #line 50 
      value |= 64U;
      #line 51 
      break;
      #line 52 
      case (u32)64: 
                    #line 52 
      ;
      #line 53 
      value |= 32U;
      #line 54 
      break;
      #line 55 
      case (u32)32: 
                    #line 55 
      ;
      #line 56 
      value |= 16U;
      #line 57 
      break;
      #line 58 
      case (u32)16: 
                    #line 58 
      ;
      #line 59 
      value |= 8U;
      #line 60 
      break;
      #line 61 
      case (u32)8: 
                   #line 61 
      ;
      #line 62 
      value |= 4U;
      #line 63 
      break;
      #line 64 
      case (u32)4: 
                   #line 64 
      ;
      #line 65 
      value |= 2U;
      #line 66 
      break;
    }
    #line 44 
    i ++;
  }
  #line 70 
  writel(value,ioaddr + 4136U);
  #line 71 
  return;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_dma.c"
static void dwmac1000_dma_init(void *ioaddr, struct stmmac_dma_cfg *dma_cfg, int atds)
{
  #line 77 
  int tmp_0;
  #line 78 
  int tmp_1;
  #line 76 
  u32 value = readl(ioaddr + 4096U);
  #line 77 
  tmp_0 = dma_cfg->txpbl != 0;
  #line 77 
  if (! tmp_0) 
               #line 77 
               tmp_0 = dma_cfg->pbl;
  #line 77 
  int txpbl = tmp_0;
  #line 78 
  tmp_1 = dma_cfg->rxpbl != 0;
  #line 78 
  if (! tmp_1) 
               #line 78 
               tmp_1 = dma_cfg->pbl;
  #line 78 
  int rxpbl = tmp_1;
  #line 86 
  if ((int)dma_cfg->pblx8 != 0) 
                                #line 87 
                                value |= 16777216U;
  #line 88 
  value |= 8388608U;
  #line 89 
  value &= 4286693631U;
  #line 90 
  value = (unsigned int)(txpbl << 8) | value;
  #line 91 
  value = (unsigned int)(rxpbl << 17) | value;
  #line 94 
  if (dma_cfg->fixed_burst != 0) 
                                 #line 95 
                                 value |= 65536U;
  #line 98 
  if (dma_cfg->mixed_burst != 0) 
                                 #line 99 
                                 value |= 67108864U;
  #line 101 
  if (atds != 0) 
                 #line 102 
                 value |= 128U;
  #line 104 
  if ((int)dma_cfg->aal != 0) 
                              #line 105 
                              value |= 33554432U;
  #line 107 
  writel(value,ioaddr + 4096U);
  #line 110 
  writel(106593U,ioaddr + 4124U);
  #line 111 
  return;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_dma.c"
static void dwmac1000_dma_init_rx(void *ioaddr, struct stmmac_dma_cfg *dma_cfg, dma_addr_t dma_rx_phy, u32 chan)
{
  #line 118 
  writel((unsigned int)dma_rx_phy,ioaddr + 4108U);
  #line 119 
  return;
}

#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_dma.c"
static void dwmac1000_dma_init_tx(void *ioaddr, struct stmmac_dma_cfg *dma_cfg, dma_addr_t dma_tx_phy, u32 chan)
{
  #line 126 
  writel((unsigned int)dma_tx_phy,ioaddr + 4112U);
  #line 127 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_dma.c"
static u32 dwmac1000_configure_fc(u32 csr6, int rxfifosz)
{
  #line 131 
  csr6 &= 4286577151U;
  #line 132 
  csr6 &= 4290766847U;
  #line 138 
  if (rxfifosz <= 4095) {
    #line 139 
    csr6 &= 4294967039U;
    {
      #line 140 
      bool branch;
      #line 140 
      struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"stmmac", .function = (char *)"dwmac1000_configure_fc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_dma.c", .format = (char *)"GMAC: disabling flow control, rxfifo too small(%d)\n", .lineno = (unsigned int)140U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 140 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
      #line 140 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 140 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug441,(char *)"GMAC: disabling flow control, rxfifo too small(%d)\n",rxfifosz);
    }
  }
  else {
    #line 143 
    csr6 |= 256U;
    #line 144 
    csr6 = csr6;
    #line 145 
    csr6 |= 2048U;
  }
  #line 147 
  return csr6;
}

#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_dma.c"
static void dwmac1000_dma_operation_mode_rx(void *ioaddr, int mode, u32 channel, int fifosz, u8 qmode)
{
  #line 153 
  u32 csr6 = readl(ioaddr + 4120U);
  #line 155 
  if (mode == 1) {
    {
      #line 156 
      bool branch;
      #line 156 
      struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"stmmac", .function = (char *)"dwmac1000_dma_operation_mode_rx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_dma.c", .format = (char *)"GMAC: enable RX store and forward mode\n", .lineno = (unsigned int)156U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 156 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
      #line 156 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 156 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug442,(char *)"GMAC: enable RX store and forward mode\n");
    }
    #line 157 
    csr6 |= 33554432U;
  }
  else {
    {
      #line 159 
      bool branch_0;
      #line 159 
      struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"stmmac", .function = (char *)"dwmac1000_dma_operation_mode_rx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_dma.c", .format = (char *)"GMAC: disable RX SF mode (threshold %d)\n", .lineno = (unsigned int)159U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 159 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
      #line 159 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 159 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug443,(char *)"GMAC: disable RX SF mode (threshold %d)\n",mode);
    }
    #line 160 
    csr6 &= 4261412863U;
    #line 161 
    csr6 &= 4294967271U;
    #line 162 
    if (mode <= 32) 
                    #line 163 
                    csr6 |= 8U;
    else 
      #line 164 
      if (mode <= 64) 
                      #line 165 
                      csr6 = csr6;
      else 
        #line 166 
        if (mode <= 96) 
                        #line 167 
                        csr6 |= 16U; else 
                                          #line 169 
                                          csr6 |= 24U;
  }
  #line 173 
  csr6 = dwmac1000_configure_fc(csr6,fifosz);
  #line 175 
  writel(csr6,ioaddr + 4120U);
  #line 176 
  return;
}

#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_dma.c"
static void dwmac1000_dma_operation_mode_tx(void *ioaddr, int mode, u32 channel, int fifosz, u8 qmode)
{
  #line 181 
  u32 csr6 = readl(ioaddr + 4120U);
  #line 183 
  if (mode == 1) {
    {
      #line 184 
      bool branch;
      #line 184 
      struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"stmmac", .function = (char *)"dwmac1000_dma_operation_mode_tx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_dma.c", .format = (char *)"GMAC: enable TX store and forward mode\n", .lineno = (unsigned int)184U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 184 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
      #line 184 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 184 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug444,(char *)"GMAC: enable TX store and forward mode\n");
    }
    #line 186 
    csr6 |= 2097152U;
    #line 190 
    csr6 |= 4U;
  }
  else {
    {
      #line 192 
      bool branch_0;
      #line 192 
      struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"stmmac", .function = (char *)"dwmac1000_dma_operation_mode_tx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_dma.c", .format = (char *)"GMAC: disabling TX SF (threshold %d)\n", .lineno = (unsigned int)192U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 192 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
      #line 192 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 192 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug445,(char *)"GMAC: disabling TX SF (threshold %d)\n",mode);
    }
    #line 193 
    csr6 &= 4292870143U;
    #line 194 
    csr6 &= 4294852607U;
    #line 196 
    if (mode <= 32) 
                    #line 197 
                    csr6 |= 81920U;
    else 
      #line 198 
      if (mode <= 64) 
                      #line 199 
                      csr6 = csr6;
      else 
        #line 200 
        if (mode <= 128) 
                         #line 201 
                         csr6 |= 16384U;
        else 
          #line 202 
          if (mode <= 192) 
                           #line 203 
                           csr6 |= 32768U; else 
                                                #line 205 
                                                csr6 |= 49152U;
  }
  #line 208 
  writel(csr6,ioaddr + 4120U);
  #line 209 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_dma.c"
static void dwmac1000_dump_dma_regs(void *ioaddr, u32 *reg_space)
{
  #line 213 
  int i;
  #line 215 
  i = 0;
  #line 215 
  while (i <= 22) {
    #line 216 
    if ((unsigned int)i + 4294967284U > 5U) 
                                            #line 217 
                                            *(reg_space + (unsigned long)(i + 1024)) = readl(ioaddr + ((unsigned long)(i * 4) + (unsigned long)4096U));
    #line 215 
    i ++;
  }
  #line 219 
  return;
}

#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_dma.c"
static void dwmac1000_get_hw_feature(void *ioaddr, struct dma_features *dma_cap)
{
  #line 224 
  u32 hw_cap = readl(ioaddr + 4184U);
  #line 226 
  dma_cap->mbps_10_100 = hw_cap & 1U;
  #line 227 
  dma_cap->mbps_1000 = (hw_cap >> 1) & 1U;
  #line 228 
  dma_cap->half_duplex = (hw_cap >> 2) & 1U;
  #line 229 
  dma_cap->hash_filter = (hw_cap >> 4) & 1U;
  #line 230 
  dma_cap->multi_addr = (hw_cap >> 5) & 1U;
  #line 231 
  dma_cap->pcs = (hw_cap >> 6) & 1U;
  #line 232 
  dma_cap->sma_mdio = (hw_cap >> 8) & 1U;
  #line 233 
  dma_cap->pmt_remote_wake_up = (hw_cap >> 9) & 1U;
  #line 234 
  dma_cap->pmt_magic_frame = (hw_cap >> 10) & 1U;
  #line 236 
  dma_cap->rmon = (hw_cap >> 11) & 1U;
  #line 238 
  dma_cap->time_stamp = (hw_cap >> 12) & 1U;
  #line 241 
  dma_cap->atime_stamp = (hw_cap >> 13) & 1U;
  #line 243 
  dma_cap->eee = (hw_cap >> 14) & 1U;
  #line 244 
  dma_cap->av = (hw_cap >> 15) & 1U;
  #line 246 
  dma_cap->tx_coe = (hw_cap >> 16) & 1U;
  #line 247 
  dma_cap->rx_coe_type1 = (hw_cap >> 17) & 1U;
  #line 248 
  dma_cap->rx_coe_type2 = (hw_cap >> 18) & 1U;
  #line 249 
  dma_cap->rxfifo_over_2048 = (hw_cap >> 19) & 1U;
  #line 251 
  dma_cap->number_rx_channel = (hw_cap >> 20) & 3U;
  #line 252 
  dma_cap->number_tx_channel = (hw_cap >> 22) & 3U;
  #line 254 
  dma_cap->enh_desc = (hw_cap >> 24) & 1U;
  #line 255 
  return;
}

#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_dma.c"
static void dwmac1000_rx_watchdog(void *ioaddr, u32 riwt, u32 number_chan)
{
  #line 260 
  writel(riwt,ioaddr + 4132U);
  #line 261 
  return;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_dma.c"
struct stmmac_dma_ops dwmac1000_dma_ops = {.reset = & dwmac_dma_reset, .init = & dwmac1000_dma_init, .init_rx_chan = & dwmac1000_dma_init_rx, .init_tx_chan = & dwmac1000_dma_init_tx, .axi = & dwmac1000_dma_axi, .dump_regs = & dwmac1000_dump_dma_regs, .dma_rx_mode = & dwmac1000_dma_operation_mode_rx, .dma_tx_mode = & dwmac1000_dma_operation_mode_tx, .enable_dma_transmission = & dwmac_enable_dma_transmission, .enable_dma_irq = & dwmac_enable_dma_irq, .disable_dma_irq = & dwmac_disable_dma_irq, .start_tx = & dwmac_dma_start_tx, .stop_tx = & dwmac_dma_stop_tx, .start_rx = & dwmac_dma_start_rx, .stop_rx = & dwmac_dma_stop_rx, .dma_interrupt = & dwmac_dma_interrupt, .get_hw_feature = & dwmac1000_get_hw_feature, .rx_watchdog = & dwmac1000_rx_watchdog};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 29 
unsigned long __phys_addr(unsigned long);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 18 
void *memset(void *, int, size_t);
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static phys_addr_t virt_to_phys(void *address)
{
  #line 131 
  return (phys_addr_t)__phys_addr((unsigned long)address);
}

#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
struct stmmac_desc_ops ndesc_ops;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/descs_com.h"
__inline static void ndesc_rx_set_on_ring(struct dma_desc *p, int end, int bfsize)
{
  #line 56 
  if (bfsize > 2047) {
    #line 59 
    int __UNIQUE_ID___x441;
    #line 59 
    int tmp;
    #line 57 
    int bfsize2;
    {
      #line 59 
      __UNIQUE_ID___x441 = bfsize + -2047;
      #line 59 
      int __UNIQUE_ID___y442 = 2047;
      #line 59 
      if (__UNIQUE_ID___x441 < __UNIQUE_ID___y442) 
                                                   #line 59 
                                                   tmp = __UNIQUE_ID___x441; else 
                                                                    #line 59 
                                                                    tmp = __UNIQUE_ID___y442;
      }
    #line 59 
    bfsize2 = tmp;
    #line 60 
    p->des1 |= (unsigned int)(bfsize2 << 11) & 4192256U;
  }
  #line 64 
  if (end != 0) 
                #line 65 
                p->des1 |= 33554432U;
  #line 66 
  return;
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/descs_com.h"
__inline static void ndesc_end_tx_desc_on_ring(struct dma_desc *p, int end)
{
  #line 70 
  if (end != 0) 
                #line 71 
                p->des1 |= 33554432U; else 
                                           #line 73 
                                           p->des1 &= 4261412863U;
  #line 74 
  return;
}

#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/descs_com.h"
__inline static void norm_set_tx_desc_len_on_ring(struct dma_desc *p, int len)
{
  #line 78 
  if ((long)(len > 2048) != 0L) {
    #line 79 
    unsigned int buffer1 = 2047U;
    #line 81 
    p->des1 |= ((((unsigned int)len - buffer1) << 11) & 4192256U) | buffer1;
  }
  else 
       #line 85 
       p->des1 |= (unsigned int)len & 2047U;
  #line 86 
  return;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/descs_com.h"
__inline static void ndesc_rx_set_on_chain(struct dma_desc *p, int end)
{
  #line 109 
  p->des1 |= 16777216U;
  #line 110 
  return;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/descs_com.h"
__inline static void ndesc_tx_set_on_chain(struct dma_desc *p)
{
  #line 114 
  p->des1 |= 16777216U;
  #line 115 
  return;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/descs_com.h"
__inline static void norm_set_tx_desc_len_on_chain(struct dma_desc *p, int len)
{
  #line 119 
  p->des1 |= (unsigned int)len & 2047U;
  #line 120 
  return;
}

#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static int ndesc_get_tx_status(void *data, struct stmmac_extra_stats *x, struct dma_desc *p, void *ioaddr)
{
  #line 18 
  struct net_device_stats *stats = (struct net_device_stats *)data;
  #line 19 
  unsigned int tdes0 = p->des0;
  #line 20 
  unsigned int tdes1 = p->des1;
  #line 21 
  int ret = 0;
  #line 24 
  if ((long)((tdes0 & 2147483648U) != 0U) != 0L) 
                                                 #line 25 
                                                 return 4;
  #line 28 
  if ((long)(((unsigned long)tdes1 & 1073741824UL) == 0UL) != 0L) 
                                                                  #line 29 
                                                                  return 1;
  #line 31 
  if ((long)(((unsigned long)tdes0 & 32768UL) != 0UL) != 0L) {
    #line 32 
    if ((long)(((unsigned long)tdes0 & 2UL) != 0UL) != 0L) {
      #line 33 
      (x->tx_underflow) ++;
      #line 34 
      (stats->tx_fifo_errors) ++;
    }
    #line 36 
    if ((long)(((unsigned long)tdes0 & 1024UL) != 0UL) != 0L) {
      #line 37 
      (x->tx_carrier) ++;
      #line 38 
      (stats->tx_carrier_errors) ++;
    }
    #line 40 
    if ((long)(((unsigned long)tdes0 & 2048UL) != 0UL) != 0L) {
      #line 41 
      (x->tx_losscarrier) ++;
      #line 42 
      (stats->tx_carrier_errors) ++;
    }
    #line 44 
    if ((((long)(((unsigned long)tdes0 & 4UL) != 0UL) != 0L || (long)(((unsigned long)tdes0 & 256UL) != 0UL) != 0L) != 0) != 0 || (long)(((unsigned long)tdes0 & 512UL) != 0UL) != 0L) {
      #line 47 
      unsigned int collisions;
      #line 49 
      collisions = (unsigned int)((unsigned long)tdes0 >> 3) & 15U;
      #line 50 
      stats->collisions += (unsigned long)collisions;
    }
    #line 52 
    ret = 2;
  }
  #line 55 
  if (((unsigned long)tdes0 & 128UL) != 0UL) 
                                             #line 56 
                                             (x->tx_vlan) ++;
  #line 58 
  if ((long)(((unsigned long)tdes0 & 1UL) != 0UL) != 0L) 
                                                         #line 59 
                                                         (x->tx_deferred) ++;
  #line 61 
  return ret;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static int ndesc_get_tx_len(struct dma_desc *p)
{
  #line 66 
  return (int)p->des1 & 2047;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static int ndesc_get_rx_status(void *data, struct stmmac_extra_stats *x, struct dma_desc *p)
{
  #line 76 
  int ret = 0;
  #line 77 
  unsigned int rdes0 = p->des0;
  #line 78 
  struct net_device_stats *stats = (struct net_device_stats *)data;
  #line 80 
  if ((long)(((unsigned long)rdes0 & 2147483648UL) != 0UL) != 0L) 
                                                                  #line 81 
                                                                  return 8;
  #line 83 
  if ((long)(((unsigned long)rdes0 & 256UL) == 0UL) != 0L) {
    #line 84 
    (stats->rx_length_errors) ++;
    #line 85 
    return 1;
  }
  #line 88 
  if ((long)(((unsigned long)rdes0 & 32768UL) != 0UL) != 0L) {
    #line 89 
    if ((long)(((unsigned long)rdes0 & 16384UL) != 0UL) != 0L) 
                                                               #line 90 
                                                               (x->rx_desc) ++;
    #line 91 
    if ((long)(((unsigned long)rdes0 & 8192UL) != 0UL) != 0L) 
                                                              #line 92 
                                                              (x->sa_filter_fail) ++;
    #line 93 
    if ((long)(((unsigned long)rdes0 & 2048UL) != 0UL) != 0L) 
                                                              #line 94 
                                                              (x->overflow_error) ++;
    #line 95 
    if ((long)(((unsigned long)rdes0 & 128UL) != 0UL) != 0L) 
                                                             #line 96 
                                                             (x->ipc_csum_error) ++;
    #line 97 
    if ((long)(((unsigned long)rdes0 & 64UL) != 0UL) != 0L) {
      #line 98 
      (x->rx_collision) ++;
      #line 99 
      (stats->collisions) ++;
    }
    #line 101 
    if ((long)(((unsigned long)rdes0 & 2UL) != 0UL) != 0L) {
      #line 102 
      (x->rx_crc_errors) ++;
      #line 103 
      (stats->rx_crc_errors) ++;
    }
    #line 105 
    ret = 1;
  }
  #line 107 
  if ((long)(((unsigned long)rdes0 & 4UL) != 0UL) != 0L) 
                                                         #line 108 
                                                         (x->dribbling_bit) ++;
  #line 110 
  if ((long)(((unsigned long)rdes0 & 4096UL) != 0UL) != 0L) {
    #line 111 
    (x->rx_length) ++;
    #line 112 
    ret = 1;
  }
  #line 114 
  if ((long)(((unsigned long)rdes0 & 8UL) != 0UL) != 0L) {
    #line 115 
    (x->rx_mii) ++;
    #line 116 
    ret = 1;
  }
  #line 119 
  if (((unsigned long)rdes0 & 1024UL) != 0UL) 
                                              #line 120 
                                              (x->vlan_tag) ++;
  #line 122 
  return ret;
}

#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static void ndesc_init_rx_desc(struct dma_desc *p, int disable_rx_ic, int mode, int end, int bfsize)
{
  #line 132 
  int __UNIQUE_ID___x443;
  #line 132 
  int tmp;
  #line 128 
  int bfsize1;
  #line 130 
  p->des0 |= 2147483648U;
  {
    #line 132 
    __UNIQUE_ID___x443 = bfsize;
    #line 132 
    int __UNIQUE_ID___y444 = 2047;
    #line 132 
    if (__UNIQUE_ID___x443 < __UNIQUE_ID___y444) 
                                                 #line 132 
                                                 tmp = __UNIQUE_ID___x443; else 
                                                                    #line 132 
                                                                    tmp = __UNIQUE_ID___y444;
    }
  #line 132 
  bfsize1 = tmp;
  #line 133 
  p->des1 |= (unsigned int)bfsize1 & 2047U;
  #line 135 
  if (mode == 1) 
                 #line 136 
                 ndesc_rx_set_on_chain(p,end); else 
                                                    #line 138 
                                                    ndesc_rx_set_on_ring(p,end,bfsize);
  #line 140 
  if (disable_rx_ic != 0) 
                          #line 141 
                          p->des1 |= 2147483648U;
  #line 142 
  return;
}

#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static void ndesc_init_tx_desc(struct dma_desc *p, int mode, int end)
{
  #line 146 
  p->des0 &= 2147483647U;
  #line 147 
  if (mode == 1) 
                 #line 148 
                 ndesc_tx_set_on_chain(p); else 
                                                #line 150 
                                                ndesc_end_tx_desc_on_ring(p,end);
  #line 151 
  return;
}

#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static int ndesc_get_tx_owner(struct dma_desc *p)
{
  #line 155 
  return (int)(p->des0 >> 31);
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static void ndesc_set_tx_owner(struct dma_desc *p)
{
  #line 160 
  p->des0 |= 2147483648U;
  #line 161 
  return;
}

#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static void ndesc_set_rx_owner(struct dma_desc *p, int disable_rx_ic)
{
  #line 165 
  p->des0 |= 2147483648U;
  #line 166 
  return;
}

#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static int ndesc_get_tx_ls(struct dma_desc *p)
{
  #line 170 
  return (int)((unsigned long)p->des1 >> 30) & 1;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static void ndesc_release_tx_desc(struct dma_desc *p, int mode)
{
  #line 175 
  int ter = (int)((unsigned long)p->des1 >> 25) & 1;
  #line 177 
  memset((void *)p,0,8UL);
  #line 178 
  if (mode == 1) 
                 #line 179 
                 ndesc_tx_set_on_chain(p); else 
                                                #line 181 
                                                ndesc_end_tx_desc_on_ring(p,ter);
  #line 182 
  return;
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static void ndesc_prepare_tx_desc(struct dma_desc *p, int is_fs, int len, bool csum_flag, int mode, bool tx_own, bool ls, unsigned int tot_pkt_len)
{
  #line 188 
  unsigned int tdes1 = p->des1;
  #line 190 
  if (is_fs != 0) 
                  #line 191 
                  tdes1 |= 536870912U; else 
                                            #line 193 
                                            tdes1 &= 3758096383U;
  #line 195 
  if ((long)((int)csum_flag != 0) != 0L) 
                                         #line 196 
                                         tdes1 |= 402653184U; else 
                                                                   #line 198 
                                                                   tdes1 &= 3892314111U;
  #line 200 
  if ((int)ls != 0) 
                    #line 201 
                    tdes1 |= 1073741824U;
  #line 203 
  p->des1 = tdes1;
  #line 205 
  if (mode == 1) 
                 #line 206 
                 norm_set_tx_desc_len_on_chain(p,len); else 
                                                            #line 208 
                                                            norm_set_tx_desc_len_on_ring(p,len);
  #line 210 
  if ((int)tx_own != 0) 
                        #line 211 
                        p->des0 |= 2147483648U;
  #line 212 
  return;
}

#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static void ndesc_set_tx_ic(struct dma_desc *p)
{
  #line 216 
  p->des1 |= 2147483648U;
  #line 217 
  return;
}

#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static int ndesc_get_rx_frame_len(struct dma_desc *p, int rx_coe_type)
{
  #line 221 
  unsigned int csum = 0U;
  #line 229 
  if (rx_coe_type == 1) 
                        #line 230 
                        csum = 2U;
  #line 233 
  return (int)((((unsigned long)p->des0 >> 16) & (unsigned long)16383U) - (unsigned long)csum);
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static void ndesc_enable_tx_timestamp(struct dma_desc *p)
{
  #line 240 
  p->des1 |= 4194304U;
  #line 241 
  return;
}

#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static int ndesc_get_tx_timestamp_status(struct dma_desc *p)
{
  #line 245 
  return (int)((unsigned long)p->des0 >> 17) & 1;
}

#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static void ndesc_get_timestamp(void *desc, u32 ats, u64 *ts)
{
  #line 251 
  u64 ns;
  #line 250 
  struct dma_desc *p = (struct dma_desc *)desc;
  #line 253 
  ns = (unsigned long long)p->des2;
  #line 255 
  ns = (unsigned long long)p->des3 * 1000000000ULL + ns;
  #line 257 
  *ts = ns;
  #line 258 
  return;
}

#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static int ndesc_get_rx_timestamp_status(void *desc, void *next_desc, u32 ats)
{
  #line 262 
  struct dma_desc *p = (struct dma_desc *)desc;
  #line 264 
  if (p->des2 == 4294967295U && p->des3 == 4294967295U) 
                                                        #line 267 
                                                        return 0; else 
                                                                    #line 269 
                                                                    return 1;
}

#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static void ndesc_display_ring(void *head, unsigned int size, bool rx)
{
  #line 275 
  int i;
  #line 277 
  char *tmp;
  #line 274 
  struct dma_desc *p = (struct dma_desc *)head;
  #line 277 
  if ((int)rx != 0) 
                    #line 277 
                    tmp = (char *)"RX"; else 
                                             #line 277 
                                             tmp = (char *)"TX";
  #line 277 
  printk((char *)"\001",tmp);
  #line 279 
  i = 0;
  #line 279 
  while ((unsigned int)i < size) {
    {
      #line 280 
      u64 x;
      #line 282 
      x = *((u64 *)p);
      #line 283 
      ;
      #line 283 
      ;
      #line 283 
      ;
      #line 283 
      ;
      #line 283 
      ;
      #line 283 
      printk((char *)"\001",i,(unsigned int)virt_to_phys((void *)p),(unsigned int)x,(unsigned int)(x >> 32),p->des2,p->des3);
      #line 287 
      p ++;
    }
    #line 279 
    i ++;
  }
  #line 289 
  printk((char *)"\001");
  #line 290 
  return;
}

#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static void ndesc_get_addr(struct dma_desc *p, unsigned int *addr)
{
  #line 294 
  *addr = p->des2;
  #line 295 
  return;
}

#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static void ndesc_set_addr(struct dma_desc *p, dma_addr_t addr)
{
  #line 299 
  p->des2 = (unsigned int)addr;
  #line 300 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
static void ndesc_clear(struct dma_desc *p)
{
  #line 304 
  p->des2 = 0U;
  #line 305 
  return;
}

#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/norm_desc.c"
struct stmmac_desc_ops ndesc_ops = {.init_rx_desc = & ndesc_init_rx_desc, .init_tx_desc = & ndesc_init_tx_desc, .prepare_tx_desc = & ndesc_prepare_tx_desc, .set_tx_owner = & ndesc_set_tx_owner, .get_tx_owner = & ndesc_get_tx_owner, .release_tx_desc = & ndesc_release_tx_desc, .set_tx_ic = & ndesc_set_tx_ic, .get_tx_ls = & ndesc_get_tx_ls, .tx_status = & ndesc_get_tx_status, .get_tx_len = & ndesc_get_tx_len, .set_rx_owner = & ndesc_set_rx_owner, .get_rx_frame_len = & ndesc_get_rx_frame_len, .rx_status = & ndesc_get_rx_status, .enable_tx_timestamp = & ndesc_enable_tx_timestamp, .get_tx_timestamp_status = & ndesc_get_tx_timestamp_status, .get_timestamp = & ndesc_get_timestamp, .get_rx_timestamp_status = & ndesc_get_rx_timestamp_status, .display_ring = & ndesc_display_ring, .get_addr = & ndesc_get_addr, .set_addr = & ndesc_set_addr, .clear = & ndesc_clear};
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 204 
void __might_sleep(char *, int, int);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static int ktime_compare(ktime_t cmp1, ktime_t cmp2)
{
  #line 114 
  if (cmp1 < cmp2) 
                   #line 115 
                   return -1;
  #line 116 
  if (cmp1 > cmp2) 
                   #line 117 
                   return 1;
  #line 118 
  return 0;
}

#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static ktime_t ktime_add_us(ktime_t kt, u64 usec)
{
  #line 198 
  return (long long)(usec * 1000ULL + (unsigned long long)kt);
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 67 
ktime_t ktime_get(void);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
struct stmmac_dma_ops dwxgmac210_dma_ops;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static int dwxgmac2_dma_reset(void *ioaddr)
{
  #line 18 
  int tmp_4;
  #line 13 
  u32 value = readl(ioaddr + 12288U);
  #line 16 
  writel(value | 1U,ioaddr + 12288U);
  {
    #line 18 
    u64 __timeout_us = 100000ULL;
    #line 18 
    unsigned long __sleep_us = 0UL;
    #line 18 
    ;
    #line 18 
    ktime_t __timeout = ktime_add_us(ktime_get(),__timeout_us);
    #line 18 
    if (__sleep_us != 0UL) 
                           #line 18 
                           __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c",18,0);
    #line 18 
    while (1) {
      #line 18 
      value = readl(ioaddr + 12288U);
      #line 18 
      if (((unsigned long)value & 1UL) == 0UL) 
                                               #line 18 
                                               break;
      #line 18 
      if (__timeout_us != 0ULL) {
        #line 18 
        ;
        #line 18 
        if (ktime_compare(ktime_get(),__timeout) > 0) {
          #line 18 
          value = readl(ioaddr + 12288U);
          #line 18 
          break;
        }
      }
      #line 18 
      if (__sleep_us != 0UL) 
                             #line 18 
                             usleep_range((__sleep_us >> 2) + 1UL,__sleep_us);
    }
    #line 18 
    if (((unsigned long)value & 1UL) == 0UL) 
                                             #line 18 
                                             tmp_4 = 0; else 
                                                             #line 18 
                                                             tmp_4 = -110;
    }
  #line 18 
  return tmp_4;
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_dma_init(void *ioaddr, struct stmmac_dma_cfg *dma_cfg, int atds)
{
  #line 25 
  u32 value = readl(ioaddr + 12292U);
  #line 27 
  if ((int)dma_cfg->aal != 0) 
                              #line 28 
                              value |= 4096U;
  #line 30 
  if ((int)dma_cfg->eame != 0) 
                               #line 31 
                               value |= 2048U;
  #line 33 
  writel(value,ioaddr + 12292U);
  #line 34 
  return;
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_dma_init_chan(void *ioaddr, struct stmmac_dma_cfg *dma_cfg, u32 chan)
{
  #line 39 
  u32 value = readl(ioaddr + (unsigned long)((chan + 98U) * 128U));
  #line 41 
  if ((int)dma_cfg->pblx8 != 0) 
                                #line 42 
                                value |= 65536U;
  #line 44 
  writel(value,ioaddr + (unsigned long)((chan + 98U) * 128U));
  #line 45 
  writel(49345U,ioaddr + (unsigned long)(chan * 128U + 12600U));
  #line 46 
  return;
}

#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_dma_init_rx_chan(void *ioaddr, struct stmmac_dma_cfg *dma_cfg, dma_addr_t phy, u32 chan)
{
  #line 52 
  int tmp;
  #line 53 
  u32 value;
  #line 52 
  tmp = dma_cfg->rxpbl != 0;
  #line 52 
  if (! tmp) 
             #line 52 
             tmp = dma_cfg->pbl;
  #line 52 
  u32 rxpbl = (unsigned int)tmp;
  #line 55 
  value = readl(ioaddr + (unsigned long)(chan * 128U + 12552U));
  #line 56 
  value &= 4290838527U;
  #line 57 
  value = ((rxpbl << 16) & 4128768U) | value;
  #line 58 
  writel(value,ioaddr + (unsigned long)(chan * 128U + 12552U));
  #line 60 
  writel((unsigned int)(phy >> 32),ioaddr + (unsigned long)(chan * 128U + 12568U));
  #line 61 
  writel((unsigned int)phy,ioaddr + (unsigned long)(chan * 128U + 12572U));
  #line 62 
  return;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_dma_init_tx_chan(void *ioaddr, struct stmmac_dma_cfg *dma_cfg, dma_addr_t phy, u32 chan)
{
  #line 68 
  int tmp;
  #line 69 
  u32 value;
  #line 68 
  tmp = dma_cfg->txpbl != 0;
  #line 68 
  if (! tmp) 
             #line 68 
             tmp = dma_cfg->pbl;
  #line 68 
  u32 txpbl = (unsigned int)tmp;
  #line 71 
  value = readl(ioaddr + (unsigned long)(chan * 128U + 12548U));
  #line 72 
  value &= 4290838527U;
  #line 73 
  value = ((txpbl << 16) & 4128768U) | value;
  #line 74 
  value |= 16U;
  #line 75 
  writel(value,ioaddr + (unsigned long)(chan * 128U + 12548U));
  #line 77 
  writel((unsigned int)(phy >> 32),ioaddr + (unsigned long)(chan * 128U + 12560U));
  #line 78 
  writel((unsigned int)phy,ioaddr + (unsigned long)(chan * 128U + 12564U));
  #line 79 
  return;
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_dma_axi(void *ioaddr, struct stmmac_axi *axi)
{
  #line 84 
  int i;
  #line 83 
  u32 value = readl(ioaddr + 12292U);
  #line 86 
  if ((int)axi->axi_lpi_en != 0) 
                                 #line 87 
                                 value |= 32768U;
  #line 88 
  if ((int)axi->axi_xit_frm != 0) 
                                  #line 89 
                                  value |= 16384U;
  #line 91 
  value &= 3238002687U;
  #line 92 
  value = ((axi->axi_wr_osr_lmt << 24) & 1056964608U) | value;
  #line 95 
  value &= 4290838527U;
  #line 96 
  value = ((axi->axi_rd_osr_lmt << 16) & 4128768U) | value;
  #line 99 
  if (! axi->axi_fb) 
                     #line 100 
                     value |= 1U;
  #line 102 
  value &= 4294967041U;
  #line 103 
  i = 0;
  #line 103 
  while (i <= 6) {
    #line 104 
    switch (axi->axi_blen[i]) {
      #line 105 
      case (u32)256: 
                     #line 105 
      ;
      #line 106 
      value |= 128U;
      #line 107 
      break;
      #line 108 
      case (u32)128: 
                     #line 108 
      ;
      #line 109 
      value |= 64U;
      #line 110 
      break;
      #line 111 
      case (u32)64: 
                    #line 111 
      ;
      #line 112 
      value |= 32U;
      #line 113 
      break;
      #line 114 
      case (u32)32: 
                    #line 114 
      ;
      #line 115 
      value |= 16U;
      #line 116 
      break;
      #line 117 
      case (u32)16: 
                    #line 117 
      ;
      #line 118 
      value |= 8U;
      #line 119 
      break;
      #line 120 
      case (u32)8: 
                   #line 120 
      ;
      #line 121 
      value |= 4U;
      #line 122 
      break;
      #line 123 
      case (u32)4: 
                   #line 123 
      ;
      #line 124 
      value |= 2U;
      #line 125 
      break;
    }
    #line 103 
    i ++;
  }
  #line 129 
  writel(value,ioaddr + 12292U);
  #line 130 
  writel(1073741823U,ioaddr + 12352U);
  #line 131 
  writel(1073741823U,ioaddr + 12356U);
  #line 132 
  return;
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_dma_dump_regs(void *ioaddr, u32 *reg_space)
{
  #line 136 
  int i;
  #line 138 
  i = 3072;
  #line 138 
  while (i <= 3646) {
    #line 139 
    *(reg_space + (unsigned long)i) = readl(ioaddr + (unsigned long)(i * 4));
    #line 138 
    i ++;
  }
  #line 140 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_dma_rx_mode(void *ioaddr, int mode, u32 channel, int fifosz, u8 qmode)
{
  #line 145 
  u32 value = readl(ioaddr + (unsigned long)(channel * 128U + 4416U));
  #line 146 
  unsigned int rqs = (unsigned int)(fifosz / 256 + -1);
  #line 148 
  if (mode == 1) 
                 #line 149 
                 value |= 32U;
  else {
    #line 151 
    value &= 4294967263U;
    #line 152 
    value &= 4294967292U;
    #line 154 
    if (mode <= 64) 
                    #line 155 
                    value = value;
    else 
      #line 156 
      if (mode <= 96) 
                      #line 157 
                      value |= 2U; else 
                                        #line 159 
                                        value |= 3U;
  }
  #line 162 
  value &= 4227923967U;
  #line 163 
  value = ((rqs << 16) & 67043328U) | value;
  #line 165 
  if (fifosz > 4095 && (unsigned int)qmode != 0U) {
    #line 167 
    unsigned int rfd;
    #line 167 
    unsigned int rfa;
    #line 166 
    u32 flow = readl(ioaddr + (unsigned long)(channel * 128U + 4432U));
    #line 169 
    value |= 128U;
    #line 177 
    switch (fifosz) {
      #line 178 
      case 4096: 
                 #line 178 
      ;
      #line 182 
      rfd = 3U;
      #line 183 
      rfa = 1U;
      #line 184 
      break;
      #line 186 
      default: 
               #line 186 
      ;
      #line 187 
      rfd = 7U;
      #line 188 
      rfa = 4U;
      #line 189 
      break;
    }
    #line 192 
    flow &= 131071U;
    #line 193 
    flow = (rfd << 17) | flow;
    #line 195 
    flow &= 4294901761U;
    #line 196 
    flow = (rfa << 1) | flow;
    #line 198 
    writel(flow,ioaddr + (unsigned long)(channel * 128U + 4432U));
  }
  #line 201 
  writel(value,ioaddr + (unsigned long)(channel * 128U + 4416U));
  #line 204 
  value = readl(ioaddr + (unsigned long)(channel * 128U + 4464U));
  #line 205 
  writel(value | 65536U,ioaddr + (unsigned long)(channel * 128U + 4464U));
  #line 206 
  return;
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_dma_tx_mode(void *ioaddr, int mode, u32 channel, int fifosz, u8 qmode)
{
  #line 211 
  u32 value = readl(ioaddr + (unsigned long)((channel + 34U) * 128U));
  #line 212 
  unsigned int tqs = (unsigned int)(fifosz / 256 + -1);
  #line 214 
  if (mode == 1) 
                 #line 215 
                 value |= 2U;
  else {
    #line 217 
    value &= 4294967293U;
    #line 218 
    value &= 4294967183U;
    #line 220 
    if (mode <= 64) 
                    #line 221 
                    value = value;
    else 
      #line 222 
      if (mode <= 96) 
                      #line 223 
                      value |= 32U;
      else 
        #line 224 
        if (mode <= 128) 
                         #line 225 
                         value |= 48U;
        else 
          #line 226 
          if (mode <= 192) 
                           #line 227 
                           value |= 64U;
          else 
            #line 228 
            if (mode <= 256) 
                             #line 229 
                             value |= 80U;
            else 
              #line 230 
              if (mode <= 384) 
                               #line 231 
                               value |= 96U; else 
                                                  #line 233 
                                                  value |= 112U;
  }
  #line 237 
  value = ((channel << 8) & 1792U) | value;
  #line 239 
  value &= 4294967283U;
  #line 240 
  if ((unsigned int)qmode != 0U) 
                                 #line 241 
                                 value |= 8U; else 
                                                   #line 243 
                                                   value |= 4U;
  #line 245 
  value &= 4227923967U;
  #line 246 
  value = ((tqs << 16) & 67043328U) | value;
  #line 248 
  writel(value,ioaddr + (unsigned long)((channel + 34U) * 128U));
  #line 249 
  return;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_enable_dma_irq(void *ioaddr, u32 chan)
{
  #line 253 
  writel(49345U,ioaddr + (unsigned long)(chan * 128U + 12600U));
  #line 254 
  return;
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_disable_dma_irq(void *ioaddr, u32 chan)
{
  #line 258 
  writel(0U,ioaddr + (unsigned long)(chan * 128U + 12600U));
  #line 259 
  return;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_dma_start_tx(void *ioaddr, u32 chan)
{
  #line 263 
  u32 value;
  #line 265 
  value = readl(ioaddr + (unsigned long)(chan * 128U + 12548U));
  #line 266 
  value |= 1U;
  #line 267 
  writel(value,ioaddr + (unsigned long)(chan * 128U + 12548U));
  #line 269 
  value = readl(ioaddr);
  #line 270 
  value |= 1U;
  #line 271 
  writel(value,ioaddr);
  #line 272 
  return;
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_dma_stop_tx(void *ioaddr, u32 chan)
{
  #line 276 
  u32 value;
  #line 278 
  value = readl(ioaddr + (unsigned long)(chan * 128U + 12548U));
  #line 279 
  value &= 4294967294U;
  #line 280 
  writel(value,ioaddr + (unsigned long)(chan * 128U + 12548U));
  #line 282 
  value = readl(ioaddr);
  #line 283 
  value &= 4294967294U;
  #line 284 
  writel(value,ioaddr);
  #line 285 
  return;
}

#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_dma_start_rx(void *ioaddr, u32 chan)
{
  #line 289 
  u32 value;
  #line 291 
  value = readl(ioaddr + (unsigned long)(chan * 128U + 12552U));
  #line 292 
  value |= 1U;
  #line 293 
  writel(value,ioaddr + (unsigned long)(chan * 128U + 12552U));
  #line 295 
  value = readl(ioaddr + 4U);
  #line 296 
  value |= 1U;
  #line 297 
  writel(value,ioaddr + 4U);
  #line 298 
  return;
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_dma_stop_rx(void *ioaddr, u32 chan)
{
  #line 302 
  u32 value;
  #line 304 
  value = readl(ioaddr + (unsigned long)(chan * 128U + 12552U));
  #line 305 
  value &= 4294967294U;
  #line 306 
  writel(value,ioaddr + (unsigned long)(chan * 128U + 12552U));
  #line 307 
  return;
}

#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static int dwxgmac2_dma_interrupt(void *ioaddr, struct stmmac_extra_stats *x, u32 chan)
{
  #line 312 
  u32 intr_status = readl(ioaddr + (unsigned long)(chan * 128U + 12640U));
  #line 313 
  u32 intr_en = readl(ioaddr + (unsigned long)(chan * 128U + 12600U));
  #line 314 
  int ret = 0;
  #line 317 
  if ((long)(((unsigned long)intr_status & 16384UL) != 0UL) != 0L) {
    #line 318 
    if ((long)(((unsigned long)intr_status & 128UL) != 0UL) != 0L) {
      #line 319 
      (x->rx_buf_unav_irq) ++;
      #line 320 
      ret |= 4;
    }
    #line 322 
    if ((long)(((unsigned long)intr_status & 2UL) != 0UL) != 0L) {
      #line 323 
      (x->tx_process_stopped_irq) ++;
      #line 324 
      ret |= 1;
    }
    #line 326 
    if ((long)(((unsigned long)intr_status & 4096UL) != 0UL) != 0L) {
      #line 327 
      (x->fatal_bus_error_irq) ++;
      #line 328 
      ret |= 1;
    }
  }
  #line 333 
  if ((long)(((unsigned long)intr_status & 32768UL) != 0UL) != 0L) {
    #line 334 
    (x->normal_irq_n) ++;
    #line 336 
    if ((long)(((unsigned long)intr_status & 64UL) != 0UL) != 0L) {
      #line 337 
      (x->rx_normal_irq_n) ++;
      #line 338 
      ret |= 4;
    }
    #line 340 
    if ((long)(((unsigned long)intr_status & 5UL) != 0UL) != 0L) {
      #line 341 
      (x->tx_normal_irq_n) ++;
      #line 342 
      ret |= 8;
    }
  }
  #line 347 
  writel(intr_en & intr_status,ioaddr + (unsigned long)(chan * 128U + 12640U));
  #line 349 
  return ret;
}

#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_get_hw_feature(void *ioaddr, struct dma_features *dma_cap)
{
  #line 355 
  u32 hw_cap;
  #line 358 
  hw_cap = readl(ioaddr + 284U);
  #line 359 
  dma_cap->vlins = (unsigned int)((unsigned long)hw_cap >> 27) & 1U;
  #line 360 
  dma_cap->rx_coe = (unsigned int)((unsigned long)hw_cap >> 16) & 1U;
  #line 361 
  dma_cap->tx_coe = (unsigned int)((unsigned long)hw_cap >> 14) & 1U;
  #line 362 
  dma_cap->eee = (unsigned int)((unsigned long)hw_cap >> 13) & 1U;
  #line 363 
  dma_cap->atime_stamp = (unsigned int)((unsigned long)hw_cap >> 12) & 1U;
  #line 364 
  dma_cap->av = (unsigned int)((unsigned long)hw_cap >> 11) & 1U;
  #line 365 
  dma_cap->av &= (unsigned int)(((unsigned long)hw_cap & 1024UL) == 0UL);
  #line 366 
  dma_cap->arpoffsel = (unsigned int)((unsigned long)hw_cap >> 9) & 1U;
  #line 367 
  dma_cap->rmon = (unsigned int)((unsigned long)hw_cap >> 8) & 1U;
  #line 368 
  dma_cap->pmt_magic_frame = (unsigned int)((unsigned long)hw_cap >> 7) & 1U;
  #line 369 
  dma_cap->pmt_remote_wake_up = (unsigned int)((unsigned long)hw_cap >> 6) & 1U;
  #line 370 
  dma_cap->vlhash = (unsigned int)((unsigned long)hw_cap >> 4) & 1U;
  #line 371 
  dma_cap->mbps_1000 = (unsigned int)((unsigned long)hw_cap >> 1) & 1U;
  #line 374 
  hw_cap = readl(ioaddr + 288U);
  #line 375 
  dma_cap->l3l4fnum = (unsigned int)((unsigned long)hw_cap >> 27) & 15U;
  #line 376 
  dma_cap->hash_tb_sz = (unsigned int)((unsigned long)hw_cap >> 24) & 3U;
  #line 377 
  dma_cap->rssen = (unsigned int)((unsigned long)hw_cap >> 20) & 1U;
  #line 378 
  dma_cap->tsoen = (unsigned int)((unsigned long)hw_cap >> 18) & 1U;
  #line 379 
  dma_cap->sphen = (unsigned int)((unsigned long)hw_cap >> 17) & 1U;
  #line 381 
  dma_cap->addr64 = (unsigned int)((unsigned long)hw_cap >> 14) & 3U;
  #line 382 
  switch (dma_cap->addr64) {
    #line 383 
    case (unsigned int)0: 
                          #line 383 
    ;
    #line 384 
    dma_cap->addr64 = 32U;
    #line 385 
    break;
    #line 386 
    case (unsigned int)1: 
                          #line 386 
    ;
    #line 387 
    dma_cap->addr64 = 40U;
    #line 388 
    break;
    #line 389 
    case (unsigned int)2: 
                          #line 389 
    ;
    #line 390 
    dma_cap->addr64 = 48U;
    #line 391 
    break;
    #line 392 
    default: 
             #line 392 
    ;
    #line 393 
    dma_cap->addr64 = 32U;
    #line 394 
    break;
  }
  #line 397 
  dma_cap->tx_fifo_size = (unsigned int)(128 << (((unsigned long)hw_cap >> 6) & 31UL));
  #line 399 
  dma_cap->rx_fifo_size = (unsigned int)(128 << ((unsigned long)hw_cap & 31UL));
  #line 403 
  hw_cap = readl(ioaddr + 292U);
  #line 404 
  dma_cap->pps_out_num = (unsigned int)((unsigned long)hw_cap >> 24) & 7U;
  #line 405 
  dma_cap->number_tx_channel = ((unsigned int)((unsigned long)hw_cap >> 18) & 15U) + 1U;
  #line 407 
  dma_cap->number_rx_channel = ((unsigned int)((unsigned long)hw_cap >> 12) & 15U) + 1U;
  #line 409 
  dma_cap->number_tx_queues = ((unsigned int)((unsigned long)hw_cap >> 6) & 15U) + 1U;
  #line 411 
  dma_cap->number_rx_queues = (hw_cap & 15U) + 1U;
  #line 415 
  hw_cap = readl(ioaddr + 296U);
  #line 416 
  dma_cap->asp = (unsigned int)((unsigned long)hw_cap >> 14) & 3U;
  #line 417 
  dma_cap->dvlan = (unsigned int)((unsigned long)hw_cap >> 13) & 1U;
  #line 418 
  dma_cap->frpes = (unsigned int)((unsigned long)hw_cap >> 11) & 3U;
  #line 419 
  dma_cap->frpbs = (unsigned int)((unsigned long)hw_cap >> 9) & 3U;
  #line 420 
  dma_cap->frpsel = (unsigned int)((unsigned long)hw_cap >> 3) & 1U;
  #line 421 
  return;
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_rx_watchdog(void *ioaddr, u32 riwt, u32 nchan)
{
  #line 425 
  u32 i;
  #line 427 
  i = 0U;
  #line 427 
  while (i < nchan) {
    #line 428 
    writel(riwt & 255U,ioaddr + (unsigned long)(i * 128U + 12604U));
    #line 427 
    i ++;
  }
  #line 429 
  return;
}

#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_set_rx_ring_len(void *ioaddr, u32 len, u32 chan)
{
  #line 433 
  writel(len,ioaddr + (unsigned long)(chan * 128U + 12596U));
  #line 434 
  return;
}

#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_set_tx_ring_len(void *ioaddr, u32 len, u32 chan)
{
  #line 438 
  writel(len,ioaddr + (unsigned long)(chan * 128U + 12592U));
  #line 439 
  return;
}

#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_set_rx_tail_ptr(void *ioaddr, u32 ptr, u32 chan)
{
  #line 443 
  writel(ptr,ioaddr + (unsigned long)(chan * 128U + 12588U));
  #line 444 
  return;
}

#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_set_tx_tail_ptr(void *ioaddr, u32 ptr, u32 chan)
{
  #line 448 
  writel(ptr,ioaddr + (unsigned long)(chan * 128U + 12580U));
  #line 449 
  return;
}

#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_enable_tso(void *ioaddr, bool en, u32 chan)
{
  #line 453 
  u32 value = readl(ioaddr + (unsigned long)(chan * 128U + 12548U));
  #line 455 
  if ((int)en != 0) 
                    #line 456 
                    value |= 4096U; else 
                                         #line 458 
                                         value &= 4294963199U;
  #line 460 
  writel(value,ioaddr + (unsigned long)(chan * 128U + 12548U));
  #line 461 
  return;
}

#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_qmode(void *ioaddr, u32 channel, u8 qmode)
{
  #line 465 
  u32 value = readl(ioaddr + (unsigned long)((channel + 34U) * 128U));
  #line 466 
  u32 flow = readl(ioaddr + 144U);
  #line 468 
  value &= 4294967283U;
  #line 469 
  if ((unsigned int)qmode != 0U) {
    #line 470 
    value |= 8U;
    #line 471 
    writel(0U,ioaddr + (unsigned long)(channel * 128U + 4368U));
  }
  else {
    #line 473 
    value |= 4U;
    #line 474 
    writel(flow & 4294967294U,ioaddr + 144U);
  }
  #line 477 
  writel(value,ioaddr + (unsigned long)((channel + 34U) * 128U));
  #line 478 
  return;
}

#line 480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_set_bfsize(void *ioaddr, int bfsize, u32 chan)
{
  #line 482 
  u32 value;
  #line 484 
  value = readl(ioaddr + (unsigned long)(chan * 128U + 12552U));
  #line 485 
  value &= 4294934529U;
  #line 486 
  value = (unsigned int)(bfsize << 1) | value;
  #line 487 
  writel(value,ioaddr + (unsigned long)(chan * 128U + 12552U));
  #line 488 
  return;
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
static void dwxgmac2_enable_sph(void *ioaddr, bool en, u32 chan)
{
  #line 492 
  u32 value = readl(ioaddr + 4U);
  #line 494 
  value &= 4294938623U;
  #line 495 
  value |= 8192U;
  #line 496 
  writel(value,ioaddr + 4U);
  #line 498 
  value = readl(ioaddr + (unsigned long)((chan + 98U) * 128U));
  #line 499 
  if ((int)en != 0) 
                    #line 500 
                    value |= 16777216U; else 
                                             #line 502 
                                             value &= 4278190079U;
  #line 503 
  writel(value,ioaddr + (unsigned long)((chan + 98U) * 128U));
  #line 504 
  return;
}

#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c"
struct stmmac_dma_ops dwxgmac210_dma_ops = {.reset = & dwxgmac2_dma_reset, .init = & dwxgmac2_dma_init, .init_chan = & dwxgmac2_dma_init_chan, .init_rx_chan = & dwxgmac2_dma_init_rx_chan, .init_tx_chan = & dwxgmac2_dma_init_tx_chan, .axi = & dwxgmac2_dma_axi, .dump_regs = & dwxgmac2_dma_dump_regs, .dma_rx_mode = & dwxgmac2_dma_rx_mode, .dma_tx_mode = & dwxgmac2_dma_tx_mode, .enable_dma_irq = & dwxgmac2_enable_dma_irq, .disable_dma_irq = & dwxgmac2_disable_dma_irq, .start_tx = & dwxgmac2_dma_start_tx, .stop_tx = & dwxgmac2_dma_stop_tx, .start_rx = & dwxgmac2_dma_start_rx, .stop_rx = & dwxgmac2_dma_stop_rx, .dma_interrupt = & dwxgmac2_dma_interrupt, .get_hw_feature = & dwxgmac2_get_hw_feature, .rx_watchdog = & dwxgmac2_rx_watchdog, .set_tx_ring_len = & dwxgmac2_set_tx_ring_len, .set_rx_ring_len = & dwxgmac2_set_rx_ring_len, .set_rx_tail_ptr = & dwxgmac2_set_rx_tail_ptr, .set_tx_tail_ptr = & dwxgmac2_set_tx_tail_ptr, .enable_tso = & dwxgmac2_enable_tso, .qmode = & dwxgmac2_qmode, .set_bfsize = & dwxgmac2_set_bfsize, .enable_sph = & dwxgmac2_enable_sph};
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/chain_mode.c"
struct stmmac_mode_ops chain_mode_ops;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/chain_mode.c"
static int jumbo_frm(void *p, struct sk_buff *skb, int csum)
{
  #line 23 
  unsigned int bmax;
  #line 23 
  unsigned int des2;
  #line 24 
  unsigned int len;
  #line 25 
  struct dma_desc *desc;
  #line 19 
  struct stmmac_tx_queue *tx_q = (struct stmmac_tx_queue *)p;
  #line 20 
  unsigned int nopaged_len = skb_headlen(skb);
  #line 21 
  struct stmmac_priv *priv = tx_q->priv_data;
  #line 22 
  unsigned int entry = tx_q->cur_tx;
  #line 24 
  unsigned int i = 1U;
  #line 27 
  desc = tx_q->dma_tx + (unsigned long)entry;
  #line 29 
  if ((priv->plat)->enh_desc != 0) 
                                   #line 30 
                                   bmax = 8188U; else 
                                                      #line 32 
                                                      bmax = 2048U;
  #line 34 
  len = nopaged_len - bmax;
  #line 36 
  des2 = (unsigned int)dma_map_single_attrs(priv->device,(void *)skb->data,
                             (unsigned long)bmax,
                             (enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 38 
  desc->des2 = des2;
  #line 39 
  if (dma_mapping_error(priv->device,(unsigned long long)des2) != 0) 
    #line 40 
    return -1;
  #line 41 
  (tx_q->tx_skbuff_dma + (unsigned long)entry)->buf = (unsigned long long)des2;
  #line 42 
  (tx_q->tx_skbuff_dma + (unsigned long)entry)->len = bmax;
  {
    #line 44 
    int __result = -22;
    #line 44 
    if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->prepare_tx_desc != (void (*)(struct dma_desc *, int , int , bool , int , bool , bool , unsigned int ))0) {
      #line 44 
      (*(((priv->hw)->desc)->prepare_tx_desc))(desc,1,(int)bmax,(_Bool)(csum != 0),1,(_Bool)0,(_Bool)0,skb->len);
      #line 44 
      __result = 0;
    }
    #line 44 
    int tmp_2 = __result;
  }
  #line 47 
  while (len != 0U) {
    #line 48 
    *(tx_q->tx_skbuff + (unsigned long)entry) = (struct sk_buff *)0;
    #line 49 
    entry = (entry + 1U) & 511U;
    #line 50 
    desc = tx_q->dma_tx + (unsigned long)entry;
    #line 52 
    if (len > bmax) {
      #line 53 
      des2 = (unsigned int)dma_map_single_attrs(priv->device,
                               (void *)(skb->data + (unsigned long)(bmax * i)),
                               (unsigned long)bmax,
                               (enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 56 
      desc->des2 = des2;
      #line 57 
      if (dma_mapping_error(priv->device,(unsigned long long)des2) != 0) 
        #line 58 
        return -1;
      #line 59 
      (tx_q->tx_skbuff_dma + (unsigned long)entry)->buf = (unsigned long long)des2;
      #line 60 
      (tx_q->tx_skbuff_dma + (unsigned long)entry)->len = bmax;
      {
        #line 61 
        int __result_0 = -22;
        #line 61 
        if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->prepare_tx_desc != (void (*)(struct dma_desc *, int , int , bool , int , bool , bool , unsigned int ))0) {
          #line 61 
          (*(((priv->hw)->desc)->prepare_tx_desc))(desc,0,(int)bmax,(_Bool)(csum != 0),1,(_Bool)1,(_Bool)0,skb->len);
          #line 61 
          __result_0 = 0;
        }
        #line 61 
        int tmp_4 = __result_0;
      }
      #line 63 
      len -= bmax;
      #line 64 
      i ++;
    }
    else {
      #line 66 
      des2 = (unsigned int)dma_map_single_attrs(priv->device,
                               (void *)(skb->data + (unsigned long)(bmax * i)),
                               (unsigned long)len,
                               (enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 69 
      desc->des2 = des2;
      #line 70 
      if (dma_mapping_error(priv->device,(unsigned long long)des2) != 0) 
        #line 71 
        return -1;
      #line 72 
      (tx_q->tx_skbuff_dma + (unsigned long)entry)->buf = (unsigned long long)des2;
      #line 73 
      (tx_q->tx_skbuff_dma + (unsigned long)entry)->len = len;
      {
        #line 75 
        int __result_1 = -22;
        #line 75 
        if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->prepare_tx_desc != (void (*)(struct dma_desc *, int , int , bool , int , bool , bool , unsigned int ))0) {
          #line 75 
          (*(((priv->hw)->desc)->prepare_tx_desc))(desc,0,(int)len,(_Bool)(csum != 0),1,(_Bool)1,(_Bool)1,skb->len);
          #line 75 
          __result_1 = 0;
        }
        #line 75 
        int tmp_6 = __result_1;
      }
      #line 77 
      len = 0U;
    }
  }
  #line 81 
  tx_q->cur_tx = entry;
  #line 83 
  return (int)entry;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/chain_mode.c"
static unsigned int is_jumbo_frm(int len, int enh_desc)
{
  #line 88 
  unsigned int ret = 0U;
  #line 90 
  if (enh_desc != 0 && len > 8188 || enh_desc == 0 && len > 2048) 
                                                                  #line 92 
                                                                  ret = 1U;
  #line 95 
  return ret;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/chain_mode.c"
static void init_dma_chain(void *des, dma_addr_t phy_addr, unsigned int size, unsigned int extend_desc)
{
  #line 105 
  int i;
  #line 106 
  dma_addr_t dma_phy = phy_addr;
  #line 108 
  if (extend_desc != 0U) {
    #line 109 
    struct dma_extended_desc *p = (struct dma_extended_desc *)des;
    #line 110 
    i = 0;
    #line 110 
    while (size + 4294967295U > (unsigned int)i) {
      #line 111 
      dma_phy += 32ULL;
      #line 112 
      p->basic.des3 = (unsigned int)dma_phy;
      #line 113 
      p ++;
      #line 110 
      i ++;
    }
    #line 115 
    p->basic.des3 = (unsigned int)phy_addr;
  }
  else {
    #line 118 
    struct dma_desc *p_0 = (struct dma_desc *)des;
    #line 119 
    i = 0;
    #line 119 
    while (size + 4294967295U > (unsigned int)i) {
      #line 120 
      dma_phy += 16ULL;
      #line 121 
      p_0->des3 = (unsigned int)dma_phy;
      #line 122 
      p_0 ++;
      #line 119 
      i ++;
    }
    #line 124 
    p_0->des3 = (unsigned int)phy_addr;
  }
  #line 126 
  return;
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/chain_mode.c"
static void refill_desc3(void *priv_ptr, struct dma_desc *p)
{
  #line 130 
  struct stmmac_rx_queue *rx_q = (struct stmmac_rx_queue *)priv_ptr;
  #line 131 
  struct stmmac_priv *priv = rx_q->priv_data;
  #line 133 
  if (priv->hwts_rx_en != 0 && priv->extend_desc == 0) 
                                                       #line 138 
                                                       p->des3 = (unsigned int)rx_q->dma_rx_phy + ((rx_q->dirty_rx + 1U) & 511U) * 16U;
  #line 139 
  return;
}

#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/chain_mode.c"
static void clean_desc3(void *priv_ptr, struct dma_desc *p)
{
  #line 146 
  struct stmmac_tx_queue *tx_q = (struct stmmac_tx_queue *)priv_ptr;
  #line 147 
  struct stmmac_priv *priv = tx_q->priv_data;
  #line 148 
  unsigned int entry = tx_q->dirty_tx;
  #line 150 
  if (((int)(tx_q->tx_skbuff_dma + (unsigned long)entry)->last_segment != 0 && priv->extend_desc == 0) && priv->hwts_tx_en != 0) 
    #line 156 
    p->des3 = (unsigned int)(tx_q->dma_tx_phy + ((unsigned long long)(tx_q->dirty_tx + 1U) & 511ULL)) * 16U;
  #line 157 
  return;
}

#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/chain_mode.c"
struct stmmac_mode_ops chain_mode_ops = {.init = & init_dma_chain, .is_jumbo_frm = & is_jumbo_frm, .jumbo_frm = & jumbo_frm, .refill_desc3 = & refill_desc3, .clean_desc3 = & clean_desc3};
#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/ring_mode.c"
struct stmmac_mode_ops ring_mode_ops;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/ring_mode.c"
static int jumbo_frm_0(void *p, struct sk_buff *skb, int csum)
{
  #line 23 
  unsigned int bmax;
  #line 23 
  unsigned int len;
  #line 23 
  unsigned int des2;
  #line 24 
  struct dma_desc *desc;
  #line 19 
  struct stmmac_tx_queue *tx_q = (struct stmmac_tx_queue *)p;
  #line 20 
  unsigned int nopaged_len = skb_headlen(skb);
  #line 21 
  struct stmmac_priv *priv = tx_q->priv_data;
  #line 22 
  unsigned int entry = tx_q->cur_tx;
  #line 26 
  if (priv->extend_desc != 0) 
                              #line 27 
                              desc = (struct dma_desc *)(tx_q->dma_etx + (unsigned long)entry); else 
                                                                    #line 29 
                                                                    desc = tx_q->dma_tx + (unsigned long)entry;
  #line 31 
  if ((priv->plat)->enh_desc != 0) 
                                   #line 32 
                                   bmax = 8188U; else 
                                                      #line 34 
                                                      bmax = 2048U;
  #line 36 
  len = nopaged_len - bmax;
  #line 38 
  if (nopaged_len > 8188U) {
    #line 40 
    des2 = (unsigned int)dma_map_single_attrs(priv->device,(void *)skb->data,
                             (unsigned long)bmax,
                             (enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 42 
    desc->des2 = des2;
    #line 43 
    if (dma_mapping_error(priv->device,(unsigned long long)des2) != 0) 
      #line 44 
      return -1;
    #line 46 
    (tx_q->tx_skbuff_dma + (unsigned long)entry)->buf = (unsigned long long)des2;
    #line 47 
    (tx_q->tx_skbuff_dma + (unsigned long)entry)->len = bmax;
    #line 48 
    (tx_q->tx_skbuff_dma + (unsigned long)entry)->is_jumbo = (_Bool)1;
    #line 50 
    desc->des3 = des2 + 4096U;
    {
      #line 51 
      int __result = -22;
      #line 51 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->prepare_tx_desc != (void (*)(struct dma_desc *, int , int , bool , int , bool , bool , unsigned int ))0) {
        #line 51 
        (*(((priv->hw)->desc)->prepare_tx_desc))(desc,1,(int)bmax,(_Bool)(csum != 0),2,(_Bool)0,(_Bool)0,skb->len);
        #line 51 
        __result = 0;
      }
      #line 51 
      int tmp_2 = __result;
    }
    #line 53 
    *(tx_q->tx_skbuff + (unsigned long)entry) = (struct sk_buff *)0;
    #line 54 
    entry = (entry + 1U) & 511U;
    #line 56 
    if (priv->extend_desc != 0) 
                                #line 57 
                                desc = (struct dma_desc *)(tx_q->dma_etx + (unsigned long)entry); else 
                                                                    #line 59 
                                                                    desc = tx_q->dma_tx + (unsigned long)entry;
    #line 61 
    des2 = (unsigned int)dma_map_single_attrs(priv->device,
                               (void *)(skb->data + (unsigned long)bmax),
                               (unsigned long)len,
                               (enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 63 
    desc->des2 = des2;
    #line 64 
    if (dma_mapping_error(priv->device,(unsigned long long)des2) != 0) 
      #line 65 
      return -1;
    #line 66 
    (tx_q->tx_skbuff_dma + (unsigned long)entry)->buf = (unsigned long long)des2;
    #line 67 
    (tx_q->tx_skbuff_dma + (unsigned long)entry)->len = len;
    #line 68 
    (tx_q->tx_skbuff_dma + (unsigned long)entry)->is_jumbo = (_Bool)1;
    #line 70 
    desc->des3 = des2 + 4096U;
    {
      #line 71 
      int __result_0 = -22;
      #line 71 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->prepare_tx_desc != (void (*)(struct dma_desc *, int , int , bool , int , bool , bool , unsigned int ))0) {
        #line 71 
        int tmp_5;
        #line 71 
        ;
        #line 71 
        if ((int)skb_is_nonlinear(skb) != 0) 
                                             #line 71 
                                             tmp_5 = 0; else 
                                                             #line 71 
                                                             tmp_5 = 1;
        #line 71 
        ;
        #line 71 
        ;
        #line 71 
        ;
        #line 71 
        (*(((priv->hw)->desc)->prepare_tx_desc))(desc,0,(int)len,(_Bool)(csum != 0),2,(_Bool)1,(_Bool)((int)((_Bool)(tmp_5 != 0))),skb->len);
        #line 71 
        __result_0 = 0;
      }
      #line 71 
      int tmp_6 = __result_0;
    }
  }
  else {
    #line 75 
    des2 = (unsigned int)dma_map_single_attrs(priv->device,(void *)skb->data,
                               (unsigned long)nopaged_len,
                               (enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 77 
    desc->des2 = des2;
    #line 78 
    if (dma_mapping_error(priv->device,(unsigned long long)des2) != 0) 
      #line 79 
      return -1;
    #line 80 
    (tx_q->tx_skbuff_dma + (unsigned long)entry)->buf = (unsigned long long)des2;
    #line 81 
    (tx_q->tx_skbuff_dma + (unsigned long)entry)->len = nopaged_len;
    #line 82 
    (tx_q->tx_skbuff_dma + (unsigned long)entry)->is_jumbo = (_Bool)1;
    #line 83 
    desc->des3 = des2 + 4096U;
    {
      #line 84 
      int __result_1 = -22;
      #line 84 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->prepare_tx_desc != (void (*)(struct dma_desc *, int , int , bool , int , bool , bool , unsigned int ))0) {
        #line 84 
        int tmp_9;
        #line 84 
        ;
        #line 84 
        if ((int)skb_is_nonlinear(skb) != 0) 
                                             #line 84 
                                             tmp_9 = 0; else 
                                                             #line 84 
                                                             tmp_9 = 1;
        #line 84 
        ;
        #line 84 
        ;
        #line 84 
        ;
        #line 84 
        (*(((priv->hw)->desc)->prepare_tx_desc))(desc,1,(int)nopaged_len,(_Bool)(csum != 0),2,(_Bool)0,(_Bool)((int)((_Bool)(tmp_9 != 0))),skb->len);
        #line 84 
        __result_1 = 0;
      }
      #line 84 
      int tmp_10 = __result_1;
    }
  }
  #line 89 
  tx_q->cur_tx = entry;
  #line 91 
  return (int)entry;
}

#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/ring_mode.c"
static unsigned int is_jumbo_frm_0(int len, int enh_desc)
{
  #line 96 
  unsigned int ret = 0U;
  #line 98 
  if (len > 4095) 
                  #line 99 
                  ret = 1U;
  #line 101 
  return ret;
}

#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/ring_mode.c"
static void refill_desc3_0(void *priv_ptr, struct dma_desc *p)
{
  #line 106 
  struct stmmac_rx_queue *rx_q = (struct stmmac_rx_queue *)priv_ptr;
  #line 107 
  struct stmmac_priv *priv = rx_q->priv_data;
  #line 110 
  if (priv->dma_buf_sz == 16368U) 
                                  #line 111 
                                  p->des3 = p->des2 + 8188U;
  #line 112 
  return;
}

#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/ring_mode.c"
static void init_desc3(struct dma_desc *p)
{
  #line 117 
  p->des3 = p->des2 + 8188U;
  #line 118 
  return;
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/ring_mode.c"
static void clean_desc3_0(void *priv_ptr, struct dma_desc *p)
{
  #line 122 
  struct stmmac_tx_queue *tx_q = (struct stmmac_tx_queue *)priv_ptr;
  #line 123 
  struct stmmac_priv *priv = tx_q->priv_data;
  #line 124 
  unsigned int entry = tx_q->dirty_tx;
  #line 127 
  if ((long)((int)(tx_q->tx_skbuff_dma + (unsigned long)entry)->is_jumbo != 0) != 0L || (((((long)((int)(tx_q->tx_skbuff_dma + (unsigned long)entry)->last_segment != 0) != 0L && (long)(priv->extend_desc == 0) != 0L) != 0) != 0 && (long)(priv->hwts_tx_en != 0) != 0L) != 0) != 0) 
    #line 130 
    p->des3 = 0U;
  #line 131 
  return;
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/ring_mode.c"
static int set_16kib_bfsize(int mtu)
{
  #line 135 
  int ret = 0;
  #line 136 
  if ((long)(mtu > 8188) != 0L) 
                                #line 137 
                                ret = 16368;
  #line 138 
  return ret;
}

#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/ring_mode.c"
struct stmmac_mode_ops ring_mode_ops = {.is_jumbo_frm = & is_jumbo_frm_0, .jumbo_frm = & jumbo_frm_0, .set_16kib_bfsize = & set_16kib_bfsize, .init_desc3 = & init_desc3, .refill_desc3 = & refill_desc3_0, .clean_desc3 = & clean_desc3_0};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void stmmac_dwmac4_set_mac_addr(void *ioaddr, u8 *addr, unsigned int high, unsigned int low);
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void stmmac_dwmac4_get_mac_addr(void *ioaddr, unsigned char *addr, unsigned int high, unsigned int low);
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void stmmac_dwmac4_set_mac(void *ioaddr, bool enable);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.h"
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
int dwmac4_dma_reset(void *ioaddr);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.h"
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_enable_dma_irq(void *ioaddr, u32 chan);
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.h"
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac410_enable_dma_irq(void *ioaddr, u32 chan);
#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.h"
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_disable_dma_irq(void *ioaddr, u32 chan);
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.h"
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_dma_start_tx(void *ioaddr, u32 chan);
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.h"
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_dma_stop_tx(void *ioaddr, u32 chan);
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.h"
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_dma_start_rx(void *ioaddr, u32 chan);
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.h"
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_dma_stop_rx(void *ioaddr, u32 chan);
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.h"
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
int dwmac4_dma_interrupt(void *ioaddr, struct stmmac_extra_stats *x, u32 chan);
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.h"
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_set_rx_ring_len(void *ioaddr, u32 len, u32 chan);
#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.h"
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_set_tx_ring_len(void *ioaddr, u32 len, u32 chan);
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.h"
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_set_rx_tail_ptr(void *ioaddr, u32 tail_ptr, u32 chan);
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.h"
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_set_tx_tail_ptr(void *ioaddr, u32 tail_ptr, u32 chan);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
int dwmac4_dma_reset(void *ioaddr)
{
  #line 17 
  int limit;
  #line 16 
  u32 value = readl(ioaddr + 4096U);
  #line 20 
  value |= 1U;
  #line 21 
  writel(value,ioaddr + 4096U);
  #line 22 
  limit = 10;
  #line 23 
  while (1) {
    #line 23 
    int tmp_2;
    #line 23 
    tmp_2 = limit;
    #line 23 
    limit --;
    #line 23 
    ;
    #line 23 
    if (! (tmp_2 != 0)) 
                        #line 23 
                        break;
    {
      #line 24 
      if (((unsigned long)readl(ioaddr + 4096U) & 1UL) == 0UL) 
                                                               #line 25 
                                                               break;
      {
        #line 26 
        unsigned long __ms = 10UL;
        #line 26 
        while (1) {
          #line 26 
          unsigned long tmp_1;
          #line 26 
          tmp_1 = __ms;
          #line 26 
          __ms --;
          #line 26 
          ;
          #line 26 
          if (! (tmp_1 != 0UL)) 
                                #line 26 
                                break;
          #line 26 
          __const_udelay(4295000UL);
        }
      }
    }
  }
  #line 29 
  if (limit < 0) 
                 #line 30 
                 return -16;
  #line 32 
  return 0;
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_set_rx_tail_ptr(void *ioaddr, u32 tail_ptr, u32 chan)
{
  #line 37 
  writel(tail_ptr,ioaddr + (unsigned long)((chan + 34U) * 128U + 40U));
  #line 38 
  return;
}

#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_set_tx_tail_ptr(void *ioaddr, u32 tail_ptr, u32 chan)
{
  #line 42 
  writel(tail_ptr,ioaddr + (unsigned long)((chan + 34U) * 128U + 32U));
  #line 43 
  return;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_dma_start_tx(void *ioaddr, u32 chan)
{
  #line 47 
  u32 value = readl(ioaddr + (unsigned long)((chan + 34U) * 128U + 4U));
  #line 49 
  value |= 1U;
  #line 50 
  writel(value,ioaddr + (unsigned long)((chan + 34U) * 128U + 4U));
  #line 52 
  value = readl(ioaddr);
  #line 53 
  value |= 2U;
  #line 54 
  writel(value,ioaddr);
  #line 55 
  return;
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_dma_stop_tx(void *ioaddr, u32 chan)
{
  #line 59 
  u32 value = readl(ioaddr + (unsigned long)((chan + 34U) * 128U + 4U));
  #line 61 
  value &= 4294967294U;
  #line 62 
  writel(value,ioaddr + (unsigned long)((chan + 34U) * 128U + 4U));
  #line 64 
  value = readl(ioaddr);
  #line 65 
  value &= 4294967293U;
  #line 66 
  writel(value,ioaddr);
  #line 67 
  return;
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_dma_start_rx(void *ioaddr, u32 chan)
{
  #line 71 
  u32 value = readl(ioaddr + (unsigned long)((chan + 34U) * 128U + 8U));
  #line 73 
  value |= 1U;
  #line 75 
  writel(value,ioaddr + (unsigned long)((chan + 34U) * 128U + 8U));
  #line 77 
  value = readl(ioaddr);
  #line 78 
  value |= 1U;
  #line 79 
  writel(value,ioaddr);
  #line 80 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_dma_stop_rx(void *ioaddr, u32 chan)
{
  #line 84 
  u32 value = readl(ioaddr + (unsigned long)((chan + 34U) * 128U + 8U));
  #line 86 
  value &= 4294967294U;
  #line 87 
  writel(value,ioaddr + (unsigned long)((chan + 34U) * 128U + 8U));
  #line 88 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_set_tx_ring_len(void *ioaddr, u32 len, u32 chan)
{
  #line 92 
  writel(len,ioaddr + (unsigned long)((chan + 34U) * 128U + 44U));
  #line 93 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_set_rx_ring_len(void *ioaddr, u32 len, u32 chan)
{
  #line 97 
  writel(len,ioaddr + (unsigned long)((chan + 34U) * 128U + 48U));
  #line 98 
  return;
}

#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_enable_dma_irq(void *ioaddr, u32 chan)
{
  #line 102 
  writel(102465U,ioaddr + (unsigned long)((chan + 34U) * 128U + 52U));
  #line 104 
  return;
}

#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac410_enable_dma_irq(void *ioaddr, u32 chan)
{
  #line 108 
  writel(53313U,ioaddr + (unsigned long)((chan + 34U) * 128U + 52U));
  #line 110 
  return;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void dwmac4_disable_dma_irq(void *ioaddr, u32 chan)
{
  #line 114 
  writel(0U,ioaddr + (unsigned long)((chan + 34U) * 128U + 52U));
  #line 115 
  return;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
int dwmac4_dma_interrupt(void *ioaddr, struct stmmac_extra_stats *x, u32 chan)
{
  #line 120 
  u32 intr_status = readl(ioaddr + (unsigned long)((chan + 34U) * 128U + 96U));
  #line 121 
  u32 intr_en = readl(ioaddr + (unsigned long)((chan + 34U) * 128U + 52U));
  #line 122 
  int ret = 0;
  #line 125 
  if ((long)(((unsigned long)intr_status & 16384UL) != 0UL) != 0L) {
    #line 126 
    if ((long)(((unsigned long)intr_status & 128UL) != 0UL) != 0L) 
                                                                   #line 127 
                                                                   (x->rx_buf_unav_irq) ++;
    #line 128 
    if ((long)(((unsigned long)intr_status & 256UL) != 0UL) != 0L) 
                                                                   #line 129 
                                                                   (x->rx_process_stopped_irq) ++;
    #line 130 
    if ((long)(((unsigned long)intr_status & 512UL) != 0UL) != 0L) 
                                                                   #line 131 
                                                                   (x->rx_watchdog_irq) ++;
    #line 132 
    if ((long)(((unsigned long)intr_status & 1024UL) != 0UL) != 0L) 
                                                                    #line 133 
                                                                    (x->tx_early_irq) ++;
    #line 134 
    if ((long)(((unsigned long)intr_status & 2UL) != 0UL) != 0L) {
      #line 135 
      (x->tx_process_stopped_irq) ++;
      #line 136 
      ret = 1;
    }
    #line 138 
    if ((long)(((unsigned long)intr_status & 4096UL) != 0UL) != 0L) {
      #line 139 
      (x->fatal_bus_error_irq) ++;
      #line 140 
      ret = 1;
    }
  }
  #line 144 
  if ((long)(((unsigned long)intr_status & 32768UL) != 0UL) != 0L) {
    #line 145 
    (x->normal_irq_n) ++;
    #line 146 
    if ((long)(((unsigned long)intr_status & 64UL) != 0UL) != 0L) {
      #line 147 
      (x->rx_normal_irq_n) ++;
      #line 148 
      ret |= 4;
    }
    #line 150 
    if ((long)(((unsigned long)intr_status & 5UL) != 0UL) != 0L) {
      #line 152 
      (x->tx_normal_irq_n) ++;
      #line 153 
      ret |= 8;
    }
    #line 155 
    if ((long)(((unsigned long)intr_status & 2048UL) != 0UL) != 0L) 
                                                                    #line 156 
                                                                    (x->rx_early_irq) ++;
  }
  #line 159 
  writel(intr_status & intr_en,ioaddr + (unsigned long)((chan + 34U) * 128U + 96U));
  #line 160 
  return ret;
}

#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void stmmac_dwmac4_set_mac_addr(void *ioaddr, u8 *addr, unsigned int high, unsigned int low)
{
  #line 166 
  unsigned long data;
  #line 168 
  data = (unsigned long)(((int)*(addr + 5U) << 8) | (int)*(addr + 4U));
  #line 173 
  data = data;
  #line 174 
  writel((unsigned int)data | 2147483648U,ioaddr + (unsigned long)high);
  #line 175 
  data = (unsigned long)(((((int)*(addr + 3U) << 24) | ((int)*(addr + 2U) << 16)) | ((int)*(addr + 1U) << 8)) | (int)*addr);
  #line 176 
  writel((unsigned int)data,ioaddr + (unsigned long)low);
  #line 177 
  return;
}

#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void stmmac_dwmac4_set_mac(void *ioaddr, bool enable)
{
  #line 182 
  u32 value = readl(ioaddr);
  #line 184 
  if ((int)enable != 0) 
                        #line 185 
                        value |= 3U; else 
                                          #line 187 
                                          value &= 4294967292U;
  #line 189 
  writel(value,ioaddr);
  #line 190 
  return;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c"
void stmmac_dwmac4_get_mac_addr(void *ioaddr, unsigned char *addr, unsigned int high, unsigned int low)
{
  #line 195 
  unsigned int hi_addr;
  #line 195 
  unsigned int lo_addr;
  #line 198 
  hi_addr = readl(ioaddr + (unsigned long)high);
  #line 199 
  lo_addr = readl(ioaddr + (unsigned long)low);
  #line 202 
  *addr = (unsigned char)lo_addr;
  #line 203 
  *(addr + 1U) = (unsigned char)(lo_addr >> 8);
  #line 204 
  *(addr + 2U) = (unsigned char)(lo_addr >> 16);
  #line 205 
  *(addr + 3U) = (unsigned char)(lo_addr >> 24);
  #line 206 
  *(addr + 4U) = (unsigned char)hi_addr;
  #line 207 
  *(addr + 5U) = (unsigned char)(hi_addr >> 8);
  #line 208 
  return;
}

#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_hwtstamp.c"
struct stmmac_hwtimestamp stmmac_ptp;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_hwtstamp.c"
static void config_hw_tstamping(void *ioaddr, u32 data)
{
  #line 19 
  writel(data,ioaddr);
  #line 20 
  return;
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_hwtstamp.c"
static void config_sub_second_increment(void *ioaddr, u32 ptp_clock, int gmac4, u32 *ssinc)
{
  #line 26 
  unsigned long data;
  #line 27 
  u32 reg_value;
  #line 25 
  u32 value = readl(ioaddr);
  #line 33 
  if (((unsigned long)value & 2UL) != 0UL) 
                                           #line 34 
                                           data = 20UL; else 
                                                             #line 36 
                                                             data = (unsigned long)(1000000000U / ptp_clock);
  #line 39 
  if (((unsigned long)value & 512UL) == 0UL) 
                                             #line 40 
                                             data = (data * 1000UL) / 465UL;
  #line 42 
  data &= 255UL;
  #line 44 
  reg_value = (unsigned int)data;
  #line 45 
  if (gmac4 != 0) 
                  #line 46 
                  reg_value <<= 16;
  #line 48 
  writel(reg_value,ioaddr + 4U);
  #line 50 
  if (ssinc != (u32 *)0U) 
                          #line 51 
                          *ssinc = (unsigned int)data;
  #line 52 
  return;
}

#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_hwtstamp.c"
static int init_systime(void *ioaddr, u32 sec, u32 nsec)
{
  #line 56 
  int limit;
  #line 57 
  u32 value;
  #line 59 
  writel(sec,ioaddr + 16U);
  #line 60 
  writel(nsec,ioaddr + 20U);
  #line 62 
  value = readl(ioaddr);
  #line 63 
  value |= 4U;
  #line 64 
  writel(value,ioaddr);
  #line 67 
  limit = 10;
  #line 68 
  while (1) {
    #line 68 
    int tmp_1;
    #line 68 
    tmp_1 = limit;
    #line 68 
    limit --;
    #line 68 
    ;
    #line 68 
    if (! (tmp_1 != 0)) 
                        #line 68 
                        break;
    {
      #line 69 
      if (((unsigned long)readl(ioaddr) & 4UL) == 0UL) 
                                                       #line 70 
                                                       break;
      {
        #line 71 
        unsigned long __ms = 10UL;
        #line 71 
        while (1) {
          #line 71 
          unsigned long tmp_0;
          #line 71 
          tmp_0 = __ms;
          #line 71 
          __ms --;
          #line 71 
          ;
          #line 71 
          if (! (tmp_0 != 0UL)) 
                                #line 71 
                                break;
          #line 71 
          __const_udelay(4295000UL);
        }
      }
    }
  }
  #line 73 
  if (limit < 0) 
                 #line 74 
                 return -16;
  #line 76 
  return 0;
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_hwtstamp.c"
static int config_addend(void *ioaddr, u32 addend)
{
  #line 81 
  u32 value;
  #line 82 
  int limit;
  #line 84 
  writel(addend,ioaddr + 24U);
  #line 86 
  value = readl(ioaddr);
  #line 87 
  value |= 32U;
  #line 88 
  writel(value,ioaddr);
  #line 91 
  limit = 10;
  #line 92 
  while (1) {
    #line 92 
    int tmp_1;
    #line 92 
    tmp_1 = limit;
    #line 92 
    limit --;
    #line 92 
    ;
    #line 92 
    if (! (tmp_1 != 0)) 
                        #line 92 
                        break;
    {
      #line 93 
      if (((unsigned long)readl(ioaddr) & 32UL) == 0UL) 
                                                        #line 94 
                                                        break;
      {
        #line 95 
        unsigned long __ms = 10UL;
        #line 95 
        while (1) {
          #line 95 
          unsigned long tmp_0;
          #line 95 
          tmp_0 = __ms;
          #line 95 
          __ms --;
          #line 95 
          ;
          #line 95 
          if (! (tmp_0 != 0UL)) 
                                #line 95 
                                break;
          #line 95 
          __const_udelay(4295000UL);
        }
      }
    }
  }
  #line 97 
  if (limit < 0) 
                 #line 98 
                 return -16;
  #line 100 
  return 0;
}

#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_hwtstamp.c"
static int adjust_systime(void *ioaddr, u32 sec, u32 nsec, int add_sub, int gmac4)
{
  #line 106 
  u32 value;
  #line 107 
  int limit;
  #line 109 
  if (add_sub != 0) {
    #line 114 
    if (gmac4 != 0) 
                    #line 115 
                    sec = - sec;
    #line 117 
    value = readl(ioaddr);
    #line 118 
    if (((unsigned long)value & 512UL) != 0UL) 
                                               #line 119 
                                               nsec = 1000000000U - nsec; else 
                                                                    #line 121 
                                                                    nsec = 2147483648U - nsec;
  }
  #line 124 
  writel(sec,ioaddr + 16U);
  #line 125 
  value = (unsigned int)(add_sub << 31) | nsec;
  #line 126 
  writel(value,ioaddr + 20U);
  #line 129 
  value = readl(ioaddr);
  #line 130 
  value |= 8U;
  #line 131 
  writel(value,ioaddr);
  #line 134 
  limit = 10;
  #line 135 
  while (1) {
    #line 135 
    int tmp_1;
    #line 135 
    tmp_1 = limit;
    #line 135 
    limit --;
    #line 135 
    ;
    #line 135 
    if (! (tmp_1 != 0)) 
                        #line 135 
                        break;
    {
      #line 136 
      if (((unsigned long)readl(ioaddr) & 8UL) == 0UL) 
                                                       #line 137 
                                                       break;
      {
        #line 138 
        unsigned long __ms = 10UL;
        #line 138 
        while (1) {
          #line 138 
          unsigned long tmp_0;
          #line 138 
          tmp_0 = __ms;
          #line 138 
          __ms --;
          #line 138 
          ;
          #line 138 
          if (! (tmp_0 != 0UL)) 
                                #line 138 
                                break;
          #line 138 
          __const_udelay(4295000UL);
        }
      }
    }
  }
  #line 140 
  if (limit < 0) 
                 #line 141 
                 return -16;
  #line 143 
  return 0;
}

#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_hwtstamp.c"
static void get_systime(void *ioaddr, u64 *systime)
{
  #line 148 
  u64 ns;
  #line 151 
  ns = (unsigned long long)readl(ioaddr + 12U);
  #line 153 
  ns = (unsigned long long)readl(ioaddr + 8U) * 1000000000ULL + ns;
  #line 155 
  if (systime != (u64 *)0ULL) 
                              #line 156 
                              *systime = ns;
  #line 157 
  return;
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_hwtstamp.c"
struct stmmac_hwtimestamp stmmac_ptp = {.config_hw_tstamping = & config_hw_tstamping, .config_sub_second_increment = & config_sub_second_increment, .init_systime = & init_systime, .config_addend = & config_addend, .adjust_systime = & adjust_systime, .get_systime = & get_systime};
#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_lib.c"
void stmmac_set_mac_addr(void *ioaddr, u8 *addr, unsigned int high, unsigned int low);
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_lib.c"
void stmmac_get_mac_addr(void *ioaddr, unsigned char *addr, unsigned int high, unsigned int low);
#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_lib.c"
void stmmac_set_mac(void *ioaddr, bool enable);
#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_lib.c"
void dwmac_dma_flush_tx_fifo(void *ioaddr);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_lib.c"
int dwmac_dma_reset(void *ioaddr)
{
  #line 25 
  int tmp_4;
  #line 19 
  int err;
  #line 18 
  u32 value = readl(ioaddr + 4096U);
  #line 22 
  value |= 1U;
  #line 23 
  writel(value,ioaddr + 4096U);
  {
    #line 25 
    u64 __timeout_us = 100000ULL;
    #line 25 
    unsigned long __sleep_us = 10000UL;
    #line 25 
    ;
    #line 25 
    ktime_t __timeout = ktime_add_us(ktime_get(),__timeout_us);
    #line 25 
    if (__sleep_us != 0UL) 
                           #line 25 
                           __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_lib.c",25,0);
    #line 25 
    while (1) {
      #line 25 
      value = readl(ioaddr + 4096U);
      #line 25 
      if ((value & 1U) == 0U) 
                              #line 25 
                              break;
      #line 25 
      if (__timeout_us != 0ULL) {
        #line 25 
        ;
        #line 25 
        if (ktime_compare(ktime_get(),__timeout) > 0) {
          #line 25 
          value = readl(ioaddr + 4096U);
          #line 25 
          break;
        }
      }
      #line 25 
      if (__sleep_us != 0UL) 
                             #line 25 
                             usleep_range((__sleep_us >> 2) + 1UL,__sleep_us);
    }
    #line 25 
    if ((value & 1U) == 0U) 
                            #line 25 
                            tmp_4 = 0; else 
                                            #line 25 
                                            tmp_4 = -110;
    }
  #line 25 
  err = tmp_4;
  #line 28 
  if (err != 0) 
                #line 29 
                return -16;
  #line 31 
  return 0;
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_lib.c"
void dwmac_enable_dma_transmission(void *ioaddr)
{
  #line 37 
  writel(1U,ioaddr + 4100U);
  #line 38 
  return;
}

#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_lib.c"
void dwmac_enable_dma_irq(void *ioaddr, u32 chan)
{
  #line 42 
  writel(106593U,ioaddr + 4124U);
  #line 43 
  return;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_lib.c"
void dwmac_disable_dma_irq(void *ioaddr, u32 chan)
{
  #line 47 
  writel(0U,ioaddr + 4124U);
  #line 48 
  return;
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_lib.c"
void dwmac_dma_start_tx(void *ioaddr, u32 chan)
{
  #line 52 
  u32 value = readl(ioaddr + 4120U);
  #line 53 
  value |= 8192U;
  #line 54 
  writel(value,ioaddr + 4120U);
  #line 55 
  return;
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_lib.c"
void dwmac_dma_stop_tx(void *ioaddr, u32 chan)
{
  #line 59 
  u32 value = readl(ioaddr + 4120U);
  #line 60 
  value &= 4294959103U;
  #line 61 
  writel(value,ioaddr + 4120U);
  #line 62 
  return;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_lib.c"
void dwmac_dma_start_rx(void *ioaddr, u32 chan)
{
  #line 66 
  u32 value = readl(ioaddr + 4120U);
  #line 67 
  value |= 2U;
  #line 68 
  writel(value,ioaddr + 4120U);
  #line 69 
  return;
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_lib.c"
void dwmac_dma_stop_rx(void *ioaddr, u32 chan)
{
  #line 73 
  u32 value = readl(ioaddr + 4120U);
  #line 74 
  value &= 4294967293U;
  #line 75 
  writel(value,ioaddr + 4120U);
  #line 76 
  return;
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_lib.c"
int dwmac_dma_interrupt(void *ioaddr, struct stmmac_extra_stats *x, u32 chan)
{
  #line 151 
  int ret = 0;
  #line 153 
  u32 intr_status = readl(ioaddr + 4116U);
  #line 162 
  if ((long)((intr_status & 32768U) != 0U) != 0L) {
    #line 163 
    if ((long)((intr_status & 32U) != 0U) != 0L) {
      #line 164 
      ret = 2;
      #line 165 
      (x->tx_undeflow_irq) ++;
    }
    #line 167 
    if ((long)((intr_status & 8U) != 0U) != 0L) 
                                                #line 168 
                                                (x->tx_jabber_irq) ++;
    #line 170 
    if ((long)((intr_status & 16U) != 0U) != 0L) 
                                                 #line 171 
                                                 (x->rx_overflow_irq) ++;
    #line 173 
    if ((long)((intr_status & 128U) != 0U) != 0L) 
                                                  #line 174 
                                                  (x->rx_buf_unav_irq) ++;
    #line 175 
    if ((long)((intr_status & 256U) != 0U) != 0L) 
                                                  #line 176 
                                                  (x->rx_process_stopped_irq) ++;
    #line 177 
    if ((long)((intr_status & 512U) != 0U) != 0L) 
                                                  #line 178 
                                                  (x->rx_watchdog_irq) ++;
    #line 179 
    if ((long)((intr_status & 1024U) != 0U) != 0L) 
                                                   #line 180 
                                                   (x->tx_early_irq) ++;
    #line 181 
    if ((long)((intr_status & 2U) != 0U) != 0L) {
      #line 182 
      (x->tx_process_stopped_irq) ++;
      #line 183 
      ret = 1;
    }
    #line 185 
    if ((long)((intr_status & 8192U) != 0U) != 0L) {
      #line 186 
      (x->fatal_bus_error_irq) ++;
      #line 187 
      ret = 1;
    }
  }
  #line 191 
  if ((long)((intr_status & 65536U) != 0U) != 0L) {
    #line 192 
    (x->normal_irq_n) ++;
    #line 193 
    if ((long)((intr_status & 64U) != 0U) != 0L) {
      #line 194 
      u32 value = readl(ioaddr + 4124U);
      #line 196 
      if ((long)((value & 64U) != 0U) != 0L) {
        #line 197 
        (x->rx_normal_irq_n) ++;
        #line 198 
        ret |= 4;
      }
    }
    #line 201 
    if ((long)((intr_status & 1U) != 0U) != 0L) {
      #line 202 
      (x->tx_normal_irq_n) ++;
      #line 203 
      ret |= 8;
    }
    #line 205 
    if ((long)((intr_status & 16384U) != 0U) != 0L) 
                                                    #line 206 
                                                    (x->rx_early_irq) ++;
  }
  #line 209 
  if ((long)((intr_status & 469762048U) != 0U) != 0L) 
                                                      #line 211 
                                                      printk((char *)"\001",(char *)"dwmac_dma_interrupt",intr_status);
  #line 214 
  writel(intr_status & 131071U,ioaddr + 4116U);
  #line 216 
  return ret;
}

#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_lib.c"
void dwmac_dma_flush_tx_fifo(void *ioaddr)
{
  #line 221 
  u32 csr6 = readl(ioaddr + 4120U);
  #line 222 
  writel(csr6 | 1048576U,ioaddr + 4120U);
  #line 224 
  while (1) {
    #line 226 
    if (! ((readl(ioaddr + 4120U) & 1048576U) != 0U)) 
                                                      #line 224 
                                                      break;
  }
  #line 225 
  return;
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_lib.c"
void stmmac_set_mac_addr(void *ioaddr, u8 *addr, unsigned int high, unsigned int low)
{
  #line 230 
  unsigned long data;
  #line 232 
  data = (unsigned long)(((int)*(addr + 5U) << 8) | (int)*(addr + 4U));
  #line 237 
  writel((unsigned int)data | 2147483648U,ioaddr + (unsigned long)high);
  #line 238 
  data = (unsigned long)(((((int)*(addr + 3U) << 24) | ((int)*(addr + 2U) << 16)) | ((int)*(addr + 1U) << 8)) | (int)*addr);
  #line 239 
  writel((unsigned int)data,ioaddr + (unsigned long)low);
  #line 240 
  return;
}

#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_lib.c"
void stmmac_set_mac(void *ioaddr, bool enable)
{
  #line 246 
  u32 value = readl(ioaddr);
  #line 248 
  if ((int)enable != 0) 
                        #line 249 
                        value |= 12U; else 
                                           #line 251 
                                           value &= 4294967283U;
  #line 253 
  writel(value,ioaddr);
  #line 254 
  return;
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac_lib.c"
void stmmac_get_mac_addr(void *ioaddr, unsigned char *addr, unsigned int high, unsigned int low)
{
  #line 259 
  unsigned int hi_addr;
  #line 259 
  unsigned int lo_addr;
  #line 262 
  hi_addr = readl(ioaddr + (unsigned long)high);
  #line 263 
  lo_addr = readl(ioaddr + (unsigned long)low);
  #line 266 
  *addr = (unsigned char)lo_addr;
  #line 267 
  *(addr + 1U) = (unsigned char)(lo_addr >> 8);
  #line 268 
  *(addr + 2U) = (unsigned char)(lo_addr >> 16);
  #line 269 
  *(addr + 3U) = (unsigned char)(lo_addr >> 24);
  #line 270 
  *(addr + 4U) = (unsigned char)hi_addr;
  #line 271 
  *(addr + 5U) = (unsigned char)(hi_addr >> 8);
  #line 272 
  return;
}

#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitrev.h"
#line 15 
extern u8 byte_rev_table[256U];
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitrev.h"
__inline static u8 __bitrev8(u8 byte)
{
  #line 18 
  return byte_rev_table[(int)byte];
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitrev.h"
__inline static u16 __bitrev16(u16 x)
{
  #line 23 
  return (unsigned short)(((int)__bitrev8((unsigned char)((int)((unsigned char)x))) << 8) | (int)__bitrev8((unsigned char)((int)((unsigned char)((int)x >> 8)))));
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitrev.h"
__inline static u32 __bitrev32(u32 x)
{
  #line 28 
  return (unsigned int)(((int)__bitrev16((unsigned short)((int)((unsigned short)x))) << 16) | (int)__bitrev16((unsigned short)((int)((unsigned short)(x >> 16)))));
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/crc32.h"
#line 11 
u32 crc32_le(u32, unsigned char *, size_t);
#line 1718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dsa.h"
__inline static bool netdev_uses_dsa(struct net_device *dev)
{
  #line 622 
  return (_Bool)((dev->dsa_ptr != (struct dsa_port *)0 && (dev->dsa_ptr)->rcv != (struct sk_buff *(*)(struct sk_buff *, struct net_device *, struct packet_type *))0) != 0);
  #line 624 
  return (_Bool)0;
}

#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_core.c"
struct stmmac_ops dwmac100_ops;
#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_core.c"
int dwmac100_setup(struct stmmac_priv *priv);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_core.c"
static void dwmac100_core_init(struct mac_device_info *hw, struct net_device *dev)
{
  #line 26 
  void *ioaddr = hw->pcsr;
  #line 27 
  u32 value = readl(ioaddr);
  #line 29 
  value |= 268435712U;
  #line 35 
  if ((int)netdev_uses_dsa(dev) != 0) 
                                      #line 36 
                                      value &= 4294967039U;
  #line 38 
  writel(value,ioaddr);
  #line 41 
  writel(33024U,ioaddr + 32U);
  #line 42 
  return;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_core.c"
static void dwmac100_dump_mac_regs(struct mac_device_info *hw, u32 *reg_space)
{
  #line 47 
  void *ioaddr = hw->pcsr;
  #line 49 
  *reg_space = readl(ioaddr);
  #line 50 
  *(reg_space + 1U) = readl(ioaddr + 4U);
  #line 51 
  *(reg_space + 2U) = readl(ioaddr + 8U);
  #line 52 
  *(reg_space + 3U) = readl(ioaddr + 12U);
  #line 53 
  *(reg_space + 4U) = readl(ioaddr + 16U);
  #line 54 
  *(reg_space + 7U) = readl(ioaddr + 28U);
  #line 55 
  *(reg_space + 8U) = readl(ioaddr + 32U);
  #line 56 
  *(reg_space + 9U) = readl(ioaddr + 36U);
  #line 57 
  return;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_core.c"
static int dwmac100_rx_ipc_enable(struct mac_device_info *hw)
{
  #line 61 
  return 0;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_core.c"
static int dwmac100_irq_status(struct mac_device_info *hw, struct stmmac_extra_stats *x)
{
  #line 67 
  return 0;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_core.c"
static void dwmac100_set_umac_addr(struct mac_device_info *hw, unsigned char *addr, unsigned int reg_n)
{
  #line 74 
  void *ioaddr = hw->pcsr;
  #line 75 
  stmmac_set_mac_addr(ioaddr,addr,4U,8U);
  #line 76 
  return;
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_core.c"
static void dwmac100_get_umac_addr(struct mac_device_info *hw, unsigned char *addr, unsigned int reg_n)
{
  #line 82 
  void *ioaddr = hw->pcsr;
  #line 83 
  stmmac_get_mac_addr(ioaddr,addr,4U,8U);
  #line 84 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_core.c"
static void dwmac100_set_filter(struct mac_device_info *hw, struct net_device *dev)
{
  #line 89 
  void *ioaddr = (void *)dev->base_addr;
  #line 90 
  u32 value = readl(ioaddr);
  #line 92 
  if ((dev->flags & 256U) != 0U) {
    #line 93 
    value |= 262144U;
    #line 94 
    value &= 4294270975U;
  }
  else 
    #line 96 
    if (dev->mc.count > 64 || (dev->flags & 512U) != 0U) {
      #line 98 
      value |= 524288U;
      #line 99 
      value &= 4294541311U;
      #line 100 
      writel(4294967295U,ioaddr + 12U);
      #line 101 
      writel(4294967295U,ioaddr + 16U);
    }
    else 
      #line 102 
      if (dev->mc.count == 0) 
                              #line 103 
                              value &= 4294008831U;
      else {
        #line 117 
        void *__mptr;
        #line 106 
        u32 mc_filter[2U];
        #line 107 
        struct netdev_hw_addr *ha;
        #line 112 
        value |= 8192U;
        #line 113 
        value &= 4294017023U;
        #line 116 
        memset((void *)(& mc_filter),0,8UL);
        #line 117 
        __mptr = (void *)dev->mc.list.next;
        #line 117 
        ha = ((struct netdev_hw_addr *)__mptr);
        #line 117 
        while (& ha->list != & dev->mc.list) {
          #line 117 
          void *__mptr_0;
          {
            #line 121 
            u32 ___x;
            #line 121 
            u32 tmp_5;
            {
              #line 121 
              u32 __x = crc32_le(4294967295U,(unsigned char *)(& ha->addr),6UL);
              #line 121 
              if (0 != 0) {
                #line 121 
                ___x = __x;
                #line 121 
                ___x = (___x << 16) | (___x << ((unsigned long)8 * sizeof(___x) - (unsigned long)16));
                #line 121 
                ___x = ((___x >> 8) & 16711935U) | ((___x << 8) & 4278255360U);
                #line 121 
                ___x = ((___x >> 4) & 252645135U) | ((___x << 4) & 4042322160U);
                #line 121 
                ___x = ((___x >> 2) & 858993459U) | ((___x << 2) & 3435973836U);
                #line 121 
                ___x = ((___x >> 1) & 1431655765U) | ((___x << 1) & 2863311530U);
                #line 121 
                tmp_5 = ___x;
              }
              else 
                   #line 121 
                   tmp_5 = __bitrev32(__x);
              }
            #line 121 
            int bit_nr = (int)(tmp_5 >> 26);
            #line 126 
            mc_filter[bit_nr >> 5] |= (unsigned int)(1 << (bit_nr & 31));
          }
          #line 117 
          __mptr_0 = (void *)ha->list.next;
          #line 117 
          ha = ((struct netdev_hw_addr *)__mptr_0);
        }
        #line 128 
        writel(mc_filter[0],ioaddr + 16U);
        #line 129 
        writel(mc_filter[1],ioaddr + 12U);
      }
  #line 132 
  writel(value,ioaddr);
  #line 133 
  return;
}

#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_core.c"
static void dwmac100_flow_ctrl(struct mac_device_info *hw, unsigned int duplex, unsigned int fc, unsigned int pause_time, u32 tx_cnt)
{
  #line 139 
  void *ioaddr = hw->pcsr;
  #line 140 
  unsigned int flow = 2U;
  #line 142 
  if (duplex != 0U) 
                    #line 143 
                    flow = (pause_time << 16) | flow;
  #line 144 
  writel(flow,ioaddr + 28U);
  #line 145 
  return;
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_core.c"
static void dwmac100_pmt(struct mac_device_info *hw, unsigned long mode)
{
  #line 150 
  return;
}

#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_core.c"
static void dwmac100_set_mac_loopback(void *ioaddr, bool enable)
{
  #line 155 
  u32 value = readl(ioaddr);
  #line 157 
  if ((int)enable != 0) 
                        #line 158 
                        value |= 2097152U; else 
                                                #line 160 
                                                value &= 4292870143U;
  #line 162 
  writel(value,ioaddr);
  #line 163 
  return;
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_core.c"
struct stmmac_ops dwmac100_ops = {.core_init = & dwmac100_core_init, .set_mac = & stmmac_set_mac, .rx_ipc = & dwmac100_rx_ipc_enable, .dump_regs = & dwmac100_dump_mac_regs, .host_irq_status = & dwmac100_irq_status, .set_filter = & dwmac100_set_filter, .flow_ctrl = & dwmac100_flow_ctrl, .pmt = & dwmac100_pmt, .set_umac_addr = & dwmac100_set_umac_addr, .get_umac_addr = & dwmac100_get_umac_addr, .set_mac_loopback = & dwmac100_set_mac_loopback};
#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_core.c"
int dwmac100_setup(struct stmmac_priv *priv)
{
  #line 181 
  struct mac_device_info *mac = priv->hw;
  #line 183 
  _dev_info(priv->device,(char *)"\tDWMAC100\n");
  #line 185 
  mac->pcsr = priv->ioaddr;
  #line 186 
  mac->link.duplex = 1048576U;
  #line 187 
  mac->link.speed10 = 0U;
  #line 188 
  mac->link.speed100 = 0U;
  #line 189 
  mac->link.speed1000 = 0U;
  #line 190 
  mac->link.speed_mask = 134217728U;
  #line 191 
  mac->mii.addr = 20U;
  #line 192 
  mac->mii.data = 24U;
  #line 193 
  mac->mii.addr_shift = 11U;
  #line 194 
  mac->mii.addr_mask = 63488U;
  #line 195 
  mac->mii.reg_shift = 6U;
  #line 196 
  mac->mii.reg_mask = 1984U;
  #line 197 
  mac->mii.clk_csr_shift = 2U;
  #line 198 
  mac->mii.clk_csr_mask = 60U;
  #line 200 
  return 0;
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
__inline static u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
  #line 26 
  *remainder = (unsigned int)(dividend % (unsigned long long)divisor);
  #line 27 
  return dividend / (unsigned long long)divisor;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
__inline static u64 div_u64(u64 dividend, u32 divisor)
{
  #line 125 
  u32 remainder;
  #line 126 
  return div_u64_rem(dividend,divisor,& remainder);
}

#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
#line 144 
struct timespec64 ns_to_timespec64(s64);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ptp.i.aux"
static bool IS_ERR(void *ptr);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 842  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ptp.i.aux"
static void cif_spin_unlock_irqrestore_ptp_lock_of_stmmac_priv(spinlock_t *lock, unsigned long flags);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 833 
static void cif___ldv_spin_lock_ptp_lock_of_stmmac_priv(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 4750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
#line 186 
struct ptp_clock *ptp_clock_register(struct ptp_clock_info *, struct device *);
#line 195 
#line 195 
int ptp_clock_unregister(struct ptp_clock *);
#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.c"
void stmmac_ptp_register(struct stmmac_priv *priv);
#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.c"
void stmmac_ptp_unregister(struct stmmac_priv *priv);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.c"
static int stmmac_adjust_freq(struct ptp_clock_info *ptp, s32 ppb)
{
  #line 24 
  void *__mptr;
  #line 25 
  unsigned long flags;
  #line 26 
  u32 diff;
  #line 26 
  u32 addend;
  #line 28 
  u64 adj;
  #line 24 
  __mptr = (void *)ptp;
  #line 23 
  struct stmmac_priv *priv = ((struct stmmac_priv *)(__mptr + 18446744073709539040U));
  #line 27 
  int neg_adj = 0;
  #line 30 
  if (ppb < 0) {
    #line 31 
    neg_adj = 1;
    #line 32 
    ppb = - ppb;
  }
  #line 35 
  addend = priv->default_addend;
  #line 36 
  adj = (unsigned long long)addend;
  #line 37 
  adj = (unsigned long long)ppb * adj;
  #line 38 
  diff = (unsigned int)div_u64(adj,1000000000U);
  #line 39 
  if (neg_adj != 0) 
                    #line 39 
                    addend -= diff; else 
                                         #line 39 
                                         addend += diff;
  #line 41 
  cif___ldv_spin_lock_ptp_lock_of_stmmac_priv(& priv->ptp_lock);
  {
    #line 42 
    int __result = -22;
    #line 42 
    if ((priv->hw)->ptp != (struct stmmac_hwtimestamp *)0 && ((priv->hw)->ptp)->config_addend != (int (*)(void *, u32 ))0) 
      #line 42 
      __result = (*(((priv->hw)->ptp)->config_addend))(priv->ptpaddr,addend);
    #line 42 
    int tmp_2 = __result;
  }
  #line 43 
  cif_spin_unlock_irqrestore_ptp_lock_of_stmmac_priv(& priv->ptp_lock,flags);
  #line 45 
  return 0;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.c"
static int stmmac_adjust_time(struct ptp_clock_info *ptp, s64 delta)
{
  #line 59 
  void *__mptr;
  #line 60 
  unsigned long flags;
  #line 61 
  u32 sec;
  #line 61 
  u32 nsec;
  #line 62 
  u32 quotient;
  #line 62 
  u32 reminder;
  #line 64 
  bool xmac;
  #line 59 
  __mptr = (void *)ptp;
  #line 58 
  struct stmmac_priv *priv = ((struct stmmac_priv *)(__mptr + 18446744073709539040U));
  #line 63 
  int neg_adj = 0;
  #line 66 
  xmac = (_Bool)(((priv->plat)->has_gmac4 != 0 || (priv->plat)->has_xgmac != 0) != 0);
  #line 68 
  if (delta < 0LL) {
    #line 69 
    neg_adj = 1;
    #line 70 
    delta = - delta;
  }
  #line 73 
  quotient = (unsigned int)div_u64_rem((unsigned long long)delta,1000000000U,& reminder);
  #line 74 
  sec = quotient;
  #line 75 
  nsec = reminder;
  #line 77 
  cif___ldv_spin_lock_ptp_lock_of_stmmac_priv(& priv->ptp_lock);
  {
    #line 78 
    int __result = -22;
    #line 78 
    if ((priv->hw)->ptp != (struct stmmac_hwtimestamp *)0 && ((priv->hw)->ptp)->adjust_systime != (int (*)(void *, u32 , u32 , int , int ))0) 
      #line 78 
      __result = (*(((priv->hw)->ptp)->adjust_systime))(priv->ptpaddr,sec,nsec,neg_adj,(int)xmac);
    #line 78 
    int tmp_2 = __result;
  }
  #line 79 
  cif_spin_unlock_irqrestore_ptp_lock_of_stmmac_priv(& priv->ptp_lock,flags);
  #line 81 
  return 0;
}

#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.c"
static int stmmac_get_time(struct ptp_clock_info *ptp, struct timespec64 *ts)
{
  #line 96 
  void *__mptr;
  #line 97 
  unsigned long flags;
  #line 96 
  __mptr = (void *)ptp;
  #line 95 
  struct stmmac_priv *priv = ((struct stmmac_priv *)(__mptr + 18446744073709539040U));
  #line 98 
  u64 ns = 0ULL;
  #line 100 
  cif___ldv_spin_lock_ptp_lock_of_stmmac_priv(& priv->ptp_lock);
  {
    #line 101 
    int __result = -22;
    #line 101 
    if ((priv->hw)->ptp != (struct stmmac_hwtimestamp *)0 && ((priv->hw)->ptp)->get_systime != (void (*)(void *, u64 *))0) {
      #line 101 
      (*(((priv->hw)->ptp)->get_systime))(priv->ptpaddr,& ns);
      #line 101 
      __result = 0;
    }
    #line 101 
    int tmp_2 = __result;
  }
  #line 102 
  cif_spin_unlock_irqrestore_ptp_lock_of_stmmac_priv(& priv->ptp_lock,flags);
  #line 104 
  *ts = ns_to_timespec64((long long)ns);
  #line 106 
  return 0;
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.c"
static int stmmac_set_time(struct ptp_clock_info *ptp, struct timespec64 *ts)
{
  #line 122 
  void *__mptr;
  #line 123 
  unsigned long flags;
  #line 122 
  __mptr = (void *)ptp;
  #line 121 
  struct stmmac_priv *priv = ((struct stmmac_priv *)(__mptr + 18446744073709539040U));
  #line 125 
  cif___ldv_spin_lock_ptp_lock_of_stmmac_priv(& priv->ptp_lock);
  {
    #line 126 
    int __result = -22;
    #line 126 
    if ((priv->hw)->ptp != (struct stmmac_hwtimestamp *)0 && ((priv->hw)->ptp)->init_systime != (int (*)(void *, u32 , u32 ))0) 
      #line 126 
      __result = (*(((priv->hw)->ptp)->init_systime))(priv->ptpaddr,(unsigned int)ts->tv_sec,(unsigned int)ts->tv_nsec);
    #line 126 
    int tmp_2 = __result;
  }
  #line 127 
  cif_spin_unlock_irqrestore_ptp_lock_of_stmmac_priv(& priv->ptp_lock,flags);
  #line 129 
  return 0;
}

#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.c"
static int stmmac_enable(struct ptp_clock_info *ptp, struct ptp_clock_request *rq, int on)
{
  #line 136 
  void *__mptr;
  #line 137 
  struct stmmac_pps_cfg *cfg;
  #line 139 
  unsigned long flags;
  #line 136 
  __mptr = (void *)ptp;
  #line 135 
  struct stmmac_priv *priv = ((struct stmmac_priv *)(__mptr + 18446744073709539040U));
  #line 138 
  int ret = -95;
  #line 141 
  switch ((unsigned int)rq->type) {
    #line 155 
    int __result;
    #line 142 
    case (unsigned int)1: 
                          #line 142 
    ;
    #line 144 
    if (rq->__anonCompField_ptp_clock_request_162.perout.flags != 0U) 
      #line 145 
      return -95;
    #line 147 
    cfg = & priv->pps[rq->__anonCompField_ptp_clock_request_162.perout.index];
    #line 149 
    cfg->start.tv_sec = rq->__anonCompField_ptp_clock_request_162.perout.start.sec;
    #line 150 
    cfg->start.tv_nsec = (long)rq->__anonCompField_ptp_clock_request_162.perout.start.nsec;
    #line 151 
    cfg->period.tv_sec = rq->__anonCompField_ptp_clock_request_162.perout.period.sec;
    #line 152 
    cfg->period.tv_nsec = (long)rq->__anonCompField_ptp_clock_request_162.perout.period.nsec;
    #line 154 
    cif___ldv_spin_lock_ptp_lock_of_stmmac_priv(& priv->ptp_lock);
    #line 155 
    __result = -22;
    #line 155 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->flex_pps_config != (int (*)(void *, int , struct stmmac_pps_cfg *, bool , u32 , u32 ))0) 
      #line 155 
      __result = (*(((priv->hw)->mac)->flex_pps_config))(priv->ioaddr,(int)rq->__anonCompField_ptp_clock_request_162.perout.index,cfg,(_Bool)(on != 0),priv->sub_second_inc,priv->systime_flags);
    #line 155 
    ret = __result;
    #line 159 
    cif_spin_unlock_irqrestore_ptp_lock_of_stmmac_priv(& priv->ptp_lock,flags);
    #line 160 
    break;
    #line 161 
    default: 
             #line 161 
    ;
    #line 162 
    break;
  }
  #line 165 
  return ret;
}

#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.c"
static struct ptp_clock_info stmmac_ptp_clock_ops = {.owner = & __this_module, .name = {(char)'s', (char)'t', (char)'m', (char)'m', (char)'a', (char)'c', (char)' ', (char)'p', (char)'t', (char)'p'}, .max_adj = 62500000, .adjfreq = & stmmac_adjust_freq, .adjtime = & stmmac_adjust_time, .gettime64 = & stmmac_get_time, .settime64 = & stmmac_set_time, .enable = & stmmac_enable};
#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.c"
void stmmac_ptp_register(struct stmmac_priv *priv)
{
  #line 193 
  int i;
  #line 195 
  i = 0;
  #line 195 
  while (priv->dma_cap.pps_out_num > (unsigned int)i) {
    #line 196 
    if (i > 3) 
               #line 197 
               break;
    #line 198 
    priv->pps[i].available = (_Bool)1;
    #line 195 
    i ++;
  }
  #line 201 
  if ((priv->plat)->ptp_max_adj != 0) 
                                      #line 202 
                                      stmmac_ptp_clock_ops.max_adj = (priv->plat)->ptp_max_adj;
  #line 204 
  stmmac_ptp_clock_ops.n_per_out = (int)priv->dma_cap.pps_out_num;
  #line 206 
  spinlock_check(& priv->ptp_lock);
  {
    #line 206 
    struct lock_class_key __key;
    #line 206 
    __raw_spin_lock_init(& priv->ptp_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&priv->ptp_lock)->rlock",& __key);
  }
  #line 207 
  priv->ptp_clock_ops = stmmac_ptp_clock_ops;
  #line 209 
  priv->ptp_clock = ptp_clock_register(& priv->ptp_clock_ops,priv->device);
  #line 211 
  if ((int)IS_ERR((void *)priv->ptp_clock) != 0) {
    #line 212 
    netdev_err(priv->dev,(char *)"ptp_clock_register failed\n");
    #line 213 
    priv->ptp_clock = (struct ptp_clock *)0;
  }
  else 
    #line 214 
    if (priv->ptp_clock != (struct ptp_clock *)0) 
                                                  #line 215 
                                                  netdev_info(priv->dev,(char *)"registered PTP clock\n");
  #line 216 
  return;
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.c"
void stmmac_ptp_unregister(struct stmmac_priv *priv)
{
  #line 226 
  if (priv->ptp_clock != (struct ptp_clock *)0) {
    #line 227 
    ptp_clock_unregister(priv->ptp_clock);
    #line 228 
    priv->ptp_clock = (struct ptp_clock *)0;
    {
      #line 229 
      bool branch;
      #line 229 
      struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_ptp_unregister", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.c", .format = (char *)"Removed PTP HW clock successfully on %s\n", .lineno = (unsigned int)229U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 229 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
      #line 229 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 229 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug441,(char *)"Removed PTP HW clock successfully on %s\n",(char *)(& (priv->dev)->name));
    }
  }
  #line 232 
  return;
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ptp.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 217 
  return ldv_is_err(ptr);
}

#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ptp.i.aux"
static void cif___ldv_spin_lock_ptp_lock_of_stmmac_priv(spinlock_t *lock)
{
  #line 836 
  ldv_spin_model_lock((char *)"ptp_lock_of_stmmac_priv");
  #line 838 
  __ldv_spin_lock(lock);
  #line 839 
  return;
}

#line 842  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ptp.i.aux"
static void cif_spin_unlock_irqrestore_ptp_lock_of_stmmac_priv(spinlock_t *lock, unsigned long flags)
{
  #line 845 
  ldv_spin_model_unlock((char *)"ptp_lock_of_stmmac_priv");
  #line 847 
  spin_unlock_irqrestore(lock,flags);
  #line 848 
  return;
}

#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
struct stmmac_desc_ops dwxgmac210_desc_ops;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static int dwxgmac2_get_tx_status(void *data, struct stmmac_extra_stats *x, struct dma_desc *p, void *ioaddr)
{
  #line 14 
  unsigned int tdes3 = p->des3;
  #line 15 
  int ret = 0;
  #line 17 
  if ((long)(((unsigned long)tdes3 & 2147483648UL) != 0UL) != 0L) 
                                                                  #line 18 
                                                                  return 4;
  #line 19 
  if ((long)(((unsigned long)tdes3 & 268435456UL) == 0UL) != 0L) 
                                                                 #line 20 
                                                                 return 1;
  #line 22 
  return ret;
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static int dwxgmac2_get_rx_status(void *data, struct stmmac_extra_stats *x, struct dma_desc *p)
{
  #line 28 
  unsigned int rdes3 = p->des3;
  #line 30 
  if ((long)(((unsigned long)rdes3 & 2147483648UL) != 0UL) != 0L) 
                                                                  #line 31 
                                                                  return 8;
  #line 32 
  if ((long)(((unsigned long)rdes3 & 1073741824UL) != 0UL) != 0L) 
                                                                  #line 33 
                                                                  return 1;
  #line 34 
  if ((long)(((unsigned long)rdes3 & 268435456UL) == 0UL) != 0L) 
                                                                 #line 35 
                                                                 return 16;
  #line 36 
  if ((long)(((unsigned long)rdes3 & 32768UL) != 0UL) != 0L && (long)(((unsigned long)rdes3 & 268435456UL) != 0UL) != 0L) 
    #line 37 
    return 1;
  #line 39 
  return 0;
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static int dwxgmac2_get_tx_len(struct dma_desc *p)
{
  #line 44 
  return (int)p->des2 & 16383;
}

#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static int dwxgmac2_get_tx_owner(struct dma_desc *p)
{
  #line 49 
  return ((unsigned long)p->des3 & 2147483648UL) != 0UL;
}

#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static void dwxgmac2_set_tx_owner(struct dma_desc *p)
{
  #line 54 
  p->des3 |= 2147483648U;
  #line 55 
  return;
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static void dwxgmac2_set_rx_owner(struct dma_desc *p, int disable_rx_ic)
{
  #line 59 
  p->des3 |= 2147483648U;
  #line 61 
  if (disable_rx_ic == 0) 
                          #line 62 
                          p->des3 |= 1073741824U;
  #line 63 
  return;
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static int dwxgmac2_get_tx_ls(struct dma_desc *p)
{
  #line 67 
  return ((unsigned long)p->des3 & 268435456UL) != 0UL;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static int dwxgmac2_get_rx_frame_len(struct dma_desc *p, int rx_coe)
{
  #line 72 
  return (int)p->des3 & 16383;
}

#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static void dwxgmac2_enable_tx_timestamp(struct dma_desc *p)
{
  #line 77 
  p->des2 |= 1073741824U;
  #line 78 
  return;
}

#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static int dwxgmac2_get_tx_timestamp_status(struct dma_desc *p)
{
  #line 82 
  return 0;
}

#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
__inline static void dwxgmac2_get_timestamp(void *desc, u32 ats, u64 *ts)
{
  #line 87 
  struct dma_desc *p = (struct dma_desc *)desc;
  #line 88 
  u64 ns = 0ULL;
  #line 90 
  ns = (unsigned long long)p->des1 * 1000000000ULL + ns;
  #line 91 
  ns = (unsigned long long)p->des0 + ns;
  #line 93 
  *ts = ns;
  #line 94 
  return;
}

#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static int dwxgmac2_rx_check_timestamp(void *desc)
{
  #line 100 
  bool desc_valid;
  #line 100 
  bool ts_valid;
  #line 98 
  struct dma_desc *p = (struct dma_desc *)desc;
  #line 99 
  unsigned int rdes3 = p->des3;
  #line 101 
  ldv_inline_asm();
  #line 104 
  desc_valid = (_Bool)((((unsigned long)rdes3 & 2147483648UL) == 0UL && ((unsigned long)rdes3 & 1073741824UL) != 0UL) != 0);
  #line 105 
  ts_valid = (_Bool)((((unsigned long)rdes3 & 64UL) == 0UL && ((unsigned long)rdes3 & 16UL) != 0UL) != 0);
  #line 107 
  if ((long)(((int)desc_valid != 0 && (int)ts_valid != 0) != 0) != 0L) {
    #line 108 
    if (p->des0 == 4294967295U && p->des1 == 4294967295U) 
                                                          #line 109 
                                                          return -22;
    #line 110 
    return 0;
  }
  #line 113 
  return -22;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static int dwxgmac2_get_rx_timestamp_status(void *desc, void *next_desc, u32 ats)
{
  #line 119 
  struct dma_desc *p = (struct dma_desc *)desc;
  #line 120 
  unsigned int rdes3 = p->des3;
  #line 121 
  int ret = -16;
  #line 123 
  if ((long)(((unsigned long)rdes3 & 134217728UL) != 0UL) != 0L) 
                                                                 #line 124 
                                                                 ret = dwxgmac2_rx_check_timestamp(next_desc);
  #line 126 
  return ret == 0;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static void dwxgmac2_init_rx_desc(struct dma_desc *p, int disable_rx_ic, int mode, int end, int bfsize)
{
  #line 132 
  dwxgmac2_set_rx_owner(p,disable_rx_ic);
  #line 133 
  return;
}

#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static void dwxgmac2_init_tx_desc(struct dma_desc *p, int mode, int end)
{
  #line 137 
  p->des0 = 0U;
  #line 138 
  p->des1 = 0U;
  #line 139 
  p->des2 = 0U;
  #line 140 
  p->des3 = 0U;
  #line 141 
  return;
}

#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static void dwxgmac2_prepare_tx_desc(struct dma_desc *p, int is_fs, int len, bool csum_flag, int mode, bool tx_own, bool ls, unsigned int tot_pkt_len)
{
  #line 147 
  unsigned int tdes3 = p->des3;
  #line 149 
  p->des2 |= (unsigned int)len & 16383U;
  #line 151 
  tdes3 = (tot_pkt_len & 32767U) | tdes3;
  #line 152 
  if (is_fs != 0) 
                  #line 153 
                  tdes3 |= 536870912U; else 
                                            #line 155 
                                            tdes3 &= 3758096383U;
  #line 157 
  if ((int)csum_flag != 0) 
                           #line 158 
                           tdes3 |= 196608U; else 
                                                  #line 160 
                                                  tdes3 &= 4294770687U;
  #line 162 
  if ((int)ls != 0) 
                    #line 163 
                    tdes3 |= 268435456U; else 
                                              #line 165 
                                              tdes3 &= 4026531839U;
  #line 168 
  if ((int)tx_own != 0) 
                        #line 169 
                        tdes3 |= 2147483648U;
  #line 171 
  if (is_fs != 0 && (int)tx_own != 0) 
                                      #line 172 
                                      ldv_inline_asm();
  #line 178 
  p->des3 = tdes3;
  #line 179 
  return;
}

#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static void dwxgmac2_prepare_tso_tx_desc(struct dma_desc *p, int is_fs, int len1, int len2, bool tx_own, bool ls, unsigned int tcphdrlen, unsigned int tcppayloadlen)
{
  #line 186 
  unsigned int tdes3 = p->des3;
  #line 188 
  if (len1 != 0) 
                 #line 189 
                 p->des2 |= (unsigned int)len1 & 16383U;
  #line 190 
  if (len2 != 0) 
                 #line 191 
                 p->des2 |= (unsigned int)(len2 << 16) & 1073676288U;
  #line 193 
  if (is_fs != 0) {
    #line 194 
    tdes3 |= 537133056U;
    #line 195 
    tdes3 = ((tcphdrlen << 19) & 7864320U) | tdes3;
    #line 197 
    tdes3 = (tcppayloadlen & 262143U) | tdes3;
  }
  else 
       #line 199 
       tdes3 &= 3758096383U;
  #line 202 
  if ((int)ls != 0) 
                    #line 203 
                    tdes3 |= 268435456U; else 
                                              #line 205 
                                              tdes3 &= 4026531839U;
  #line 208 
  if ((int)tx_own != 0) 
                        #line 209 
                        tdes3 |= 2147483648U;
  #line 211 
  if (is_fs != 0 && (int)tx_own != 0) 
                                      #line 212 
                                      ldv_inline_asm();
  #line 218 
  p->des3 = tdes3;
  #line 219 
  return;
}

#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static void dwxgmac2_release_tx_desc(struct dma_desc *p, int mode)
{
  #line 223 
  p->des0 = 0U;
  #line 224 
  p->des1 = 0U;
  #line 225 
  p->des2 = 0U;
  #line 226 
  p->des3 = 0U;
  #line 227 
  return;
}

#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static void dwxgmac2_set_tx_ic(struct dma_desc *p)
{
  #line 231 
  p->des2 |= 2147483648U;
  #line 232 
  return;
}

#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static void dwxgmac2_set_mss(struct dma_desc *p, unsigned int mss)
{
  #line 236 
  p->des0 = 0U;
  #line 237 
  p->des1 = 0U;
  #line 238 
  p->des2 = mss;
  #line 239 
  p->des3 = 1140850688U;
  #line 240 
  return;
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static void dwxgmac2_get_addr(struct dma_desc *p, unsigned int *addr)
{
  #line 244 
  *addr = p->des0;
  #line 245 
  return;
}

#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static void dwxgmac2_set_addr(struct dma_desc *p, dma_addr_t addr)
{
  #line 249 
  p->des0 = (unsigned int)addr;
  #line 250 
  p->des1 = (unsigned int)(addr >> 32);
  #line 251 
  return;
}

#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static void dwxgmac2_clear(struct dma_desc *p)
{
  #line 255 
  p->des0 = 0U;
  #line 256 
  p->des1 = 0U;
  #line 257 
  p->des2 = 0U;
  #line 258 
  p->des3 = 0U;
  #line 259 
  return;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static int dwxgmac2_get_rx_hash(struct dma_desc *p, u32 *hash, enum pkt_hash_types *type)
{
  #line 265 
  u32 ptype;
  #line 264 
  unsigned int rdes3 = p->des3;
  #line 267 
  if (((unsigned long)rdes3 & 67108864UL) != 0UL) {
    #line 268 
    ptype = (unsigned int)((unsigned long)rdes3 >> 20) & 15U;
    #line 270 
    switch (ptype) {
      #line 271 
      case (u32)1: 
                   #line 271 
      ;
      #line 272 
      case (u32)2: 
                   #line 272 
      ;
      #line 273 
      case (u32)9: 
                   #line 273 
      ;
      #line 274 
      case (u32)10: 
                    #line 274 
      ;
      #line 275 
      *type = PKT_HASH_TYPE_L4;
      #line 276 
      break;
      #line 277 
      default: 
               #line 277 
      ;
      #line 278 
      *type = PKT_HASH_TYPE_L3;
      #line 279 
      break;
    }
    #line 282 
    *hash = p->des1;
    #line 283 
    return 0;
  }
  #line 286 
  return -22;
}

#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static int dwxgmac2_get_rx_header_len(struct dma_desc *p, unsigned int *len)
{
  #line 291 
  if (((unsigned long)p->des3 & 15728640UL) != 0UL) 
                                                    #line 292 
                                                    *len = p->des2 & 1023U;
  #line 293 
  return 0;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static void dwxgmac2_set_sec_addr(struct dma_desc *p, dma_addr_t addr)
{
  #line 298 
  p->des2 = (unsigned int)addr;
  #line 299 
  p->des3 = (unsigned int)(addr >> 32);
  #line 300 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static void dwxgmac2_set_sarc(struct dma_desc *p, u32 sarc_type)
{
  #line 304 
  sarc_type <<= 23;
  #line 306 
  p->des3 |= sarc_type & 58720256U;
  #line 307 
  return;
}

#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static void dwxgmac2_set_vlan_tag(struct dma_desc *p, u16 tag, u16 inner_tag, u32 inner_type)
{
  #line 312 
  p->des0 = 0U;
  #line 313 
  p->des1 = 0U;
  #line 314 
  p->des2 = 0U;
  #line 315 
  p->des3 = 0U;
  #line 318 
  if (inner_type != 0U) {
    #line 319 
    u32 des = (unsigned int)((int)inner_tag << 16);
    #line 321 
    des &= 4294901760U;
    #line 322 
    p->des2 = des;
    #line 324 
    des = inner_type << 18;
    #line 325 
    des &= 786432U;
    #line 326 
    p->des3 = des | 131072U;
  }
  #line 330 
  p->des3 |= (unsigned int)tag;
  #line 331 
  p->des3 |= 65536U;
  #line 333 
  p->des3 |= 1073741824U;
  #line 334 
  return;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
static void dwxgmac2_set_vlan(struct dma_desc *p, u32 type)
{
  #line 338 
  type <<= 14;
  #line 339 
  p->des2 |= type & 49152U;
  #line 340 
  return;
}

#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_descs.c"
struct stmmac_desc_ops dwxgmac210_desc_ops = {.init_rx_desc = & dwxgmac2_init_rx_desc, .init_tx_desc = & dwxgmac2_init_tx_desc, .prepare_tx_desc = & dwxgmac2_prepare_tx_desc, .prepare_tso_tx_desc = & dwxgmac2_prepare_tso_tx_desc, .set_tx_owner = & dwxgmac2_set_tx_owner, .get_tx_owner = & dwxgmac2_get_tx_owner, .release_tx_desc = & dwxgmac2_release_tx_desc, .set_tx_ic = & dwxgmac2_set_tx_ic, .get_tx_ls = & dwxgmac2_get_tx_ls, .tx_status = & dwxgmac2_get_tx_status, .get_tx_len = & dwxgmac2_get_tx_len, .set_rx_owner = & dwxgmac2_set_rx_owner, .get_rx_frame_len = & dwxgmac2_get_rx_frame_len, .rx_status = & dwxgmac2_get_rx_status, .enable_tx_timestamp = & dwxgmac2_enable_tx_timestamp, .get_tx_timestamp_status = & dwxgmac2_get_tx_timestamp_status, .get_timestamp = & dwxgmac2_get_timestamp, .get_rx_timestamp_status = & dwxgmac2_get_rx_timestamp_status, .set_mss = & dwxgmac2_set_mss, .get_addr = & dwxgmac2_get_addr, .set_addr = & dwxgmac2_set_addr, .clear = & dwxgmac2_clear, .get_rx_hash = & dwxgmac2_get_rx_hash, .get_rx_header_len = & dwxgmac2_get_rx_header_len, .set_sec_addr = & dwxgmac2_set_sec_addr, .set_sarc = & dwxgmac2_set_sarc, .set_vlan_tag = & dwxgmac2_set_vlan_tag, .set_vlan = & dwxgmac2_set_vlan};
#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
#line 539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
struct stmmac_mode_ops dwmac4_ring_mode_ops;
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
#line 508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
struct stmmac_desc_ops dwmac4_desc_ops;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static int dwmac4_wrback_get_tx_status(void *data, struct stmmac_extra_stats *x, struct dma_desc *p, void *ioaddr)
{
  #line 20 
  unsigned int tdes3;
  #line 19 
  struct net_device_stats *stats = (struct net_device_stats *)data;
  #line 21 
  int ret = 0;
  #line 23 
  tdes3 = p->des3;
  #line 26 
  if ((long)(((unsigned long)tdes3 & 2147483648UL) != 0UL) != 0L) 
                                                                  #line 27 
                                                                  return 4;
  #line 30 
  if ((long)(((unsigned long)tdes3 & 268435456UL) == 0UL) != 0L) 
                                                                 #line 31 
                                                                 return 1;
  #line 33 
  if ((long)(((unsigned long)tdes3 & 32768UL) != 0UL) != 0L) {
    #line 34 
    if ((long)(((unsigned long)tdes3 & 16384UL) != 0UL) != 0L) 
                                                               #line 35 
                                                               (x->tx_jabber) ++;
    #line 36 
    if ((long)(((unsigned long)tdes3 & 8192UL) != 0UL) != 0L) 
                                                              #line 37 
                                                              (x->tx_frame_flushed) ++;
    #line 38 
    if ((long)(((unsigned long)tdes3 & 2048UL) != 0UL) != 0L) {
      #line 39 
      (x->tx_losscarrier) ++;
      #line 40 
      (stats->tx_carrier_errors) ++;
    }
    #line 42 
    if ((long)(((unsigned long)tdes3 & 1024UL) != 0UL) != 0L) {
      #line 43 
      (x->tx_carrier) ++;
      #line 44 
      (stats->tx_carrier_errors) ++;
    }
    #line 46 
    if ((long)(((unsigned long)tdes3 & 512UL) != 0UL) != 0L || (long)(((unsigned long)tdes3 & 256UL) != 0UL) != 0L) 
      #line 48 
      stats->collisions += ((unsigned long)tdes3 >> 4) & 15UL;
    #line 52 
    if ((long)(((unsigned long)tdes3 & 8UL) != 0UL) != 0L) 
                                                           #line 53 
                                                           (x->tx_deferred) ++;
    #line 55 
    if ((long)(((unsigned long)tdes3 & 4UL) != 0UL) != 0L) 
                                                           #line 56 
                                                           (x->tx_underflow) ++;
    #line 58 
    if ((long)(((unsigned long)tdes3 & 1UL) != 0UL) != 0L) 
                                                           #line 59 
                                                           (x->tx_ip_header_error) ++;
    #line 61 
    if ((long)(((unsigned long)tdes3 & 4096UL) != 0UL) != 0L) 
                                                              #line 62 
                                                              (x->tx_payload_error) ++;
    #line 64 
    ret = 2;
  }
  #line 67 
  if ((long)(((unsigned long)tdes3 & 2UL) != 0UL) != 0L) 
                                                         #line 68 
                                                         (x->tx_deferred) ++;
  #line 70 
  return ret;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static int dwmac4_wrback_get_rx_status(void *data, struct stmmac_extra_stats *x, struct dma_desc *p)
{
  #line 80 
  int message_type;
  #line 76 
  struct net_device_stats *stats = (struct net_device_stats *)data;
  #line 77 
  unsigned int rdes1 = p->des1;
  #line 78 
  unsigned int rdes2 = p->des2;
  #line 79 
  unsigned int rdes3 = p->des3;
  #line 81 
  int ret = 0;
  #line 83 
  if ((long)(((unsigned long)rdes3 & 2147483648UL) != 0UL) != 0L) 
                                                                  #line 84 
                                                                  return 8;
  #line 86 
  if ((long)(((unsigned long)rdes3 & 1073741824UL) != 0UL) != 0L) 
                                                                  #line 87 
                                                                  return 1;
  #line 88 
  if ((long)(((unsigned long)rdes3 & 268435456UL) == 0UL) != 0L) 
                                                                 #line 89 
                                                                 return 16;
  #line 91 
  if ((long)(((unsigned long)rdes3 & 32768UL) != 0UL) != 0L) {
    #line 92 
    if ((long)(((unsigned long)rdes3 & 8388608UL) != 0UL) != 0L) 
                                                                 #line 93 
                                                                 (stats->rx_length_errors) ++;
    #line 94 
    if ((long)(((unsigned long)rdes3 & 2097152UL) != 0UL) != 0L) 
                                                                 #line 95 
                                                                 (x->rx_gmac_overflow) ++;
    #line 97 
    if ((long)(((unsigned long)rdes3 & 4194304UL) != 0UL) != 0L) 
                                                                 #line 98 
                                                                 (x->rx_watchdog) ++;
    #line 100 
    if ((long)(((unsigned long)rdes3 & 1048576UL) != 0UL) != 0L) 
                                                                 #line 101 
                                                                 (x->rx_mii) ++;
    #line 103 
    if ((long)(((unsigned long)rdes3 & 16777216UL) != 0UL) != 0L) {
      #line 104 
      (x->rx_crc_errors) ++;
      #line 105 
      (stats->rx_crc_errors) ++;
    }
    #line 108 
    if ((long)(((unsigned long)rdes3 & 524288UL) != 0UL) != 0L) 
                                                                #line 109 
                                                                (x->dribbling_bit) ++;
    #line 111 
    ret = 1;
  }
  #line 114 
  message_type = (int)((unsigned long)rdes1 >> 8) & 15;
  #line 116 
  if (((unsigned long)rdes1 & 8UL) != 0UL) 
                                           #line 117 
                                           (x->ip_hdr_err) ++;
  #line 118 
  if (((unsigned long)rdes1 & 64UL) != 0UL) 
                                            #line 119 
                                            (x->ip_csum_bypassed) ++;
  #line 120 
  if (((unsigned long)rdes1 & 16UL) != 0UL) 
                                            #line 121 
                                            (x->ipv4_pkt_rcvd) ++;
  #line 122 
  if (((unsigned long)rdes1 & 32UL) != 0UL) 
                                            #line 123 
                                            (x->ipv6_pkt_rcvd) ++;
  #line 125 
  if (message_type == 0) 
                         #line 126 
                         (x->no_ptp_rx_msg_type_ext) ++;
  else 
    #line 127 
    if (message_type == 1) 
                           #line 128 
                           (x->ptp_rx_msg_type_sync) ++;
    else 
      #line 129 
      if (message_type == 2) 
                             #line 130 
                             (x->ptp_rx_msg_type_follow_up) ++;
      else 
        #line 131 
        if (message_type == 3) 
                               #line 132 
                               (x->ptp_rx_msg_type_delay_req) ++;
        else 
          #line 133 
          if (message_type == 4) 
                                 #line 134 
                                 (x->ptp_rx_msg_type_delay_resp) ++;
          else 
            #line 135 
            if (message_type == 5) 
                                   #line 136 
                                   (x->ptp_rx_msg_type_pdelay_req) ++;
            else 
              #line 137 
              if (message_type == 6) 
                                     #line 138 
                                     (x->ptp_rx_msg_type_pdelay_resp) ++;
              else 
                #line 139 
                if (message_type == 7) 
                                       #line 140 
                                       (x->ptp_rx_msg_type_pdelay_follow_up) ++;
                else 
                  #line 141 
                  if (message_type == 8) 
                                         #line 142 
                                         (x->ptp_rx_msg_type_announce) ++;
                  else 
                    #line 143 
                    if (message_type == 9) 
                                           #line 144 
                                           (x->ptp_rx_msg_type_management) ++;
                    else 
                      #line 145 
                      if (message_type == 15) 
                                              #line 146 
                                              (x->ptp_rx_msg_pkt_reserved_type) ++;
  #line 148 
  if (((unsigned long)rdes1 & 4096UL) != 0UL) 
                                              #line 149 
                                              (x->ptp_frame_type) ++;
  #line 150 
  if (((unsigned long)rdes1 & 8192UL) != 0UL) 
                                              #line 151 
                                              (x->ptp_ver) ++;
  #line 152 
  if (((unsigned long)rdes1 & 32768UL) != 0UL) 
                                               #line 153 
                                               (x->timestamp_dropped) ++;
  #line 155 
  if ((long)(((unsigned long)rdes2 & 65536UL) != 0UL) != 0L) {
    #line 156 
    (x->sa_rx_filter_fail) ++;
    #line 157 
    ret = 1;
  }
  #line 159 
  if ((long)(((unsigned long)rdes2 & 131072UL) != 0UL) != 0L) {
    #line 160 
    (x->da_rx_filter_fail) ++;
    #line 161 
    ret = 1;
  }
  #line 164 
  if (((unsigned long)rdes2 & 134217728UL) != 0UL) 
                                                   #line 165 
                                                   (x->l3_filter_match) ++;
  #line 166 
  if (((unsigned long)rdes2 & 268435456UL) != 0UL) 
                                                   #line 167 
                                                   (x->l4_filter_match) ++;
  #line 168 
  if ((((unsigned long)rdes2 >> 26) & 3UL) != 0UL) 
                                                   #line 170 
                                                   (x->l3_l4_filter_no_match) ++;
  #line 172 
  return ret;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static int dwmac4_rd_get_tx_len(struct dma_desc *p)
{
  #line 177 
  return (int)p->des2 & 16383;
}

#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static int dwmac4_get_tx_owner(struct dma_desc *p)
{
  #line 182 
  return (int)(p->des3 >> 31);
}

#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static void dwmac4_set_tx_owner(struct dma_desc *p)
{
  #line 187 
  p->des3 |= 2147483648U;
  #line 188 
  return;
}

#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static void dwmac4_set_rx_owner(struct dma_desc *p, int disable_rx_ic)
{
  #line 192 
  p->des3 |= 2164260864U;
  #line 194 
  if (disable_rx_ic == 0) 
                          #line 195 
                          p->des3 |= 1073741824U;
  #line 196 
  return;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static int dwmac4_get_tx_ls(struct dma_desc *p)
{
  #line 201 
  return (int)((unsigned long)p->des3 >> 28) & 1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static int dwmac4_wrback_get_rx_frame_len(struct dma_desc *p, int rx_coe)
{
  #line 206 
  return (int)p->des3 & 32767;
}

#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static void dwmac4_rd_enable_tx_timestamp(struct dma_desc *p)
{
  #line 211 
  p->des2 |= 1073741824U;
  #line 212 
  return;
}

#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static int dwmac4_wrback_get_tx_timestamp_status(struct dma_desc *p)
{
  #line 217 
  if (((unsigned long)p->des3 & 1073741824UL) != 0UL) 
                                                      #line 218 
                                                      return 0;
  #line 221 
  if (((unsigned long)p->des3 & 131072UL) != 0UL) 
                                                  #line 222 
                                                  return 1;
  #line 224 
  return 0;
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
__inline static void dwmac4_get_timestamp(void *desc, u32 ats, u64 *ts)
{
  #line 230 
  u64 ns;
  #line 229 
  struct dma_desc *p = (struct dma_desc *)desc;
  #line 232 
  ns = (unsigned long long)p->des0;
  #line 234 
  ns = (unsigned long long)p->des1 * 1000000000ULL + ns;
  #line 236 
  *ts = ns;
  #line 237 
  return;
}

#line 239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static int dwmac4_rx_check_timestamp(void *desc)
{
  #line 245 
  u32 own;
  #line 245 
  u32 ctxt;
  #line 241 
  struct dma_desc *p = (struct dma_desc *)desc;
  #line 242 
  unsigned int rdes0 = p->des0;
  #line 243 
  unsigned int rdes1 = p->des1;
  #line 244 
  unsigned int rdes3 = p->des3;
  #line 246 
  int ret = 1;
  #line 248 
  own = rdes3 & 2147483648U;
  #line 249 
  ctxt = (unsigned int)((unsigned long)rdes3 >> 30) & 1U;
  #line 252 
  if ((long)((own == 0U && ctxt != 0U) != 0) != 0L) 
    #line 253 
    if (rdes0 == 4294967295U && rdes1 == 4294967295U) 
                                                      #line 255 
                                                      ret = -22; else 
                                                                   #line 258 
                                                                   ret = 0;
  #line 262 
  return ret;
}

#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static int dwmac4_wrback_get_rx_timestamp_status(void *desc, void *next_desc, u32 ats)
{
  #line 268 
  struct dma_desc *p = (struct dma_desc *)desc;
  #line 269 
  int ret = -22;
  #line 272 
  if ((long)(((unsigned long)p->des3 & 67108864UL) != 0UL) != 0L) 
    #line 273 
    if ((long)(((unsigned long)p->des1 & 16384UL) != 0UL) != 0L) {
      #line 274 
      int i = 0;
      #line 277 
      while (1) {
        #line 278 
        ret = dwmac4_rx_check_timestamp(next_desc);
        #line 279 
        if (ret < 0) 
                     #line 280 
                     goto exit;
        #line 281 
        i ++;
        #line 282 
        if (! (ret == 1 && i <= 9)) 
                                    #line 277 
                                    break;
      }
      #line 285 
      if (i == 10) 
                   #line 286 
                   ret = -16;
    }
  #line 289 
  exit: 
        #line 289 
  ;
  #line 290 
  if ((long)(ret == 0) != 0L) 
                              #line 291 
                              return 1;
  #line 293 
  return 0;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static void dwmac4_rd_init_rx_desc(struct dma_desc *p, int disable_rx_ic, int mode, int end, int bfsize)
{
  #line 299 
  dwmac4_set_rx_owner(p,disable_rx_ic);
  #line 300 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static void dwmac4_rd_init_tx_desc(struct dma_desc *p, int mode, int end)
{
  #line 304 
  p->des0 = 0U;
  #line 305 
  p->des1 = 0U;
  #line 306 
  p->des2 = 0U;
  #line 307 
  p->des3 = 0U;
  #line 308 
  return;
}

#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static void dwmac4_rd_prepare_tx_desc(struct dma_desc *p, int is_fs, int len, bool csum_flag, int mode, bool tx_own, bool ls, unsigned int tot_pkt_len)
{
  #line 314 
  unsigned int tdes3 = p->des3;
  #line 316 
  p->des2 |= (unsigned int)len & 16383U;
  #line 318 
  tdes3 = (tot_pkt_len & 32767U) | tdes3;
  #line 319 
  if (is_fs != 0) 
                  #line 320 
                  tdes3 |= 536870912U; else 
                                            #line 322 
                                            tdes3 &= 3758096383U;
  #line 324 
  if ((long)((int)csum_flag != 0) != 0L) 
                                         #line 325 
                                         tdes3 |= 196608U; else 
                                                                #line 327 
                                                                tdes3 &= 4294770687U;
  #line 329 
  if ((int)ls != 0) 
                    #line 330 
                    tdes3 |= 268435456U; else 
                                              #line 332 
                                              tdes3 &= 4026531839U;
  #line 335 
  if ((int)tx_own != 0) 
                        #line 336 
                        tdes3 |= 2147483648U;
  #line 338 
  if (is_fs != 0 && (int)tx_own != 0) 
                                      #line 339 
                                      ldv_inline_asm();
  #line 345 
  p->des3 = tdes3;
  #line 346 
  return;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static void dwmac4_rd_prepare_tso_tx_desc(struct dma_desc *p, int is_fs, int len1, int len2, bool tx_own, bool ls, unsigned int tcphdrlen, unsigned int tcppayloadlen)
{
  #line 353 
  unsigned int tdes3 = p->des3;
  #line 355 
  if (len1 != 0) 
                 #line 356 
                 p->des2 |= (unsigned int)len1 & 16383U;
  #line 358 
  if (len2 != 0) 
                 #line 359 
                 p->des2 |= (unsigned int)(len2 << 16) & 1073676288U;
  #line 362 
  if (is_fs != 0) 
                  #line 363 
                  tdes3 = ((((tcphdrlen << 19) & 7864320U) | (tcppayloadlen & 262143U)) | tdes3) | 537133056U; else 
                                                                    #line 369 
                                                                    tdes3 &= 3758096383U;
  #line 372 
  if ((int)ls != 0) 
                    #line 373 
                    tdes3 |= 268435456U; else 
                                              #line 375 
                                              tdes3 &= 4026531839U;
  #line 378 
  if ((int)tx_own != 0) 
                        #line 379 
                        tdes3 |= 2147483648U;
  #line 381 
  if (is_fs != 0 && (int)tx_own != 0) 
                                      #line 382 
                                      ldv_inline_asm();
  #line 388 
  p->des3 = tdes3;
  #line 389 
  return;
}

#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static void dwmac4_release_tx_desc(struct dma_desc *p, int mode)
{
  #line 393 
  p->des0 = 0U;
  #line 394 
  p->des1 = 0U;
  #line 395 
  p->des2 = 0U;
  #line 396 
  p->des3 = 0U;
  #line 397 
  return;
}

#line 399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static void dwmac4_rd_set_tx_ic(struct dma_desc *p)
{
  #line 401 
  p->des2 |= 2147483648U;
  #line 402 
  return;
}

#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static void dwmac4_display_ring(void *head, unsigned int size, bool rx)
{
  #line 407 
  int i;
  #line 409 
  char *tmp;
  #line 406 
  struct dma_desc *p = (struct dma_desc *)head;
  #line 409 
  if ((int)rx != 0) 
                    #line 409 
                    tmp = (char *)"RX"; else 
                                             #line 409 
                                             tmp = (char *)"TX";
  #line 409 
  printk((char *)"\001",tmp);
  #line 411 
  i = 0;
  #line 411 
  while ((unsigned int)i < size) {
    {
      #line 412 
      ;
      #line 412 
      ;
      #line 412 
      ;
      #line 412 
      ;
      #line 412 
      ;
      #line 412 
      printk((char *)"\001",i,(unsigned int)virt_to_phys((void *)p),p->des0,p->des1,p->des2,p->des3);
      #line 416 
      p ++;
    }
    #line 411 
    i ++;
  }
  #line 418 
  return;
}

#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static void dwmac4_set_mss_ctxt(struct dma_desc *p, unsigned int mss)
{
  #line 422 
  p->des0 = 0U;
  #line 423 
  p->des1 = 0U;
  #line 424 
  p->des2 = mss;
  #line 425 
  p->des3 = 1140850688U;
  #line 426 
  return;
}

#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static void dwmac4_get_addr(struct dma_desc *p, unsigned int *addr)
{
  #line 430 
  *addr = p->des0;
  #line 431 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static void dwmac4_set_addr(struct dma_desc *p, dma_addr_t addr)
{
  #line 435 
  p->des0 = (unsigned int)addr;
  #line 436 
  p->des1 = (unsigned int)(addr >> 32);
  #line 437 
  return;
}

#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static void dwmac4_clear(struct dma_desc *p)
{
  #line 441 
  p->des0 = 0U;
  #line 442 
  p->des1 = 0U;
  #line 443 
  p->des2 = 0U;
  #line 444 
  p->des3 = 0U;
  #line 445 
  return;
}

#line 447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static void dwmac4_set_sarc(struct dma_desc *p, u32 sarc_type)
{
  #line 449 
  sarc_type <<= 23;
  #line 451 
  p->des3 |= sarc_type & 58720256U;
  #line 452 
  return;
}

#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static int set_16kib_bfsize_0(int mtu)
{
  #line 456 
  int ret = 0;
  #line 458 
  if ((long)(mtu > 8187) != 0L) 
                                #line 459 
                                ret = 16368;
  #line 460 
  return ret;
}

#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static void dwmac4_set_vlan_tag(struct dma_desc *p, u16 tag, u16 inner_tag, u32 inner_type)
{
  #line 466 
  p->des0 = 0U;
  #line 467 
  p->des1 = 0U;
  #line 468 
  p->des2 = 0U;
  #line 469 
  p->des3 = 0U;
  #line 472 
  if (inner_type != 0U) {
    #line 473 
    u32 des = (unsigned int)((int)inner_tag << 16);
    #line 475 
    des &= 4294901760U;
    #line 476 
    p->des2 = des;
    #line 478 
    des = inner_type << 18;
    #line 479 
    des &= 786432U;
    #line 480 
    p->des3 = des | 131072U;
  }
  #line 484 
  p->des3 |= (unsigned int)tag;
  #line 485 
  p->des3 |= 65536U;
  #line 487 
  p->des3 |= 1073741824U;
  #line 488 
  return;
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static void dwmac4_set_vlan(struct dma_desc *p, u32 type)
{
  #line 492 
  type <<= 14;
  #line 493 
  p->des2 |= type & 49152U;
  #line 494 
  return;
}

#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static int dwmac4_get_rx_header_len(struct dma_desc *p, unsigned int *len)
{
  #line 498 
  *len = p->des2 & 1023U;
  #line 499 
  return 0;
}

#line 502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
static void dwmac4_set_sec_addr(struct dma_desc *p, dma_addr_t addr)
{
  #line 504 
  p->des2 = (unsigned int)addr;
  #line 505 
  p->des3 = (unsigned int)(addr >> 32) | 33554432U;
  #line 506 
  return;
}

#line 508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
struct stmmac_desc_ops dwmac4_desc_ops = {.init_rx_desc = & dwmac4_rd_init_rx_desc, .init_tx_desc = & dwmac4_rd_init_tx_desc, .prepare_tx_desc = & dwmac4_rd_prepare_tx_desc, .prepare_tso_tx_desc = & dwmac4_rd_prepare_tso_tx_desc, .set_tx_owner = & dwmac4_set_tx_owner, .get_tx_owner = & dwmac4_get_tx_owner, .release_tx_desc = & dwmac4_release_tx_desc, .set_tx_ic = & dwmac4_rd_set_tx_ic, .get_tx_ls = & dwmac4_get_tx_ls, .tx_status = & dwmac4_wrback_get_tx_status, .get_tx_len = & dwmac4_rd_get_tx_len, .set_rx_owner = & dwmac4_set_rx_owner, .get_rx_frame_len = & dwmac4_wrback_get_rx_frame_len, .rx_status = & dwmac4_wrback_get_rx_status, .enable_tx_timestamp = & dwmac4_rd_enable_tx_timestamp, .get_tx_timestamp_status = & dwmac4_wrback_get_tx_timestamp_status, .get_timestamp = & dwmac4_get_timestamp, .get_rx_timestamp_status = & dwmac4_wrback_get_rx_timestamp_status, .display_ring = & dwmac4_display_ring, .set_mss = & dwmac4_set_mss_ctxt, .get_addr = & dwmac4_get_addr, .set_addr = & dwmac4_set_addr, .clear = & dwmac4_clear, .get_rx_header_len = & dwmac4_get_rx_header_len, .set_sec_addr = & dwmac4_set_sec_addr, .set_sarc = & dwmac4_set_sarc, .set_vlan_tag = & dwmac4_set_vlan_tag, .set_vlan = & dwmac4_set_vlan};
#line 539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c"
struct stmmac_mode_ops dwmac4_ring_mode_ops = {.set_16kib_bfsize = & set_16kib_bfsize_0};
/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 61 
#line 61 
int memcmp(void *, void *, size_t);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_8851 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
__inline static void prefetchw(void *x)
{
  #line 836 
  ldv_inline_asm();
  #line 837 
  return;
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
__inline static void __init_completion(struct completion *x)
{
  #line 87 
  x->done = 0U;
  {
    #line 88 
    struct lock_class_key __key;
    #line 88 
    __init_waitqueue_head(& x->wait,(char *)"&x->wait",& __key);
  }
  #line 90 
  return;
}

#line 107 
#line 107 
unsigned long wait_for_completion_timeout(struct completion *, unsigned long);
#line 118 
#line 118 
void complete(struct completion *);
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 257 
extern int ( /* missing proto */ __builtin_mul_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 297 
#line 297 
extern int ( /* missing proto */ __builtin_add_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t __ab_c_size(size_t a, size_t b, size_t c)
{
  #line 295 
  size_t *__d;
  #line 297 
  size_t __a_0;
  #line 297 
  size_t __b_0;
  #line 297 
  size_t *__d_0;
  #line 295 
  size_t __a;
  #line 295 
  size_t __b;
  #line 293 
  size_t bytes;
  {
    #line 295 
    __a = a;
    #line 295 
    __b = b;
    #line 295 
    __d = & bytes;
    #line 295 
    int tmp = & __a == __d;
    }
  #line 295 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 296 
                                                return 18446744073709551615UL;
  {
    #line 297 
    __a_0 = bytes;
    #line 297 
    __b_0 = c;
    #line 297 
    __d_0 = & bytes;
    #line 297 
    int tmp_3 = & __a_0 == __d_0;
    }
  #line 297 
  if (__builtin_add_overflow(__a_0,__b_0,__d_0) != 0) 
                                                      #line 298 
                                                      return 18446744073709551615UL;
  #line 300 
  return bytes;
}

#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static bool gfpflags_allow_blocking(gfp_t gfp_flags)
{
  #line 325 
  return (_Bool)((gfp_flags & 1024U) != 0U);
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 668 
#line 361  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_selftests.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_fold(__wsum sum)
{
  #line 25 
  ldv_inline_asm();
  #line 30 
  return (unsigned short)(~ sum >> 16);
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_tcpudp_nofold(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum)
{
  #line 90 
  ldv_inline_asm();
  #line 98 
  return sum;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum)
{
  #line 117 
  return csum_fold(csum_tcpudp_nofold(saddr,daddr,len,(unsigned char)((int)proto),sum));
}

#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1019 
void kfree_skb(struct sk_buff *);
#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1107 
#line 1107 
struct sk_buff *skb_copy(struct sk_buff *, gfp_t);
#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cloned(struct sk_buff *skb)
{
  #line 1600 
  int tmp_1;
  #line 1600 
  if ((unsigned int)skb->cloned != 0U) {
    #line 1600 
    if ((atomic_read(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref) & 65535) != 1) 
      #line 1600 
      tmp_1 = 1; else 
                      #line 1600 
                      tmp_1 = 0;
  }
  else 
       #line 1600 
       tmp_1 = 0;
  #line 1600 
  return tmp_1;
}

#line 1714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *skb_unshare(struct sk_buff *skb, gfp_t pri)
{
  #line 1717 
  if ((int)gfpflags_allow_blocking(pri) != 0) 
                                              #line 1717 
                                              __might_sleep((char *)"./include/linux/skbuff.h",1717,0);
  #line 1718 
  if (skb_cloned(skb) != 0) {
    #line 1719 
    struct sk_buff *nskb = skb_copy(skb,pri);
    #line 1722 
    if ((long)(nskb != (struct sk_buff *)0) != 0L) 
                                                   #line 1723 
                                                   consume_skb(skb); else 
                                                                    #line 1725 
                                                                    kfree_skb(skb);
    #line 1726 
    skb = nskb;
  }
  #line 1728 
  return skb;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2245 
#line 2245 
void *skb_push(struct sk_buff *, unsigned int);
#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_transport_header(struct sk_buff *skb)
{
  #line 2465 
  skb->transport_header = (unsigned short)(skb->data - skb->head);
  #line 2466 
  return;
}

#line 2468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_transport_header(struct sk_buff *skb, int offset)
{
  #line 2471 
  skb_reset_transport_header(skb);
  #line 2472 
  skb->transport_header = (unsigned short)((int)skb->transport_header + (int)((unsigned short)offset));
  #line 2473 
  return;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_network_header(struct sk_buff *skb)
{
  #line 2482 
  skb->network_header = (unsigned short)(skb->data - skb->head);
  #line 2483 
  return;
}

#line 2485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_network_header(struct sk_buff *skb, int offset)
{
  #line 2487 
  skb_reset_network_header(skb);
  #line 2488 
  skb->network_header = (unsigned short)((int)skb->network_header + (int)((unsigned short)offset));
  #line 2489 
  return;
}

#line 2491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_mac_header(struct sk_buff *skb)
{
  #line 2493 
  return skb->head + (unsigned long)skb->mac_header;
}

#line 2511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_mac_header(struct sk_buff *skb)
{
  #line 2513 
  skb->mac_header = (unsigned short)(skb->data - skb->head);
  #line 2514 
  return;
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  #line 2781 
  return __netdev_alloc_skb(dev,length,2592U);
}

#line 3248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_linearize(struct sk_buff *skb)
{
  #line 3250 
  int tmp_0;
  #line 3250 
  if (__pskb_pull_tail(skb,(int)skb->data_len) != (void *)0) 
                                                             #line 3250 
                                                             tmp_0 = 0; else 
                                                                    #line 3250 
                                                                    tmp_0 = -12;
  #line 3250 
  return tmp_0;
}

#line 3260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_linearize(struct sk_buff *skb)
{
  #line 3262 
  int tmp_1;
  #line 3262 
  if ((int)skb_is_nonlinear(skb) != 0) 
                                       #line 3262 
                                       tmp_1 = __skb_linearize(skb); else 
                                                                    #line 3262 
                                                                    tmp_1 = 0;
  #line 3262 
  return tmp_1;
}

#line 4272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_queue_mapping(struct sk_buff *skb, u16 queue_mapping)
{
  #line 4274 
  skb->queue_mapping = queue_mapping;
  #line 4275 
  return;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
#line 1029 
int phy_loopback(struct phy_device *, bool);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool napi_reschedule(struct napi_struct *napi)
{
  #line 461 
  if ((int)napi_schedule_prep(napi) != 0) {
    #line 462 
    __napi_schedule(napi);
    #line 463 
    return (_Bool)1;
  }
  #line 465 
  return (_Bool)0;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2643 
#line 2643 
void dev_add_pack(struct packet_type *);
#line 2644 
#line 2644 
void dev_remove_pack(struct packet_type *);
#line 2666 
#line 2666 
int dev_queue_xmit(struct sk_buff *);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 4168 
#line 4168 
int dev_uc_add(struct net_device *, unsigned char *);
#line 4170 
#line 4170 
int dev_uc_del(struct net_device *, unsigned char *);
#line 4210 
#line 4210 
int dev_mc_add(struct net_device *, unsigned char *);
#line 4213 
#line 4213 
int dev_mc_del(struct net_device *, unsigned char *);
#line 4256 
#line 4256 
int dev_set_promiscuity(struct net_device *, int);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_zero_addr(u8 *addr)
{
  #line 251 
  memset((void *)addr,0,6UL);
  #line 252 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal_unaligned(u8 *addr1, u8 *addr2)
{
  #line 372 
  return ether_addr_equal(addr1,addr2);
}

#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
#line 213 
int vlan_vid_add(struct net_device *, __be16, u16);
#line 214 
#line 214 
void vlan_vid_del(struct net_device *, __be16, u16);
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
__inline static bool tc_can_offload(struct net_device *dev)
{
  #line 567 
  return (_Bool)((dev->features & 281474976710656ULL) != 0ULL);
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
__inline static struct arphdr *arp_hdr(struct sk_buff *skb)
{
  #line 27 
  return (struct arphdr *)skb_network_header(skb);
}

#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/arp.h"
#line 75 
struct sk_buff *arp_create(int, int, __be32, struct net_device *, __be32, unsigned char *, unsigned char *, unsigned char *);
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
#line 203 
void ip_send_check(struct iphdr *);
#line 1341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
__inline static __sum16 tcp_v4_check(int len, __be32 saddr, __be32 daddr, __wsum base)
{
  #line 1344 
  return csum_tcpudp_magic(saddr,daddr,(unsigned int)len,(unsigned char)6,base);
}

#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
#line 288 
void udp4_hwcsum(struct sk_buff *, __be32, __be32);
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
#line 1887  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
void stmmac_selftest_run(struct net_device *dev, struct ethtool_test *etest, u64 *buf);
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
#line 1971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
void stmmac_selftest_get_strings(struct stmmac_priv *priv, u8 *data);
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
#line 1983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
int stmmac_selftest_get_count(struct stmmac_priv *priv);
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static u8 stmmac_test_next_id;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static struct sk_buff *stmmac_test_get_udp_skb(struct stmmac_priv *priv, struct stmmac_packet_attrs *attr)
{
  #line 63 
  struct stmmachdr *shdr;
  #line 64 
  struct ethhdr *ehdr;
  #line 65 
  struct iphdr *ihdr;
  #line 66 
  int iplen;
  #line 66 
  int size;
  #line 190 
  u8 tmp_7;
  #line 60 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 61 
  struct udphdr *uhdr = (struct udphdr *)0;
  #line 62 
  struct tcphdr *thdr = (struct tcphdr *)0;
  #line 68 
  size = (int)((unsigned int)attr->size + 47U);
  #line 69 
  if (attr->vlan != 0) {
    #line 70 
    size += 4;
    #line 71 
    if (attr->vlan > 1) 
                        #line 72 
                        size += 4;
  }
  #line 75 
  if (attr->tcp != 0) 
                      #line 76 
                      size = (int)((unsigned int)size + 20U); else 
                                                                   #line 78 
                                                                   size = (int)((unsigned int)size + 8U);
  #line 80 
  if (attr->max_size != 0 && attr->max_size > size) 
                                                    #line 81 
                                                    size = attr->max_size;
  #line 83 
  skb = netdev_alloc_skb(priv->dev,(unsigned int)size);
  #line 84 
  if (skb == (struct sk_buff *)0) 
                                  #line 85 
                                  return (struct sk_buff *)0;
  #line 87 
  prefetchw((void *)skb->data);
  #line 89 
  if (attr->vlan > 1) 
                      #line 90 
                      ehdr = (struct ethhdr *)skb_push(skb,22U);
  else 
    #line 91 
    if (attr->vlan != 0) 
                         #line 92 
                         ehdr = (struct ethhdr *)skb_push(skb,18U);
    else 
      #line 93 
      if (attr->remove_sa != 0) 
                                #line 94 
                                ehdr = (struct ethhdr *)skb_push(skb,8U); else 
                                                                    #line 96 
                                                                    ehdr = (struct ethhdr *)skb_push(skb,14U);
  #line 97 
  skb_reset_mac_header(skb);
  #line 99 
  skb_set_network_header(skb,(int)skb->len);
  #line 100 
  ihdr = (struct iphdr *)skb_put(skb,20U);
  #line 102 
  skb_set_transport_header(skb,(int)skb->len);
  #line 103 
  if (attr->tcp != 0) 
                      #line 104 
                      thdr = (struct tcphdr *)skb_put(skb,20U); else 
                                                                  #line 106 
                                                                  uhdr = (struct udphdr *)skb_put(skb,8U);
  #line 108 
  if (attr->remove_sa == 0) 
                            #line 109 
                            eth_zero_addr((u8 *)(& ehdr->h_source));
  #line 110 
  eth_zero_addr((u8 *)(& ehdr->h_dest));
  #line 111 
  if (attr->src != (unsigned char *)0U && attr->remove_sa == 0) 
                                                                #line 112 
                                                                ether_addr_copy((u8 *)(& ehdr->h_source),attr->src);
  #line 113 
  if (attr->dst != (unsigned char *)0U) 
                                        #line 114 
                                        ether_addr_copy((u8 *)(& ehdr->h_dest),attr->dst);
  #line 116 
  if (attr->remove_sa == 0) 
                            #line 117 
                            ehdr->h_proto = (unsigned short)8U;
  else {
    #line 119 
    __be16 *ptr = (__be16 *)ehdr;
    #line 122 
    *(ptr + 3U) = (unsigned short)8U;
  }
  #line 125 
  if (attr->vlan != 0) {
    #line 126 
    __be16 *tag;
    #line 126 
    __be16 *proto;
    #line 128 
    if (attr->remove_sa == 0) {
      #line 129 
      tag = (__be16 *)((void *)ehdr + 14U);
      #line 130 
      proto = (__be16 *)((void *)ehdr + 12U);
    }
    else {
      #line 132 
      tag = (__be16 *)((void *)ehdr + 8U);
      #line 133 
      proto = (__be16 *)((void *)ehdr + 6U);
    }
    #line 136 
    *proto = (unsigned short)129U;
    #line 137 
    *tag = __builtin_bswap16((unsigned short)((int)((unsigned short)attr->vlan_id_out)));
    #line 138 
    *(tag + 1U) = (unsigned short)8U;
    #line 139 
    if (attr->vlan > 1) {
      #line 140 
      *proto = (unsigned short)43144U;
      #line 141 
      *(tag + 1U) = (unsigned short)129U;
      #line 142 
      *(tag + 2U) = __builtin_bswap16((unsigned short)((int)((unsigned short)attr->vlan_id_in)));
      #line 143 
      *(tag + 3U) = (unsigned short)8U;
    }
  }
  #line 147 
  if (attr->tcp != 0) {
    #line 148 
    thdr->source = __builtin_bswap16((unsigned short)((int)((unsigned short)attr->sport)));
    #line 149 
    thdr->dest = __builtin_bswap16((unsigned short)((int)((unsigned short)attr->dport)));
    #line 150 
    thdr->doff = (unsigned short)5U;
    #line 151 
    thdr->check = (unsigned short)0U;
  }
  else {
    #line 153 
    uhdr->source = __builtin_bswap16((unsigned short)((int)((unsigned short)attr->sport)));
    #line 154 
    uhdr->dest = __builtin_bswap16((unsigned short)((int)((unsigned short)attr->dport)));
    #line 155 
    uhdr->len = __builtin_bswap16((unsigned short)((int)((unsigned int)((unsigned short)attr->size) + 21U)));
    #line 156 
    if (attr->max_size != 0) 
                             #line 157 
                             uhdr->len = __builtin_bswap16((unsigned short)((int)((unsigned int)((unsigned short)attr->max_size) + 65502U)));
    #line 159 
    uhdr->check = (unsigned short)0U;
  }
  #line 162 
  ihdr->ihl = (unsigned char)5U;
  #line 163 
  ihdr->ttl = (unsigned char)32U;
  #line 164 
  ihdr->version = (unsigned char)4U;
  #line 165 
  if (attr->tcp != 0) 
                      #line 166 
                      ihdr->protocol = (unsigned char)6U; else 
                                                               #line 168 
                                                               ihdr->protocol = (unsigned char)17U;
  #line 169 
  iplen = (int)((unsigned int)attr->size + 33U);
  #line 170 
  if (attr->tcp != 0) 
                      #line 171 
                      iplen = (int)((unsigned int)iplen + 20U); else 
                                                                  #line 173 
                                                                  iplen = (int)((unsigned int)iplen + 8U);
  #line 175 
  if (attr->max_size != 0) 
                           #line 176 
                           iplen = (int)((unsigned int)attr->max_size + 4294967282U);
  #line 178 
  ihdr->tot_len = __builtin_bswap16((unsigned short)((int)((unsigned short)iplen)));
  #line 179 
  ihdr->frag_off = (unsigned short)0U;
  #line 180 
  ihdr->saddr = __builtin_bswap32(attr->ip_src);
  #line 181 
  ihdr->daddr = __builtin_bswap32(attr->ip_dst);
  #line 182 
  ihdr->tos = (unsigned char)0U;
  #line 183 
  ihdr->id = (unsigned short)0U;
  #line 184 
  ip_send_check(ihdr);
  #line 186 
  shdr = (struct stmmachdr *)skb_put(skb,13U);
  #line 187 
  shdr->version = 0U;
  #line 188 
  shdr->magic = 12528731361202843102ULL;
  #line 189 
  attr->id = stmmac_test_next_id;
  #line 190 
  tmp_7 = stmmac_test_next_id;
  #line 190 
  stmmac_test_next_id = (u8)((int)stmmac_test_next_id + 1);
  #line 190 
  shdr->id = tmp_7;
  #line 192 
  if (attr->size != 0) 
                       #line 193 
                       skb_put(skb,(unsigned int)attr->size);
  #line 194 
  if (attr->max_size != 0 && (unsigned int)attr->max_size > skb->len) 
    #line 195 
    skb_put(skb,(unsigned int)attr->max_size - skb->len);
  #line 197 
  skb->__anonCompField_sk_buff_94.csum = 0U;
  #line 198 
  skb->ip_summed = (unsigned char)3U;
  #line 199 
  if (attr->tcp != 0) {
    #line 200 
    thdr->check = (unsigned short)(~ ((int)tcp_v4_check((int)skb->len,ihdr->saddr,ihdr->daddr,0U)));
    #line 201 
    skb->__anonCompField_sk_buff_94.__anonCompField___anonunion_2647_93.csum_start = (unsigned short)(skb_transport_header(skb) - skb->head);
    #line 202 
    skb->__anonCompField_sk_buff_94.__anonCompField___anonunion_2647_93.csum_offset = (unsigned short)16U;
  }
  else 
       #line 204 
       udp4_hwcsum(skb,ihdr->saddr,ihdr->daddr);
  #line 207 
  skb->protocol = (unsigned short)8U;
  #line 208 
  skb->pkt_type = (unsigned char)0U;
  #line 209 
  skb->__anonCompField_sk_buff_88.__anonCompField___anonunion_2640_87.__anonCompField___anonstruct_2641_86.dev = priv->dev;
  #line 211 
  return skb;
}

#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static struct sk_buff *stmmac_test_get_arp_skb(struct stmmac_priv *priv, struct stmmac_packet_attrs *attr)
{
  #line 217 
  __be32 ip_src = __builtin_bswap32(attr->ip_src);
  #line 218 
  __be32 ip_dst = __builtin_bswap32(attr->ip_dst);
  #line 219 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 221 
  skb = arp_create(1,2054,ip_dst,priv->dev,ip_src,(unsigned char *)0U,attr->src,attr->dst);
  #line 223 
  if (skb == (struct sk_buff *)0) 
                                  #line 224 
                                  return (struct sk_buff *)0;
  #line 226 
  skb->pkt_type = (unsigned char)0U;
  #line 227 
  skb->__anonCompField_sk_buff_88.__anonCompField___anonunion_2640_87.__anonCompField___anonstruct_2641_86.dev = priv->dev;
  #line 229 
  return skb;
}

#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_loopback_validate(struct sk_buff *skb, struct net_device *ndev, struct packet_type *pt, struct net_device *orig_ndev)
{
  #line 249 
  struct stmmachdr *shdr;
  #line 250 
  struct ethhdr *ehdr;
  #line 251 
  struct udphdr *uhdr;
  #line 252 
  struct tcphdr *thdr;
  #line 253 
  struct iphdr *ihdr;
  #line 246 
  struct stmmac_test_priv *tpriv = (struct stmmac_test_priv *)pt->af_packet_priv;
  #line 247 
  unsigned char *src = (tpriv->packet)->src;
  #line 248 
  unsigned char *dst = (tpriv->packet)->dst;
  #line 255 
  skb = skb_unshare(skb,2592U);
  #line 256 
  if (skb == (struct sk_buff *)0) 
                                  #line 257 
                                  goto out;
  #line 259 
  if (skb_linearize(skb) != 0) 
                               #line 260 
                               goto out;
  #line 261 
  if (skb_headlen(skb) <= 32U) 
                               #line 262 
                               goto out;
  #line 264 
  ehdr = (struct ethhdr *)skb_mac_header(skb);
  #line 265 
  if (dst != (unsigned char *)0U) {
    #line 266 
    if (! ether_addr_equal_unaligned((u8 *)(& ehdr->h_dest),dst)) 
                                                                  #line 267 
                                                                  goto out;
  }
  #line 269 
  if ((tpriv->packet)->sarc != 0) {
    #line 270 
    if (! ether_addr_equal_unaligned((u8 *)(& ehdr->h_source),
                                   (u8 *)(& ehdr->h_dest))) 
      #line 271 
      goto out;
  }
  else 
    #line 272 
    if (src != (unsigned char *)0U) {
      #line 273 
      if (! ether_addr_equal_unaligned((u8 *)(& ehdr->h_source),src)) 
        #line 274 
        goto out;
    }
  #line 277 
  ihdr = ip_hdr(skb);
  #line 278 
  if (tpriv->double_vlan != 0) {
    #line 279 
    ihdr = (struct iphdr *)(skb_network_header(skb) + 4U);
  }
  #line 281 
  if ((tpriv->packet)->tcp != 0) {
    #line 282 
    if ((unsigned int)ihdr->protocol != 6U) 
                                            #line 283 
                                            goto out;
    #line 285 
    thdr = (struct tcphdr *)((u8 *)ihdr + (unsigned long)((int)ihdr->ihl * 4));
    #line 286 
    ;
    #line 286 
    if ((int)thdr->dest != (int)__builtin_bswap16((unsigned short)((int)((unsigned short)(tpriv->packet)->dport)))) 
      #line 287 
      goto out;
    #line 289 
    shdr = (struct stmmachdr *)((u8 *)thdr + 20UL);
  }
  else {
    #line 291 
    if ((unsigned int)ihdr->protocol != 17U) 
                                             #line 292 
                                             goto out;
    #line 294 
    uhdr = (struct udphdr *)((u8 *)ihdr + (unsigned long)((int)ihdr->ihl * 4));
    #line 295 
    ;
    #line 295 
    if ((int)uhdr->dest != (int)__builtin_bswap16((unsigned short)((int)((unsigned short)(tpriv->packet)->dport)))) 
      #line 296 
      goto out;
    #line 298 
    shdr = (struct stmmachdr *)((u8 *)uhdr + 8UL);
  }
  #line 301 
  if (shdr->magic != 12528731361202843102ULL) 
                                              #line 302 
                                              goto out;
  #line 303 
  if ((tpriv->packet)->exp_hash != 0U && skb->hash == 0U) 
                                                          #line 304 
                                                          goto out;
  #line 305 
  if ((int)(tpriv->packet)->id != (int)shdr->id) 
                                                 #line 306 
                                                 goto out;
  #line 308 
  tpriv->ok = 1;
  #line 309 
  complete(& tpriv->comp);
  #line 310 
  out: 
       #line 310 
  ;
  #line 311 
  kfree_skb(skb);
  #line 312 
  return 0;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int __stmmac_test_loopback(struct stmmac_priv *priv, struct stmmac_packet_attrs *attr)
{
  #line 318 
  struct stmmac_test_priv *tpriv;
  #line 319 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 320 
  int ret = 0;
  #line 322 
  tpriv = (struct stmmac_test_priv *)kzalloc(184UL,3264U);
  #line 323 
  if (tpriv == (struct stmmac_test_priv *)0) 
                                             #line 324 
                                             return -12;
  #line 326 
  tpriv->ok = 0;
  #line 327 
  __init_completion(& tpriv->comp);
  #line 329 
  tpriv->pt.type = (unsigned short)8U;
  #line 330 
  tpriv->pt.func = & stmmac_test_loopback_validate;
  #line 331 
  tpriv->pt.dev = priv->dev;
  #line 332 
  tpriv->pt.af_packet_priv = (void *)tpriv;
  #line 333 
  tpriv->packet = attr;
  #line 335 
  if (attr->dont_wait == 0) 
                            #line 336 
                            dev_add_pack(& tpriv->pt);
  #line 338 
  skb = stmmac_test_get_udp_skb(priv,attr);
  #line 339 
  if (skb == (struct sk_buff *)0) {
    #line 340 
    ret = -12;
    #line 341 
    goto cleanup;
  }
  #line 344 
  skb_set_queue_mapping(skb,(unsigned short)((int)attr->queue_mapping));
  #line 345 
  ret = dev_queue_xmit(skb);
  #line 346 
  if (ret != 0) 
                #line 347 
                goto cleanup;
  #line 349 
  if (attr->dont_wait != 0) 
                            #line 350 
                            goto cleanup;
  #line 352 
  if (attr->timeout == 0) {
    #line 353 
    attr->timeout = (int)msecs_to_jiffies(200U);
  }
  #line 355 
  wait_for_completion_timeout(& tpriv->comp,(unsigned long)attr->timeout);
  #line 356 
  if (tpriv->ok != 0) 
                      #line 356 
                      ret = 0; else 
                                    #line 356 
                                    ret = -110;
  #line 358 
  cleanup: 
           #line 358 
  ;
  #line 359 
  if (attr->dont_wait == 0) 
                            #line 360 
                            dev_remove_pack(& tpriv->pt);
  #line 361 
  kfree((void *)tpriv);
  #line 362 
  return ret;
}

#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_mac_loopback(struct stmmac_priv *priv)
{
  #line 367 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 369 
  attr.dst = (priv->dev)->dev_addr;
  #line 370 
  return __stmmac_test_loopback(priv,& attr);
}

#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_phy_loopback(struct stmmac_priv *priv)
{
  #line 376 
  int ret;
  #line 375 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 378 
  if ((priv->dev)->phydev == (struct phy_device *)0) 
                                                     #line 379 
                                                     return -16;
  #line 381 
  ret = phy_loopback((priv->dev)->phydev,(_Bool)1);
  #line 382 
  if (ret != 0) 
                #line 383 
                return ret;
  #line 385 
  attr.dst = (priv->dev)->dev_addr;
  #line 386 
  ret = __stmmac_test_loopback(priv,& attr);
  #line 388 
  phy_loopback((priv->dev)->phydev,(_Bool)0);
  #line 389 
  return ret;
}

#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_mmc(struct stmmac_priv *priv)
{
  #line 394 
  struct stmmac_counters initial;
  #line 394 
  struct stmmac_counters final;
  #line 395 
  int ret;
  #line 397 
  memset((void *)(& initial),0,340UL);
  #line 398 
  memset((void *)(& final),0,340UL);
  #line 400 
  if (priv->dma_cap.rmon == 0U) 
                                #line 401 
                                return -95;
  {
    #line 404 
    int __result = -22;
    #line 404 
    if ((priv->hw)->mmc != (struct stmmac_mmc_ops *)0 && ((priv->hw)->mmc)->read != (void (*)(void *, struct stmmac_counters *))0) {
      #line 404 
      (*(((priv->hw)->mmc)->read))(priv->mmcaddr,& priv->mmc);
      #line 404 
      __result = 0;
    }
    #line 404 
    int tmp = __result;
  }
  #line 406 
  ret = stmmac_test_mac_loopback(priv);
  #line 407 
  if (ret != 0) 
                #line 408 
                return ret;
  {
    #line 411 
    int __result_0 = -22;
    #line 411 
    if ((priv->hw)->mmc != (struct stmmac_mmc_ops *)0 && ((priv->hw)->mmc)->read != (void (*)(void *, struct stmmac_counters *))0) {
      #line 411 
      (*(((priv->hw)->mmc)->read))(priv->mmcaddr,& final);
      #line 411 
      __result_0 = 0;
    }
    #line 411 
    int tmp_3 = __result_0;
  }
  #line 418 
  if (final.mmc_tx_framecount_g <= initial.mmc_tx_framecount_g) 
                                                                #line 419 
                                                                return -22;
  #line 421 
  return 0;
}

#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_eee(struct stmmac_priv *priv)
{
  #line 426 
  struct stmmac_extra_stats *initial;
  #line 426 
  struct stmmac_extra_stats *final;
  #line 428 
  int ret;
  #line 427 
  int retries = 10;
  #line 430 
  if (priv->dma_cap.eee == 0U || priv->eee_active == 0) 
                                                        #line 431 
                                                        return -95;
  #line 433 
  initial = (struct stmmac_extra_stats *)kzalloc(960UL,3264U);
  #line 434 
  if (initial == (struct stmmac_extra_stats *)0) 
                                                 #line 435 
                                                 return -12;
  #line 437 
  final = (struct stmmac_extra_stats *)kzalloc(960UL,3264U);
  #line 438 
  if (final == (struct stmmac_extra_stats *)0) {
    #line 439 
    ret = -12;
    #line 440 
    goto out_free_initial;
  }
  #line 443 
  memcpy((void *)initial,(void *)(& priv->xstats),960UL);
  #line 445 
  ret = stmmac_test_mac_loopback(priv);
  #line 446 
  if (ret != 0) 
                #line 447 
                goto out_free_final;
  #line 450 
  while (1) {
    #line 450 
    retries --;
    #line 450 
    if (! (retries != 0)) 
                          #line 450 
                          break;
    #line 451 
    memcpy((void *)final,(void *)(& priv->xstats),960UL);
    #line 453 
    if (final->irq_tx_path_in_lpi_mode_n > initial->irq_tx_path_in_lpi_mode_n) 
      #line 455 
      break;
    #line 456 
    msleep(100U);
  }
  #line 459 
  if (retries == 0) {
    #line 460 
    ret = -110;
    #line 461 
    goto out_free_final;
  }
  #line 464 
  if (final->irq_tx_path_in_lpi_mode_n <= initial->irq_tx_path_in_lpi_mode_n) {
    #line 466 
    ret = -22;
    #line 467 
    goto out_free_final;
  }
  #line 470 
  if (final->irq_tx_path_exit_lpi_mode_n <= initial->irq_tx_path_exit_lpi_mode_n) {
    #line 472 
    ret = -22;
    #line 473 
    goto out_free_final;
  }
  #line 476 
  out_free_final: 
                  #line 476 
  ;
  #line 477 
  kfree((void *)final);
  #line 478 
  out_free_initial: 
                    #line 478 
  ;
  #line 479 
  kfree((void *)initial);
  #line 480 
  return ret;
}

#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_filter_check(struct stmmac_priv *priv)
{
  #line 485 
  if (((priv->dev)->flags & 256U) == 0U) 
                                         #line 486 
                                         return 0;
  #line 488 
  netdev_warn(priv->dev,(char *)"Test can\'t be run in promiscuous mode!\n");
  #line 489 
  return -95;
}

#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static bool stmmac_hash_check(struct stmmac_priv *priv, unsigned char *addr)
{
  #line 499 
  u32 ___x;
  #line 499 
  u32 tmp_2;
  #line 504 
  void *__mptr;
  #line 495 
  struct netdev_hw_addr *ha;
  #line 496 
  u32 hash;
  #line 496 
  u32 hash_nr;
  #line 494 
  int mc_offset = (int)(32U - (priv->hw)->mcast_bits_log2);
  {
    #line 499 
    u32 __x = ~ crc32_le(4294967295U,addr,6UL);
    #line 499 
    if (0 != 0) {
      #line 499 
      ___x = __x;
      #line 499 
      ___x = (___x << 16) | (___x << ((unsigned long)8 * sizeof(___x) - (unsigned long)16));
      #line 499 
      ___x = ((___x >> 8) & 16711935U) | ((___x << 8) & 4278255360U);
      #line 499 
      ___x = ((___x >> 4) & 252645135U) | ((___x << 4) & 4042322160U);
      #line 499 
      ___x = ((___x >> 2) & 858993459U) | ((___x << 2) & 3435973836U);
      #line 499 
      ___x = ((___x >> 1) & 1431655765U) | ((___x << 1) & 2863311530U);
      #line 499 
      tmp_2 = ___x;
    }
    else 
         #line 499 
         tmp_2 = __bitrev32(__x);
    }
  #line 499 
  hash = tmp_2 >> mc_offset;
  #line 500 
  hash_nr = hash >> 5;
  #line 501 
  hash = (unsigned int)(1 << (hash & 31U));
  #line 504 
  __mptr = (void *)(priv->dev)->mc.list.next;
  #line 504 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 504 
  while (& ha->list != & (priv->dev)->mc.list) {
    #line 504 
    void *__mptr_0;
    {
      #line 505 
      u32 ___x_0;
      #line 505 
      u32 tmp_9;
      {
        #line 505 
        u32 __x_0 = ~ crc32_le(4294967295U,(unsigned char *)(& ha->addr),6UL);
        #line 505 
        if (0 != 0) {
          #line 505 
          ___x_0 = __x_0;
          #line 505 
          ___x_0 = (___x_0 << 16) | (___x_0 << ((unsigned long)8 * sizeof(___x_0) - (unsigned long)16));
          #line 505 
          ___x_0 = ((___x_0 >> 8) & 16711935U) | ((___x_0 << 8) & 4278255360U);
          #line 505 
          ___x_0 = ((___x_0 >> 4) & 252645135U) | ((___x_0 << 4) & 4042322160U);
          #line 505 
          ___x_0 = ((___x_0 >> 2) & 858993459U) | ((___x_0 << 2) & 3435973836U);
          #line 505 
          ___x_0 = ((___x_0 >> 1) & 1431655765U) | ((___x_0 << 1) & 2863311530U);
          #line 505 
          tmp_9 = ___x_0;
        }
        else 
             #line 505 
             tmp_9 = __bitrev32(__x_0);
        }
      #line 505 
      u32 nr = tmp_9 >> mc_offset;
      #line 506 
      if (nr >> 5 == hash_nr && (unsigned int)(1 << (nr & 31U)) == hash) 
        #line 507 
        return (_Bool)0;
    }
    #line 504 
    __mptr_0 = (void *)ha->list.next;
    #line 504 
    ha = ((struct netdev_hw_addr *)__mptr_0);
  }
  #line 511 
  return (_Bool)1;
}

#line 514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static bool stmmac_perfect_check(struct stmmac_priv *priv, unsigned char *addr)
{
  #line 519 
  void *__mptr;
  #line 516 
  struct netdev_hw_addr *ha;
  #line 519 
  __mptr = (void *)(priv->dev)->uc.list.next;
  #line 519 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 519 
  while (& ha->list != & (priv->dev)->uc.list) {
    #line 519 
    void *__mptr_0;
    #line 520 
    if (memcmp((void *)(& ha->addr),(void *)addr,6UL) == 0) 
                                                            #line 521 
                                                            return (_Bool)0;
    #line 519 
    __mptr_0 = (void *)ha->list.next;
    #line 519 
    ha = ((struct netdev_hw_addr *)__mptr_0);
  }
  #line 525 
  return (_Bool)1;
}

#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_hfilt(struct stmmac_priv *priv)
{
  #line 533 
  int ret;
  #line 530 
  unsigned char gd_addr[6U] = {(unsigned char)241U, (unsigned char)238U, (unsigned char)221U, (unsigned char)204U, (unsigned char)187U, (unsigned char)170U};
  #line 531 
  unsigned char bd_addr[6U] = {(unsigned char)241U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  #line 532 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 533 
  int tries = 256;
  #line 535 
  ret = stmmac_filter_check(priv);
  #line 536 
  if (ret != 0) 
                #line 537 
                return ret;
  #line 539 
  if ((unsigned int)(priv->dev)->mc.count >= (priv->hw)->multicast_filter_bins) 
    #line 540 
    return -95;
  #line 542 
  while (1) {
    #line 542 
    tries --;
    #line 542 
    if (! (tries != 0)) 
                        #line 542 
                        break;
    {
      #line 544 
      bd_addr[5] = (unsigned char)tries;
      #line 545 
      if ((int)stmmac_hash_check(priv,(unsigned char *)(& bd_addr)) != 0) 
        #line 546 
        break;
    }
  }
  #line 549 
  if (tries == 0) 
                  #line 550 
                  return -95;
  #line 552 
  ret = dev_mc_add(priv->dev,(unsigned char *)(& gd_addr));
  #line 553 
  if (ret != 0) 
                #line 554 
                return ret;
  #line 556 
  attr.dst = (unsigned char *)(& gd_addr);
  #line 559 
  ret = __stmmac_test_loopback(priv,& attr);
  #line 560 
  if (ret != 0) 
                #line 561 
                goto cleanup;
  #line 563 
  attr.dst = (unsigned char *)(& bd_addr);
  #line 566 
  ret = __stmmac_test_loopback(priv,& attr);
  #line 567 
  if (ret != 0) 
                #line 567 
                ret = 0; else 
                              #line 567 
                              ret = -22;
  #line 569 
  cleanup: 
           #line 569 
  ;
  #line 570 
  dev_mc_del(priv->dev,(unsigned char *)(& gd_addr));
  #line 571 
  return ret;
}

#line 574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_pfilt(struct stmmac_priv *priv)
{
  #line 579 
  int ret;
  #line 576 
  unsigned char gd_addr[6U] = {(unsigned char)240U, (unsigned char)1U, (unsigned char)68U, (unsigned char)85U, (unsigned char)102U, (unsigned char)119U};
  #line 577 
  unsigned char bd_addr[6U] = {(unsigned char)240U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  #line 578 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 579 
  int tries = 256;
  #line 581 
  if (stmmac_filter_check(priv) != 0) 
                                      #line 582 
                                      return -95;
  #line 583 
  if ((unsigned int)(priv->dev)->uc.count >= (priv->hw)->unicast_filter_entries) 
    #line 584 
    return -95;
  #line 586 
  while (1) {
    #line 586 
    tries --;
    #line 586 
    if (! (tries != 0)) 
                        #line 586 
                        break;
    {
      #line 588 
      bd_addr[5] = (unsigned char)tries;
      #line 589 
      if ((int)stmmac_perfect_check(priv,(unsigned char *)(& bd_addr)) != 0) 
        #line 590 
        break;
    }
  }
  #line 593 
  if (tries == 0) 
                  #line 594 
                  return -95;
  #line 596 
  ret = dev_uc_add(priv->dev,(unsigned char *)(& gd_addr));
  #line 597 
  if (ret != 0) 
                #line 598 
                return ret;
  #line 600 
  attr.dst = (unsigned char *)(& gd_addr);
  #line 603 
  ret = __stmmac_test_loopback(priv,& attr);
  #line 604 
  if (ret != 0) 
                #line 605 
                goto cleanup;
  #line 607 
  attr.dst = (unsigned char *)(& bd_addr);
  #line 610 
  ret = __stmmac_test_loopback(priv,& attr);
  #line 611 
  if (ret != 0) 
                #line 611 
                ret = 0; else 
                              #line 611 
                              ret = -22;
  #line 613 
  cleanup: 
           #line 613 
  ;
  #line 614 
  dev_uc_del(priv->dev,(unsigned char *)(& gd_addr));
  #line 615 
  return ret;
}

#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_mcfilt(struct stmmac_priv *priv)
{
  #line 623 
  int ret;
  #line 620 
  unsigned char uc_addr[6U] = {(unsigned char)240U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  #line 621 
  unsigned char mc_addr[6U] = {(unsigned char)241U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  #line 622 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 623 
  int tries = 256;
  #line 625 
  if (stmmac_filter_check(priv) != 0) 
                                      #line 626 
                                      return -95;
  #line 627 
  if ((unsigned int)(priv->dev)->uc.count >= (priv->hw)->unicast_filter_entries) 
    #line 628 
    return -95;
  #line 629 
  if ((unsigned int)(priv->dev)->mc.count >= (priv->hw)->multicast_filter_bins) 
    #line 630 
    return -95;
  #line 632 
  while (1) {
    #line 632 
    tries --;
    #line 632 
    if (! (tries != 0)) 
                        #line 632 
                        break;
    {
      #line 634 
      mc_addr[5] = (unsigned char)tries;
      #line 635 
      if ((int)stmmac_hash_check(priv,(unsigned char *)(& mc_addr)) != 0) 
        #line 636 
        break;
    }
  }
  #line 639 
  if (tries == 0) 
                  #line 640 
                  return -95;
  #line 642 
  ret = dev_uc_add(priv->dev,(unsigned char *)(& uc_addr));
  #line 643 
  if (ret != 0) 
                #line 644 
                return ret;
  #line 646 
  attr.dst = (unsigned char *)(& uc_addr);
  #line 649 
  ret = __stmmac_test_loopback(priv,& attr);
  #line 650 
  if (ret != 0) 
                #line 651 
                goto cleanup;
  #line 653 
  attr.dst = (unsigned char *)(& mc_addr);
  #line 656 
  ret = __stmmac_test_loopback(priv,& attr);
  #line 657 
  if (ret != 0) 
                #line 657 
                ret = 0; else 
                              #line 657 
                              ret = -22;
  #line 659 
  cleanup: 
           #line 659 
  ;
  #line 660 
  dev_uc_del(priv->dev,(unsigned char *)(& uc_addr));
  #line 661 
  return ret;
}

#line 664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_ucfilt(struct stmmac_priv *priv)
{
  #line 669 
  int ret;
  #line 666 
  unsigned char uc_addr[6U] = {(unsigned char)240U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  #line 667 
  unsigned char mc_addr[6U] = {(unsigned char)241U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  #line 668 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 669 
  int tries = 256;
  #line 671 
  if (stmmac_filter_check(priv) != 0) 
                                      #line 672 
                                      return -95;
  #line 673 
  if ((unsigned int)(priv->dev)->uc.count >= (priv->hw)->unicast_filter_entries) 
    #line 674 
    return -95;
  #line 675 
  if ((unsigned int)(priv->dev)->mc.count >= (priv->hw)->multicast_filter_bins) 
    #line 676 
    return -95;
  #line 678 
  while (1) {
    #line 678 
    tries --;
    #line 678 
    if (! (tries != 0)) 
                        #line 678 
                        break;
    {
      #line 680 
      uc_addr[5] = (unsigned char)tries;
      #line 681 
      if ((int)stmmac_perfect_check(priv,(unsigned char *)(& uc_addr)) != 0) 
        #line 682 
        break;
    }
  }
  #line 685 
  if (tries == 0) 
                  #line 686 
                  return -95;
  #line 688 
  ret = dev_mc_add(priv->dev,(unsigned char *)(& mc_addr));
  #line 689 
  if (ret != 0) 
                #line 690 
                return ret;
  #line 692 
  attr.dst = (unsigned char *)(& mc_addr);
  #line 695 
  ret = __stmmac_test_loopback(priv,& attr);
  #line 696 
  if (ret != 0) 
                #line 697 
                goto cleanup;
  #line 699 
  attr.dst = (unsigned char *)(& uc_addr);
  #line 702 
  ret = __stmmac_test_loopback(priv,& attr);
  #line 703 
  if (ret != 0) 
                #line 703 
                ret = 0; else 
                              #line 703 
                              ret = -22;
  #line 705 
  cleanup: 
           #line 705 
  ;
  #line 706 
  dev_mc_del(priv->dev,(unsigned char *)(& mc_addr));
  #line 707 
  return ret;
}

#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_flowctrl_validate(struct sk_buff *skb, struct net_device *ndev, struct packet_type *pt, struct net_device *orig_ndev)
{
  #line 716 
  struct ethhdr *ehdr;
  #line 715 
  struct stmmac_test_priv *tpriv = (struct stmmac_test_priv *)pt->af_packet_priv;
  #line 718 
  ehdr = (struct ethhdr *)skb_mac_header(skb);
  #line 719 
  if (! ether_addr_equal_unaligned((u8 *)(& ehdr->h_source),
                                   orig_ndev->dev_addr)) 
    #line 720 
    goto out;
  #line 721 
  if ((unsigned int)ehdr->h_proto != 2184U) 
                                            #line 722 
                                            goto out;
  #line 724 
  tpriv->ok = 1;
  #line 725 
  complete(& tpriv->comp);
  #line 726 
  out: 
       #line 726 
  ;
  #line 727 
  kfree_skb(skb);
  #line 728 
  return 0;
}

#line 731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_flowctrl(struct stmmac_priv *priv)
{
  #line 736 
  struct stmmac_test_priv *tpriv;
  #line 737 
  unsigned int pkt_count;
  #line 738 
  int i;
  #line 733 
  unsigned char paddr[6U] = {(unsigned char)1U, (unsigned char)128U, (unsigned char)194U, (unsigned char)0U, (unsigned char)0U, (unsigned char)1U};
  #line 734 
  struct phy_device *phydev = (priv->dev)->phydev;
  #line 735 
  u32 rx_cnt = (priv->plat)->rx_queues_to_use;
  #line 738 
  int ret = 0;
  #line 740 
  if (phydev == (struct phy_device *)0 || phydev->pause == 0 && phydev->asym_pause == 0) 
    #line 741 
    return -95;
  #line 743 
  tpriv = (struct stmmac_test_priv *)kzalloc(184UL,3264U);
  #line 744 
  if (tpriv == (struct stmmac_test_priv *)0) 
                                             #line 745 
                                             return -12;
  #line 747 
  tpriv->ok = 0;
  #line 748 
  __init_completion(& tpriv->comp);
  #line 749 
  tpriv->pt.type = (unsigned short)2184U;
  #line 750 
  tpriv->pt.func = & stmmac_test_flowctrl_validate;
  #line 751 
  tpriv->pt.dev = priv->dev;
  #line 752 
  tpriv->pt.af_packet_priv = (void *)tpriv;
  #line 753 
  dev_add_pack(& tpriv->pt);
  #line 756 
  pkt_count = (unsigned int)(priv->plat)->rx_fifo_size;
  #line 757 
  if (pkt_count == 0U) 
                       #line 758 
                       pkt_count = priv->dma_cap.rx_fifo_size;
  #line 759 
  pkt_count /= 1400U;
  #line 760 
  pkt_count *= 2U;
  #line 762 
  i = 0;
  #line 762 
  while ((unsigned int)i < rx_cnt) {
    {
      #line 763 
      int __result = -22;
      #line 763 
      if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->stop_rx != (void (*)(void *, u32 ))0) {
        #line 763 
        (*(((priv->hw)->dma)->stop_rx))(priv->ioaddr,(unsigned int)i);
        #line 763 
        __result = 0;
      }
      #line 763 
      int tmp_2 = __result;
    }
    #line 762 
    i ++;
  }
  #line 765 
  ret = dev_set_promiscuity(priv->dev,1);
  #line 766 
  if (ret != 0) 
                #line 767 
                goto cleanup;
  #line 769 
  ret = dev_mc_add(priv->dev,(unsigned char *)(& paddr));
  #line 770 
  if (ret != 0) 
                #line 771 
                goto cleanup;
  #line 773 
  i = 0;
  #line 773 
  while ((unsigned int)i < pkt_count) {
    {
      #line 774 
      struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
      #line 776 
      attr.dst = (priv->dev)->dev_addr;
      #line 777 
      attr.dont_wait = 1;
      #line 778 
      attr.size = 1400;
      #line 780 
      ret = __stmmac_test_loopback(priv,& attr);
      #line 781 
      if (ret != 0) 
                    #line 782 
                    goto cleanup;
      #line 783 
      if (tpriv->ok != 0) 
                          #line 784 
                          break;
    }
    #line 773 
    i ++;
  }
  #line 788 
  msleep(200U);
  #line 790 
  i = 0;
  #line 790 
  while ((unsigned int)i < rx_cnt) {
    {
      #line 792 
      u32 tail;
      #line 791 
      struct stmmac_channel *ch = & priv->channel[i];
      #line 794 
      tail = (unsigned int)priv->rx_queue[i].dma_rx_phy + 8192U;
      {
        #line 797 
        int __result_0 = -22;
        #line 797 
        if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->set_rx_tail_ptr != (void (*)(void *, u32 , u32 ))0) {
          #line 797 
          (*(((priv->hw)->dma)->set_rx_tail_ptr))(priv->ioaddr,tail,(unsigned int)i);
          #line 797 
          __result_0 = 0;
        }
        #line 797 
        int tmp_4 = __result_0;
      }
      {
        #line 798 
        int __result_1 = -22;
        #line 798 
        if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->start_rx != (void (*)(void *, u32 ))0) {
          #line 798 
          (*(((priv->hw)->dma)->start_rx))(priv->ioaddr,(unsigned int)i);
          #line 798 
          __result_1 = 0;
        }
        #line 798 
        int tmp_6 = __result_1;
      }
      #line 800 
      local_bh_disable();
      #line 801 
      napi_reschedule(& ch->rx_napi);
      #line 802 
      local_bh_enable();
    }
    #line 790 
    i ++;
  }
  #line 805 
  ;
  #line 805 
  wait_for_completion_timeout(& tpriv->comp,msecs_to_jiffies(200U));
  #line 806 
  if (tpriv->ok != 0) 
                      #line 806 
                      ret = 0; else 
                                    #line 806 
                                    ret = -110;
  #line 808 
  cleanup: 
           #line 808 
  ;
  #line 809 
  dev_mc_del(priv->dev,(unsigned char *)(& paddr));
  #line 810 
  dev_set_promiscuity(priv->dev,-1);
  #line 811 
  dev_remove_pack(& tpriv->pt);
  #line 812 
  kfree((void *)tpriv);
  #line 813 
  return ret;
}

#line 816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_rss(struct stmmac_priv *priv)
{
  #line 818 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 820 
  if (priv->dma_cap.rssen == 0U || priv->rss.enable == 0) 
                                                          #line 821 
                                                          return -95;
  #line 823 
  attr.dst = (priv->dev)->dev_addr;
  #line 824 
  attr.exp_hash = 1U;
  #line 825 
  attr.sport = 801;
  #line 826 
  attr.dport = 291;
  #line 828 
  return __stmmac_test_loopback(priv,& attr);
}

#line 831  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_vlan_validate(struct sk_buff *skb, struct net_device *ndev, struct packet_type *pt, struct net_device *orig_ndev)
{
  #line 837 
  struct stmmachdr *shdr;
  #line 838 
  struct ethhdr *ehdr;
  #line 839 
  struct udphdr *uhdr;
  #line 840 
  struct iphdr *ihdr;
  #line 841 
  u16 proto;
  #line 836 
  struct stmmac_test_priv *tpriv = (struct stmmac_test_priv *)pt->af_packet_priv;
  #line 843 
  if (tpriv->double_vlan != 0) 
                               #line 843 
                               proto = (unsigned short)34984U; else 
                                                                    #line 843 
                                                                    proto = (unsigned short)33024U;
  #line 845 
  skb = skb_unshare(skb,2592U);
  #line 846 
  if (skb == (struct sk_buff *)0) 
                                  #line 847 
                                  goto out;
  #line 849 
  if (skb_linearize(skb) != 0) 
                               #line 850 
                               goto out;
  #line 851 
  if (skb_headlen(skb) <= 32U) 
                               #line 852 
                               goto out;
  #line 853 
  if (tpriv->vlan_id != 0) {
    #line 854 
    ;
    #line 854 
    if ((int)skb->vlan_proto != (int)__builtin_bswap16((unsigned short)((int)proto))) 
      #line 855 
      goto out;
    #line 856 
    if ((int)skb->vlan_tci != tpriv->vlan_id) {
      #line 858 
      tpriv->ok = 0;
      #line 859 
      complete(& tpriv->comp);
      #line 860 
      goto out;
    }
  }
  #line 864 
  ehdr = (struct ethhdr *)skb_mac_header(skb);
  #line 865 
  if (! ether_addr_equal_unaligned((u8 *)(& ehdr->h_dest),
                                   (tpriv->packet)->dst)) 
    #line 866 
    goto out;
  #line 868 
  ihdr = ip_hdr(skb);
  #line 869 
  if (tpriv->double_vlan != 0) {
    #line 870 
    ihdr = (struct iphdr *)(skb_network_header(skb) + 4U);
  }
  #line 871 
  if ((unsigned int)ihdr->protocol != 17U) 
                                           #line 872 
                                           goto out;
  #line 874 
  uhdr = (struct udphdr *)((u8 *)ihdr + (unsigned long)((int)ihdr->ihl * 4));
  #line 875 
  ;
  #line 875 
  if ((int)uhdr->dest != (int)__builtin_bswap16((unsigned short)((int)((unsigned short)(tpriv->packet)->dport)))) 
    #line 876 
    goto out;
  #line 878 
  shdr = (struct stmmachdr *)((u8 *)uhdr + 8UL);
  #line 879 
  if (shdr->magic != 12528731361202843102ULL) 
                                              #line 880 
                                              goto out;
  #line 882 
  tpriv->ok = 1;
  #line 883 
  complete(& tpriv->comp);
  #line 885 
  out: 
       #line 885 
  ;
  #line 886 
  kfree_skb(skb);
  #line 887 
  return 0;
}

#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int __stmmac_test_vlanfilt(struct stmmac_priv *priv)
{
  #line 893 
  struct stmmac_test_priv *tpriv;
  #line 895 
  int i;
  #line 892 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 894 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 895 
  int ret = 0;
  #line 897 
  tpriv = (struct stmmac_test_priv *)kzalloc(184UL,3264U);
  #line 898 
  if (tpriv == (struct stmmac_test_priv *)0) 
                                             #line 899 
                                             return -12;
  #line 901 
  tpriv->ok = 0;
  #line 902 
  __init_completion(& tpriv->comp);
  #line 904 
  tpriv->pt.type = (unsigned short)8U;
  #line 905 
  tpriv->pt.func = & stmmac_test_vlan_validate;
  #line 906 
  tpriv->pt.dev = priv->dev;
  #line 907 
  tpriv->pt.af_packet_priv = (void *)tpriv;
  #line 908 
  tpriv->packet = & attr;
  #line 915 
  tpriv->vlan_id = 291;
  #line 916 
  dev_add_pack(& tpriv->pt);
  #line 918 
  ret = vlan_vid_add(priv->dev,(unsigned short)129,(unsigned short)((int)((unsigned short)tpriv->vlan_id)));
  #line 919 
  if (ret != 0) 
                #line 920 
                goto cleanup;
  #line 922 
  i = 0;
  #line 922 
  while (i <= 3) {
    {
      #line 923 
      attr.vlan = 1;
      #line 924 
      attr.vlan_id_out = tpriv->vlan_id + i;
      #line 925 
      attr.dst = (priv->dev)->dev_addr;
      #line 926 
      attr.sport = 9;
      #line 927 
      attr.dport = 9;
      #line 929 
      skb = stmmac_test_get_udp_skb(priv,& attr);
      #line 930 
      if (skb == (struct sk_buff *)0) {
        #line 931 
        ret = -12;
        #line 932 
        goto vlan_del;
      }
      #line 935 
      skb_set_queue_mapping(skb,(unsigned short)0);
      #line 936 
      ret = dev_queue_xmit(skb);
      #line 937 
      if (ret != 0) 
                    #line 938 
                    goto vlan_del;
      #line 940 
      ;
      #line 940 
      wait_for_completion_timeout(& tpriv->comp,msecs_to_jiffies(200U));
      #line 941 
      if (tpriv->ok != 0) 
                          #line 941 
                          ret = 0; else 
                                        #line 941 
                                        ret = -110;
      #line 942 
      if (ret != 0 && i == 0) 
                              #line 943 
                              goto vlan_del;
      else 
        #line 944 
        if (ret == 0 && i != 0) {
          #line 945 
          ret = -22;
          #line 946 
          goto vlan_del;
        }
        else 
             #line 948 
             ret = 0;
      #line 951 
      tpriv->ok = 0;
    }
    #line 922 
    i ++;
  }
  #line 954 
  vlan_del: 
            #line 954 
  ;
  #line 955 
  vlan_vid_del(priv->dev,(unsigned short)129,(unsigned short)((int)((unsigned short)tpriv->vlan_id)));
  #line 956 
  cleanup: 
           #line 956 
  ;
  #line 957 
  dev_remove_pack(& tpriv->pt);
  #line 958 
  kfree((void *)tpriv);
  #line 959 
  return ret;
}

#line 962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_vlanfilt(struct stmmac_priv *priv)
{
  #line 964 
  if (priv->dma_cap.vlhash == 0U) 
                                  #line 965 
                                  return -95;
  #line 967 
  return __stmmac_test_vlanfilt(priv);
}

#line 970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_vlanfilt_perfect(struct stmmac_priv *priv)
{
  #line 972 
  int ret;
  #line 972 
  int prev_cap = (int)priv->dma_cap.vlhash;
  #line 974 
  if (((priv->dev)->features & 512ULL) == 0ULL) 
                                                #line 975 
                                                return -95;
  #line 977 
  priv->dma_cap.vlhash = 0U;
  #line 978 
  ret = __stmmac_test_vlanfilt(priv);
  #line 979 
  priv->dma_cap.vlhash = (unsigned int)prev_cap;
  #line 981 
  return ret;
}

#line 984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int __stmmac_test_dvlanfilt(struct stmmac_priv *priv)
{
  #line 987 
  struct stmmac_test_priv *tpriv;
  #line 989 
  int i;
  #line 986 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 988 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 989 
  int ret = 0;
  #line 991 
  tpriv = (struct stmmac_test_priv *)kzalloc(184UL,3264U);
  #line 992 
  if (tpriv == (struct stmmac_test_priv *)0) 
                                             #line 993 
                                             return -12;
  #line 995 
  tpriv->ok = 0;
  #line 996 
  tpriv->double_vlan = 1;
  #line 997 
  __init_completion(& tpriv->comp);
  #line 999 
  tpriv->pt.type = (unsigned short)129U;
  #line 1000 
  tpriv->pt.func = & stmmac_test_vlan_validate;
  #line 1001 
  tpriv->pt.dev = priv->dev;
  #line 1002 
  tpriv->pt.af_packet_priv = (void *)tpriv;
  #line 1003 
  tpriv->packet = & attr;
  #line 1010 
  tpriv->vlan_id = 291;
  #line 1011 
  dev_add_pack(& tpriv->pt);
  #line 1013 
  ret = vlan_vid_add(priv->dev,(unsigned short)43144,(unsigned short)((int)((unsigned short)tpriv->vlan_id)));
  #line 1014 
  if (ret != 0) 
                #line 1015 
                goto cleanup;
  #line 1017 
  i = 0;
  #line 1017 
  while (i <= 3) {
    {
      #line 1018 
      attr.vlan = 2;
      #line 1019 
      attr.vlan_id_out = tpriv->vlan_id + i;
      #line 1020 
      attr.dst = (priv->dev)->dev_addr;
      #line 1021 
      attr.sport = 9;
      #line 1022 
      attr.dport = 9;
      #line 1024 
      skb = stmmac_test_get_udp_skb(priv,& attr);
      #line 1025 
      if (skb == (struct sk_buff *)0) {
        #line 1026 
        ret = -12;
        #line 1027 
        goto vlan_del;
      }
      #line 1030 
      skb_set_queue_mapping(skb,(unsigned short)0);
      #line 1031 
      ret = dev_queue_xmit(skb);
      #line 1032 
      if (ret != 0) 
                    #line 1033 
                    goto vlan_del;
      #line 1035 
      ;
      #line 1035 
      wait_for_completion_timeout(& tpriv->comp,msecs_to_jiffies(200U));
      #line 1036 
      if (tpriv->ok != 0) 
                          #line 1036 
                          ret = 0; else 
                                        #line 1036 
                                        ret = -110;
      #line 1037 
      if (ret != 0 && i == 0) 
                              #line 1038 
                              goto vlan_del;
      else 
        #line 1039 
        if (ret == 0 && i != 0) {
          #line 1040 
          ret = -22;
          #line 1041 
          goto vlan_del;
        }
        else 
             #line 1043 
             ret = 0;
      #line 1046 
      tpriv->ok = 0;
    }
    #line 1017 
    i ++;
  }
  #line 1049 
  vlan_del: 
            #line 1049 
  ;
  #line 1050 
  vlan_vid_del(priv->dev,(unsigned short)43144,(unsigned short)((int)((unsigned short)tpriv->vlan_id)));
  #line 1051 
  cleanup: 
           #line 1051 
  ;
  #line 1052 
  dev_remove_pack(& tpriv->pt);
  #line 1053 
  kfree((void *)tpriv);
  #line 1054 
  return ret;
}

#line 1057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_dvlanfilt(struct stmmac_priv *priv)
{
  #line 1059 
  if (priv->dma_cap.vlhash == 0U) 
                                  #line 1060 
                                  return -95;
  #line 1062 
  return __stmmac_test_dvlanfilt(priv);
}

#line 1065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_dvlanfilt_perfect(struct stmmac_priv *priv)
{
  #line 1067 
  int ret;
  #line 1067 
  int prev_cap = (int)priv->dma_cap.vlhash;
  #line 1069 
  if (((priv->dev)->features & 70368744177664ULL) == 0ULL) 
                                                           #line 1070 
                                                           return -95;
  #line 1072 
  priv->dma_cap.vlhash = 0U;
  #line 1073 
  ret = __stmmac_test_dvlanfilt(priv);
  #line 1074 
  priv->dma_cap.vlhash = (unsigned int)prev_cap;
  #line 1076 
  return ret;
}

#line 1080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_rxp(struct stmmac_priv *priv)
{
  #line 1139 
  int __result;
  #line 1085 
  struct tc_action **actions;
  #line 1085 
  struct tc_action *act;
  #line 1086 
  struct tc_u32_sel *sel;
  #line 1087 
  struct tcf_exts *exts;
  #line 1088 
  int ret;
  #line 1088 
  int i;
  #line 1082 
  unsigned char addr[6U] = {(unsigned char)222U, (unsigned char)173U, (unsigned char)190U, (unsigned char)239U, (unsigned char)0U, (unsigned char)0U};
  #line 1083 
  struct tc_cls_u32_offload cls_u32 = {.common = {.chain_index = 0U, .protocol = (unsigned short)0, .prio = 0U, .extack = (struct netlink_ext_ack *)0}, .command = 0, .__anonCompField_tc_cls_u32_offload_191 = {.knode = {.exts = (struct tcf_exts *)0, .res = (struct tcf_result *)0, .sel = (struct tc_u32_sel *)0, .handle = 0U, .val = 0U, .mask = 0U, .link_handle = 0U, .fshift = (unsigned char)0}}};
  #line 1084 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 1088 
  int nk = 1;
  #line 1090 
  if (! tc_can_offload(priv->dev)) 
                                   #line 1091 
                                   return -95;
  #line 1092 
  if (priv->dma_cap.frpsel == 0U) 
                                  #line 1093 
                                  return -95;
  #line 1095 
  sel = (struct tc_u32_sel *)kzalloc(((unsigned long)nk + 1UL) * 16UL,3264U);
  #line 1096 
  if (sel == (struct tc_u32_sel *)0) 
                                     #line 1097 
                                     return -12;
  #line 1099 
  exts = (struct tcf_exts *)kzalloc(32UL,3264U);
  #line 1100 
  if (exts == (struct tcf_exts *)0) {
    #line 1101 
    ret = -12;
    #line 1102 
    goto cleanup_sel;
  }
  #line 1105 
  actions = (struct tc_action **)kzalloc((unsigned long)nk * 8UL,3264U);
  #line 1106 
  if (actions == (struct tc_action **)0) {
    #line 1107 
    ret = -12;
    #line 1108 
    goto cleanup_exts;
  }
  #line 1111 
  act = (struct tc_action *)kzalloc((unsigned long)nk * 256UL,3264U);
  #line 1112 
  if (act == (struct tc_action *)0) {
    #line 1113 
    ret = -12;
    #line 1114 
    goto cleanup_actions;
  }
  #line 1117 
  cls_u32.command = TC_CLSU32_NEW_KNODE;
  #line 1118 
  cls_u32.common.chain_index = 0U;
  #line 1119 
  cls_u32.common.protocol = (unsigned short)768U;
  #line 1120 
  cls_u32.__anonCompField_tc_cls_u32_offload_191.knode.exts = exts;
  #line 1121 
  cls_u32.__anonCompField_tc_cls_u32_offload_191.knode.sel = sel;
  #line 1122 
  cls_u32.__anonCompField_tc_cls_u32_offload_191.knode.handle = 291U;
  #line 1124 
  exts->nr_actions = nk;
  #line 1125 
  exts->actions = actions;
  #line 1126 
  i = 0;
  #line 1126 
  while (i < nk) {
    {
      #line 1127 
      struct tcf_gact *gact = (struct tcf_gact *)(act + (unsigned long)i);
      #line 1129 
      *(actions + (unsigned long)i) = act + (unsigned long)i;
      #line 1130 
      gact->common.tcfa_action = 2;
    }
    #line 1126 
    i ++;
  }
  #line 1133 
  sel->nkeys = (unsigned char)nk;
  #line 1134 
  sel->offshift = (unsigned char)0U;
  #line 1135 
  sel->keys[0].off = 6;
  #line 1136 
  sel->keys[0].val = 4022250974U;
  #line 1137 
  sel->keys[0].mask = 4294967295U;
  #line 1139 
  __result = -22;
  #line 1139 
  if ((priv->hw)->tc != (struct stmmac_tc_ops *)0 && ((priv->hw)->tc)->setup_cls_u32 != (int (*)(struct stmmac_priv *, struct tc_cls_u32_offload *))0) 
    #line 1139 
    __result = (*(((priv->hw)->tc)->setup_cls_u32))(priv,& cls_u32);
  #line 1139 
  ret = __result;
  #line 1140 
  if (ret != 0) 
                #line 1141 
                goto cleanup_act;
  #line 1143 
  attr.dst = (priv->dev)->dev_addr;
  #line 1144 
  attr.src = (unsigned char *)(& addr);
  #line 1146 
  ret = __stmmac_test_loopback(priv,& attr);
  #line 1147 
  if (ret != 0) 
                #line 1147 
                ret = 0; else 
                              #line 1147 
                              ret = -22;
  #line 1149 
  cls_u32.command = TC_CLSU32_DELETE_KNODE;
  {
    #line 1150 
    int __result_0 = -22;
    #line 1150 
    if ((priv->hw)->tc != (struct stmmac_tc_ops *)0 && ((priv->hw)->tc)->setup_cls_u32 != (int (*)(struct stmmac_priv *, struct tc_cls_u32_offload *))0) 
      #line 1150 
      __result_0 = (*(((priv->hw)->tc)->setup_cls_u32))(priv,& cls_u32);
    #line 1150 
    int tmp_5 = __result_0;
  }
  #line 1152 
  cleanup_act: 
               #line 1152 
  ;
  #line 1153 
  kfree((void *)act);
  #line 1154 
  cleanup_actions: 
                   #line 1154 
  ;
  #line 1155 
  kfree((void *)actions);
  #line 1156 
  cleanup_exts: 
                #line 1156 
  ;
  #line 1157 
  kfree((void *)exts);
  #line 1158 
  cleanup_sel: 
               #line 1158 
  ;
  #line 1159 
  kfree((void *)sel);
  #line 1160 
  return ret;
}

#line 1169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_desc_sai(struct stmmac_priv *priv)
{
  #line 1173 
  int ret;
  #line 1171 
  unsigned char src[6U] = {(unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U};
  #line 1172 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 1175 
  if (priv->dma_cap.vlins == 0U) 
                                 #line 1176 
                                 return -95;
  #line 1178 
  attr.remove_sa = 1;
  #line 1179 
  attr.sarc = 1;
  #line 1180 
  attr.src = (unsigned char *)(& src);
  #line 1181 
  attr.dst = (priv->dev)->dev_addr;
  #line 1183 
  priv->sarc_type = 1U;
  #line 1185 
  ret = __stmmac_test_loopback(priv,& attr);
  #line 1187 
  priv->sarc_type = 0U;
  #line 1188 
  return ret;
}

#line 1191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_desc_sar(struct stmmac_priv *priv)
{
  #line 1195 
  int ret;
  #line 1193 
  unsigned char src[6U] = {(unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U};
  #line 1194 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 1197 
  if (priv->dma_cap.vlins == 0U) 
                                 #line 1198 
                                 return -95;
  #line 1200 
  attr.sarc = 1;
  #line 1201 
  attr.src = (unsigned char *)(& src);
  #line 1202 
  attr.dst = (priv->dev)->dev_addr;
  #line 1204 
  priv->sarc_type = 2U;
  #line 1206 
  ret = __stmmac_test_loopback(priv,& attr);
  #line 1208 
  priv->sarc_type = 0U;
  #line 1209 
  return ret;
}

#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_reg_sai(struct stmmac_priv *priv)
{
  #line 1226 
  int __result;
  #line 1216 
  int ret;
  #line 1214 
  unsigned char src[6U] = {(unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U};
  #line 1215 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 1218 
  if (priv->dma_cap.vlins == 0U) 
                                 #line 1219 
                                 return -95;
  #line 1221 
  attr.remove_sa = 1;
  #line 1222 
  attr.sarc = 1;
  #line 1223 
  attr.src = (unsigned char *)(& src);
  #line 1224 
  attr.dst = (priv->dev)->dev_addr;
  #line 1226 
  __result = -22;
  #line 1226 
  if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->sarc_configure != (void (*)(void *, int ))0) {
    #line 1226 
    (*(((priv->hw)->mac)->sarc_configure))(priv->ioaddr,2);
    #line 1226 
    __result = 0;
  }
  #line 1226 
  if (__result != 0) 
                     #line 1227 
                     return -95;
  #line 1229 
  ret = __stmmac_test_loopback(priv,& attr);
  {
    #line 1231 
    int __result_0 = -22;
    #line 1231 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->sarc_configure != (void (*)(void *, int ))0) {
      #line 1231 
      (*(((priv->hw)->mac)->sarc_configure))(priv->ioaddr,0);
      #line 1231 
      __result_0 = 0;
    }
    #line 1231 
    int tmp_2 = __result_0;
  }
  #line 1232 
  return ret;
}

#line 1235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_reg_sar(struct stmmac_priv *priv)
{
  #line 1248 
  int __result;
  #line 1239 
  int ret;
  #line 1237 
  unsigned char src[6U] = {(unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U};
  #line 1238 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 1241 
  if (priv->dma_cap.vlins == 0U) 
                                 #line 1242 
                                 return -95;
  #line 1244 
  attr.sarc = 1;
  #line 1245 
  attr.src = (unsigned char *)(& src);
  #line 1246 
  attr.dst = (priv->dev)->dev_addr;
  #line 1248 
  __result = -22;
  #line 1248 
  if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->sarc_configure != (void (*)(void *, int ))0) {
    #line 1248 
    (*(((priv->hw)->mac)->sarc_configure))(priv->ioaddr,3);
    #line 1248 
    __result = 0;
  }
  #line 1248 
  if (__result != 0) 
                     #line 1249 
                     return -95;
  #line 1251 
  ret = __stmmac_test_loopback(priv,& attr);
  {
    #line 1253 
    int __result_0 = -22;
    #line 1253 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->sarc_configure != (void (*)(void *, int ))0) {
      #line 1253 
      (*(((priv->hw)->mac)->sarc_configure))(priv->ioaddr,0);
      #line 1253 
      __result_0 = 0;
    }
    #line 1253 
    int tmp_2 = __result_0;
  }
  #line 1254 
  return ret;
}

#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_vlanoff_common(struct stmmac_priv *priv, bool svlan)
{
  #line 1260 
  struct stmmac_test_priv *tpriv;
  #line 1263 
  u16 proto;
  #line 1259 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 1261 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 1262 
  int ret = 0;
  #line 1265 
  if (priv->dma_cap.vlins == 0U) 
                                 #line 1266 
                                 return -95;
  #line 1268 
  tpriv = (struct stmmac_test_priv *)kzalloc(184UL,3264U);
  #line 1269 
  if (tpriv == (struct stmmac_test_priv *)0) 
                                             #line 1270 
                                             return -12;
  #line 1272 
  if ((int)svlan != 0) 
                       #line 1272 
                       proto = (unsigned short)34984U; else 
                                                            #line 1272 
                                                            proto = (unsigned short)33024U;
  #line 1274 
  tpriv->ok = 0;
  #line 1275 
  tpriv->double_vlan = (int)svlan;
  #line 1276 
  __init_completion(& tpriv->comp);
  #line 1278 
  if ((int)svlan != 0) 
                       #line 1278 
                       tpriv->pt.type = (unsigned short)129U; else 
                                                                   #line 1278 
                                                                   tpriv->pt.type = (unsigned short)8U;
  #line 1279 
  tpriv->pt.func = & stmmac_test_vlan_validate;
  #line 1280 
  tpriv->pt.dev = priv->dev;
  #line 1281 
  tpriv->pt.af_packet_priv = (void *)tpriv;
  #line 1282 
  tpriv->packet = & attr;
  #line 1283 
  tpriv->vlan_id = 291;
  #line 1284 
  dev_add_pack(& tpriv->pt);
  #line 1286 
  ;
  #line 1286 
  ;
  #line 1286 
  ret = vlan_vid_add(priv->dev,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)proto))),(unsigned short)((int)((unsigned short)tpriv->vlan_id)));
  #line 1287 
  if (ret != 0) 
                #line 1288 
                goto cleanup;
  #line 1290 
  attr.dst = (priv->dev)->dev_addr;
  #line 1292 
  skb = stmmac_test_get_udp_skb(priv,& attr);
  #line 1293 
  if (skb == (struct sk_buff *)0) {
    #line 1294 
    ret = -12;
    #line 1295 
    goto vlan_del;
  }
  #line 1298 
  ;
  #line 1298 
  ;
  #line 1298 
  __vlan_hwaccel_put_tag(skb,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)proto))),(unsigned short)((int)((unsigned short)tpriv->vlan_id)));
  #line 1299 
  skb->protocol = __builtin_bswap16((unsigned short)((int)proto));
  #line 1301 
  skb_set_queue_mapping(skb,(unsigned short)0);
  #line 1302 
  ret = dev_queue_xmit(skb);
  #line 1303 
  if (ret != 0) 
                #line 1304 
                goto vlan_del;
  #line 1306 
  ;
  #line 1306 
  wait_for_completion_timeout(& tpriv->comp,msecs_to_jiffies(200U));
  #line 1307 
  if (tpriv->ok != 0) 
                      #line 1307 
                      ret = 0; else 
                                    #line 1307 
                                    ret = -110;
  #line 1309 
  vlan_del: 
            #line 1309 
  ;
  #line 1310 
  ;
  #line 1310 
  ;
  #line 1310 
  vlan_vid_del(priv->dev,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)proto))),(unsigned short)((int)((unsigned short)tpriv->vlan_id)));
  #line 1311 
  cleanup: 
           #line 1311 
  ;
  #line 1312 
  dev_remove_pack(& tpriv->pt);
  #line 1313 
  kfree((void *)tpriv);
  #line 1314 
  return ret;
}

#line 1317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_vlanoff(struct stmmac_priv *priv)
{
  #line 1319 
  return stmmac_test_vlanoff_common(priv,(_Bool)0);
}

#line 1322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_svlanoff(struct stmmac_priv *priv)
{
  #line 1324 
  if (priv->dma_cap.dvlan == 0U) 
                                 #line 1325 
                                 return -95;
  #line 1326 
  return stmmac_test_vlanoff_common(priv,(_Bool)1);
}

#line 1330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int __stmmac_test_l3filt(struct stmmac_priv *priv, u32 dst, u32 src, u32 dst_mask, u32 src_mask)
{
  #line 1400 
  int __result_0;
  #line 1333 
  struct flow_dissector_key_ipv4_addrs key;
  #line 1333 
  struct flow_dissector_key_ipv4_addrs mask;
  #line 1336 
  struct flow_dissector *dissector;
  #line 1337 
  struct flow_cls_offload *cls;
  #line 1338 
  int ret;
  #line 1339 
  struct flow_rule *rule;
  #line 1334 
  unsigned long dummy_cookie = 3735928559UL;
  #line 1335 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 1338 
  int old_enable = 0;
  #line 1341 
  if (! tc_can_offload(priv->dev)) 
                                   #line 1342 
                                   return -95;
  #line 1343 
  if (priv->dma_cap.l3l4fnum == 0U) 
                                    #line 1344 
                                    return -95;
  #line 1345 
  if (priv->rss.enable != 0) {
    #line 1346 
    old_enable = priv->rss.enable;
    #line 1347 
    priv->rss.enable = 0;
    {
      #line 1348 
      int __result = -22;
      #line 1348 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->rss_configure != (int (*)(struct mac_device_info *, struct stmmac_rss *, u32 ))0) 
        #line 1348 
        __result = (*(((priv->hw)->mac)->rss_configure))(priv->hw,(struct stmmac_rss *)0,(priv->plat)->rx_queues_to_use);
      #line 1348 
      int tmp_2 = __result;
    }
  }
  #line 1352 
  dissector = (struct flow_dissector *)kzalloc(60UL,3264U);
  #line 1353 
  if (dissector == (struct flow_dissector *)0) {
    #line 1354 
    ret = -12;
    #line 1355 
    goto cleanup_rss;
  }
  #line 1358 
  dissector->used_keys |= 4U;
  #line 1359 
  dissector->offset[2] = (unsigned short)0U;
  #line 1361 
  cls = (struct flow_cls_offload *)kzalloc(80UL,3264U);
  #line 1362 
  if (cls == (struct flow_cls_offload *)0) {
    #line 1363 
    ret = -12;
    #line 1364 
    goto cleanup_dissector;
  }
  #line 1367 
  cls->common.chain_index = 0U;
  #line 1368 
  cls->command = FLOW_CLS_REPLACE;
  #line 1369 
  cls->cookie = dummy_cookie;
  #line 1371 
  rule = (struct flow_rule *)kzalloc(__ab_c_size(1UL,48UL,32UL),3264U);
  #line 1372 
  if (rule == (struct flow_rule *)0) {
    #line 1373 
    ret = -12;
    #line 1374 
    goto cleanup_cls;
  }
  #line 1377 
  rule->match.dissector = dissector;
  #line 1378 
  rule->match.key = (void *)(& key);
  #line 1379 
  rule->match.mask = (void *)(& mask);
  #line 1381 
  key.src = __builtin_bswap32(src);
  #line 1382 
  key.dst = __builtin_bswap32(dst);
  #line 1383 
  mask.src = src_mask;
  #line 1384 
  mask.dst = dst_mask;
  #line 1386 
  cls->rule = rule;
  #line 1388 
  rule->action.entries[0].id = FLOW_ACTION_DROP;
  #line 1389 
  rule->action.num_entries = 1U;
  #line 1391 
  attr.dst = (priv->dev)->dev_addr;
  #line 1392 
  attr.ip_dst = dst;
  #line 1393 
  attr.ip_src = src;
  #line 1396 
  ret = __stmmac_test_loopback(priv,& attr);
  #line 1397 
  if (ret != 0) 
                #line 1398 
                goto cleanup_rule;
  #line 1400 
  __result_0 = -22;
  #line 1400 
  if ((priv->hw)->tc != (struct stmmac_tc_ops *)0 && ((priv->hw)->tc)->setup_cls != (int (*)(struct stmmac_priv *, struct flow_cls_offload *))0) 
    #line 1400 
    __result_0 = (*(((priv->hw)->tc)->setup_cls))(priv,cls);
  #line 1400 
  ret = __result_0;
  #line 1401 
  if (ret != 0) 
                #line 1402 
                goto cleanup_rule;
  #line 1405 
  ret = __stmmac_test_loopback(priv,& attr);
  #line 1406 
  if (ret != 0) 
                #line 1406 
                ret = 0; else 
                              #line 1406 
                              ret = -22;
  #line 1408 
  cls->command = FLOW_CLS_DESTROY;
  {
    #line 1409 
    int __result_1 = -22;
    #line 1409 
    if ((priv->hw)->tc != (struct stmmac_tc_ops *)0 && ((priv->hw)->tc)->setup_cls != (int (*)(struct stmmac_priv *, struct flow_cls_offload *))0) 
      #line 1409 
      __result_1 = (*(((priv->hw)->tc)->setup_cls))(priv,cls);
    #line 1409 
    int tmp_5 = __result_1;
  }
  #line 1410 
  cleanup_rule: 
                #line 1410 
  ;
  #line 1411 
  kfree((void *)rule);
  #line 1412 
  cleanup_cls: 
               #line 1412 
  ;
  #line 1413 
  kfree((void *)cls);
  #line 1414 
  cleanup_dissector: 
                     #line 1414 
  ;
  #line 1415 
  kfree((void *)dissector);
  #line 1416 
  cleanup_rss: 
               #line 1416 
  ;
  #line 1417 
  if (old_enable != 0) {
    #line 1418 
    priv->rss.enable = old_enable;
    {
      #line 1419 
      int __result_2 = -22;
      #line 1419 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->rss_configure != (int (*)(struct mac_device_info *, struct stmmac_rss *, u32 ))0) 
        #line 1419 
        __result_2 = (*(((priv->hw)->mac)->rss_configure))(priv->hw,& priv->rss,(priv->plat)->rx_queues_to_use);
      #line 1419 
      int tmp_7 = __result_2;
    }
  }
  #line 1423 
  return ret;
}

#line 1433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_l3filt_da(struct stmmac_priv *priv)
{
  #line 1435 
  u32 addr = 270544960U;
  #line 1437 
  return __stmmac_test_l3filt(priv,addr,0U,4294967295U,0U);
}

#line 1440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_l3filt_sa(struct stmmac_priv *priv)
{
  #line 1442 
  u32 addr = 270544960U;
  #line 1444 
  return __stmmac_test_l3filt(priv,0U,addr,0U,4294967295U);
}

#line 1448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int __stmmac_test_l4filt(struct stmmac_priv *priv, u32 dst, u32 src, u32 dst_mask, u32 src_mask, bool udp)
{
  #line 1530 
  int __result_0;
  #line 1454 
  struct __anonstruct_keys_9857 keys;
  #line 1458 
  struct __anonstruct_masks_9858 masks;
  #line 1461 
  struct flow_dissector *dissector;
  #line 1462 
  struct flow_cls_offload *cls;
  #line 1463 
  int ret;
  #line 1464 
  struct flow_rule *rule;
  #line 1459 
  unsigned long dummy_cookie = 3735928559UL;
  #line 1460 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 1463 
  int old_enable = 0;
  #line 1466 
  if (! tc_can_offload(priv->dev)) 
                                   #line 1467 
                                   return -95;
  #line 1468 
  if (priv->dma_cap.l3l4fnum == 0U) 
                                    #line 1469 
                                    return -95;
  #line 1470 
  if (priv->rss.enable != 0) {
    #line 1471 
    old_enable = priv->rss.enable;
    #line 1472 
    priv->rss.enable = 0;
    {
      #line 1473 
      int __result = -22;
      #line 1473 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->rss_configure != (int (*)(struct mac_device_info *, struct stmmac_rss *, u32 ))0) 
        #line 1473 
        __result = (*(((priv->hw)->mac)->rss_configure))(priv->hw,(struct stmmac_rss *)0,(priv->plat)->rx_queues_to_use);
      #line 1473 
      int tmp_2 = __result;
    }
  }
  #line 1477 
  dissector = (struct flow_dissector *)kzalloc(60UL,3264U);
  #line 1478 
  if (dissector == (struct flow_dissector *)0) {
    #line 1479 
    ret = -12;
    #line 1480 
    goto cleanup_rss;
  }
  #line 1483 
  dissector->used_keys |= 2U;
  #line 1484 
  dissector->used_keys |= 16U;
  #line 1485 
  dissector->offset[1] = (unsigned short)0U;
  #line 1486 
  dissector->offset[4] = (unsigned short)4U;
  #line 1488 
  cls = (struct flow_cls_offload *)kzalloc(80UL,3264U);
  #line 1489 
  if (cls == (struct flow_cls_offload *)0) {
    #line 1490 
    ret = -12;
    #line 1491 
    goto cleanup_dissector;
  }
  #line 1494 
  cls->common.chain_index = 0U;
  #line 1495 
  cls->command = FLOW_CLS_REPLACE;
  #line 1496 
  cls->cookie = dummy_cookie;
  #line 1498 
  rule = (struct flow_rule *)kzalloc(__ab_c_size(1UL,48UL,32UL),3264U);
  #line 1499 
  if (rule == (struct flow_rule *)0) {
    #line 1500 
    ret = -12;
    #line 1501 
    goto cleanup_cls;
  }
  #line 1504 
  rule->match.dissector = dissector;
  #line 1505 
  rule->match.key = (void *)(& keys);
  #line 1506 
  rule->match.mask = (void *)(& masks);
  #line 1508 
  if ((int)udp != 0) 
                     #line 1508 
                     keys.bkey.ip_proto = (unsigned char)17U; else 
                                                                   #line 1508 
                                                                   keys.bkey.ip_proto = (unsigned char)6U;
  #line 1509 
  keys.key.__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_9284_77.src = __builtin_bswap16((unsigned short)((int)((unsigned short)src)));
  #line 1510 
  keys.key.__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_9284_77.dst = __builtin_bswap16((unsigned short)((int)((unsigned short)dst)));
  #line 1511 
  masks.mask.__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_9284_77.src = (unsigned short)src_mask;
  #line 1512 
  masks.mask.__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_9284_77.dst = (unsigned short)dst_mask;
  #line 1514 
  cls->rule = rule;
  #line 1516 
  rule->action.entries[0].id = FLOW_ACTION_DROP;
  #line 1517 
  rule->action.num_entries = 1U;
  #line 1519 
  attr.dst = (priv->dev)->dev_addr;
  #line 1520 
  attr.tcp = ! udp;
  #line 1521 
  attr.sport = (int)src;
  #line 1522 
  attr.dport = (int)dst;
  #line 1523 
  attr.ip_dst = 0U;
  #line 1526 
  ret = __stmmac_test_loopback(priv,& attr);
  #line 1527 
  if (ret != 0) 
                #line 1528 
                goto cleanup_rule;
  #line 1530 
  __result_0 = -22;
  #line 1530 
  if ((priv->hw)->tc != (struct stmmac_tc_ops *)0 && ((priv->hw)->tc)->setup_cls != (int (*)(struct stmmac_priv *, struct flow_cls_offload *))0) 
    #line 1530 
    __result_0 = (*(((priv->hw)->tc)->setup_cls))(priv,cls);
  #line 1530 
  ret = __result_0;
  #line 1531 
  if (ret != 0) 
                #line 1532 
                goto cleanup_rule;
  #line 1535 
  ret = __stmmac_test_loopback(priv,& attr);
  #line 1536 
  if (ret != 0) 
                #line 1536 
                ret = 0; else 
                              #line 1536 
                              ret = -22;
  #line 1538 
  cls->command = FLOW_CLS_DESTROY;
  {
    #line 1539 
    int __result_1 = -22;
    #line 1539 
    if ((priv->hw)->tc != (struct stmmac_tc_ops *)0 && ((priv->hw)->tc)->setup_cls != (int (*)(struct stmmac_priv *, struct flow_cls_offload *))0) 
      #line 1539 
      __result_1 = (*(((priv->hw)->tc)->setup_cls))(priv,cls);
    #line 1539 
    int tmp_5 = __result_1;
  }
  #line 1540 
  cleanup_rule: 
                #line 1540 
  ;
  #line 1541 
  kfree((void *)rule);
  #line 1542 
  cleanup_cls: 
               #line 1542 
  ;
  #line 1543 
  kfree((void *)cls);
  #line 1544 
  cleanup_dissector: 
                     #line 1544 
  ;
  #line 1545 
  kfree((void *)dissector);
  #line 1546 
  cleanup_rss: 
               #line 1546 
  ;
  #line 1547 
  if (old_enable != 0) {
    #line 1548 
    priv->rss.enable = old_enable;
    {
      #line 1549 
      int __result_2 = -22;
      #line 1549 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->rss_configure != (int (*)(struct mac_device_info *, struct stmmac_rss *, u32 ))0) 
        #line 1549 
        __result_2 = (*(((priv->hw)->mac)->rss_configure))(priv->hw,& priv->rss,(priv->plat)->rx_queues_to_use);
      #line 1549 
      int tmp_7 = __result_2;
    }
  }
  #line 1553 
  return ret;
}

#line 1563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_l4filt_da_tcp(struct stmmac_priv *priv)
{
  #line 1565 
  u16 dummy_port = (unsigned short)291U;
  #line 1567 
  return __stmmac_test_l4filt(priv,(unsigned int)dummy_port,0U,4294967295U,0U,
                           (_Bool)0);
}

#line 1570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_l4filt_sa_tcp(struct stmmac_priv *priv)
{
  #line 1572 
  u16 dummy_port = (unsigned short)291U;
  #line 1574 
  return __stmmac_test_l4filt(priv,0U,(unsigned int)dummy_port,0U,4294967295U,
                           (_Bool)0);
}

#line 1577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_l4filt_da_udp(struct stmmac_priv *priv)
{
  #line 1579 
  u16 dummy_port = (unsigned short)291U;
  #line 1581 
  return __stmmac_test_l4filt(priv,(unsigned int)dummy_port,0U,4294967295U,0U,
                           (_Bool)1);
}

#line 1584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_l4filt_sa_udp(struct stmmac_priv *priv)
{
  #line 1586 
  u16 dummy_port = (unsigned short)291U;
  #line 1588 
  return __stmmac_test_l4filt(priv,0U,(unsigned int)dummy_port,0U,4294967295U,
                           (_Bool)1);
}

#line 1591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_arp_validate(struct sk_buff *skb, struct net_device *ndev, struct packet_type *pt, struct net_device *orig_ndev)
{
  #line 1597 
  struct ethhdr *ehdr;
  #line 1598 
  struct arphdr *ahdr;
  #line 1596 
  struct stmmac_test_priv *tpriv = (struct stmmac_test_priv *)pt->af_packet_priv;
  #line 1600 
  ehdr = (struct ethhdr *)skb_mac_header(skb);
  #line 1601 
  if (! ether_addr_equal_unaligned((u8 *)(& ehdr->h_dest),
                                   (tpriv->packet)->src)) 
    #line 1602 
    goto out;
  #line 1604 
  ahdr = arp_hdr(skb);
  #line 1605 
  if ((unsigned int)ahdr->ar_op != 512U) 
                                         #line 1606 
                                         goto out;
  #line 1608 
  tpriv->ok = 1;
  #line 1609 
  complete(& tpriv->comp);
  #line 1610 
  out: 
       #line 1610 
  ;
  #line 1611 
  kfree_skb(skb);
  #line 1612 
  return 0;
}

#line 1615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_arpoffload(struct stmmac_priv *priv)
{
  #line 1654 
  int __result;
  #line 1620 
  struct stmmac_test_priv *tpriv;
  #line 1624 
  int ret;
  #line 1617 
  unsigned char src[6U] = {(unsigned char)1U, (unsigned char)2U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U};
  #line 1618 
  unsigned char dst[6U] = {(unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  #line 1619 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 1621 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 1622 
  u32 ip_addr = 3735931646U;
  #line 1623 
  u32 ip_src = 3735928559U;
  #line 1626 
  if (priv->dma_cap.arpoffsel == 0U) 
                                     #line 1627 
                                     return -95;
  #line 1629 
  tpriv = (struct stmmac_test_priv *)kzalloc(184UL,3264U);
  #line 1630 
  if (tpriv == (struct stmmac_test_priv *)0) 
                                             #line 1631 
                                             return -12;
  #line 1633 
  tpriv->ok = 0;
  #line 1634 
  __init_completion(& tpriv->comp);
  #line 1636 
  tpriv->pt.type = (unsigned short)1544U;
  #line 1637 
  tpriv->pt.func = & stmmac_test_arp_validate;
  #line 1638 
  tpriv->pt.dev = priv->dev;
  #line 1639 
  tpriv->pt.af_packet_priv = (void *)tpriv;
  #line 1640 
  tpriv->packet = & attr;
  #line 1641 
  dev_add_pack(& tpriv->pt);
  #line 1643 
  attr.src = (unsigned char *)(& src);
  #line 1644 
  attr.ip_src = ip_src;
  #line 1645 
  attr.dst = (unsigned char *)(& dst);
  #line 1646 
  attr.ip_dst = ip_addr;
  #line 1648 
  skb = stmmac_test_get_arp_skb(priv,& attr);
  #line 1649 
  if (skb == (struct sk_buff *)0) {
    #line 1650 
    ret = -12;
    #line 1651 
    goto cleanup;
  }
  #line 1654 
  __result = -22;
  #line 1654 
  if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_arp_offload != (void (*)(struct mac_device_info *, bool , u32 ))0) {
    #line 1654 
    (*(((priv->hw)->mac)->set_arp_offload))(priv->hw,(_Bool)1,ip_addr);
    #line 1654 
    __result = 0;
  }
  #line 1654 
  ret = __result;
  #line 1655 
  if (ret != 0) 
                #line 1656 
                goto cleanup;
  #line 1658 
  ret = dev_set_promiscuity(priv->dev,1);
  #line 1659 
  if (ret != 0) 
                #line 1660 
                goto cleanup;
  #line 1662 
  skb_set_queue_mapping(skb,(unsigned short)0);
  #line 1663 
  ret = dev_queue_xmit(skb);
  #line 1664 
  if (ret != 0) 
                #line 1665 
                goto cleanup_promisc;
  #line 1667 
  ;
  #line 1667 
  wait_for_completion_timeout(& tpriv->comp,msecs_to_jiffies(200U));
  #line 1668 
  if (tpriv->ok != 0) 
                      #line 1668 
                      ret = 0; else 
                                    #line 1668 
                                    ret = -110;
  #line 1670 
  cleanup_promisc: 
                   #line 1670 
  ;
  #line 1671 
  dev_set_promiscuity(priv->dev,-1);
  #line 1672 
  cleanup: 
           #line 1672 
  ;
  {
    #line 1673 
    int __result_0 = -22;
    #line 1673 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_arp_offload != (void (*)(struct mac_device_info *, bool , u32 ))0) {
      #line 1673 
      (*(((priv->hw)->mac)->set_arp_offload))(priv->hw,(_Bool)0,0U);
      #line 1673 
      __result_0 = 0;
    }
    #line 1673 
    int tmp_2 = __result_0;
  }
  #line 1674 
  dev_remove_pack(& tpriv->pt);
  #line 1675 
  kfree((void *)tpriv);
  #line 1676 
  return ret;
}

#line 1679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int __stmmac_test_jumbo(struct stmmac_priv *priv, u16 queue)
{
  #line 1681 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 1682 
  int size = (int)priv->dma_buf_sz;
  #line 1684 
  attr.dst = (priv->dev)->dev_addr;
  #line 1685 
  attr.max_size = size + -4;
  #line 1686 
  attr.queue_mapping = queue;
  #line 1688 
  return __stmmac_test_loopback(priv,& attr);
}

#line 1691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_jumbo(struct stmmac_priv *priv)
{
  #line 1693 
  return __stmmac_test_jumbo(priv,(unsigned short)0);
}

#line 1696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_mjumbo(struct stmmac_priv *priv)
{
  #line 1698 
  u32 chan;
  #line 1699 
  int ret;
  #line 1698 
  u32 tx_cnt = (priv->plat)->tx_queues_to_use;
  #line 1701 
  if (tx_cnt <= 1U) 
                    #line 1702 
                    return -95;
  #line 1704 
  chan = 0U;
  #line 1704 
  while (chan < tx_cnt) {
    #line 1705 
    ret = __stmmac_test_jumbo(priv,(unsigned short)((int)((unsigned short)chan)));
    #line 1706 
    if (ret != 0) 
                  #line 1707 
                  return ret;
    #line 1704 
    chan ++;
  }
  #line 1710 
  return 0;
}

#line 1713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static int stmmac_test_sph(struct stmmac_priv *priv)
{
  #line 1715 
  unsigned long cnt_end;
  #line 1717 
  int ret;
  #line 1715 
  unsigned long cnt_start = priv->xstats.rx_split_hdr_pkt_n;
  #line 1716 
  struct stmmac_packet_attrs attr = {.vlan = 0, .vlan_id_in = 0, .vlan_id_out = 0, .src = (unsigned char *)0, .dst = (unsigned char *)0, .ip_src = 0U, .ip_dst = 0U, .tcp = 0, .sport = 0, .dport = 0, .exp_hash = 0U, .dont_wait = 0, .timeout = 0, .size = 0, .max_size = 0, .remove_sa = 0, .id = (unsigned char)0, .sarc = 0, .queue_mapping = (unsigned short)0};
  #line 1719 
  if (priv->sph == 0) 
                      #line 1720 
                      return -95;
  #line 1723 
  attr.dst = (priv->dev)->dev_addr;
  #line 1724 
  attr.tcp = 0;
  #line 1726 
  ret = __stmmac_test_loopback(priv,& attr);
  #line 1727 
  if (ret != 0) 
                #line 1728 
                return ret;
  #line 1730 
  cnt_end = priv->xstats.rx_split_hdr_pkt_n;
  #line 1731 
  if (cnt_end <= cnt_start) 
                            #line 1732 
                            return -22;
  #line 1735 
  cnt_start = cnt_end;
  #line 1737 
  attr.dst = (priv->dev)->dev_addr;
  #line 1738 
  attr.tcp = 1;
  #line 1740 
  ret = __stmmac_test_loopback(priv,& attr);
  #line 1741 
  if (ret != 0) 
                #line 1742 
                return ret;
  #line 1744 
  cnt_end = priv->xstats.rx_split_hdr_pkt_n;
  #line 1745 
  if (cnt_end <= cnt_start) 
                            #line 1746 
                            return -22;
  #line 1748 
  return 0;
}

#line 1759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
static struct stmmac_test stmmac_selftests[31U] = {{.name = {(char)'M', (char)'A', (char)'C', (char)' ', (char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 1, .fn = & stmmac_test_mac_loopback}, {.name = {(char)'P', (char)'H', (char)'Y', (char)' ', (char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .fn = & stmmac_test_phy_loopback}, {.name = {(char)'M', (char)'M', (char)'C', (char)' ', (char)'C', (char)'o', (char)'u', (char)'n', (char)'t', (char)'e', (char)'r', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_mmc}, {.name = {(char)'E', (char)'E', (char)'E', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_eee}, {.name = {(char)'H', (char)'a', (char)'s', (char)'h', (char)' ', (char)'F', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)' ', (char)'M', (char)'C', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_hfilt}, {.name = {(char)'P', (char)'e', (char)'r', (char)'f', (char)'e', (char)'c', (char)'t', (char)' ', (char)'F', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)' ', (char)'U', (char)'C', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_pfilt}, {.name = {(char)'M', (char)'C', (char)' ', (char)'F', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_mcfilt}, {.name = {(char)'U', (char)'C', (char)' ', (char)'F', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_ucfilt}, {.name = {(char)'F', (char)'l', (char)'o', (char)'w', (char)' ', (char)'C', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_flowctrl}, {.name = {(char)'R', (char)'S', (char)'S', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_rss}, {.name = {(char)'V', (char)'L', (char)'A', (char)'N', (char)' ', (char)'F', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'i', (char)'n', (char)'g', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_vlanfilt}, {.name = {(char)'V', (char)'L', (char)'A', (char)'N', (char)' ', (char)'F', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'i', (char)'n', (char)'g', (char)' ', (char)'(', (char)'p', (char)'e', (char)'r', (char)'f', (char)')', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_vlanfilt_perfect}, {.name = {(char)'D', (char)'o', (char)'u', (char)'b', (char)'l', (char)'e', (char)' ', (char)'V', (char)'L', (char)'A', (char)'N', (char)' ', (char)'F', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_dvlanfilt}, {.name = {(char)'D', (char)'o', (char)'u', (char)'b', (char)'l', (char)'e', (char)' ', (char)'V', (char)'L', (char)'A', (char)'N', (char)' ', (char)'F', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)' ', (char)'(', (char)'p', (char)'e', (char)'r', (char)'f', (char)')', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_dvlanfilt_perfect}, {.name = {(char)'F', (char)'l', (char)'e', (char)'x', (char)'i', (char)'b', (char)'l', (char)'e', (char)' ', (char)'R', (char)'X', (char)' ', (char)'P', (char)'a', (char)'r', (char)'s', (char)'e', (char)'r', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_rxp}, {.name = {(char)'S', (char)'A', (char)' ', (char)'I', (char)'n', (char)'s', (char)'e', (char)'r', (char)'t', (char)'i', (char)'o', (char)'n', (char)' ', (char)'(', (char)'d', (char)'e', (char)'s', (char)'c', (char)')', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_desc_sai}, {.name = {(char)'S', (char)'A', (char)' ', (char)'R', (char)'e', (char)'p', (char)'l', (char)'a', (char)'c', (char)'e', (char)'m', (char)'e', (char)'n', (char)'t', (char)' ', (char)'(', (char)'d', (char)'e', (char)'s', (char)'c', (char)')', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_desc_sar}, {.name = {(char)'S', (char)'A', (char)' ', (char)'I', (char)'n', (char)'s', (char)'e', (char)'r', (char)'t', (char)'i', (char)'o', (char)'n', (char)' ', (char)'(', (char)'r', (char)'e', (char)'g', (char)')', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_reg_sai}, {.name = {(char)'S', (char)'A', (char)' ', (char)'R', (char)'e', (char)'p', (char)'l', (char)'a', (char)'c', (char)'e', (char)'m', (char)'e', (char)'n', (char)'t', (char)' ', (char)'(', (char)'r', (char)'e', (char)'g', (char)')', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_reg_sar}, {.name = {(char)'V', (char)'L', (char)'A', (char)'N', (char)' ', (char)'T', (char)'X', (char)' ', (char)'I', (char)'n', (char)'s', (char)'e', (char)'r', (char)'t', (char)'i', (char)'o', (char)'n', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_vlanoff}, {.name = {(char)'S', (char)'V', (char)'L', (char)'A', (char)'N', (char)' ', (char)'T', (char)'X', (char)' ', (char)'I', (char)'n', (char)'s', (char)'e', (char)'r', (char)'t', (char)'i', (char)'o', (char)'n', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_svlanoff}, {.name = {(char)'L', (char)'3', (char)' ', (char)'D', (char)'A', (char)' ', (char)'F', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'i', (char)'n', (char)'g', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_l3filt_da}, {.name = {(char)'L', (char)'3', (char)' ', (char)'S', (char)'A', (char)' ', (char)'F', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'i', (char)'n', (char)'g', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_l3filt_sa}, {.name = {(char)'L', (char)'4', (char)' ', (char)'D', (char)'A', (char)' ', (char)'T', (char)'C', (char)'P', (char)' ', (char)'F', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'i', (char)'n', (char)'g', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_l4filt_da_tcp}, {.name = {(char)'L', (char)'4', (char)' ', (char)'S', (char)'A', (char)' ', (char)'T', (char)'C', (char)'P', (char)' ', (char)'F', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'i', (char)'n', (char)'g', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_l4filt_sa_tcp}, {.name = {(char)'L', (char)'4', (char)' ', (char)'D', (char)'A', (char)' ', (char)'U', (char)'D', (char)'P', (char)' ', (char)'F', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'i', (char)'n', (char)'g', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_l4filt_da_udp}, {.name = {(char)'L', (char)'4', (char)' ', (char)'S', (char)'A', (char)' ', (char)'U', (char)'D', (char)'P', (char)' ', (char)'F', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'i', (char)'n', (char)'g', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_l4filt_sa_udp}, {.name = {(char)'A', (char)'R', (char)'P', (char)' ', (char)'O', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_arpoffload}, {.name = {(char)'J', (char)'u', (char)'m', (char)'b', (char)'o', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_jumbo}, {.name = {(char)'M', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'h', (char)'a', (char)'n', (char)'n', (char)'e', (char)'l', (char)' ', (char)'J', (char)'u', (char)'m', (char)'b', (char)'o', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_mjumbo}, {.name = {(char)'S', (char)'p', (char)'l', (char)'i', (char)'t', (char)' ', (char)'H', (char)'e', (char)'a', (char)'d', (char)'e', (char)'r', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, .lb = 2, .fn = & stmmac_test_sph}};
#line 1887  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
void stmmac_selftest_run(struct net_device *dev, struct ethtool_test *etest, u64 *buf)
{
  #line 1893 
  int i;
  #line 1893 
  int ret;
  #line 1890 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 1891 
  int count = stmmac_selftest_get_count(priv);
  #line 1892 
  int carrier = (int)netif_carrier_ok(dev);
  #line 1895 
  memset((void *)buf,0,(unsigned long)count * 8UL);
  #line 1896 
  stmmac_test_next_id = (unsigned char)0U;
  #line 1898 
  if (etest->flags != 1U) {
    #line 1899 
    netdev_err(priv->dev,(char *)"Only offline tests are supported\n");
    #line 1900 
    etest->flags |= 2U;
    #line 1901 
    return;
  }
  else 
    #line 1902 
    if (carrier == 0) {
      #line 1903 
      netdev_err(priv->dev,(char *)"You need valid Link to execute tests\n");
      #line 1904 
      etest->flags |= 2U;
      #line 1905 
      return;
    }
  #line 1909 
  netif_carrier_off(dev);
  #line 1912 
  msleep(200U);
  #line 1914 
  i = 0;
  #line 1914 
  while (i < count) {
    #line 1915 
    ret = 0;
    #line 1917 
    switch (stmmac_selftests[i].lb) {
      #line 1926 
      int __result;
      #line 1918 
      case 2: 
              #line 1918 
      ;
      #line 1919 
      ret = -95;
      #line 1920 
      if (dev->phydev != (struct phy_device *)0) 
                                                 #line 1921 
                                                 ret = phy_loopback(dev->phydev,(_Bool)1);
      #line 1922 
      if (ret == 0) 
                    #line 1923 
                    break;
      #line 1925 
      case 1: 
              #line 1925 
      ;
      #line 1926 
      __result = -22;
      #line 1926 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_mac_loopback != (void (*)(void *, bool ))0) {
        #line 1926 
        (*(((priv->hw)->mac)->set_mac_loopback))(priv->ioaddr,(_Bool)1);
        #line 1926 
        __result = 0;
      }
      #line 1926 
      ret = __result;
      #line 1927 
      break;
      #line 1928 
      case 0: 
              #line 1928 
      ;
      #line 1929 
      break;
      #line 1930 
      default: 
               #line 1930 
      ;
      #line 1931 
      ret = -95;
      #line 1932 
      break;
    }
    #line 1939 
    if (ret != 0) {
      #line 1940 
      netdev_err(priv->dev,(char *)"Loopback is not supported\n");
      #line 1941 
      etest->flags |= 2U;
      #line 1942 
      break;
    }
    #line 1945 
    ret = (*(stmmac_selftests[i].fn))(priv);
    #line 1946 
    if (ret != 0 && ret != -95) 
                                #line 1947 
                                etest->flags |= 2U;
    #line 1948 
    *(buf + (unsigned long)i) = (unsigned long long)ret;
    #line 1950 
    switch (stmmac_selftests[i].lb) {
      #line 1951 
      case 2: 
              #line 1951 
      ;
      #line 1952 
      ret = -95;
      #line 1953 
      if (dev->phydev != (struct phy_device *)0) 
                                                 #line 1954 
                                                 ret = phy_loopback(dev->phydev,(_Bool)0);
      #line 1955 
      if (ret == 0) 
                    #line 1956 
                    break;
      #line 1958 
      case 1: 
              #line 1958 
      ;
      {
        #line 1959 
        int __result_0 = -22;
        #line 1959 
        if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_mac_loopback != (void (*)(void *, bool ))0) {
          #line 1959 
          (*(((priv->hw)->mac)->set_mac_loopback))(priv->ioaddr,(_Bool)0);
          #line 1959 
          __result_0 = 0;
        }
        #line 1959 
        int tmp_3 = __result_0;
      }
      #line 1960 
      break;
      #line 1961 
      default: 
               #line 1961 
      ;
      #line 1962 
      break;
    }
    #line 1914 
    i ++;
  }
  #line 1967 
  if (carrier != 0) 
                    #line 1968 
                    netif_carrier_on(dev);
  #line 1969 
  return;
}

#line 1971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
void stmmac_selftest_get_strings(struct stmmac_priv *priv, u8 *data)
{
  #line 1974 
  int i;
  #line 1973 
  u8 *p = data;
  #line 1976 
  i = 0;
  #line 1976 
  while (1) {
    #line 1976 
    ;
    #line 1976 
    if (! (stmmac_selftest_get_count(priv) > i)) 
                                                 #line 1976 
                                                 break;
    #line 1977 
    snprintf((char *)p,32UL,(char *)"%2d. %s",i + 1,(char *)(& stmmac_selftests[i].name));
    #line 1979 
    p += 32U;
    #line 1976 
    i ++;
  }
  #line 1981 
  return;
}

#line 1983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_selftests.c"
int stmmac_selftest_get_count(struct stmmac_priv *priv)
{
  #line 1985 
  return 31;
}

#line 361  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_selftests.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 364 
  return ldv_kzalloc(size,flags);
}

#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/mmc_core.c"
struct stmmac_mmc_ops dwmac_mmc_ops;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
#line 455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/mmc_core.c"
struct stmmac_mmc_ops dwxgmac_mmc_ops;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/mmc_core.c"
static void dwmac_mmc_ctrl(void *mmcaddr, unsigned int mode)
{
  #line 183 
  u32 value = readl(mmcaddr);
  #line 185 
  value = (mode & 63U) | value;
  #line 187 
  writel(value,mmcaddr);
  {
    #line 189 
    bool branch;
    #line 189 
    struct _ddebug __UNIQUE_ID_ddebug436 = {.modname = (char *)"stmmac", .function = (char *)"dwmac_mmc_ctrl", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/mmc_core.c", .format = (char *)"stmmac: MMC ctrl register (offset 0x%x): 0x%08x\n", .lineno = (unsigned int)189U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 189 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug436.key.dd_key_false.key,(_Bool)0);
    #line 189 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 189 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug436,(char *)"stmmac: MMC ctrl register (offset 0x%x): 0x%08x\n",0,value);
  }
  #line 191 
  return;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/mmc_core.c"
static void dwmac_mmc_intr_all_mask(void *mmcaddr)
{
  #line 196 
  writel(4294967295U,mmcaddr + 12U);
  #line 197 
  writel(4294967295U,mmcaddr + 16U);
  #line 198 
  writel(4294967295U,mmcaddr + 256U);
  #line 199 
  return;
}

#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/mmc_core.c"
static void dwmac_mmc_read(void *mmcaddr, struct stmmac_counters *mmc)
{
  #line 208 
  mmc->mmc_tx_octetcount_gb += readl(mmcaddr + 20U);
  #line 209 
  mmc->mmc_tx_framecount_gb += readl(mmcaddr + 24U);
  #line 211 
  mmc->mmc_tx_broadcastframe_g += readl(mmcaddr + 28U);
  #line 213 
  mmc->mmc_tx_multicastframe_g += readl(mmcaddr + 32U);
  #line 214 
  mmc->mmc_tx_64_octets_gb += readl(mmcaddr + 36U);
  #line 216 
  mmc->mmc_tx_65_to_127_octets_gb += readl(mmcaddr + 40U);
  #line 218 
  mmc->mmc_tx_128_to_255_octets_gb += readl(mmcaddr + 44U);
  #line 220 
  mmc->mmc_tx_256_to_511_octets_gb += readl(mmcaddr + 48U);
  #line 222 
  mmc->mmc_tx_512_to_1023_octets_gb += readl(mmcaddr + 52U);
  #line 224 
  mmc->mmc_tx_1024_to_max_octets_gb += readl(mmcaddr + 56U);
  #line 225 
  mmc->mmc_tx_unicast_gb += readl(mmcaddr + 60U);
  #line 226 
  mmc->mmc_tx_multicast_gb += readl(mmcaddr + 64U);
  #line 227 
  mmc->mmc_tx_broadcast_gb += readl(mmcaddr + 68U);
  #line 228 
  mmc->mmc_tx_underflow_error += readl(mmcaddr + 72U);
  #line 229 
  mmc->mmc_tx_singlecol_g += readl(mmcaddr + 76U);
  #line 230 
  mmc->mmc_tx_multicol_g += readl(mmcaddr + 80U);
  #line 231 
  mmc->mmc_tx_deferred += readl(mmcaddr + 84U);
  #line 232 
  mmc->mmc_tx_latecol += readl(mmcaddr + 88U);
  #line 233 
  mmc->mmc_tx_exesscol += readl(mmcaddr + 92U);
  #line 234 
  mmc->mmc_tx_carrier_error += readl(mmcaddr + 96U);
  #line 235 
  mmc->mmc_tx_octetcount_g += readl(mmcaddr + 100U);
  #line 236 
  mmc->mmc_tx_framecount_g += readl(mmcaddr + 104U);
  #line 237 
  mmc->mmc_tx_excessdef += readl(mmcaddr + 108U);
  #line 238 
  mmc->mmc_tx_pause_frame += readl(mmcaddr + 112U);
  #line 239 
  mmc->mmc_tx_vlan_frame_g += readl(mmcaddr + 116U);
  #line 242 
  mmc->mmc_rx_framecount_gb += readl(mmcaddr + 128U);
  #line 243 
  mmc->mmc_rx_octetcount_gb += readl(mmcaddr + 132U);
  #line 244 
  mmc->mmc_rx_octetcount_g += readl(mmcaddr + 136U);
  #line 246 
  mmc->mmc_rx_broadcastframe_g += readl(mmcaddr + 140U);
  #line 248 
  mmc->mmc_rx_multicastframe_g += readl(mmcaddr + 144U);
  #line 249 
  mmc->mmc_rx_crc_error += readl(mmcaddr + 148U);
  #line 250 
  mmc->mmc_rx_align_error += readl(mmcaddr + 152U);
  #line 251 
  mmc->mmc_rx_run_error += readl(mmcaddr + 156U);
  #line 252 
  mmc->mmc_rx_jabber_error += readl(mmcaddr + 160U);
  #line 253 
  mmc->mmc_rx_undersize_g += readl(mmcaddr + 164U);
  #line 254 
  mmc->mmc_rx_oversize_g += readl(mmcaddr + 168U);
  #line 255 
  mmc->mmc_rx_64_octets_gb += readl(mmcaddr + 172U);
  #line 257 
  mmc->mmc_rx_65_to_127_octets_gb += readl(mmcaddr + 176U);
  #line 259 
  mmc->mmc_rx_128_to_255_octets_gb += readl(mmcaddr + 180U);
  #line 261 
  mmc->mmc_rx_256_to_511_octets_gb += readl(mmcaddr + 184U);
  #line 263 
  mmc->mmc_rx_512_to_1023_octets_gb += readl(mmcaddr + 188U);
  #line 265 
  mmc->mmc_rx_1024_to_max_octets_gb += readl(mmcaddr + 192U);
  #line 266 
  mmc->mmc_rx_unicast_g += readl(mmcaddr + 196U);
  #line 267 
  mmc->mmc_rx_length_error += readl(mmcaddr + 200U);
  #line 268 
  mmc->mmc_rx_autofrangetype += readl(mmcaddr + 204U);
  #line 269 
  mmc->mmc_rx_pause_frames += readl(mmcaddr + 208U);
  #line 270 
  mmc->mmc_rx_fifo_overflow += readl(mmcaddr + 212U);
  #line 271 
  mmc->mmc_rx_vlan_frames_gb += readl(mmcaddr + 216U);
  #line 272 
  mmc->mmc_rx_watchdog_error += readl(mmcaddr + 220U);
  #line 274 
  mmc->mmc_rx_ipc_intr_mask += readl(mmcaddr + 256U);
  #line 275 
  mmc->mmc_rx_ipc_intr += readl(mmcaddr + 264U);
  #line 277 
  mmc->mmc_rx_ipv4_gd += readl(mmcaddr + 272U);
  #line 278 
  mmc->mmc_rx_ipv4_hderr += readl(mmcaddr + 276U);
  #line 279 
  mmc->mmc_rx_ipv4_nopay += readl(mmcaddr + 280U);
  #line 280 
  mmc->mmc_rx_ipv4_frag += readl(mmcaddr + 284U);
  #line 281 
  mmc->mmc_rx_ipv4_udsbl += readl(mmcaddr + 288U);
  #line 283 
  mmc->mmc_rx_ipv4_gd_octets += readl(mmcaddr + 336U);
  #line 285 
  mmc->mmc_rx_ipv4_hderr_octets += readl(mmcaddr + 340U);
  #line 287 
  mmc->mmc_rx_ipv4_nopay_octets += readl(mmcaddr + 344U);
  #line 289 
  mmc->mmc_rx_ipv4_frag_octets += readl(mmcaddr + 348U);
  #line 291 
  mmc->mmc_rx_ipv4_udsbl_octets += readl(mmcaddr + 352U);
  #line 294 
  mmc->mmc_rx_ipv6_gd_octets += readl(mmcaddr + 356U);
  #line 296 
  mmc->mmc_rx_ipv6_hderr_octets += readl(mmcaddr + 360U);
  #line 298 
  mmc->mmc_rx_ipv6_nopay_octets += readl(mmcaddr + 364U);
  #line 300 
  mmc->mmc_rx_ipv6_gd += readl(mmcaddr + 292U);
  #line 301 
  mmc->mmc_rx_ipv6_hderr += readl(mmcaddr + 296U);
  #line 302 
  mmc->mmc_rx_ipv6_nopay += readl(mmcaddr + 300U);
  #line 305 
  mmc->mmc_rx_udp_gd += readl(mmcaddr + 304U);
  #line 306 
  mmc->mmc_rx_udp_err += readl(mmcaddr + 308U);
  #line 307 
  mmc->mmc_rx_tcp_gd += readl(mmcaddr + 312U);
  #line 308 
  mmc->mmc_rx_tcp_err += readl(mmcaddr + 316U);
  #line 309 
  mmc->mmc_rx_icmp_gd += readl(mmcaddr + 320U);
  #line 310 
  mmc->mmc_rx_icmp_err += readl(mmcaddr + 324U);
  #line 312 
  mmc->mmc_rx_udp_gd_octets += readl(mmcaddr + 368U);
  #line 313 
  mmc->mmc_rx_udp_err_octets += readl(mmcaddr + 372U);
  #line 314 
  mmc->mmc_rx_tcp_gd_octets += readl(mmcaddr + 376U);
  #line 315 
  mmc->mmc_rx_tcp_err_octets += readl(mmcaddr + 380U);
  #line 316 
  mmc->mmc_rx_icmp_gd_octets += readl(mmcaddr + 384U);
  #line 317 
  mmc->mmc_rx_icmp_err_octets += readl(mmcaddr + 388U);
  #line 318 
  return;
}

#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/mmc_core.c"
struct stmmac_mmc_ops dwmac_mmc_ops = {.ctrl = & dwmac_mmc_ctrl, .intr_all_mask = & dwmac_mmc_intr_all_mask, .read = & dwmac_mmc_read};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/mmc_core.c"
static void dwxgmac_mmc_ctrl(void *mmcaddr, unsigned int mode)
{
  #line 328 
  u32 value = readl(mmcaddr);
  #line 330 
  value = (mode & 63U) | value;
  #line 332 
  writel(value,mmcaddr);
  #line 333 
  return;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/mmc_core.c"
static void dwxgmac_mmc_intr_all_mask(void *mmcaddr)
{
  #line 337 
  writel(0U,mmcaddr + 12U);
  #line 338 
  writel(0U,mmcaddr + 16U);
  #line 339 
  writel(4294967295U,mmcaddr + 604U);
  #line 340 
  return;
}

#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/mmc_core.c"
static void dwxgmac_read_mmc_reg(void *addr, u32 reg, u32 *dest)
{
  #line 344 
  u64 tmp = 0ULL;
  #line 346 
  tmp = (unsigned long long)readl(addr + (unsigned long)reg) + tmp;
  #line 347 
  tmp = ((unsigned long long)readl(addr + ((unsigned long)reg + (unsigned long)4U)) << 32) + tmp;
  #line 348 
  if (tmp > 4294967295ULL) 
                           #line 349 
                           *dest = 4294967295U; else 
                                                     #line 351 
                                                     *dest += (unsigned int)tmp;
  #line 352 
  return;
}

#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/mmc_core.c"
static void dwxgmac_mmc_read(void *mmcaddr, struct stmmac_counters *mmc)
{
  #line 361 
  dwxgmac_read_mmc_reg(mmcaddr,20U,& mmc->mmc_tx_octetcount_gb);
  #line 363 
  dwxgmac_read_mmc_reg(mmcaddr,28U,& mmc->mmc_tx_framecount_gb);
  #line 365 
  dwxgmac_read_mmc_reg(mmcaddr,36U,& mmc->mmc_tx_broadcastframe_g);
  #line 367 
  dwxgmac_read_mmc_reg(mmcaddr,44U,& mmc->mmc_tx_multicastframe_g);
  #line 369 
  dwxgmac_read_mmc_reg(mmcaddr,52U,& mmc->mmc_tx_64_octets_gb);
  #line 371 
  dwxgmac_read_mmc_reg(mmcaddr,60U,& mmc->mmc_tx_65_to_127_octets_gb);
  #line 373 
  dwxgmac_read_mmc_reg(mmcaddr,68U,& mmc->mmc_tx_128_to_255_octets_gb);
  #line 375 
  dwxgmac_read_mmc_reg(mmcaddr,76U,& mmc->mmc_tx_256_to_511_octets_gb);
  #line 377 
  dwxgmac_read_mmc_reg(mmcaddr,84U,& mmc->mmc_tx_512_to_1023_octets_gb);
  #line 379 
  dwxgmac_read_mmc_reg(mmcaddr,92U,& mmc->mmc_tx_1024_to_max_octets_gb);
  #line 381 
  dwxgmac_read_mmc_reg(mmcaddr,100U,& mmc->mmc_tx_unicast_gb);
  #line 383 
  dwxgmac_read_mmc_reg(mmcaddr,108U,& mmc->mmc_tx_multicast_gb);
  #line 385 
  dwxgmac_read_mmc_reg(mmcaddr,116U,& mmc->mmc_tx_broadcast_gb);
  #line 387 
  dwxgmac_read_mmc_reg(mmcaddr,124U,& mmc->mmc_tx_underflow_error);
  #line 389 
  dwxgmac_read_mmc_reg(mmcaddr,132U,& mmc->mmc_tx_octetcount_g);
  #line 391 
  dwxgmac_read_mmc_reg(mmcaddr,140U,& mmc->mmc_tx_framecount_g);
  #line 393 
  dwxgmac_read_mmc_reg(mmcaddr,148U,& mmc->mmc_tx_pause_frame);
  #line 395 
  dwxgmac_read_mmc_reg(mmcaddr,156U,& mmc->mmc_tx_vlan_frame_g);
  #line 399 
  dwxgmac_read_mmc_reg(mmcaddr,256U,& mmc->mmc_rx_framecount_gb);
  #line 401 
  dwxgmac_read_mmc_reg(mmcaddr,264U,& mmc->mmc_rx_octetcount_gb);
  #line 403 
  dwxgmac_read_mmc_reg(mmcaddr,272U,& mmc->mmc_rx_octetcount_g);
  #line 405 
  dwxgmac_read_mmc_reg(mmcaddr,280U,& mmc->mmc_rx_broadcastframe_g);
  #line 407 
  dwxgmac_read_mmc_reg(mmcaddr,288U,& mmc->mmc_rx_multicastframe_g);
  #line 409 
  dwxgmac_read_mmc_reg(mmcaddr,296U,& mmc->mmc_rx_crc_error);
  #line 411 
  dwxgmac_read_mmc_reg(mmcaddr,296U,& mmc->mmc_rx_crc_error);
  #line 413 
  mmc->mmc_rx_run_error += readl(mmcaddr + 304U);
  #line 414 
  mmc->mmc_rx_jabber_error += readl(mmcaddr + 308U);
  #line 415 
  mmc->mmc_rx_undersize_g += readl(mmcaddr + 312U);
  #line 416 
  mmc->mmc_rx_oversize_g += readl(mmcaddr + 316U);
  #line 417 
  dwxgmac_read_mmc_reg(mmcaddr,320U,& mmc->mmc_rx_64_octets_gb);
  #line 419 
  dwxgmac_read_mmc_reg(mmcaddr,328U,& mmc->mmc_rx_65_to_127_octets_gb);
  #line 421 
  dwxgmac_read_mmc_reg(mmcaddr,336U,& mmc->mmc_rx_128_to_255_octets_gb);
  #line 423 
  dwxgmac_read_mmc_reg(mmcaddr,344U,& mmc->mmc_rx_256_to_511_octets_gb);
  #line 425 
  dwxgmac_read_mmc_reg(mmcaddr,352U,& mmc->mmc_rx_512_to_1023_octets_gb);
  #line 427 
  dwxgmac_read_mmc_reg(mmcaddr,360U,& mmc->mmc_rx_1024_to_max_octets_gb);
  #line 429 
  dwxgmac_read_mmc_reg(mmcaddr,368U,& mmc->mmc_rx_unicast_g);
  #line 431 
  dwxgmac_read_mmc_reg(mmcaddr,376U,& mmc->mmc_rx_length_error);
  #line 433 
  dwxgmac_read_mmc_reg(mmcaddr,384U,& mmc->mmc_rx_autofrangetype);
  #line 435 
  dwxgmac_read_mmc_reg(mmcaddr,392U,& mmc->mmc_rx_pause_frames);
  #line 437 
  dwxgmac_read_mmc_reg(mmcaddr,400U,& mmc->mmc_rx_fifo_overflow);
  #line 439 
  dwxgmac_read_mmc_reg(mmcaddr,408U,& mmc->mmc_rx_vlan_frames_gb);
  #line 441 
  mmc->mmc_rx_watchdog_error += readl(mmcaddr + 416U);
  #line 443 
  mmc->mmc_tx_fpe_fragment_cntr += readl(mmcaddr + 520U);
  #line 444 
  mmc->mmc_tx_hold_req_cntr += readl(mmcaddr + 524U);
  #line 446 
  mmc->mmc_rx_packet_assembly_err_cntr += readl(mmcaddr + 552U);
  #line 448 
  mmc->mmc_rx_packet_smd_err_cntr += readl(mmcaddr + 556U);
  #line 450 
  mmc->mmc_rx_packet_assembly_ok_cntr += readl(mmcaddr + 560U);
  #line 452 
  mmc->mmc_rx_fpe_fragment_cntr += readl(mmcaddr + 564U);
  #line 453 
  return;
}

#line 455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/mmc_core.c"
struct stmmac_mmc_ops dwxgmac_mmc_ops = {.ctrl = & dwxgmac_mmc_ctrl, .intr_all_mask = & dwxgmac_mmc_intr_all_mask, .read = & dwxgmac_mmc_read};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
#line 455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
struct stmmac_desc_ops enh_desc_ops;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/descs_com.h"
__inline static void ehn_desc_rx_set_on_ring(struct dma_desc *p, int end, int bfsize)
{
  #line 25 
  if (bfsize == 16368) 
                       #line 26 
                       p->des1 |= 536608768U;
  #line 30 
  if (end != 0) 
                #line 31 
                p->des1 |= 32768U;
  #line 32 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/descs_com.h"
__inline static void enh_desc_end_tx_desc_on_ring(struct dma_desc *p, int end)
{
  #line 36 
  if (end != 0) 
                #line 37 
                p->des0 |= 2097152U; else 
                                          #line 39 
                                          p->des0 &= 4292870143U;
  #line 40 
  return;
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/descs_com.h"
__inline static void enh_set_tx_desc_len_on_ring(struct dma_desc *p, int len)
{
  #line 44 
  if ((long)(len > 4096) != 0L) 
                                #line 45 
                                p->des1 = (p->des1 | ((unsigned int)((len + -4096) << 16) & 536805376U)) | 4096U; else 
                                                                    #line 50 
                                                                    p->des1 |= (unsigned int)len & 8191U;
  #line 51 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/descs_com.h"
__inline static void ehn_desc_rx_set_on_chain(struct dma_desc *p)
{
  #line 93 
  p->des1 |= 16384U;
  #line 94 
  return;
}

#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/descs_com.h"
__inline static void enh_desc_end_tx_desc_on_chain(struct dma_desc *p)
{
  #line 98 
  p->des0 |= 1048576U;
  #line 99 
  return;
}

#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/descs_com.h"
__inline static void enh_set_tx_desc_len_on_chain(struct dma_desc *p, int len)
{
  #line 103 
  p->des1 |= (unsigned int)len & 8191U;
  #line 104 
  return;
}

#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static int enh_desc_get_tx_status(void *data, struct stmmac_extra_stats *x, struct dma_desc *p, void *ioaddr)
{
  #line 18 
  struct net_device_stats *stats = (struct net_device_stats *)data;
  #line 19 
  unsigned int tdes0 = p->des0;
  #line 20 
  int ret = 0;
  #line 23 
  if ((long)((tdes0 & 2147483648U) != 0U) != 0L) 
                                                 #line 24 
                                                 return 4;
  #line 27 
  if ((long)(((unsigned long)tdes0 & 536870912UL) == 0UL) != 0L) 
                                                                 #line 28 
                                                                 return 1;
  #line 30 
  if ((long)(((unsigned long)tdes0 & 32768UL) != 0UL) != 0L) {
    #line 31 
    if ((long)(((unsigned long)tdes0 & 16384UL) != 0UL) != 0L) 
                                                               #line 32 
                                                               (x->tx_jabber) ++;
    #line 34 
    if ((long)(((unsigned long)tdes0 & 8192UL) != 0UL) != 0L) {
      #line 35 
      (x->tx_frame_flushed) ++;
      #line 36 
      dwmac_dma_flush_tx_fifo(ioaddr);
    }
    #line 39 
    if ((long)(((unsigned long)tdes0 & 2048UL) != 0UL) != 0L) {
      #line 40 
      (x->tx_losscarrier) ++;
      #line 41 
      (stats->tx_carrier_errors) ++;
    }
    #line 43 
    if ((long)(((unsigned long)tdes0 & 1024UL) != 0UL) != 0L) {
      #line 44 
      (x->tx_carrier) ++;
      #line 45 
      (stats->tx_carrier_errors) ++;
    }
    #line 47 
    if ((long)(((unsigned long)tdes0 & 512UL) != 0UL) != 0L || (long)(((unsigned long)tdes0 & 256UL) != 0UL) != 0L) 
      #line 49 
      stats->collisions += ((unsigned long)tdes0 >> 3) & 15UL;
    #line 52 
    if ((long)(((unsigned long)tdes0 & 4UL) != 0UL) != 0L) 
                                                           #line 53 
                                                           (x->tx_deferred) ++;
    #line 55 
    if ((long)(((unsigned long)tdes0 & 2UL) != 0UL) != 0L) {
      #line 56 
      dwmac_dma_flush_tx_fifo(ioaddr);
      #line 57 
      (x->tx_underflow) ++;
    }
    #line 60 
    if ((long)(((unsigned long)tdes0 & 65536UL) != 0UL) != 0L) 
                                                               #line 61 
                                                               (x->tx_ip_header_error) ++;
    #line 63 
    if ((long)(((unsigned long)tdes0 & 4096UL) != 0UL) != 0L) {
      #line 64 
      (x->tx_payload_error) ++;
      #line 65 
      dwmac_dma_flush_tx_fifo(ioaddr);
    }
    #line 68 
    ret = 2;
  }
  #line 71 
  if ((long)(((unsigned long)tdes0 & 1UL) != 0UL) != 0L) 
                                                         #line 72 
                                                         (x->tx_deferred) ++;
  #line 75 
  if (((unsigned long)tdes0 & 128UL) != 0UL) 
                                             #line 76 
                                             (x->tx_vlan) ++;
  #line 79 
  return ret;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static int enh_desc_get_tx_len(struct dma_desc *p)
{
  #line 84 
  return (int)p->des1 & 8191;
}

#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static int enh_desc_coe_rdes0(int ipc_err, int type, int payload_err)
{
  #line 89 
  int ret = 0;
  #line 90 
  u32 status = (unsigned int)(((type << 2) | (ipc_err << 1)) | payload_err) & 7U;
  #line 103 
  if (status == 0U) 
                    #line 104 
                    ret = 4;
  else 
    #line 105 
    if (status == 4U) 
                      #line 106 
                      ret = 0;
    else 
      #line 107 
      if (status == 5U) 
                        #line 108 
                        ret = 2;
      else 
        #line 109 
        if (status == 6U) 
                          #line 110 
                          ret = 2;
        else 
          #line 111 
          if (status == 7U) 
                            #line 112 
                            ret = 2;
          else 
            #line 113 
            if (status == 1U) 
                              #line 114 
                              ret = 1;
            else 
              #line 115 
              if (status == 3U) 
                                #line 116 
                                ret = 1;
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static void enh_desc_get_ext_status(void *data, struct stmmac_extra_stats *x, struct dma_extended_desc *p)
{
  #line 123 
  unsigned int rdes0 = p->basic.des0;
  #line 124 
  unsigned int rdes4 = p->des4;
  #line 126 
  if ((long)(((unsigned long)rdes0 & 1UL) != 0UL) != 0L) {
    #line 127 
    int message_type = (int)((unsigned long)rdes4 >> 8) & 15;
    #line 129 
    if (((unsigned long)rdes4 & 8UL) != 0UL) 
                                             #line 130 
                                             (x->ip_hdr_err) ++;
    #line 131 
    if (((unsigned long)rdes4 & 16UL) != 0UL) 
                                              #line 132 
                                              (x->ip_payload_err) ++;
    #line 133 
    if (((unsigned long)rdes4 & 32UL) != 0UL) 
                                              #line 134 
                                              (x->ip_csum_bypassed) ++;
    #line 135 
    if (((unsigned long)rdes4 & 64UL) != 0UL) 
                                              #line 136 
                                              (x->ipv4_pkt_rcvd) ++;
    #line 137 
    if (((unsigned long)rdes4 & 128UL) != 0UL) 
                                               #line 138 
                                               (x->ipv6_pkt_rcvd) ++;
    #line 140 
    if (message_type == 0) 
                           #line 141 
                           (x->no_ptp_rx_msg_type_ext) ++;
    else 
      #line 142 
      if (message_type == 1) 
                             #line 143 
                             (x->ptp_rx_msg_type_sync) ++;
      else 
        #line 144 
        if (message_type == 2) 
                               #line 145 
                               (x->ptp_rx_msg_type_follow_up) ++;
        else 
          #line 146 
          if (message_type == 3) 
                                 #line 147 
                                 (x->ptp_rx_msg_type_delay_req) ++;
          else 
            #line 148 
            if (message_type == 4) 
                                   #line 149 
                                   (x->ptp_rx_msg_type_delay_resp) ++;
            else 
              #line 150 
              if (message_type == 5) 
                                     #line 151 
                                     (x->ptp_rx_msg_type_pdelay_req) ++;
              else 
                #line 152 
                if (message_type == 6) 
                                       #line 153 
                                       (x->ptp_rx_msg_type_pdelay_resp) ++;
                else 
                  #line 154 
                  if (message_type == 7) 
                                         #line 155 
                                         (x->ptp_rx_msg_type_pdelay_follow_up) ++;
                  else 
                    #line 156 
                    if (message_type == 8) 
                                           #line 157 
                                           (x->ptp_rx_msg_type_announce) ++;
                    else 
                      #line 158 
                      if (message_type == 9) 
                                             #line 159 
                                             (x->ptp_rx_msg_type_management) ++;
                      else 
                        #line 160 
                        if (message_type == 15) 
                                                #line 161 
                                                (x->ptp_rx_msg_pkt_reserved_type) ++;
    #line 163 
    if (((unsigned long)rdes4 & 4096UL) != 0UL) 
                                                #line 164 
                                                (x->ptp_frame_type) ++;
    #line 165 
    if (((unsigned long)rdes4 & 8192UL) != 0UL) 
                                                #line 166 
                                                (x->ptp_ver) ++;
    #line 167 
    if (((unsigned long)rdes4 & 16384UL) != 0UL) 
                                                 #line 168 
                                                 (x->timestamp_dropped) ++;
    #line 169 
    if (((unsigned long)rdes4 & 65536UL) != 0UL) 
                                                 #line 170 
                                                 (x->av_pkt_rcvd) ++;
    #line 171 
    if (((unsigned long)rdes4 & 131072UL) != 0UL) 
                                                  #line 172 
                                                  (x->av_tagged_pkt_rcvd) ++;
    #line 173 
    if ((((unsigned long)rdes4 >> 18) & 7UL) != 0UL) 
                                                     #line 174 
                                                     (x->vlan_tag_priority_val) ++;
    #line 175 
    if (((unsigned long)rdes4 & 16777216UL) != 0UL) 
                                                    #line 176 
                                                    (x->l3_filter_match) ++;
    #line 177 
    if (((unsigned long)rdes4 & 33554432UL) != 0UL) 
                                                    #line 178 
                                                    (x->l4_filter_match) ++;
    #line 179 
    if ((((unsigned long)rdes4 >> 26) & 3UL) != 0UL) 
                                                     #line 180 
                                                     (x->l3_l4_filter_no_match) ++;
  }
  #line 182 
  return;
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static int enh_desc_get_rx_status(void *data, struct stmmac_extra_stats *x, struct dma_desc *p)
{
  #line 187 
  struct net_device_stats *stats = (struct net_device_stats *)data;
  #line 188 
  unsigned int rdes0 = p->des0;
  #line 189 
  int ret = 0;
  #line 191 
  if ((long)(((unsigned long)rdes0 & 2147483648UL) != 0UL) != 0L) 
                                                                  #line 192 
                                                                  return 8;
  #line 194 
  if ((long)(((unsigned long)rdes0 & 256UL) == 0UL) != 0L) {
    #line 195 
    (stats->rx_length_errors) ++;
    #line 196 
    return 1;
  }
  #line 199 
  if ((long)(((unsigned long)rdes0 & 32768UL) != 0UL) != 0L) {
    #line 200 
    if ((long)(((unsigned long)rdes0 & 16384UL) != 0UL) != 0L) {
      #line 201 
      (x->rx_desc) ++;
      #line 202 
      (stats->rx_length_errors) ++;
    }
    #line 204 
    if ((long)(((unsigned long)rdes0 & 2048UL) != 0UL) != 0L) 
                                                              #line 205 
                                                              (x->rx_gmac_overflow) ++;
    #line 207 
    if ((long)(((unsigned long)rdes0 & 128UL) != 0UL) != 0L) 
                                                             #line 208 
                                                             printk((char *)"\001");
    #line 210 
    if ((long)(((unsigned long)rdes0 & 64UL) != 0UL) != 0L) 
                                                            #line 211 
                                                            (stats->collisions) ++;
    #line 212 
    if ((long)(((unsigned long)rdes0 & 16UL) != 0UL) != 0L) 
                                                            #line 213 
                                                            (x->rx_watchdog) ++;
    #line 215 
    if ((long)(((unsigned long)rdes0 & 8UL) != 0UL) != 0L) 
                                                           #line 216 
                                                           (x->rx_mii) ++;
    #line 218 
    if ((long)(((unsigned long)rdes0 & 2UL) != 0UL) != 0L) {
      #line 219 
      (x->rx_crc_errors) ++;
      #line 220 
      (stats->rx_crc_errors) ++;
    }
    #line 222 
    ret = 1;
  }
  #line 229 
  if ((long)(ret == 0) != 0L) 
                              #line 230 
                              ret = enh_desc_coe_rdes0(((unsigned long)rdes0 & 128UL) != 0UL,((unsigned long)rdes0 & 32UL) != 0UL,((unsigned long)rdes0 & 1UL) != 0UL);
  #line 234 
  if ((long)(((unsigned long)rdes0 & 4UL) != 0UL) != 0L) 
                                                         #line 235 
                                                         (x->dribbling_bit) ++;
  #line 237 
  if ((long)(((unsigned long)rdes0 & 8192UL) != 0UL) != 0L) {
    #line 238 
    (x->sa_rx_filter_fail) ++;
    #line 239 
    ret = 1;
  }
  #line 241 
  if ((long)(((unsigned long)rdes0 & 1073741824UL) != 0UL) != 0L) {
    #line 242 
    (x->da_rx_filter_fail) ++;
    #line 243 
    ret = 1;
  }
  #line 245 
  if ((long)(((unsigned long)rdes0 & 4096UL) != 0UL) != 0L) {
    #line 246 
    (x->rx_length) ++;
    #line 247 
    ret = 1;
  }
  #line 250 
  if (((unsigned long)rdes0 & 1024UL) != 0UL) 
                                              #line 251 
                                              (x->rx_vlan) ++;
  #line 254 
  return ret;
}

#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static void enh_desc_init_rx_desc(struct dma_desc *p, int disable_rx_ic, int mode, int end, int bfsize)
{
  #line 264 
  int __UNIQUE_ID___x443;
  #line 264 
  int tmp;
  #line 260 
  int bfsize1;
  #line 262 
  p->des0 |= 2147483648U;
  {
    #line 264 
    __UNIQUE_ID___x443 = bfsize;
    #line 264 
    int __UNIQUE_ID___y444 = 8188;
    #line 264 
    if (__UNIQUE_ID___x443 < __UNIQUE_ID___y444) 
                                                 #line 264 
                                                 tmp = __UNIQUE_ID___x443; else 
                                                                    #line 264 
                                                                    tmp = __UNIQUE_ID___y444;
    }
  #line 264 
  bfsize1 = tmp;
  #line 265 
  p->des1 |= (unsigned int)bfsize1 & 8191U;
  #line 267 
  if (mode == 1) 
                 #line 268 
                 ehn_desc_rx_set_on_chain(p); else 
                                                   #line 270 
                                                   ehn_desc_rx_set_on_ring(p,end,bfsize);
  #line 272 
  if (disable_rx_ic != 0) 
                          #line 273 
                          p->des1 |= 2147483648U;
  #line 274 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static void enh_desc_init_tx_desc(struct dma_desc *p, int mode, int end)
{
  #line 278 
  p->des0 &= 2147483647U;
  #line 279 
  if (mode == 1) 
                 #line 280 
                 enh_desc_end_tx_desc_on_chain(p); else 
                                                        #line 282 
                                                        enh_desc_end_tx_desc_on_ring(p,end);
  #line 283 
  return;
}

#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static int enh_desc_get_tx_owner(struct dma_desc *p)
{
  #line 287 
  return (int)(p->des0 >> 31);
}

#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static void enh_desc_set_tx_owner(struct dma_desc *p)
{
  #line 292 
  p->des0 |= 2147483648U;
  #line 293 
  return;
}

#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static void enh_desc_set_rx_owner(struct dma_desc *p, int disable_rx_ic)
{
  #line 297 
  p->des0 |= 2147483648U;
  #line 298 
  return;
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static int enh_desc_get_tx_ls(struct dma_desc *p)
{
  #line 302 
  return (int)((unsigned long)p->des0 >> 29) & 1;
}

#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static void enh_desc_release_tx_desc(struct dma_desc *p, int mode)
{
  #line 307 
  int ter = (int)((unsigned long)p->des0 >> 21) & 1;
  #line 309 
  memset((void *)p,0,8UL);
  #line 310 
  if (mode == 1) 
                 #line 311 
                 enh_desc_end_tx_desc_on_chain(p); else 
                                                        #line 313 
                                                        enh_desc_end_tx_desc_on_ring(p,ter);
  #line 314 
  return;
}

#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static void enh_desc_prepare_tx_desc(struct dma_desc *p, int is_fs, int len, bool csum_flag, int mode, bool tx_own, bool ls, unsigned int tot_pkt_len)
{
  #line 320 
  unsigned int tdes0 = p->des0;
  #line 322 
  if (mode == 1) 
                 #line 323 
                 enh_set_tx_desc_len_on_chain(p,len); else 
                                                           #line 325 
                                                           enh_set_tx_desc_len_on_ring(p,len);
  #line 327 
  if (is_fs != 0) 
                  #line 328 
                  tdes0 |= 268435456U; else 
                                            #line 330 
                                            tdes0 &= 4026531839U;
  #line 332 
  if ((long)((int)csum_flag != 0) != 0L) 
                                         #line 333 
                                         tdes0 |= 12582912U; else 
                                                                  #line 335 
                                                                  tdes0 &= 4282384383U;
  #line 337 
  if ((int)ls != 0) 
                    #line 338 
                    tdes0 |= 536870912U;
  #line 341 
  if ((int)tx_own != 0) 
                        #line 342 
                        tdes0 |= 2147483648U;
  #line 344 
  if (is_fs != 0 && (int)tx_own != 0) 
                                      #line 345 
                                      ldv_inline_asm();
  #line 351 
  p->des0 = tdes0;
  #line 352 
  return;
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static void enh_desc_set_tx_ic(struct dma_desc *p)
{
  #line 356 
  p->des0 |= 1073741824U;
  #line 357 
  return;
}

#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static int enh_desc_get_rx_frame_len(struct dma_desc *p, int rx_coe_type)
{
  #line 361 
  unsigned int csum = 0U;
  #line 368 
  if (rx_coe_type == 1) 
                        #line 369 
                        csum = 2U;
  #line 372 
  return (int)((((unsigned long)p->des0 >> 16) & (unsigned long)16383U) - (unsigned long)csum);
}

#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static void enh_desc_enable_tx_timestamp(struct dma_desc *p)
{
  #line 377 
  p->des0 |= 33554432U;
  #line 378 
  return;
}

#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static int enh_desc_get_tx_timestamp_status(struct dma_desc *p)
{
  #line 382 
  return (int)((unsigned long)p->des0 >> 17) & 1;
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static void enh_desc_get_timestamp(void *desc, u32 ats, u64 *ts)
{
  #line 387 
  u64 ns;
  #line 389 
  if (ats != 0U) {
    #line 390 
    struct dma_extended_desc *p = (struct dma_extended_desc *)desc;
    #line 391 
    ns = (unsigned long long)p->des6;
    #line 393 
    ns = (unsigned long long)p->des7 * 1000000000ULL + ns;
  }
  else {
    #line 395 
    struct dma_desc *p_0 = (struct dma_desc *)desc;
    #line 396 
    ns = (unsigned long long)p_0->des2;
    #line 397 
    ns = (unsigned long long)p_0->des3 * 1000000000ULL + ns;
  }
  #line 400 
  *ts = ns;
  #line 401 
  return;
}

#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static int enh_desc_get_rx_timestamp_status(void *desc, void *next_desc, u32 ats)
{
  #line 406 
  if (ats != 0U) {
    #line 407 
    struct dma_extended_desc *p = (struct dma_extended_desc *)desc;
    #line 408 
    return (int)((unsigned long)p->basic.des0 >> 7) & 1;
  }
  else {
    #line 410 
    struct dma_desc *p_0 = (struct dma_desc *)desc;
    #line 411 
    if (p_0->des2 == 4294967295U && p_0->des3 == 4294967295U) 
                                                              #line 414 
                                                              return 0; else 
                                                                    #line 416 
                                                                    return 1;
  }
}

#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static void enh_desc_display_ring(void *head, unsigned int size, bool rx)
{
  #line 423 
  int i;
  #line 425 
  char *tmp;
  #line 422 
  struct dma_extended_desc *ep = (struct dma_extended_desc *)head;
  #line 425 
  if ((int)rx != 0) 
                    #line 425 
                    tmp = (char *)"RX"; else 
                                             #line 425 
                                             tmp = (char *)"TX";
  #line 425 
  printk((char *)"\001",tmp);
  #line 427 
  i = 0;
  #line 427 
  while ((unsigned int)i < size) {
    {
      #line 428 
      u64 x;
      #line 430 
      x = *((u64 *)ep);
      #line 431 
      ;
      #line 431 
      ;
      #line 431 
      ;
      #line 431 
      ;
      #line 431 
      ;
      #line 431 
      printk((char *)"\001",i,(unsigned int)virt_to_phys((void *)ep),(unsigned int)x,(unsigned int)(x >> 32),ep->basic.des2,ep->basic.des3);
      #line 435 
      ep ++;
    }
    #line 427 
    i ++;
  }
  #line 437 
  printk((char *)"\001");
  #line 438 
  return;
}

#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static void enh_desc_get_addr(struct dma_desc *p, unsigned int *addr)
{
  #line 442 
  *addr = p->des2;
  #line 443 
  return;
}

#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static void enh_desc_set_addr(struct dma_desc *p, dma_addr_t addr)
{
  #line 447 
  p->des2 = (unsigned int)addr;
  #line 448 
  return;
}

#line 450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
static void enh_desc_clear(struct dma_desc *p)
{
  #line 452 
  p->des2 = 0U;
  #line 453 
  return;
}

#line 455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/enh_desc.c"
struct stmmac_desc_ops enh_desc_ops = {.init_rx_desc = & enh_desc_init_rx_desc, .init_tx_desc = & enh_desc_init_tx_desc, .prepare_tx_desc = & enh_desc_prepare_tx_desc, .set_tx_owner = & enh_desc_set_tx_owner, .get_tx_owner = & enh_desc_get_tx_owner, .release_tx_desc = & enh_desc_release_tx_desc, .set_tx_ic = & enh_desc_set_tx_ic, .get_tx_ls = & enh_desc_get_tx_ls, .tx_status = & enh_desc_get_tx_status, .get_tx_len = & enh_desc_get_tx_len, .set_rx_owner = & enh_desc_set_rx_owner, .get_rx_frame_len = & enh_desc_get_rx_frame_len, .rx_status = & enh_desc_get_rx_status, .rx_extended_status = & enh_desc_get_ext_status, .enable_tx_timestamp = & enh_desc_enable_tx_timestamp, .get_tx_timestamp_status = & enh_desc_get_tx_timestamp_status, .get_timestamp = & enh_desc_get_timestamp, .get_rx_timestamp_status = & enh_desc_get_rx_timestamp_status, .display_ring = & enh_desc_display_ring, .get_addr = & enh_desc_get_addr, .set_addr = & enh_desc_set_addr, .clear = & enh_desc_clear};
#line 558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_dma.c"
struct stmmac_dma_ops dwmac100_dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_dma.c"
static void dwmac100_dma_init(void *ioaddr, struct stmmac_dma_cfg *dma_cfg, int atds)
{
  #line 25 
  writel((unsigned int)(dma_cfg->pbl << 8),ioaddr + 4096U);
  #line 29 
  writel(106593U,ioaddr + 4124U);
  #line 30 
  return;
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_dma.c"
static void dwmac100_dma_init_rx(void *ioaddr, struct stmmac_dma_cfg *dma_cfg, dma_addr_t dma_rx_phy, u32 chan)
{
  #line 37 
  writel((unsigned int)dma_rx_phy,ioaddr + 4108U);
  #line 38 
  return;
}

#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_dma.c"
static void dwmac100_dma_init_tx(void *ioaddr, struct stmmac_dma_cfg *dma_cfg, dma_addr_t dma_tx_phy, u32 chan)
{
  #line 45 
  writel((unsigned int)dma_tx_phy,ioaddr + 4112U);
  #line 46 
  return;
}

#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_dma.c"
static void dwmac100_dma_operation_mode_tx(void *ioaddr, int mode, u32 channel, int fifosz, u8 qmode)
{
  #line 56 
  u32 csr6 = readl(ioaddr + 4120U);
  #line 58 
  if (mode <= 32) 
                  #line 59 
                  csr6 |= 4227072U;
  else 
    #line 60 
    if (mode <= 64) 
                    #line 61 
                    csr6 |= 16384U; else 
                                         #line 63 
                                         csr6 |= 32768U;
  #line 65 
  writel(csr6,ioaddr + 4120U);
  #line 66 
  return;
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_dma.c"
static void dwmac100_dump_dma_regs(void *ioaddr, u32 *reg_space)
{
  #line 70 
  int i;
  #line 72 
  i = 0;
  #line 72 
  while (i <= 8) {
    #line 73 
    *(reg_space + (unsigned long)(i + 1024)) = readl(ioaddr + ((unsigned long)(i * 4) + (unsigned long)4096U));
    #line 72 
    i ++;
  }
  #line 76 
  *(reg_space + 1044U) = readl(ioaddr + 4176U);
  #line 78 
  *(reg_space + 1045U) = readl(ioaddr + 4180U);
  #line 80 
  return;
}

#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_dma.c"
static void dwmac100_dma_diagnostic_fr(void *data, struct stmmac_extra_stats *x, void *ioaddr)
{
  #line 86 
  struct net_device_stats *stats = (struct net_device_stats *)data;
  #line 87 
  u32 csr8 = readl(ioaddr + 4128U);
  #line 89 
  if ((long)(csr8 != 0U) != 0L) {
    #line 90 
    if ((csr8 & 268435456U) != 0U) {
      #line 91 
      stats->rx_over_errors += 2048UL;
      #line 92 
      x->rx_overflow_cntr += 2048UL;
    }
    else {
      #line 94 
      unsigned int ove_cntr;
      #line 95 
      ove_cntr = (csr8 >> 17) & 2047U;
      #line 96 
      stats->rx_over_errors += (unsigned long)ove_cntr;
      #line 97 
      x->rx_overflow_cntr += (unsigned long)ove_cntr;
    }
    #line 100 
    if ((csr8 & 65536U) != 0U) {
      #line 101 
      stats->rx_missed_errors += 65535UL;
      #line 102 
      x->rx_missed_cntr += 65535UL;
    }
    else {
      #line 104 
      unsigned int miss_f = csr8 & 65535U;
      #line 105 
      stats->rx_missed_errors += (unsigned long)miss_f;
      #line 106 
      x->rx_missed_cntr += (unsigned long)miss_f;
    }
  }
  #line 109 
  return;
}

#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac100_dma.c"
struct stmmac_dma_ops dwmac100_dma_ops = {.reset = & dwmac_dma_reset, .init = & dwmac100_dma_init, .init_rx_chan = & dwmac100_dma_init_rx, .init_tx_chan = & dwmac100_dma_init_tx, .dump_regs = & dwmac100_dump_dma_regs, .dma_tx_mode = & dwmac100_dma_operation_mode_tx, .dma_diagnostic_fr = & dwmac100_dma_diagnostic_fr, .enable_dma_transmission = & dwmac_enable_dma_transmission, .enable_dma_irq = & dwmac_enable_dma_irq, .disable_dma_irq = & dwmac_disable_dma_irq, .start_tx = & dwmac_dma_start_tx, .stop_tx = & dwmac_dma_stop_tx, .start_rx = & dwmac_dma_start_rx, .stop_rx = & dwmac_dma_stop_rx, .dma_interrupt = & dwmac_dma_interrupt};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
#line 975 
static void cif_mutex_lock_lock_of_stmmac_priv(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 982  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
static void cif_mutex_unlock_lock_of_stmmac_priv(struct mutex *lock);
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
__inline static bool device_can_wakeup(struct device *dev)
{
  #line 79 
  return (_Bool)((int)dev->power.can_wakeup != 0);
}

#line 108 
#line 108 
int device_set_wakeup_enable(struct device *, bool);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 87 
#line 87 
int ethtool_op_get_ts_info(struct net_device *, struct ethtool_ts_info *);
#line 173 
#line 173 
void ethtool_convert_legacy_u32_to_link_mode(unsigned long *, u32);
#line 177 
#line 177 
bool ethtool_convert_link_mode_to_legacy_u32(u32 *, unsigned long *);
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 461 
int irq_set_irq_wake(unsigned int, unsigned int);
#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static int enable_irq_wake(unsigned int irq)
{
  #line 465 
  return irq_set_irq_wake(irq,1U);
}

#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static int disable_irq_wake(unsigned int irq)
{
  #line 470 
  return irq_set_irq_wake(irq,0U);
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phylink.h"
#line 256 
int phylink_ethtool_ksettings_get(struct phylink *, struct ethtool_link_ksettings *);
#line 258 
#line 258 
int phylink_ethtool_ksettings_set(struct phylink *, struct ethtool_link_ksettings *);
#line 260 
#line 260 
int phylink_ethtool_nway_reset(struct phylink *);
#line 261 
#line 261 
void phylink_ethtool_get_pauseparam(struct phylink *, struct ethtool_pauseparam *);
#line 263 
#line 263 
int phylink_ethtool_set_pauseparam(struct phylink *, struct ethtool_pauseparam *);
#line 265 
#line 265 
int phylink_get_eee_err(struct phylink *);
#line 267 
#line 267 
int phylink_ethtool_get_eee(struct phylink *, struct ethtool_eee *);
#line 268 
#line 268 
int phylink_ethtool_set_eee(struct phylink *, struct ethtool_eee *);
#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
#line 544 
unsigned long clk_get_rate(struct clk *);
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
#line 213 
int ptp_clock_index(struct ptp_clock *);
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
#line 949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
void stmmac_set_ethtool_ops(struct net_device *netdev);
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
#line 259 
void stmmac_disable_eee_mode(struct stmmac_priv *priv);
#line 260 
#line 260 
bool stmmac_eee_init(struct stmmac_priv *priv);
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static struct stmmac_stats stmmac_gstrings_stats[110U] = {{.stat_string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w'}, .sizeof_stat = 8, .stat_offset = 10176}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'a', (char)'r', (char)'r', (char)'i', (char)'e', (char)'r'}, .sizeof_stat = 8, .stat_offset = 10184}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'l', (char)'o', (char)'s', (char)'s', (char)'c', (char)'a', (char)'r', (char)'r', (char)'i', (char)'e', (char)'r'}, .sizeof_stat = 8, .stat_offset = 10192}, {.stat_string = {(char)'v', (char)'l', (char)'a', (char)'n', (char)'_', (char)'t', (char)'a', (char)'g'}, .sizeof_stat = 8, .stat_offset = 10200}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)'r', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 10208}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'v', (char)'l', (char)'a', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10216}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r'}, .sizeof_stat = 8, .stat_offset = 10224}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'f', (char)'l', (char)'u', (char)'s', (char)'h', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 10232}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'y', (char)'l', (char)'o', (char)'a', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, .sizeof_stat = 8, .stat_offset = 10240}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'i', (char)'p', (char)'_', (char)'h', (char)'e', (char)'a', (char)'d', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, .sizeof_stat = 8, .stat_offset = 10248}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'e', (char)'s', (char)'c'}, .sizeof_stat = 8, .stat_offset = 10256}, {.stat_string = {(char)'s', (char)'a', (char)'_', (char)'f', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l'}, .sizeof_stat = 8, .stat_offset = 10264}, {.stat_string = {(char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, .sizeof_stat = 8, .stat_offset = 10272}, {.stat_string = {(char)'i', (char)'p', (char)'c', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, .sizeof_stat = 8, .stat_offset = 10280}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10288}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 10296}, {.stat_string = {(char)'d', (char)'r', (char)'i', (char)'b', (char)'b', (char)'l', (char)'i', (char)'n', (char)'g', (char)'_', (char)'b', (char)'i', (char)'t'}, .sizeof_stat = 8, .stat_offset = 10304}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h'}, .sizeof_stat = 8, .stat_offset = 10312}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'i', (char)'i'}, .sizeof_stat = 8, .stat_offset = 10320}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 10328}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w'}, .sizeof_stat = 8, .stat_offset = 10336}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'w', (char)'a', (char)'t', (char)'c', (char)'h', (char)'d', (char)'o', (char)'g'}, .sizeof_stat = 8, .stat_offset = 10344}, {.stat_string = {(char)'d', (char)'a', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l'}, .sizeof_stat = 8, .stat_offset = 10352}, {.stat_string = {(char)'s', (char)'a', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l'}, .sizeof_stat = 8, .stat_offset = 10360}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'i', (char)'s', (char)'s', (char)'e', (char)'d', (char)'_', (char)'c', (char)'n', (char)'t', (char)'r'}, .sizeof_stat = 8, .stat_offset = 10368}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'n', (char)'t', (char)'r'}, .sizeof_stat = 8, .stat_offset = 10376}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'v', (char)'l', (char)'a', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10384}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'p', (char)'l', (char)'i', (char)'t', (char)'_', (char)'h', (char)'d', (char)'r', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10392}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'i', (char)'r', (char)'q'}, .sizeof_stat = 8, .stat_offset = 10400}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'r', (char)'o', (char)'c', (char)'e', (char)'s', (char)'s', (char)'_', (char)'s', (char)'t', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'i', (char)'r', (char)'q'}, .sizeof_stat = 8, .stat_offset = 10408}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'_', (char)'i', (char)'r', (char)'q'}, .sizeof_stat = 8, .stat_offset = 10416}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'i', (char)'r', (char)'q'}, .sizeof_stat = 8, .stat_offset = 10424}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'u', (char)'f', (char)'_', (char)'u', (char)'n', (char)'a', (char)'v', (char)'_', (char)'i', (char)'r', (char)'q'}, .sizeof_stat = 8, .stat_offset = 10432}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'r', (char)'o', (char)'c', (char)'e', (char)'s', (char)'s', (char)'_', (char)'s', (char)'t', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'i', (char)'r', (char)'q'}, .sizeof_stat = 8, .stat_offset = 10440}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'w', (char)'a', (char)'t', (char)'c', (char)'h', (char)'d', (char)'o', (char)'g', (char)'_', (char)'i', (char)'r', (char)'q'}, .sizeof_stat = 8, .stat_offset = 10448}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'a', (char)'r', (char)'l', (char)'y', (char)'_', (char)'i', (char)'r', (char)'q'}, .sizeof_stat = 8, .stat_offset = 10456}, {.stat_string = {(char)'f', (char)'a', (char)'t', (char)'a', (char)'l', (char)'_', (char)'b', (char)'u', (char)'s', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'_', (char)'i', (char)'r', (char)'q'}, .sizeof_stat = 8, .stat_offset = 10464}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'a', (char)'r', (char)'l', (char)'y', (char)'_', (char)'i', (char)'r', (char)'q'}, .sizeof_stat = 8, .stat_offset = 10472}, {.stat_string = {(char)'t', (char)'h', (char)'r', (char)'e', (char)'s', (char)'h', (char)'o', (char)'l', (char)'d'}, .sizeof_stat = 8, .stat_offset = 10480}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10488}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10496}, {.stat_string = {(char)'n', (char)'o', (char)'r', (char)'m', (char)'a', (char)'l', (char)'_', (char)'i', (char)'r', (char)'q', (char)'_', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10504}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'n', (char)'o', (char)'r', (char)'m', (char)'a', (char)'l', (char)'_', (char)'i', (char)'r', (char)'q', (char)'_', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10512}, {.stat_string = {(char)'n', (char)'a', (char)'p', (char)'i', (char)'_', (char)'p', (char)'o', (char)'l', (char)'l'}, .sizeof_stat = 8, .stat_offset = 10520}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'n', (char)'o', (char)'r', (char)'m', (char)'a', (char)'l', (char)'_', (char)'i', (char)'r', (char)'q', (char)'_', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10528}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'l', (char)'e', (char)'a', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10536}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'e', (char)'t', (char)'_', (char)'i', (char)'c', (char)'_', (char)'b', (char)'i', (char)'t'}, .sizeof_stat = 8, .stat_offset = 10544}, {.stat_string = {(char)'i', (char)'r', (char)'q', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'_', (char)'p', (char)'m', (char)'t', (char)'_', (char)'i', (char)'r', (char)'q', (char)'_', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10552}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'i', (char)'r', (char)'q', (char)'_', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10560}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'r', (char)'q', (char)'_', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10568}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)'_', (char)'i', (char)'r', (char)'q', (char)'_', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10576}, {.stat_string = {(char)'i', (char)'r', (char)'q', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'t', (char)'h', (char)'_', (char)'i', (char)'n', (char)'_', (char)'l', (char)'p', (char)'i', (char)'_', (char)'m', (char)'o', (char)'d', (char)'e', (char)'_', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10584}, {.stat_string = {(char)'i', (char)'r', (char)'q', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'t', (char)'h', (char)'_', (char)'e', (char)'x', (char)'i', (char)'t', (char)'_', (char)'l', (char)'p', (char)'i', (char)'_', (char)'m', (char)'o', (char)'d', (char)'e', (char)'_', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10592}, {.stat_string = {(char)'i', (char)'r', (char)'q', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'t', (char)'h', (char)'_', (char)'i', (char)'n', (char)'_', (char)'l', (char)'p', (char)'i', (char)'_', (char)'m', (char)'o', (char)'d', (char)'e', (char)'_', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10600}, {.stat_string = {(char)'i', (char)'r', (char)'q', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'t', (char)'h', (char)'_', (char)'e', (char)'x', (char)'i', (char)'t', (char)'_', (char)'l', (char)'p', (char)'i', (char)'_', (char)'m', (char)'o', (char)'d', (char)'e', (char)'_', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10608}, {.stat_string = {(char)'p', (char)'h', (char)'y', (char)'_', (char)'e', (char)'e', (char)'e', (char)'_', (char)'w', (char)'a', (char)'k', (char)'e', (char)'u', (char)'p', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'_', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10616}, {.stat_string = {(char)'i', (char)'p', (char)'_', (char)'h', (char)'d', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r'}, .sizeof_stat = 8, .stat_offset = 10624}, {.stat_string = {(char)'i', (char)'p', (char)'_', (char)'p', (char)'a', (char)'y', (char)'l', (char)'o', (char)'a', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r'}, .sizeof_stat = 8, .stat_offset = 10632}, {.stat_string = {(char)'i', (char)'p', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'b', (char)'y', (char)'p', (char)'a', (char)'s', (char)'s', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 10640}, {.stat_string = {(char)'i', (char)'p', (char)'v', (char)'4', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'r', (char)'c', (char)'v', (char)'d'}, .sizeof_stat = 8, .stat_offset = 10648}, {.stat_string = {(char)'i', (char)'p', (char)'v', (char)'6', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'r', (char)'c', (char)'v', (char)'d'}, .sizeof_stat = 8, .stat_offset = 10656}, {.stat_string = {(char)'n', (char)'o', (char)'_', (char)'p', (char)'t', (char)'p', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'s', (char)'g', (char)'_', (char)'t', (char)'y', (char)'p', (char)'e', (char)'_', (char)'e', (char)'x', (char)'t'}, .sizeof_stat = 8, .stat_offset = 10664}, {.stat_string = {(char)'p', (char)'t', (char)'p', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'s', (char)'g', (char)'_', (char)'t', (char)'y', (char)'p', (char)'e', (char)'_', (char)'s', (char)'y', (char)'n', (char)'c'}, .sizeof_stat = 8, .stat_offset = 10672}, {.stat_string = {(char)'p', (char)'t', (char)'p', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'s', (char)'g', (char)'_', (char)'t', (char)'y', (char)'p', (char)'e', (char)'_', (char)'f', (char)'o', (char)'l', (char)'l', (char)'o', (char)'w', (char)'_', (char)'u', (char)'p'}, .sizeof_stat = 8, .stat_offset = 10680}, {.stat_string = {(char)'p', (char)'t', (char)'p', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'s', (char)'g', (char)'_', (char)'t', (char)'y', (char)'p', (char)'e', (char)'_', (char)'d', (char)'e', (char)'l', (char)'a', (char)'y', (char)'_', (char)'r', (char)'e', (char)'q'}, .sizeof_stat = 8, .stat_offset = 10688}, {.stat_string = {(char)'p', (char)'t', (char)'p', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'s', (char)'g', (char)'_', (char)'t', (char)'y', (char)'p', (char)'e', (char)'_', (char)'d', (char)'e', (char)'l', (char)'a', (char)'y', (char)'_', (char)'r', (char)'e', (char)'s', (char)'p'}, .sizeof_stat = 8, .stat_offset = 10696}, {.stat_string = {(char)'p', (char)'t', (char)'p', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'s', (char)'g', (char)'_', (char)'t', (char)'y', (char)'p', (char)'e', (char)'_', (char)'p', (char)'d', (char)'e', (char)'l', (char)'a', (char)'y', (char)'_', (char)'r', (char)'e', (char)'q'}, .sizeof_stat = 8, .stat_offset = 10704}, {.stat_string = {(char)'p', (char)'t', (char)'p', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'s', (char)'g', (char)'_', (char)'t', (char)'y', (char)'p', (char)'e', (char)'_', (char)'p', (char)'d', (char)'e', (char)'l', (char)'a', (char)'y', (char)'_', (char)'r', (char)'e', (char)'s', (char)'p'}, .sizeof_stat = 8, .stat_offset = 10712}, {.stat_string = {(char)'p', (char)'t', (char)'p', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'s', (char)'g', (char)'_', (char)'t', (char)'y', (char)'p', (char)'e', (char)'_', (char)'p', (char)'d', (char)'e', (char)'l', (char)'a', (char)'y', (char)'_', (char)'f', (char)'o', (char)'l', (char)'l', (char)'o', (char)'w', (char)'_', (char)'u', (char)'p'}, .sizeof_stat = 8, .stat_offset = 10720}, {.stat_string = {(char)'p', (char)'t', (char)'p', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'s', (char)'g', (char)'_', (char)'t', (char)'y', (char)'p', (char)'e', (char)'_', (char)'a', (char)'n', (char)'n', (char)'o', (char)'u', (char)'n', (char)'c', (char)'e'}, .sizeof_stat = 8, .stat_offset = 10728}, {.stat_string = {(char)'p', (char)'t', (char)'p', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'s', (char)'g', (char)'_', (char)'t', (char)'y', (char)'p', (char)'e', (char)'_', (char)'m', (char)'a', (char)'n', (char)'a', (char)'g', (char)'e', (char)'m', (char)'e', (char)'n', (char)'t'}, .sizeof_stat = 8, .stat_offset = 10736}, {.stat_string = {(char)'p', (char)'t', (char)'p', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'s', (char)'g', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'r', (char)'e', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'d', (char)'_', (char)'t', (char)'y', (char)'p', (char)'e'}, .sizeof_stat = 8, .stat_offset = 10744}, {.stat_string = {(char)'p', (char)'t', (char)'p', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'t', (char)'y', (char)'p', (char)'e'}, .sizeof_stat = 8, .stat_offset = 10752}, {.stat_string = {(char)'p', (char)'t', (char)'p', (char)'_', (char)'v', (char)'e', (char)'r'}, .sizeof_stat = 8, .stat_offset = 10760}, {.stat_string = {(char)'t', (char)'i', (char)'m', (char)'e', (char)'s', (char)'t', (char)'a', (char)'m', (char)'p', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 10768}, {.stat_string = {(char)'a', (char)'v', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'r', (char)'c', (char)'v', (char)'d'}, .sizeof_stat = 8, .stat_offset = 10776}, {.stat_string = {(char)'a', (char)'v', (char)'_', (char)'t', (char)'a', (char)'g', (char)'g', (char)'e', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'r', (char)'c', (char)'v', (char)'d'}, .sizeof_stat = 8, .stat_offset = 10784}, {.stat_string = {(char)'v', (char)'l', (char)'a', (char)'n', (char)'_', (char)'t', (char)'a', (char)'g', (char)'_', (char)'p', (char)'r', (char)'i', (char)'o', (char)'r', (char)'i', (char)'t', (char)'y', (char)'_', (char)'v', (char)'a', (char)'l'}, .sizeof_stat = 8, .stat_offset = 10792}, {.stat_string = {(char)'l', (char)'3', (char)'_', (char)'f', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'_', (char)'m', (char)'a', (char)'t', (char)'c', (char)'h'}, .sizeof_stat = 8, .stat_offset = 10800}, {.stat_string = {(char)'l', (char)'4', (char)'_', (char)'f', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'_', (char)'m', (char)'a', (char)'t', (char)'c', (char)'h'}, .sizeof_stat = 8, .stat_offset = 10808}, {.stat_string = {(char)'l', (char)'3', (char)'_', (char)'l', (char)'4', (char)'_', (char)'f', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'_', (char)'n', (char)'o', (char)'_', (char)'m', (char)'a', (char)'t', (char)'c', (char)'h'}, .sizeof_stat = 8, .stat_offset = 10816}, {.stat_string = {(char)'i', (char)'r', (char)'q', (char)'_', (char)'p', (char)'c', (char)'s', (char)'_', (char)'a', (char)'n', (char)'e', (char)'_', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10824}, {.stat_string = {(char)'i', (char)'r', (char)'q', (char)'_', (char)'p', (char)'c', (char)'s', (char)'_', (char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10832}, {.stat_string = {(char)'i', (char)'r', (char)'q', (char)'_', (char)'r', (char)'g', (char)'m', (char)'i', (char)'i', (char)'_', (char)'n'}, .sizeof_stat = 8, .stat_offset = 10840}, {.stat_string = {(char)'m', (char)'t', (char)'l', (char)'_', (char)'t', (char)'x', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'u', (char)'s', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l'}, .sizeof_stat = 8, .stat_offset = 10872}, {.stat_string = {(char)'m', (char)'t', (char)'l', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'n', (char)'o', (char)'t', (char)'_', (char)'e', (char)'m', (char)'p', (char)'t', (char)'y'}, .sizeof_stat = 8, .stat_offset = 10880}, {.stat_string = {(char)'m', (char)'m', (char)'t', (char)'l', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l'}, .sizeof_stat = 8, .stat_offset = 10888}, {.stat_string = {(char)'m', (char)'t', (char)'l', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'r', (char)'e', (char)'a', (char)'d', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'w', (char)'r', (char)'i', (char)'t', (char)'e'}, .sizeof_stat = 8, .stat_offset = 10896}, {.stat_string = {(char)'m', (char)'t', (char)'l', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'r', (char)'e', (char)'a', (char)'d', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'w', (char)'a', (char)'i', (char)'t'}, .sizeof_stat = 8, .stat_offset = 10904}, {.stat_string = {(char)'m', (char)'t', (char)'l', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'r', (char)'e', (char)'a', (char)'d', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'r', (char)'e', (char)'a', (char)'d'}, .sizeof_stat = 8, .stat_offset = 10912}, {.stat_string = {(char)'m', (char)'t', (char)'l', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'r', (char)'e', (char)'a', (char)'d', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'i', (char)'d', (char)'l', (char)'e'}, .sizeof_stat = 8, .stat_offset = 10920}, {.stat_string = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'i', (char)'n', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e'}, .sizeof_stat = 8, .stat_offset = 10928}, {.stat_string = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'x', (char)'f', (char)'e', (char)'r'}, .sizeof_stat = 8, .stat_offset = 10936}, {.stat_string = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'i', (char)'d', (char)'l', (char)'e'}, .sizeof_stat = 8, .stat_offset = 10944}, {.stat_string = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'w', (char)'a', (char)'i', (char)'t'}, .sizeof_stat = 8, .stat_offset = 10952}, {.stat_string = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e'}, .sizeof_stat = 8, .stat_offset = 10960}, {.stat_string = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'g', (char)'m', (char)'i', (char)'i', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'r', (char)'o', (char)'t', (char)'o', (char)'_', (char)'e', (char)'n', (char)'g', (char)'i', (char)'n', (char)'e'}, .sizeof_stat = 8, .stat_offset = 10968}, {.stat_string = {(char)'m', (char)'t', (char)'l', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'f', (char)'i', (char)'l', (char)'l', (char)'_', (char)'l', (char)'e', (char)'v', (char)'e', (char)'l', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l'}, .sizeof_stat = 8, .stat_offset = 10976}, {.stat_string = {(char)'m', (char)'t', (char)'l', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'f', (char)'i', (char)'l', (char)'l', (char)'_', (char)'a', (char)'b', (char)'o', (char)'v', (char)'e', (char)'_', (char)'t', (char)'h', (char)'r', (char)'e', (char)'s', (char)'h'}, .sizeof_stat = 8, .stat_offset = 10984}, {.stat_string = {(char)'m', (char)'t', (char)'l', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'f', (char)'i', (char)'l', (char)'l', (char)'_', (char)'b', (char)'e', (char)'l', (char)'o', (char)'w', (char)'_', (char)'t', (char)'h', (char)'r', (char)'e', (char)'s', (char)'h'}, .sizeof_stat = 8, .stat_offset = 10992}, {.stat_string = {(char)'m', (char)'t', (char)'l', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'f', (char)'i', (char)'l', (char)'l', (char)'_', (char)'l', (char)'e', (char)'v', (char)'e', (char)'l', (char)'_', (char)'e', (char)'m', (char)'p', (char)'t', (char)'y'}, .sizeof_stat = 8, .stat_offset = 11000}, {.stat_string = {(char)'m', (char)'t', (char)'l', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'r', (char)'e', (char)'a', (char)'d', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'f', (char)'l', (char)'u', (char)'s', (char)'h'}, .sizeof_stat = 8, .stat_offset = 11008}, {.stat_string = {(char)'m', (char)'t', (char)'l', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'r', (char)'e', (char)'a', (char)'d', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'r', (char)'e', (char)'a', (char)'d', (char)'_', (char)'d', (char)'a', (char)'t', (char)'a'}, .sizeof_stat = 8, .stat_offset = 11016}, {.stat_string = {(char)'m', (char)'t', (char)'l', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'r', (char)'e', (char)'a', (char)'d', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'u', (char)'s'}, .sizeof_stat = 8, .stat_offset = 11024}, {.stat_string = {(char)'m', (char)'t', (char)'l', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'r', (char)'e', (char)'a', (char)'d', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'i', (char)'d', (char)'l', (char)'e'}, .sizeof_stat = 8, .stat_offset = 11032}, {.stat_string = {(char)'m', (char)'t', (char)'l', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'a', (char)'c', (char)'t', (char)'i', (char)'v', (char)'e'}, .sizeof_stat = 8, .stat_offset = 11040}, {.stat_string = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o'}, .sizeof_stat = 8, .stat_offset = 11048}, {.stat_string = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'g', (char)'m', (char)'i', (char)'i', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'r', (char)'o', (char)'t', (char)'o', (char)'_', (char)'e', (char)'n', (char)'g', (char)'i', (char)'n', (char)'e'}, .sizeof_stat = 8, .stat_offset = 11056}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'s', (char)'o', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 11064}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'s', (char)'o', (char)'_', (char)'n', (char)'f', (char)'r', (char)'a', (char)'g', (char)'s'}, .sizeof_stat = 8, .stat_offset = 11072}};
#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static struct stmmac_stats stmmac_mmc[85U] = {{.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12076}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12080}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'g'}, .sizeof_stat = 4, .stat_offset = 12084}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'g'}, .sizeof_stat = 4, .stat_offset = 12088}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12092}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12096}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'t', (char)'o', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12100}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'t', (char)'o', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12104}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12108}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'t', (char)'o', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12112}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12116}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12120}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12124}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12128}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'s', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)'c', (char)'o', (char)'l', (char)'_', (char)'g'}, .sizeof_stat = 4, .stat_offset = 12132}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'o', (char)'l', (char)'_', (char)'g'}, .sizeof_stat = 4, .stat_offset = 12136}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)'r', (char)'e', (char)'d'}, .sizeof_stat = 4, .stat_offset = 12140}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'l', (char)'a', (char)'t', (char)'e', (char)'c', (char)'o', (char)'l'}, .sizeof_stat = 4, .stat_offset = 12144}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'e', (char)'x', (char)'e', (char)'s', (char)'s', (char)'c', (char)'o', (char)'l'}, .sizeof_stat = 4, .stat_offset = 12148}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'c', (char)'a', (char)'r', (char)'r', (char)'i', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12152}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'_', (char)'g'}, .sizeof_stat = 4, .stat_offset = 12156}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'_', (char)'g'}, .sizeof_stat = 4, .stat_offset = 12160}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'e', (char)'x', (char)'c', (char)'e', (char)'s', (char)'s', (char)'d', (char)'e', (char)'f'}, .sizeof_stat = 4, .stat_offset = 12164}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e'}, .sizeof_stat = 4, .stat_offset = 12168}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'v', (char)'l', (char)'a', (char)'n', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'g'}, .sizeof_stat = 4, .stat_offset = 12172}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12176}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12180}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'_', (char)'g'}, .sizeof_stat = 4, .stat_offset = 12184}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'g'}, .sizeof_stat = 4, .stat_offset = 12188}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'g'}, .sizeof_stat = 4, .stat_offset = 12192}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12196}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12200}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'r', (char)'u', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12204}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12208}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'g'}, .sizeof_stat = 4, .stat_offset = 12212}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'g'}, .sizeof_stat = 4, .stat_offset = 12216}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12220}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12224}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'t', (char)'o', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12228}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'t', (char)'o', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12232}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12236}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'t', (char)'o', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12240}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'g'}, .sizeof_stat = 4, .stat_offset = 12244}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12248}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'a', (char)'u', (char)'t', (char)'o', (char)'f', (char)'r', (char)'a', (char)'n', (char)'g', (char)'e', (char)'t', (char)'y', (char)'p', (char)'e'}, .sizeof_stat = 4, .stat_offset = 12252}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 12256}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w'}, .sizeof_stat = 4, .stat_offset = 12260}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'v', (char)'l', (char)'a', (char)'n', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'g', (char)'b'}, .sizeof_stat = 4, .stat_offset = 12264}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'w', (char)'a', (char)'t', (char)'c', (char)'h', (char)'d', (char)'o', (char)'g', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12268}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'c', (char)'_', (char)'i', (char)'n', (char)'t', (char)'r', (char)'_', (char)'m', (char)'a', (char)'s', (char)'k'}, .sizeof_stat = 4, .stat_offset = 12272}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'c', (char)'_', (char)'i', (char)'n', (char)'t', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12276}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'v', (char)'4', (char)'_', (char)'g', (char)'d'}, .sizeof_stat = 4, .stat_offset = 12280}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'v', (char)'4', (char)'_', (char)'h', (char)'d', (char)'e', (char)'r', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12284}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'v', (char)'4', (char)'_', (char)'n', (char)'o', (char)'p', (char)'a', (char)'y'}, .sizeof_stat = 4, .stat_offset = 12288}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'v', (char)'4', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g'}, .sizeof_stat = 4, .stat_offset = 12292}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'v', (char)'4', (char)'_', (char)'u', (char)'d', (char)'s', (char)'b', (char)'l'}, .sizeof_stat = 4, .stat_offset = 12296}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'v', (char)'4', (char)'_', (char)'g', (char)'d', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 12300}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'v', (char)'4', (char)'_', (char)'h', (char)'d', (char)'e', (char)'r', (char)'r', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 12304}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'v', (char)'4', (char)'_', (char)'n', (char)'o', (char)'p', (char)'a', (char)'y', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 12308}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'v', (char)'4', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 12312}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'v', (char)'4', (char)'_', (char)'u', (char)'d', (char)'s', (char)'b', (char)'l', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 12316}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'v', (char)'6', (char)'_', (char)'g', (char)'d', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 12320}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'v', (char)'6', (char)'_', (char)'h', (char)'d', (char)'e', (char)'r', (char)'r', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 12324}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'v', (char)'6', (char)'_', (char)'n', (char)'o', (char)'p', (char)'a', (char)'y', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 12328}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'v', (char)'6', (char)'_', (char)'g', (char)'d'}, .sizeof_stat = 4, .stat_offset = 12332}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'v', (char)'6', (char)'_', (char)'h', (char)'d', (char)'e', (char)'r', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12336}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'v', (char)'6', (char)'_', (char)'n', (char)'o', (char)'p', (char)'a', (char)'y'}, .sizeof_stat = 4, .stat_offset = 12340}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'u', (char)'d', (char)'p', (char)'_', (char)'g', (char)'d'}, .sizeof_stat = 4, .stat_offset = 12344}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'u', (char)'d', (char)'p', (char)'_', (char)'e', (char)'r', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12348}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'g', (char)'d'}, .sizeof_stat = 4, .stat_offset = 12352}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'e', (char)'r', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12356}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'c', (char)'m', (char)'p', (char)'_', (char)'g', (char)'d'}, .sizeof_stat = 4, .stat_offset = 12360}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'c', (char)'m', (char)'p', (char)'_', (char)'e', (char)'r', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12364}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'u', (char)'d', (char)'p', (char)'_', (char)'g', (char)'d', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 12368}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'u', (char)'d', (char)'p', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 12372}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'g', (char)'d', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 12376}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 12380}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'c', (char)'m', (char)'p', (char)'_', (char)'g', (char)'d', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 12384}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'c', (char)'m', (char)'p', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 12388}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'p', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'m', (char)'e', (char)'n', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12392}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'h', (char)'o', (char)'l', (char)'d', (char)'_', (char)'r', (char)'e', (char)'q', (char)'_', (char)'c', (char)'n', (char)'t', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12396}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'_', (char)'a', (char)'s', (char)'s', (char)'e', (char)'m', (char)'b', (char)'l', (char)'y', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12400}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'_', (char)'s', (char)'m', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12404}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'_', (char)'a', (char)'s', (char)'s', (char)'e', (char)'m', (char)'b', (char)'l', (char)'y', (char)'_', (char)'o', (char)'k', (char)'_', (char)'c', (char)'n', (char)'t', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12408}, {.stat_string = {(char)'m', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'p', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'m', (char)'e', (char)'n', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t', (char)'r'}, .sizeof_stat = 4, .stat_offset = 12412}};
#line 258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static void stmmac_ethtool_getdrvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  #line 261 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 263 
  if ((priv->plat)->has_gmac != 0 || (priv->plat)->has_gmac4 != 0) 
                                                                   #line 264 
                                                                   strlcpy((char *)(& info->driver),(char *)"st_gmac",32UL);
  else 
    #line 265 
    if ((priv->plat)->has_xgmac != 0) 
                                      #line 266 
                                      strlcpy((char *)(& info->driver),(char *)"st_xgmac",32UL); else 
                                                                    #line 268 
                                                                    strlcpy((char *)(& info->driver),(char *)"st_mac100",32UL);
  #line 271 
  strlcpy((char *)(& info->version),(char *)"Jan_2016",32UL);
  #line 272 
  return;
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static int stmmac_ethtool_get_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 277 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 279 
  if (((priv->hw)->pcs & 1U) != 0U || ((priv->hw)->pcs & 2U) != 0U) {
    #line 294 
    int __result;
    #line 281 
    struct rgmii_adv adv;
    #line 282 
    u32 supported;
    #line 282 
    u32 advertising;
    #line 282 
    u32 lp_advertising;
    #line 284 
    if (priv->xstats.pcs_link == 0UL) {
      #line 285 
      cmd->base.speed = 4294967295U;
      #line 286 
      cmd->base.duplex = (unsigned char)255U;
      #line 287 
      return 0;
    }
    #line 289 
    cmd->base.duplex = (unsigned char)priv->xstats.pcs_duplex;
    #line 291 
    cmd->base.speed = (unsigned int)priv->xstats.pcs_speed;
    #line 294 
    __result = -22;
    #line 294 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->pcs_get_adv_lp != (void (*)(void *, struct rgmii_adv *))0) {
      #line 294 
      (*(((priv->hw)->mac)->pcs_get_adv_lp))(priv->ioaddr,& adv);
      #line 294 
      __result = 0;
    }
    #line 294 
    if (__result != 0) 
                       #line 295 
                       return -95;
    #line 299 
    ethtool_convert_link_mode_to_legacy_u32(& supported,(unsigned long *)(& cmd->link_modes.supported));
    #line 301 
    ethtool_convert_link_mode_to_legacy_u32(& advertising,(unsigned long *)(& cmd->link_modes.advertising));
    #line 303 
    ethtool_convert_link_mode_to_legacy_u32(& lp_advertising,(unsigned long *)(& cmd->link_modes.lp_advertising));
    #line 306 
    if ((adv.pause & 1U) != 0U) 
                                #line 307 
                                advertising |= 8192U;
    #line 308 
    if ((adv.pause & 2U) != 0U) 
                                #line 309 
                                advertising |= 16384U;
    #line 310 
    if ((adv.lp_pause & 1U) != 0U) 
                                   #line 311 
                                   lp_advertising |= 8192U;
    #line 312 
    if ((adv.lp_pause & 2U) != 0U) 
                                   #line 313 
                                   lp_advertising |= 16384U;
    #line 316 
    cmd->base.autoneg = (unsigned char)64U;
    #line 317 
    supported |= 64U;
    #line 318 
    advertising |= 64U;
    #line 319 
    lp_advertising |= 64U;
    #line 321 
    if (adv.duplex != 0U) {
      #line 322 
      supported |= 42U;
      #line 325 
      advertising |= 42U;
    }
    else {
      #line 329 
      supported |= 21U;
      #line 332 
      advertising |= 21U;
    }
    #line 336 
    if (adv.lp_duplex != 0U) 
                             #line 337 
                             lp_advertising |= 42U; else 
                                                         #line 341 
                                                         lp_advertising |= 21U;
    #line 344 
    cmd->base.port = (unsigned char)255U;
    #line 346 
    ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.supported),supported);
    #line 348 
    ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.advertising),advertising);
    #line 350 
    ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.lp_advertising),lp_advertising);
    #line 353 
    return 0;
  }
  #line 356 
  return phylink_ethtool_ksettings_get(priv->phylink,cmd);
}

#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static int stmmac_ethtool_set_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 363 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 365 
  if (((priv->hw)->pcs & 1U) != 0U || ((priv->hw)->pcs & 2U) != 0U) {
    #line 367 
    u32 mask = 8256U;
    #line 370 
    if ((unsigned int)cmd->base.autoneg != 1U) 
                                               #line 371 
                                               return -22;
    #line 373 
    mask &= 63U;
    #line 380 
    cif_mutex_lock_lock_of_stmmac_priv(& priv->lock);
    {
      #line 381 
      int __result = -22;
      #line 381 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->pcs_ctrl_ane != (void (*)(void *, bool , bool , bool ))0) {
        #line 381 
        (*(((priv->hw)->mac)->pcs_ctrl_ane))(priv->ioaddr,(_Bool)1,(_Bool)((priv->hw)->ps != 0U),(_Bool)0);
        #line 381 
        __result = 0;
      }
      #line 381 
      int tmp_2 = __result;
    }
    #line 382 
    cif_mutex_unlock_lock_of_stmmac_priv(& priv->lock);
    #line 384 
    return 0;
  }
  #line 387 
  return phylink_ethtool_ksettings_set(priv->phylink,cmd);
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static u32 stmmac_ethtool_getmsglevel(struct net_device *dev)
{
  #line 392 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 393 
  return priv->msg_enable;
}

#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static void stmmac_ethtool_setmsglevel(struct net_device *dev, u32 level)
{
  #line 398 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 399 
  priv->msg_enable = level;
  #line 400 
  return;
}

#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static int stmmac_check_if_running(struct net_device *dev)
{
  #line 405 
  if (! netif_running(dev)) 
                            #line 406 
                            return -16;
  #line 407 
  return 0;
}

#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static int stmmac_ethtool_get_regs_len(struct net_device *dev)
{
  #line 412 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 414 
  if ((priv->plat)->has_xgmac != 0) 
                                    #line 415 
                                    return 14588;
  #line 416 
  return 4192;
}

#line 419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static void stmmac_ethtool_gregs(struct net_device *dev, struct ethtool_regs *regs, void *space)
{
  #line 422 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 423 
  u32 *reg_space = (u32 *)space;
  {
    #line 425 
    int __result = -22;
    #line 425 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->dump_regs != (void (*)(struct mac_device_info *, u32 *))0) {
      #line 425 
      (*(((priv->hw)->mac)->dump_regs))(priv->hw,reg_space);
      #line 425 
      __result = 0;
    }
    #line 425 
    int tmp_2 = __result;
  }
  {
    #line 426 
    int __result_0 = -22;
    #line 426 
    if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->dump_regs != (void (*)(void *, u32 *))0) {
      #line 426 
      (*(((priv->hw)->dma)->dump_regs))(priv->ioaddr,reg_space);
      #line 426 
      __result_0 = 0;
    }
    #line 426 
    int tmp_4 = __result_0;
  }
  #line 428 
  if ((priv->plat)->has_xgmac == 0) 
                                    #line 430 
                                    memcpy((void *)(reg_space + 55U),(void *)(reg_space + 1024U),92UL);
  #line 432 
  return;
}

#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static int stmmac_nway_reset(struct net_device *dev)
{
  #line 438 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 440 
  return phylink_ethtool_nway_reset(priv->phylink);
}

#line 444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static void stmmac_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause_0)
{
  #line 448 
  struct rgmii_adv adv_lp;
  #line 447 
  struct stmmac_priv *priv = netdev_priv(netdev);
  #line 450 
  if ((priv->hw)->pcs != 0U) {
    #line 450 
    int __result;
    #line 450 
    __result = -22;
    #line 450 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->pcs_get_adv_lp != (void (*)(void *, struct rgmii_adv *))0) {
      #line 450 
      (*(((priv->hw)->mac)->pcs_get_adv_lp))(priv->ioaddr,& adv_lp);
      #line 450 
      __result = 0;
    }
    #line 450 
    if (__result == 0) {
      #line 451 
      pause_0->autoneg = 1U;
      #line 452 
      if (adv_lp.pause == 0U) 
                              #line 453 
                              return;
    }
    else 
         #line 455 
         phylink_ethtool_get_pauseparam(priv->phylink,pause_0);
  }
  else 
       #line 455 
       phylink_ethtool_get_pauseparam(priv->phylink,pause_0);
  #line 456 
  return;
}

#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static int stmmac_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause_0)
{
  #line 464 
  struct rgmii_adv adv_lp;
  #line 463 
  struct stmmac_priv *priv = netdev_priv(netdev);
  #line 466 
  if ((priv->hw)->pcs != 0U) {
    #line 466 
    int __result;
    #line 466 
    __result = -22;
    #line 466 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->pcs_get_adv_lp != (void (*)(void *, struct rgmii_adv *))0) {
      #line 466 
      (*(((priv->hw)->mac)->pcs_get_adv_lp))(priv->ioaddr,& adv_lp);
      #line 466 
      __result = 0;
    }
    #line 466 
    if (__result == 0) {
      #line 467 
      pause_0->autoneg = 1U;
      #line 468 
      if (adv_lp.pause == 0U) 
                              #line 469 
                              return -95;
      #line 470 
      return 0;
    }
    else 
         #line 466 
         goto _LAND;
  }
  else {
    #line 466 
    _LAND: 
    #line 472 
    return phylink_ethtool_set_pauseparam(priv->phylink,pause_0);
  }
}

#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static void stmmac_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *dummy, u64 *data)
{
  #line 494 
  int __result_0;
  #line 482 
  unsigned long count;
  #line 483 
  int i;
  #line 483 
  int ret;
  #line 479 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 480 
  u32 rx_queues_count = (priv->plat)->rx_queues_to_use;
  #line 481 
  u32 tx_queues_count = (priv->plat)->tx_queues_to_use;
  #line 483 
  int j = 0;
  #line 485 
  if (priv->dma_cap.asp != 0U) {
    #line 486 
    i = 0;
    #line 486 
    while ((unsigned int)i <= 95U) {
      #line 487 
      int __result;
      #line 487 
      __result = -22;
      #line 487 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->safety_feat_dump != (int (*)(struct stmmac_safety_stats *, int , unsigned long *, char **))0) 
        #line 487 
        __result = (*(((priv->hw)->mac)->safety_feat_dump))(& priv->sstats,i,& count,(char **)0);
      #line 487 
      if (__result == 0) {
        #line 489 
        int tmp_0;
        #line 489 
        tmp_0 = j;
        #line 489 
        j ++;
        #line 489 
        *(data + (unsigned long)tmp_0) = (unsigned long long)count;
      }
      #line 486 
      i ++;
    }
  }
  #line 494 
  __result_0 = -22;
  #line 494 
  if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->dma_diagnostic_fr != (void (*)(void *, struct stmmac_extra_stats *, void *))0) {
    #line 494 
    (*(((priv->hw)->dma)->dma_diagnostic_fr))((void *)(& dev->stats),& priv->xstats,priv->ioaddr);
    #line 494 
    __result_0 = 0;
  }
  #line 494 
  ret = __result_0;
  #line 496 
  if (ret != 0) {
    #line 498 
    if (priv->dma_cap.rmon != 0U) {
      {
        #line 499 
        int __result_1 = -22;
        #line 499 
        if ((priv->hw)->mmc != (struct stmmac_mmc_ops *)0 && ((priv->hw)->mmc)->read != (void (*)(void *, struct stmmac_counters *))0) {
          #line 499 
          (*(((priv->hw)->mmc)->read))(priv->mmcaddr,& priv->mmc);
          #line 499 
          __result_1 = 0;
        }
        #line 499 
        int tmp_3 = __result_1;
      }
      #line 501 
      i = 0;
      #line 501 
      while ((unsigned int)i <= 84U) {
        {
          #line 502 
          char *p;
          #line 505 
          int tmp_3_0;
          #line 503 
          p = (char *)priv + (unsigned long)stmmac_mmc[i].stat_offset;
          #line 505 
          tmp_3_0 = j;
          #line 505 
          j ++;
          #line 505 
          if (stmmac_mmc[i].sizeof_stat == 8) 
                                              #line 505 
                                              *(data + (unsigned long)tmp_3_0) = *((u64 *)p); else 
                                                                    #line 505 
                                                                    *(data + (unsigned long)tmp_3_0) = (unsigned long long)*((u32 *)p);
        }
        #line 501 
        i ++;
      }
    }
    #line 510 
    if (priv->eee_enabled != 0) {
      #line 511 
      int val = phylink_get_eee_err(priv->phylink);
      #line 512 
      if (val != 0) 
                    #line 513 
                    priv->xstats.phy_eee_wakeup_error_n = (unsigned long)val;
    }
    #line 516 
    if (priv->synopsys_id > 52) {
      #line 517 
      int __result_2 = -22;
      #line 517 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->debug != (void (*)(void *, struct stmmac_extra_stats *, u32 , u32 ))0) {
        #line 517 
        (*(((priv->hw)->mac)->debug))(priv->ioaddr,& priv->xstats,rx_queues_count,tx_queues_count);
        #line 517 
        __result_2 = 0;
      }
      #line 517 
      int tmp_5 = __result_2;
    }
  }
  #line 521 
  i = 0;
  #line 521 
  while ((unsigned int)i <= 109U) {
    {
      #line 523 
      int tmp_5_0;
      #line 522 
      char *p_0 = (char *)priv + (unsigned long)stmmac_gstrings_stats[i].stat_offset;
      #line 523 
      tmp_5_0 = j;
      #line 523 
      j ++;
      #line 523 
      if (stmmac_gstrings_stats[i].sizeof_stat == 8) 
                                                     #line 523 
                                                     *(data + (unsigned long)tmp_5_0) = *((u64 *)p_0); else 
                                                                    #line 523 
                                                                    *(data + (unsigned long)tmp_5_0) = (unsigned long long)*((u32 *)p_0);
    }
    #line 521 
    i ++;
  }
  #line 526 
  return;
}

#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static int stmmac_get_sset_count(struct net_device *netdev, int sset)
{
  #line 531 
  int i;
  #line 531 
  int len;
  #line 530 
  struct stmmac_priv *priv = netdev_priv(netdev);
  #line 531 
  int safety_len = 0;
  #line 533 
  switch (sset) {
    #line 534 
    case 1: 
            #line 534 
    ;
    #line 535 
    len = 110;
    #line 537 
    if (priv->dma_cap.rmon != 0U) 
                                  #line 538 
                                  len = (int)((unsigned int)len + 85U);
    #line 539 
    if (priv->dma_cap.asp != 0U) {
      #line 540 
      i = 0;
      #line 540 
      while ((unsigned int)i <= 95U) {
        #line 541 
        int __result;
        #line 541 
        __result = -22;
        #line 541 
        if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->safety_feat_dump != (int (*)(struct stmmac_safety_stats *, int , unsigned long *, char **))0) 
          #line 541 
          __result = (*(((priv->hw)->mac)->safety_feat_dump))(& priv->sstats,i,(unsigned long *)0UL,(char **)0);
        #line 541 
        if (__result == 0) 
                           #line 544 
                           safety_len ++;
        #line 540 
        i ++;
      }
      #line 547 
      len += safety_len;
    }
    #line 550 
    return len;
    #line 551 
    case 0: 
            #line 551 
    ;
    #line 552 
    return stmmac_selftest_get_count(priv);
    #line 553 
    default: 
             #line 553 
    ;
    #line 554 
    return -95;
  }
}

#line 558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static void stmmac_get_strings(struct net_device *dev, u32 stringset, u8 *data)
{
  #line 560 
  int i;
  #line 561 
  u8 *p = data;
  #line 562 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 564 
  switch (stringset) {
    #line 565 
    case (u32)1: 
                 #line 565 
    ;
    #line 566 
    if (priv->dma_cap.asp != 0U) {
      #line 567 
      i = 0;
      #line 567 
      while ((unsigned int)i <= 95U) {
        {
          #line 569 
          int __result;
          #line 568 
          char *desc;
          #line 569 
          __result = -22;
          #line 569 
          if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->safety_feat_dump != (int (*)(struct stmmac_safety_stats *, int , unsigned long *, char **))0) 
            #line 569 
            __result = (*(((priv->hw)->mac)->safety_feat_dump))(& priv->sstats,i,(unsigned long *)0UL,& desc);
          #line 569 
          if (__result == 0) {
            #line 572 
            memcpy((void *)p,(void *)desc,32UL);
            #line 573 
            p += 32U;
          }
        }
        #line 567 
        i ++;
      }
    }
    #line 577 
    if (priv->dma_cap.rmon != 0U) {
      #line 578 
      i = 0;
      #line 578 
      while ((unsigned int)i <= 84U) {
        #line 579 
        memcpy((void *)p,(void *)(& stmmac_mmc[i].stat_string),32UL);
        #line 581 
        p += 32U;
        #line 578 
        i ++;
      }
    }
    #line 583 
    i = 0;
    #line 583 
    while ((unsigned int)i <= 109U) {
      #line 584 
      memcpy((void *)p,(void *)(& stmmac_gstrings_stats[i].stat_string),32UL);
      #line 586 
      p += 32U;
      #line 583 
      i ++;
    }
    #line 588 
    break;
    #line 589 
    case (u32)0: 
                 #line 589 
    ;
    #line 590 
    stmmac_selftest_get_strings(priv,p);
    #line 591 
    break;
    #line 592 
    default: 
             #line 592 
    ;
    {
      #line 593 
      int __ret_warn_on = 1;
      #line 593 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 594 
        ldv_inline_asm();
        #line 595 
        ldv_inline_asm();
      }
      #line 593 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    #line 594 
    break;
  }
  #line 596 
  return;
}

#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static void stmmac_get_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  #line 601 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 603 
  cif_mutex_lock_lock_of_stmmac_priv(& priv->lock);
  #line 604 
  if ((int)device_can_wakeup(priv->device) != 0) {
    #line 605 
    wol->supported = 34U;
    #line 606 
    wol->wolopts = (unsigned int)priv->wolopts;
  }
  #line 608 
  cif_mutex_unlock_lock_of_stmmac_priv(& priv->lock);
  #line 609 
  return;
}

#line 611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static int stmmac_set_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  #line 613 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 614 
  u32 support = 34U;
  #line 619 
  if (priv->hw_cap_support != 0 && priv->dma_cap.pmt_magic_frame == 0U) 
    #line 620 
    wol->wolopts &= 4294967263U;
  #line 622 
  if (! device_can_wakeup(priv->device)) 
                                         #line 623 
                                         return -22;
  #line 625 
  if ((wol->wolopts & ~ support) != 0U) 
                                        #line 626 
                                        return -22;
  #line 628 
  if (wol->wolopts != 0U) {
    #line 629 
    printk((char *)"\001");
    #line 630 
    device_set_wakeup_enable(priv->device,(_Bool)1);
    #line 631 
    enable_irq_wake((unsigned int)priv->wol_irq);
  }
  else {
    #line 633 
    device_set_wakeup_enable(priv->device,(_Bool)0);
    #line 634 
    disable_irq_wake((unsigned int)priv->wol_irq);
  }
  #line 637 
  cif_mutex_lock_lock_of_stmmac_priv(& priv->lock);
  #line 638 
  priv->wolopts = (int)wol->wolopts;
  #line 639 
  cif_mutex_unlock_lock_of_stmmac_priv(& priv->lock);
  #line 641 
  return 0;
}

#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static int stmmac_ethtool_op_get_eee(struct net_device *dev, struct ethtool_eee *edata)
{
  #line 647 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 649 
  if (priv->dma_cap.eee == 0U) 
                               #line 650 
                               return -95;
  #line 652 
  edata->eee_enabled = (unsigned int)priv->eee_enabled;
  #line 653 
  edata->eee_active = (unsigned int)priv->eee_active;
  #line 654 
  edata->tx_lpi_timer = (unsigned int)priv->tx_lpi_timer;
  #line 656 
  return phylink_ethtool_get_eee(priv->phylink,edata);
}

#line 659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static int stmmac_ethtool_op_set_eee(struct net_device *dev, struct ethtool_eee *edata)
{
  #line 663 
  int ret;
  #line 662 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 665 
  if (edata->eee_enabled == 0U) 
                                #line 666 
                                stmmac_disable_eee_mode(priv);
  else {
    #line 672 
    edata->eee_enabled = (unsigned int)stmmac_eee_init(priv);
    #line 673 
    if (edata->eee_enabled == 0U) 
                                  #line 674 
                                  return -95;
  }
  #line 677 
  ret = phylink_ethtool_set_eee(priv->phylink,edata);
  #line 678 
  if (ret != 0) 
                #line 679 
                return ret;
  #line 681 
  priv->eee_enabled = (int)edata->eee_enabled;
  #line 682 
  priv->tx_lpi_timer = (int)edata->tx_lpi_timer;
  #line 683 
  return 0;
}

#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static u32 stmmac_usec2riwt(u32 usec, struct stmmac_priv *priv)
{
  #line 688 
  unsigned long clk = clk_get_rate((priv->plat)->stmmac_clk);
  #line 690 
  if (clk == 0UL) {
    #line 691 
    clk = (unsigned long)(priv->plat)->clk_ref_rate;
    #line 692 
    if (clk == 0UL) 
                    #line 693 
                    return 0U;
  }
  #line 696 
  return (unsigned int)(((unsigned long)usec * (clk / 1000000UL)) / 256UL);
}

#line 699  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static u32 stmmac_riwt2usec(u32 riwt, struct stmmac_priv *priv)
{
  #line 701 
  unsigned long clk = clk_get_rate((priv->plat)->stmmac_clk);
  #line 703 
  if (clk == 0UL) {
    #line 704 
    clk = (unsigned long)(priv->plat)->clk_ref_rate;
    #line 705 
    if (clk == 0UL) 
                    #line 706 
                    return 0U;
  }
  #line 709 
  return (unsigned int)((unsigned long)(riwt * 256U) / (clk / 1000000UL));
}

#line 712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static int stmmac_get_coalesce(struct net_device *dev, struct ethtool_coalesce *ec)
{
  #line 715 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 717 
  ec->tx_coalesce_usecs = priv->tx_coal_timer;
  #line 718 
  ec->tx_max_coalesced_frames = priv->tx_coal_frames;
  #line 720 
  if (priv->use_riwt != 0) {
    #line 721 
    ec->rx_max_coalesced_frames = priv->rx_coal_frames;
    #line 722 
    ec->rx_coalesce_usecs = stmmac_riwt2usec(priv->rx_riwt,priv);
  }
  #line 725 
  return 0;
}

#line 728  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static int stmmac_set_coalesce(struct net_device *dev, struct ethtool_coalesce *ec)
{
  #line 733 
  unsigned int rx_riwt;
  #line 731 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 732 
  u32 rx_cnt = (priv->plat)->rx_queues_to_use;
  #line 736 
  if (((((((((((((((((ec->rx_coalesce_usecs_irq != 0U || ec->rx_max_coalesced_frames_irq != 0U) || ec->tx_coalesce_usecs_irq != 0U) || ec->use_adaptive_rx_coalesce != 0U) || ec->use_adaptive_tx_coalesce != 0U) || ec->pkt_rate_low != 0U) || ec->rx_coalesce_usecs_low != 0U) || ec->rx_max_coalesced_frames_low != 0U) || ec->tx_coalesce_usecs_high != 0U) || ec->tx_max_coalesced_frames_low != 0U) || ec->pkt_rate_high != 0U) || ec->tx_coalesce_usecs_low != 0U) || ec->rx_coalesce_usecs_high != 0U) || ec->rx_max_coalesced_frames_high != 0U) || ec->tx_max_coalesced_frames_irq != 0U) || ec->stats_block_coalesce_usecs != 0U) || ec->tx_max_coalesced_frames_high != 0U) || ec->rate_sample_interval != 0U) 
    #line 747 
    return -95;
  #line 749 
  if (priv->use_riwt != 0 && ec->rx_coalesce_usecs != 0U) {
    #line 750 
    rx_riwt = stmmac_usec2riwt(ec->rx_coalesce_usecs,priv);
    #line 752 
    if (rx_riwt + 4294967280U > 239U) 
                                      #line 753 
                                      return -22;
    #line 755 
    priv->rx_riwt = rx_riwt;
    {
      #line 756 
      int __result = -22;
      #line 756 
      if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->rx_watchdog != (void (*)(void *, u32 , u32 ))0) {
        #line 756 
        (*(((priv->hw)->dma)->rx_watchdog))(priv->ioaddr,priv->rx_riwt,rx_cnt);
        #line 756 
        __result = 0;
      }
      #line 756 
      int tmp_2 = __result;
    }
  }
  #line 759 
  if (ec->tx_coalesce_usecs == 0U && ec->tx_max_coalesced_frames == 0U) 
    #line 761 
    return -22;
  #line 763 
  if (ec->tx_coalesce_usecs > 100000U || ec->tx_max_coalesced_frames > 256U) 
    #line 765 
    return -22;
  #line 768 
  priv->tx_coal_frames = ec->tx_max_coalesced_frames;
  #line 769 
  priv->tx_coal_timer = ec->tx_coalesce_usecs;
  #line 770 
  priv->rx_coal_frames = ec->rx_max_coalesced_frames;
  #line 771 
  return 0;
}

#line 774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static int stmmac_get_rxnfc(struct net_device *dev, struct ethtool_rxnfc *rxnfc, u32 *rule_locs)
{
  #line 777 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 779 
  switch (rxnfc->cmd) {
    #line 780 
    case (__u32)45: 
                    #line 780 
    ;
    #line 781 
    rxnfc->data = (unsigned long long)(priv->plat)->rx_queues_to_use;
    #line 782 
    break;
    #line 783 
    default: 
             #line 783 
    ;
    #line 784 
    return -95;
  }
  #line 787 
  return 0;
}

#line 790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static u32 stmmac_get_rxfh_key_size(struct net_device *dev)
{
  #line 792 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 794 
  return 40U;
}

#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static u32 stmmac_get_rxfh_indir_size(struct net_device *dev)
{
  #line 799 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 801 
  return 256U;
}

#line 804  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static int stmmac_get_rxfh(struct net_device *dev, u32 *indir, u8 *key, u8 *hfunc)
{
  #line 808 
  int i;
  #line 807 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 810 
  if (indir != (u32 *)0U) {
    #line 811 
    i = 0;
    #line 811 
    while ((unsigned int)i <= 255U) {
      #line 812 
      *(indir + (unsigned long)i) = priv->rss.table[i];
      #line 811 
      i ++;
    }
  }
  #line 815 
  if (key != (u8 *)0U) 
                       #line 816 
                       memcpy((void *)key,(void *)(& priv->rss.key),40UL);
  #line 817 
  if (hfunc != (u8 *)0U) 
                         #line 818 
                         *hfunc = (unsigned char)1U;
  #line 820 
  return 0;
}

#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static int stmmac_set_rxfh(struct net_device *dev, u32 *indir, u8 *key, u8 hfunc)
{
  #line 840 
  int __result;
  #line 827 
  int i;
  #line 826 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 829 
  if ((unsigned int)hfunc > 1U) 
                                #line 830 
                                return -95;
  #line 832 
  if (indir != (u32 *)0U) {
    #line 833 
    i = 0;
    #line 833 
    while ((unsigned int)i <= 255U) {
      #line 834 
      priv->rss.table[i] = *(indir + (unsigned long)i);
      #line 833 
      i ++;
    }
  }
  #line 837 
  if (key != (u8 *)0U) 
                       #line 838 
                       memcpy((void *)(& priv->rss.key),(void *)key,40UL);
  #line 840 
  __result = -22;
  #line 840 
  if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->rss_configure != (int (*)(struct mac_device_info *, struct stmmac_rss *, u32 ))0) 
    #line 840 
    __result = (*(((priv->hw)->mac)->rss_configure))(priv->hw,& priv->rss,(priv->plat)->rx_queues_to_use);
  #line 840 
  return __result;
}

#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static int stmmac_get_ts_info(struct net_device *dev, struct ethtool_ts_info *info)
{
  #line 847 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 849 
  if (priv->dma_cap.time_stamp != 0U || priv->dma_cap.atime_stamp != 0U) {
    #line 851 
    info->so_timestamping = 95U;
    #line 858 
    if (priv->ptp_clock != (struct ptp_clock *)0) 
                                                  #line 859 
                                                  info->phc_index = ptp_clock_index(priv->ptp_clock);
    #line 861 
    info->tx_types = 3U;
    #line 863 
    info->rx_filters = 29179U;
    #line 874 
    return 0;
  }
  else {
    #line 876 
    return ethtool_op_get_ts_info(dev,info);
  }
}

#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static int stmmac_get_tunable(struct net_device *dev, struct ethtool_tunable *tuna, void *data)
{
  #line 882 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 883 
  int ret = 0;
  #line 885 
  switch (tuna->id) {
    #line 886 
    case (__u32)1: 
                   #line 886 
    ;
    #line 887 
    *((u32 *)data) = priv->rx_copybreak;
    #line 888 
    break;
    #line 889 
    default: 
             #line 889 
    ;
    #line 890 
    ret = -22;
    #line 891 
    break;
  }
  #line 894 
  return ret;
}

#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static int stmmac_set_tunable(struct net_device *dev, struct ethtool_tunable *tuna, void *data)
{
  #line 901 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 902 
  int ret = 0;
  #line 904 
  switch (tuna->id) {
    #line 905 
    case (__u32)1: 
                   #line 905 
    ;
    #line 906 
    priv->rx_copybreak = *((u32 *)data);
    #line 907 
    break;
    #line 908 
    default: 
             #line 908 
    ;
    #line 909 
    ret = -22;
    #line 910 
    break;
  }
  #line 913 
  return ret;
}

#line 916  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
static struct ethtool_ops stmmac_ethtool_ops = {.get_drvinfo = & stmmac_ethtool_getdrvinfo, .get_regs_len = & stmmac_ethtool_get_regs_len, .get_regs = & stmmac_ethtool_gregs, .get_wol = & stmmac_get_wol, .set_wol = & stmmac_set_wol, .get_msglevel = & stmmac_ethtool_getmsglevel, .set_msglevel = & stmmac_ethtool_setmsglevel, .nway_reset = & stmmac_nway_reset, .get_link = & ethtool_op_get_link, .get_coalesce = & stmmac_get_coalesce, .set_coalesce = & stmmac_set_coalesce, .get_pauseparam = & stmmac_get_pauseparam, .set_pauseparam = & stmmac_set_pauseparam, .self_test = & stmmac_selftest_run, .get_strings = & stmmac_get_strings, .get_ethtool_stats = & stmmac_get_ethtool_stats, .begin = & stmmac_check_if_running, .get_sset_count = & stmmac_get_sset_count, .get_rxnfc = & stmmac_get_rxnfc, .get_rxfh_key_size = & stmmac_get_rxfh_key_size, .get_rxfh_indir_size = & stmmac_get_rxfh_indir_size, .get_rxfh = & stmmac_get_rxfh, .set_rxfh = & stmmac_set_rxfh, .get_ts_info = & stmmac_get_ts_info, .get_eee = & stmmac_ethtool_op_get_eee, .set_eee = & stmmac_ethtool_op_set_eee, .get_tunable = & stmmac_get_tunable, .set_tunable = & stmmac_set_tunable, .get_link_ksettings = & stmmac_ethtool_get_link_ksettings, .set_link_ksettings = & stmmac_ethtool_set_link_ksettings};
#line 949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c"
void stmmac_set_ethtool_ops(struct net_device *netdev)
{
  #line 951 
  netdev->ethtool_ops = & stmmac_ethtool_ops;
  #line 952 
  return;
}

#line 103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
int emg_wrapper_stmmac_check_if_running(struct net_device *arg0)
{
  #line 104 
  return stmmac_check_if_running(arg0);
}

#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
int emg_wrapper_stmmac_ethtool_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 109 
  return stmmac_ethtool_get_link_ksettings(arg0,arg1);
}

#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
int emg_wrapper_stmmac_ethtool_get_regs_len(struct net_device *arg0)
{
  #line 114 
  return stmmac_ethtool_get_regs_len(arg0);
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
void emg_wrapper_stmmac_ethtool_getdrvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 119 
  stmmac_ethtool_getdrvinfo(arg0,arg1);
  #line 120 
  return;
}

#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
unsigned int emg_wrapper_stmmac_ethtool_getmsglevel(struct net_device *arg0)
{
  #line 124 
  return stmmac_ethtool_getmsglevel(arg0);
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
void emg_wrapper_stmmac_ethtool_gregs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 129 
  stmmac_ethtool_gregs(arg0,arg1,arg2);
  #line 130 
  return;
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
int emg_wrapper_stmmac_ethtool_op_get_eee(struct net_device *arg0, struct ethtool_eee *arg1)
{
  #line 134 
  return stmmac_ethtool_op_get_eee(arg0,arg1);
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
int emg_wrapper_stmmac_ethtool_op_set_eee(struct net_device *arg0, struct ethtool_eee *arg1)
{
  #line 139 
  return stmmac_ethtool_op_set_eee(arg0,arg1);
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
int emg_wrapper_stmmac_ethtool_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 144 
  return stmmac_ethtool_set_link_ksettings(arg0,arg1);
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
void emg_wrapper_stmmac_ethtool_setmsglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 149 
  stmmac_ethtool_setmsglevel(arg0,arg1);
  #line 150 
  return;
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
int emg_wrapper_stmmac_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 154 
  return stmmac_get_coalesce(arg0,arg1);
}

#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
void emg_wrapper_stmmac_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 159 
  stmmac_get_ethtool_stats(arg0,arg1,arg2);
  #line 160 
  return;
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
void emg_wrapper_stmmac_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 164 
  stmmac_get_pauseparam(arg0,arg1);
  #line 165 
  return;
}

#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
int emg_wrapper_stmmac_get_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  #line 169 
  return stmmac_get_rxfh(arg0,arg1,arg2,arg3);
}

#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
unsigned int emg_wrapper_stmmac_get_rxfh_indir_size(struct net_device *arg0)
{
  #line 174 
  return stmmac_get_rxfh_indir_size(arg0);
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
unsigned int emg_wrapper_stmmac_get_rxfh_key_size(struct net_device *arg0)
{
  #line 179 
  return stmmac_get_rxfh_key_size(arg0);
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
int emg_wrapper_stmmac_get_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  #line 184 
  return stmmac_get_rxnfc(arg0,arg1,arg2);
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
int emg_wrapper_stmmac_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 189 
  return stmmac_get_sset_count(arg0,arg1);
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
void emg_wrapper_stmmac_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 194 
  stmmac_get_strings(arg0,arg1,arg2);
  #line 195 
  return;
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
int emg_wrapper_stmmac_get_ts_info(struct net_device *arg0, struct ethtool_ts_info *arg1)
{
  #line 199 
  return stmmac_get_ts_info(arg0,arg1);
}

#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
int emg_wrapper_stmmac_get_tunable(struct net_device *arg0, struct ethtool_tunable *arg1, void *arg2)
{
  #line 204 
  return stmmac_get_tunable(arg0,arg1,arg2);
}

#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
void emg_wrapper_stmmac_get_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 209 
  stmmac_get_wol(arg0,arg1);
  #line 210 
  return;
}

#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
int emg_wrapper_stmmac_nway_reset(struct net_device *arg0)
{
  #line 214 
  return stmmac_nway_reset(arg0);
}

#line 218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
int emg_wrapper_stmmac_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 219 
  return stmmac_set_coalesce(arg0,arg1);
}

#line 223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
int emg_wrapper_stmmac_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 224 
  return stmmac_set_pauseparam(arg0,arg1);
}

#line 228  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
int emg_wrapper_stmmac_set_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3)
{
  #line 229 
  return stmmac_set_rxfh(arg0,arg1,arg2,(unsigned char)((int)arg3));
}

#line 233  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
int emg_wrapper_stmmac_set_tunable(struct net_device *arg0, struct ethtool_tunable *arg1, void *arg2)
{
  #line 234 
  return stmmac_set_tunable(arg0,arg1,arg2);
}

#line 238  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
int emg_wrapper_stmmac_set_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 239 
  return stmmac_set_wol(arg0,arg1);
}

#line 975  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
static void cif_mutex_lock_lock_of_stmmac_priv(struct mutex *lock)
{
  #line 978 
  ldv_mutex_model_lock(lock,(char *)"lock_of_stmmac_priv");
  #line 979 
  return;
}

#line 982  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_ethtool.i.aux"
static void cif_mutex_unlock_lock_of_stmmac_priv(struct mutex *lock)
{
  #line 985 
  ldv_mutex_model_unlock(lock,(char *)"lock_of_stmmac_priv");
  #line 986 
  return;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  #line 24 
  return fls(n) + -1;
}

#line 559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
#line 509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
struct stmmac_ops dwmac1000_ops;
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
#line 531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
int dwmac1000_setup(struct stmmac_priv *priv);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_pcs.h"
__inline static void dwmac_pcs_isr(void *ioaddr, u32 reg, unsigned int intr_status, struct stmmac_extra_stats *x)
{
  #line 60 
  u32 val = readl(ioaddr + (unsigned long)(reg + 4U));
  #line 62 
  if (((unsigned long)intr_status & 4UL) != 0UL) {
    #line 63 
    (x->irq_pcs_ane_n) ++;
    #line 64 
    if (((unsigned long)val & 32UL) != 0UL) 
                                            #line 65 
                                            printk((char *)"\001");
  }
  #line 68 
  if (((unsigned long)intr_status & 2UL) != 0UL) {
    #line 69 
    (x->irq_pcs_link_n) ++;
    #line 70 
    if (((unsigned long)val & 4UL) != 0UL) 
                                           #line 71 
                                           printk((char *)"\001"); else 
                                                                    #line 73 
                                                                    printk((char *)"\001");
  }
  #line 75 
  return;
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_pcs.h"
__inline static void dwmac_rane(void *ioaddr, u32 reg, bool restart)
{
  #line 86 
  u32 value = readl(ioaddr + (unsigned long)reg);
  #line 88 
  if ((int)restart != 0) 
                         #line 89 
                         value |= 512U;
  #line 91 
  writel(value,ioaddr + (unsigned long)reg);
  #line 92 
  return;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_pcs.h"
__inline static void dwmac_ctrl_ane(void *ioaddr, u32 reg, bool ane, bool srgmi_ral, bool loopback)
{
  #line 108 
  u32 value = readl(ioaddr + (unsigned long)reg);
  #line 111 
  if ((int)ane != 0) 
                     #line 112 
                     value |= 4608U;
  #line 117 
  if ((int)srgmi_ral != 0) 
                           #line 118 
                           value |= 262144U;
  #line 120 
  if ((int)loopback != 0) 
                          #line 121 
                          value |= 16384U;
  #line 123 
  writel(value,ioaddr + (unsigned long)reg);
  #line 124 
  return;
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_pcs.h"
__inline static void dwmac_get_adv_lp(void *ioaddr, u32 reg, struct rgmii_adv *adv_lp)
{
  #line 137 
  u32 value = readl(ioaddr + (unsigned long)(reg + 8U));
  #line 139 
  if (((unsigned long)value & 32UL) != 0UL) 
                                            #line 140 
                                            adv_lp->duplex = 1U;
  #line 141 
  if (((unsigned long)value & 64UL) != 0UL) 
                                            #line 142 
                                            adv_lp->duplex = adv_lp->duplex;
  #line 144 
  adv_lp->pause = (unsigned int)((unsigned long)value >> 7) & 3U;
  #line 146 
  value = readl(ioaddr + (unsigned long)(reg + 12U));
  #line 148 
  if (((unsigned long)value & 32UL) != 0UL) 
                                            #line 149 
                                            adv_lp->lp_duplex = 1U;
  #line 150 
  if (((unsigned long)value & 64UL) != 0UL) 
                                            #line 151 
                                            adv_lp->lp_duplex = 0U;
  #line 153 
  adv_lp->lp_pause = (unsigned int)((unsigned long)value >> 7) & 3U;
  #line 154 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static void dwmac1000_core_init(struct mac_device_info *hw, struct net_device *dev)
{
  #line 27 
  void *ioaddr = hw->pcsr;
  #line 28 
  u32 value = readl(ioaddr);
  #line 29 
  int mtu = (int)dev->mtu;
  #line 32 
  value |= 6389888U;
  #line 38 
  if ((int)netdev_uses_dsa(dev) != 0) 
                                      #line 39 
                                      value &= 4294967167U;
  #line 41 
  if (mtu > 1500) 
                  #line 42 
                  value |= 134217728U;
  #line 43 
  if (mtu > 2000) 
                  #line 44 
                  value |= 1048576U;
  #line 46 
  if (hw->ps != 0U) {
    #line 47 
    value |= 8U;
    #line 49 
    value = ~ hw->link.speed_mask & value;
    #line 50 
    switch (hw->ps) {
      #line 51 
      case (unsigned int)1000: 
                               #line 51 
      ;
      #line 52 
      value = hw->link.speed1000 | value;
      #line 53 
      break;
      #line 54 
      case (unsigned int)100: 
                              #line 54 
      ;
      #line 55 
      value = hw->link.speed100 | value;
      #line 56 
      break;
      #line 57 
      case (unsigned int)10: 
                             #line 57 
      ;
      #line 58 
      value = hw->link.speed10 | value;
      #line 59 
      break;
    }
  }
  #line 63 
  writel(value,ioaddr);
  #line 66 
  value = 519U;
  #line 68 
  if (hw->pcs != 0U) 
                     #line 69 
                     value &= 4294967288U;
  #line 71 
  writel(value,ioaddr + 60U);
  #line 75 
  writel(0U,ioaddr + 28U);
  #line 76 
  return;
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static int dwmac1000_rx_ipc_enable(struct mac_device_info *hw)
{
  #line 81 
  void *ioaddr = hw->pcsr;
  #line 82 
  u32 value = readl(ioaddr);
  #line 84 
  if (hw->rx_csum != 0U) 
                         #line 85 
                         value |= 1024U; else 
                                              #line 87 
                                              value &= 4294966271U;
  #line 89 
  writel(value,ioaddr);
  #line 91 
  value = readl(ioaddr);
  #line 93 
  return (value & 1024U) != 0U;
}

#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static void dwmac1000_dump_regs(struct mac_device_info *hw, u32 *reg_space)
{
  #line 99 
  int i;
  #line 98 
  void *ioaddr = hw->pcsr;
  #line 101 
  i = 0;
  #line 101 
  while (i <= 54) {
    #line 102 
    *(reg_space + (unsigned long)i) = readl(ioaddr + (unsigned long)(i * 4));
    #line 101 
    i ++;
  }
  #line 103 
  return;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static void dwmac1000_set_umac_addr(struct mac_device_info *hw, unsigned char *addr, unsigned int reg_n)
{
  #line 110 
  unsigned int tmp;
  #line 110 
  unsigned int tmp_0;
  #line 109 
  void *ioaddr = hw->pcsr;
  #line 110 
  if (reg_n > 15U) 
                   #line 110 
                   tmp = 2052U; else 
                                     #line 110 
                                     tmp = 68U;
  #line 110 
  ;
  #line 110 
  if (reg_n > 15U) 
                   #line 110 
                   tmp_0 = 2048U; else 
                                       #line 110 
                                       tmp_0 = 64U;
  #line 110 
  ;
  #line 110 
  ;
  #line 110 
  ;
  #line 110 
  stmmac_set_mac_addr(ioaddr,addr,tmp_0 + reg_n * 8U,tmp + reg_n * 8U);
  #line 112 
  return;
}

#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static void dwmac1000_get_umac_addr(struct mac_device_info *hw, unsigned char *addr, unsigned int reg_n)
{
  #line 119 
  unsigned int tmp;
  #line 119 
  unsigned int tmp_0;
  #line 118 
  void *ioaddr = hw->pcsr;
  #line 119 
  if (reg_n > 15U) 
                   #line 119 
                   tmp = 2052U; else 
                                     #line 119 
                                     tmp = 68U;
  #line 119 
  ;
  #line 119 
  if (reg_n > 15U) 
                   #line 119 
                   tmp_0 = 2048U; else 
                                       #line 119 
                                       tmp_0 = 64U;
  #line 119 
  ;
  #line 119 
  ;
  #line 119 
  ;
  #line 119 
  stmmac_get_mac_addr(ioaddr,addr,tmp_0 + reg_n * 8U,tmp + reg_n * 8U);
  #line 121 
  return;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static void dwmac1000_set_mchash(void *ioaddr, u32 *mcfilterbits, int mcbitslog2)
{
  #line 126 
  int numhashregs;
  #line 126 
  int regs;
  #line 128 
  switch (mcbitslog2) {
    #line 129 
    case 6: 
            #line 129 
    ;
    #line 130 
    writel(*mcfilterbits,ioaddr + 12U);
    #line 131 
    writel(*(mcfilterbits + 1U),ioaddr + 8U);
    #line 132 
    return;
    #line 133 
    case 7: 
            #line 133 
    ;
    #line 134 
    numhashregs = 4;
    #line 135 
    break;
    #line 136 
    case 8: 
            #line 136 
    ;
    #line 137 
    numhashregs = 8;
    #line 138 
    break;
    #line 139 
    default: 
             #line 139 
    ;
    {
      #line 140 
      bool branch;
      #line 140 
      struct _ddebug __UNIQUE_ID_ddebug536 = {.modname = (char *)"stmmac", .function = (char *)"dwmac1000_set_mchash", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c", .format = (char *)"STMMAC: err in setting multicast filter\n", .lineno = (unsigned int)140U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 140 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug536.key.dd_key_false.key,(_Bool)0);
      #line 140 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 140 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug536,(char *)"STMMAC: err in setting multicast filter\n");
    }
    #line 141 
    return;
  }
  #line 143 
  regs = 0;
  #line 143 
  while (regs < numhashregs) {
    #line 144 
    writel(*(mcfilterbits + (unsigned long)regs),ioaddr + ((unsigned long)(regs * 4) + (unsigned long)1280U));
    #line 143 
    regs ++;
  }
  #line 146 
  return;
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static void dwmac1000_set_filter(struct mac_device_info *hw, struct net_device *dev)
{
  #line 154 
  u32 mc_filter[8U];
  #line 151 
  void *ioaddr = (void *)dev->base_addr;
  #line 152 
  unsigned int value = 0U;
  #line 153 
  unsigned int perfect_addr_number = hw->unicast_filter_entries;
  #line 155 
  int mcbitslog2 = (int)hw->mcast_bits_log2;
  {
    #line 157 
    bool branch;
    #line 157 
    struct _ddebug __UNIQUE_ID_ddebug537 = {.modname = (char *)"stmmac", .function = (char *)"dwmac1000_set_filter", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c", .format = (char *)"%s: # mcasts %d, # unicast %d\n", .lineno = (unsigned int)157U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 157 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug537.key.dd_key_false.key,(_Bool)0);
    #line 157 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 157 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug537,(char *)"%s: # mcasts %d, # unicast %d\n",(char *)"dwmac1000_set_filter",dev->mc.count,dev->uc.count);
  }
  #line 160 
  memset((void *)(& mc_filter),0,32UL);
  #line 162 
  if ((dev->flags & 256U) != 0U) 
                                 #line 163 
                                 value = 129U;
  else 
    #line 164 
    if ((dev->flags & 512U) != 0U) 
                                   #line 165 
                                   value = 16U;
    else 
      #line 166 
      if (dev->mc.count != 0) {
        #line 172 
        void *__mptr;
        #line 167 
        struct netdev_hw_addr *ha;
        #line 170 
        value = 4U;
        #line 172 
        __mptr = (void *)dev->mc.list.next;
        #line 172 
        ha = ((struct netdev_hw_addr *)__mptr);
        #line 172 
        while (& ha->list != & dev->mc.list) {
          #line 172 
          void *__mptr_0;
          {
            #line 178 
            u32 ___x;
            #line 178 
            u32 tmp_5;
            {
              #line 178 
              u32 __x = ~ crc32_le(4294967295U,(unsigned char *)(& ha->addr),6UL);
              #line 178 
              if (0 != 0) {
                #line 178 
                ___x = __x;
                #line 178 
                ___x = (___x << 16) | (___x << ((unsigned long)8 * sizeof(___x) - (unsigned long)16));
                #line 178 
                ___x = ((___x >> 8) & 16711935U) | ((___x << 8) & 4278255360U);
                #line 178 
                ___x = ((___x >> 4) & 252645135U) | ((___x << 4) & 4042322160U);
                #line 178 
                ___x = ((___x >> 2) & 858993459U) | ((___x << 2) & 3435973836U);
                #line 178 
                ___x = ((___x >> 1) & 1431655765U) | ((___x << 1) & 2863311530U);
                #line 178 
                tmp_5 = ___x;
              }
              else 
                   #line 178 
                   tmp_5 = __bitrev32(__x);
              }
            #line 178 
            int bit_nr = (int)(tmp_5 >> (32 - mcbitslog2));
            #line 185 
            mc_filter[bit_nr >> 5] |= (unsigned int)(1 << (bit_nr & 31));
          }
          #line 172 
          __mptr_0 = (void *)ha->list.next;
          #line 172 
          ha = ((struct netdev_hw_addr *)__mptr_0);
        }
      }
  #line 189 
  value |= 1024U;
  #line 190 
  dwmac1000_set_mchash(ioaddr,(u32 *)(& mc_filter),mcbitslog2);
  #line 193 
  if ((unsigned int)dev->uc.count > perfect_addr_number) 
                                                         #line 197 
                                                         value |= 1U;
  else {
    #line 202 
    void *__mptr_1;
    #line 200 
    struct netdev_hw_addr *ha_0;
    #line 199 
    int reg = 1;
    #line 202 
    __mptr_1 = (void *)dev->uc.list.next;
    #line 202 
    ha_0 = ((struct netdev_hw_addr *)__mptr_1);
    #line 202 
    while (& ha_0->list != & dev->uc.list) {
      #line 202 
      void *__mptr_2;
      {
        #line 205 
        int tmp_9;
        #line 204 
        int tmp_10;
        #line 205 
        if (reg > 15) 
                      #line 205 
                      tmp_9 = 2052; else 
                                         #line 205 
                                         tmp_9 = 68;
        #line 203 
        ;
        #line 204 
        if (reg > 15) 
                      #line 204 
                      tmp_10 = 2048; else 
                                          #line 204 
                                          tmp_10 = 64;
        #line 203 
        ;
        #line 203 
        ;
        #line 203 
        ;
        #line 203 
        stmmac_set_mac_addr(ioaddr,(u8 *)(& ha_0->addr),(unsigned int)(tmp_10 + reg * 8),(unsigned int)(tmp_9 + reg * 8));
        #line 206 
        reg ++;
      }
      #line 202 
      __mptr_2 = (void *)ha_0->list.next;
      #line 202 
      ha_0 = ((struct netdev_hw_addr *)__mptr_2);
    }
    #line 209 
    while ((unsigned int)reg <= perfect_addr_number) {
      #line 210 
      int tmp_11;
      #line 211 
      int tmp_12;
      #line 210 
      if (reg > 15) 
                    #line 210 
                    tmp_11 = 2048; else 
                                        #line 210 
                                        tmp_11 = 64;
      #line 210 
      ;
      #line 210 
      writel(0U,ioaddr + (unsigned long)(tmp_11 + reg * 8));
      #line 211 
      if (reg > 15) 
                    #line 211 
                    tmp_12 = 2052; else 
                                        #line 211 
                                        tmp_12 = 68;
      #line 211 
      ;
      #line 211 
      writel(0U,ioaddr + (unsigned long)(tmp_12 + reg * 8));
      #line 212 
      reg ++;
    }
  }
  #line 220 
  writel(value,ioaddr + 4U);
  #line 221 
  return;
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static void dwmac1000_flow_ctrl(struct mac_device_info *hw, unsigned int duplex, unsigned int fc, unsigned int pause_time, u32 tx_cnt)
{
  #line 228 
  void *ioaddr = hw->pcsr;
  #line 232 
  unsigned int flow = 8U;
  {
    #line 234 
    bool branch;
    #line 234 
    struct _ddebug __UNIQUE_ID_ddebug538 = {.modname = (char *)"stmmac", .function = (char *)"dwmac1000_flow_ctrl", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c", .format = (char *)"GMAC Flow-Control:\n", .lineno = (unsigned int)234U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 234 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug538.key.dd_key_false.key,(_Bool)0);
    #line 234 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 234 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug538,(char *)"GMAC Flow-Control:\n");
  }
  #line 235 
  if ((fc & 1U) != 0U) {
    {
      #line 236 
      bool branch_0;
      #line 236 
      struct _ddebug __UNIQUE_ID_ddebug539 = {.modname = (char *)"stmmac", .function = (char *)"dwmac1000_flow_ctrl", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c", .format = (char *)"\tReceive Flow-Control ON\n", .lineno = (unsigned int)236U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 236 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug539.key.dd_key_false.key,(_Bool)0);
      #line 236 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 236 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug539,(char *)"\tReceive Flow-Control ON\n");
    }
    #line 237 
    flow |= 4U;
  }
  #line 239 
  if ((fc & 2U) != 0U) {
    {
      #line 240 
      bool branch_1;
      #line 240 
      struct _ddebug __UNIQUE_ID_ddebug540 = {.modname = (char *)"stmmac", .function = (char *)"dwmac1000_flow_ctrl", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c", .format = (char *)"\tTransmit Flow-Control ON\n", .lineno = (unsigned int)240U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 240 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug540.key.dd_key_false.key,(_Bool)0);
      #line 240 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 240 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug540,(char *)"\tTransmit Flow-Control ON\n");
    }
    #line 241 
    flow |= 2U;
  }
  #line 244 
  if (duplex != 0U) {
    {
      #line 245 
      bool branch_2;
      #line 245 
      struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"stmmac", .function = (char *)"dwmac1000_flow_ctrl", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c", .format = (char *)"\tduplex mode: PAUSE %d\n", .lineno = (unsigned int)245U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 245 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
      #line 245 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 245 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug541,(char *)"\tduplex mode: PAUSE %d\n",pause_time);
    }
    #line 246 
    flow = (pause_time << 16) | flow;
  }
  #line 249 
  writel(flow,ioaddr + 24U);
  #line 250 
  return;
}

#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static void dwmac1000_pmt(struct mac_device_info *hw, unsigned long mode)
{
  #line 254 
  void *ioaddr = hw->pcsr;
  #line 255 
  unsigned int pmt = 0U;
  #line 257 
  if ((mode & 32UL) != 0UL) {
    {
      #line 258 
      bool branch;
      #line 258 
      struct _ddebug __UNIQUE_ID_ddebug542 = {.modname = (char *)"stmmac", .function = (char *)"dwmac1000_pmt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c", .format = (char *)"GMAC: WOL Magic frame\n", .lineno = (unsigned int)258U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 258 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug542.key.dd_key_false.key,(_Bool)0);
      #line 258 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 258 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug542,(char *)"GMAC: WOL Magic frame\n");
    }
    #line 259 
    pmt |= 3U;
  }
  #line 261 
  if ((mode & 2UL) != 0UL) {
    {
      #line 262 
      bool branch_0;
      #line 262 
      struct _ddebug __UNIQUE_ID_ddebug543 = {.modname = (char *)"stmmac", .function = (char *)"dwmac1000_pmt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c", .format = (char *)"GMAC: WOL on global unicast\n", .lineno = (unsigned int)262U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 262 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug543.key.dd_key_false.key,(_Bool)0);
      #line 262 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 262 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug543,(char *)"GMAC: WOL on global unicast\n");
    }
    #line 263 
    pmt |= 517U;
  }
  #line 266 
  writel(pmt,ioaddr + 44U);
  #line 267 
  return;
}

#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static void dwmac1000_rgsmii(void *ioaddr, struct stmmac_extra_stats *x)
{
  #line 272 
  u32 status;
  #line 274 
  status = readl(ioaddr + 216U);
  #line 275 
  (x->irq_rgmii_n) ++;
  #line 278 
  if (((unsigned long)status & 8UL) != 0UL) {
    #line 279 
    int speed_value;
    #line 294 
    char *tmp;
    #line 281 
    x->pcs_link = 1UL;
    #line 283 
    speed_value = (int)((unsigned long)status >> 1) & 3;
    #line 285 
    if (speed_value == 2) 
                          #line 286 
                          x->pcs_speed = 1000UL;
    else 
      #line 287 
      if (speed_value == 1) 
                            #line 288 
                            x->pcs_speed = 100UL; else 
                                                       #line 290 
                                                       x->pcs_speed = 10UL;
    #line 292 
    x->pcs_duplex = (unsigned long)status & 1UL;
    #line 294 
    if (x->pcs_duplex != 0UL) 
                              #line 294 
                              tmp = (char *)"Full"; else 
                                                         #line 294 
                                                         tmp = (char *)"Half";
    #line 294 
    ;
    #line 294 
    printk((char *)"\001",(int)x->pcs_speed,tmp);
  }
  else {
    #line 297 
    x->pcs_link = 0UL;
    #line 298 
    printk((char *)"\001");
  }
  #line 300 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static int dwmac1000_irq_status(struct mac_device_info *hw, struct stmmac_extra_stats *x)
{
  #line 305 
  void *ioaddr = hw->pcsr;
  #line 306 
  u32 intr_status = readl(ioaddr + 56U);
  #line 307 
  u32 intr_mask = readl(ioaddr + 60U);
  #line 308 
  int ret = 0;
  #line 311 
  intr_status = ~ intr_mask & intr_status;
  #line 314 
  if (((unsigned long)intr_status & 64UL) != 0UL) 
                                                  #line 315 
                                                  (x->mmc_tx_irq_n) ++;
  #line 316 
  if ((long)(((unsigned long)intr_status & 32UL) != 0UL) != 0L) 
                                                                #line 317 
                                                                (x->mmc_rx_irq_n) ++;
  #line 318 
  if ((long)(((unsigned long)intr_status & 128UL) != 0UL) != 0L) 
                                                                 #line 319 
                                                                 (x->mmc_rx_csum_offload_irq_n) ++;
  #line 320 
  if ((long)(((unsigned long)intr_status & 8UL) != 0UL) != 0L) {
    #line 322 
    readl(ioaddr + 44U);
    #line 323 
    (x->irq_receive_pmt_irq_n) ++;
  }
  #line 327 
  if (((unsigned long)intr_status & 1024UL) != 0UL) {
    #line 329 
    ret = (int)readl(ioaddr + 48U);
    #line 331 
    if ((ret & 1) != 0) 
                        #line 332 
                        (x->irq_tx_path_in_lpi_mode_n) ++;
    #line 333 
    if ((ret & 2) != 0) 
                        #line 334 
                        (x->irq_tx_path_exit_lpi_mode_n) ++;
    #line 335 
    if ((ret & 4) != 0) 
                        #line 336 
                        (x->irq_rx_path_in_lpi_mode_n) ++;
    #line 337 
    if ((ret & 8) != 0) 
                        #line 338 
                        (x->irq_rx_path_exit_lpi_mode_n) ++;
  }
  #line 341 
  dwmac_pcs_isr(ioaddr,192U,intr_status,x);
  #line 343 
  if (((unsigned long)intr_status & 1UL) != 0UL) 
                                                 #line 344 
                                                 dwmac1000_rgsmii(ioaddr,x);
  #line 346 
  return ret;
}

#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static void dwmac1000_set_eee_mode(struct mac_device_info *hw, bool en_tx_lpi_clockgating)
{
  #line 353 
  u32 value;
  #line 352 
  void *ioaddr = hw->pcsr;
  #line 361 
  value = readl(ioaddr + 48U);
  #line 362 
  value |= 589824U;
  #line 363 
  writel(value,ioaddr + 48U);
  #line 364 
  return;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static void dwmac1000_reset_eee_mode(struct mac_device_info *hw)
{
  #line 369 
  u32 value;
  #line 368 
  void *ioaddr = hw->pcsr;
  #line 371 
  value = readl(ioaddr + 48U);
  #line 372 
  value &= 4294377471U;
  #line 373 
  writel(value,ioaddr + 48U);
  #line 374 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static void dwmac1000_set_eee_pls(struct mac_device_info *hw, int link)
{
  #line 379 
  u32 value;
  #line 378 
  void *ioaddr = hw->pcsr;
  #line 381 
  value = readl(ioaddr + 48U);
  #line 383 
  if (link != 0) 
                 #line 384 
                 value |= 131072U; else 
                                        #line 386 
                                        value &= 4294836223U;
  #line 388 
  writel(value,ioaddr + 48U);
  #line 389 
  return;
}

#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static void dwmac1000_set_eee_timer(struct mac_device_info *hw, int ls, int tw)
{
  #line 393 
  void *ioaddr = hw->pcsr;
  #line 394 
  int value = (tw & 65535) | ((ls << 16) & 134152192);
  #line 403 
  writel((unsigned int)value,ioaddr + 52U);
  #line 404 
  return;
}

#line 406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static void dwmac1000_ctrl_ane(void *ioaddr, bool ane, bool srgmi_ral, bool loopback)
{
  #line 409 
  dwmac_ctrl_ane(ioaddr,192U,(_Bool)((bool)((int)ane) != 0),(_Bool)((bool)((int)srgmi_ral) != 0),(_Bool)((bool)((int)loopback) != 0));
  #line 410 
  return;
}

#line 412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static void dwmac1000_rane(void *ioaddr, bool restart)
{
  #line 414 
  dwmac_rane(ioaddr,192U,(_Bool)((bool)((int)restart) != 0));
  #line 415 
  return;
}

#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static void dwmac1000_get_adv_lp(void *ioaddr, struct rgmii_adv *adv)
{
  #line 419 
  dwmac_get_adv_lp(ioaddr,192U,adv);
  #line 420 
  return;
}

#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static void dwmac1000_debug(void *ioaddr, struct stmmac_extra_stats *x, u32 rx_queues, u32 tx_queues)
{
  #line 425 
  u32 value = readl(ioaddr + 36U);
  #line 427 
  if (((unsigned long)value & 33554432UL) != 0UL) 
                                                  #line 428 
                                                  (x->mtl_tx_status_fifo_full) ++;
  #line 429 
  if (((unsigned long)value & 16777216UL) != 0UL) 
                                                  #line 430 
                                                  (x->mtl_tx_fifo_not_empty) ++;
  #line 431 
  if (((unsigned long)value & 4194304UL) != 0UL) 
                                                 #line 432 
                                                 (x->mmtl_fifo_ctrl) ++;
  #line 433 
  if (((unsigned long)value & 3145728UL) != 0UL) {
    #line 434 
    u32 trcsts = (unsigned int)((unsigned long)value >> 20) & 3U;
    #line 436 
    if (trcsts == 3U) 
                      #line 437 
                      (x->mtl_tx_fifo_read_ctrl_write) ++;
    else 
      #line 438 
      if (trcsts == 2U) 
                        #line 439 
                        (x->mtl_tx_fifo_read_ctrl_wait) ++;
      else 
        #line 440 
        if (trcsts == 1U) 
                          #line 441 
                          (x->mtl_tx_fifo_read_ctrl_read) ++; else 
                                                                   #line 443 
                                                                   (x->mtl_tx_fifo_read_ctrl_idle) ++;
  }
  #line 445 
  if (((unsigned long)value & 524288UL) != 0UL) 
                                                #line 446 
                                                (x->mac_tx_in_pause) ++;
  #line 447 
  if (((unsigned long)value & 393216UL) != 0UL) {
    #line 448 
    u32 tfcsts = (unsigned int)((unsigned long)value >> 17) & 3U;
    #line 451 
    if (tfcsts == 3U) 
                      #line 452 
                      (x->mac_tx_frame_ctrl_xfer) ++;
    else 
      #line 453 
      if (tfcsts == 2U) 
                        #line 454 
                        (x->mac_tx_frame_ctrl_pause) ++;
      else 
        #line 455 
        if (tfcsts == 1U) 
                          #line 456 
                          (x->mac_tx_frame_ctrl_wait) ++; else 
                                                               #line 458 
                                                               (x->mac_tx_frame_ctrl_idle) ++;
  }
  #line 460 
  if (((unsigned long)value & 65536UL) != 0UL) 
                                               #line 461 
                                               (x->mac_gmii_tx_proto_engine) ++;
  #line 462 
  if (((unsigned long)value & 768UL) != 0UL) {
    #line 463 
    u32 rxfsts = (unsigned int)((unsigned long)value >> 5) & 24U;
    #line 466 
    if (rxfsts == 3U) 
                      #line 467 
                      (x->mtl_rx_fifo_fill_level_full) ++;
    else 
      #line 468 
      if (rxfsts == 2U) 
                        #line 469 
                        (x->mtl_rx_fifo_fill_above_thresh) ++;
      else 
        #line 470 
        if (rxfsts == 1U) 
                          #line 471 
                          (x->mtl_rx_fifo_fill_below_thresh) ++; else 
                                                                   #line 473 
                                                                   (x->mtl_rx_fifo_fill_level_empty) ++;
  }
  #line 475 
  if (((unsigned long)value & 96UL) != 0UL) {
    #line 476 
    u32 rrcsts = (unsigned int)((unsigned long)value >> 5) & 3U;
    #line 479 
    if (rrcsts == 3U) 
                      #line 480 
                      (x->mtl_rx_fifo_read_ctrl_flush) ++;
    else 
      #line 481 
      if (rrcsts == 2U) 
                        #line 482 
                        (x->mtl_rx_fifo_read_ctrl_read_data) ++;
      else 
        #line 483 
        if (rrcsts == 1U) 
                          #line 484 
                          (x->mtl_rx_fifo_read_ctrl_status) ++; else 
                                                                  #line 486 
                                                                  (x->mtl_rx_fifo_read_ctrl_idle) ++;
  }
  #line 488 
  if (((unsigned long)value & 16UL) != 0UL) 
                                            #line 489 
                                            (x->mtl_rx_fifo_ctrl_active) ++;
  #line 490 
  if (((unsigned long)value & 6UL) != 0UL) 
                                           #line 491 
                                           x->mac_rx_frame_ctrl_fifo = ((unsigned long)value >> 1) & 3UL;
  #line 493 
  if (((unsigned long)value & 1UL) != 0UL) 
                                           #line 494 
                                           (x->mac_gmii_rx_proto_engine) ++;
  #line 495 
  return;
}

#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
static void dwmac1000_set_mac_loopback(void *ioaddr, bool enable)
{
  #line 499 
  u32 value = readl(ioaddr);
  #line 501 
  if ((int)enable != 0) 
                        #line 502 
                        value |= 4096U; else 
                                             #line 504 
                                             value &= 4294963199U;
  #line 506 
  writel(value,ioaddr);
  #line 507 
  return;
}

#line 509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
struct stmmac_ops dwmac1000_ops = {.core_init = & dwmac1000_core_init, .set_mac = & stmmac_set_mac, .rx_ipc = & dwmac1000_rx_ipc_enable, .dump_regs = & dwmac1000_dump_regs, .host_irq_status = & dwmac1000_irq_status, .set_filter = & dwmac1000_set_filter, .flow_ctrl = & dwmac1000_flow_ctrl, .pmt = & dwmac1000_pmt, .set_umac_addr = & dwmac1000_set_umac_addr, .get_umac_addr = & dwmac1000_get_umac_addr, .set_eee_mode = & dwmac1000_set_eee_mode, .reset_eee_mode = & dwmac1000_reset_eee_mode, .set_eee_timer = & dwmac1000_set_eee_timer, .set_eee_pls = & dwmac1000_set_eee_pls, .debug = & dwmac1000_debug, .pcs_ctrl_ane = & dwmac1000_ctrl_ane, .pcs_rane = & dwmac1000_rane, .pcs_get_adv_lp = & dwmac1000_get_adv_lp, .set_mac_loopback = & dwmac1000_set_mac_loopback};
#line 531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c"
int dwmac1000_setup(struct stmmac_priv *priv)
{
  #line 533 
  struct mac_device_info *mac = priv->hw;
  #line 535 
  _dev_info(priv->device,(char *)"\tDWMAC1000\n");
  #line 537 
  (priv->dev)->priv_flags |= 4096U;
  #line 538 
  mac->pcsr = priv->ioaddr;
  #line 539 
  mac->multicast_filter_bins = (unsigned int)(priv->plat)->multicast_filter_bins;
  #line 540 
  mac->unicast_filter_entries = (unsigned int)(priv->plat)->unicast_filter_entries;
  #line 541 
  mac->mcast_bits_log2 = 0U;
  #line 543 
  if (mac->multicast_filter_bins != 0U) 
    #line 544 
    if (0 != 0) {
      #line 544 
      unsigned int tmp_42;
      #line 544 
      unsigned int tmp_10;
      #line 544 
      unsigned int tmp_11;
      #line 544 
      unsigned int tmp_43;
      #line 544 
      unsigned int tmp_44;
      #line 544 
      unsigned int tmp_12;
      #line 544 
      unsigned int tmp_13;
      #line 544 
      unsigned int tmp_45;
      #line 544 
      unsigned int tmp_46;
      #line 544 
      unsigned int tmp_14;
      #line 544 
      unsigned int tmp_15;
      #line 544 
      unsigned int tmp_47;
      #line 544 
      unsigned int tmp_48;
      #line 544 
      unsigned int tmp_16;
      #line 544 
      unsigned int tmp_17;
      #line 544 
      unsigned int tmp_49;
      #line 544 
      unsigned int tmp_50;
      #line 544 
      unsigned int tmp_18;
      #line 544 
      unsigned int tmp_19;
      #line 544 
      unsigned int tmp_51;
      #line 544 
      unsigned int tmp_52;
      #line 544 
      unsigned int tmp_20;
      #line 544 
      unsigned int tmp_21;
      #line 544 
      unsigned int tmp_53;
      #line 544 
      unsigned int tmp_54;
      #line 544 
      unsigned int tmp_22;
      #line 544 
      unsigned int tmp_23;
      #line 544 
      unsigned int tmp_55;
      #line 544 
      unsigned int tmp_56;
      #line 544 
      unsigned int tmp_24;
      #line 544 
      unsigned int tmp_25;
      #line 544 
      unsigned int tmp_57;
      #line 544 
      unsigned int tmp_58;
      #line 544 
      unsigned int tmp_26;
      #line 544 
      unsigned int tmp_27;
      #line 544 
      unsigned int tmp_59;
      #line 544 
      unsigned int tmp_60;
      #line 544 
      unsigned int tmp_28;
      #line 544 
      unsigned int tmp_29;
      #line 544 
      unsigned int tmp_30;
      #line 544 
      unsigned int tmp;
      #line 544 
      unsigned int tmp_31;
      #line 544 
      unsigned int tmp_32;
      #line 544 
      unsigned int tmp_0;
      #line 544 
      unsigned int tmp_1;
      #line 544 
      unsigned int tmp_33;
      #line 544 
      unsigned int tmp_34;
      #line 544 
      unsigned int tmp_2;
      #line 544 
      unsigned int tmp_3;
      #line 544 
      unsigned int tmp_35;
      #line 544 
      unsigned int tmp_36;
      #line 544 
      unsigned int tmp_4;
      #line 544 
      unsigned int tmp_5;
      #line 544 
      unsigned int tmp_37;
      #line 544 
      unsigned int tmp_38;
      #line 544 
      unsigned int tmp_6;
      #line 544 
      unsigned int tmp_7;
      #line 544 
      unsigned int tmp_39;
      #line 544 
      unsigned int tmp_40;
      #line 544 
      unsigned int tmp_8;
      #line 544 
      unsigned int tmp_9;
      #line 544 
      unsigned int tmp_41;
      #line 544 
      unsigned int tmp_61;
      #line 544 
      if (mac->multicast_filter_bins > 1U) {
        #line 544 
        if (((unsigned long long)mac->multicast_filter_bins & 9223372036854775808ULL) == 0ULL) {
          #line 544 
          if (((unsigned long long)mac->multicast_filter_bins & 4611686018427387904ULL) == 0ULL) {
            #line 544 
            if (((unsigned long long)mac->multicast_filter_bins & 2305843009213693952ULL) == 0ULL) {
              #line 544 
              if (((unsigned long long)mac->multicast_filter_bins & 1152921504606846976ULL) == 0ULL) {
                #line 544 
                if (((unsigned long long)mac->multicast_filter_bins & 576460752303423488ULL) == 0ULL) {
                  #line 544 
                  if (((unsigned long long)mac->multicast_filter_bins & 288230376151711744ULL) == 0ULL) {
                    #line 544 
                    if (((unsigned long long)mac->multicast_filter_bins & 144115188075855872ULL) == 0ULL) {
                      #line 544 
                      if (((unsigned long long)mac->multicast_filter_bins & 72057594037927936ULL) == 0ULL) {
                        #line 544 
                        if (((unsigned long long)mac->multicast_filter_bins & 36028797018963968ULL) == 0ULL) {
                          #line 544 
                          if (((unsigned long long)mac->multicast_filter_bins & 18014398509481984ULL) == 0ULL) {
                            #line 544 
                            if (((unsigned long long)mac->multicast_filter_bins & 9007199254740992ULL) == 0ULL) {
                              #line 544 
                              if (((unsigned long long)mac->multicast_filter_bins & 4503599627370496ULL) == 0ULL) {
                                #line 544 
                                if (((unsigned long long)mac->multicast_filter_bins & 2251799813685248ULL) == 0ULL) {
                                  #line 544 
                                  if (((unsigned long long)mac->multicast_filter_bins & 1125899906842624ULL) == 0ULL) {
                                    #line 544 
                                    if (((unsigned long long)mac->multicast_filter_bins & 562949953421312ULL) == 0ULL) {
                                      #line 544 
                                      if (((unsigned long long)mac->multicast_filter_bins & 281474976710656ULL) == 0ULL) {
                                        #line 544 
                                        if (((unsigned long long)mac->multicast_filter_bins & 140737488355328ULL) == 0ULL) {
                                          #line 544 
                                          if (((unsigned long long)mac->multicast_filter_bins & 70368744177664ULL) == 0ULL) {
                                            #line 544 
                                            if (((unsigned long long)mac->multicast_filter_bins & 35184372088832ULL) == 0ULL) {
                                              #line 544 
                                              if (((unsigned long long)mac->multicast_filter_bins & 17592186044416ULL) == 0ULL) {
                                                #line 544 
                                                if (((unsigned long long)mac->multicast_filter_bins & 8796093022208ULL) == 0ULL) {
                                                  #line 544 
                                                  if (((unsigned long long)mac->multicast_filter_bins & 4398046511104ULL) == 0ULL) {
                                                    #line 544 
                                                    if (((unsigned long long)mac->multicast_filter_bins & 2199023255552ULL) == 0ULL) {
                                                      #line 544 
                                                      if (((unsigned long long)mac->multicast_filter_bins & 1099511627776ULL) == 0ULL) {
                                                        #line 544 
                                                        if (((unsigned long long)mac->multicast_filter_bins & 549755813888ULL) == 0ULL) {
                                                          #line 544 
                                                          if (((unsigned long long)mac->multicast_filter_bins & 274877906944ULL) == 0ULL) {
                                                            #line 544 
                                                            if (((unsigned long long)mac->multicast_filter_bins & 137438953472ULL) == 0ULL) {
                                                              #line 544 
                                                              if (((unsigned long long)mac->multicast_filter_bins & 68719476736ULL) == 0ULL) {
                                                                #line 544 
                                                                if (((unsigned long long)mac->multicast_filter_bins & 34359738368ULL) == 0ULL) {
                                                                  #line 544 
                                                                  if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 17179869184ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 8589934592ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 4294967296ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 2147483648ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 1073741824ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 536870912ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 268435456ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 134217728ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 67108864ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 33554432ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 16777216ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 8388608ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 4194304ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 2097152ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 1048576ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 524288ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 262144ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 131072ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 65536ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 32768ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 16384ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 8192ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 4096ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 2048ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 1024ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 512ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 256ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 128ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 64ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 32ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 16ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 8ULL) == 0ULL) {
                                                                    #line 544 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 4ULL) != 0ULL) 
                                                                    #line 544 
                                                                    tmp = 2U; else 
                                                                    #line 544 
                                                                    tmp = 1U;
                                                                    #line 544 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_0 = 3U;
                                                                    #line 544 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_1 = 4U;
                                                                    #line 544 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_2 = 5U;
                                                                    #line 544 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_3 = 6U;
                                                                    #line 544 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_4 = 7U;
                                                                    #line 544 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_5 = 8U;
                                                                    #line 544 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_6 = 9U;
                                                                    #line 544 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_7 = 10U;
                                                                    #line 544 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_8 = 11U;
                                                                    #line 544 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_9 = 12U;
                                                                    #line 544 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_10 = 13U;
                                                                    #line 544 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_11 = 14U;
                                                                    #line 544 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_12 = 15U;
                                                                    #line 544 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_13 = 16U;
                                                                    #line 544 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_14 = 17U;
                                                                    #line 544 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_15 = 18U;
                                                                    #line 544 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_16 = 19U;
                                                                    #line 544 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_17 = 20U;
                                                                    #line 544 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_18 = 21U;
                                                                    #line 544 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_19 = 22U;
                                                                    #line 544 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_20 = 23U;
                                                                    #line 544 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_21 = 24U;
                                                                    #line 544 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_22 = 25U;
                                                                    #line 544 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_23 = 26U;
                                                                    #line 544 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_24 = 27U;
                                                                    #line 544 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_25 = 28U;
                                                                    #line 544 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_26 = 29U;
                                                                    #line 544 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_27 = 30U;
                                                                    #line 544 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_28 = 31U;
                                                                    #line 544 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_29 = 32U;
                                                                    #line 544 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 544 
                                                                    tmp_30 = 33U;
                                                                    #line 544 
                                                                    tmp_31 = tmp_30;
                                                                  }
                                                                  else 
                                                                    #line 544 
                                                                    tmp_31 = 34U;
                                                                  #line 544 
                                                                  tmp_32 = tmp_31;
                                                                }
                                                                else 
                                                                  #line 544 
                                                                  tmp_32 = 35U;
                                                                #line 544 
                                                                tmp_33 = tmp_32;
                                                              }
                                                              else 
                                                                   #line 544 
                                                                   tmp_33 = 36U;
                                                              #line 544 
                                                              tmp_34 = tmp_33;
                                                            }
                                                            else 
                                                                 #line 544 
                                                                 tmp_34 = 37U;
                                                            #line 544 
                                                            tmp_35 = tmp_34;
                                                          }
                                                          else 
                                                               #line 544 
                                                               tmp_35 = 38U;
                                                          #line 544 
                                                          tmp_36 = tmp_35;
                                                        }
                                                        else 
                                                             #line 544 
                                                             tmp_36 = 39U;
                                                        #line 544 
                                                        tmp_37 = tmp_36;
                                                      }
                                                      else 
                                                           #line 544 
                                                           tmp_37 = 40U;
                                                      #line 544 
                                                      tmp_38 = tmp_37;
                                                    }
                                                    else 
                                                         #line 544 
                                                         tmp_38 = 41U;
                                                    #line 544 
                                                    tmp_39 = tmp_38;
                                                  }
                                                  else 
                                                       #line 544 
                                                       tmp_39 = 42U;
                                                  #line 544 
                                                  tmp_40 = tmp_39;
                                                }
                                                else 
                                                     #line 544 
                                                     tmp_40 = 43U;
                                                #line 544 
                                                tmp_41 = tmp_40;
                                              }
                                              else 
                                                   #line 544 
                                                   tmp_41 = 44U;
                                              #line 544 
                                              tmp_42 = tmp_41;
                                            }
                                            else 
                                                 #line 544 
                                                 tmp_42 = 45U;
                                            #line 544 
                                            tmp_43 = tmp_42;
                                          }
                                          else 
                                               #line 544 
                                               tmp_43 = 46U;
                                          #line 544 
                                          tmp_44 = tmp_43;
                                        }
                                        else 
                                             #line 544 
                                             tmp_44 = 47U;
                                        #line 544 
                                        tmp_45 = tmp_44;
                                      }
                                      else 
                                           #line 544 
                                           tmp_45 = 48U;
                                      #line 544 
                                      tmp_46 = tmp_45;
                                    }
                                    else 
                                         #line 544 
                                         tmp_46 = 49U;
                                    #line 544 
                                    tmp_47 = tmp_46;
                                  }
                                  else 
                                       #line 544 
                                       tmp_47 = 50U;
                                  #line 544 
                                  tmp_48 = tmp_47;
                                }
                                else 
                                     #line 544 
                                     tmp_48 = 51U;
                                #line 544 
                                tmp_49 = tmp_48;
                              }
                              else 
                                   #line 544 
                                   tmp_49 = 52U;
                              #line 544 
                              tmp_50 = tmp_49;
                            }
                            else 
                                 #line 544 
                                 tmp_50 = 53U;
                            #line 544 
                            tmp_51 = tmp_50;
                          }
                          else 
                               #line 544 
                               tmp_51 = 54U;
                          #line 544 
                          tmp_52 = tmp_51;
                        }
                        else 
                             #line 544 
                             tmp_52 = 55U;
                        #line 544 
                        tmp_53 = tmp_52;
                      }
                      else 
                           #line 544 
                           tmp_53 = 56U;
                      #line 544 
                      tmp_54 = tmp_53;
                    }
                    else 
                         #line 544 
                         tmp_54 = 57U;
                    #line 544 
                    tmp_55 = tmp_54;
                  }
                  else 
                       #line 544 
                       tmp_55 = 58U;
                  #line 544 
                  tmp_56 = tmp_55;
                }
                else 
                     #line 544 
                     tmp_56 = 59U;
                #line 544 
                tmp_57 = tmp_56;
              }
              else 
                   #line 544 
                   tmp_57 = 60U;
              #line 544 
              tmp_58 = tmp_57;
            }
            else 
                 #line 544 
                 tmp_58 = 61U;
            #line 544 
            tmp_59 = tmp_58;
          }
          else 
               #line 544 
               tmp_59 = 62U;
          #line 544 
          tmp_60 = tmp_59;
        }
        else 
             #line 544 
             tmp_60 = 63U;
        #line 544 
        tmp_61 = tmp_60;
      }
      else 
           #line 544 
           tmp_61 = 0U;
      #line 544 
      mac->mcast_bits_log2 = tmp_61;
    }
    else {
      #line 544 
      mac->mcast_bits_log2 = (unsigned int)__ilog2_u32(mac->multicast_filter_bins);
    }
  #line 546 
  mac->link.duplex = 2048U;
  #line 547 
  mac->link.speed10 = 32768U;
  #line 548 
  mac->link.speed100 = 49152U;
  #line 549 
  mac->link.speed1000 = 0U;
  #line 550 
  mac->link.speed_mask = 49152U;
  #line 551 
  mac->mii.addr = 16U;
  #line 552 
  mac->mii.data = 20U;
  #line 553 
  mac->mii.addr_shift = 11U;
  #line 554 
  mac->mii.addr_mask = 63488U;
  #line 555 
  mac->mii.reg_shift = 6U;
  #line 556 
  mac->mii.reg_mask = 1984U;
  #line 557 
  mac->mii.clk_csr_shift = 2U;
  #line 558 
  mac->mii.clk_csr_mask = 60U;
  #line 560 
  return 0;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 27 
void *ldv_devm_kzalloc(size_t size, gfp_t flags);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/hwif.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags);
#line 1712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
#line 912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
struct stmmac_ops dwmac4_ops;
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
#line 470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
struct stmmac_dma_ops dwmac4_dma_ops;
#line 563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
#line 951  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
struct stmmac_ops dwmac410_ops;
#line 564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
struct stmmac_dma_ops dwmac410_dma_ops;
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
#line 989  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
struct stmmac_ops dwmac510_ops;
#line 566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
struct stmmac_tc_ops dwmac510_tc_ops;
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
#line 1362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
struct stmmac_ops dwxgmac210_ops;
#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.h"
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.c"
int stmmac_hwif_init(struct stmmac_priv *priv);
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/common.h"
#line 462 
int dwmac4_setup(struct stmmac_priv *priv);
#line 463 
#line 463 
int dwxgmac2_setup(struct stmmac_priv *priv);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.c"
static u32 stmmac_get_id(struct stmmac_priv *priv, u32 id_reg)
{
  #line 13 
  u32 reg = readl(priv->ioaddr + (unsigned long)id_reg);
  #line 15 
  if (reg == 0U) {
    #line 16 
    _dev_info(priv->device,(char *)"Version ID not available\n");
    #line 17 
    return 0U;
  }
  #line 20 
  _dev_info(priv->device,(char *)"User ID: 0x%x, Synopsys ID: 0x%x\n",(reg >> 8) & 255U,reg & 255U);
  #line 23 
  return reg & 255U;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.c"
static void stmmac_dwmac_mode_quirk(struct stmmac_priv *priv)
{
  #line 28 
  struct mac_device_info *mac = priv->hw;
  #line 30 
  if (priv->chain_mode != 0U) {
    #line 31 
    _dev_info(priv->device,(char *)"Chain mode enabled\n");
    #line 32 
    priv->mode = 1U;
    #line 33 
    mac->mode = & chain_mode_ops;
  }
  else {
    #line 35 
    _dev_info(priv->device,(char *)"Ring mode enabled\n");
    #line 36 
    priv->mode = 2U;
    #line 37 
    mac->mode = & ring_mode_ops;
  }
  #line 39 
  return;
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.c"
static int stmmac_dwmac1_quirks(struct stmmac_priv *priv)
{
  #line 43 
  struct mac_device_info *mac = priv->hw;
  #line 45 
  if ((priv->plat)->enh_desc != 0) {
    #line 46 
    _dev_info(priv->device,(char *)"Enhanced/Alternate descriptors\n");
    #line 49 
    if (priv->synopsys_id > 52) {
      #line 50 
      _dev_info(priv->device,(char *)"Enabled extended descriptors\n");
      #line 51 
      priv->extend_desc = 1;
    }
    else 
         #line 53 
         _dev_warn(priv->device,(char *)"Extended descriptors not supported\n");
    #line 56 
    mac->desc = & enh_desc_ops;
  }
  else {
    #line 58 
    _dev_info(priv->device,(char *)"Normal descriptors\n");
    #line 59 
    mac->desc = & ndesc_ops;
  }
  #line 62 
  stmmac_dwmac_mode_quirk(priv);
  #line 63 
  return 0;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.c"
static int stmmac_dwmac4_quirks(struct stmmac_priv *priv)
{
  #line 68 
  stmmac_dwmac_mode_quirk(priv);
  #line 69 
  return 0;
}

#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.c"
static struct stmmac_hwif_entry stmmac_hw[7U] = {{.regs = {.ptp_off = 1792U, .mmc_off = 256U}, .dma = (void *)(& dwmac100_dma_ops), .mac = (void *)(& dwmac100_ops), .hwtimestamp = (void *)(& stmmac_ptp), .mmc = (void *)(& dwmac_mmc_ops), .setup = & dwmac100_setup, .quirks = & stmmac_dwmac1_quirks}, {.gmac = (_Bool)1, .regs = {.ptp_off = 1792U, .mmc_off = 256U}, .dma = (void *)(& dwmac1000_dma_ops), .mac = (void *)(& dwmac1000_ops), .hwtimestamp = (void *)(& stmmac_ptp), .mmc = (void *)(& dwmac_mmc_ops), .setup = & dwmac1000_setup, .quirks = & stmmac_dwmac1_quirks}, {.gmac4 = (_Bool)1, .regs = {.ptp_off = 2816U, .mmc_off = 1792U}, .desc = (void *)(& dwmac4_desc_ops), .dma = (void *)(& dwmac4_dma_ops), .mac = (void *)(& dwmac4_ops), .hwtimestamp = (void *)(& stmmac_ptp), .tc = (void *)(& dwmac510_tc_ops), .mmc = (void *)(& dwmac_mmc_ops), .setup = & dwmac4_setup, .quirks = & stmmac_dwmac4_quirks}, {.gmac4 = (_Bool)1, .min_id = 64U, .regs = {.ptp_off = 2816U, .mmc_off = 1792U}, .desc = (void *)(& dwmac4_desc_ops), .dma = (void *)(& dwmac4_dma_ops), .mac = (void *)(& dwmac410_ops), .hwtimestamp = (void *)(& stmmac_ptp), .mode = (void *)(& dwmac4_ring_mode_ops), .tc = (void *)(& dwmac510_tc_ops), .mmc = (void *)(& dwmac_mmc_ops), .setup = & dwmac4_setup}, {.gmac4 = (_Bool)1, .min_id = 65U, .regs = {.ptp_off = 2816U, .mmc_off = 1792U}, .desc = (void *)(& dwmac4_desc_ops), .dma = (void *)(& dwmac410_dma_ops), .mac = (void *)(& dwmac410_ops), .hwtimestamp = (void *)(& stmmac_ptp), .mode = (void *)(& dwmac4_ring_mode_ops), .tc = (void *)(& dwmac510_tc_ops), .mmc = (void *)(& dwmac_mmc_ops), .setup = & dwmac4_setup}, {.gmac4 = (_Bool)1, .min_id = 81U, .regs = {.ptp_off = 2816U, .mmc_off = 1792U}, .desc = (void *)(& dwmac4_desc_ops), .dma = (void *)(& dwmac410_dma_ops), .mac = (void *)(& dwmac510_ops), .hwtimestamp = (void *)(& stmmac_ptp), .mode = (void *)(& dwmac4_ring_mode_ops), .tc = (void *)(& dwmac510_tc_ops), .mmc = (void *)(& dwmac_mmc_ops), .setup = & dwmac4_setup}, {.xgmac = (_Bool)1, .min_id = 33U, .regs = {.ptp_off = 3328U, .mmc_off = 2048U}, .desc = (void *)(& dwxgmac210_desc_ops), .dma = (void *)(& dwxgmac210_dma_ops), .mac = (void *)(& dwxgmac210_ops), .hwtimestamp = (void *)(& stmmac_ptp), .tc = (void *)(& dwmac510_tc_ops), .mmc = (void *)(& dwxgmac_mmc_ops), .setup = & dwxgmac2_setup}};
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/hwif.c"
int stmmac_hwif_init(struct stmmac_priv *priv)
{
  #line 223 
  struct stmmac_hwif_entry *entry;
  #line 224 
  struct mac_device_info *mac;
  #line 226 
  int i;
  #line 226 
  int ret;
  #line 227 
  u32 id;
  #line 241 
  unsigned int tmp;
  #line 243 
  unsigned int tmp_0;
  #line 220 
  bool needs_xgmac = (_Bool)((priv->plat)->has_xgmac != 0);
  #line 221 
  bool needs_gmac4 = (_Bool)((priv->plat)->has_gmac4 != 0);
  #line 222 
  bool needs_gmac = (_Bool)((priv->plat)->has_gmac != 0);
  #line 225 
  bool needs_setup = (_Bool)1;
  #line 229 
  if ((int)needs_gmac != 0) 
                            #line 230 
                            id = stmmac_get_id(priv,32U);
  else 
    #line 231 
    if ((int)needs_gmac4 != 0 || (int)needs_xgmac != 0) 
                                                        #line 232 
                                                        id = stmmac_get_id(priv,272U); else 
                                                                    #line 234 
                                                                    id = 0U;
  #line 238 
  priv->synopsys_id = (int)id;
  #line 241 
  if ((int)needs_gmac4 != 0) 
                             #line 241 
                             tmp = 2816U; else 
                                               #line 241 
                                               tmp = 1792U;
  #line 241 
  priv->ptpaddr = priv->ioaddr + tmp;
  #line 243 
  if ((int)needs_gmac4 != 0) 
                             #line 243 
                             tmp_0 = 1792U; else 
                                                 #line 243 
                                                 tmp_0 = 256U;
  #line 243 
  priv->mmcaddr = priv->ioaddr + tmp_0;
  #line 247 
  if ((priv->plat)->setup != (struct mac_device_info *(*)(void *))0) {
    #line 248 
    mac = (*((priv->plat)->setup))((void *)priv);
    #line 249 
    needs_setup = (_Bool)0;
  }
  else 
       #line 251 
       mac = (struct mac_device_info *)cif_devm_kzalloc(priv->device,168UL,3264U);
  #line 254 
  if (mac == (struct mac_device_info *)0) 
                                          #line 255 
                                          return -12;
  #line 258 
  i = 6;
  #line 258 
  while (i >= 0) {
    {
      #line 272 
      struct stmmac_desc_ops *tmp_2;
      #line 273 
      struct stmmac_dma_ops *tmp_3;
      #line 274 
      struct stmmac_ops *tmp_4;
      #line 275 
      struct stmmac_hwtimestamp *tmp_5;
      #line 276 
      struct stmmac_mode_ops *tmp_6;
      #line 277 
      struct stmmac_tc_ops *tmp_7;
      #line 278 
      struct stmmac_mmc_ops *tmp_8;
      #line 259 
      entry = & stmmac_hw[i];
      #line 261 
      if ((int)entry->gmac != (needs_gmac != 0)) 
                                                 #line 262 
                                                 goto __Cont;
      #line 263 
      if ((int)entry->gmac4 != (needs_gmac4 != 0)) 
                                                   #line 264 
                                                   goto __Cont;
      #line 265 
      if ((int)entry->xgmac != (needs_xgmac != 0)) 
                                                   #line 266 
                                                   goto __Cont;
      #line 268 
      if ((unsigned int)priv->synopsys_id < entry->min_id) 
                                                           #line 269 
                                                           goto __Cont;
      #line 272 
      tmp_2 = (struct stmmac_desc_ops *)(mac->desc != (struct stmmac_desc_ops *)0);
      #line 272 
      if (! tmp_2) 
                   #line 272 
                   tmp_2 = (struct stmmac_desc_ops *)entry->desc;
      #line 272 
      mac->desc = tmp_2;
      #line 273 
      tmp_3 = (struct stmmac_dma_ops *)(mac->dma != (struct stmmac_dma_ops *)0);
      #line 273 
      if (! tmp_3) 
                   #line 273 
                   tmp_3 = (struct stmmac_dma_ops *)entry->dma;
      #line 273 
      mac->dma = tmp_3;
      #line 274 
      tmp_4 = (struct stmmac_ops *)(mac->mac != (struct stmmac_ops *)0);
      #line 274 
      if (! tmp_4) 
                   #line 274 
                   tmp_4 = (struct stmmac_ops *)entry->mac;
      #line 274 
      mac->mac = tmp_4;
      #line 275 
      tmp_5 = (struct stmmac_hwtimestamp *)(mac->ptp != (struct stmmac_hwtimestamp *)0);
      #line 275 
      if (! tmp_5) 
                   #line 275 
                   tmp_5 = (struct stmmac_hwtimestamp *)entry->hwtimestamp;
      #line 275 
      mac->ptp = tmp_5;
      #line 276 
      tmp_6 = (struct stmmac_mode_ops *)(mac->mode != (struct stmmac_mode_ops *)0);
      #line 276 
      if (! tmp_6) 
                   #line 276 
                   tmp_6 = (struct stmmac_mode_ops *)entry->mode;
      #line 276 
      mac->mode = tmp_6;
      #line 277 
      tmp_7 = (struct stmmac_tc_ops *)(mac->tc != (struct stmmac_tc_ops *)0);
      #line 277 
      if (! tmp_7) 
                   #line 277 
                   tmp_7 = (struct stmmac_tc_ops *)entry->tc;
      #line 277 
      mac->tc = tmp_7;
      #line 278 
      tmp_8 = (struct stmmac_mmc_ops *)(mac->mmc != (struct stmmac_mmc_ops *)0);
      #line 278 
      if (! tmp_8) 
                   #line 278 
                   tmp_8 = (struct stmmac_mmc_ops *)entry->mmc;
      #line 278 
      mac->mmc = tmp_8;
      #line 280 
      priv->hw = mac;
      #line 281 
      priv->ptpaddr = priv->ioaddr + (unsigned long)entry->regs.ptp_off;
      #line 282 
      priv->mmcaddr = priv->ioaddr + (unsigned long)entry->regs.mmc_off;
      #line 285 
      if ((int)needs_setup != 0) {
        #line 286 
        ret = (*(entry->setup))(priv);
        #line 287 
        if (ret != 0) 
                      #line 288 
                      return ret;
      }
      #line 292 
      priv->hwif_quirks = entry->quirks;
      #line 293 
      return 0;
    }
    #line 258 
    __Cont: 
            #line 258 
    i --;
  }
  #line 296 
  _dev_err(priv->device,(char *)"Failed to find HW IF (id=0x%x, gmac=%d/%d)\n",id,(int)needs_gmac,(int)needs_gmac4);
  #line 298 
  return -22;
}

#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/hwif.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags)
{
  #line 836 
  return ldv_devm_kzalloc(size,flags);
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
static void dwmac4_dma_axi(void *ioaddr, struct stmmac_axi *axi)
{
  #line 20 
  int i;
  #line 22 
  char *tmp_0;
  #line 19 
  u32 value = readl(ioaddr + 4100U);
  #line 22 
  if (((unsigned long)value & 1UL) != 0UL) 
                                           #line 22 
                                           tmp_0 = (char *)"fixed"; else 
                                                                    #line 22 
                                                                    tmp_0 = (char *)"any";
  #line 22 
  printk((char *)"\001",tmp_0);
  #line 25 
  if ((int)axi->axi_lpi_en != 0) 
                                 #line 26 
                                 value |= 2147483648U;
  #line 27 
  if ((int)axi->axi_xit_frm != 0) 
                                  #line 28 
                                  value |= 1073741824U;
  #line 30 
  value &= 4043309055U;
  #line 31 
  value = ((axi->axi_wr_osr_lmt << 24) & 251658240U) | value;
  #line 34 
  value &= 4293984255U;
  #line 35 
  value = ((axi->axi_rd_osr_lmt << 16) & 983040U) | value;
  #line 42 
  i = 0;
  #line 42 
  while (i <= 6) {
    #line 43 
    switch (axi->axi_blen[i]) {
      #line 44 
      case (u32)256: 
                     #line 44 
      ;
      #line 45 
      value |= 128U;
      #line 46 
      break;
      #line 47 
      case (u32)128: 
                     #line 47 
      ;
      #line 48 
      value |= 64U;
      #line 49 
      break;
      #line 50 
      case (u32)64: 
                    #line 50 
      ;
      #line 51 
      value |= 32U;
      #line 52 
      break;
      #line 53 
      case (u32)32: 
                    #line 53 
      ;
      #line 54 
      value |= 16U;
      #line 55 
      break;
      #line 56 
      case (u32)16: 
                    #line 56 
      ;
      #line 57 
      value |= 8U;
      #line 58 
      break;
      #line 59 
      case (u32)8: 
                   #line 59 
      ;
      #line 60 
      value |= 4U;
      #line 61 
      break;
      #line 62 
      case (u32)4: 
                   #line 62 
      ;
      #line 63 
      value |= 2U;
      #line 64 
      break;
    }
    #line 42 
    i ++;
  }
  #line 68 
  writel(value,ioaddr + 4100U);
  #line 69 
  return;
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
static void dwmac4_dma_init_rx_chan(void *ioaddr, struct stmmac_dma_cfg *dma_cfg, dma_addr_t dma_rx_phy, u32 chan)
{
  #line 75 
  u32 value;
  #line 76 
  int tmp;
  #line 76 
  tmp = dma_cfg->rxpbl != 0;
  #line 76 
  if (! tmp) 
             #line 76 
             tmp = dma_cfg->pbl;
  #line 76 
  u32 rxpbl = (unsigned int)tmp;
  #line 78 
  value = readl(ioaddr + (unsigned long)((chan + 34U) * 128U + 8U));
  #line 79 
  value = (rxpbl << 16) | value;
  #line 80 
  writel(value,ioaddr + (unsigned long)((chan + 34U) * 128U + 8U));
  #line 82 
  if ((long)((int)dma_cfg->eame != 0) != 0L) 
                                             #line 83 
                                             writel((unsigned int)(dma_rx_phy >> 32),ioaddr + (unsigned long)((chan + 34U) * 128U + 24U));
  #line 86 
  writel((unsigned int)dma_rx_phy,ioaddr + (unsigned long)((chan + 34U) * 128U + 28U));
  #line 87 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
static void dwmac4_dma_init_tx_chan(void *ioaddr, struct stmmac_dma_cfg *dma_cfg, dma_addr_t dma_tx_phy, u32 chan)
{
  #line 93 
  u32 value;
  #line 94 
  int tmp;
  #line 94 
  tmp = dma_cfg->txpbl != 0;
  #line 94 
  if (! tmp) 
             #line 94 
             tmp = dma_cfg->pbl;
  #line 94 
  u32 txpbl = (unsigned int)tmp;
  #line 96 
  value = readl(ioaddr + (unsigned long)((chan + 34U) * 128U + 4U));
  #line 97 
  value = (txpbl << 16) | value;
  #line 100 
  value |= 16U;
  #line 102 
  writel(value,ioaddr + (unsigned long)((chan + 34U) * 128U + 4U));
  #line 104 
  if ((long)((int)dma_cfg->eame != 0) != 0L) 
                                             #line 105 
                                             writel((unsigned int)(dma_tx_phy >> 32),ioaddr + (unsigned long)((chan + 34U) * 128U + 16U));
  #line 108 
  writel((unsigned int)dma_tx_phy,ioaddr + (unsigned long)((chan + 34U) * 128U + 20U));
  #line 109 
  return;
}

#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
static void dwmac4_dma_init_channel(void *ioaddr, struct stmmac_dma_cfg *dma_cfg, u32 chan)
{
  #line 114 
  u32 value;
  #line 117 
  value = readl(ioaddr + (unsigned long)((chan + 34U) * 128U));
  #line 118 
  if ((int)dma_cfg->pblx8 != 0) 
                                #line 119 
                                value |= 65536U;
  #line 120 
  writel(value,ioaddr + (unsigned long)((chan + 34U) * 128U));
  #line 123 
  writel(102465U,ioaddr + (unsigned long)((chan + 34U) * 128U + 52U));
  #line 125 
  return;
}

#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
static void dwmac4_dma_init(void *ioaddr, struct stmmac_dma_cfg *dma_cfg, int atds)
{
  #line 130 
  u32 value = readl(ioaddr + 4100U);
  #line 133 
  if (dma_cfg->fixed_burst != 0) 
                                 #line 134 
                                 value |= 1U;
  #line 137 
  if (dma_cfg->mixed_burst != 0) 
                                 #line 138 
                                 value |= 16384U;
  #line 140 
  if ((int)dma_cfg->aal != 0) 
                              #line 141 
                              value |= 4096U;
  #line 143 
  if ((int)dma_cfg->eame != 0) 
                               #line 144 
                               value |= 2048U;
  #line 146 
  writel(value,ioaddr + 4100U);
  #line 147 
  return;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
static void _dwmac4_dump_dma_regs(void *ioaddr, u32 channel, u32 *reg_space)
{
  #line 152 
  *(reg_space + (unsigned long)(((channel + 34U) * 128U) / 4U)) = readl(ioaddr + (unsigned long)((channel + 34U) * 128U));
  #line 154 
  *(reg_space + (unsigned long)(((channel + 34U) * 128U + 4U) / 4U)) = readl(ioaddr + (unsigned long)((channel + 34U) * 128U + 4U));
  #line 156 
  *(reg_space + (unsigned long)(((channel + 34U) * 128U + 8U) / 4U)) = readl(ioaddr + (unsigned long)((channel + 34U) * 128U + 8U));
  #line 158 
  *(reg_space + (unsigned long)(((channel + 34U) * 128U + 20U) / 4U)) = readl(ioaddr + (unsigned long)((channel + 34U) * 128U + 20U));
  #line 160 
  *(reg_space + (unsigned long)(((channel + 34U) * 128U + 28U) / 4U)) = readl(ioaddr + (unsigned long)((channel + 34U) * 128U + 28U));
  #line 162 
  *(reg_space + (unsigned long)(((channel + 34U) * 128U + 32U) / 4U)) = readl(ioaddr + (unsigned long)((channel + 34U) * 128U + 32U));
  #line 164 
  *(reg_space + (unsigned long)(((channel + 34U) * 128U + 40U) / 4U)) = readl(ioaddr + (unsigned long)((channel + 34U) * 128U + 40U));
  #line 166 
  *(reg_space + (unsigned long)(((channel + 34U) * 128U + 44U) / 4U)) = readl(ioaddr + (unsigned long)((channel + 34U) * 128U + 44U));
  #line 168 
  *(reg_space + (unsigned long)(((channel + 34U) * 128U + 48U) / 4U)) = readl(ioaddr + (unsigned long)((channel + 34U) * 128U + 48U));
  #line 170 
  *(reg_space + (unsigned long)(((channel + 34U) * 128U + 52U) / 4U)) = readl(ioaddr + (unsigned long)((channel + 34U) * 128U + 52U));
  #line 172 
  *(reg_space + (unsigned long)(((channel + 34U) * 128U + 56U) / 4U)) = readl(ioaddr + (unsigned long)((channel + 34U) * 128U + 56U));
  #line 174 
  *(reg_space + (unsigned long)(((channel + 34U) * 128U + 60U) / 4U)) = readl(ioaddr + (unsigned long)((channel + 34U) * 128U + 60U));
  #line 176 
  *(reg_space + (unsigned long)(((channel + 34U) * 128U + 68U) / 4U)) = readl(ioaddr + (unsigned long)((channel + 34U) * 128U + 68U));
  #line 178 
  *(reg_space + (unsigned long)(((channel + 34U) * 128U + 76U) / 4U)) = readl(ioaddr + (unsigned long)((channel + 34U) * 128U + 76U));
  #line 180 
  *(reg_space + (unsigned long)(((channel + 34U) * 128U + 84U) / 4U)) = readl(ioaddr + (unsigned long)((channel + 34U) * 128U + 84U));
  #line 182 
  *(reg_space + (unsigned long)(((channel + 34U) * 128U + 92U) / 4U)) = readl(ioaddr + (unsigned long)((channel + 34U) * 128U + 92U));
  #line 184 
  *(reg_space + (unsigned long)(((channel + 34U) * 128U + 96U) / 4U)) = readl(ioaddr + (unsigned long)((channel + 34U) * 128U + 96U));
  #line 186 
  return;
}

#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
static void dwmac4_dump_dma_regs(void *ioaddr, u32 *reg_space)
{
  #line 190 
  int i;
  #line 192 
  i = 0;
  #line 192 
  while (i <= 0) {
    #line 193 
    _dwmac4_dump_dma_regs(ioaddr,(unsigned int)i,reg_space);
    #line 192 
    i ++;
  }
  #line 194 
  return;
}

#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
static void dwmac4_rx_watchdog(void *ioaddr, u32 riwt, u32 number_chan)
{
  #line 198 
  u32 chan;
  #line 200 
  chan = 0U;
  #line 200 
  while (chan < number_chan) {
    #line 201 
    writel(riwt,ioaddr + (unsigned long)((chan + 34U) * 128U + 56U));
    #line 200 
    chan ++;
  }
  #line 202 
  return;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
static void dwmac4_dma_rx_chan_op_mode(void *ioaddr, int mode, u32 channel, int fifosz, u8 qmode)
{
  #line 208 
  u32 mtl_rx_op;
  #line 208 
  u32 mtl_rx_int;
  #line 207 
  unsigned int rqs = (unsigned int)(fifosz / 256 + -1);
  #line 210 
  mtl_rx_op = readl(ioaddr + (unsigned long)((channel + 52U) * 64U + 48U));
  #line 212 
  if (mode == 1) {
    {
      #line 213 
      bool branch;
      #line 213 
      struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"stmmac", .function = (char *)"dwmac4_dma_rx_chan_op_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c", .format = (char *)"GMAC: enable RX store and forward mode\n", .lineno = (unsigned int)213U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 213 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
      #line 213 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 213 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug441,(char *)"GMAC: enable RX store and forward mode\n");
    }
    #line 214 
    mtl_rx_op |= 32U;
  }
  else {
    {
      #line 216 
      bool branch_0;
      #line 216 
      struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"stmmac", .function = (char *)"dwmac4_dma_rx_chan_op_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c", .format = (char *)"GMAC: disable RX SF mode (threshold %d)\n", .lineno = (unsigned int)216U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 216 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
      #line 216 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 216 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug442,(char *)"GMAC: disable RX SF mode (threshold %d)\n",mode);
    }
    #line 217 
    mtl_rx_op &= 4294967263U;
    #line 218 
    mtl_rx_op &= 24U;
    #line 219 
    if (mode <= 32) 
                    #line 220 
                    mtl_rx_op |= 8U;
    else 
      #line 221 
      if (mode <= 64) 
                      #line 222 
                      mtl_rx_op = mtl_rx_op;
      else 
        #line 223 
        if (mode <= 96) 
                        #line 224 
                        mtl_rx_op |= 16U; else 
                                               #line 226 
                                               mtl_rx_op |= 24U;
  }
  #line 229 
  mtl_rx_op &= 3222274047U;
  #line 230 
  mtl_rx_op = (rqs << 20) | mtl_rx_op;
  #line 235 
  if (fifosz > 4095 && (unsigned int)qmode != 0U) {
    #line 236 
    unsigned int rfd;
    #line 236 
    unsigned int rfa;
    #line 238 
    mtl_rx_op |= 128U;
    #line 246 
    switch (fifosz) {
      #line 247 
      case 4096: 
                 #line 247 
      ;
      #line 251 
      rfd = 3U;
      #line 252 
      rfa = 1U;
      #line 253 
      break;
      #line 255 
      default: 
               #line 255 
      ;
      #line 256 
      rfd = 7U;
      #line 257 
      rfa = 4U;
      #line 258 
      break;
    }
    #line 261 
    mtl_rx_op &= 4293935103U;
    #line 262 
    mtl_rx_op = (rfd << 14) | mtl_rx_op;
    #line 264 
    mtl_rx_op &= 4294951167U;
    #line 265 
    mtl_rx_op = (rfa << 8) | mtl_rx_op;
  }
  #line 268 
  writel(mtl_rx_op,ioaddr + (unsigned long)((channel + 52U) * 64U + 48U));
  #line 271 
  mtl_rx_int = readl(ioaddr + (unsigned long)((channel + 52U) * 64U + 44U));
  #line 272 
  writel(mtl_rx_int | 16777216U,ioaddr + (unsigned long)((channel + 52U) * 64U + 44U));
  #line 274 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
static void dwmac4_dma_tx_chan_op_mode(void *ioaddr, int mode, u32 channel, int fifosz, u8 qmode)
{
  #line 279 
  u32 mtl_tx_op = readl(ioaddr + (unsigned long)((channel + 52U) * 64U));
  #line 280 
  unsigned int tqs = (unsigned int)(fifosz / 256 + -1);
  #line 282 
  if (mode == 1) {
    {
      #line 283 
      bool branch;
      #line 283 
      struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"stmmac", .function = (char *)"dwmac4_dma_tx_chan_op_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c", .format = (char *)"GMAC: enable TX store and forward mode\n", .lineno = (unsigned int)283U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 283 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
      #line 283 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 283 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug443,(char *)"GMAC: enable TX store and forward mode\n");
    }
    #line 285 
    mtl_tx_op |= 2U;
  }
  else {
    {
      #line 287 
      bool branch_0;
      #line 287 
      struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"stmmac", .function = (char *)"dwmac4_dma_tx_chan_op_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c", .format = (char *)"GMAC: disabling TX SF (threshold %d)\n", .lineno = (unsigned int)287U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 287 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
      #line 287 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 287 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug444,(char *)"GMAC: disabling TX SF (threshold %d)\n",mode);
    }
    #line 288 
    mtl_tx_op &= 4294967293U;
    #line 289 
    mtl_tx_op &= 112U;
    #line 291 
    if (mode <= 32) 
                    #line 292 
                    mtl_tx_op = mtl_tx_op;
    else 
      #line 293 
      if (mode <= 64) 
                      #line 294 
                      mtl_tx_op |= 16U;
      else 
        #line 295 
        if (mode <= 96) 
                        #line 296 
                        mtl_tx_op |= 32U;
        else 
          #line 297 
          if (mode <= 128) 
                           #line 298 
                           mtl_tx_op |= 48U;
          else 
            #line 299 
            if (mode <= 192) 
                             #line 300 
                             mtl_tx_op |= 64U;
            else 
              #line 301 
              if (mode <= 256) 
                               #line 302 
                               mtl_tx_op |= 80U;
              else 
                #line 303 
                if (mode <= 384) 
                                 #line 304 
                                 mtl_tx_op |= 96U; else 
                                                        #line 306 
                                                        mtl_tx_op |= 112U;
  }
  #line 317 
  mtl_tx_op &= 4294967283U;
  #line 318 
  if ((unsigned int)qmode != 0U) 
                                 #line 319 
                                 mtl_tx_op |= 8U; else 
                                                       #line 321 
                                                       mtl_tx_op |= 4U;
  #line 322 
  mtl_tx_op &= 4261478399U;
  #line 323 
  mtl_tx_op = (tqs << 16) | mtl_tx_op;
  #line 325 
  writel(mtl_tx_op,ioaddr + (unsigned long)((channel + 52U) * 64U));
  #line 326 
  return;
}

#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
static void dwmac4_get_hw_feature(void *ioaddr, struct dma_features *dma_cap)
{
  #line 331 
  u32 hw_cap = readl(ioaddr + 284U);
  #line 334 
  dma_cap->mbps_10_100 = hw_cap & 1U;
  #line 335 
  dma_cap->mbps_1000 = (unsigned int)((unsigned long)hw_cap >> 1) & 1U;
  #line 336 
  dma_cap->half_duplex = (unsigned int)((unsigned long)hw_cap >> 2) & 1U;
  #line 337 
  dma_cap->vlhash = (unsigned int)((unsigned long)hw_cap >> 4) & 1U;
  #line 338 
  dma_cap->multi_addr = (unsigned int)((unsigned long)hw_cap >> 18) & 1U;
  #line 339 
  dma_cap->pcs = (unsigned int)((unsigned long)hw_cap >> 3) & 1U;
  #line 340 
  dma_cap->sma_mdio = (unsigned int)((unsigned long)hw_cap >> 5) & 1U;
  #line 341 
  dma_cap->pmt_remote_wake_up = (unsigned int)((unsigned long)hw_cap >> 6) & 1U;
  #line 342 
  dma_cap->pmt_magic_frame = (unsigned int)((unsigned long)hw_cap >> 7) & 1U;
  #line 344 
  dma_cap->rmon = (unsigned int)((unsigned long)hw_cap >> 8) & 1U;
  #line 346 
  dma_cap->atime_stamp = (unsigned int)((unsigned long)hw_cap >> 12) & 1U;
  #line 348 
  dma_cap->eee = (unsigned int)((unsigned long)hw_cap >> 13) & 1U;
  #line 350 
  dma_cap->tx_coe = (unsigned int)((unsigned long)hw_cap >> 14) & 1U;
  #line 351 
  dma_cap->rx_coe = (unsigned int)((unsigned long)hw_cap >> 16) & 1U;
  #line 352 
  dma_cap->vlins = (unsigned int)((unsigned long)hw_cap >> 27) & 1U;
  #line 353 
  dma_cap->arpoffsel = (unsigned int)((unsigned long)hw_cap >> 9) & 1U;
  #line 356 
  hw_cap = readl(ioaddr + 288U);
  #line 357 
  dma_cap->l3l4fnum = (unsigned int)((unsigned long)hw_cap >> 27) & 15U;
  #line 358 
  dma_cap->hash_tb_sz = (unsigned int)((unsigned long)hw_cap >> 24) & 3U;
  #line 359 
  dma_cap->av = (unsigned int)((unsigned long)hw_cap >> 20) & 1U;
  #line 360 
  dma_cap->tsoen = (unsigned int)((unsigned long)hw_cap >> 18) & 1U;
  #line 361 
  dma_cap->sphen = (unsigned int)((unsigned long)hw_cap >> 17) & 1U;
  #line 363 
  dma_cap->addr64 = (unsigned int)((unsigned long)hw_cap >> 14) & 3U;
  #line 364 
  switch (dma_cap->addr64) {
    #line 365 
    case (unsigned int)0: 
                          #line 365 
    ;
    #line 366 
    dma_cap->addr64 = 32U;
    #line 367 
    break;
    #line 368 
    case (unsigned int)1: 
                          #line 368 
    ;
    #line 369 
    dma_cap->addr64 = 40U;
    #line 370 
    break;
    #line 371 
    case (unsigned int)2: 
                          #line 371 
    ;
    #line 372 
    dma_cap->addr64 = 48U;
    #line 373 
    break;
    #line 374 
    default: 
             #line 374 
    ;
    #line 375 
    dma_cap->addr64 = 32U;
    #line 376 
    break;
  }
  #line 382 
  dma_cap->tx_fifo_size = (unsigned int)(128 << (((unsigned long)hw_cap >> 6) & 31UL));
  #line 383 
  dma_cap->rx_fifo_size = (unsigned int)(128 << ((unsigned long)hw_cap & 31UL));
  #line 385 
  hw_cap = readl(ioaddr + 292U);
  #line 387 
  dma_cap->number_rx_channel = ((unsigned int)((unsigned long)hw_cap >> 12) & 15U) + 1U;
  #line 389 
  dma_cap->number_tx_channel = ((unsigned int)((unsigned long)hw_cap >> 18) & 15U) + 1U;
  #line 392 
  dma_cap->number_rx_queues = (hw_cap & 15U) + 1U;
  #line 394 
  dma_cap->number_tx_queues = ((unsigned int)((unsigned long)hw_cap >> 6) & 15U) + 1U;
  #line 397 
  dma_cap->pps_out_num = (unsigned int)((unsigned long)hw_cap >> 24) & 7U;
  #line 400 
  dma_cap->time_stamp = 0U;
  #line 403 
  hw_cap = readl(ioaddr + 296U);
  #line 406 
  dma_cap->asp = (unsigned int)((unsigned long)hw_cap >> 28) & 3U;
  #line 407 
  dma_cap->frpes = (unsigned int)((unsigned long)hw_cap >> 13) & 3U;
  #line 408 
  dma_cap->frpbs = (unsigned int)((unsigned long)hw_cap >> 11) & 3U;
  #line 409 
  dma_cap->frpsel = (unsigned int)((unsigned long)hw_cap >> 10) & 1U;
  #line 410 
  dma_cap->dvlan = (unsigned int)((unsigned long)hw_cap >> 5) & 1U;
  #line 411 
  return;
}

#line 414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
static void dwmac4_enable_tso(void *ioaddr, bool en, u32 chan)
{
  #line 416 
  u32 value;
  #line 418 
  if ((int)en != 0) {
    #line 420 
    value = readl(ioaddr + (unsigned long)((chan + 34U) * 128U + 4U));
    #line 421 
    writel(value | 4096U,ioaddr + (unsigned long)((chan + 34U) * 128U + 4U));
  }
  else {
    #line 425 
    value = readl(ioaddr + (unsigned long)((chan + 34U) * 128U + 4U));
    #line 426 
    writel(value & 4294963199U,ioaddr + (unsigned long)((chan + 34U) * 128U + 4U));
  }
  #line 429 
  return;
}

#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
static void dwmac4_qmode(void *ioaddr, u32 channel, u8 qmode)
{
  #line 433 
  u32 mtl_tx_op = readl(ioaddr + (unsigned long)((channel + 52U) * 64U));
  #line 435 
  mtl_tx_op &= 4294967283U;
  #line 436 
  if ((unsigned int)qmode != 0U) 
                                 #line 437 
                                 mtl_tx_op |= 8U; else 
                                                       #line 439 
                                                       mtl_tx_op |= 4U;
  #line 441 
  writel(mtl_tx_op,ioaddr + (unsigned long)((channel + 52U) * 64U));
  #line 442 
  return;
}

#line 444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
static void dwmac4_set_bfsize(void *ioaddr, int bfsize, u32 chan)
{
  #line 446 
  u32 value = readl(ioaddr + (unsigned long)((chan + 34U) * 128U + 8U));
  #line 448 
  value &= 4294934529U;
  #line 449 
  value = ((unsigned int)(bfsize << 1) & 32766U) | value;
  #line 451 
  writel(value,ioaddr + (unsigned long)((chan + 34U) * 128U + 8U));
  #line 452 
  return;
}

#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
static void dwmac4_enable_sph(void *ioaddr, bool en, u32 chan)
{
  #line 456 
  u32 value = readl(ioaddr + 4U);
  #line 458 
  value &= 4287627263U;
  #line 459 
  value |= 2097152U;
  #line 460 
  writel(value,ioaddr + 4U);
  #line 462 
  value = readl(ioaddr + (unsigned long)((chan + 34U) * 128U));
  #line 463 
  if ((int)en != 0) 
                    #line 464 
                    value |= 16777216U; else 
                                             #line 466 
                                             value &= 4278190079U;
  #line 467 
  writel(value,ioaddr + (unsigned long)((chan + 34U) * 128U));
  #line 468 
  return;
}

#line 470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
struct stmmac_dma_ops dwmac4_dma_ops = {.reset = & dwmac4_dma_reset, .init = & dwmac4_dma_init, .init_chan = & dwmac4_dma_init_channel, .init_rx_chan = & dwmac4_dma_init_rx_chan, .init_tx_chan = & dwmac4_dma_init_tx_chan, .axi = & dwmac4_dma_axi, .dump_regs = & dwmac4_dump_dma_regs, .dma_rx_mode = & dwmac4_dma_rx_chan_op_mode, .dma_tx_mode = & dwmac4_dma_tx_chan_op_mode, .enable_dma_irq = & dwmac4_enable_dma_irq, .disable_dma_irq = & dwmac4_disable_dma_irq, .start_tx = & dwmac4_dma_start_tx, .stop_tx = & dwmac4_dma_stop_tx, .start_rx = & dwmac4_dma_start_rx, .stop_rx = & dwmac4_dma_stop_rx, .dma_interrupt = & dwmac4_dma_interrupt, .get_hw_feature = & dwmac4_get_hw_feature, .rx_watchdog = & dwmac4_rx_watchdog, .set_tx_ring_len = & dwmac4_set_tx_ring_len, .set_rx_ring_len = & dwmac4_set_rx_ring_len, .set_rx_tail_ptr = & dwmac4_set_rx_tail_ptr, .set_tx_tail_ptr = & dwmac4_set_tx_tail_ptr, .enable_tso = & dwmac4_enable_tso, .qmode = & dwmac4_qmode, .set_bfsize = & dwmac4_set_bfsize, .enable_sph = & dwmac4_enable_sph};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c"
struct stmmac_dma_ops dwmac410_dma_ops = {.reset = & dwmac4_dma_reset, .init = & dwmac4_dma_init, .init_chan = & dwmac4_dma_init_channel, .init_rx_chan = & dwmac4_dma_init_rx_chan, .init_tx_chan = & dwmac4_dma_init_tx_chan, .axi = & dwmac4_dma_axi, .dump_regs = & dwmac4_dump_dma_regs, .dma_rx_mode = & dwmac4_dma_rx_chan_op_mode, .dma_tx_mode = & dwmac4_dma_tx_chan_op_mode, .enable_dma_irq = & dwmac410_enable_dma_irq, .disable_dma_irq = & dwmac4_disable_dma_irq, .start_tx = & dwmac4_dma_start_tx, .stop_tx = & dwmac4_dma_stop_tx, .start_rx = & dwmac4_dma_start_rx, .stop_rx = & dwmac4_dma_stop_rx, .dma_interrupt = & dwmac4_dma_interrupt, .get_hw_feature = & dwmac4_get_hw_feature, .rx_watchdog = & dwmac4_rx_watchdog, .set_tx_ring_len = & dwmac4_set_tx_ring_len, .set_rx_ring_len = & dwmac4_set_rx_ring_len, .set_rx_tail_ptr = & dwmac4_set_rx_tail_ptr, .set_tx_tail_ptr = & dwmac4_set_tx_tail_ptr, .enable_tso = & dwmac4_enable_tso, .qmode = & dwmac4_qmode, .set_bfsize = & dwmac4_set_bfsize, .enable_sph = & dwmac4_enable_sph};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_mdio.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_mdio.i.aux"
static bool IS_ERR_0(void *ptr);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 26 
long ldv_ptr_err(void *ptr);
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gpio/consumer.h"
#line 94 
struct gpio_desc *devm_gpiod_get_optional(struct device *, char *, enum gpiod_flags);
#line 143 
#line 143 
void gpiod_set_value_cansleep(struct gpio_desc *, int);
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
#line 328 
struct phy_device *mdiobus_get_phy(struct mii_bus *, int);
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
#line 260 
struct mii_bus *mdiobus_alloc_size(size_t);
#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static struct mii_bus *mdiobus_alloc(void)
{
  #line 263 
  return mdiobus_alloc_size(0UL);
}

#line 268 
#line 268 
void mdiobus_unregister(struct mii_bus *);
#line 269 
#line 269 
void mdiobus_free(struct mii_bus *);
#line 1091 
#line 1091 
void phy_attached_info(struct phy_device *);
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
#line 40 
int device_property_read_u32_array(struct device *, char *, u32 *, size_t);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_mdio.h"
#line 16 
int of_mdiobus_register(struct mii_bus *, struct device_node *);
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c"
int stmmac_mdio_unregister(struct net_device *ndev);
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c"
int stmmac_mdio_register(struct net_device *ndev);
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c"
int stmmac_mdio_reset(struct mii_bus *bus);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c"
static int stmmac_xgmac2_c45_format(struct stmmac_priv *priv, int phyaddr_0, int phyreg, u32 *hw_addr)
{
  #line 50 
  u32 tmp;
  #line 53 
  tmp = readl(priv->ioaddr + 544U);
  #line 54 
  tmp = ~ ((unsigned int)(1UL << phyaddr_0)) & tmp;
  #line 55 
  writel(tmp,priv->ioaddr + 544U);
  #line 57 
  *hw_addr = (unsigned int)((phyaddr_0 << 16) | (phyreg & 65535));
  #line 58 
  *hw_addr |= (unsigned int)((phyreg >> 16) << 21);
  #line 59 
  return 0;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c"
static int stmmac_xgmac2_c22_format(struct stmmac_priv *priv, int phyaddr_0, int phyreg, u32 *hw_addr)
{
  #line 65 
  u32 tmp;
  #line 68 
  if (phyaddr_0 > 3) 
                     #line 69 
                     return -19;
  #line 72 
  tmp = readl(priv->ioaddr + 544U);
  #line 73 
  tmp &= 4294967280U;
  #line 74 
  tmp = (unsigned int)(1UL << phyaddr_0) | tmp;
  #line 75 
  writel(tmp,priv->ioaddr + 544U);
  #line 77 
  *hw_addr = (unsigned int)((phyaddr_0 << 16) | (phyreg & 31));
  #line 78 
  return 0;
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c"
static int stmmac_xgmac2_mdio_read(struct mii_bus *bus, int phyaddr_0, int phyreg)
{
  #line 123 
  int tmp_17;
  #line 114 
  int tmp_11;
  #line 91 
  int tmp_5;
  #line 87 
  u32 tmp;
  #line 87 
  u32 addr;
  #line 88 
  int ret;
  #line 83 
  struct net_device *ndev = (struct net_device *)bus->priv;
  #line 84 
  struct stmmac_priv *priv = netdev_priv(ndev);
  #line 85 
  unsigned int mii_address = (priv->hw)->mii.addr;
  #line 86 
  unsigned int mii_data = (priv->hw)->mii.data;
  #line 87 
  u32 value = 4194304U;
  {
    #line 91 
    u64 __timeout_us = 10000ULL;
    #line 91 
    unsigned long __sleep_us = 100UL;
    #line 91 
    ;
    #line 91 
    ktime_t __timeout = ktime_add_us(ktime_get(),__timeout_us);
    #line 91 
    if (__sleep_us != 0UL) 
                           #line 91 
                           __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c",91,0);
    #line 91 
    while (1) {
      #line 91 
      tmp = readl(priv->ioaddr + (unsigned long)mii_data);
      #line 91 
      if (((unsigned long)tmp & 4194304UL) == 0UL) 
                                                   #line 91 
                                                   break;
      #line 91 
      if (__timeout_us != 0ULL) {
        #line 91 
        ;
        #line 91 
        if (ktime_compare(ktime_get(),__timeout) > 0) {
          #line 91 
          tmp = readl(priv->ioaddr + (unsigned long)mii_data);
          #line 91 
          break;
        }
      }
      #line 91 
      if (__sleep_us != 0UL) 
                             #line 91 
                             usleep_range((__sleep_us >> 2) + 1UL,__sleep_us);
    }
    #line 91 
    if (((unsigned long)tmp & 4194304UL) == 0UL) 
                                                 #line 91 
                                                 tmp_5 = 0; else 
                                                                 #line 91 
                                                                 tmp_5 = -110;
    }
  #line 91 
  if (tmp_5 != 0) 
                  #line 93 
                  return -16;
  #line 95 
  if ((phyreg & 1073741824) != 0) {
    #line 96 
    phyreg &= -1073741825;
    #line 98 
    ret = stmmac_xgmac2_c45_format(priv,phyaddr_0,phyreg,& addr);
    #line 99 
    if (ret != 0) 
                  #line 100 
                  return ret;
  }
  else {
    #line 102 
    ret = stmmac_xgmac2_c22_format(priv,phyaddr_0,phyreg,& addr);
    #line 103 
    if (ret != 0) 
                  #line 104 
                  return ret;
    #line 106 
    value |= 262144U;
  }
  #line 109 
  value = ((unsigned int)(priv->clk_csr << (priv->hw)->mii.clk_csr_shift) & (priv->hw)->mii.clk_csr_mask) | value;
  #line 111 
  value |= 196608U;
  {
    #line 114 
    u64 __timeout_us_0 = 10000ULL;
    #line 114 
    unsigned long __sleep_us_0 = 100UL;
    #line 114 
    ;
    #line 114 
    ktime_t __timeout_0 = ktime_add_us(ktime_get(),__timeout_us_0);
    #line 114 
    if (__sleep_us_0 != 0UL) 
                             #line 114 
                             __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c",114,0);
    #line 114 
    while (1) {
      #line 114 
      tmp = readl(priv->ioaddr + (unsigned long)mii_data);
      #line 114 
      if (((unsigned long)tmp & 4194304UL) == 0UL) 
                                                   #line 114 
                                                   break;
      #line 114 
      if (__timeout_us_0 != 0ULL) {
        #line 114 
        ;
        #line 114 
        if (ktime_compare(ktime_get(),__timeout_0) > 0) {
          #line 114 
          tmp = readl(priv->ioaddr + (unsigned long)mii_data);
          #line 114 
          break;
        }
      }
      #line 114 
      if (__sleep_us_0 != 0UL) 
                               #line 114 
                               usleep_range((__sleep_us_0 >> 2) + 1UL,__sleep_us_0);
    }
    #line 114 
    if (((unsigned long)tmp & 4194304UL) == 0UL) 
                                                 #line 114 
                                                 tmp_11 = 0; else 
                                                                  #line 114 
                                                                  tmp_11 = -110;
    }
  #line 114 
  if (tmp_11 != 0) 
                   #line 116 
                   return -16;
  #line 119 
  writel(addr,priv->ioaddr + (unsigned long)mii_address);
  #line 120 
  writel(value,priv->ioaddr + (unsigned long)mii_data);
  {
    #line 123 
    u64 __timeout_us_1 = 10000ULL;
    #line 123 
    unsigned long __sleep_us_1 = 100UL;
    #line 123 
    ;
    #line 123 
    ktime_t __timeout_1 = ktime_add_us(ktime_get(),__timeout_us_1);
    #line 123 
    if (__sleep_us_1 != 0UL) 
                             #line 123 
                             __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c",123,0);
    #line 123 
    while (1) {
      #line 123 
      tmp = readl(priv->ioaddr + (unsigned long)mii_data);
      #line 123 
      if (((unsigned long)tmp & 4194304UL) == 0UL) 
                                                   #line 123 
                                                   break;
      #line 123 
      if (__timeout_us_1 != 0ULL) {
        #line 123 
        ;
        #line 123 
        if (ktime_compare(ktime_get(),__timeout_1) > 0) {
          #line 123 
          tmp = readl(priv->ioaddr + (unsigned long)mii_data);
          #line 123 
          break;
        }
      }
      #line 123 
      if (__sleep_us_1 != 0UL) 
                               #line 123 
                               usleep_range((__sleep_us_1 >> 2) + 1UL,__sleep_us_1);
    }
    #line 123 
    if (((unsigned long)tmp & 4194304UL) == 0UL) 
                                                 #line 123 
                                                 tmp_17 = 0; else 
                                                                  #line 123 
                                                                  tmp_17 = -110;
    }
  #line 123 
  if (tmp_17 != 0) 
                   #line 125 
                   return -16;
  #line 128 
  return (int)readl(priv->ioaddr + (unsigned long)mii_data) & 65535;
}

#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c"
static int stmmac_xgmac2_mdio_write(struct mii_bus *bus, int phyaddr_0, int phyreg, u16 phydata)
{
  #line 142 
  int tmp_5;
  #line 175 
  int tmp_17;
  #line 166 
  int tmp_11;
  #line 138 
  u32 addr;
  #line 138 
  u32 tmp;
  #line 139 
  int ret;
  #line 134 
  struct net_device *ndev = (struct net_device *)bus->priv;
  #line 135 
  struct stmmac_priv *priv = netdev_priv(ndev);
  #line 136 
  unsigned int mii_address = (priv->hw)->mii.addr;
  #line 137 
  unsigned int mii_data = (priv->hw)->mii.data;
  #line 138 
  u32 value = 4194304U;
  {
    #line 142 
    u64 __timeout_us = 10000ULL;
    #line 142 
    unsigned long __sleep_us = 100UL;
    #line 142 
    ;
    #line 142 
    ktime_t __timeout = ktime_add_us(ktime_get(),__timeout_us);
    #line 142 
    if (__sleep_us != 0UL) 
                           #line 142 
                           __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c",142,0);
    #line 142 
    while (1) {
      #line 142 
      tmp = readl(priv->ioaddr + (unsigned long)mii_data);
      #line 142 
      if (((unsigned long)tmp & 4194304UL) == 0UL) 
                                                   #line 142 
                                                   break;
      #line 142 
      if (__timeout_us != 0ULL) {
        #line 142 
        ;
        #line 142 
        if (ktime_compare(ktime_get(),__timeout) > 0) {
          #line 142 
          tmp = readl(priv->ioaddr + (unsigned long)mii_data);
          #line 142 
          break;
        }
      }
      #line 142 
      if (__sleep_us != 0UL) 
                             #line 142 
                             usleep_range((__sleep_us >> 2) + 1UL,__sleep_us);
    }
    #line 142 
    if (((unsigned long)tmp & 4194304UL) == 0UL) 
                                                 #line 142 
                                                 tmp_5 = 0; else 
                                                                 #line 142 
                                                                 tmp_5 = -110;
    }
  #line 142 
  if (tmp_5 != 0) 
                  #line 144 
                  return -16;
  #line 146 
  if ((phyreg & 1073741824) != 0) {
    #line 147 
    phyreg &= -1073741825;
    #line 149 
    ret = stmmac_xgmac2_c45_format(priv,phyaddr_0,phyreg,& addr);
    #line 150 
    if (ret != 0) 
                  #line 151 
                  return ret;
  }
  else {
    #line 153 
    ret = stmmac_xgmac2_c22_format(priv,phyaddr_0,phyreg,& addr);
    #line 154 
    if (ret != 0) 
                  #line 155 
                  return ret;
    #line 157 
    value |= 262144U;
  }
  #line 160 
  value = ((unsigned int)(priv->clk_csr << (priv->hw)->mii.clk_csr_shift) & (priv->hw)->mii.clk_csr_mask) | value;
  #line 162 
  value = (unsigned int)phydata | value;
  #line 163 
  value |= 65536U;
  {
    #line 166 
    u64 __timeout_us_0 = 10000ULL;
    #line 166 
    unsigned long __sleep_us_0 = 100UL;
    #line 166 
    ;
    #line 166 
    ktime_t __timeout_0 = ktime_add_us(ktime_get(),__timeout_us_0);
    #line 166 
    if (__sleep_us_0 != 0UL) 
                             #line 166 
                             __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c",166,0);
    #line 166 
    while (1) {
      #line 166 
      tmp = readl(priv->ioaddr + (unsigned long)mii_data);
      #line 166 
      if (((unsigned long)tmp & 4194304UL) == 0UL) 
                                                   #line 166 
                                                   break;
      #line 166 
      if (__timeout_us_0 != 0ULL) {
        #line 166 
        ;
        #line 166 
        if (ktime_compare(ktime_get(),__timeout_0) > 0) {
          #line 166 
          tmp = readl(priv->ioaddr + (unsigned long)mii_data);
          #line 166 
          break;
        }
      }
      #line 166 
      if (__sleep_us_0 != 0UL) 
                               #line 166 
                               usleep_range((__sleep_us_0 >> 2) + 1UL,__sleep_us_0);
    }
    #line 166 
    if (((unsigned long)tmp & 4194304UL) == 0UL) 
                                                 #line 166 
                                                 tmp_11 = 0; else 
                                                                  #line 166 
                                                                  tmp_11 = -110;
    }
  #line 166 
  if (tmp_11 != 0) 
                   #line 168 
                   return -16;
  #line 171 
  writel(addr,priv->ioaddr + (unsigned long)mii_address);
  #line 172 
  writel(value,priv->ioaddr + (unsigned long)mii_data);
  {
    #line 175 
    u64 __timeout_us_1 = 10000ULL;
    #line 175 
    unsigned long __sleep_us_1 = 100UL;
    #line 175 
    ;
    #line 175 
    ktime_t __timeout_1 = ktime_add_us(ktime_get(),__timeout_us_1);
    #line 175 
    if (__sleep_us_1 != 0UL) 
                             #line 175 
                             __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c",175,0);
    #line 175 
    while (1) {
      #line 175 
      tmp = readl(priv->ioaddr + (unsigned long)mii_data);
      #line 175 
      if (((unsigned long)tmp & 4194304UL) == 0UL) 
                                                   #line 175 
                                                   break;
      #line 175 
      if (__timeout_us_1 != 0ULL) {
        #line 175 
        ;
        #line 175 
        if (ktime_compare(ktime_get(),__timeout_1) > 0) {
          #line 175 
          tmp = readl(priv->ioaddr + (unsigned long)mii_data);
          #line 175 
          break;
        }
      }
      #line 175 
      if (__sleep_us_1 != 0UL) 
                               #line 175 
                               usleep_range((__sleep_us_1 >> 2) + 1UL,__sleep_us_1);
    }
    #line 175 
    if (((unsigned long)tmp & 4194304UL) == 0UL) 
                                                 #line 175 
                                                 tmp_17 = 0; else 
                                                                  #line 175 
                                                                  tmp_17 = -110;
    }
  #line 175 
  return tmp_17;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c"
static int stmmac_mdio_read(struct mii_bus *bus, int phyaddr_0, int phyreg)
{
  #line 218 
  int tmp_4;
  #line 225 
  int tmp_10;
  #line 197 
  u32 v;
  #line 191 
  struct net_device *ndev = (struct net_device *)bus->priv;
  #line 192 
  struct stmmac_priv *priv = netdev_priv(ndev);
  #line 193 
  unsigned int mii_address = (priv->hw)->mii.addr;
  #line 194 
  unsigned int mii_data = (priv->hw)->mii.data;
  #line 195 
  u32 value = 1U;
  #line 196 
  int data = 0;
  #line 199 
  value = ((unsigned int)(phyaddr_0 << (priv->hw)->mii.addr_shift) & (priv->hw)->mii.addr_mask) | value;
  #line 201 
  value = ((unsigned int)(phyreg << (priv->hw)->mii.reg_shift) & (priv->hw)->mii.reg_mask) | value;
  #line 202 
  value = ((unsigned int)(priv->clk_csr << (priv->hw)->mii.clk_csr_shift) & (priv->hw)->mii.clk_csr_mask) | value;
  #line 204 
  if ((priv->plat)->has_gmac4 != 0) {
    #line 205 
    value |= 12U;
    #line 206 
    if ((phyreg & 1073741824) != 0) {
      #line 207 
      value |= 2U;
      #line 208 
      value = ~ (priv->hw)->mii.reg_mask & value;
      #line 209 
      value = ((unsigned int)((phyreg >> 16) << (priv->hw)->mii.reg_shift) & (priv->hw)->mii.reg_mask) | value;
      #line 213 
      data = (phyreg << 16U) | data;
    }
  }
  {
    #line 218 
    u64 __timeout_us = 10000ULL;
    #line 218 
    unsigned long __sleep_us = 100UL;
    #line 218 
    ;
    #line 218 
    ktime_t __timeout = ktime_add_us(ktime_get(),__timeout_us);
    #line 218 
    if (__sleep_us != 0UL) 
                           #line 218 
                           __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c",218,0);
    #line 218 
    while (1) {
      #line 218 
      v = readl(priv->ioaddr + (unsigned long)mii_address);
      #line 218 
      if ((v & 1U) == 0U) 
                          #line 218 
                          break;
      #line 218 
      if (__timeout_us != 0ULL) {
        #line 218 
        ;
        #line 218 
        if (ktime_compare(ktime_get(),__timeout) > 0) {
          #line 218 
          v = readl(priv->ioaddr + (unsigned long)mii_address);
          #line 218 
          break;
        }
      }
      #line 218 
      if (__sleep_us != 0UL) 
                             #line 218 
                             usleep_range((__sleep_us >> 2) + 1UL,__sleep_us);
    }
    #line 218 
    if ((v & 1U) == 0U) 
                        #line 218 
                        tmp_4 = 0; else 
                                        #line 218 
                                        tmp_4 = -110;
    }
  #line 218 
  if (tmp_4 != 0) 
                  #line 220 
                  return -16;
  #line 222 
  writel((unsigned int)data,priv->ioaddr + (unsigned long)mii_data);
  #line 223 
  writel(value,priv->ioaddr + (unsigned long)mii_address);
  {
    #line 225 
    u64 __timeout_us_0 = 10000ULL;
    #line 225 
    unsigned long __sleep_us_0 = 100UL;
    #line 225 
    ;
    #line 225 
    ktime_t __timeout_0 = ktime_add_us(ktime_get(),__timeout_us_0);
    #line 225 
    if (__sleep_us_0 != 0UL) 
                             #line 225 
                             __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c",225,0);
    #line 225 
    while (1) {
      #line 225 
      v = readl(priv->ioaddr + (unsigned long)mii_address);
      #line 225 
      if ((v & 1U) == 0U) 
                          #line 225 
                          break;
      #line 225 
      if (__timeout_us_0 != 0ULL) {
        #line 225 
        ;
        #line 225 
        if (ktime_compare(ktime_get(),__timeout_0) > 0) {
          #line 225 
          v = readl(priv->ioaddr + (unsigned long)mii_address);
          #line 225 
          break;
        }
      }
      #line 225 
      if (__sleep_us_0 != 0UL) 
                               #line 225 
                               usleep_range((__sleep_us_0 >> 2) + 1UL,__sleep_us_0);
    }
    #line 225 
    if ((v & 1U) == 0U) 
                        #line 225 
                        tmp_10 = 0; else 
                                         #line 225 
                                         tmp_10 = -110;
    }
  #line 225 
  if (tmp_10 != 0) 
                   #line 227 
                   return -16;
  #line 230 
  data = (int)readl(priv->ioaddr + (unsigned long)mii_data) & 65535;
  #line 232 
  return data;
}

#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c"
static int stmmac_mdio_write(struct mii_bus *bus, int phyaddr_0, int phyreg, u16 phydata)
{
  #line 286 
  int tmp_10;
  #line 277 
  int tmp_4;
  #line 252 
  u32 v;
  #line 246 
  struct net_device *ndev = (struct net_device *)bus->priv;
  #line 247 
  struct stmmac_priv *priv = netdev_priv(ndev);
  #line 248 
  unsigned int mii_address = (priv->hw)->mii.addr;
  #line 249 
  unsigned int mii_data = (priv->hw)->mii.data;
  #line 250 
  u32 value = 1U;
  #line 251 
  int data = (int)phydata;
  #line 254 
  value = ((unsigned int)(phyaddr_0 << (priv->hw)->mii.addr_shift) & (priv->hw)->mii.addr_mask) | value;
  #line 256 
  value = ((unsigned int)(phyreg << (priv->hw)->mii.reg_shift) & (priv->hw)->mii.reg_mask) | value;
  #line 258 
  value = ((unsigned int)(priv->clk_csr << (priv->hw)->mii.clk_csr_shift) & (priv->hw)->mii.clk_csr_mask) | value;
  #line 260 
  if ((priv->plat)->has_gmac4 != 0) {
    #line 261 
    value |= 4U;
    #line 262 
    if ((phyreg & 1073741824) != 0) {
      #line 263 
      value |= 2U;
      #line 264 
      value = ~ (priv->hw)->mii.reg_mask & value;
      #line 265 
      value = ((unsigned int)((phyreg >> 16) << (priv->hw)->mii.reg_shift) & (priv->hw)->mii.reg_mask) | value;
      #line 269 
      data = (phyreg << 16U) | data;
    }
  }
  else 
       #line 273 
       value |= 2U;
  {
    #line 277 
    u64 __timeout_us = 10000ULL;
    #line 277 
    unsigned long __sleep_us = 100UL;
    #line 277 
    ;
    #line 277 
    ktime_t __timeout = ktime_add_us(ktime_get(),__timeout_us);
    #line 277 
    if (__sleep_us != 0UL) 
                           #line 277 
                           __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c",277,0);
    #line 277 
    while (1) {
      #line 277 
      v = readl(priv->ioaddr + (unsigned long)mii_address);
      #line 277 
      if ((v & 1U) == 0U) 
                          #line 277 
                          break;
      #line 277 
      if (__timeout_us != 0ULL) {
        #line 277 
        ;
        #line 277 
        if (ktime_compare(ktime_get(),__timeout) > 0) {
          #line 277 
          v = readl(priv->ioaddr + (unsigned long)mii_address);
          #line 277 
          break;
        }
      }
      #line 277 
      if (__sleep_us != 0UL) 
                             #line 277 
                             usleep_range((__sleep_us >> 2) + 1UL,__sleep_us);
    }
    #line 277 
    if ((v & 1U) == 0U) 
                        #line 277 
                        tmp_4 = 0; else 
                                        #line 277 
                                        tmp_4 = -110;
    }
  #line 277 
  if (tmp_4 != 0) 
                  #line 279 
                  return -16;
  #line 282 
  writel((unsigned int)data,priv->ioaddr + (unsigned long)mii_data);
  #line 283 
  writel(value,priv->ioaddr + (unsigned long)mii_address);
  {
    #line 286 
    u64 __timeout_us_0 = 10000ULL;
    #line 286 
    unsigned long __sleep_us_0 = 100UL;
    #line 286 
    ;
    #line 286 
    ktime_t __timeout_0 = ktime_add_us(ktime_get(),__timeout_us_0);
    #line 286 
    if (__sleep_us_0 != 0UL) 
                             #line 286 
                             __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c",286,0);
    #line 286 
    while (1) {
      #line 286 
      v = readl(priv->ioaddr + (unsigned long)mii_address);
      #line 286 
      if ((v & 1U) == 0U) 
                          #line 286 
                          break;
      #line 286 
      if (__timeout_us_0 != 0ULL) {
        #line 286 
        ;
        #line 286 
        if (ktime_compare(ktime_get(),__timeout_0) > 0) {
          #line 286 
          v = readl(priv->ioaddr + (unsigned long)mii_address);
          #line 286 
          break;
        }
      }
      #line 286 
      if (__sleep_us_0 != 0UL) 
                               #line 286 
                               usleep_range((__sleep_us_0 >> 2) + 1UL,__sleep_us_0);
    }
    #line 286 
    if ((v & 1U) == 0U) 
                        #line 286 
                        tmp_10 = 0; else 
                                         #line 286 
                                         tmp_10 = -110;
    }
  #line 286 
  return tmp_10;
}

#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c"
int stmmac_mdio_reset(struct mii_bus *bus)
{
  #line 298 
  struct net_device *ndev = (struct net_device *)bus->priv;
  #line 299 
  struct stmmac_priv *priv = netdev_priv(ndev);
  #line 300 
  unsigned int mii_address = (priv->hw)->mii.addr;
  #line 303 
  if ((priv->device)->of_node != (struct device_node *)0) {
    #line 304 
    struct gpio_desc *reset_gpio;
    #line 305 
    u32 delays[3U] = {0U, 0U, 0U};
    #line 307 
    reset_gpio = devm_gpiod_get_optional(priv->device,(char *)"snps,reset",(enum gpiod_flags)GPIOD_OUT_LOW);
    #line 310 
    if ((int)IS_ERR_0((void *)reset_gpio) != 0) {
      #line 311 
      return (int)PTR_ERR((void *)reset_gpio);
    }
    #line 313 
    device_property_read_u32_array(priv->device,(char *)"snps,reset-delays-us",(u32 *)(& delays),3UL);
    #line 317 
    if (delays[0] != 0U) 
                         #line 318 
                         msleep((delays[0] + 999U) / 1000U);
    #line 320 
    gpiod_set_value_cansleep(reset_gpio,1);
    #line 321 
    if (delays[1] != 0U) 
                         #line 322 
                         msleep((delays[1] + 999U) / 1000U);
    #line 324 
    gpiod_set_value_cansleep(reset_gpio,0);
    #line 325 
    if (delays[2] != 0U) 
                         #line 326 
                         msleep((delays[2] + 999U) / 1000U);
  }
  #line 335 
  if ((priv->plat)->has_gmac4 == 0) 
                                    #line 336 
                                    writel(0U,priv->ioaddr + (unsigned long)mii_address);
  #line 338 
  return 0;
}

#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c"
int stmmac_mdio_register(struct net_device *ndev)
{
  #line 349 
  struct mii_bus *new_bus;
  #line 354 
  int addr;
  #line 354 
  int found;
  #line 354 
  int max_addr;
  #line 348 
  int err = 0;
  #line 350 
  struct stmmac_priv *priv = netdev_priv(ndev);
  #line 351 
  struct stmmac_mdio_bus_data *mdio_bus_data = (priv->plat)->mdio_bus_data;
  #line 352 
  struct device_node *mdio_node = (priv->plat)->mdio_node;
  #line 353 
  struct device *dev = ndev->dev.parent;
  #line 356 
  if (mdio_bus_data == (struct stmmac_mdio_bus_data *)0) 
                                                         #line 357 
                                                         return 0;
  #line 359 
  new_bus = mdiobus_alloc();
  #line 360 
  if (new_bus == (struct mii_bus *)0) 
                                      #line 361 
                                      return -12;
  #line 363 
  if (mdio_bus_data->irqs != (int *)0) 
                                       #line 364 
                                       memcpy((void *)(& new_bus->irq),(void *)mdio_bus_data->irqs,128UL);
  #line 366 
  new_bus->name = (char *)"stmmac";
  #line 368 
  if ((priv->plat)->has_xgmac != 0) {
    #line 369 
    new_bus->read = & stmmac_xgmac2_mdio_read;
    #line 370 
    new_bus->write = & stmmac_xgmac2_mdio_write;
    #line 373 
    max_addr = 4;
    #line 376 
    if ((priv->plat)->phy_addr > 3) 
                                    #line 377 
                                    _dev_err(dev,(char *)"Unsupported phy_addr (max=%d)\n",3);
  }
  else {
    #line 380 
    new_bus->read = & stmmac_mdio_read;
    #line 381 
    new_bus->write = & stmmac_mdio_write;
    #line 382 
    max_addr = 32;
  }
  #line 385 
  if ((int)mdio_bus_data->needs_reset != 0) 
                                            #line 386 
                                            new_bus->reset = & stmmac_mdio_reset;
  #line 388 
  snprintf((char *)(& new_bus->id),61UL,(char *)"%s-%x",new_bus->name,(priv->plat)->bus_id);
  #line 390 
  new_bus->priv = (void *)ndev;
  #line 391 
  new_bus->phy_mask = mdio_bus_data->phy_mask;
  #line 392 
  new_bus->parent = priv->device;
  #line 394 
  err = of_mdiobus_register(new_bus,mdio_node);
  #line 395 
  if (err != 0) {
    #line 396 
    _dev_err(dev,(char *)"Cannot register the MDIO bus\n");
    #line 397 
    goto bus_register_fail;
  }
  #line 401 
  if ((priv->plat)->has_xgmac != 0) 
                                    #line 402 
                                    stmmac_xgmac2_mdio_read(new_bus,0,1073741824);
  #line 404 
  if ((priv->plat)->phy_node != (struct device_node *)0 || mdio_node != (struct device_node *)0) 
    #line 405 
    goto bus_register_done;
  #line 407 
  found = 0;
  #line 408 
  addr = 0;
  #line 408 
  while (addr < max_addr) {
    {
      #line 409 
      struct phy_device *phydev = mdiobus_get_phy(new_bus,addr);
      #line 411 
      if (phydev == (struct phy_device *)0) 
                                            #line 412 
                                            goto __Cont;
      #line 418 
      if (mdio_bus_data->irqs == (int *)0 && mdio_bus_data->probed_phy_irq > 0) {
        #line 420 
        new_bus->irq[addr] = mdio_bus_data->probed_phy_irq;
        #line 421 
        phydev->irq = mdio_bus_data->probed_phy_irq;
      }
      #line 429 
      if ((priv->plat)->phy_addr == -1) 
                                        #line 430 
                                        (priv->plat)->phy_addr = addr;
      #line 432 
      phy_attached_info(phydev);
      #line 433 
      found = 1;
    }
    #line 408 
    __Cont: 
            #line 408 
    addr ++;
  }
  #line 436 
  if (found == 0 && mdio_node == (struct device_node *)0) {
    #line 437 
    _dev_warn(dev,(char *)"No PHY found\n");
    #line 438 
    mdiobus_unregister(new_bus);
    #line 439 
    mdiobus_free(new_bus);
    #line 440 
    return -19;
  }
  #line 443 
  bus_register_done: 
                     #line 443 
  ;
  #line 444 
  priv->mii = new_bus;
  #line 446 
  return 0;
  #line 448 
  bus_register_fail: 
                     #line 448 
  ;
  #line 449 
  mdiobus_free(new_bus);
  #line 450 
  return err;
}

#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c"
int stmmac_mdio_unregister(struct net_device *ndev)
{
  #line 460 
  struct stmmac_priv *priv = netdev_priv(ndev);
  #line 462 
  if (priv->mii == (struct mii_bus *)0) 
                                        #line 463 
                                        return 0;
  #line 465 
  mdiobus_unregister(priv->mii);
  #line 466 
  (priv->mii)->priv = (void *)0;
  #line 467 
  mdiobus_free(priv->mii);
  #line 468 
  priv->mii = (struct mii_bus *)0;
  #line 470 
  return 0;
}

#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_mdio.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 210 
  return ldv_ptr_err(ptr);
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_mdio.i.aux"
static bool IS_ERR_0(void *ptr)
{
  #line 217 
  return ldv_is_err(ptr);
}

#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.h"
#line 75 
int dwmac5_safety_feat_config(void *ioaddr, unsigned int asp);
#line 76 
#line 76 
int dwmac5_safety_feat_irq_status(struct net_device *ndev, void *ioaddr, unsigned int asp, struct stmmac_safety_stats *stats);
#line 79 
#line 79 
int dwmac5_safety_feat_dump(struct stmmac_safety_stats *stats, int index, unsigned long *count, char **desc);
#line 81 
#line 81 
int dwmac5_rxp_config(void *ioaddr, struct stmmac_tc_entry *entries, unsigned int count);
#line 83 
#line 83 
int dwmac5_flex_pps_config(void *ioaddr, int index, struct stmmac_pps_cfg *cfg, bool enable, u32 sub_second_inc, u32 systime_flags);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_core_init(struct mac_device_info *hw, struct net_device *dev)
{
  #line 26 
  void *ioaddr = hw->pcsr;
  #line 27 
  u32 value = readl(ioaddr);
  #line 29 
  value |= 492032U;
  #line 31 
  if (hw->ps != 0U) {
    #line 32 
    value |= 2U;
    #line 34 
    value = hw->link.speed_mask & value;
    #line 35 
    switch (hw->ps) {
      #line 36 
      case (unsigned int)1000: 
                               #line 36 
      ;
      #line 37 
      value = hw->link.speed1000 | value;
      #line 38 
      break;
      #line 39 
      case (unsigned int)100: 
                              #line 39 
      ;
      #line 40 
      value = hw->link.speed100 | value;
      #line 41 
      break;
      #line 42 
      case (unsigned int)10: 
                             #line 42 
      ;
      #line 43 
      value = hw->link.speed10 | value;
      #line 44 
      break;
    }
  }
  #line 48 
  writel(value,ioaddr);
  #line 51 
  value = 48U;
  #line 53 
  if (hw->pcs != 0U) 
                     #line 54 
                     value |= 7U;
  #line 56 
  writel(value,ioaddr + 180U);
  #line 57 
  return;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_rx_queue_enable(struct mac_device_info *hw, u8 mode, u32 queue)
{
  #line 62 
  void *ioaddr = hw->pcsr;
  #line 63 
  u32 value = readl(ioaddr + 160U);
  #line 65 
  value = ~ ((unsigned int)(3UL << queue * 2U)) & value;
  #line 66 
  if ((unsigned int)mode == 0U) 
                                #line 67 
                                value = (unsigned int)(1UL << queue * 2U) | value;
  else 
    #line 68 
    if ((unsigned int)mode == 1U) 
                                  #line 69 
                                  value = (unsigned int)(1UL << (queue * 2U + 1U)) | value;
  #line 71 
  writel(value,ioaddr + 160U);
  #line 72 
  return;
}

#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_rx_queue_priority(struct mac_device_info *hw, u32 prio, u32 queue)
{
  #line 78 
  u32 base_register;
  #line 79 
  u32 value;
  #line 77 
  void *ioaddr = hw->pcsr;
  #line 81 
  if (queue <= 3U) 
                   #line 81 
                   base_register = 168U; else 
                                              #line 81 
                                              base_register = 172U;
  #line 82 
  if (queue > 3U) 
                  #line 83 
                  queue += 4294967292U;
  #line 85 
  value = readl(ioaddr + (unsigned long)base_register);
  #line 87 
  value = ~ (- ((unsigned int)(1UL << queue * 8U)) & (unsigned int)(18446744073709551615UL >> (7U - queue) * 8U)) & value;
  #line 88 
  value = ((prio << queue * 8U) & (- ((unsigned int)(1UL << queue * 8U)) & (unsigned int)(18446744073709551615UL >> (7U - queue) * 8U))) | value;
  #line 90 
  writel(value,ioaddr + (unsigned long)base_register);
  #line 91 
  return;
}

#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_tx_queue_priority(struct mac_device_info *hw, u32 prio, u32 queue)
{
  #line 97 
  u32 base_register;
  #line 98 
  u32 value;
  #line 96 
  void *ioaddr = hw->pcsr;
  #line 100 
  if (queue <= 3U) 
                   #line 100 
                   base_register = 152U; else 
                                              #line 100 
                                              base_register = 156U;
  #line 101 
  if (queue > 3U) 
                  #line 102 
                  queue += 4294967292U;
  #line 104 
  value = readl(ioaddr + (unsigned long)base_register);
  #line 106 
  value = ~ (- ((unsigned int)(1UL << queue * 8U)) & (unsigned int)(18446744073709551615UL >> (7U - queue) * 8U)) & value;
  #line 107 
  value = ((prio << queue * 8U) & (- ((unsigned int)(1UL << queue * 8U)) & (unsigned int)(18446744073709551615UL >> (7U - queue) * 8U))) | value;
  #line 110 
  writel(value,ioaddr + (unsigned long)base_register);
  #line 111 
  return;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_rx_queue_routing(struct mac_device_info *hw, u8 packet, u32 queue)
{
  #line 117 
  u32 value;
  #line 116 
  void *ioaddr = hw->pcsr;
  #line 119 
  struct stmmac_rx_routing route_possibilities[5U] = {{.reg_mask = 7U, .reg_shift = 0U}, {.reg_mask = 112U, .reg_shift = 4U}, {.reg_mask = 1792U, .reg_shift = 8U}, {.reg_mask = 28672U, .reg_shift = 12U}, {.reg_mask = 458752U, .reg_shift = 16U}};
  #line 127 
  value = readl(ioaddr + 164U);
  #line 130 
  value = ~ route_possibilities[(int)packet + -1].reg_mask & value;
  #line 131 
  value = ((queue << route_possibilities[(int)packet + -1].reg_shift) & route_possibilities[(int)packet + -1].reg_mask) | value;
  #line 135 
  if ((unsigned int)packet == 1U) {
    #line 136 
    value &= 4292870143U;
    #line 137 
    value |= 2097152U;
  }
  else 
    #line 138 
    if ((unsigned int)packet == 5U) {
      #line 139 
      value &= 4293918719U;
      #line 140 
      value |= 1048576U;
    }
  #line 143 
  writel(value,ioaddr + 164U);
  #line 144 
  return;
}

#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_prog_mtl_rx_algorithms(struct mac_device_info *hw, u32 rx_alg)
{
  #line 149 
  void *ioaddr = hw->pcsr;
  #line 150 
  u32 value = readl(ioaddr + 3072U);
  #line 152 
  value &= 4294967291U;
  #line 153 
  switch (rx_alg) {
    #line 154 
    case (u32)4: 
                 #line 154 
    ;
    #line 155 
    value = value;
    #line 156 
    break;
    #line 157 
    case (u32)5: 
                 #line 157 
    ;
    #line 158 
    value |= 4U;
    #line 159 
    break;
    #line 160 
    default: 
             #line 160 
    ;
    #line 161 
    break;
  }
  #line 164 
  writel(value,ioaddr + 3072U);
  #line 165 
  return;
}

#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_prog_mtl_tx_algorithms(struct mac_device_info *hw, u32 tx_alg)
{
  #line 170 
  void *ioaddr = hw->pcsr;
  #line 171 
  u32 value = readl(ioaddr + 3072U);
  #line 173 
  value &= 4294967199U;
  #line 174 
  switch (tx_alg) {
    #line 175 
    case (u32)0: 
                 #line 175 
    ;
    #line 176 
    value = value;
    #line 177 
    break;
    #line 178 
    case (u32)1: 
                 #line 178 
    ;
    #line 179 
    value |= 32U;
    #line 180 
    break;
    #line 181 
    case (u32)2: 
                 #line 181 
    ;
    #line 182 
    value |= 64U;
    #line 183 
    break;
    #line 184 
    case (u32)3: 
                 #line 184 
    ;
    #line 185 
    value |= 96U;
    #line 186 
    break;
    #line 187 
    default: 
             #line 187 
    ;
    #line 188 
    break;
  }
  #line 191 
  writel(value,ioaddr + 3072U);
  #line 192 
  return;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_set_mtl_tx_queue_weight(struct mac_device_info *hw, u32 weight, u32 queue)
{
  #line 197 
  void *ioaddr = hw->pcsr;
  #line 198 
  u32 value = readl(ioaddr + (unsigned long)(queue * 64U + 3352U));
  #line 200 
  value &= 4292870144U;
  #line 201 
  value = (weight & 2097151U) | value;
  #line 202 
  writel(value,ioaddr + (unsigned long)(queue * 64U + 3352U));
  #line 203 
  return;
}

#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_map_mtl_dma(struct mac_device_info *hw, u32 queue, u32 chan)
{
  #line 208 
  u32 value;
  #line 207 
  void *ioaddr = hw->pcsr;
  #line 210 
  if (queue <= 3U) 
                   #line 211 
                   value = readl(ioaddr + 3120U); else 
                                                       #line 213 
                                                       value = readl(ioaddr + 3124U);
  #line 215 
  if (queue == 0U || queue == 4U) {
    #line 216 
    value &= 4294967280U;
    #line 217 
    value |= chan;
  }
  else {
    #line 219 
    value = ~ (- ((unsigned int)(1UL << queue * 8U)) & (unsigned int)(18446744073709551615UL >> (52U - (queue + 4294967295U) * 8U))) & value;
    #line 220 
    value = (chan << queue * 8U) | value;
  }
  #line 223 
  if (queue <= 3U) 
                   #line 224 
                   writel(value,ioaddr + 3120U); else 
                                                      #line 226 
                                                      writel(value,ioaddr + 3124U);
  #line 227 
  return;
}

#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_config_cbs(struct mac_device_info *hw, u32 send_slope, u32 idle_slope, u32 high_credit, u32 low_credit, u32 queue)
{
  #line 234 
  u32 value;
  #line 233 
  void *ioaddr = hw->pcsr;
  {
    #line 236 
    bool branch;
    #line 236 
    struct _ddebug __UNIQUE_ID_ddebug536 = {.modname = (char *)"stmmac", .function = (char *)"dwmac4_config_cbs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c", .format = (char *)"Queue %d configured as AVB. Parameters:\n", .lineno = (unsigned int)236U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 236 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug536.key.dd_key_false.key,(_Bool)0);
    #line 236 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 236 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug536,(char *)"Queue %d configured as AVB. Parameters:\n",queue);
  }
  {
    #line 237 
    bool branch_0;
    #line 237 
    struct _ddebug __UNIQUE_ID_ddebug537 = {.modname = (char *)"stmmac", .function = (char *)"dwmac4_config_cbs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c", .format = (char *)"\tsend_slope: 0x%08x\n", .lineno = (unsigned int)237U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 237 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug537.key.dd_key_false.key,(_Bool)0);
    #line 237 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 237 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug537,(char *)"\tsend_slope: 0x%08x\n",send_slope);
  }
  {
    #line 238 
    bool branch_1;
    #line 238 
    struct _ddebug __UNIQUE_ID_ddebug538 = {.modname = (char *)"stmmac", .function = (char *)"dwmac4_config_cbs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c", .format = (char *)"\tidle_slope: 0x%08x\n", .lineno = (unsigned int)238U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 238 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug538.key.dd_key_false.key,(_Bool)0);
    #line 238 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 238 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug538,(char *)"\tidle_slope: 0x%08x\n",idle_slope);
  }
  {
    #line 239 
    bool branch_2;
    #line 239 
    struct _ddebug __UNIQUE_ID_ddebug539 = {.modname = (char *)"stmmac", .function = (char *)"dwmac4_config_cbs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c", .format = (char *)"\thigh_credit: 0x%08x\n", .lineno = (unsigned int)239U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 239 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug539.key.dd_key_false.key,(_Bool)0);
    #line 239 
    if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                  #line 239 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug539,(char *)"\thigh_credit: 0x%08x\n",high_credit);
  }
  {
    #line 240 
    bool branch_3;
    #line 240 
    struct _ddebug __UNIQUE_ID_ddebug540 = {.modname = (char *)"stmmac", .function = (char *)"dwmac4_config_cbs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c", .format = (char *)"\tlow_credit: 0x%08x\n", .lineno = (unsigned int)240U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 240 
    branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug540.key.dd_key_false.key,(_Bool)0);
    #line 240 
    if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                  #line 240 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug540,(char *)"\tlow_credit: 0x%08x\n",low_credit);
  }
  #line 243 
  value = readl(ioaddr + (unsigned long)(queue * 64U + 3344U));
  #line 244 
  value |= 4U;
  #line 245 
  value |= 8U;
  #line 246 
  writel(value,ioaddr + (unsigned long)(queue * 64U + 3344U));
  #line 249 
  value = readl(ioaddr + (unsigned long)(queue * 64U + 3356U));
  #line 250 
  value &= 4294950912U;
  #line 251 
  value = (send_slope & 16383U) | value;
  #line 252 
  writel(value,ioaddr + (unsigned long)(queue * 64U + 3356U));
  #line 255 
  dwmac4_set_mtl_tx_queue_weight(hw,idle_slope,queue);
  #line 258 
  value = readl(ioaddr + (unsigned long)(queue * 64U + 3360U));
  #line 259 
  value &= 3758096384U;
  #line 260 
  value = (high_credit & 536870911U) | value;
  #line 261 
  writel(value,ioaddr + (unsigned long)(queue * 64U + 3360U));
  #line 264 
  value = readl(ioaddr + (unsigned long)(queue * 64U + 3364U));
  #line 265 
  value &= 3758096384U;
  #line 266 
  value = (low_credit & 536870911U) | value;
  #line 267 
  writel(value,ioaddr + (unsigned long)(queue * 64U + 3364U));
  #line 268 
  return;
}

#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_dump_regs(struct mac_device_info *hw, u32 *reg_space)
{
  #line 273 
  int i;
  #line 272 
  void *ioaddr = hw->pcsr;
  #line 275 
  i = 0;
  #line 275 
  while (i <= 131) {
    #line 276 
    *(reg_space + (unsigned long)i) = readl(ioaddr + (unsigned long)(i * 4));
    #line 275 
    i ++;
  }
  #line 277 
  return;
}

#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static int dwmac4_rx_ipc_enable(struct mac_device_info *hw)
{
  #line 281 
  void *ioaddr = hw->pcsr;
  #line 282 
  u32 value = readl(ioaddr);
  #line 284 
  if (hw->rx_csum != 0U) 
                         #line 285 
                         value |= 134217728U; else 
                                                   #line 287 
                                                   value &= 4160749567U;
  #line 289 
  writel(value,ioaddr);
  #line 291 
  value = readl(ioaddr);
  #line 293 
  return ((unsigned long)value & 134217728UL) != 0UL;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_pmt(struct mac_device_info *hw, unsigned long mode)
{
  #line 300 
  u32 config;
  #line 298 
  void *ioaddr = hw->pcsr;
  #line 299 
  unsigned int pmt = 0U;
  #line 302 
  if ((mode & 32UL) != 0UL) {
    {
      #line 303 
      bool branch;
      #line 303 
      struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"stmmac", .function = (char *)"dwmac4_pmt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c", .format = (char *)"GMAC: WOL Magic frame\n", .lineno = (unsigned int)303U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 303 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
      #line 303 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 303 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug541,(char *)"GMAC: WOL Magic frame\n");
    }
    #line 304 
    pmt |= 3U;
  }
  #line 306 
  if ((mode & 2UL) != 0UL) {
    {
      #line 307 
      bool branch_0;
      #line 307 
      struct _ddebug __UNIQUE_ID_ddebug542 = {.modname = (char *)"stmmac", .function = (char *)"dwmac4_pmt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c", .format = (char *)"GMAC: WOL on global unicast\n", .lineno = (unsigned int)307U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 307 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug542.key.dd_key_false.key,(_Bool)0);
      #line 307 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 307 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug542,(char *)"GMAC: WOL on global unicast\n");
    }
    #line 308 
    pmt |= 517U;
  }
  #line 311 
  if (pmt != 0U) {
    #line 313 
    config = readl(ioaddr);
    #line 314 
    config |= 1U;
    #line 315 
    writel(config,ioaddr);
  }
  #line 317 
  writel(pmt,ioaddr + 192U);
  #line 318 
  return;
}

#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_set_umac_addr(struct mac_device_info *hw, unsigned char *addr, unsigned int reg_n)
{
  #line 323 
  void *ioaddr = hw->pcsr;
  #line 325 
  stmmac_dwmac4_set_mac_addr(ioaddr,addr,(reg_n + 96U) * 8U,reg_n * 8U + 772U);
  #line 327 
  return;
}

#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_get_umac_addr(struct mac_device_info *hw, unsigned char *addr, unsigned int reg_n)
{
  #line 332 
  void *ioaddr = hw->pcsr;
  #line 334 
  stmmac_dwmac4_get_mac_addr(ioaddr,addr,(reg_n + 96U) * 8U,reg_n * 8U + 772U);
  #line 336 
  return;
}

#line 338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_set_eee_mode(struct mac_device_info *hw, bool en_tx_lpi_clockgating)
{
  #line 342 
  u32 value;
  #line 341 
  void *ioaddr = hw->pcsr;
  #line 348 
  value = readl(ioaddr + 208U);
  #line 349 
  value |= 589824U;
  #line 351 
  if ((int)en_tx_lpi_clockgating != 0) 
                                       #line 352 
                                       value |= 2097152U;
  #line 354 
  writel(value,ioaddr + 208U);
  #line 355 
  return;
}

#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_reset_eee_mode(struct mac_device_info *hw)
{
  #line 360 
  u32 value;
  #line 359 
  void *ioaddr = hw->pcsr;
  #line 362 
  value = readl(ioaddr + 208U);
  #line 363 
  value &= 4294377471U;
  #line 364 
  writel(value,ioaddr + 208U);
  #line 365 
  return;
}

#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_set_eee_pls(struct mac_device_info *hw, int link)
{
  #line 370 
  u32 value;
  #line 369 
  void *ioaddr = hw->pcsr;
  #line 372 
  value = readl(ioaddr + 208U);
  #line 374 
  if (link != 0) 
                 #line 375 
                 value |= 131072U; else 
                                        #line 377 
                                        value &= 4294836223U;
  #line 379 
  writel(value,ioaddr + 208U);
  #line 380 
  return;
}

#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_set_eee_timer(struct mac_device_info *hw, int ls, int tw)
{
  #line 384 
  void *ioaddr = hw->pcsr;
  #line 385 
  int value = (tw & 65535) | ((ls << 16) & 67043328);
  #line 394 
  writel((unsigned int)value,ioaddr + 212U);
  #line 395 
  return;
}

#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_set_filter(struct mac_device_info *hw, struct net_device *dev)
{
  #line 403 
  unsigned int value;
  #line 404 
  u32 mc_filter[8U];
  #line 405 
  int i;
  #line 400 
  void *ioaddr = (void *)dev->base_addr;
  #line 401 
  int numhashregs = (int)(hw->multicast_filter_bins >> 5);
  #line 402 
  int mcbitslog2 = (int)hw->mcast_bits_log2;
  #line 407 
  memset((void *)(& mc_filter),0,32UL);
  #line 409 
  value = readl(ioaddr + 8U);
  #line 410 
  value &= 4294967291U;
  #line 411 
  value &= 4294966271U;
  #line 412 
  value &= 4294967167U;
  #line 413 
  value &= 4294967279U;
  #line 414 
  value &= 4294967294U;
  #line 415 
  if ((dev->flags & 256U) != 0U) 
                                 #line 416 
                                 value = 129U;
  else 
    #line 417 
    if ((dev->flags & 512U) != 0U || (unsigned int)dev->mc.count > hw->multicast_filter_bins) {
      #line 420 
      value |= 16U;
      #line 422 
      memset((void *)(& mc_filter),255,32UL);
    }
    else 
      #line 423 
      if (dev->mc.count != 0) {
        #line 429 
        void *__mptr;
        #line 424 
        struct netdev_hw_addr *ha;
        #line 427 
        value |= 4U;
        #line 429 
        __mptr = (void *)dev->mc.list.next;
        #line 429 
        ha = ((struct netdev_hw_addr *)__mptr);
        #line 429 
        while (& ha->list != & dev->mc.list) {
          #line 429 
          void *__mptr_0;
          {
            #line 435 
            u32 ___x;
            #line 435 
            u32 tmp_4;
            {
              #line 435 
              u32 __x = ~ crc32_le(4294967295U,(unsigned char *)(& ha->addr),6UL);
              #line 435 
              if (0 != 0) {
                #line 435 
                ___x = __x;
                #line 435 
                ___x = (___x << 16) | (___x << ((unsigned long)8 * sizeof(___x) - (unsigned long)16));
                #line 435 
                ___x = ((___x >> 8) & 16711935U) | ((___x << 8) & 4278255360U);
                #line 435 
                ___x = ((___x >> 4) & 252645135U) | ((___x << 4) & 4042322160U);
                #line 435 
                ___x = ((___x >> 2) & 858993459U) | ((___x << 2) & 3435973836U);
                #line 435 
                ___x = ((___x >> 1) & 1431655765U) | ((___x << 1) & 2863311530U);
                #line 435 
                tmp_4 = ___x;
              }
              else 
                   #line 435 
                   tmp_4 = __bitrev32(__x);
              }
            #line 435 
            u32 bit_nr = tmp_4 >> (32 - mcbitslog2);
            #line 441 
            mc_filter[bit_nr >> 5] |= (unsigned int)(1 << (bit_nr & 31U));
          }
          #line 429 
          __mptr_0 = (void *)ha->list.next;
          #line 429 
          ha = ((struct netdev_hw_addr *)__mptr_0);
        }
      }
  #line 445 
  i = 0;
  #line 445 
  while (i < numhashregs) {
    #line 446 
    writel(mc_filter[i],ioaddr + (unsigned long)((i + 4) * 4));
    #line 445 
    i ++;
  }
  #line 448 
  value |= 1024U;
  #line 451 
  if ((unsigned int)dev->uc.count > hw->unicast_filter_entries) 
                                                                #line 455 
                                                                value |= 1U;
  else {
    #line 460 
    void *__mptr_1;
    #line 457 
    struct netdev_hw_addr *ha_0;
    #line 458 
    int reg = 1;
    #line 460 
    __mptr_1 = (void *)dev->uc.list.next;
    #line 460 
    ha_0 = ((struct netdev_hw_addr *)__mptr_1);
    #line 460 
    while (& ha_0->list != & dev->uc.list) {
      #line 460 
      void *__mptr_2;
      #line 461 
      dwmac4_set_umac_addr(hw,(unsigned char *)(& ha_0->addr),(unsigned int)reg);
      #line 462 
      reg ++;
      #line 460 
      __mptr_2 = (void *)ha_0->list.next;
      #line 460 
      ha_0 = ((struct netdev_hw_addr *)__mptr_2);
    }
    #line 465 
    while (reg <= 127) {
      #line 466 
      writel(0U,ioaddr + (unsigned long)((reg + 96) * 8));
      #line 467 
      writel(0U,ioaddr + (unsigned long)(reg * 8 + 772));
      #line 468 
      reg ++;
    }
  }
  #line 472 
  writel(value,ioaddr + 8U);
  #line 473 
  return;
}

#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_flow_ctrl(struct mac_device_info *hw, unsigned int duplex, unsigned int fc, unsigned int pause_time, u32 tx_cnt)
{
  #line 479 
  void *ioaddr = hw->pcsr;
  #line 480 
  unsigned int flow = 0U;
  #line 481 
  u32 queue = 0U;
  {
    #line 483 
    bool branch;
    #line 483 
    struct _ddebug __UNIQUE_ID_ddebug543 = {.modname = (char *)"stmmac", .function = (char *)"dwmac4_flow_ctrl", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c", .format = (char *)"GMAC Flow-Control:\n", .lineno = (unsigned int)483U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 483 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug543.key.dd_key_false.key,(_Bool)0);
    #line 483 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 483 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug543,(char *)"GMAC Flow-Control:\n");
  }
  #line 484 
  if ((fc & 1U) != 0U) {
    {
      #line 485 
      bool branch_0;
      #line 485 
      struct _ddebug __UNIQUE_ID_ddebug544 = {.modname = (char *)"stmmac", .function = (char *)"dwmac4_flow_ctrl", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c", .format = (char *)"\tReceive Flow-Control ON\n", .lineno = (unsigned int)485U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 485 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug544.key.dd_key_false.key,(_Bool)0);
      #line 485 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 485 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug544,(char *)"\tReceive Flow-Control ON\n");
    }
    #line 486 
    flow |= 1U;
  }
  #line 488 
  writel(flow,ioaddr + 144U);
  #line 490 
  if ((fc & 2U) != 0U) {
    {
      #line 491 
      bool branch_1;
      #line 491 
      struct _ddebug __UNIQUE_ID_ddebug545 = {.modname = (char *)"stmmac", .function = (char *)"dwmac4_flow_ctrl", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c", .format = (char *)"\tTransmit Flow-Control ON\n", .lineno = (unsigned int)491U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 491 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug545.key.dd_key_false.key,(_Bool)0);
      #line 491 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 491 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug545,(char *)"\tTransmit Flow-Control ON\n");
    }
    #line 493 
    if (duplex != 0U) {
      #line 494 
      bool branch_2;
      #line 494 
      struct _ddebug __UNIQUE_ID_ddebug546 = {.modname = (char *)"stmmac", .function = (char *)"dwmac4_flow_ctrl", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c", .format = (char *)"\tduplex mode: PAUSE %d\n", .lineno = (unsigned int)494U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 494 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug546.key.dd_key_false.key,(_Bool)0);
      #line 494 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 494 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug546,(char *)"\tduplex mode: PAUSE %d\n",pause_time);
    }
    #line 496 
    queue = 0U;
    #line 496 
    while (queue < tx_cnt) {
      #line 497 
      flow = 2U;
      #line 499 
      if (duplex != 0U) 
                        #line 500 
                        flow = (pause_time << 16) | flow;
      #line 503 
      writel(flow,ioaddr + (unsigned long)((queue + 28U) * 4U));
      #line 496 
      queue ++;
    }
  }
  else {
    #line 506 
    queue = 0U;
    #line 506 
    while (queue < tx_cnt) {
      #line 507 
      writel(0U,ioaddr + (unsigned long)((queue + 28U) * 4U));
      #line 506 
      queue ++;
    }
  }
  #line 509 
  return;
}

#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_ctrl_ane(void *ioaddr, bool ane, bool srgmi_ral, bool loopback)
{
  #line 514 
  dwmac_ctrl_ane(ioaddr,224U,(_Bool)((bool)((int)ane) != 0),(_Bool)((bool)((int)srgmi_ral) != 0),(_Bool)((bool)((int)loopback) != 0));
  #line 515 
  return;
}

#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_rane(void *ioaddr, bool restart)
{
  #line 519 
  dwmac_rane(ioaddr,224U,(_Bool)((bool)((int)restart) != 0));
  #line 520 
  return;
}

#line 522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_get_adv_lp(void *ioaddr, struct rgmii_adv *adv)
{
  #line 524 
  dwmac_get_adv_lp(ioaddr,224U,adv);
  #line 525 
  return;
}

#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_phystatus(void *ioaddr, struct stmmac_extra_stats *x)
{
  #line 530 
  u32 status;
  #line 532 
  status = readl(ioaddr + 248U);
  #line 533 
  (x->irq_rgmii_n) ++;
  #line 536 
  if (((unsigned long)status & 524288UL) != 0UL) {
    #line 537 
    int speed_value;
    #line 552 
    char *tmp;
    #line 539 
    x->pcs_link = 1UL;
    #line 541 
    speed_value = (int)((unsigned long)status >> 17) & 3;
    #line 543 
    if (speed_value == 2) 
                          #line 544 
                          x->pcs_speed = 1000UL;
    else 
      #line 545 
      if (speed_value == 1) 
                            #line 546 
                            x->pcs_speed = 100UL; else 
                                                       #line 548 
                                                       x->pcs_speed = 10UL;
    #line 550 
    x->pcs_duplex = (unsigned long)status & 1UL;
    #line 552 
    if (x->pcs_duplex != 0UL) 
                              #line 552 
                              tmp = (char *)"Full"; else 
                                                         #line 552 
                                                         tmp = (char *)"Half";
    #line 552 
    ;
    #line 552 
    printk((char *)"\001",(int)x->pcs_speed,tmp);
  }
  else {
    #line 555 
    x->pcs_link = 0UL;
    #line 556 
    printk((char *)"\001");
  }
  #line 558 
  return;
}

#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static int dwmac4_irq_mtl_status(struct mac_device_info *hw, u32 chan)
{
  #line 563 
  u32 mtl_int_qx_status;
  #line 562 
  void *ioaddr = hw->pcsr;
  #line 564 
  int ret = 0;
  #line 566 
  mtl_int_qx_status = readl(ioaddr + 3104U);
  #line 569 
  if ((((unsigned long)mtl_int_qx_status >> chan) & 1UL) != 0UL) {
    #line 571 
    u32 status = readl(ioaddr + (unsigned long)((chan + 52U) * 64U + 44U));
    #line 573 
    if (((unsigned long)status & 65536UL) != 0UL) {
      #line 575 
      writel(status | 65536U,ioaddr + (unsigned long)((chan + 52U) * 64U + 44U));
      #line 577 
      ret = 256;
    }
  }
  #line 581 
  return ret;
}

#line 584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static int dwmac4_irq_status(struct mac_device_info *hw, struct stmmac_extra_stats *x)
{
  #line 587 
  void *ioaddr = hw->pcsr;
  #line 588 
  u32 intr_status = readl(ioaddr + 176U);
  #line 589 
  u32 intr_enable = readl(ioaddr + 180U);
  #line 590 
  int ret = 0;
  #line 593 
  intr_status &= intr_enable;
  #line 596 
  if ((intr_status & 1024U) != 0U) 
                                   #line 597 
                                   (x->mmc_tx_irq_n) ++;
  #line 598 
  if ((long)((intr_status & 512U) != 0U) != 0L) 
                                                #line 599 
                                                (x->mmc_rx_irq_n) ++;
  #line 600 
  if ((long)((intr_status & 2048U) != 0U) != 0L) 
                                                 #line 601 
                                                 (x->mmc_rx_csum_offload_irq_n) ++;
  #line 603 
  if ((long)((intr_status & 16U) != 0U) != 0L) {
    #line 604 
    readl(ioaddr + 192U);
    #line 605 
    (x->irq_receive_pmt_irq_n) ++;
  }
  #line 609 
  if ((intr_status & 32U) != 0U) {
    #line 611 
    u32 status = readl(ioaddr + 208U);
    #line 613 
    if (((unsigned long)status & 1UL) != 0UL) {
      #line 614 
      ret |= 1;
      #line 615 
      (x->irq_tx_path_in_lpi_mode_n) ++;
    }
    #line 617 
    if (((unsigned long)status & 2UL) != 0UL) {
      #line 618 
      ret |= 2;
      #line 619 
      (x->irq_tx_path_exit_lpi_mode_n) ++;
    }
    #line 621 
    if (((unsigned long)status & 4UL) != 0UL) 
                                              #line 622 
                                              (x->irq_rx_path_in_lpi_mode_n) ++;
    #line 623 
    if (((unsigned long)status & 8UL) != 0UL) 
                                              #line 624 
                                              (x->irq_rx_path_exit_lpi_mode_n) ++;
  }
  #line 627 
  dwmac_pcs_isr(ioaddr,224U,intr_status,x);
  #line 628 
  if (((unsigned long)intr_status & 1UL) != 0UL) 
                                                 #line 629 
                                                 dwmac4_phystatus(ioaddr,x);
  #line 631 
  return ret;
}

#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_debug(void *ioaddr, struct stmmac_extra_stats *x, u32 rx_queues, u32 tx_queues)
{
  #line 637 
  u32 value;
  #line 638 
  u32 queue;
  #line 640 
  queue = 0U;
  #line 640 
  while (queue < tx_queues) {
    #line 641 
    value = readl(ioaddr + (unsigned long)((queue + 52U) * 64U + 8U));
    #line 643 
    if (((unsigned long)value & 32UL) != 0UL) 
                                              #line 644 
                                              (x->mtl_tx_status_fifo_full) ++;
    #line 645 
    if (((unsigned long)value & 16UL) != 0UL) 
                                              #line 646 
                                              (x->mtl_tx_fifo_not_empty) ++;
    #line 647 
    if (((unsigned long)value & 8UL) != 0UL) 
                                             #line 648 
                                             (x->mmtl_fifo_ctrl) ++;
    #line 649 
    if (((unsigned long)value & 6UL) != 0UL) {
      #line 650 
      u32 trcsts = (unsigned int)((unsigned long)value >> 1) & 3U;
      #line 652 
      if (trcsts == 3U) 
                        #line 653 
                        (x->mtl_tx_fifo_read_ctrl_write) ++;
      else 
        #line 654 
        if (trcsts == 2U) 
                          #line 655 
                          (x->mtl_tx_fifo_read_ctrl_wait) ++;
        else 
          #line 656 
          if (trcsts == 1U) 
                            #line 657 
                            (x->mtl_tx_fifo_read_ctrl_read) ++; else 
                                                                  #line 659 
                                                                  (x->mtl_tx_fifo_read_ctrl_idle) ++;
    }
    #line 661 
    if (((unsigned long)value & 1UL) != 0UL) 
                                             #line 662 
                                             (x->mac_tx_in_pause) ++;
    #line 640 
    queue ++;
  }
  #line 665 
  queue = 0U;
  #line 665 
  while (queue < rx_queues) {
    #line 666 
    value = readl(ioaddr + (unsigned long)((queue + 52U) * 64U + 56U));
    #line 668 
    if (((unsigned long)value & 48UL) != 0UL) {
      #line 669 
      u32 rxfsts = (unsigned int)((unsigned long)value >> 1) & 24U;
      #line 672 
      if (rxfsts == 3U) 
                        #line 673 
                        (x->mtl_rx_fifo_fill_level_full) ++;
      else 
        #line 674 
        if (rxfsts == 2U) 
                          #line 675 
                          (x->mtl_rx_fifo_fill_above_thresh) ++;
        else 
          #line 676 
          if (rxfsts == 1U) 
                            #line 677 
                            (x->mtl_rx_fifo_fill_below_thresh) ++; else 
                                                                    #line 679 
                                                                    (x->mtl_rx_fifo_fill_level_empty) ++;
    }
    #line 681 
    if (((unsigned long)value & 6UL) != 0UL) {
      #line 682 
      u32 rrcsts = (unsigned int)((unsigned long)value >> 1) & 3U;
      #line 685 
      if (rrcsts == 3U) 
                        #line 686 
                        (x->mtl_rx_fifo_read_ctrl_flush) ++;
      else 
        #line 687 
        if (rrcsts == 2U) 
                          #line 688 
                          (x->mtl_rx_fifo_read_ctrl_read_data) ++;
        else 
          #line 689 
          if (rrcsts == 1U) 
                            #line 690 
                            (x->mtl_rx_fifo_read_ctrl_status) ++; else 
                                                                    #line 692 
                                                                    (x->mtl_rx_fifo_read_ctrl_idle) ++;
    }
    #line 694 
    if (((unsigned long)value & 1UL) != 0UL) 
                                             #line 695 
                                             (x->mtl_rx_fifo_ctrl_active) ++;
    #line 665 
    queue ++;
  }
  #line 699 
  value = readl(ioaddr + 276U);
  #line 701 
  if (((unsigned long)value & 393216UL) != 0UL) {
    #line 702 
    u32 tfcsts = (unsigned int)((unsigned long)value >> 17) & 3U;
    #line 705 
    if (tfcsts == 3U) 
                      #line 706 
                      (x->mac_tx_frame_ctrl_xfer) ++;
    else 
      #line 707 
      if (tfcsts == 2U) 
                        #line 708 
                        (x->mac_tx_frame_ctrl_pause) ++;
      else 
        #line 709 
        if (tfcsts == 1U) 
                          #line 710 
                          (x->mac_tx_frame_ctrl_wait) ++; else 
                                                               #line 712 
                                                               (x->mac_tx_frame_ctrl_idle) ++;
  }
  #line 714 
  if (((unsigned long)value & 65536UL) != 0UL) 
                                               #line 715 
                                               (x->mac_gmii_tx_proto_engine) ++;
  #line 716 
  if (((unsigned long)value & 6UL) != 0UL) 
                                           #line 717 
                                           x->mac_rx_frame_ctrl_fifo = ((unsigned long)value >> 1) & 3UL;
  #line 719 
  if (((unsigned long)value & 1UL) != 0UL) 
                                           #line 720 
                                           (x->mac_gmii_rx_proto_engine) ++;
  #line 721 
  return;
}

#line 723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_set_mac_loopback(void *ioaddr, bool enable)
{
  #line 725 
  u32 value = readl(ioaddr);
  #line 727 
  if ((int)enable != 0) 
                        #line 728 
                        value |= 4096U; else 
                                             #line 730 
                                             value &= 4294963199U;
  #line 732 
  writel(value,ioaddr);
  #line 733 
  return;
}

#line 735  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_update_vlan_hash(struct mac_device_info *hw, u32 hash, __le16 perfect_match, bool is_double)
{
  #line 738 
  void *ioaddr = hw->pcsr;
  #line 740 
  writel(hash,ioaddr + 88U);
  #line 742 
  if (hash != 0U) {
    #line 743 
    u32 value = 33619968U;
    #line 744 
    if ((int)is_double != 0) {
      #line 745 
      value |= 67108864U;
      #line 746 
      value |= 262144U;
      #line 747 
      value |= 1048576U;
    }
    #line 750 
    writel(value,ioaddr + 80U);
  }
  else 
    #line 751 
    if ((unsigned int)perfect_match != 0U) {
      #line 752 
      u32 value_0 = 65536U;
      #line 754 
      if ((int)is_double != 0) {
        #line 755 
        value_0 |= 67108864U;
        #line 756 
        value_0 |= 262144U;
        #line 757 
        value_0 |= 1048576U;
      }
      #line 760 
      writel((unsigned int)perfect_match | value_0,ioaddr + 80U);
    }
    else {
      #line 762 
      u32 value_1 = readl(ioaddr + 80U);
      #line 764 
      value_1 &= 4261347327U;
      #line 765 
      value_1 &= 4227596287U;
      #line 766 
      value_1 &= 4293918719U;
      #line 767 
      value_1 &= 4294901760U;
      #line 769 
      writel(value_1,ioaddr + 80U);
    }
  #line 771 
  return;
}

#line 773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_sarc_configure(void *ioaddr, int val)
{
  #line 775 
  u32 value = readl(ioaddr);
  #line 777 
  value &= 2415919103U;
  #line 778 
  value = (unsigned int)(val << 28) | value;
  #line 780 
  writel(value,ioaddr);
  #line 781 
  return;
}

#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_enable_vlan(struct mac_device_info *hw, u32 type)
{
  #line 786 
  u32 value;
  #line 785 
  void *ioaddr = hw->pcsr;
  #line 788 
  value = readl(ioaddr + 96U);
  #line 789 
  value |= 1048576U;
  #line 790 
  value |= 524288U;
  #line 791 
  value &= 4294770687U;
  #line 792 
  value = ((type << 16) & 196608U) | value;
  #line 793 
  writel(value,ioaddr + 96U);
  #line 794 
  return;
}

#line 796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static void dwmac4_set_arp_offload(struct mac_device_info *hw, bool en, u32 addr)
{
  #line 800 
  u32 value;
  #line 799 
  void *ioaddr = hw->pcsr;
  #line 802 
  writel(addr,ioaddr + 528U);
  #line 804 
  value = readl(ioaddr);
  #line 805 
  if ((int)en != 0) 
                    #line 806 
                    value |= 2147483648U; else 
                                               #line 808 
                                               value &= 2147483647U;
  #line 809 
  writel(value,ioaddr);
  #line 810 
  return;
}

#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static int dwmac4_config_l3_filter(struct mac_device_info *hw, u32 filter_no, bool en, bool ipv6, bool sa, bool inv, u32 match)
{
  #line 817 
  u32 value;
  #line 816 
  void *ioaddr = hw->pcsr;
  #line 819 
  value = readl(ioaddr + 8U);
  #line 820 
  value |= 1048576U;
  #line 821 
  writel(value,ioaddr + 8U);
  #line 823 
  value = readl(ioaddr + (unsigned long)(filter_no * 48U + 2304U));
  #line 826 
  if ((int)ipv6 != 0) {
    #line 827 
    value |= 1U;
    #line 828 
    value &= 4294967283U;
    #line 829 
    value &= 4294967247U;
    #line 830 
    if ((int)sa != 0) {
      #line 831 
      value |= 4U;
      #line 832 
      if ((int)inv != 0) 
                         #line 833 
                         value |= 8U;
    }
    else {
      #line 835 
      value |= 16U;
      #line 836 
      if ((int)inv != 0) 
                         #line 837 
                         value |= 32U;
    }
  }
  else {
    #line 840 
    value &= 4294967294U;
    #line 841 
    if ((int)sa != 0) {
      #line 842 
      value |= 4U;
      #line 843 
      if ((int)inv != 0) 
                         #line 844 
                         value |= 8U;
    }
    else {
      #line 846 
      value |= 16U;
      #line 847 
      if ((int)inv != 0) 
                         #line 848 
                         value |= 32U;
    }
  }
  #line 852 
  writel(value,ioaddr + (unsigned long)(filter_no * 48U + 2304U));
  #line 854 
  if ((int)sa != 0) 
                    #line 855 
                    writel(match,ioaddr + (unsigned long)(filter_no * 48U + 2320U)); else 
                                                                    #line 857 
                                                                    writel(match,ioaddr + (unsigned long)(filter_no * 48U + 2324U));
  #line 860 
  if (! en) 
            #line 861 
            writel(0U,ioaddr + (unsigned long)(filter_no * 48U + 2304U));
  #line 863 
  return 0;
}

#line 866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
static int dwmac4_config_l4_filter(struct mac_device_info *hw, u32 filter_no, bool en, bool udp, bool sa, bool inv, u32 match)
{
  #line 871 
  u32 value;
  #line 870 
  void *ioaddr = hw->pcsr;
  #line 873 
  value = readl(ioaddr + 8U);
  #line 874 
  value |= 1048576U;
  #line 875 
  writel(value,ioaddr + 8U);
  #line 877 
  value = readl(ioaddr + (unsigned long)(filter_no * 48U + 2304U));
  #line 878 
  if ((int)udp != 0) 
                     #line 879 
                     value |= 65536U; else 
                                           #line 881 
                                           value &= 4294901759U;
  #line 884 
  value &= 4294180863U;
  #line 885 
  value &= 4291821567U;
  #line 886 
  if ((int)sa != 0) {
    #line 887 
    value |= 262144U;
    #line 888 
    if ((int)inv != 0) 
                       #line 889 
                       value |= 524288U;
  }
  else {
    #line 891 
    value |= 1048576U;
    #line 892 
    if ((int)inv != 0) 
                       #line 893 
                       value |= 2097152U;
  }
  #line 896 
  writel(value,ioaddr + (unsigned long)(filter_no * 48U + 2304U));
  #line 898 
  if ((int)sa != 0) 
                    #line 899 
                    value = match & 65535U; else 
                                                 #line 901 
                                                 value = match << 16;
  #line 904 
  writel(value,ioaddr + (unsigned long)(filter_no * 48U + 2308U));
  #line 906 
  if (! en) 
            #line 907 
            writel(0U,ioaddr + (unsigned long)(filter_no * 48U + 2304U));
  #line 909 
  return 0;
}

#line 912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
struct stmmac_ops dwmac4_ops = {.core_init = & dwmac4_core_init, .set_mac = & stmmac_set_mac, .rx_ipc = & dwmac4_rx_ipc_enable, .rx_queue_enable = & dwmac4_rx_queue_enable, .rx_queue_prio = & dwmac4_rx_queue_priority, .tx_queue_prio = & dwmac4_tx_queue_priority, .rx_queue_routing = & dwmac4_rx_queue_routing, .prog_mtl_rx_algorithms = & dwmac4_prog_mtl_rx_algorithms, .prog_mtl_tx_algorithms = & dwmac4_prog_mtl_tx_algorithms, .set_mtl_tx_queue_weight = & dwmac4_set_mtl_tx_queue_weight, .map_mtl_to_dma = & dwmac4_map_mtl_dma, .config_cbs = & dwmac4_config_cbs, .dump_regs = & dwmac4_dump_regs, .host_irq_status = & dwmac4_irq_status, .host_mtl_irq_status = & dwmac4_irq_mtl_status, .set_filter = & dwmac4_set_filter, .flow_ctrl = & dwmac4_flow_ctrl, .pmt = & dwmac4_pmt, .set_umac_addr = & dwmac4_set_umac_addr, .get_umac_addr = & dwmac4_get_umac_addr, .set_eee_mode = & dwmac4_set_eee_mode, .reset_eee_mode = & dwmac4_reset_eee_mode, .set_eee_timer = & dwmac4_set_eee_timer, .set_eee_pls = & dwmac4_set_eee_pls, .debug = & dwmac4_debug, .pcs_ctrl_ane = & dwmac4_ctrl_ane, .pcs_rane = & dwmac4_rane, .pcs_get_adv_lp = & dwmac4_get_adv_lp, .flex_pps_config = & dwmac5_flex_pps_config, .set_mac_loopback = & dwmac4_set_mac_loopback, .update_vlan_hash = & dwmac4_update_vlan_hash, .enable_vlan = & dwmac4_enable_vlan, .sarc_configure = & dwmac4_sarc_configure, .config_l3_filter = & dwmac4_config_l3_filter, .config_l4_filter = & dwmac4_config_l4_filter, .set_arp_offload = & dwmac4_set_arp_offload};
#line 951  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
struct stmmac_ops dwmac410_ops = {.core_init = & dwmac4_core_init, .set_mac = & stmmac_dwmac4_set_mac, .rx_ipc = & dwmac4_rx_ipc_enable, .rx_queue_enable = & dwmac4_rx_queue_enable, .rx_queue_prio = & dwmac4_rx_queue_priority, .tx_queue_prio = & dwmac4_tx_queue_priority, .rx_queue_routing = & dwmac4_rx_queue_routing, .prog_mtl_rx_algorithms = & dwmac4_prog_mtl_rx_algorithms, .prog_mtl_tx_algorithms = & dwmac4_prog_mtl_tx_algorithms, .set_mtl_tx_queue_weight = & dwmac4_set_mtl_tx_queue_weight, .map_mtl_to_dma = & dwmac4_map_mtl_dma, .config_cbs = & dwmac4_config_cbs, .dump_regs = & dwmac4_dump_regs, .host_irq_status = & dwmac4_irq_status, .host_mtl_irq_status = & dwmac4_irq_mtl_status, .set_filter = & dwmac4_set_filter, .flow_ctrl = & dwmac4_flow_ctrl, .pmt = & dwmac4_pmt, .set_umac_addr = & dwmac4_set_umac_addr, .get_umac_addr = & dwmac4_get_umac_addr, .set_eee_mode = & dwmac4_set_eee_mode, .reset_eee_mode = & dwmac4_reset_eee_mode, .set_eee_timer = & dwmac4_set_eee_timer, .set_eee_pls = & dwmac4_set_eee_pls, .debug = & dwmac4_debug, .pcs_ctrl_ane = & dwmac4_ctrl_ane, .pcs_rane = & dwmac4_rane, .pcs_get_adv_lp = & dwmac4_get_adv_lp, .set_mac_loopback = & dwmac4_set_mac_loopback, .update_vlan_hash = & dwmac4_update_vlan_hash, .enable_vlan = & dwmac4_enable_vlan, .sarc_configure = & dwmac4_sarc_configure, .config_l3_filter = & dwmac4_config_l3_filter, .config_l4_filter = & dwmac4_config_l4_filter, .set_arp_offload = & dwmac4_set_arp_offload};
#line 989  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
struct stmmac_ops dwmac510_ops = {.core_init = & dwmac4_core_init, .set_mac = & stmmac_dwmac4_set_mac, .rx_ipc = & dwmac4_rx_ipc_enable, .rx_queue_enable = & dwmac4_rx_queue_enable, .rx_queue_prio = & dwmac4_rx_queue_priority, .tx_queue_prio = & dwmac4_tx_queue_priority, .rx_queue_routing = & dwmac4_rx_queue_routing, .prog_mtl_rx_algorithms = & dwmac4_prog_mtl_rx_algorithms, .prog_mtl_tx_algorithms = & dwmac4_prog_mtl_tx_algorithms, .set_mtl_tx_queue_weight = & dwmac4_set_mtl_tx_queue_weight, .map_mtl_to_dma = & dwmac4_map_mtl_dma, .config_cbs = & dwmac4_config_cbs, .dump_regs = & dwmac4_dump_regs, .host_irq_status = & dwmac4_irq_status, .host_mtl_irq_status = & dwmac4_irq_mtl_status, .set_filter = & dwmac4_set_filter, .flow_ctrl = & dwmac4_flow_ctrl, .pmt = & dwmac4_pmt, .set_umac_addr = & dwmac4_set_umac_addr, .get_umac_addr = & dwmac4_get_umac_addr, .set_eee_mode = & dwmac4_set_eee_mode, .reset_eee_mode = & dwmac4_reset_eee_mode, .set_eee_timer = & dwmac4_set_eee_timer, .set_eee_pls = & dwmac4_set_eee_pls, .debug = & dwmac4_debug, .pcs_ctrl_ane = & dwmac4_ctrl_ane, .pcs_rane = & dwmac4_rane, .pcs_get_adv_lp = & dwmac4_get_adv_lp, .safety_feat_config = & dwmac5_safety_feat_config, .safety_feat_irq_status = & dwmac5_safety_feat_irq_status, .safety_feat_dump = & dwmac5_safety_feat_dump, .rxp_config = & dwmac5_rxp_config, .flex_pps_config = & dwmac5_flex_pps_config, .set_mac_loopback = & dwmac4_set_mac_loopback, .update_vlan_hash = & dwmac4_update_vlan_hash, .enable_vlan = & dwmac4_enable_vlan, .sarc_configure = & dwmac4_sarc_configure, .config_l3_filter = & dwmac4_config_l3_filter, .config_l4_filter = & dwmac4_config_l4_filter, .set_arp_offload = & dwmac4_set_arp_offload};
#line 1032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c"
int dwmac4_setup(struct stmmac_priv *priv)
{
  #line 1034 
  struct mac_device_info *mac = priv->hw;
  #line 1036 
  _dev_info(priv->device,(char *)"\tDWMAC4/5\n");
  #line 1038 
  (priv->dev)->priv_flags |= 4096U;
  #line 1039 
  mac->pcsr = priv->ioaddr;
  #line 1040 
  mac->multicast_filter_bins = (unsigned int)(priv->plat)->multicast_filter_bins;
  #line 1041 
  mac->unicast_filter_entries = (unsigned int)(priv->plat)->unicast_filter_entries;
  #line 1042 
  mac->mcast_bits_log2 = 0U;
  #line 1044 
  if (mac->multicast_filter_bins != 0U) 
    #line 1045 
    if (0 != 0) {
      #line 1045 
      unsigned int tmp_1;
      #line 1045 
      unsigned int tmp_33;
      #line 1045 
      unsigned int tmp_34;
      #line 1045 
      unsigned int tmp_2;
      #line 1045 
      unsigned int tmp_3;
      #line 1045 
      unsigned int tmp_35;
      #line 1045 
      unsigned int tmp_36;
      #line 1045 
      unsigned int tmp_4;
      #line 1045 
      unsigned int tmp_5;
      #line 1045 
      unsigned int tmp_37;
      #line 1045 
      unsigned int tmp_38;
      #line 1045 
      unsigned int tmp_6;
      #line 1045 
      unsigned int tmp_7;
      #line 1045 
      unsigned int tmp_39;
      #line 1045 
      unsigned int tmp_40;
      #line 1045 
      unsigned int tmp_8;
      #line 1045 
      unsigned int tmp_9;
      #line 1045 
      unsigned int tmp_41;
      #line 1045 
      unsigned int tmp_42;
      #line 1045 
      unsigned int tmp_10;
      #line 1045 
      unsigned int tmp_11;
      #line 1045 
      unsigned int tmp_43;
      #line 1045 
      unsigned int tmp_44;
      #line 1045 
      unsigned int tmp_12;
      #line 1045 
      unsigned int tmp_13;
      #line 1045 
      unsigned int tmp_45;
      #line 1045 
      unsigned int tmp_46;
      #line 1045 
      unsigned int tmp_14;
      #line 1045 
      unsigned int tmp_15;
      #line 1045 
      unsigned int tmp_47;
      #line 1045 
      unsigned int tmp_48;
      #line 1045 
      unsigned int tmp_16;
      #line 1045 
      unsigned int tmp_17;
      #line 1045 
      unsigned int tmp_49;
      #line 1045 
      unsigned int tmp_50;
      #line 1045 
      unsigned int tmp_18;
      #line 1045 
      unsigned int tmp_19;
      #line 1045 
      unsigned int tmp_51;
      #line 1045 
      unsigned int tmp_52;
      #line 1045 
      unsigned int tmp_20;
      #line 1045 
      unsigned int tmp_21;
      #line 1045 
      unsigned int tmp_53;
      #line 1045 
      unsigned int tmp_54;
      #line 1045 
      unsigned int tmp_22;
      #line 1045 
      unsigned int tmp_23;
      #line 1045 
      unsigned int tmp_55;
      #line 1045 
      unsigned int tmp_56;
      #line 1045 
      unsigned int tmp_24;
      #line 1045 
      unsigned int tmp_25;
      #line 1045 
      unsigned int tmp_57;
      #line 1045 
      unsigned int tmp_58;
      #line 1045 
      unsigned int tmp_26;
      #line 1045 
      unsigned int tmp_27;
      #line 1045 
      unsigned int tmp_59;
      #line 1045 
      unsigned int tmp_60;
      #line 1045 
      unsigned int tmp_28;
      #line 1045 
      unsigned int tmp_29;
      #line 1045 
      unsigned int tmp_30;
      #line 1045 
      unsigned int tmp;
      #line 1045 
      unsigned int tmp_31;
      #line 1045 
      unsigned int tmp_32;
      #line 1045 
      unsigned int tmp_0;
      #line 1045 
      unsigned int tmp_61;
      #line 1045 
      if (mac->multicast_filter_bins > 1U) {
        #line 1045 
        if (((unsigned long long)mac->multicast_filter_bins & 9223372036854775808ULL) == 0ULL) {
          #line 1045 
          if (((unsigned long long)mac->multicast_filter_bins & 4611686018427387904ULL) == 0ULL) {
            #line 1045 
            if (((unsigned long long)mac->multicast_filter_bins & 2305843009213693952ULL) == 0ULL) {
              #line 1045 
              if (((unsigned long long)mac->multicast_filter_bins & 1152921504606846976ULL) == 0ULL) {
                #line 1045 
                if (((unsigned long long)mac->multicast_filter_bins & 576460752303423488ULL) == 0ULL) {
                  #line 1045 
                  if (((unsigned long long)mac->multicast_filter_bins & 288230376151711744ULL) == 0ULL) {
                    #line 1045 
                    if (((unsigned long long)mac->multicast_filter_bins & 144115188075855872ULL) == 0ULL) {
                      #line 1045 
                      if (((unsigned long long)mac->multicast_filter_bins & 72057594037927936ULL) == 0ULL) {
                        #line 1045 
                        if (((unsigned long long)mac->multicast_filter_bins & 36028797018963968ULL) == 0ULL) {
                          #line 1045 
                          if (((unsigned long long)mac->multicast_filter_bins & 18014398509481984ULL) == 0ULL) {
                            #line 1045 
                            if (((unsigned long long)mac->multicast_filter_bins & 9007199254740992ULL) == 0ULL) {
                              #line 1045 
                              if (((unsigned long long)mac->multicast_filter_bins & 4503599627370496ULL) == 0ULL) {
                                #line 1045 
                                if (((unsigned long long)mac->multicast_filter_bins & 2251799813685248ULL) == 0ULL) {
                                  #line 1045 
                                  if (((unsigned long long)mac->multicast_filter_bins & 1125899906842624ULL) == 0ULL) {
                                    #line 1045 
                                    if (((unsigned long long)mac->multicast_filter_bins & 562949953421312ULL) == 0ULL) {
                                      #line 1045 
                                      if (((unsigned long long)mac->multicast_filter_bins & 281474976710656ULL) == 0ULL) {
                                        #line 1045 
                                        if (((unsigned long long)mac->multicast_filter_bins & 140737488355328ULL) == 0ULL) {
                                          #line 1045 
                                          if (((unsigned long long)mac->multicast_filter_bins & 70368744177664ULL) == 0ULL) {
                                            #line 1045 
                                            if (((unsigned long long)mac->multicast_filter_bins & 35184372088832ULL) == 0ULL) {
                                              #line 1045 
                                              if (((unsigned long long)mac->multicast_filter_bins & 17592186044416ULL) == 0ULL) {
                                                #line 1045 
                                                if (((unsigned long long)mac->multicast_filter_bins & 8796093022208ULL) == 0ULL) {
                                                  #line 1045 
                                                  if (((unsigned long long)mac->multicast_filter_bins & 4398046511104ULL) == 0ULL) {
                                                    #line 1045 
                                                    if (((unsigned long long)mac->multicast_filter_bins & 2199023255552ULL) == 0ULL) {
                                                      #line 1045 
                                                      if (((unsigned long long)mac->multicast_filter_bins & 1099511627776ULL) == 0ULL) {
                                                        #line 1045 
                                                        if (((unsigned long long)mac->multicast_filter_bins & 549755813888ULL) == 0ULL) {
                                                          #line 1045 
                                                          if (((unsigned long long)mac->multicast_filter_bins & 274877906944ULL) == 0ULL) {
                                                            #line 1045 
                                                            if (((unsigned long long)mac->multicast_filter_bins & 137438953472ULL) == 0ULL) {
                                                              #line 1045 
                                                              if (((unsigned long long)mac->multicast_filter_bins & 68719476736ULL) == 0ULL) {
                                                                #line 1045 
                                                                if (((unsigned long long)mac->multicast_filter_bins & 34359738368ULL) == 0ULL) {
                                                                  #line 1045 
                                                                  if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 17179869184ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 8589934592ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 4294967296ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 2147483648ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 1073741824ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 536870912ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 268435456ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 134217728ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 67108864ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 33554432ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 16777216ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 8388608ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 4194304ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 2097152ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 1048576ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 524288ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 262144ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 131072ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 65536ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 32768ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 16384ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 8192ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 4096ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 2048ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 1024ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 512ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 256ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 128ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 64ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 32ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 16ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 8ULL) == 0ULL) {
                                                                    #line 1045 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 4ULL) != 0ULL) 
                                                                    #line 1045 
                                                                    tmp = 2U; else 
                                                                    #line 1045 
                                                                    tmp = 1U;
                                                                    #line 1045 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_0 = 3U;
                                                                    #line 1045 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_1 = 4U;
                                                                    #line 1045 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_2 = 5U;
                                                                    #line 1045 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_3 = 6U;
                                                                    #line 1045 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_4 = 7U;
                                                                    #line 1045 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_5 = 8U;
                                                                    #line 1045 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_6 = 9U;
                                                                    #line 1045 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_7 = 10U;
                                                                    #line 1045 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_8 = 11U;
                                                                    #line 1045 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_9 = 12U;
                                                                    #line 1045 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_10 = 13U;
                                                                    #line 1045 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_11 = 14U;
                                                                    #line 1045 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_12 = 15U;
                                                                    #line 1045 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_13 = 16U;
                                                                    #line 1045 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_14 = 17U;
                                                                    #line 1045 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_15 = 18U;
                                                                    #line 1045 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_16 = 19U;
                                                                    #line 1045 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_17 = 20U;
                                                                    #line 1045 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_18 = 21U;
                                                                    #line 1045 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_19 = 22U;
                                                                    #line 1045 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_20 = 23U;
                                                                    #line 1045 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_21 = 24U;
                                                                    #line 1045 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_22 = 25U;
                                                                    #line 1045 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_23 = 26U;
                                                                    #line 1045 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_24 = 27U;
                                                                    #line 1045 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_25 = 28U;
                                                                    #line 1045 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_26 = 29U;
                                                                    #line 1045 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_27 = 30U;
                                                                    #line 1045 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_28 = 31U;
                                                                    #line 1045 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_29 = 32U;
                                                                    #line 1045 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 1045 
                                                                    tmp_30 = 33U;
                                                                    #line 1045 
                                                                    tmp_31 = tmp_30;
                                                                  }
                                                                  else 
                                                                    #line 1045 
                                                                    tmp_31 = 34U;
                                                                  #line 1045 
                                                                  tmp_32 = tmp_31;
                                                                }
                                                                else 
                                                                  #line 1045 
                                                                  tmp_32 = 35U;
                                                                #line 1045 
                                                                tmp_33 = tmp_32;
                                                              }
                                                              else 
                                                                   #line 1045 
                                                                   tmp_33 = 36U;
                                                              #line 1045 
                                                              tmp_34 = tmp_33;
                                                            }
                                                            else 
                                                                 #line 1045 
                                                                 tmp_34 = 37U;
                                                            #line 1045 
                                                            tmp_35 = tmp_34;
                                                          }
                                                          else 
                                                               #line 1045 
                                                               tmp_35 = 38U;
                                                          #line 1045 
                                                          tmp_36 = tmp_35;
                                                        }
                                                        else 
                                                             #line 1045 
                                                             tmp_36 = 39U;
                                                        #line 1045 
                                                        tmp_37 = tmp_36;
                                                      }
                                                      else 
                                                           #line 1045 
                                                           tmp_37 = 40U;
                                                      #line 1045 
                                                      tmp_38 = tmp_37;
                                                    }
                                                    else 
                                                         #line 1045 
                                                         tmp_38 = 41U;
                                                    #line 1045 
                                                    tmp_39 = tmp_38;
                                                  }
                                                  else 
                                                       #line 1045 
                                                       tmp_39 = 42U;
                                                  #line 1045 
                                                  tmp_40 = tmp_39;
                                                }
                                                else 
                                                     #line 1045 
                                                     tmp_40 = 43U;
                                                #line 1045 
                                                tmp_41 = tmp_40;
                                              }
                                              else 
                                                   #line 1045 
                                                   tmp_41 = 44U;
                                              #line 1045 
                                              tmp_42 = tmp_41;
                                            }
                                            else 
                                                 #line 1045 
                                                 tmp_42 = 45U;
                                            #line 1045 
                                            tmp_43 = tmp_42;
                                          }
                                          else 
                                               #line 1045 
                                               tmp_43 = 46U;
                                          #line 1045 
                                          tmp_44 = tmp_43;
                                        }
                                        else 
                                             #line 1045 
                                             tmp_44 = 47U;
                                        #line 1045 
                                        tmp_45 = tmp_44;
                                      }
                                      else 
                                           #line 1045 
                                           tmp_45 = 48U;
                                      #line 1045 
                                      tmp_46 = tmp_45;
                                    }
                                    else 
                                         #line 1045 
                                         tmp_46 = 49U;
                                    #line 1045 
                                    tmp_47 = tmp_46;
                                  }
                                  else 
                                       #line 1045 
                                       tmp_47 = 50U;
                                  #line 1045 
                                  tmp_48 = tmp_47;
                                }
                                else 
                                     #line 1045 
                                     tmp_48 = 51U;
                                #line 1045 
                                tmp_49 = tmp_48;
                              }
                              else 
                                   #line 1045 
                                   tmp_49 = 52U;
                              #line 1045 
                              tmp_50 = tmp_49;
                            }
                            else 
                                 #line 1045 
                                 tmp_50 = 53U;
                            #line 1045 
                            tmp_51 = tmp_50;
                          }
                          else 
                               #line 1045 
                               tmp_51 = 54U;
                          #line 1045 
                          tmp_52 = tmp_51;
                        }
                        else 
                             #line 1045 
                             tmp_52 = 55U;
                        #line 1045 
                        tmp_53 = tmp_52;
                      }
                      else 
                           #line 1045 
                           tmp_53 = 56U;
                      #line 1045 
                      tmp_54 = tmp_53;
                    }
                    else 
                         #line 1045 
                         tmp_54 = 57U;
                    #line 1045 
                    tmp_55 = tmp_54;
                  }
                  else 
                       #line 1045 
                       tmp_55 = 58U;
                  #line 1045 
                  tmp_56 = tmp_55;
                }
                else 
                     #line 1045 
                     tmp_56 = 59U;
                #line 1045 
                tmp_57 = tmp_56;
              }
              else 
                   #line 1045 
                   tmp_57 = 60U;
              #line 1045 
              tmp_58 = tmp_57;
            }
            else 
                 #line 1045 
                 tmp_58 = 61U;
            #line 1045 
            tmp_59 = tmp_58;
          }
          else 
               #line 1045 
               tmp_59 = 62U;
          #line 1045 
          tmp_60 = tmp_59;
        }
        else 
             #line 1045 
             tmp_60 = 63U;
        #line 1045 
        tmp_61 = tmp_60;
      }
      else 
           #line 1045 
           tmp_61 = 0U;
      #line 1045 
      mac->mcast_bits_log2 = tmp_61;
    }
    else {
      #line 1045 
      mac->mcast_bits_log2 = (unsigned int)__ilog2_u32(mac->multicast_filter_bins);
    }
  #line 1047 
  mac->link.duplex = 8192U;
  #line 1048 
  mac->link.speed10 = 32768U;
  #line 1049 
  mac->link.speed100 = 49152U;
  #line 1050 
  mac->link.speed1000 = 0U;
  #line 1051 
  mac->link.speed_mask = 49152U;
  #line 1052 
  mac->mii.addr = 512U;
  #line 1053 
  mac->mii.data = 516U;
  #line 1054 
  mac->mii.addr_shift = 21U;
  #line 1055 
  mac->mii.addr_mask = 65011712U;
  #line 1056 
  mac->mii.reg_shift = 16U;
  #line 1057 
  mac->mii.reg_mask = 2031616U;
  #line 1058 
  mac->mii.clk_csr_shift = 8U;
  #line 1059 
  mac->mii.clk_csr_mask = 3840U;
  #line 1061 
  return 0;
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/dwmac5.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/dwmac5.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 21 
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 22 
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
static void dwmac5_log_error(struct net_device *ndev, u32 value, bool corr, char *module_name, struct dwmac5_error_desc *desc, unsigned long field_offset, struct stmmac_safety_stats *stats)
{
  #line 25 
  unsigned long loc;
  #line 25 
  unsigned long mask;
  #line 27 
  unsigned long *ptr;
  #line 26 
  u8 *bptr = (u8 *)stats;
  #line 29 
  ptr = (unsigned long *)(bptr + field_offset);
  #line 31 
  mask = (unsigned long)value;
  #line 32 
  loc = cif_find_first_bit(& mask,32UL);
  #line 32 
  while (loc <= 31UL) {
    {
      #line 33 
      char *tmp;
      #line 33 
      ;
      #line 33 
      ;
      #line 33 
      ;
      #line 33 
      if ((int)corr != 0) 
                          #line 33 
                          tmp = (char *)"correctable"; else 
                                                            #line 33 
                                                            tmp = (char *)"uncorrectable";
      #line 33 
      ;
      #line 33 
      netdev_err(ndev,(char *)"Found %s error in %s: \'%s: %s\'\n",tmp,module_name,(desc + loc)->desc,(desc + loc)->detailed_desc);
      #line 38 
      (*(ptr + loc)) ++;
    }
    #line 32 
    loc = cif_find_next_bit(& mask,32UL,loc + 1UL);
  }
  #line 40 
  return;
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
static struct dwmac5_error_desc dwmac5_mac_errors[32U] = {{.valid = (_Bool)1, .desc = (char *)"ATPES", .detailed_desc = (char *)"Application Transmit Interface Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"TPES", .detailed_desc = (char *)"TSO Data Path Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"RDPES", .detailed_desc = (char *)"Read Descriptor Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"MPES", .detailed_desc = (char *)"MTL Data Path Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"MTSPES", .detailed_desc = (char *)"MTL TX Status Data Path Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"ARPES", .detailed_desc = (char *)"Application Receive Interface Data Path Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"CWPES", .detailed_desc = (char *)"CSR Write Data Path Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"ASRPES", .detailed_desc = (char *)"AXI Slave Read Data Path Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"TTES", .detailed_desc = (char *)"TX FSM Timeout Error"}, {.valid = (_Bool)1, .desc = (char *)"RTES", .detailed_desc = (char *)"RX FSM Timeout Error"}, {.valid = (_Bool)1, .desc = (char *)"CTES", .detailed_desc = (char *)"CSR FSM Timeout Error"}, {.valid = (_Bool)1, .desc = (char *)"ATES", .detailed_desc = (char *)"APP FSM Timeout Error"}, {.valid = (_Bool)1, .desc = (char *)"PTES", .detailed_desc = (char *)"PTP FSM Timeout Error"}, {.valid = (_Bool)1, .desc = (char *)"T125ES", .detailed_desc = (char *)"TX125 FSM Timeout Error"}, {.valid = (_Bool)1, .desc = (char *)"R125ES", .detailed_desc = (char *)"RX125 FSM Timeout Error"}, {.valid = (_Bool)1, .desc = (char *)"RVCTES", .detailed_desc = (char *)"REV MDC FSM Timeout Error"}, {.valid = (_Bool)1, .desc = (char *)"MSTTES", .detailed_desc = (char *)"Master Read/Write Timeout Error"}, {.valid = (_Bool)1, .desc = (char *)"SLVTES", .detailed_desc = (char *)"Slave Read/Write Timeout Error"}, {.valid = (_Bool)1, .desc = (char *)"ATITES", .detailed_desc = (char *)"Application Timeout on ATI Interface Error"}, {.valid = (_Bool)1, .desc = (char *)"ARITES", .detailed_desc = (char *)"Application Timeout on ARI Interface Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.valid = (_Bool)1, .desc = (char *)"FSMPES", .detailed_desc = (char *)"FSM State Parity Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
static void dwmac5_handle_mac_err(struct net_device *ndev, void *ioaddr, bool correctable, struct stmmac_safety_stats *stats)
{
  #line 81 
  u32 value;
  #line 83 
  value = readl(ioaddr + 320U);
  #line 84 
  writel(value,ioaddr + 320U);
  #line 86 
  dwmac5_log_error(ndev,value,(_Bool)((bool)((int)correctable) != 0),(char *)"MAC",(struct dwmac5_error_desc *)(& dwmac5_mac_errors),0UL,stats);
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
static struct dwmac5_error_desc dwmac5_mtl_errors[32U] = {{.valid = (_Bool)1, .desc = (char *)"TXCES", .detailed_desc = (char *)"MTL TX Memory Error"}, {.valid = (_Bool)1, .desc = (char *)"TXAMS", .detailed_desc = (char *)"MTL TX Memory Address Mismatch Error"}, {.valid = (_Bool)1, .desc = (char *)"TXUES", .detailed_desc = (char *)"MTL TX Memory Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.valid = (_Bool)1, .desc = (char *)"RXCES", .detailed_desc = (char *)"MTL RX Memory Error"}, {.valid = (_Bool)1, .desc = (char *)"RXAMS", .detailed_desc = (char *)"MTL RX Memory Address Mismatch Error"}, {.valid = (_Bool)1, .desc = (char *)"RXUES", .detailed_desc = (char *)"MTL RX Memory Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.valid = (_Bool)1, .desc = (char *)"ECES", .detailed_desc = (char *)"MTL EST Memory Error"}, {.valid = (_Bool)1, .desc = (char *)"EAMS", .detailed_desc = (char *)"MTL EST Memory Address Mismatch Error"}, {.valid = (_Bool)1, .desc = (char *)"EUES", .detailed_desc = (char *)"MTL EST Memory Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.valid = (_Bool)1, .desc = (char *)"RPCES", .detailed_desc = (char *)"MTL RX Parser Memory Error"}, {.valid = (_Bool)1, .desc = (char *)"RPAMS", .detailed_desc = (char *)"MTL RX Parser Memory Address Mismatch Error"}, {.valid = (_Bool)1, .desc = (char *)"RPUES", .detailed_desc = (char *)"MTL RX Parser Memory Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
static void dwmac5_handle_mtl_err(struct net_device *ndev, void *ioaddr, bool correctable, struct stmmac_safety_stats *stats)
{
  #line 129 
  u32 value;
  #line 131 
  value = readl(ioaddr + 3276U);
  #line 132 
  writel(value,ioaddr + 3276U);
  #line 134 
  dwmac5_log_error(ndev,value,(_Bool)((bool)((int)correctable) != 0),(char *)"MTL",(struct dwmac5_error_desc *)(& dwmac5_mtl_errors),256UL,stats);
  #line 135 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
static struct dwmac5_error_desc dwmac5_dma_errors[32U] = {{.valid = (_Bool)1, .desc = (char *)"TCES", .detailed_desc = (char *)"DMA TSO Memory Error"}, {.valid = (_Bool)1, .desc = (char *)"TAMS", .detailed_desc = (char *)"DMA TSO Memory Address Mismatch Error"}, {.valid = (_Bool)1, .desc = (char *)"TUES", .detailed_desc = (char *)"DMA TSO Memory Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
static void dwmac5_handle_dma_err(struct net_device *ndev, void *ioaddr, bool correctable, struct stmmac_safety_stats *stats)
{
  #line 177 
  u32 value;
  #line 179 
  value = readl(ioaddr + 4232U);
  #line 180 
  writel(value,ioaddr + 4232U);
  #line 182 
  dwmac5_log_error(ndev,value,(_Bool)((bool)((int)correctable) != 0),(char *)"DMA",(struct dwmac5_error_desc *)(& dwmac5_dma_errors),512UL,stats);
  #line 183 
  return;
}

#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
int dwmac5_safety_feat_config(void *ioaddr, unsigned int asp)
{
  #line 188 
  u32 value;
  #line 190 
  if (asp == 0U) 
                 #line 191 
                 return -22;
  #line 194 
  value = readl(ioaddr + 3264U);
  #line 195 
  value |= 16U;
  #line 196 
  value |= 8U;
  #line 197 
  value |= 4U;
  #line 198 
  value |= 2U;
  #line 199 
  value |= 1U;
  #line 200 
  writel(value,ioaddr + 3264U);
  #line 203 
  value = readl(ioaddr + 3272U);
  #line 204 
  value |= 4096U;
  #line 205 
  value |= 256U;
  #line 206 
  value |= 16U;
  #line 207 
  value |= 1U;
  #line 208 
  writel(value,ioaddr + 3272U);
  #line 211 
  value = readl(ioaddr + 4228U);
  #line 212 
  value |= 1U;
  #line 213 
  writel(value,ioaddr + 4228U);
  #line 216 
  if (asp <= 1U) 
                 #line 217 
                 return 0;
  #line 220 
  value = readl(ioaddr + 328U);
  #line 221 
  value |= 2U;
  #line 222 
  value |= 1U;
  #line 223 
  writel(value,ioaddr + 328U);
  #line 226 
  value = readl(ioaddr + 3296U);
  #line 227 
  value |= 1U;
  #line 228 
  writel(value,ioaddr + 3296U);
  #line 234 
  if (asp <= 2U) 
                 #line 235 
                 return 0;
  #line 237 
  value |= 4U;
  #line 238 
  writel(value,ioaddr + 3296U);
  #line 239 
  return 0;
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
int dwmac5_safety_feat_irq_status(struct net_device *ndev, void *ioaddr, unsigned int asp, struct stmmac_safety_stats *stats)
{
  #line 246 
  bool err;
  #line 246 
  bool corr;
  #line 247 
  u32 mtl;
  #line 247 
  u32 dma;
  #line 248 
  int ret = 0;
  #line 250 
  if (asp == 0U) 
                 #line 251 
                 return -22;
  #line 253 
  mtl = readl(ioaddr + 3268U);
  #line 254 
  dma = readl(ioaddr + 4224U);
  #line 256 
  err = (_Bool)((((unsigned long)mtl & 2147483648UL) != 0UL || ((unsigned long)dma & 2147483648UL) != 0UL) != 0);
  #line 257 
  corr = (_Bool)0;
  #line 258 
  if ((int)err != 0) {
    #line 259 
    dwmac5_handle_mac_err(ndev,ioaddr,(_Bool)((bool)((int)corr) != 0),stats);
    #line 260 
    ret = ! corr | ret;
  }
  #line 263 
  err = (_Bool)((((unsigned long)mtl & 3UL) != 0UL || ((unsigned long)dma & 805306368UL) != 0UL) != 0);
  #line 264 
  corr = (_Bool)((((unsigned long)mtl & 1UL) != 0UL || ((unsigned long)dma & 268435456UL) != 0UL) != 0);
  #line 265 
  if ((int)err != 0) {
    #line 266 
    dwmac5_handle_mtl_err(ndev,ioaddr,(_Bool)((bool)((int)corr) != 0),stats);
    #line 267 
    ret = ! corr | ret;
  }
  #line 270 
  err = (_Bool)(((unsigned long)dma & 3UL) != 0UL);
  #line 271 
  corr = (_Bool)(((unsigned long)dma & 1UL) != 0UL);
  #line 272 
  if ((int)err != 0) {
    #line 273 
    dwmac5_handle_dma_err(ndev,ioaddr,(_Bool)((bool)((int)corr) != 0),stats);
    #line 274 
    ret = ! corr | ret;
  }
  #line 277 
  return ret;
}

#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
static struct dwmac5_error dwmac5_all_errors[3U] = {{.desc = (struct dwmac5_error_desc *)(& dwmac5_mac_errors)}, {.desc = (struct dwmac5_error_desc *)(& dwmac5_mtl_errors)}, {.desc = (struct dwmac5_error_desc *)(& dwmac5_dma_errors)}};
#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
int dwmac5_safety_feat_dump(struct stmmac_safety_stats *stats, int index, unsigned long *count, char **desc)
{
  #line 291 
  int module = index / 32;
  #line 291 
  int offset = index % 32;
  #line 292 
  unsigned long *ptr = (unsigned long *)stats;
  #line 294 
  if ((unsigned int)module > 2U) 
                                 #line 295 
                                 return -22;
  #line 296 
  if (! (dwmac5_all_errors[module].desc + (unsigned long)offset)->valid) 
    #line 297 
    return -22;
  #line 298 
  if (count != (unsigned long *)0UL) 
                                     #line 299 
                                     *count = *(ptr + (unsigned long)index);
  #line 300 
  if (desc != (char **)0) 
                          #line 301 
                          *desc = (dwmac5_all_errors[module].desc + (unsigned long)offset)->desc;
  #line 302 
  return 0;
}

#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
static int dwmac5_rxp_disable(void *ioaddr)
{
  #line 314 
  int tmp_3;
  #line 307 
  u32 val;
  #line 308 
  int ret;
  #line 310 
  val = readl(ioaddr + 3072U);
  #line 311 
  val &= 4294934527U;
  #line 312 
  writel(val,ioaddr + 3072U);
  {
    #line 314 
    u64 __timeout_us = 10000ULL;
    #line 314 
    unsigned long __sleep_us = 1UL;
    #line 314 
    ;
    #line 314 
    ktime_t __timeout = ktime_add_us(ktime_get(),__timeout_us);
    #line 314 
    if (__sleep_us != 0UL) 
                           #line 314 
                           __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c",314,0);
    #line 314 
    while (1) {
      #line 314 
      val = readl(ioaddr + 3232U);
      #line 314 
      if (((unsigned long)val & 2147483648UL) != 0UL) 
                                                      #line 314 
                                                      break;
      #line 314 
      if (__timeout_us != 0ULL) {
        #line 314 
        ;
        #line 314 
        if (ktime_compare(ktime_get(),__timeout) > 0) {
          #line 314 
          val = readl(ioaddr + 3232U);
          #line 314 
          break;
        }
      }
      #line 314 
      if (__sleep_us != 0UL) 
                             #line 314 
                             usleep_range((__sleep_us >> 2) + 1UL,__sleep_us);
    }
    #line 314 
    if (((unsigned long)val & 2147483648UL) != 0UL) 
                                                    #line 314 
                                                    tmp_3 = 0; else 
                                                                    #line 314 
                                                                    tmp_3 = -110;
    }
  #line 314 
  ret = tmp_3;
  #line 316 
  if (ret != 0) 
                #line 317 
                return ret;
  #line 318 
  return 0;
}

#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
static void dwmac5_rxp_enable(void *ioaddr)
{
  #line 323 
  u32 val;
  #line 325 
  val = readl(ioaddr + 3072U);
  #line 326 
  val |= 32768U;
  #line 327 
  writel(val,ioaddr + 3072U);
  #line 328 
  return;
}

#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
static int dwmac5_rxp_update_single_entry(void *ioaddr, struct stmmac_tc_entry *entry, int pos)
{
  #line 334 
  int ret;
  #line 334 
  int i;
  #line 336 
  i = 0;
  #line 336 
  while ((unsigned int)i <= 3U) {
    {
      #line 341 
      int tmp_3;
      #line 363 
      int tmp_9;
      #line 338 
      u32 val;
      #line 337 
      int real_pos = (int)((unsigned long)pos * (unsigned long)4U + (unsigned long)i);
      {
        #line 341 
        u64 __timeout_us = 10000ULL;
        #line 341 
        unsigned long __sleep_us = 1UL;
        #line 341 
        ;
        #line 341 
        ktime_t __timeout = ktime_add_us(ktime_get(),__timeout_us);
        #line 341 
        if (__sleep_us != 0UL) 
                               #line 341 
                               __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c",341,0);
        #line 341 
        while (1) {
          #line 341 
          val = readl(ioaddr + 3248U);
          #line 341 
          if (((unsigned long)val & 2147483648UL) == 0UL) 
                                                          #line 341 
                                                          break;
          #line 341 
          if (__timeout_us != 0ULL) {
            #line 341 
            ;
            #line 341 
            if (ktime_compare(ktime_get(),__timeout) > 0) {
              #line 341 
              val = readl(ioaddr + 3248U);
              #line 341 
              break;
            }
          }
          #line 341 
          if (__sleep_us != 0UL) 
                                 #line 341 
                                 usleep_range((__sleep_us >> 2) + 1UL,__sleep_us);
        }
        #line 341 
        if (((unsigned long)val & 2147483648UL) == 0UL) 
                                                        #line 341 
                                                        tmp_3 = 0; else 
                                                                    #line 341 
                                                                    tmp_3 = -110;
        }
      #line 341 
      ret = tmp_3;
      #line 343 
      if (ret != 0) 
                    #line 344 
                    return ret;
      #line 347 
      val = *((u32 *)(& entry->val) + (unsigned long)i);
      #line 348 
      writel(val,ioaddr + 3252U);
      #line 351 
      val = (unsigned int)real_pos & 65535U;
      #line 352 
      writel(val,ioaddr + 3248U);
      #line 355 
      val |= 65536U;
      #line 356 
      writel(val,ioaddr + 3248U);
      #line 359 
      val |= 2147483648U;
      #line 360 
      writel(val,ioaddr + 3248U);
      {
        #line 363 
        u64 __timeout_us_0 = 10000ULL;
        #line 363 
        unsigned long __sleep_us_0 = 1UL;
        #line 363 
        ;
        #line 363 
        ktime_t __timeout_0 = ktime_add_us(ktime_get(),__timeout_us_0);
        #line 363 
        if (__sleep_us_0 != 0UL) 
                                 #line 363 
                                 __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c",363,0);
        #line 363 
        while (1) {
          #line 363 
          val = readl(ioaddr + 3248U);
          #line 363 
          if (((unsigned long)val & 2147483648UL) == 0UL) 
                                                          #line 363 
                                                          break;
          #line 363 
          if (__timeout_us_0 != 0ULL) {
            #line 363 
            ;
            #line 363 
            if (ktime_compare(ktime_get(),__timeout_0) > 0) {
              #line 363 
              val = readl(ioaddr + 3248U);
              #line 363 
              break;
            }
          }
          #line 363 
          if (__sleep_us_0 != 0UL) 
                                   #line 363 
                                   usleep_range((__sleep_us_0 >> 2) + 1UL,__sleep_us_0);
        }
        #line 363 
        if (((unsigned long)val & 2147483648UL) == 0UL) 
                                                        #line 363 
                                                        tmp_9 = 0; else 
                                                                    #line 363 
                                                                    tmp_9 = -110;
        }
      #line 363 
      ret = tmp_9;
      #line 365 
      if (ret != 0) 
                    #line 366 
                    return ret;
    }
    #line 336 
    i ++;
  }
  #line 369 
  return 0;
}

#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
static struct stmmac_tc_entry *dwmac5_rxp_get_next_entry(struct stmmac_tc_entry *entries, unsigned int count, u32 curr_prio)
{
  #line 376 
  struct stmmac_tc_entry *entry;
  #line 378 
  int i;
  #line 378 
  int min_prio_idx;
  #line 377 
  u32 min_prio = 4294967295U;
  #line 379 
  bool found = (_Bool)0;
  #line 381 
  i = (int)(count + 4294967295U);
  #line 381 
  while (i >= 0) {
    #line 382 
    entry = entries + (unsigned long)i;
    #line 385 
    if (! entry->in_use) 
                         #line 386 
                         goto __Cont;
    #line 388 
    if ((int)entry->in_hw != 0) 
                                #line 389 
                                goto __Cont;
    #line 391 
    if ((int)entry->is_last != 0) 
                                  #line 392 
                                  goto __Cont;
    #line 394 
    if ((int)entry->is_frag != 0) 
                                  #line 395 
                                  goto __Cont;
    #line 397 
    if (entry->prio < curr_prio) 
                                 #line 398 
                                 goto __Cont;
    #line 400 
    if (entry->prio < min_prio) {
      #line 401 
      min_prio = entry->prio;
      #line 402 
      min_prio_idx = i;
      #line 403 
      found = (_Bool)1;
    }
    #line 381 
    __Cont: 
            #line 381 
    i --;
  }
  #line 407 
  if ((int)found != 0) 
                       #line 408 
                       return entries + (unsigned long)min_prio_idx;
  #line 409 
  return (struct stmmac_tc_entry *)0;
}

#line 412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
int dwmac5_rxp_config(void *ioaddr, struct stmmac_tc_entry *entries, unsigned int count)
{
  #line 415 
  struct stmmac_tc_entry *entry;
  #line 415 
  struct stmmac_tc_entry *frag;
  #line 416 
  int i;
  #line 416 
  int ret;
  #line 418 
  u32 old_val;
  #line 418 
  u32 val;
  #line 416 
  int nve = 0;
  #line 417 
  u32 curr_prio = 0U;
  #line 421 
  old_val = readl(ioaddr);
  #line 422 
  val = old_val & 4294967294U;
  #line 423 
  writel(val,ioaddr);
  #line 426 
  ret = dwmac5_rxp_disable(ioaddr);
  #line 427 
  if (ret != 0) 
                #line 428 
                goto re_enable;
  #line 431 
  i = 0;
  #line 431 
  while ((unsigned int)i < count) {
    #line 432 
    entry = entries + (unsigned long)i;
    #line 433 
    entry->in_hw = (_Bool)0;
    #line 431 
    i ++;
  }
  #line 437 
  while (1) {
    {
      #line 457 
      int tmp;
      #line 438 
      entry = dwmac5_rxp_get_next_entry(entries,count,curr_prio);
      #line 439 
      if (entry == (struct stmmac_tc_entry *)0) 
                                                #line 440 
                                                break;
      #line 442 
      curr_prio = entry->prio;
      #line 443 
      frag = (struct stmmac_tc_entry *)entry->frag_ptr;
      #line 446 
      if (frag != (struct stmmac_tc_entry *)0) {
        #line 447 
        entry->val.af = (unsigned char)0U;
        #line 448 
        entry->val.rf = (unsigned char)0U;
        #line 449 
        entry->val.nc = (unsigned char)1U;
        #line 450 
        entry->val.ok_index = (unsigned char)((unsigned int)((unsigned char)nve) + 2U);
      }
      #line 453 
      ret = dwmac5_rxp_update_single_entry(ioaddr,entry,nve);
      #line 454 
      if (ret != 0) 
                    #line 455 
                    goto re_enable;
      #line 457 
      tmp = nve;
      #line 457 
      nve ++;
      #line 457 
      entry->table_pos = (unsigned int)tmp;
      #line 458 
      entry->in_hw = (_Bool)1;
      #line 460 
      if (frag != (struct stmmac_tc_entry *)0 && ! frag->in_hw) {
        #line 464 
        int tmp_0;
        #line 461 
        ret = dwmac5_rxp_update_single_entry(ioaddr,frag,nve);
        #line 462 
        if (ret != 0) 
                      #line 463 
                      goto re_enable;
        #line 464 
        tmp_0 = nve;
        #line 464 
        nve ++;
        #line 464 
        frag->table_pos = (unsigned int)tmp_0;
        #line 465 
        frag->in_hw = (_Bool)1;
      }
    }
  }
  #line 469 
  if (nve == 0) 
                #line 470 
                goto re_enable;
  #line 473 
  i = 0;
  #line 473 
  while ((unsigned int)i < count) {
    {
      #line 482 
      int tmp_1;
      #line 474 
      entry = entries + (unsigned long)i;
      #line 475 
      if (! entry->is_last) 
                            #line 476 
                            goto __Cont;
      #line 478 
      ret = dwmac5_rxp_update_single_entry(ioaddr,entry,nve);
      #line 479 
      if (ret != 0) 
                    #line 480 
                    goto re_enable;
      #line 482 
      tmp_1 = nve;
      #line 482 
      nve ++;
      #line 482 
      entry->table_pos = (unsigned int)tmp_1;
    }
    #line 473 
    __Cont: 
            #line 473 
    i ++;
  }
  #line 486 
  val = (unsigned int)(nve << 16) & 16711680U;
  #line 487 
  val = ((unsigned int)nve & 255U) | val;
  #line 488 
  writel(val,ioaddr + 3232U);
  #line 491 
  dwmac5_rxp_enable(ioaddr);
  #line 493 
  re_enable: 
             #line 493 
  ;
  #line 495 
  writel(old_val,ioaddr);
  #line 496 
  return ret;
}

#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwmac5.c"
int dwmac5_flex_pps_config(void *ioaddr, int index, struct stmmac_pps_cfg *cfg, bool enable, u32 sub_second_inc, u32 systime_flags)
{
  #line 505 
  u64 period;
  #line 503 
  u32 tnsec = readl(ioaddr + (unsigned long)(index * 16 + 2948));
  #line 504 
  u32 val = readl(ioaddr + 2928U);
  #line 507 
  if (! cfg->available) 
                        #line 508 
                        return -22;
  #line 509 
  if (((unsigned long)tnsec & 2147483648UL) != 0UL) 
                                                    #line 510 
                                                    return -16;
  #line 511 
  if (sub_second_inc == 0U || systime_flags == 0U) 
                                                   #line 512 
                                                   return -22;
  #line 514 
  val = ~ (- ((unsigned int)(1UL << index * 8)) & (unsigned int)(18446744073709551615UL >> (7 - index) * 8)) & val;
  #line 516 
  if (! enable) {
    #line 517 
    val = ((- ((unsigned int)(1UL << index * 8)) & (unsigned int)(18446744073709551615UL >> (60 - index * 8))) & (unsigned int)(5 << index * 8)) | val;
    #line 518 
    val |= 16U;
    #line 519 
    writel(val,ioaddr + 2928U);
    #line 520 
    return 0;
  }
  #line 523 
  val = ((- ((unsigned int)(1UL << index * 8)) & (unsigned int)(18446744073709551615UL >> (60 - index * 8))) & (unsigned int)(2 << index * 8)) | val;
  #line 524 
  val = ((- ((unsigned int)(1UL << ((index + 1) * 8 + -3))) & (unsigned int)(18446744073709551615UL >> (65 - (index + 1) * 8))) & (unsigned int)(2 << ((index + 1) * 8 + -3))) | val;
  #line 525 
  val |= 16U;
  #line 527 
  writel((unsigned int)cfg->start.tv_sec,ioaddr + (unsigned long)((index + 184) * 16));
  #line 529 
  if (((unsigned long)systime_flags & 512UL) == 0UL) 
                                                     #line 530 
                                                     cfg->start.tv_nsec = (cfg->start.tv_nsec * 1000L) / 465L;
  #line 531 
  writel((unsigned int)cfg->start.tv_nsec,ioaddr + (unsigned long)(index * 16 + 2948));
  #line 533 
  period = (unsigned long long)(cfg->period.tv_sec * 1000000000LL);
  #line 534 
  period = (unsigned long long)cfg->period.tv_nsec + period;
  {
    #line 536 
    uint32_t __rem;
    #line 536 
    uint32_t __base = sub_second_inc;
    #line 536 
    __rem = (unsigned int)(period % (unsigned long long)__base);
    #line 536 
    period /= (unsigned long long)__base;
    #line 536 
    uint32_t tmp_2 = __rem;
  }
  #line 538 
  if (period <= 1ULL) 
                      #line 539 
                      return -22;
  #line 541 
  writel((unsigned int)period + 4294967295U,ioaddr + (unsigned long)(index * 16 + 2952));
  #line 543 
  period >>= 1;
  #line 544 
  if (period <= 1ULL) 
                      #line 545 
                      return -22;
  #line 547 
  writel((unsigned int)period + 4294967295U,ioaddr + (unsigned long)(index * 16 + 2956));
  #line 550 
  writel(val,ioaddr + 2928U);
  #line 551 
  return 0;
}

#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/dwmac5.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 112 
  return ldv_find_next_bit(addr,size,offset);
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/dwmac5.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 154 
  return ldv_find_first_bit(addr,size);
}

/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static unsigned long cif_find_next_bit_0(unsigned long *addr, unsigned long size, unsigned long offset);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 258  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static unsigned long cif_find_first_bit_0(unsigned long *addr, unsigned long size);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 230  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static int get_bitmask_order(unsigned int count)
{
  #line 64 
  int order;
  #line 66 
  order = fls(count);
  #line 67 
  return order;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 70 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device *, char * , ...);
#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 487 
void print_hex_dump(char *, char *, int, int, int, void *, size_t, bool);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 237  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 59 
void *__memmove(void *, void *, size_t);
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 136 
int __bitmap_and(unsigned long *, unsigned long *, unsigned long *, unsigned int);
#line 142 
#line 142 
int __bitmap_andnot(unsigned long *, unsigned long *, unsigned long *, unsigned int);
#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static int bitmap_and(unsigned long *dst, unsigned long *src1, unsigned long *src2, unsigned int nbits)
{
  #line 276 
  if (0 != 0 && nbits + 4294967295U <= 63U) {
    #line 277 
    *dst = ((*src1 & *src2) & (18446744073709551615UL >> (- nbits & 63U)));
    #line 277 
    return ((*src1 & *src2) & (18446744073709551615UL >> (- nbits & 63U))) != 0UL;
  }
  #line 278 
  return __bitmap_and(dst,src1,src2,nbits);
}

#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static int bitmap_andnot(unsigned long *dst, unsigned long *src1, unsigned long *src2, unsigned int nbits)
{
  #line 302 
  if (0 != 0 && nbits + 4294967295U <= 63U) {
    #line 303 
    *dst = ((*src1 & ~ *src2) & (18446744073709551615UL >> (- nbits & 63U)));
    #line 303 
    return ((*src1 & ~ *src2) & (18446744073709551615UL >> (- nbits & 63U))) != 0UL;
  }
  #line 304 
  return __bitmap_andnot(dst,src1,src2,nbits);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 314  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static long PTR_ERR_0(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 321  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static bool IS_ERR_1(void *ptr);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 328  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static bool IS_ERR_OR_NULL(void *ptr);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void cif_spin_lock_bh__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 698  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void cif_spin_unlock_bh__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 26 
#line 1122 
static void cif_mutex_lock_lock_of_stmmac_priv_0(struct mutex *lock);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 24 
bool ldv_is_err_or_null(void *ptr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 86 
void mutex_destroy(struct mutex *);
#line 128 
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 185 
#line 1129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void cif_mutex_unlock_lock_of_stmmac_priv_0(struct mutex *lock);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 292 
#line 292 
unsigned int jiffies_to_usecs(unsigned long);
#line 375 
#line 375 
unsigned long __usecs_to_jiffies(unsigned int);
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _usecs_to_jiffies(unsigned int u)
{
  #line 379 
  return (unsigned long)(((long)u + 3999L) / 4000L);
}

#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long usecs_to_jiffies(unsigned int u)
{
  #line 413 
  if (0 != 0) {
    #line 414 
    ;
    #line 414 
    if (jiffies_to_usecs(4611686018427387902UL) < u) 
                                                     #line 415 
                                                     return 4611686018427387902UL;
    #line 416 
    return _usecs_to_jiffies(u);
  }
  else {
    #line 418 
    return __usecs_to_jiffies(u);
  }
}

#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static ktime_t ns_to_ktime(u64 ns)
{
  #line 267 
  return (long long)ns;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 43 
void ktime_get_real_ts64(struct timespec64 *);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 1114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 1106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 407 
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 496 
#line 407  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work);
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
#line 232 
int clk_prepare(struct clk *);
#line 260 
#line 260 
void clk_unprepare(struct clk *);
#line 491 
#line 491 
int clk_enable(struct clk *);
#line 519 
#line 519 
void clk_disable(struct clk *);
#line 903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
__inline static int clk_prepare_enable(struct clk *clk)
{
  #line 905 
  int ret;
  #line 907 
  ret = clk_prepare(clk);
  #line 908 
  if (ret != 0) 
                #line 909 
                return ret;
  #line 910 
  ret = clk_enable(clk);
  #line 911 
  if (ret != 0) 
                #line 912 
                clk_unprepare(clk);
  #line 914 
  return ret;
}

#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
__inline static void clk_disable_unprepare(struct clk *clk)
{
  #line 920 
  clk_disable(clk);
  #line 921 
  clk_unprepare(clk);
  #line 922 
  return;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 237 
void disable_irq(unsigned int);
#line 239 
#line 239 
void enable_irq(unsigned int);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 121 
unsigned long _copy_from_user(void *, void *, unsigned long);
#line 137 
#line 137 
unsigned long _copy_to_user(void *, void *, unsigned long);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void *from, unsigned long n)
{
  #line 143 
  if ((long)((int)check_copy_size(to,n,(_Bool)0) != 0) != 0L) 
                                                              #line 144 
                                                              n = _copy_from_user(to,from,n);
  #line 145 
  return n;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void *from, unsigned long n)
{
  #line 151 
  if ((long)((int)check_copy_size(from,n,(_Bool)1) != 0) != 0L) 
                                                                #line 152 
                                                                n = _copy_to_user(to,from,n);
  #line 153 
  return n;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 510  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
__inline static bool device_may_wakeup(struct device *dev)
{
  #line 84 
  return (_Bool)(((unsigned int)dev->power.can_wakeup != 0U && dev->power.wakeup != (struct wakeup_source *)0) != 0);
}

#line 106 
#line 106 
void device_set_wakeup_capable(struct device *, bool);
#line 114 
#line 114 
void pm_wakeup_dev_event(struct device *, unsigned int, bool);
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
__inline static void pm_wakeup_event(struct device *dev, unsigned int msec)
{
  #line 202 
  pm_wakeup_dev_event(dev,msec,(_Bool)0);
  #line 203 
  return;
}

#line 1383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static int dev_to_node(struct device *dev)
{
  #line 1385 
  return dev->numa_node;
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  #line 671 
  int rc = dma_set_mask(dev,mask);
  #line 672 
  if (rc == 0) 
               #line 673 
               dma_set_coherent_mask(dev,mask);
  #line 674 
  return rc;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 1405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
{
  #line 1407 
  return & ((struct skb_shared_info *)skb_end_pointer(skb))->hwtstamps;
}

#line 2142 
#line 2142 
void skb_add_rx_frag(struct sk_buff *, int, struct page *, int, int, unsigned int);
#line 2253 
#line 2253 
void *skb_pull(struct sk_buff *, unsigned int);
#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2820 
#line 2820 
struct sk_buff *__napi_alloc_skb(struct napi_struct *, unsigned int, gfp_t);
#line 2822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *napi_alloc_skb(struct napi_struct *napi, unsigned int length)
{
  #line 2825 
  return __napi_alloc_skb(napi,length,2592U);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_to_linear_data(struct sk_buff *skb, void *from, unsigned int len)
{
  #line 3619 
  memcpy((void *)skb->data,from,(unsigned long)len);
  #line 3620 
  return;
}

#line 3767 
#line 3767 
void skb_clone_tx_timestamp(struct sk_buff *);
#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  #line 3830 
  skb_clone_tx_timestamp(skb);
  #line 3831 
  ;
  #line 3831 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 2) != 0) 
    #line 3832 
    skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0);
  #line 3833 
  return;
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_18071 __u;
  #line 93 
  union __anonunion___u_18073 __u_0;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 99 
#line 99 
void dql_reset(struct dql *);
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
__inline static u32 ethtool_rxfh_indir_default(u32 index, u32 n_rx_rings)
{
  #line 98 
  return index % n_rx_rings;
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
#line 110 
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
#line 111 
#line 111 
loff_t seq_lseek(struct file *, loff_t, int);
#line 118 
#line 118 
void seq_printf(struct seq_file *, char * , ...);
#line 142 
#line 142 
int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
#line 144 
#line 144 
int single_release(struct inode *, struct file *);
#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 424 
void __napi_schedule_irqoff(struct napi_struct *);
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule_irqoff(struct napi_struct *n)
{
  #line 454 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 455 
                                       __napi_schedule_irqoff(n);
  #line 456 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2156 
#line 2156 
u16 netdev_pick_tx(struct net_device *, struct sk_buff *, struct net_device *);
#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_napi_add(struct net_device *dev, struct napi_struct *napi, int (*poll)(struct napi_struct *, int ), int weight)
{
  #line 2253 
  cif_set_bit(5L,& napi->state);
  #line 2254 
  netif_napi_add(dev,napi,poll,weight);
  #line 2255 
  return;
}

#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 2519 
#line 2519 
int register_netdevice_notifier(struct notifier_block *);
#line 2520 
#line 2520 
int unregister_netdevice_notifier(struct notifier_block *);
#line 2568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct net_device *netdev_notifier_info_to_dev(struct netdev_notifier_info *info)
{
  #line 2570 
  return info->dev;
}

#line 2657 
#line 2657 
int dev_open(struct net_device *, struct netlink_ext_ack *);
#line 2658 
#line 2658 
void dev_close(struct net_device *);
#line 3094 
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3242 
                                                      return;
  #line 3244 
  cif_set_bit(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3255 
                                                      cif_clear_bit(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_set_bit(1L,& dev_queue->state) != 0) 
                                                         #line 3321 
                                                         netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  #line 3344 
  cif_clear_bit(1L,& q->state);
  #line 3345 
  dql_reset(& q->dql);
  #line 3346 
  return;
}

#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_consume_skb_any(struct sk_buff *skb)
{
  #line 3655 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_CONSUMED);
  #line 3656 
  return;
}

#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 3923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  #line 3926 
  if ((unsigned int)debug_value > 31U) 
                                       #line 3927 
                                       return (unsigned int)default_msg_enable_bits;
  #line 3928 
  if (debug_value == 0) 
                        #line 3929 
                        return 0U;
  #line 3931 
  return (1U << debug_value) + 4294967295U;
}

#line 3951  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock_bh(struct netdev_queue *txq)
{
  #line 3954 
  int pscr_ret__;
  #line 3953 
  cif_spin_lock_bh__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3954 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 3954 
    void *__vpp_verify = (void *)0;
    #line 3954 
    void *tmp = __vpp_verify;
  }
  #line 3954 
  switch (4UL) {
    #line 3954 
    int pfo_ret__;
    #line 3954 
    int pfo_ret___0;
    #line 3954 
    int pfo_ret___1;
    #line 3954 
    int pfo_ret___2;
    #line 3954 
    case (unsigned long)1: 
                           #line 3954 
    ;
    #line 3954 
    switch (4UL) {
      #line 3954 
      case (unsigned long)1: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)2: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)4: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)8: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      default: 
               #line 3954 
      ;
      #line 3954 
      __bad_percpu_size();
    }
    #line 3954 
    pscr_ret__ = pfo_ret__;
    #line 3954 
    break;
    #line 3954 
    case (unsigned long)2: 
                           #line 3954 
    ;
    #line 3954 
    switch (4UL) {
      #line 3954 
      case (unsigned long)1: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)2: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)4: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)8: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      default: 
               #line 3954 
      ;
      #line 3954 
      __bad_percpu_size();
    }
    #line 3954 
    pscr_ret__ = pfo_ret___0;
    #line 3954 
    break;
    #line 3954 
    case (unsigned long)4: 
                           #line 3954 
    ;
    #line 3954 
    switch (4UL) {
      #line 3954 
      case (unsigned long)1: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)2: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)4: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)8: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      default: 
               #line 3954 
      ;
      #line 3954 
      __bad_percpu_size();
    }
    #line 3954 
    pscr_ret__ = pfo_ret___1;
    #line 3954 
    break;
    #line 3954 
    case (unsigned long)8: 
                           #line 3954 
    ;
    #line 3954 
    switch (4UL) {
      #line 3954 
      case (unsigned long)1: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)2: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)4: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)8: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      default: 
               #line 3954 
      ;
      #line 3954 
      __bad_percpu_size();
    }
    #line 3954 
    pscr_ret__ = pfo_ret___2;
    #line 3954 
    break;
    #line 3954 
    default: 
             #line 3954 
    ;
    #line 3954 
    __bad_size_call_parameter();
    #line 3954 
    break;
  }
  #line 3954 
  txq->xmit_lock_owner = pscr_ret__;
  #line 3957 
  return;
}

#line 3971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock_bh(struct netdev_queue *txq)
{
  #line 3973 
  txq->xmit_lock_owner = -1;
  #line 3974 
  cif_spin_unlock_bh__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3975 
  return;
}

#line 3984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_trans_update(struct net_device *dev)
{
  #line 3986 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,0U);
  #line 3988 
  if (txq->trans_start != jiffies) 
                                   #line 3989 
                                   txq->trans_start = jiffies;
  #line 3990 
  return;
}

#line 4131 
#line 1168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4371 
void netdev_rss_key_fill(void *, size_t);
#line 4523 
#line 4523 
void netdev_update_features(struct net_device *);
#line 4746 
#line 4746 
void netdev_alert(struct net_device *, char * , ...);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 45 
#line 45 
int eth_mac_addr(struct net_device *, void *);
#line 54 
#line 54 
struct net_device *devm_alloc_etherdev_mqs(struct device *, int, unsigned int, unsigned int);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  #line 225 
  get_random_bytes((void *)addr,6);
  #line 226 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  #line 227 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  #line 228 
  return;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_hw_addr_random(struct net_device *dev)
{
  #line 265 
  dev->addr_assign_type = (unsigned char)1U;
  #line 266 
  eth_random_addr(dev->dev_addr);
  #line 267 
  return;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
#line 340 
int flow_block_cb_setup_simple(struct flow_block_offload *, struct list_head *, flow_setup_cb_t *, void *, void *, bool);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int __tcp_hdrlen(struct tcphdr *th)
{
  #line 31 
  return (unsigned int)((int)th->doff * 4);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff *skb)
{
  #line 36 
  return __tcp_hdrlen(tcp_hdr(skb));
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pinctrl/consumer.h"
#line 45 
int pinctrl_pm_select_default_state(struct device *);
#line 46 
#line 46 
int pinctrl_pm_select_sleep_state(struct device *);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 1160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 1152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 85 
void debugfs_remove_recursive(struct dentry *);
#line 97 
#line 97 
struct dentry *debugfs_rename(struct dentry *, struct dentry *, struct dentry *, char *);
#line 1203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
#line 1203 
int phy_init_eee(struct phy_device *, bool);
#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phylink.h"
#line 236 
struct phylink *phylink_create(struct phylink_config *, struct fwnode_handle *, phy_interface_t, struct phylink_mac_ops *);
#line 239 
#line 239 
void phylink_destroy(struct phylink *);
#line 241 
#line 241 
int phylink_connect_phy(struct phylink *, struct phy_device *);
#line 242 
#line 242 
int phylink_of_phy_connect(struct phylink *, struct device_node *, u32);
#line 243 
#line 243 
void phylink_disconnect_phy(struct phylink *);
#line 248 
#line 248 
void phylink_mac_change(struct phylink *, bool);
#line 250 
#line 250 
void phylink_start(struct phylink *);
#line 251 
#line 251 
void phylink_stop(struct phylink *);
#line 269 
#line 269 
int phylink_mii_ioctl(struct phylink *, struct ifreq *, int);
#line 280 
#line 280 
void phylink_set_port_modes(unsigned long *);
#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
__inline static bool tc_can_offload_extack(struct net_device *dev, struct netlink_ext_ack *extack)
{
  #line 573 
  bool can = tc_can_offload(dev);
  #line 575 
  if (! can) {
    #line 576 
    char __msg[37U] = {(char)'T', (char)'C', (char)' ', (char)'o', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)' ', (char)'i', (char)'s', (char)' ', (char)'d', (char)'i', (char)'s', (char)'a', (char)'b', (char)'l', (char)'e', (char)'d', (char)' ', (char)'o', (char)'n', (char)' ', (char)'n', (char)'e', (char)'t', (char)' ', (char)'d', (char)'e', (char)'v', (char)'i', (char)'c', (char)'e', (char)'\000'};
    #line 576 
    struct netlink_ext_ack *__extack = extack;
    #line 576 
    if (__extack != (struct netlink_ext_ack *)0) 
                                                 #line 576 
                                                 __extack->_msg = (char *)(& __msg);
  }
  #line 578 
  return can;
}

#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
__inline static bool tc_cls_can_offload_and_chain0(struct net_device *dev, struct flow_cls_common_offload *common)
{
  #line 585 
  if (! tc_can_offload_extack(dev,common->extack)) 
                                                   #line 586 
                                                   return (_Bool)0;
  #line 587 
  if (common->chain_index != 0U) {
    {
      #line 588 
      char __msg[40U] = {(char)'D', (char)'r', (char)'i', (char)'v', (char)'e', (char)'r', (char)' ', (char)'s', (char)'u', (char)'p', (char)'p', (char)'o', (char)'r', (char)'t', (char)'s', (char)' ', (char)'o', (char)'n', (char)'l', (char)'y', (char)' ', (char)'o', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)' ', (char)'o', (char)'f', (char)' ', (char)'c', (char)'h', (char)'a', (char)'i', (char)'n', (char)' ', (char)'0', (char)'\000'};
      #line 588 
      struct netlink_ext_ack *__extack = common->extack;
      #line 588 
      if (__extack != (struct netlink_ext_ack *)0) 
                                                   #line 588 
                                                   __extack->_msg = (char *)(& __msg);
    }
    #line 590 
    return (_Bool)0;
  }
  #line 592 
  return (_Bool)1;
}

#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/reset.h"
#line 15 
int reset_control_reset(struct reset_control *);
#line 16 
#line 16 
int reset_control_assert(struct reset_control *);
#line 17 
#line 17 
int reset_control_deassert(struct reset_control *);
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/page_pool.h"
#line 131 
struct page *page_pool_alloc_pages(struct page_pool *, gfp_t);
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/page_pool.h"
__inline static struct page *page_pool_dev_alloc_pages(struct page_pool *pool)
{
  #line 135 
  gfp_t gfp = 10784U;
  #line 137 
  return page_pool_alloc_pages(pool,gfp);
}

#line 149 
#line 149 
struct page_pool *page_pool_create(struct page_pool_params *);
#line 152 
#line 152 
void page_pool_destroy(struct page_pool *);
#line 166 
#line 166 
void __page_pool_put_page(struct page_pool *, struct page *, unsigned int, bool);
#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/page_pool.h"
__inline static void page_pool_put_page(struct page_pool *pool, struct page *page, bool allow_direct)
{
  #line 176 
  __page_pool_put_page(pool,page,4294967295U,(_Bool)((bool)((int)allow_direct) != 0));
  #line 177 
  return;
}

#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/page_pool.h"
__inline static void page_pool_recycle_direct(struct page_pool *pool, struct page *page)
{
  #line 183 
  __page_pool_put_page(pool,page,4294967295U,(_Bool)1);
  #line 184 
  return;
}

#line 191 
#line 191 
void page_pool_unmap_page(struct page_pool *, struct page *);
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/page_pool.h"
__inline static void page_pool_release_page(struct page_pool *pool, struct page *page)
{
  #line 196 
  page_pool_unmap_page(pool,page);
  #line 197 
  return;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/page_pool.h"
__inline static dma_addr_t page_pool_get_dma_addr(struct page *page)
{
  #line 202 
  return page->__anonCompField_page_44.__anonCompField___anonunion_2307_33.dma_addr;
}

#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
#line 4937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
int stmmac_resume(struct device *dev);
#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
#line 4859  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
int stmmac_suspend(struct device *dev);
#line 255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
#line 4821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
int stmmac_dvr_remove(struct device *dev);
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac.h"
#line 4555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
int stmmac_dvr_probe(struct device *device, struct plat_stmmacenet_data *plat_dat, struct stmmac_resources *res);
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int watchdog = 5000;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int debug = -1;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int phyaddr = -1;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int flow_ctrl = 3;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int pause = 65535;
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int tc = 64;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int buf_sz = 1536;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int eee_timer = 1000;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static unsigned int chain_mode;
#line 106 
#line 3922 
static irqreturn_t stmmac_interrupt(int irq, void *dev_id);
#line 109 
#line 4395 
static struct net_device_ops stmmac_netdev_ops;
#line 110 
#line 4288 
static void stmmac_init_fs(struct net_device *dev);
#line 111 
#line 4306 
static void stmmac_exit_fs(struct net_device *dev);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_verify_args(void)
{
  #line 123 
  if ((long)(watchdog < 0) != 0L) 
                                  #line 124 
                                  watchdog = 5000;
  #line 125 
  if ((long)((unsigned int)buf_sz + 4294965760U > 14832U) != 0L) 
                                                                 #line 126 
                                                                 buf_sz = 1536;
  #line 127 
  if ((long)(flow_ctrl > 1) != 0L) 
                                   #line 128 
                                   flow_ctrl = 3;
  else 
    #line 129 
    if ((long)(flow_ctrl < 0) != 0L) 
                                     #line 130 
                                     flow_ctrl = 0;
  #line 131 
  if ((long)((unsigned int)pause > 65535U) != 0L) 
                                                  #line 132 
                                                  pause = 65535;
  #line 133 
  if (eee_timer < 0) 
                     #line 134 
                     eee_timer = 1000;
  #line 135 
  return;
}

#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_disable_all_queues(struct stmmac_priv *priv)
{
  #line 145 
  u32 __UNIQUE_ID___x555;
  #line 145 
  u32 tmp;
  #line 146 
  u32 queue;
  #line 143 
  u32 rx_queues_cnt = (priv->plat)->rx_queues_to_use;
  #line 144 
  u32 tx_queues_cnt = (priv->plat)->tx_queues_to_use;
  {
    #line 145 
    __UNIQUE_ID___x555 = rx_queues_cnt;
    #line 145 
    u32 __UNIQUE_ID___y556 = tx_queues_cnt;
    #line 145 
    if (__UNIQUE_ID___x555 > __UNIQUE_ID___y556) 
                                                 #line 145 
                                                 tmp = __UNIQUE_ID___x555; else 
                                                                    #line 145 
                                                                    tmp = __UNIQUE_ID___y556;
    }
  #line 145 
  u32 maxq = tmp;
  #line 148 
  queue = 0U;
  #line 148 
  while (queue < maxq) {
    {
      #line 149 
      struct stmmac_channel *ch = & priv->channel[queue];
      #line 151 
      if (queue < rx_queues_cnt) 
                                 #line 152 
                                 napi_disable(& ch->rx_napi);
      #line 153 
      if (queue < tx_queues_cnt) 
                                 #line 154 
                                 napi_disable(& ch->tx_napi);
    }
    #line 148 
    queue ++;
  }
  #line 156 
  return;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_enable_all_queues(struct stmmac_priv *priv)
{
  #line 166 
  u32 __UNIQUE_ID___x557;
  #line 166 
  u32 tmp;
  #line 167 
  u32 queue;
  #line 164 
  u32 rx_queues_cnt = (priv->plat)->rx_queues_to_use;
  #line 165 
  u32 tx_queues_cnt = (priv->plat)->tx_queues_to_use;
  {
    #line 166 
    __UNIQUE_ID___x557 = rx_queues_cnt;
    #line 166 
    u32 __UNIQUE_ID___y558 = tx_queues_cnt;
    #line 166 
    if (__UNIQUE_ID___x557 > __UNIQUE_ID___y558) 
                                                 #line 166 
                                                 tmp = __UNIQUE_ID___x557; else 
                                                                    #line 166 
                                                                    tmp = __UNIQUE_ID___y558;
    }
  #line 166 
  u32 maxq = tmp;
  #line 169 
  queue = 0U;
  #line 169 
  while (queue < maxq) {
    {
      #line 170 
      struct stmmac_channel *ch = & priv->channel[queue];
      #line 172 
      if (queue < rx_queues_cnt) 
                                 #line 173 
                                 napi_enable(& ch->rx_napi);
      #line 174 
      if (queue < tx_queues_cnt) 
                                 #line 175 
                                 napi_enable(& ch->tx_napi);
    }
    #line 169 
    queue ++;
  }
  #line 177 
  return;
}

#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_stop_all_queues(struct stmmac_priv *priv)
{
  #line 186 
  u32 queue;
  #line 185 
  u32 tx_queues_cnt = (priv->plat)->tx_queues_to_use;
  #line 188 
  queue = 0U;
  #line 188 
  while (queue < tx_queues_cnt) {
    #line 189 
    netif_tx_stop_queue(netdev_get_tx_queue(priv->dev,queue));
    #line 188 
    queue ++;
  }
  #line 190 
  return;
}

#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_start_all_queues(struct stmmac_priv *priv)
{
  #line 199 
  u32 queue;
  #line 198 
  u32 tx_queues_cnt = (priv->plat)->tx_queues_to_use;
  #line 201 
  queue = 0U;
  #line 201 
  while (queue < tx_queues_cnt) {
    #line 202 
    netif_tx_start_queue(netdev_get_tx_queue(priv->dev,queue));
    #line 201 
    queue ++;
  }
  #line 203 
  return;
}

#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_service_event_schedule(struct stmmac_priv *priv)
{
  #line 207 
  if (! test_bit(0L,& priv->state)) {
    #line 208 
    if (! test_and_set_bit(3L,& priv->state)) 
                                              #line 209 
                                              cif_queue_work(priv->wq,& priv->service_task);
  }
  #line 210 
  return;
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_global_err(struct stmmac_priv *priv)
{
  #line 214 
  netif_carrier_off(priv->dev);
  #line 215 
  cif_set_bit(1L,& priv->state);
  #line 216 
  stmmac_service_event_schedule(priv);
  #line 217 
  return;
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_clk_csr_set(struct stmmac_priv *priv)
{
  #line 233 
  u32 clk_rate;
  #line 235 
  clk_rate = (unsigned int)clk_get_rate((priv->plat)->stmmac_clk);
  #line 244 
  if ((priv->clk_csr & 32) == 0) 
    #line 245 
    if (clk_rate <= 34999999U) 
                               #line 246 
                               priv->clk_csr = 2;
    else 
      #line 247 
      if (clk_rate + 4259967296U <= 24999999U) 
                                               #line 248 
                                               priv->clk_csr = 3;
      else 
        #line 249 
        if (clk_rate + 4234967296U <= 39999999U) 
                                                 #line 250 
                                                 priv->clk_csr = 0;
        else 
          #line 251 
          if (clk_rate + 4194967296U <= 49999999U) 
                                                   #line 252 
                                                   priv->clk_csr = 1;
          else 
            #line 253 
            if (clk_rate + 4144967296U <= 99999999U) 
                                                     #line 254 
                                                     priv->clk_csr = 4;
            else 
              #line 255 
              if (clk_rate + 4044967296U <= 49999999U) 
                                                       #line 256 
                                                       priv->clk_csr = 5;
  #line 259 
  if ((int)(priv->plat)->has_sun8i != 0) 
    #line 260 
    if (clk_rate > 160000000U) 
                               #line 261 
                               priv->clk_csr = 3;
    else 
      #line 262 
      if (clk_rate > 80000000U) 
                                #line 263 
                                priv->clk_csr = 2;
      else 
        #line 264 
        if (clk_rate > 40000000U) 
                                  #line 265 
                                  priv->clk_csr = 1; else 
                                                          #line 267 
                                                          priv->clk_csr = 0;
  #line 270 
  if ((priv->plat)->has_xgmac != 0) 
    #line 271 
    if (clk_rate > 400000000U) 
                               #line 272 
                               priv->clk_csr = 5;
    else 
      #line 273 
      if (clk_rate > 350000000U) 
                                 #line 274 
                                 priv->clk_csr = 4;
      else 
        #line 275 
        if (clk_rate > 300000000U) 
                                   #line 276 
                                   priv->clk_csr = 3;
        else 
          #line 277 
          if (clk_rate > 250000000U) 
                                     #line 278 
                                     priv->clk_csr = 2;
          else 
            #line 279 
            if (clk_rate > 150000000U) 
                                       #line 280 
                                       priv->clk_csr = 1; else 
                                                               #line 282 
                                                               priv->clk_csr = 0;
  #line 283 
  return;
}

#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void print_pkt(unsigned char *buf, int len)
{
  {
    #line 288 
    bool branch;
    #line 288 
    struct _ddebug __UNIQUE_ID_ddebug559 = {.modname = (char *)"stmmac", .function = (char *)"print_pkt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"len = %d byte, buf addr: 0x%p\n", .lineno = (unsigned int)288U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 288 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug559.key.dd_key_false.key,(_Bool)0);
    #line 288 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 288 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug559,(char *)"len = %d byte, buf addr: 0x%p\n",len,buf);
  }
  {
    #line 289 
    bool branch_0;
    #line 289 
    struct _ddebug __UNIQUE_ID_ddebug560 = {.modname = (char *)"stmmac", .function = (char *)"print_pkt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"", .lineno = (unsigned int)289U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 289 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug560.key.dd_key_false.key,(_Bool)0);
    #line 289 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 289 
                                                  print_hex_dump((char *)"\001",(char *)"",2,16,1,(void *)buf,(unsigned long)len,(_Bool)1);
  }
  #line 291 
  return;
}

#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
__inline static u32 stmmac_tx_avail(struct stmmac_priv *priv, u32 queue)
{
  #line 295 
  u32 avail;
  #line 294 
  struct stmmac_tx_queue *tx_q = & priv->tx_queue[queue];
  #line 297 
  if (tx_q->dirty_tx > tx_q->cur_tx) 
                                     #line 298 
                                     avail = (tx_q->dirty_tx - tx_q->cur_tx) + 4294967295U; else 
                                                                    #line 300 
                                                                    avail = (tx_q->dirty_tx - tx_q->cur_tx) + 511U;
  #line 302 
  return avail;
}

#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
__inline static u32 stmmac_rx_dirty(struct stmmac_priv *priv, u32 queue)
{
  #line 313 
  u32 dirty;
  #line 312 
  struct stmmac_rx_queue *rx_q = & priv->rx_queue[queue];
  #line 315 
  if (rx_q->dirty_rx <= rx_q->cur_rx) 
                                      #line 316 
                                      dirty = rx_q->cur_rx - rx_q->dirty_rx; else 
                                                                    #line 318 
                                                                    dirty = (rx_q->cur_rx - rx_q->dirty_rx) + 512U;
  #line 320 
  return dirty;
}

#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_enable_eee_mode(struct stmmac_priv *priv)
{
  #line 332 
  u32 queue;
  #line 331 
  u32 tx_cnt = (priv->plat)->tx_queues_to_use;
  #line 335 
  queue = 0U;
  #line 335 
  while (queue < tx_cnt) {
    {
      #line 336 
      struct stmmac_tx_queue *tx_q = & priv->tx_queue[queue];
      #line 338 
      if (tx_q->dirty_tx != tx_q->cur_tx) 
                                          #line 339 
                                          return;
    }
    #line 335 
    queue ++;
  }
  #line 343 
  if (! priv->tx_path_in_lpi_mode) {
    #line 344 
    int __result = -22;
    #line 344 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_eee_mode != (void (*)(struct mac_device_info *, bool ))0) {
      #line 344 
      (*(((priv->hw)->mac)->set_eee_mode))(priv->hw,(_Bool)((bool)((int)(priv->plat)->en_tx_lpi_clockgating) != 0));
      #line 344 
      __result = 0;
    }
    #line 344 
    int tmp = __result;
  }
  #line 346 
  return;
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
void stmmac_disable_eee_mode(struct stmmac_priv *priv)
{
  {
    #line 356 
    int __result = -22;
    #line 356 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->reset_eee_mode != (void (*)(struct mac_device_info *))0) {
      #line 356 
      (*(((priv->hw)->mac)->reset_eee_mode))(priv->hw);
      #line 356 
      __result = 0;
    }
    #line 356 
    int tmp = __result;
  }
  #line 357 
  cif_del_timer_sync(& priv->eee_ctrl_timer);
  #line 358 
  priv->tx_path_in_lpi_mode = (_Bool)0;
  #line 359 
  return;
}

#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_eee_ctrl_timer(struct timer_list *t)
{
  #line 370 
  void *__mptr;
  #line 370 
  __mptr = (void *)t;
  #line 370 
  struct stmmac_priv *priv = ((struct stmmac_priv *)(__mptr + 18446744073709539176U));
  #line 372 
  stmmac_enable_eee_mode(priv);
  #line 373 
  ;
  #line 373 
  ;
  #line 373 
  cif_mod_timer(& priv->eee_ctrl_timer,msecs_to_jiffies((unsigned int)eee_timer) + jiffies);
  #line 374 
  return;
}

#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
bool stmmac_eee_init(struct stmmac_priv *priv)
{
  #line 386 
  int tx_lpi_timer = priv->tx_lpi_timer;
  #line 391 
  if (((priv->hw)->pcs == 1U || (priv->hw)->pcs == 4U) || (priv->hw)->pcs == 8U) 
    #line 394 
    return (_Bool)0;
  #line 397 
  if (priv->dma_cap.eee == 0U) 
                               #line 398 
                               return (_Bool)0;
  #line 400 
  cif_mutex_lock_lock_of_stmmac_priv_0(& priv->lock);
  #line 403 
  if (priv->eee_active == 0) {
    #line 404 
    if (priv->eee_enabled != 0) {
      {
        #line 405 
        bool branch;
        #line 405 
        struct _ddebug __UNIQUE_ID_ddebug561 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_eee_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"disable EEE\n", .lineno = (unsigned int)405U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 405 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug561.key.dd_key_false.key,(_Bool)0);
        #line 405 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 405 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug561,priv->dev,(char *)"disable EEE\n");
      }
      #line 406 
      cif_del_timer_sync(& priv->eee_ctrl_timer);
      {
        #line 407 
        int __result = -22;
        #line 407 
        if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_eee_timer != (void (*)(struct mac_device_info *, int , int ))0) {
          #line 407 
          (*(((priv->hw)->mac)->set_eee_timer))(priv->hw,0,tx_lpi_timer);
          #line 407 
          __result = 0;
        }
        #line 407 
        int tmp_2 = __result;
      }
    }
    #line 409 
    cif_mutex_unlock_lock_of_stmmac_priv_0(& priv->lock);
    #line 410 
    return (_Bool)0;
  }
  #line 413 
  if (priv->eee_active != 0 && priv->eee_enabled == 0) {
    {
      #line 414 
      struct lock_class_key __key;
      #line 414 
      init_timer_key(& priv->eee_ctrl_timer,& stmmac_eee_ctrl_timer,0U,(char *)"(&priv->eee_ctrl_timer)",& __key);
    }
    #line 415 
    ;
    #line 415 
    ;
    #line 415 
    cif_mod_timer(& priv->eee_ctrl_timer,msecs_to_jiffies((unsigned int)eee_timer) + jiffies);
    {
      #line 416 
      int __result_0 = -22;
      #line 416 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_eee_timer != (void (*)(struct mac_device_info *, int , int ))0) {
        #line 416 
        (*(((priv->hw)->mac)->set_eee_timer))(priv->hw,1000,tx_lpi_timer);
        #line 416 
        __result_0 = 0;
      }
      #line 416 
      int tmp_4 = __result_0;
    }
  }
  #line 420 
  cif_mutex_unlock_lock_of_stmmac_priv_0(& priv->lock);
  {
    #line 421 
    bool branch_0;
    #line 421 
    struct _ddebug __UNIQUE_ID_ddebug562 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_eee_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"Energy-Efficient Ethernet initialized\n", .lineno = (unsigned int)421U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 421 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug562.key.dd_key_false.key,(_Bool)0);
    #line 421 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 421 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug562,priv->dev,(char *)"Energy-Efficient Ethernet initialized\n");
  }
  #line 422 
  return (_Bool)1;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_get_tx_hwtstamp(struct stmmac_priv *priv, struct dma_desc *p, struct sk_buff *skb)
{
  #line 448 
  int __result_1;
  #line 436 
  struct skb_shared_hwtstamps shhwtstamp;
  #line 437 
  bool found = (_Bool)0;
  #line 438 
  u64 ns = 0ULL;
  #line 440 
  if (priv->hwts_tx_en == 0) 
                             #line 441 
                             return;
  #line 444 
  if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                #line 445 
                                                return;
  else {
    #line 444 
    ;
    #line 444 
    if ((long)(((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 4) == 0) != 0L) 
      #line 445 
      return;
  }
  #line 448 
  __result_1 = -22;
  #line 448 
  if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->get_tx_timestamp_status != (int (*)(struct dma_desc *))0) 
    #line 448 
    __result_1 = (*(((priv->hw)->desc)->get_tx_timestamp_status))(p);
  #line 448 
  if (__result_1 != 0) {
    {
      #line 449 
      int __result = -22;
      #line 449 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->get_timestamp != (void (*)(void *, u32 , u64 *))0) {
        #line 449 
        (*(((priv->hw)->desc)->get_timestamp))((void *)p,priv->adv_ts,& ns);
        #line 449 
        __result = 0;
      }
      #line 449 
      int tmp_2 = __result;
    }
    #line 450 
    found = (_Bool)1;
  }
  else {
    #line 451 
    int __result_0;
    #line 451 
    __result_0 = -22;
    #line 451 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->get_mac_tx_timestamp != (int (*)(struct mac_device_info *, u64 *))0) 
      #line 451 
      __result_0 = (*(((priv->hw)->mac)->get_mac_tx_timestamp))(priv->hw,& ns);
    #line 451 
    if (__result_0 == 0) 
                         #line 452 
                         found = (_Bool)1;
  }
  #line 455 
  if ((int)found != 0) {
    #line 456 
    memset((void *)(& shhwtstamp),0,8UL);
    #line 457 
    shhwtstamp.hwtstamp = ns_to_ktime(ns);
    {
      #line 459 
      bool branch;
      #line 459 
      struct _ddebug __UNIQUE_ID_ddebug563 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_get_tx_hwtstamp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"get valid TX hw timestamp %llu\n", .lineno = (unsigned int)459U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 459 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug563.key.dd_key_false.key,(_Bool)0);
      #line 459 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 459 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug563,priv->dev,(char *)"get valid TX hw timestamp %llu\n",ns);
    }
    #line 461 
    skb_tstamp_tx(skb,& shhwtstamp);
  }
  #line 463 
  return;
}

#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_get_rx_hwtstamp(struct stmmac_priv *priv, struct dma_desc *p, struct dma_desc *np, struct sk_buff *skb)
{
  #line 488 
  int __result_0;
  #line 477 
  struct skb_shared_hwtstamps *shhwtstamp = (struct skb_shared_hwtstamps *)0;
  #line 478 
  struct dma_desc *desc = p;
  #line 479 
  u64 ns = 0ULL;
  #line 481 
  if (priv->hwts_rx_en == 0) 
                             #line 482 
                             return;
  #line 484 
  if ((priv->plat)->has_gmac4 != 0 || (priv->plat)->has_xgmac != 0) 
                                                                    #line 485 
                                                                    desc = np;
  #line 488 
  __result_0 = -22;
  #line 488 
  if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->get_rx_timestamp_status != (int (*)(void *, void *, u32 ))0) 
    #line 488 
    __result_0 = (*(((priv->hw)->desc)->get_rx_timestamp_status))((void *)p,(void *)np,priv->adv_ts);
  #line 488 
  if (__result_0 != 0) {
    {
      #line 489 
      int __result = -22;
      #line 489 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->get_timestamp != (void (*)(void *, u32 , u64 *))0) {
        #line 489 
        (*(((priv->hw)->desc)->get_timestamp))((void *)desc,priv->adv_ts,& ns);
        #line 489 
        __result = 0;
      }
      #line 489 
      int tmp = __result;
    }
    {
      #line 490 
      bool branch;
      #line 490 
      struct _ddebug __UNIQUE_ID_ddebug564 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_get_rx_hwtstamp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"get valid RX hw timestamp %llu\n", .lineno = (unsigned int)490U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 490 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug564.key.dd_key_false.key,(_Bool)0);
      #line 490 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 490 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug564,priv->dev,(char *)"get valid RX hw timestamp %llu\n",ns);
    }
    #line 491 
    shhwtstamp = skb_hwtstamps(skb);
    #line 492 
    memset((void *)shhwtstamp,0,8UL);
    #line 493 
    shhwtstamp->hwtstamp = ns_to_ktime(ns);
  }
  else {
    #line 495 
    bool branch_0;
    #line 495 
    struct _ddebug __UNIQUE_ID_ddebug565 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_get_rx_hwtstamp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"cannot get RX hw timestamp\n", .lineno = (unsigned int)495U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 495 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug565.key.dd_key_false.key,(_Bool)0);
    #line 495 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 495 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug565,priv->dev,(char *)"cannot get RX hw timestamp\n");
  }
  #line 497 
  return;
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_hwtstamp_set(struct net_device *dev, struct ifreq *ifr)
{
  #line 513 
  struct hwtstamp_config config;
  #line 514 
  struct timespec64 now;
  #line 526 
  bool xmac;
  #line 728 
  int tmp_4_1;
  #line 512 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 515 
  u64 temp = 0ULL;
  #line 516 
  u32 ptp_v2 = 0U;
  #line 517 
  u32 tstamp_all = 0U;
  #line 518 
  u32 ptp_over_ipv4_udp = 0U;
  #line 519 
  u32 ptp_over_ipv6_udp = 0U;
  #line 520 
  u32 ptp_over_ethernet = 0U;
  #line 521 
  u32 snap_type_sel = 0U;
  #line 522 
  u32 ts_master_en = 0U;
  #line 523 
  u32 ts_event_en = 0U;
  #line 524 
  u32 sec_inc = 0U;
  #line 525 
  u32 value = 0U;
  #line 528 
  xmac = (_Bool)(((priv->plat)->has_gmac4 != 0 || (priv->plat)->has_xgmac != 0) != 0);
  #line 530 
  if (priv->dma_cap.time_stamp == 0U && priv->adv_ts == 0U) {
    #line 531 
    netdev_alert(priv->dev,(char *)"No support for HW time stamping\n");
    #line 532 
    priv->hwts_tx_en = 0;
    #line 533 
    priv->hwts_rx_en = 0;
    #line 535 
    return -95;
  }
  #line 538 
  if (copy_from_user((void *)(& config),ifr->ifr_ifru.ifru_data,12UL) != 0UL) 
    #line 540 
    return -14;
  {
    #line 542 
    bool branch;
    #line 542 
    struct _ddebug __UNIQUE_ID_ddebug566 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_hwtstamp_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"%s config flags:0x%x, tx_type:0x%x, rx_filter:0x%x\n", .lineno = (unsigned int)542U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 542 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug566.key.dd_key_false.key,(_Bool)0);
    #line 542 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 542 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug566,priv->dev,(char *)"%s config flags:0x%x, tx_type:0x%x, rx_filter:0x%x\n",(char *)"stmmac_hwtstamp_set",config.flags,config.tx_type,config.rx_filter);
  }
  #line 546 
  if (config.flags != 0) 
                         #line 547 
                         return -22;
  #line 549 
  if ((unsigned int)config.tx_type > 1U) 
                                         #line 551 
                                         return -34;
  #line 553 
  if (priv->adv_ts != 0U) 
    #line 554 
    switch (config.rx_filter) {
      #line 555 
      case 0: 
              #line 555 
      ;
      #line 557 
      config.rx_filter = 0;
      #line 558 
      break;
      #line 560 
      case 3: 
              #line 560 
      ;
      #line 562 
      config.rx_filter = 3;
      #line 569 
      snap_type_sel = 65536U;
      #line 570 
      ptp_over_ipv4_udp = 8192U;
      #line 571 
      ptp_over_ipv6_udp = 4096U;
      #line 572 
      break;
      #line 574 
      case 4: 
              #line 574 
      ;
      #line 576 
      config.rx_filter = 4;
      #line 578 
      ts_event_en = 16384U;
      #line 580 
      ptp_over_ipv4_udp = 8192U;
      #line 581 
      ptp_over_ipv6_udp = 4096U;
      #line 582 
      break;
      #line 584 
      case 5: 
              #line 584 
      ;
      #line 586 
      config.rx_filter = 5;
      #line 588 
      ts_master_en = 32768U;
      #line 589 
      ts_event_en = 16384U;
      #line 591 
      ptp_over_ipv4_udp = 8192U;
      #line 592 
      ptp_over_ipv6_udp = 4096U;
      #line 593 
      break;
      #line 595 
      case 6: 
              #line 595 
      ;
      #line 597 
      config.rx_filter = 6;
      #line 598 
      ptp_v2 = 1024U;
      #line 600 
      snap_type_sel = 65536U;
      #line 602 
      ptp_over_ipv4_udp = 8192U;
      #line 603 
      ptp_over_ipv6_udp = 4096U;
      #line 604 
      break;
      #line 606 
      case 7: 
              #line 606 
      ;
      #line 608 
      config.rx_filter = 7;
      #line 609 
      ptp_v2 = 1024U;
      #line 611 
      ts_event_en = 16384U;
      #line 613 
      ptp_over_ipv4_udp = 8192U;
      #line 614 
      ptp_over_ipv6_udp = 4096U;
      #line 615 
      break;
      #line 617 
      case 8: 
              #line 617 
      ;
      #line 619 
      config.rx_filter = 8;
      #line 620 
      ptp_v2 = 1024U;
      #line 622 
      ts_master_en = 32768U;
      #line 623 
      ts_event_en = 16384U;
      #line 625 
      ptp_over_ipv4_udp = 8192U;
      #line 626 
      ptp_over_ipv6_udp = 4096U;
      #line 627 
      break;
      #line 629 
      case 12: 
               #line 629 
      ;
      #line 631 
      config.rx_filter = 12;
      #line 632 
      ptp_v2 = 1024U;
      #line 633 
      snap_type_sel = 65536U;
      #line 634 
      ts_event_en = 16384U;
      #line 635 
      ptp_over_ipv4_udp = 8192U;
      #line 636 
      ptp_over_ipv6_udp = 4096U;
      #line 637 
      ptp_over_ethernet = 2048U;
      #line 638 
      break;
      #line 640 
      case 13: 
               #line 640 
      ;
      #line 642 
      config.rx_filter = 13;
      #line 643 
      ptp_v2 = 1024U;
      #line 645 
      ts_event_en = 16384U;
      #line 647 
      ptp_over_ipv4_udp = 8192U;
      #line 648 
      ptp_over_ipv6_udp = 4096U;
      #line 649 
      ptp_over_ethernet = 2048U;
      #line 650 
      break;
      #line 652 
      case 14: 
               #line 652 
      ;
      #line 654 
      config.rx_filter = 14;
      #line 655 
      ptp_v2 = 1024U;
      #line 657 
      ts_master_en = 32768U;
      #line 658 
      ts_event_en = 16384U;
      #line 660 
      ptp_over_ipv4_udp = 8192U;
      #line 661 
      ptp_over_ipv6_udp = 4096U;
      #line 662 
      ptp_over_ethernet = 2048U;
      #line 663 
      break;
      #line 665 
      case 15: 
               #line 665 
      ;
      #line 666 
      case 1: 
              #line 666 
      ;
      #line 668 
      config.rx_filter = 1;
      #line 669 
      tstamp_all = 256U;
      #line 670 
      break;
      #line 672 
      default: 
               #line 672 
      ;
      #line 673 
      return -34;
    }
  else 
    #line 676 
    switch (config.rx_filter) {
      #line 677 
      case 0: 
              #line 677 
      ;
      #line 678 
      config.rx_filter = 0;
      #line 679 
      break;
      #line 680 
      default: 
               #line 680 
      ;
      #line 682 
      config.rx_filter = 3;
      #line 683 
      break;
    }
  #line 686 
  priv->hwts_rx_en = config.rx_filter != 0;
  #line 687 
  priv->hwts_tx_en = config.tx_type == 1;
  #line 689 
  if (priv->hwts_tx_en == 0 && priv->hwts_rx_en == 0) {
    #line 690 
    int __result = -22;
    #line 690 
    if ((priv->hw)->ptp != (struct stmmac_hwtimestamp *)0 && ((priv->hw)->ptp)->config_hw_tstamping != (void (*)(void *, u32 ))0) {
      #line 690 
      (*(((priv->hw)->ptp)->config_hw_tstamping))(priv->ptpaddr,0U);
      #line 690 
      __result = 0;
    }
    #line 690 
    int tmp_2 = __result;
  }
  else {
    #line 692 
    value = (((((((tstamp_all | ptp_v2) | ptp_over_ethernet) | ptp_over_ipv6_udp) | ptp_over_ipv4_udp) | ts_event_en) | ts_master_en) | snap_type_sel) | 515U;
    {
      #line 696 
      int __result_0 = -22;
      #line 696 
      if ((priv->hw)->ptp != (struct stmmac_hwtimestamp *)0 && ((priv->hw)->ptp)->config_hw_tstamping != (void (*)(void *, u32 ))0) {
        #line 696 
        (*(((priv->hw)->ptp)->config_hw_tstamping))(priv->ptpaddr,value);
        #line 696 
        __result_0 = 0;
      }
      #line 696 
      int tmp_4 = __result_0;
    }
    {
      #line 699 
      int __result_1 = -22;
      #line 699 
      if ((priv->hw)->ptp != (struct stmmac_hwtimestamp *)0 && ((priv->hw)->ptp)->config_sub_second_increment != (void (*)(void *, u32 , int , u32 *))0) {
        #line 699 
        (*(((priv->hw)->ptp)->config_sub_second_increment))(priv->ptpaddr,(priv->plat)->clk_ptp_rate,(int)xmac,& sec_inc);
        #line 699 
        __result_1 = 0;
      }
      #line 699 
      int tmp_6 = __result_1;
    }
    #line 702 
    temp = div_u64(1000000000ULL,sec_inc);
    #line 705 
    priv->sub_second_inc = sec_inc;
    #line 706 
    priv->systime_flags = value;
    #line 713 
    temp <<= 32;
    #line 714 
    priv->default_addend = (unsigned int)div_u64(temp,(priv->plat)->clk_ptp_rate);
    {
      #line 715 
      int __result_2 = -22;
      #line 715 
      if ((priv->hw)->ptp != (struct stmmac_hwtimestamp *)0 && ((priv->hw)->ptp)->config_addend != (int (*)(void *, u32 ))0) 
        #line 715 
        __result_2 = (*(((priv->hw)->ptp)->config_addend))(priv->ptpaddr,priv->default_addend);
      #line 715 
      int tmp_8 = __result_2;
    }
    #line 718 
    ktime_get_real_ts64(& now);
    {
      #line 721 
      int __result_3 = -22;
      #line 721 
      if ((priv->hw)->ptp != (struct stmmac_hwtimestamp *)0 && ((priv->hw)->ptp)->init_systime != (int (*)(void *, u32 , u32 ))0) 
        #line 721 
        __result_3 = (*(((priv->hw)->ptp)->init_systime))(priv->ptpaddr,(unsigned int)now.tv_sec,(unsigned int)now.tv_nsec);
      #line 721 
      int tmp_10 = __result_3;
    }
  }
  #line 725 
  memcpy((void *)(& priv->tstamp_config),(void *)(& config),12UL);
  #line 728 
  if (copy_to_user(ifr->ifr_ifru.ifru_data,(void *)(& config),12UL) != 0UL) 
    #line 728 
    tmp_4_1 = -14; else 
                        #line 728 
                        tmp_4_1 = 0;
  #line 728 
  return tmp_4_1;
}

#line 740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_hwtstamp_get(struct net_device *dev, struct ifreq *ifr)
{
  #line 749 
  int tmp_1;
  #line 742 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 743 
  struct hwtstamp_config *config = & priv->tstamp_config;
  #line 745 
  if (priv->dma_cap.time_stamp == 0U && priv->dma_cap.atime_stamp == 0U) 
    #line 746 
    return -95;
  #line 749 
  if (copy_to_user(ifr->ifr_ifru.ifru_data,(void *)config,12UL) != 0UL) 
    #line 749 
    tmp_1 = -14; else 
                      #line 749 
                      tmp_1 = 0;
  #line 749 
  return tmp_1;
}

#line 759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_init_ptp(struct stmmac_priv *priv)
{
  #line 761 
  bool xmac = (_Bool)(((priv->plat)->has_gmac4 != 0 || (priv->plat)->has_xgmac != 0) != 0);
  #line 763 
  if (priv->dma_cap.time_stamp == 0U && priv->dma_cap.atime_stamp == 0U) 
    #line 764 
    return -95;
  #line 766 
  priv->adv_ts = 0U;
  #line 768 
  if ((int)xmac != 0 && priv->dma_cap.atime_stamp != 0U) 
                                                         #line 769 
                                                         priv->adv_ts = 1U;
  else 
    #line 771 
    if (priv->extend_desc != 0 && priv->dma_cap.atime_stamp != 0U) 
                                                                   #line 772 
                                                                   priv->adv_ts = 1U;
  #line 774 
  if (priv->dma_cap.time_stamp != 0U) 
                                      #line 775 
                                      netdev_info(priv->dev,(char *)"IEEE 1588-2002 Timestamp supported\n");
  #line 777 
  if (priv->adv_ts != 0U) 
                          #line 778 
                          netdev_info(priv->dev,(char *)"IEEE 1588-2008 Advanced Timestamp supported\n");
  #line 781 
  priv->hwts_tx_en = 0;
  #line 782 
  priv->hwts_rx_en = 0;
  #line 784 
  stmmac_ptp_register(priv);
  #line 786 
  return 0;
}

#line 789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_release_ptp(struct stmmac_priv *priv)
{
  #line 791 
  if ((priv->plat)->clk_ptp_ref != (struct clk *)0) 
                                                    #line 792 
                                                    clk_disable_unprepare((priv->plat)->clk_ptp_ref);
  #line 793 
  stmmac_ptp_unregister(priv);
  #line 794 
  return;
}

#line 801  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_mac_flow_ctrl(struct stmmac_priv *priv, u32 duplex)
{
  #line 803 
  u32 tx_cnt = (priv->plat)->tx_queues_to_use;
  {
    #line 805 
    int __result = -22;
    #line 805 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->flow_ctrl != (void (*)(struct mac_device_info *, unsigned int , unsigned int , unsigned int , u32 ))0) {
      #line 805 
      (*(((priv->hw)->mac)->flow_ctrl))(priv->hw,duplex,priv->flow_ctrl,priv->pause,tx_cnt);
      #line 805 
      __result = 0;
    }
    #line 805 
    int tmp = __result;
  }
  #line 807 
  return;
}

#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_validate(struct phylink_config *config, unsigned long *supported, struct phylink_link_state *state)
{
  #line 813 
  void *__mptr;
  #line 813 
  __mptr = (void *)config->dev;
  #line 813 
  struct stmmac_priv *priv = (struct stmmac_priv *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 814 
  unsigned long mac_supported[2U] = {0UL};
  #line 815 
  unsigned long mask[2U] = {0UL};
  #line 816 
  int tx_cnt = (int)(priv->plat)->tx_queues_to_use;
  #line 817 
  int max_speed = (priv->plat)->max_speed;
  #line 819 
  __set_bit(0L,(unsigned long *)(& mac_supported));
  #line 820 
  __set_bit(1L,(unsigned long *)(& mac_supported));
  #line 821 
  __set_bit(2L,(unsigned long *)(& mac_supported));
  #line 822 
  __set_bit(3L,(unsigned long *)(& mac_supported));
  #line 823 
  __set_bit(4L,(unsigned long *)(& mac_supported));
  #line 824 
  __set_bit(5L,(unsigned long *)(& mac_supported));
  #line 825 
  __set_bit(17L,(unsigned long *)(& mac_supported));
  #line 827 
  __set_bit(6L,(unsigned long *)(& mac_supported));
  #line 828 
  __set_bit(13L,(unsigned long *)(& mac_supported));
  #line 829 
  __set_bit(14L,(unsigned long *)(& mac_supported));
  #line 830 
  phylink_set_port_modes((unsigned long *)(& mac_supported));
  #line 833 
  if ((unsigned int)max_speed + 4294967295U <= 998U) {
    #line 834 
    __set_bit(5L,(unsigned long *)(& mask));
    #line 835 
    __set_bit(41L,(unsigned long *)(& mask));
  }
  else 
    #line 836 
    if ((priv->plat)->has_xgmac != 0) {
      #line 837 
      if (max_speed == 0 || max_speed > 2499) {
        #line 838 
        __set_bit(47L,(unsigned long *)(& mac_supported));
        #line 839 
        __set_bit(15L,(unsigned long *)(& mac_supported));
      }
      #line 841 
      if (max_speed == 0 || max_speed > 4999) 
                                              #line 842 
                                              __set_bit(48L,(unsigned long *)(& mac_supported));
      #line 844 
      if (max_speed == 0 || max_speed > 9999) {
        #line 845 
        __set_bit(43L,(unsigned long *)(& mac_supported));
        #line 846 
        __set_bit(44L,(unsigned long *)(& mac_supported));
        #line 847 
        __set_bit(46L,(unsigned long *)(& mac_supported));
        #line 848 
        __set_bit(45L,(unsigned long *)(& mac_supported));
        #line 849 
        __set_bit(12L,(unsigned long *)(& mac_supported));
        #line 850 
        __set_bit(18L,(unsigned long *)(& mac_supported));
        #line 851 
        __set_bit(19L,(unsigned long *)(& mac_supported));
      }
    }
  #line 856 
  if (tx_cnt > 1) {
    #line 857 
    __set_bit(0L,(unsigned long *)(& mask));
    #line 858 
    __set_bit(2L,(unsigned long *)(& mask));
    #line 859 
    __set_bit(4L,(unsigned long *)(& mask));
  }
  #line 862 
  bitmap_and(supported,supported,(unsigned long *)(& mac_supported),74U);
  #line 864 
  bitmap_andnot(supported,supported,(unsigned long *)(& mask),74U);
  #line 866 
  bitmap_and((unsigned long *)(& state->advertising),(unsigned long *)(& state->advertising),(unsigned long *)(& mac_supported),74U);
  #line 868 
  bitmap_andnot((unsigned long *)(& state->advertising),(unsigned long *)(& state->advertising),(unsigned long *)(& mask),74U);
  #line 869 
  return;
}

#line 872  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_mac_pcs_get_state(struct phylink_config *config, struct phylink_link_state *state)
{
  #line 875 
  state->link = (unsigned int)0U;
  #line 876 
  return;
}

#line 878  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_mac_config(struct phylink_config *config, unsigned int mode, struct phylink_link_state *state)
{
  #line 881 
  void *__mptr;
  #line 882 
  u32 ctrl;
  #line 881 
  __mptr = (void *)config->dev;
  #line 881 
  struct stmmac_priv *priv = (struct stmmac_priv *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 884 
  ctrl = readl(priv->ioaddr);
  #line 885 
  ctrl = ~ (priv->hw)->link.speed_mask & ctrl;
  #line 887 
  if (state->interface == (unsigned int)PHY_INTERFACE_MODE_USXGMII) 
    #line 888 
    switch (state->speed) {
      #line 889 
      case 10000: 
                  #line 889 
      ;
      #line 890 
      ctrl = (priv->hw)->link.xgmii.speed10000 | ctrl;
      #line 891 
      break;
      #line 892 
      case 5000: 
                 #line 892 
      ;
      #line 893 
      ctrl = (priv->hw)->link.xgmii.speed5000 | ctrl;
      #line 894 
      break;
      #line 895 
      case 2500: 
                 #line 895 
      ;
      #line 896 
      ctrl = (priv->hw)->link.xgmii.speed2500 | ctrl;
      #line 897 
      break;
      #line 898 
      default: 
               #line 898 
      ;
      #line 899 
      return;
    }
  else 
    #line 902 
    switch (state->speed) {
      #line 903 
      case 2500: 
                 #line 903 
      ;
      #line 904 
      ctrl = (priv->hw)->link.speed2500 | ctrl;
      #line 905 
      break;
      #line 906 
      case 1000: 
                 #line 906 
      ;
      #line 907 
      ctrl = (priv->hw)->link.speed1000 | ctrl;
      #line 908 
      break;
      #line 909 
      case 100: 
                #line 909 
      ;
      #line 910 
      ctrl = (priv->hw)->link.speed100 | ctrl;
      #line 911 
      break;
      #line 912 
      case 10: 
               #line 912 
      ;
      #line 913 
      ctrl = (priv->hw)->link.speed10 | ctrl;
      #line 914 
      break;
      #line 915 
      default: 
               #line 915 
      ;
      #line 916 
      return;
    }
  #line 920 
  priv->speed = state->speed;
  #line 922 
  if ((priv->plat)->fix_mac_speed != (void (*)(void *, unsigned int ))0) 
    #line 923 
    (*((priv->plat)->fix_mac_speed))((priv->plat)->bsp_priv,(unsigned int)state->speed);
  #line 925 
  if (state->duplex == 0) 
                          #line 926 
                          ctrl = ~ (priv->hw)->link.duplex & ctrl; else 
                                                                    #line 928 
                                                                    ctrl = (priv->hw)->link.duplex | ctrl;
  #line 931 
  if (state->pause != 0) 
                         #line 932 
                         stmmac_mac_flow_ctrl(priv,(unsigned int)state->duplex);
  #line 934 
  writel(ctrl,priv->ioaddr);
  #line 935 
  return;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_mac_an_restart(struct phylink_config *config)
{
  #line 939 
  return;
}

#line 942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_mac_link_down(struct phylink_config *config, unsigned int mode, phy_interface_t interface)
{
  #line 945 
  void *__mptr;
  #line 945 
  __mptr = (void *)config->dev;
  #line 945 
  struct stmmac_priv *priv = (struct stmmac_priv *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  {
    #line 947 
    int __result = -22;
    #line 947 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_mac != (void (*)(void *, bool ))0) {
      #line 947 
      (*(((priv->hw)->mac)->set_mac))(priv->ioaddr,(_Bool)0);
      #line 947 
      __result = 0;
    }
    #line 947 
    int tmp_2 = __result;
  }
  #line 948 
  priv->eee_active = 0;
  #line 949 
  stmmac_eee_init(priv);
  {
    #line 950 
    int __result_0 = -22;
    #line 950 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_eee_pls != (void (*)(struct mac_device_info *, int ))0) {
      #line 950 
      (*(((priv->hw)->mac)->set_eee_pls))(priv->hw,0);
      #line 950 
      __result_0 = 0;
    }
    #line 950 
    int tmp_4 = __result_0;
  }
  #line 952 
  return;
}

#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_mac_link_up(struct phylink_config *config, unsigned int mode, phy_interface_t interface, struct phy_device *phy)
{
  #line 957 
  void *__mptr;
  #line 957 
  __mptr = (void *)config->dev;
  #line 957 
  struct stmmac_priv *priv = (struct stmmac_priv *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  {
    #line 959 
    int __result = -22;
    #line 959 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_mac != (void (*)(void *, bool ))0) {
      #line 959 
      (*(((priv->hw)->mac)->set_mac))(priv->ioaddr,(_Bool)1);
      #line 959 
      __result = 0;
    }
    #line 959 
    int tmp_2 = __result;
  }
  #line 960 
  if (phy != (struct phy_device *)0 && priv->dma_cap.eee != 0U) {
    #line 961 
    priv->eee_active = phy_init_eee(phy,(_Bool)1) >= 0;
    #line 962 
    priv->eee_enabled = (int)stmmac_eee_init(priv);
    {
      #line 963 
      int __result_0 = -22;
      #line 963 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_eee_pls != (void (*)(struct mac_device_info *, int ))0) {
        #line 963 
        (*(((priv->hw)->mac)->set_eee_pls))(priv->hw,1);
        #line 963 
        __result_0 = 0;
      }
      #line 963 
      int tmp_4 = __result_0;
    }
  }
  #line 966 
  return;
}

#line 967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static struct phylink_mac_ops stmmac_phylink_mac_ops = {.validate = & stmmac_validate, .mac_pcs_get_state = & stmmac_mac_pcs_get_state, .mac_config = & stmmac_mac_config, .mac_an_restart = & stmmac_mac_an_restart, .mac_link_down = & stmmac_mac_link_down, .mac_link_up = & stmmac_mac_link_up};
#line 983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_check_pcs_mode(struct stmmac_priv *priv)
{
  #line 985 
  int interface = (priv->plat)->interface;
  #line 987 
  if (priv->dma_cap.pcs != 0U) 
    #line 988 
    if ((unsigned int)interface + 4294967288U <= 3U) {
      {
        #line 992 
        bool branch;
        #line 992 
        struct _ddebug __UNIQUE_ID_ddebug567 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_check_pcs_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"PCS RGMII support enabled\n", .lineno = (unsigned int)992U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 992 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug567.key.dd_key_false.key,(_Bool)0);
        #line 992 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 992 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug567,priv->dev,(char *)"PCS RGMII support enabled\n");
      }
      #line 993 
      (priv->hw)->pcs = 1U;
    }
    else 
      #line 994 
      if (interface == 4) {
        {
          #line 995 
          bool branch_0;
          #line 995 
          struct _ddebug __UNIQUE_ID_ddebug568 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_check_pcs_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"PCS SGMII support enabled\n", .lineno = (unsigned int)995U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 995 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug568.key.dd_key_false.key,(_Bool)0);
          #line 995 
          if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                        #line 995 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug568,priv->dev,(char *)"PCS SGMII support enabled\n");
        }
        #line 996 
        (priv->hw)->pcs = 2U;
      }
  #line 998 
  return;
}

#line 1009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_init_phy(struct net_device *dev)
{
  #line 1012 
  struct device_node *node;
  #line 1013 
  int ret;
  #line 1011 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 1015 
  node = (priv->plat)->phylink_node;
  #line 1017 
  if (node != (struct device_node *)0) 
                                       #line 1018 
                                       ret = phylink_of_phy_connect(priv->phylink,node,0U);
  #line 1023 
  if (node == (struct device_node *)0 || ret != 0) {
    #line 1025 
    struct phy_device *phydev;
    #line 1024 
    int addr = (priv->plat)->phy_addr;
    #line 1027 
    phydev = mdiobus_get_phy(priv->mii,addr);
    #line 1028 
    if (phydev == (struct phy_device *)0) {
      #line 1029 
      netdev_err(priv->dev,(char *)"no phy at addr %d\n",addr);
      #line 1030 
      return -19;
    }
    #line 1033 
    ret = phylink_connect_phy(priv->phylink,phydev);
  }
  #line 1036 
  return ret;
}

#line 1039  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_phy_setup(struct stmmac_priv *priv)
{
  #line 1041 
  struct device_node *__of_fwnode_handle_node;
  #line 1041 
  struct fwnode_handle *tmp;
  #line 1043 
  struct phylink *phylink;
  #line 1041 
  __of_fwnode_handle_node = (priv->plat)->phylink_node;
  #line 1041 
  if (__of_fwnode_handle_node != (struct device_node *)0) 
                                                          #line 1041 
                                                          tmp = & __of_fwnode_handle_node->fwnode; else 
                                                                    #line 1041 
                                                                    tmp = (struct fwnode_handle *)0;
  #line 1041 
  struct fwnode_handle *fwnode = tmp;
  #line 1042 
  int mode = (int)(priv->plat)->phy_interface;
  #line 1045 
  priv->phylink_config.dev = & (priv->dev)->dev;
  #line 1046 
  priv->phylink_config.type = PHYLINK_NETDEV;
  #line 1048 
  phylink = phylink_create(& priv->phylink_config,fwnode,(enum ldv_15641)mode,& stmmac_phylink_mac_ops);
  #line 1050 
  if ((int)IS_ERR_1((void *)phylink) != 0) {
    #line 1051 
    return (int)PTR_ERR_0((void *)phylink);
  }
  #line 1053 
  priv->phylink = phylink;
  #line 1054 
  return 0;
}

#line 1057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_display_rx_rings(struct stmmac_priv *priv)
{
  #line 1060 
  void *head_rx;
  #line 1061 
  u32 queue;
  #line 1059 
  u32 rx_cnt = (priv->plat)->rx_queues_to_use;
  #line 1064 
  queue = 0U;
  #line 1064 
  while (queue < rx_cnt) {
    {
      #line 1065 
      struct stmmac_rx_queue *rx_q = & priv->rx_queue[queue];
      #line 1067 
      printk((char *)"\001",queue);
      #line 1069 
      if (priv->extend_desc != 0) 
                                  #line 1070 
                                  head_rx = (void *)rx_q->dma_erx; else 
                                                                    #line 1072 
                                                                    head_rx = (void *)rx_q->dma_rx;
      {
        #line 1075 
        int __result = -22;
        #line 1075 
        if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->display_ring != (void (*)(void *, unsigned int , bool ))0) {
          #line 1075 
          (*(((priv->hw)->desc)->display_ring))(head_rx,512U,(_Bool)1);
          #line 1075 
          __result = 0;
        }
        #line 1075 
        int tmp = __result;
      }
    }
    #line 1064 
    queue ++;
  }
  #line 1078 
  return;
}

#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_display_tx_rings(struct stmmac_priv *priv)
{
  #line 1082 
  void *head_tx;
  #line 1083 
  u32 queue;
  #line 1081 
  u32 tx_cnt = (priv->plat)->tx_queues_to_use;
  #line 1086 
  queue = 0U;
  #line 1086 
  while (queue < tx_cnt) {
    {
      #line 1087 
      struct stmmac_tx_queue *tx_q = & priv->tx_queue[queue];
      #line 1089 
      printk((char *)"\001",queue);
      #line 1091 
      if (priv->extend_desc != 0) 
                                  #line 1092 
                                  head_tx = (void *)tx_q->dma_etx; else 
                                                                    #line 1094 
                                                                    head_tx = (void *)tx_q->dma_tx;
      {
        #line 1096 
        int __result = -22;
        #line 1096 
        if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->display_ring != (void (*)(void *, unsigned int , bool ))0) {
          #line 1096 
          (*(((priv->hw)->desc)->display_ring))(head_tx,512U,(_Bool)0);
          #line 1096 
          __result = 0;
        }
        #line 1096 
        int tmp = __result;
      }
    }
    #line 1086 
    queue ++;
  }
  #line 1099 
  return;
}

#line 1100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_display_rings(struct stmmac_priv *priv)
{
  #line 1103 
  stmmac_display_rx_rings(priv);
  #line 1106 
  stmmac_display_tx_rings(priv);
  #line 1107 
  return;
}

#line 1109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_set_bfsize(int mtu, int bufsize)
{
  #line 1111 
  int ret = bufsize;
  #line 1113 
  if (mtu > 8187) 
                  #line 1114 
                  ret = 16368;
  else 
    #line 1115 
    if (mtu > 4095) 
                    #line 1116 
                    ret = 8188;
    else 
      #line 1117 
      if (mtu > 2047) 
                      #line 1118 
                      ret = 4096;
      else 
        #line 1119 
        if (mtu > 1536) 
                        #line 1120 
                        ret = 2048; else 
                                         #line 1122 
                                         ret = 1536;
  #line 1124 
  return ret;
}

#line 1134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_clear_rx_descriptors(struct stmmac_priv *priv, u32 queue)
{
  #line 1137 
  int i;
  #line 1136 
  struct stmmac_rx_queue *rx_q = & priv->rx_queue[queue];
  #line 1140 
  i = 0;
  #line 1140 
  while (i <= 511) {
    #line 1141 
    if (priv->extend_desc != 0) {
      #line 1142 
      int __result = -22;
      #line 1142 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->init_rx_desc != (void (*)(struct dma_desc *, int , int , int , int ))0) {
        #line 1142 
        (*(((priv->hw)->desc)->init_rx_desc))(& (rx_q->dma_erx + (unsigned long)i)->basic,priv->use_riwt,(int)priv->mode,i == 511,(int)priv->dma_buf_sz);
        #line 1142 
        __result = 0;
      }
      #line 1142 
      int tmp = __result;
    }
    else {
      #line 1147 
      int __result_0 = -22;
      #line 1147 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->init_rx_desc != (void (*)(struct dma_desc *, int , int , int , int ))0) {
        #line 1147 
        (*(((priv->hw)->desc)->init_rx_desc))(rx_q->dma_rx + (unsigned long)i,priv->use_riwt,(int)priv->mode,i == 511,(int)priv->dma_buf_sz);
        #line 1147 
        __result_0 = 0;
      }
      #line 1147 
      int tmp_3 = __result_0;
    }
    #line 1140 
    i ++;
  }
  #line 1149 
  return;
}

#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_clear_tx_descriptors(struct stmmac_priv *priv, u32 queue)
{
  #line 1163 
  int i;
  #line 1162 
  struct stmmac_tx_queue *tx_q = & priv->tx_queue[queue];
  #line 1166 
  i = 0;
  #line 1166 
  while (i <= 511) {
    #line 1167 
    if (priv->extend_desc != 0) {
      #line 1168 
      int __result = -22;
      #line 1168 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->init_tx_desc != (void (*)(struct dma_desc *, int , int ))0) {
        #line 1168 
        (*(((priv->hw)->desc)->init_tx_desc))(& (tx_q->dma_etx + (unsigned long)i)->basic,(int)priv->mode,i == 511);
        #line 1168 
        __result = 0;
      }
      #line 1168 
      int tmp = __result;
    }
    else {
      #line 1171 
      int __result_0 = -22;
      #line 1171 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->init_tx_desc != (void (*)(struct dma_desc *, int , int ))0) {
        #line 1171 
        (*(((priv->hw)->desc)->init_tx_desc))(tx_q->dma_tx + (unsigned long)i,(int)priv->mode,i == 511);
        #line 1171 
        __result_0 = 0;
      }
      #line 1171 
      int tmp_3 = __result_0;
    }
    #line 1166 
    i ++;
  }
  #line 1173 
  return;
}

#line 1181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_clear_descriptors(struct stmmac_priv *priv)
{
  #line 1185 
  u32 queue;
  #line 1183 
  u32 rx_queue_cnt = (priv->plat)->rx_queues_to_use;
  #line 1184 
  u32 tx_queue_cnt = (priv->plat)->tx_queues_to_use;
  #line 1188 
  queue = 0U;
  #line 1188 
  while (queue < rx_queue_cnt) {
    #line 1189 
    stmmac_clear_rx_descriptors(priv,queue);
    #line 1188 
    queue ++;
  }
  #line 1192 
  queue = 0U;
  #line 1192 
  while (queue < tx_queue_cnt) {
    #line 1193 
    stmmac_clear_tx_descriptors(priv,queue);
    #line 1192 
    queue ++;
  }
  #line 1194 
  return;
}

#line 1206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_init_rx_buffers(struct stmmac_priv *priv, struct dma_desc *p, int i, gfp_t flags, u32 queue)
{
  #line 1209 
  struct stmmac_rx_queue *rx_q = & priv->rx_queue[queue];
  #line 1210 
  struct stmmac_rx_buffer *buf = rx_q->buf_pool + (unsigned long)i;
  #line 1212 
  buf->page = page_pool_dev_alloc_pages(rx_q->page_pool);
  #line 1213 
  if (buf->page == (struct page *)0) 
                                     #line 1214 
                                     return -12;
  #line 1216 
  if (priv->sph != 0) {
    #line 1217 
    buf->sec_page = page_pool_dev_alloc_pages(rx_q->page_pool);
    #line 1218 
    if (buf->sec_page == (struct page *)0) 
                                           #line 1219 
                                           return -12;
    #line 1221 
    buf->sec_addr = page_pool_get_dma_addr(buf->sec_page);
    {
      #line 1222 
      int __result = -22;
      #line 1222 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_sec_addr != (void (*)(struct dma_desc *, dma_addr_t ))0) {
        #line 1222 
        (*(((priv->hw)->desc)->set_sec_addr))(p,buf->sec_addr);
        #line 1222 
        __result = 0;
      }
      #line 1222 
      int tmp = __result;
    }
  }
  else 
       #line 1224 
       buf->sec_page = (struct page *)0;
  #line 1227 
  buf->addr = page_pool_get_dma_addr(buf->page);
  {
    #line 1228 
    int __result_0 = -22;
    #line 1228 
    if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_addr != (void (*)(struct dma_desc *, dma_addr_t ))0) {
      #line 1228 
      (*(((priv->hw)->desc)->set_addr))(p,buf->addr);
      #line 1228 
      __result_0 = 0;
    }
    #line 1228 
    int tmp_3 = __result_0;
  }
  #line 1229 
  if (priv->dma_buf_sz == 16368U) {
    #line 1230 
    int __result_1 = -22;
    #line 1230 
    if ((priv->hw)->mode != (struct stmmac_mode_ops *)0 && ((priv->hw)->mode)->init_desc3 != (void (*)(struct dma_desc *))0) {
      #line 1230 
      (*(((priv->hw)->mode)->init_desc3))(p);
      #line 1230 
      __result_1 = 0;
    }
    #line 1230 
    int tmp_5 = __result_1;
  }
  #line 1232 
  return 0;
}

#line 1241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_free_rx_buffer(struct stmmac_priv *priv, u32 queue, int i)
{
  #line 1243 
  struct stmmac_rx_queue *rx_q = & priv->rx_queue[queue];
  #line 1244 
  struct stmmac_rx_buffer *buf = rx_q->buf_pool + (unsigned long)i;
  #line 1246 
  if (buf->page != (struct page *)0) 
                                     #line 1247 
                                     page_pool_put_page(rx_q->page_pool,buf->page,(_Bool)0);
  #line 1248 
  buf->page = (struct page *)0;
  #line 1250 
  if (buf->sec_page != (struct page *)0) 
                                         #line 1251 
                                         page_pool_put_page(rx_q->page_pool,buf->sec_page,(_Bool)0);
  #line 1252 
  buf->sec_page = (struct page *)0;
  #line 1253 
  return;
}

#line 1261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_free_tx_buffer(struct stmmac_priv *priv, u32 queue, int i)
{
  #line 1263 
  struct stmmac_tx_queue *tx_q = & priv->tx_queue[queue];
  #line 1265 
  if ((tx_q->tx_skbuff_dma + (unsigned long)i)->buf != 0ULL) 
    #line 1266 
    if ((int)(tx_q->tx_skbuff_dma + (unsigned long)i)->map_as_page != 0) 
      #line 1267 
      dma_unmap_page_attrs(priv->device,(tx_q->tx_skbuff_dma + (unsigned long)i)->buf,(unsigned long)(tx_q->tx_skbuff_dma + (unsigned long)i)->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL); else 
                                                                    #line 1272 
                                                                    dma_unmap_single_attrs(priv->device,(tx_q->tx_skbuff_dma + (unsigned long)i)->buf,(unsigned long)(tx_q->tx_skbuff_dma + (unsigned long)i)->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 1278 
  if (*(tx_q->tx_skbuff + (unsigned long)i) != (struct sk_buff *)0) {
    #line 1279 
    dev_kfree_skb_any(*(tx_q->tx_skbuff + (unsigned long)i));
    #line 1280 
    *(tx_q->tx_skbuff + (unsigned long)i) = (struct sk_buff *)0;
    #line 1281 
    (tx_q->tx_skbuff_dma + (unsigned long)i)->buf = 0ULL;
    #line 1282 
    (tx_q->tx_skbuff_dma + (unsigned long)i)->map_as_page = (_Bool)0;
  }
  #line 1284 
  return;
}

#line 1294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int init_dma_rx_desc_rings(struct net_device *dev, gfp_t flags)
{
  #line 1299 
  int queue;
  #line 1300 
  int i;
  #line 1296 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 1297 
  u32 rx_count = (priv->plat)->rx_queues_to_use;
  #line 1298 
  int ret = -12;
  #line 1303 
  if ((priv->msg_enable & 2U) != 0U) {
    #line 1303 
    bool branch;
    #line 1303 
    struct _ddebug __UNIQUE_ID_ddebug569 = {.modname = (char *)"stmmac", .function = (char *)"init_dma_rx_desc_rings", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"SKB addresses:\nskb\t\tskb data\tdma data\n", .lineno = (unsigned int)1303U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1303 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug569.key.dd_key_false.key,(_Bool)0);
    #line 1303 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1303 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug569,priv->dev,(char *)"SKB addresses:\nskb\t\tskb data\tdma data\n");
  }
  #line 1306 
  queue = 0;
  #line 1306 
  while ((unsigned int)queue < rx_count) {
    {
      #line 1307 
      struct stmmac_rx_queue *rx_q = & priv->rx_queue[queue];
      #line 1309 
      if ((priv->msg_enable & 2U) != 0U) {
        #line 1309 
        bool branch_0;
        #line 1309 
        struct _ddebug __UNIQUE_ID_ddebug570 = {.modname = (char *)"stmmac", .function = (char *)"init_dma_rx_desc_rings", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"(%s) dma_rx_phy=0x%08x\n", .lineno = (unsigned int)1309U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1309 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug570.key.dd_key_false.key,(_Bool)0);
        #line 1309 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 1309 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug570,priv->dev,(char *)"(%s) dma_rx_phy=0x%08x\n",(char *)"init_dma_rx_desc_rings",(unsigned int)rx_q->dma_rx_phy);
      }
      #line 1313 
      stmmac_clear_rx_descriptors(priv,(unsigned int)queue);
      #line 1315 
      i = 0;
      #line 1315 
      while (i <= 511) {
        {
          #line 1316 
          struct dma_desc *p;
          #line 1318 
          if (priv->extend_desc != 0) 
                                      #line 1319 
                                      p = & (rx_q->dma_erx + (unsigned long)i)->basic; else 
                                                                    #line 1321 
                                                                    p = rx_q->dma_rx + (unsigned long)i;
          #line 1323 
          ret = stmmac_init_rx_buffers(priv,p,i,flags,(unsigned int)queue);
          #line 1325 
          if (ret != 0) 
                        #line 1326 
                        goto err_init_rx_buffers;
        }
        #line 1315 
        i ++;
      }
      #line 1329 
      rx_q->cur_rx = 0U;
      #line 1330 
      rx_q->dirty_rx = (unsigned int)(i + -512);
      #line 1333 
      if (priv->mode == 1U) 
        #line 1334 
        if (priv->extend_desc != 0) {
          #line 1335 
          int __result = -22;
          #line 1335 
          if ((priv->hw)->mode != (struct stmmac_mode_ops *)0 && ((priv->hw)->mode)->init != (void (*)(void *, dma_addr_t , unsigned int , unsigned int ))0) {
            #line 1335 
            (*(((priv->hw)->mode)->init))((void *)rx_q->dma_erx,rx_q->dma_rx_phy,512U,1U);
            #line 1335 
            __result = 0;
          }
          #line 1335 
          int tmp_2 = __result;
        }
        else {
          #line 1338 
          int __result_0 = -22;
          #line 1338 
          if ((priv->hw)->mode != (struct stmmac_mode_ops *)0 && ((priv->hw)->mode)->init != (void (*)(void *, dma_addr_t , unsigned int , unsigned int ))0) {
            #line 1338 
            (*(((priv->hw)->mode)->init))((void *)rx_q->dma_rx,rx_q->dma_rx_phy,512U,0U);
            #line 1338 
            __result_0 = 0;
          }
          #line 1338 
          int tmp_4 = __result_0;
        }
    }
    #line 1306 
    queue ++;
  }
  #line 1343 
  return 0;
  #line 1345 
  err_init_rx_buffers: 
                       #line 1345 
  ;
  #line 1346 
  while (queue >= 0) {
    #line 1347 
    while (1) {
      #line 1347 
      i --;
      #line 1347 
      if (! (i >= 0)) 
                      #line 1347 
                      break;
      #line 1348 
      stmmac_free_rx_buffer(priv,(unsigned int)queue,i);
    }
    #line 1350 
    if (queue == 0) 
                    #line 1351 
                    break;
    #line 1353 
    i = 512;
    #line 1354 
    queue --;
  }
  #line 1357 
  return ret;
}

#line 1367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int init_dma_tx_desc_rings(struct net_device *dev)
{
  #line 1371 
  u32 queue;
  #line 1372 
  int i;
  #line 1369 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 1370 
  u32 tx_queue_cnt = (priv->plat)->tx_queues_to_use;
  #line 1374 
  queue = 0U;
  #line 1374 
  while (queue < tx_queue_cnt) {
    {
      #line 1375 
      struct stmmac_tx_queue *tx_q = & priv->tx_queue[queue];
      #line 1377 
      if ((priv->msg_enable & 2U) != 0U) {
        #line 1377 
        bool branch;
        #line 1377 
        struct _ddebug __UNIQUE_ID_ddebug571 = {.modname = (char *)"stmmac", .function = (char *)"init_dma_tx_desc_rings", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"(%s) dma_tx_phy=0x%08x\n", .lineno = (unsigned int)1377U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1377 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug571.key.dd_key_false.key,(_Bool)0);
        #line 1377 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 1377 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug571,priv->dev,(char *)"(%s) dma_tx_phy=0x%08x\n",(char *)"init_dma_tx_desc_rings",(unsigned int)tx_q->dma_tx_phy);
      }
      #line 1382 
      if (priv->mode == 1U) 
        #line 1383 
        if (priv->extend_desc != 0) {
          #line 1384 
          int __result = -22;
          #line 1384 
          if ((priv->hw)->mode != (struct stmmac_mode_ops *)0 && ((priv->hw)->mode)->init != (void (*)(void *, dma_addr_t , unsigned int , unsigned int ))0) {
            #line 1384 
            (*(((priv->hw)->mode)->init))((void *)tx_q->dma_etx,tx_q->dma_tx_phy,512U,1U);
            #line 1384 
            __result = 0;
          }
          #line 1384 
          int tmp_2 = __result;
        }
        else {
          #line 1387 
          int __result_0 = -22;
          #line 1387 
          if ((priv->hw)->mode != (struct stmmac_mode_ops *)0 && ((priv->hw)->mode)->init != (void (*)(void *, dma_addr_t , unsigned int , unsigned int ))0) {
            #line 1387 
            (*(((priv->hw)->mode)->init))((void *)tx_q->dma_tx,tx_q->dma_tx_phy,512U,0U);
            #line 1387 
            __result_0 = 0;
          }
          #line 1387 
          int tmp_4 = __result_0;
        }
      #line 1391 
      i = 0;
      #line 1391 
      while (i <= 511) {
        {
          #line 1392 
          struct dma_desc *p;
          #line 1393 
          if (priv->extend_desc != 0) 
                                      #line 1394 
                                      p = & (tx_q->dma_etx + (unsigned long)i)->basic; else 
                                                                    #line 1396 
                                                                    p = tx_q->dma_tx + (unsigned long)i;
          {
            #line 1398 
            int __result_1 = -22;
            #line 1398 
            if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->clear != (void (*)(struct dma_desc *))0) {
              #line 1398 
              (*(((priv->hw)->desc)->clear))(p);
              #line 1398 
              __result_1 = 0;
            }
            #line 1398 
            int tmp_6 = __result_1;
          }
          #line 1400 
          (tx_q->tx_skbuff_dma + (unsigned long)i)->buf = 0ULL;
          #line 1401 
          (tx_q->tx_skbuff_dma + (unsigned long)i)->map_as_page = (_Bool)0;
          #line 1402 
          (tx_q->tx_skbuff_dma + (unsigned long)i)->len = 0U;
          #line 1403 
          (tx_q->tx_skbuff_dma + (unsigned long)i)->last_segment = (_Bool)0;
          #line 1404 
          *(tx_q->tx_skbuff + (unsigned long)i) = (struct sk_buff *)0;
        }
        #line 1391 
        i ++;
      }
      #line 1407 
      tx_q->dirty_tx = 0U;
      #line 1408 
      tx_q->cur_tx = 0U;
      #line 1409 
      tx_q->mss = 0U;
      #line 1411 
      netdev_tx_reset_queue(netdev_get_tx_queue(priv->dev,queue));
    }
    #line 1374 
    queue ++;
  }
  #line 1414 
  return 0;
}

#line 1425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int init_dma_desc_rings(struct net_device *dev, gfp_t flags)
{
  #line 1428 
  int ret;
  #line 1427 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 1430 
  ret = init_dma_rx_desc_rings(dev,flags);
  #line 1431 
  if (ret != 0) 
                #line 1432 
                return ret;
  #line 1434 
  ret = init_dma_tx_desc_rings(dev);
  #line 1436 
  stmmac_clear_descriptors(priv);
  #line 1438 
  if ((priv->msg_enable & 8192U) != 0U) 
                                        #line 1439 
                                        stmmac_display_rings(priv);
  #line 1441 
  return ret;
}

#line 1449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void dma_free_rx_skbufs(struct stmmac_priv *priv, u32 queue)
{
  #line 1451 
  int i;
  #line 1453 
  i = 0;
  #line 1453 
  while (i <= 511) {
    #line 1454 
    stmmac_free_rx_buffer(priv,queue,i);
    #line 1453 
    i ++;
  }
  #line 1455 
  return;
}

#line 1462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void dma_free_tx_skbufs(struct stmmac_priv *priv, u32 queue)
{
  #line 1464 
  int i;
  #line 1466 
  i = 0;
  #line 1466 
  while (i <= 511) {
    #line 1467 
    stmmac_free_tx_buffer(priv,queue,i);
    #line 1466 
    i ++;
  }
  #line 1468 
  return;
}

#line 1474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void free_dma_rx_desc_resources(struct stmmac_priv *priv)
{
  #line 1477 
  u32 queue;
  #line 1476 
  u32 rx_count = (priv->plat)->rx_queues_to_use;
  #line 1480 
  queue = 0U;
  #line 1480 
  while (queue < rx_count) {
    {
      #line 1481 
      struct stmmac_rx_queue *rx_q = & priv->rx_queue[queue];
      #line 1484 
      dma_free_rx_skbufs(priv,queue);
      #line 1487 
      if (priv->extend_desc == 0) 
                                  #line 1488 
                                  dma_free_coherent(priv->device,8192UL,(void *)rx_q->dma_rx,rx_q->dma_rx_phy); else 
                                                                    #line 1492 
                                                                    dma_free_coherent(priv->device,16384UL,(void *)rx_q->dma_erx,rx_q->dma_rx_phy);
      #line 1496 
      kfree((void *)rx_q->buf_pool);
      #line 1497 
      if (rx_q->page_pool != (struct page_pool *)0) 
                                                    #line 1498 
                                                    page_pool_destroy(rx_q->page_pool);
    }
    #line 1480 
    queue ++;
  }
  #line 1500 
  return;
}

#line 1506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void free_dma_tx_desc_resources(struct stmmac_priv *priv)
{
  #line 1509 
  u32 queue;
  #line 1508 
  u32 tx_count = (priv->plat)->tx_queues_to_use;
  #line 1512 
  queue = 0U;
  #line 1512 
  while (queue < tx_count) {
    {
      #line 1513 
      struct stmmac_tx_queue *tx_q = & priv->tx_queue[queue];
      #line 1516 
      dma_free_tx_skbufs(priv,queue);
      #line 1519 
      if (priv->extend_desc == 0) 
                                  #line 1520 
                                  dma_free_coherent(priv->device,8192UL,(void *)tx_q->dma_tx,tx_q->dma_tx_phy); else 
                                                                    #line 1524 
                                                                    dma_free_coherent(priv->device,16384UL,(void *)tx_q->dma_etx,tx_q->dma_tx_phy);
      #line 1528 
      kfree((void *)tx_q->tx_skbuff_dma);
      #line 1529 
      kfree((void *)tx_q->tx_skbuff);
    }
    #line 1512 
    queue ++;
  }
  #line 1531 
  return;
}

#line 1541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int alloc_dma_rx_desc_resources(struct stmmac_priv *priv)
{
  #line 1545 
  u32 queue;
  #line 1543 
  u32 rx_count = (priv->plat)->rx_queues_to_use;
  #line 1544 
  int ret = -12;
  #line 1548 
  queue = 0U;
  #line 1548 
  while (queue < rx_count) {
    {
      #line 1551 
      unsigned int num_pages;
      #line 1549 
      struct stmmac_rx_queue *rx_q = & priv->rx_queue[queue];
      #line 1550 
      struct page_pool_params pp_params = {.flags = 0U, .order = 0U, .pool_size = 0U, .nid = 0, .dev = (struct device *)0, .dma_dir = 0, .max_len = 0U, .offset = 0U};
      #line 1553 
      rx_q->queue_index = queue;
      #line 1554 
      rx_q->priv_data = priv;
      #line 1556 
      pp_params.flags = 1U;
      #line 1557 
      pp_params.pool_size = 512U;
      #line 1558 
      num_pages = (unsigned int)(((unsigned long)priv->dma_buf_sz + 4095UL) / 4096UL);
      #line 1559 
      if (0 != 0) {
        #line 1559 
        unsigned int tmp_21;
        #line 1559 
        unsigned int tmp_53;
        #line 1559 
        unsigned int tmp_54;
        #line 1559 
        unsigned int tmp_22;
        #line 1559 
        unsigned int tmp_23;
        #line 1559 
        unsigned int tmp_55;
        #line 1559 
        unsigned int tmp_56;
        #line 1559 
        unsigned int tmp_24;
        #line 1559 
        unsigned int tmp_25;
        #line 1559 
        unsigned int tmp_57;
        #line 1559 
        unsigned int tmp_58;
        #line 1559 
        unsigned int tmp_26;
        #line 1559 
        unsigned int tmp_27;
        #line 1559 
        unsigned int tmp_59;
        #line 1559 
        unsigned int tmp_60;
        #line 1559 
        unsigned int tmp_28;
        #line 1559 
        unsigned int tmp_29;
        #line 1559 
        unsigned int tmp_30;
        #line 1559 
        unsigned int tmp;
        #line 1559 
        unsigned int tmp_31;
        #line 1559 
        unsigned int tmp_32;
        #line 1559 
        unsigned int tmp_0;
        #line 1559 
        unsigned int tmp_1;
        #line 1559 
        unsigned int tmp_33;
        #line 1559 
        unsigned int tmp_34;
        #line 1559 
        unsigned int tmp_2;
        #line 1559 
        unsigned int tmp_3;
        #line 1559 
        unsigned int tmp_35;
        #line 1559 
        unsigned int tmp_36;
        #line 1559 
        unsigned int tmp_4;
        #line 1559 
        unsigned int tmp_5;
        #line 1559 
        unsigned int tmp_37;
        #line 1559 
        unsigned int tmp_38;
        #line 1559 
        unsigned int tmp_6;
        #line 1559 
        unsigned int tmp_7;
        #line 1559 
        unsigned int tmp_39;
        #line 1559 
        unsigned int tmp_40;
        #line 1559 
        unsigned int tmp_8;
        #line 1559 
        unsigned int tmp_9;
        #line 1559 
        unsigned int tmp_41;
        #line 1559 
        unsigned int tmp_42;
        #line 1559 
        unsigned int tmp_10;
        #line 1559 
        unsigned int tmp_11;
        #line 1559 
        unsigned int tmp_43;
        #line 1559 
        unsigned int tmp_44;
        #line 1559 
        unsigned int tmp_12;
        #line 1559 
        unsigned int tmp_13;
        #line 1559 
        unsigned int tmp_45;
        #line 1559 
        unsigned int tmp_46;
        #line 1559 
        unsigned int tmp_14;
        #line 1559 
        unsigned int tmp_15;
        #line 1559 
        unsigned int tmp_47;
        #line 1559 
        unsigned int tmp_48;
        #line 1559 
        unsigned int tmp_16;
        #line 1559 
        unsigned int tmp_17;
        #line 1559 
        unsigned int tmp_49;
        #line 1559 
        unsigned int tmp_50;
        #line 1559 
        unsigned int tmp_18;
        #line 1559 
        unsigned int tmp_19;
        #line 1559 
        unsigned int tmp_51;
        #line 1559 
        unsigned int tmp_52;
        #line 1559 
        unsigned int tmp_20;
        #line 1559 
        unsigned int tmp_61;
        #line 1559 
        if (num_pages > 1U) {
          #line 1559 
          if (((unsigned long long)num_pages & 9223372036854775808ULL) == 0ULL) {
            #line 1559 
            if (((unsigned long long)num_pages & 4611686018427387904ULL) == 0ULL) {
              #line 1559 
              if (((unsigned long long)num_pages & 2305843009213693952ULL) == 0ULL) {
                #line 1559 
                if (((unsigned long long)num_pages & 1152921504606846976ULL) == 0ULL) {
                  #line 1559 
                  if (((unsigned long long)num_pages & 576460752303423488ULL) == 0ULL) {
                    #line 1559 
                    if (((unsigned long long)num_pages & 288230376151711744ULL) == 0ULL) {
                      #line 1559 
                      if (((unsigned long long)num_pages & 144115188075855872ULL) == 0ULL) {
                        #line 1559 
                        if (((unsigned long long)num_pages & 72057594037927936ULL) == 0ULL) {
                          #line 1559 
                          if (((unsigned long long)num_pages & 36028797018963968ULL) == 0ULL) {
                            #line 1559 
                            if (((unsigned long long)num_pages & 18014398509481984ULL) == 0ULL) {
                              #line 1559 
                              if (((unsigned long long)num_pages & 9007199254740992ULL) == 0ULL) {
                                #line 1559 
                                if (((unsigned long long)num_pages & 4503599627370496ULL) == 0ULL) {
                                  #line 1559 
                                  if (((unsigned long long)num_pages & 2251799813685248ULL) == 0ULL) {
                                    #line 1559 
                                    if (((unsigned long long)num_pages & 1125899906842624ULL) == 0ULL) {
                                      #line 1559 
                                      if (((unsigned long long)num_pages & 562949953421312ULL) == 0ULL) {
                                        #line 1559 
                                        if (((unsigned long long)num_pages & 281474976710656ULL) == 0ULL) {
                                          #line 1559 
                                          if (((unsigned long long)num_pages & 140737488355328ULL) == 0ULL) {
                                            #line 1559 
                                            if (((unsigned long long)num_pages & 70368744177664ULL) == 0ULL) {
                                              #line 1559 
                                              if (((unsigned long long)num_pages & 35184372088832ULL) == 0ULL) {
                                                #line 1559 
                                                if (((unsigned long long)num_pages & 17592186044416ULL) == 0ULL) {
                                                  #line 1559 
                                                  if (((unsigned long long)num_pages & 8796093022208ULL) == 0ULL) {
                                                    #line 1559 
                                                    if (((unsigned long long)num_pages & 4398046511104ULL) == 0ULL) {
                                                      #line 1559 
                                                      if (((unsigned long long)num_pages & 2199023255552ULL) == 0ULL) {
                                                        #line 1559 
                                                        if (((unsigned long long)num_pages & 1099511627776ULL) == 0ULL) {
                                                          #line 1559 
                                                          if (((unsigned long long)num_pages & 549755813888ULL) == 0ULL) {
                                                            #line 1559 
                                                            if (((unsigned long long)num_pages & 274877906944ULL) == 0ULL) {
                                                              #line 1559 
                                                              if (((unsigned long long)num_pages & 137438953472ULL) == 0ULL) {
                                                                #line 1559 
                                                                if (((unsigned long long)num_pages & 68719476736ULL) == 0ULL) {
                                                                  #line 1559 
                                                                  if (
                                                                    ((unsigned long long)num_pages & 34359738368ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 17179869184ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 8589934592ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 4294967296ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 2147483648ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 1073741824ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 536870912ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 268435456ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 134217728ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 67108864ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 33554432ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 16777216ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 8388608ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 4194304ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 2097152ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 1048576ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 524288ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 262144ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 131072ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 65536ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 32768ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 16384ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 8192ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 4096ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 2048ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 1024ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 512ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 256ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 128ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 64ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 32ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 16ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 8ULL) == 0ULL) {
                                                                    #line 1559 
                                                                    if (
                                                                    ((unsigned long long)num_pages & 4ULL) != 0ULL) 
                                                                    #line 1559 
                                                                    tmp = 2U; else 
                                                                    #line 1559 
                                                                    tmp = 1U;
                                                                    #line 1559 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_0 = 3U;
                                                                    #line 1559 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_1 = 4U;
                                                                    #line 1559 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_2 = 5U;
                                                                    #line 1559 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_3 = 6U;
                                                                    #line 1559 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_4 = 7U;
                                                                    #line 1559 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_5 = 8U;
                                                                    #line 1559 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_6 = 9U;
                                                                    #line 1559 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_7 = 10U;
                                                                    #line 1559 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_8 = 11U;
                                                                    #line 1559 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_9 = 12U;
                                                                    #line 1559 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_10 = 13U;
                                                                    #line 1559 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_11 = 14U;
                                                                    #line 1559 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_12 = 15U;
                                                                    #line 1559 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_13 = 16U;
                                                                    #line 1559 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_14 = 17U;
                                                                    #line 1559 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_15 = 18U;
                                                                    #line 1559 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_16 = 19U;
                                                                    #line 1559 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_17 = 20U;
                                                                    #line 1559 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_18 = 21U;
                                                                    #line 1559 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_19 = 22U;
                                                                    #line 1559 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_20 = 23U;
                                                                    #line 1559 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_21 = 24U;
                                                                    #line 1559 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_22 = 25U;
                                                                    #line 1559 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_23 = 26U;
                                                                    #line 1559 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_24 = 27U;
                                                                    #line 1559 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_25 = 28U;
                                                                    #line 1559 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_26 = 29U;
                                                                    #line 1559 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_27 = 30U;
                                                                    #line 1559 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_28 = 31U;
                                                                    #line 1559 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_29 = 32U;
                                                                    #line 1559 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_30 = 33U;
                                                                    #line 1559 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 1559 
                                                                    tmp_31 = 34U;
                                                                    #line 1559 
                                                                    tmp_32 = tmp_31;
                                                                  }
                                                                  else 
                                                                    #line 1559 
                                                                    tmp_32 = 35U;
                                                                  #line 1559 
                                                                  tmp_33 = tmp_32;
                                                                }
                                                                else 
                                                                  #line 1559 
                                                                  tmp_33 = 36U;
                                                                #line 1559 
                                                                tmp_34 = tmp_33;
                                                              }
                                                              else 
                                                                   #line 1559 
                                                                   tmp_34 = 37U;
                                                              #line 1559 
                                                              tmp_35 = tmp_34;
                                                            }
                                                            else 
                                                                 #line 1559 
                                                                 tmp_35 = 38U;
                                                            #line 1559 
                                                            tmp_36 = tmp_35;
                                                          }
                                                          else 
                                                               #line 1559 
                                                               tmp_36 = 39U;
                                                          #line 1559 
                                                          tmp_37 = tmp_36;
                                                        }
                                                        else 
                                                             #line 1559 
                                                             tmp_37 = 40U;
                                                        #line 1559 
                                                        tmp_38 = tmp_37;
                                                      }
                                                      else 
                                                           #line 1559 
                                                           tmp_38 = 41U;
                                                      #line 1559 
                                                      tmp_39 = tmp_38;
                                                    }
                                                    else 
                                                         #line 1559 
                                                         tmp_39 = 42U;
                                                    #line 1559 
                                                    tmp_40 = tmp_39;
                                                  }
                                                  else 
                                                       #line 1559 
                                                       tmp_40 = 43U;
                                                  #line 1559 
                                                  tmp_41 = tmp_40;
                                                }
                                                else 
                                                     #line 1559 
                                                     tmp_41 = 44U;
                                                #line 1559 
                                                tmp_42 = tmp_41;
                                              }
                                              else 
                                                   #line 1559 
                                                   tmp_42 = 45U;
                                              #line 1559 
                                              tmp_43 = tmp_42;
                                            }
                                            else 
                                                 #line 1559 
                                                 tmp_43 = 46U;
                                            #line 1559 
                                            tmp_44 = tmp_43;
                                          }
                                          else 
                                               #line 1559 
                                               tmp_44 = 47U;
                                          #line 1559 
                                          tmp_45 = tmp_44;
                                        }
                                        else 
                                             #line 1559 
                                             tmp_45 = 48U;
                                        #line 1559 
                                        tmp_46 = tmp_45;
                                      }
                                      else 
                                           #line 1559 
                                           tmp_46 = 49U;
                                      #line 1559 
                                      tmp_47 = tmp_46;
                                    }
                                    else 
                                         #line 1559 
                                         tmp_47 = 50U;
                                    #line 1559 
                                    tmp_48 = tmp_47;
                                  }
                                  else 
                                       #line 1559 
                                       tmp_48 = 51U;
                                  #line 1559 
                                  tmp_49 = tmp_48;
                                }
                                else 
                                     #line 1559 
                                     tmp_49 = 52U;
                                #line 1559 
                                tmp_50 = tmp_49;
                              }
                              else 
                                   #line 1559 
                                   tmp_50 = 53U;
                              #line 1559 
                              tmp_51 = tmp_50;
                            }
                            else 
                                 #line 1559 
                                 tmp_51 = 54U;
                            #line 1559 
                            tmp_52 = tmp_51;
                          }
                          else 
                               #line 1559 
                               tmp_52 = 55U;
                          #line 1559 
                          tmp_53 = tmp_52;
                        }
                        else 
                             #line 1559 
                             tmp_53 = 56U;
                        #line 1559 
                        tmp_54 = tmp_53;
                      }
                      else 
                           #line 1559 
                           tmp_54 = 57U;
                      #line 1559 
                      tmp_55 = tmp_54;
                    }
                    else 
                         #line 1559 
                         tmp_55 = 58U;
                    #line 1559 
                    tmp_56 = tmp_55;
                  }
                  else 
                       #line 1559 
                       tmp_56 = 59U;
                  #line 1559 
                  tmp_57 = tmp_56;
                }
                else 
                     #line 1559 
                     tmp_57 = 60U;
                #line 1559 
                tmp_58 = tmp_57;
              }
              else 
                   #line 1559 
                   tmp_58 = 61U;
              #line 1559 
              tmp_59 = tmp_58;
            }
            else 
                 #line 1559 
                 tmp_59 = 62U;
            #line 1559 
            tmp_60 = tmp_59;
          }
          else 
               #line 1559 
               tmp_60 = 63U;
          #line 1559 
          tmp_61 = tmp_60;
        }
        else 
             #line 1559 
             tmp_61 = 0U;
        #line 1559 
        pp_params.order = tmp_61;
      }
      else {
        #line 1559 
        pp_params.order = (unsigned int)__ilog2_u32(num_pages);
      }
      #line 1560 
      pp_params.nid = dev_to_node(priv->device);
      #line 1561 
      pp_params.dev = priv->device;
      #line 1562 
      pp_params.dma_dir = DMA_FROM_DEVICE;
      #line 1564 
      rx_q->page_pool = page_pool_create(& pp_params);
      #line 1565 
      if ((int)IS_ERR_1((void *)rx_q->page_pool) != 0) {
        #line 1566 
        ret = (int)PTR_ERR_0((void *)rx_q->page_pool);
        #line 1567 
        rx_q->page_pool = (struct page_pool *)0;
        #line 1568 
        goto err_dma;
      }
      #line 1571 
      rx_q->buf_pool = (struct stmmac_rx_buffer *)kcalloc(512UL,32UL,3264U);
      #line 1573 
      if (rx_q->buf_pool == (struct stmmac_rx_buffer *)0) 
                                                          #line 1574 
                                                          goto err_dma;
      #line 1576 
      if (priv->extend_desc != 0) {
        #line 1577 
        rx_q->dma_erx = (struct dma_extended_desc *)dma_alloc_coherent(priv->device,16384UL,& rx_q->dma_rx_phy,3264U);
        #line 1581 
        if (rx_q->dma_erx == (struct dma_extended_desc *)0) 
                                                            #line 1582 
                                                            goto err_dma;
      }
      else {
        #line 1585 
        rx_q->dma_rx = (struct dma_desc *)dma_alloc_coherent(priv->device,8192UL,& rx_q->dma_rx_phy,3264U);
        #line 1589 
        if (rx_q->dma_rx == (struct dma_desc *)0) 
                                                  #line 1590 
                                                  goto err_dma;
      }
    }
    #line 1548 
    queue ++;
  }
  #line 1594 
  return 0;
  #line 1596 
  err_dma: 
           #line 1596 
  ;
  #line 1597 
  free_dma_rx_desc_resources(priv);
  #line 1599 
  return ret;
}

#line 1610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int alloc_dma_tx_desc_resources(struct stmmac_priv *priv)
{
  #line 1614 
  u32 queue;
  #line 1612 
  u32 tx_count = (priv->plat)->tx_queues_to_use;
  #line 1613 
  int ret = -12;
  #line 1617 
  queue = 0U;
  #line 1617 
  while (queue < tx_count) {
    {
      #line 1618 
      struct stmmac_tx_queue *tx_q = & priv->tx_queue[queue];
      #line 1620 
      tx_q->queue_index = queue;
      #line 1621 
      tx_q->priv_data = priv;
      #line 1623 
      tx_q->tx_skbuff_dma = (struct stmmac_tx_info *)kcalloc(512UL,24UL,3264U);
      #line 1626 
      if (tx_q->tx_skbuff_dma == (struct stmmac_tx_info *)0) 
                                                             #line 1627 
                                                             goto err_dma;
      #line 1629 
      tx_q->tx_skbuff = (struct sk_buff **)kcalloc(512UL,8UL,3264U);
      #line 1632 
      if (tx_q->tx_skbuff == (struct sk_buff **)0) 
                                                   #line 1633 
                                                   goto err_dma;
      #line 1635 
      if (priv->extend_desc != 0) {
        #line 1636 
        tx_q->dma_etx = (struct dma_extended_desc *)dma_alloc_coherent(priv->device,16384UL,& tx_q->dma_tx_phy,3264U);
        #line 1640 
        if (tx_q->dma_etx == (struct dma_extended_desc *)0) 
                                                            #line 1641 
                                                            goto err_dma;
      }
      else {
        #line 1643 
        tx_q->dma_tx = (struct dma_desc *)dma_alloc_coherent(priv->device,8192UL,& tx_q->dma_tx_phy,3264U);
        #line 1647 
        if (tx_q->dma_tx == (struct dma_desc *)0) 
                                                  #line 1648 
                                                  goto err_dma;
      }
    }
    #line 1617 
    queue ++;
  }
  #line 1652 
  return 0;
  #line 1654 
  err_dma: 
           #line 1654 
  ;
  #line 1655 
  free_dma_tx_desc_resources(priv);
  #line 1657 
  return ret;
}

#line 1668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int alloc_dma_desc_resources(struct stmmac_priv *priv)
{
  #line 1671 
  int ret = alloc_dma_rx_desc_resources(priv);
  #line 1673 
  if (ret != 0) 
                #line 1674 
                return ret;
  #line 1676 
  ret = alloc_dma_tx_desc_resources(priv);
  #line 1678 
  return ret;
}

#line 1685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void free_dma_desc_resources(struct stmmac_priv *priv)
{
  #line 1688 
  free_dma_rx_desc_resources(priv);
  #line 1691 
  free_dma_tx_desc_resources(priv);
  #line 1692 
  return;
}

#line 1699  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_mac_enable_rx_queues(struct stmmac_priv *priv)
{
  #line 1702 
  int queue;
  #line 1703 
  u8 mode;
  #line 1701 
  u32 rx_queues_count = (priv->plat)->rx_queues_to_use;
  #line 1705 
  queue = 0;
  #line 1705 
  while ((unsigned int)queue < rx_queues_count) {
    #line 1706 
    mode = (priv->plat)->rx_queues_cfg[queue].mode_to_use;
    {
      #line 1707 
      int __result = -22;
      #line 1707 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->rx_queue_enable != (void (*)(struct mac_device_info *, u8 , u32 ))0) {
        #line 1707 
        (*(((priv->hw)->mac)->rx_queue_enable))(priv->hw,(unsigned char)((int)mode),(unsigned int)queue);
        #line 1707 
        __result = 0;
      }
      #line 1707 
      int tmp = __result;
    }
    #line 1705 
    queue ++;
  }
  #line 1710 
  return;
}

#line 1718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_start_rx_dma(struct stmmac_priv *priv, u32 chan)
{
  {
    #line 1720 
    bool branch;
    #line 1720 
    struct _ddebug __UNIQUE_ID_ddebug572 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_start_rx_dma", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"DMA RX processes started in channel %d\n", .lineno = (unsigned int)1720U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1720 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug572.key.dd_key_false.key,(_Bool)0);
    #line 1720 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1720 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug572,priv->dev,(char *)"DMA RX processes started in channel %d\n",chan);
  }
  {
    #line 1721 
    int __result = -22;
    #line 1721 
    if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->start_rx != (void (*)(void *, u32 ))0) {
      #line 1721 
      (*(((priv->hw)->dma)->start_rx))(priv->ioaddr,chan);
      #line 1721 
      __result = 0;
    }
    #line 1721 
    int tmp_2 = __result;
  }
  #line 1723 
  return;
}

#line 1731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_start_tx_dma(struct stmmac_priv *priv, u32 chan)
{
  {
    #line 1733 
    bool branch;
    #line 1733 
    struct _ddebug __UNIQUE_ID_ddebug573 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_start_tx_dma", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"DMA TX processes started in channel %d\n", .lineno = (unsigned int)1733U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1733 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug573.key.dd_key_false.key,(_Bool)0);
    #line 1733 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1733 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug573,priv->dev,(char *)"DMA TX processes started in channel %d\n",chan);
  }
  {
    #line 1734 
    int __result = -22;
    #line 1734 
    if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->start_tx != (void (*)(void *, u32 ))0) {
      #line 1734 
      (*(((priv->hw)->dma)->start_tx))(priv->ioaddr,chan);
      #line 1734 
      __result = 0;
    }
    #line 1734 
    int tmp_2 = __result;
  }
  #line 1736 
  return;
}

#line 1744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_stop_rx_dma(struct stmmac_priv *priv, u32 chan)
{
  {
    #line 1746 
    bool branch;
    #line 1746 
    struct _ddebug __UNIQUE_ID_ddebug574 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_stop_rx_dma", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"DMA RX processes stopped in channel %d\n", .lineno = (unsigned int)1746U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1746 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug574.key.dd_key_false.key,(_Bool)0);
    #line 1746 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1746 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug574,priv->dev,(char *)"DMA RX processes stopped in channel %d\n",chan);
  }
  {
    #line 1747 
    int __result = -22;
    #line 1747 
    if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->stop_rx != (void (*)(void *, u32 ))0) {
      #line 1747 
      (*(((priv->hw)->dma)->stop_rx))(priv->ioaddr,chan);
      #line 1747 
      __result = 0;
    }
    #line 1747 
    int tmp_2 = __result;
  }
  #line 1749 
  return;
}

#line 1757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_stop_tx_dma(struct stmmac_priv *priv, u32 chan)
{
  {
    #line 1759 
    bool branch;
    #line 1759 
    struct _ddebug __UNIQUE_ID_ddebug575 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_stop_tx_dma", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"DMA TX processes stopped in channel %d\n", .lineno = (unsigned int)1759U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1759 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug575.key.dd_key_false.key,(_Bool)0);
    #line 1759 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1759 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug575,priv->dev,(char *)"DMA TX processes stopped in channel %d\n",chan);
  }
  {
    #line 1760 
    int __result = -22;
    #line 1760 
    if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->stop_tx != (void (*)(void *, u32 ))0) {
      #line 1760 
      (*(((priv->hw)->dma)->stop_tx))(priv->ioaddr,chan);
      #line 1760 
      __result = 0;
    }
    #line 1760 
    int tmp_2 = __result;
  }
  #line 1762 
  return;
}

#line 1769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_start_all_dma(struct stmmac_priv *priv)
{
  #line 1771 
  u32 rx_channels_count = (priv->plat)->rx_queues_to_use;
  #line 1772 
  u32 tx_channels_count = (priv->plat)->tx_queues_to_use;
  #line 1773 
  u32 chan = 0U;
  #line 1775 
  chan = 0U;
  #line 1775 
  while (chan < rx_channels_count) {
    #line 1776 
    stmmac_start_rx_dma(priv,chan);
    #line 1775 
    chan ++;
  }
  #line 1778 
  chan = 0U;
  #line 1778 
  while (chan < tx_channels_count) {
    #line 1779 
    stmmac_start_tx_dma(priv,chan);
    #line 1778 
    chan ++;
  }
  #line 1780 
  return;
}

#line 1788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_stop_all_dma(struct stmmac_priv *priv)
{
  #line 1790 
  u32 rx_channels_count = (priv->plat)->rx_queues_to_use;
  #line 1791 
  u32 tx_channels_count = (priv->plat)->tx_queues_to_use;
  #line 1792 
  u32 chan = 0U;
  #line 1794 
  chan = 0U;
  #line 1794 
  while (chan < rx_channels_count) {
    #line 1795 
    stmmac_stop_rx_dma(priv,chan);
    #line 1794 
    chan ++;
  }
  #line 1797 
  chan = 0U;
  #line 1797 
  while (chan < tx_channels_count) {
    #line 1798 
    stmmac_stop_tx_dma(priv,chan);
    #line 1797 
    chan ++;
  }
  #line 1799 
  return;
}

#line 1807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_dma_operation_mode(struct stmmac_priv *priv)
{
  #line 1809 
  u32 rx_channels_count = (priv->plat)->rx_queues_to_use;
  #line 1810 
  u32 tx_channels_count = (priv->plat)->tx_queues_to_use;
  #line 1811 
  int rxfifosz = (priv->plat)->rx_fifo_size;
  #line 1812 
  int txfifosz = (priv->plat)->tx_fifo_size;
  #line 1813 
  u32 txmode = 0U;
  #line 1814 
  u32 rxmode = 0U;
  #line 1815 
  u32 chan = 0U;
  #line 1816 
  u8 qmode = (unsigned char)0U;
  #line 1818 
  if (rxfifosz == 0) 
                     #line 1819 
                     rxfifosz = (int)priv->dma_cap.rx_fifo_size;
  #line 1820 
  if (txfifosz == 0) 
                     #line 1821 
                     txfifosz = (int)priv->dma_cap.tx_fifo_size;
  #line 1824 
  rxfifosz = (int)((unsigned int)rxfifosz / rx_channels_count);
  #line 1825 
  txfifosz = (int)((unsigned int)txfifosz / tx_channels_count);
  #line 1827 
  if ((priv->plat)->force_thresh_dma_mode != 0) {
    #line 1828 
    txmode = (unsigned int)tc;
    #line 1829 
    rxmode = (unsigned int)tc;
  }
  else 
    #line 1830 
    if ((priv->plat)->force_sf_dma_mode != 0 || (priv->plat)->tx_coe != 0) {
      #line 1838 
      txmode = 1U;
      #line 1839 
      rxmode = 1U;
      #line 1840 
      priv->xstats.threshold = 1UL;
    }
    else {
      #line 1842 
      txmode = (unsigned int)tc;
      #line 1843 
      rxmode = 1U;
    }
  #line 1847 
  chan = 0U;
  #line 1847 
  while (chan < rx_channels_count) {
    #line 1848 
    qmode = (priv->plat)->rx_queues_cfg[chan].mode_to_use;
    {
      #line 1850 
      int __result = -22;
      #line 1850 
      if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->dma_rx_mode != (void (*)(void *, int , u32 , int , u8 ))0) {
        #line 1850 
        (*(((priv->hw)->dma)->dma_rx_mode))(priv->ioaddr,(int)rxmode,chan,rxfifosz,(unsigned char)((int)qmode));
        #line 1850 
        __result = 0;
      }
      #line 1850 
      int tmp = __result;
    }
    {
      #line 1852 
      int __result_0 = -22;
      #line 1852 
      if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->set_bfsize != (void (*)(void *, int , u32 ))0) {
        #line 1852 
        (*(((priv->hw)->dma)->set_bfsize))(priv->ioaddr,(int)priv->dma_buf_sz,chan);
        #line 1852 
        __result_0 = 0;
      }
      #line 1852 
      int tmp_3 = __result_0;
    }
    #line 1847 
    chan ++;
  }
  #line 1856 
  chan = 0U;
  #line 1856 
  while (chan < tx_channels_count) {
    #line 1857 
    qmode = (priv->plat)->tx_queues_cfg[chan].mode_to_use;
    {
      #line 1859 
      int __result_1 = -22;
      #line 1859 
      if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->dma_tx_mode != (void (*)(void *, int , u32 , int , u8 ))0) {
        #line 1859 
        (*(((priv->hw)->dma)->dma_tx_mode))(priv->ioaddr,(int)txmode,chan,txfifosz,(unsigned char)((int)qmode));
        #line 1859 
        __result_1 = 0;
      }
      #line 1859 
      int tmp_5 = __result_1;
    }
    #line 1856 
    chan ++;
  }
  #line 1862 
  return;
}

#line 1870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_tx_clean(struct stmmac_priv *priv, int budget, u32 queue)
{
  #line 1874 
  unsigned int entry;
  #line 1872 
  struct stmmac_tx_queue *tx_q = & priv->tx_queue[queue];
  #line 1873 
  unsigned int bytes_compl = 0U;
  #line 1873 
  unsigned int pkts_compl = 0U;
  #line 1874 
  unsigned int count = 0U;
  #line 1876 
  __netif_tx_lock_bh(netdev_get_tx_queue(priv->dev,queue));
  #line 1878 
  (priv->xstats.tx_clean) ++;
  #line 1880 
  entry = tx_q->dirty_tx;
  #line 1881 
  while (tx_q->cur_tx != entry && count < (unsigned int)budget) {
    #line 1891 
    int __result;
    #line 1883 
    struct dma_desc *p;
    #line 1884 
    int status;
    #line 1882 
    struct sk_buff *skb = *(tx_q->tx_skbuff + (unsigned long)entry);
    #line 1886 
    if (priv->extend_desc != 0) 
                                #line 1887 
                                p = (struct dma_desc *)(tx_q->dma_etx + (unsigned long)entry); else 
                                                                    #line 1889 
                                                                    p = tx_q->dma_tx + (unsigned long)entry;
    #line 1891 
    __result = -22;
    #line 1891 
    if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->tx_status != (int (*)(void *, struct stmmac_extra_stats *, struct dma_desc *, void *))0) 
      #line 1891 
      __result = (*(((priv->hw)->desc)->tx_status))((void *)(& (priv->dev)->stats),& priv->xstats,p,priv->ioaddr);
    #line 1891 
    status = __result;
    #line 1894 
    if ((long)((status & 4) != 0) != 0L) 
                                         #line 1895 
                                         break;
    #line 1897 
    count ++;
    #line 1898 
    ldv_inline_asm();
    #line 1905 
    if ((long)((status & 1) == 0) != 0L) {
      #line 1907 
      if ((long)((status & 2) != 0) != 0L) 
                                           #line 1908 
                                           ((priv->dev)->stats.tx_errors) ++;
      else {
        #line 1910 
        ((priv->dev)->stats.tx_packets) ++;
        #line 1911 
        (priv->xstats.tx_pkt_n) ++;
      }
      #line 1913 
      stmmac_get_tx_hwtstamp(priv,p,skb);
    }
    #line 1916 
    if ((long)((tx_q->tx_skbuff_dma + (unsigned long)entry)->buf != 0ULL) != 0L) {
      #line 1917 
      if ((int)(tx_q->tx_skbuff_dma + (unsigned long)entry)->map_as_page != 0) 
        #line 1918 
        dma_unmap_page_attrs(priv->device,(tx_q->tx_skbuff_dma + (unsigned long)entry)->buf,(unsigned long)(tx_q->tx_skbuff_dma + (unsigned long)entry)->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL); else 
                                                                    #line 1923 
                                                                    dma_unmap_single_attrs(priv->device,(tx_q->tx_skbuff_dma + (unsigned long)entry)->buf,(unsigned long)(tx_q->tx_skbuff_dma + (unsigned long)entry)->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 1927 
      (tx_q->tx_skbuff_dma + (unsigned long)entry)->buf = 0ULL;
      #line 1928 
      (tx_q->tx_skbuff_dma + (unsigned long)entry)->len = 0U;
      #line 1929 
      (tx_q->tx_skbuff_dma + (unsigned long)entry)->map_as_page = (_Bool)0;
    }
    {
      #line 1932 
      int __result_0 = -22;
      #line 1932 
      if ((priv->hw)->mode != (struct stmmac_mode_ops *)0 && ((priv->hw)->mode)->clean_desc3 != (void (*)(void *, struct dma_desc *))0) {
        #line 1932 
        (*(((priv->hw)->mode)->clean_desc3))((void *)tx_q,p);
        #line 1932 
        __result_0 = 0;
      }
      #line 1932 
      int tmp_2 = __result_0;
    }
    #line 1934 
    (tx_q->tx_skbuff_dma + (unsigned long)entry)->last_segment = (_Bool)0;
    #line 1935 
    (tx_q->tx_skbuff_dma + (unsigned long)entry)->is_jumbo = (_Bool)0;
    #line 1937 
    if ((long)(skb != (struct sk_buff *)0) != 0L) {
      #line 1938 
      pkts_compl ++;
      #line 1939 
      bytes_compl = skb->len + bytes_compl;
      #line 1940 
      dev_consume_skb_any(skb);
      #line 1941 
      *(tx_q->tx_skbuff + (unsigned long)entry) = (struct sk_buff *)0;
    }
    {
      #line 1944 
      int __result_1 = -22;
      #line 1944 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->release_tx_desc != (void (*)(struct dma_desc *, int ))0) {
        #line 1944 
        (*(((priv->hw)->desc)->release_tx_desc))(p,(int)priv->mode);
        #line 1944 
        __result_1 = 0;
      }
      #line 1944 
      int tmp_4 = __result_1;
    }
    #line 1946 
    entry = (entry + 1U) & 511U;
  }
  #line 1948 
  tx_q->dirty_tx = entry;
  #line 1950 
  ;
  #line 1950 
  ;
  #line 1950 
  netdev_tx_completed_queue(netdev_get_tx_queue(priv->dev,queue),pkts_compl,bytes_compl);
  #line 1953 
  if ((long)((int)netif_tx_queue_stopped(netdev_get_tx_queue(priv->dev,queue)) != 0) != 0L) {
    #line 1954 
    if (stmmac_tx_avail(priv,queue) > 128U) {
      #line 1957 
      if ((priv->msg_enable & 1024U) != 0U) {
        #line 1957 
        bool branch;
        #line 1957 
        struct _ddebug __UNIQUE_ID_ddebug576 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_tx_clean", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"%s: restart transmit\n", .lineno = (unsigned int)1957U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1957 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug576.key.dd_key_false.key,(_Bool)0);
        #line 1957 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 1957 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug576,priv->dev,(char *)"%s: restart transmit\n",(char *)"stmmac_tx_clean");
      }
      #line 1959 
      netif_tx_wake_queue(netdev_get_tx_queue(priv->dev,queue));
    }
  }
  #line 1962 
  if (priv->eee_enabled != 0 && ! priv->tx_path_in_lpi_mode) {
    #line 1963 
    stmmac_enable_eee_mode(priv);
    #line 1964 
    ;
    #line 1964 
    ;
    #line 1964 
    cif_mod_timer(& priv->eee_ctrl_timer,msecs_to_jiffies((unsigned int)eee_timer) + jiffies);
  }
  #line 1968 
  if (tx_q->dirty_tx != tx_q->cur_tx) {
    #line 1969 
    ;
    #line 1969 
    ;
    #line 1969 
    cif_mod_timer(& tx_q->txtimer,usecs_to_jiffies(10U) + jiffies);
  }
  #line 1971 
  __netif_tx_unlock_bh(netdev_get_tx_queue(priv->dev,queue));
  #line 1973 
  return (int)count;
}

#line 1983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_tx_err(struct stmmac_priv *priv, u32 chan)
{
  #line 1986 
  int i;
  #line 1985 
  struct stmmac_tx_queue *tx_q = & priv->tx_queue[chan];
  #line 1988 
  netif_tx_stop_queue(netdev_get_tx_queue(priv->dev,chan));
  #line 1990 
  stmmac_stop_tx_dma(priv,chan);
  #line 1991 
  dma_free_tx_skbufs(priv,chan);
  #line 1992 
  i = 0;
  #line 1992 
  while (i <= 511) {
    #line 1993 
    if (priv->extend_desc != 0) {
      #line 1994 
      int __result = -22;
      #line 1994 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->init_tx_desc != (void (*)(struct dma_desc *, int , int ))0) {
        #line 1994 
        (*(((priv->hw)->desc)->init_tx_desc))(& (tx_q->dma_etx + (unsigned long)i)->basic,(int)priv->mode,i == 511);
        #line 1994 
        __result = 0;
      }
      #line 1994 
      int tmp_2 = __result;
    }
    else {
      #line 1997 
      int __result_0 = -22;
      #line 1997 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->init_tx_desc != (void (*)(struct dma_desc *, int , int ))0) {
        #line 1997 
        (*(((priv->hw)->desc)->init_tx_desc))(tx_q->dma_tx + (unsigned long)i,(int)priv->mode,i == 511);
        #line 1997 
        __result_0 = 0;
      }
      #line 1997 
      int tmp_4 = __result_0;
    }
    #line 1992 
    i ++;
  }
  #line 1999 
  tx_q->dirty_tx = 0U;
  #line 2000 
  tx_q->cur_tx = 0U;
  #line 2001 
  tx_q->mss = 0U;
  #line 2002 
  netdev_tx_reset_queue(netdev_get_tx_queue(priv->dev,chan));
  {
    #line 2003 
    int __result_1 = -22;
    #line 2003 
    if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->init_tx_chan != (void (*)(void *, struct stmmac_dma_cfg *, dma_addr_t , u32 ))0) {
      #line 2003 
      (*(((priv->hw)->dma)->init_tx_chan))(priv->ioaddr,(priv->plat)->dma_cfg,tx_q->dma_tx_phy,chan);
      #line 2003 
      __result_1 = 0;
    }
    #line 2003 
    int tmp_6 = __result_1;
  }
  #line 2005 
  stmmac_start_tx_dma(priv,chan);
  #line 2007 
  ((priv->dev)->stats.tx_errors) ++;
  #line 2008 
  netif_tx_wake_queue(netdev_get_tx_queue(priv->dev,chan));
  #line 2009 
  return;
}

#line 2021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_set_dma_operation_mode(struct stmmac_priv *priv, u32 txmode, u32 rxmode, u32 chan)
{
  #line 2024 
  u8 rxqmode = (priv->plat)->rx_queues_cfg[chan].mode_to_use;
  #line 2025 
  u8 txqmode = (priv->plat)->tx_queues_cfg[chan].mode_to_use;
  #line 2026 
  u32 rx_channels_count = (priv->plat)->rx_queues_to_use;
  #line 2027 
  u32 tx_channels_count = (priv->plat)->tx_queues_to_use;
  #line 2028 
  int rxfifosz = (priv->plat)->rx_fifo_size;
  #line 2029 
  int txfifosz = (priv->plat)->tx_fifo_size;
  #line 2031 
  if (rxfifosz == 0) 
                     #line 2032 
                     rxfifosz = (int)priv->dma_cap.rx_fifo_size;
  #line 2033 
  if (txfifosz == 0) 
                     #line 2034 
                     txfifosz = (int)priv->dma_cap.tx_fifo_size;
  #line 2037 
  rxfifosz = (int)((unsigned int)rxfifosz / rx_channels_count);
  #line 2038 
  txfifosz = (int)((unsigned int)txfifosz / tx_channels_count);
  {
    #line 2040 
    int __result = -22;
    #line 2040 
    if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->dma_rx_mode != (void (*)(void *, int , u32 , int , u8 ))0) {
      #line 2040 
      (*(((priv->hw)->dma)->dma_rx_mode))(priv->ioaddr,(int)rxmode,chan,rxfifosz,(unsigned char)((int)rxqmode));
      #line 2040 
      __result = 0;
    }
    #line 2040 
    int tmp = __result;
  }
  {
    #line 2041 
    int __result_0 = -22;
    #line 2041 
    if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->dma_tx_mode != (void (*)(void *, int , u32 , int , u8 ))0) {
      #line 2041 
      (*(((priv->hw)->dma)->dma_tx_mode))(priv->ioaddr,(int)txmode,chan,txfifosz,(unsigned char)((int)txqmode));
      #line 2041 
      __result_0 = 0;
    }
    #line 2041 
    int tmp_3 = __result_0;
  }
  #line 2043 
  return;
}

#line 2044  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static bool stmmac_safety_feat_interrupt(struct stmmac_priv *priv)
{
  #line 2048 
  int __result;
  #line 2046 
  int ret;
  #line 2048 
  __result = -22;
  #line 2048 
  if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->safety_feat_irq_status != (int (*)(struct net_device *, void *, unsigned int , struct stmmac_safety_stats *))0) 
    #line 2048 
    __result = (*(((priv->hw)->mac)->safety_feat_irq_status))(priv->dev,priv->ioaddr,priv->dma_cap.asp,& priv->sstats);
  #line 2048 
  ret = __result;
  #line 2050 
  if (ret != 0 && ret != -22) {
    #line 2051 
    stmmac_global_err(priv);
    #line 2052 
    return (_Bool)1;
  }
  #line 2055 
  return (_Bool)0;
}

#line 2058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_napi_check(struct stmmac_priv *priv, u32 chan)
{
  #line 2060 
  int __result;
  #line 2060 
  __result = -22;
  #line 2060 
  if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->dma_interrupt != (int (*)(void *, struct stmmac_extra_stats *, u32 ))0) 
    #line 2060 
    __result = (*(((priv->hw)->dma)->dma_interrupt))(priv->ioaddr,& priv->xstats,chan);
  #line 2060 
  int status = __result;
  #line 2062 
  struct stmmac_channel *ch = & priv->channel[chan];
  #line 2064 
  if ((status & 4) != 0 && (priv->plat)->rx_queues_to_use > chan) {
    #line 2065 
    if ((int)napi_schedule_prep(& ch->rx_napi) != 0) {
      {
        #line 2066 
        int __result_0 = -22;
        #line 2066 
        if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->disable_dma_irq != (void (*)(void *, u32 ))0) {
          #line 2066 
          (*(((priv->hw)->dma)->disable_dma_irq))(priv->ioaddr,chan);
          #line 2066 
          __result_0 = 0;
        }
        #line 2066 
        int tmp_2 = __result_0;
      }
      #line 2067 
      __napi_schedule_irqoff(& ch->rx_napi);
      #line 2068 
      status |= 8;
    }
  }
  #line 2072 
  if ((status & 8) != 0 && (priv->plat)->tx_queues_to_use > chan) 
                                                                  #line 2073 
                                                                  napi_schedule_irqoff(& ch->tx_napi);
  #line 2075 
  return status;
}

#line 2085  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_dma_interrupt(struct stmmac_priv *priv)
{
  #line 2095 
  int __ret_warn_on;
  #line 2089 
  u32 tmp;
  #line 2091 
  u32 chan;
  #line 2092 
  int status[8U];
  #line 2087 
  u32 tx_channel_count = (priv->plat)->tx_queues_to_use;
  #line 2088 
  u32 rx_channel_count = (priv->plat)->rx_queues_to_use;
  #line 2089 
  if (tx_channel_count > rx_channel_count) 
                                           #line 2089 
                                           tmp = tx_channel_count; else 
                                                                    #line 2089 
                                                                    tmp = rx_channel_count;
  #line 2089 
  u32 channels_to_check = tmp;
  #line 2095 
  __ret_warn_on = channels_to_check > 8U;
  #line 2095 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 2096 
    ldv_inline_asm();
    #line 2097 
    ldv_inline_asm();
  }
  #line 2095 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 2096 
                                                channels_to_check = 8U;
  #line 2098 
  chan = 0U;
  #line 2098 
  while (chan < channels_to_check) {
    #line 2099 
    status[chan] = stmmac_napi_check(priv,chan);
    #line 2098 
    chan ++;
  }
  #line 2101 
  chan = 0U;
  #line 2101 
  while (chan < tx_channel_count) {
    #line 2102 
    if ((long)((status[chan] & 2) != 0) != 0L) {
      #line 2104 
      if ((long)(priv->xstats.threshold != 1UL) != 0L && tc <= 256) {
        #line 2106 
        tc += 64;
        #line 2107 
        if ((priv->plat)->force_thresh_dma_mode != 0) 
                                                      #line 2108 
                                                      stmmac_set_dma_operation_mode(priv,(unsigned int)tc,(unsigned int)tc,chan); else 
                                                                    #line 2113 
                                                                    stmmac_set_dma_operation_mode(priv,(unsigned int)tc,1U,chan);
        #line 2117 
        priv->xstats.threshold = (unsigned long)tc;
      }
    }
    else 
      #line 2119 
      if ((long)(status[chan] == 1) != 0L) 
                                           #line 2120 
                                           stmmac_tx_err(priv,chan);
    #line 2101 
    chan ++;
  }
  #line 2121 
  return;
}

#line 2130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_mmc_setup(struct stmmac_priv *priv)
{
  #line 2132 
  unsigned int mode = 53U;
  {
    #line 2135 
    int __result = -22;
    #line 2135 
    if ((priv->hw)->mmc != (struct stmmac_mmc_ops *)0 && ((priv->hw)->mmc)->intr_all_mask != (void (*)(void *))0) {
      #line 2135 
      (*(((priv->hw)->mmc)->intr_all_mask))(priv->mmcaddr);
      #line 2135 
      __result = 0;
    }
    #line 2135 
    int tmp = __result;
  }
  #line 2137 
  if (priv->dma_cap.rmon != 0U) {
    {
      #line 2138 
      int __result_0 = -22;
      #line 2138 
      if ((priv->hw)->mmc != (struct stmmac_mmc_ops *)0 && ((priv->hw)->mmc)->ctrl != (void (*)(void *, unsigned int ))0) {
        #line 2138 
        (*(((priv->hw)->mmc)->ctrl))(priv->mmcaddr,mode);
        #line 2138 
        __result_0 = 0;
      }
      #line 2138 
      int tmp_3 = __result_0;
    }
    #line 2139 
    memset((void *)(& priv->mmc),0,340UL);
  }
  else 
       #line 2141 
       netdev_info(priv->dev,(char *)"No MAC Management Counters available\n");
  #line 2142 
  return;
}

#line 2153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_get_hw_features(struct stmmac_priv *priv)
{
  #line 2155 
  int __result;
  #line 2155 
  __result = -22;
  #line 2155 
  if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->get_hw_feature != (void (*)(void *, struct dma_features *))0) {
    #line 2155 
    (*(((priv->hw)->dma)->get_hw_feature))(priv->ioaddr,& priv->dma_cap);
    #line 2155 
    __result = 0;
  }
  #line 2155 
  return __result == 0;
}

#line 2165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_check_ether_addr(struct stmmac_priv *priv)
{
  #line 2167 
  if (! is_valid_ether_addr((priv->dev)->dev_addr)) {
    {
      #line 2168 
      int __result = -22;
      #line 2168 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->get_umac_addr != (void (*)(struct mac_device_info *, unsigned char *, unsigned int ))0) {
        #line 2168 
        (*(((priv->hw)->mac)->get_umac_addr))(priv->hw,(priv->dev)->dev_addr,0U);
        #line 2168 
        __result = 0;
      }
      #line 2168 
      int tmp = __result;
    }
    #line 2169 
    if (! is_valid_ether_addr((priv->dev)->dev_addr)) 
                                                      #line 2170 
                                                      eth_hw_addr_random(priv->dev);
    #line 2171 
    _dev_info(priv->device,(char *)"device MAC address %pM\n",(priv->dev)->dev_addr);
  }
  #line 2173 
  return;
}

#line 2184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_init_dma_engine(struct stmmac_priv *priv)
{
  #line 2203 
  int __result;
  #line 2188 
  u32 __UNIQUE_ID___x580;
  #line 2188 
  u32 tmp;
  #line 2189 
  struct stmmac_rx_queue *rx_q;
  #line 2190 
  struct stmmac_tx_queue *tx_q;
  #line 2186 
  u32 rx_channels_count = (priv->plat)->rx_queues_to_use;
  #line 2187 
  u32 tx_channels_count = (priv->plat)->tx_queues_to_use;
  {
    #line 2188 
    __UNIQUE_ID___x580 = rx_channels_count;
    #line 2188 
    u32 __UNIQUE_ID___y581 = tx_channels_count;
    #line 2188 
    if (__UNIQUE_ID___x580 > __UNIQUE_ID___y581) 
                                                 #line 2188 
                                                 tmp = __UNIQUE_ID___x580; else 
                                                                    #line 2188 
                                                                    tmp = __UNIQUE_ID___y581;
    }
  #line 2188 
  u32 dma_csr_ch = tmp;
  #line 2191 
  u32 chan = 0U;
  #line 2192 
  int atds = 0;
  #line 2193 
  int ret = 0;
  #line 2195 
  if ((priv->plat)->dma_cfg == (struct stmmac_dma_cfg *)0 || ((priv->plat)->dma_cfg)->pbl == 0) {
    #line 2196 
    _dev_err(priv->device,(char *)"Invalid DMA configuration\n");
    #line 2197 
    return -22;
  }
  #line 2200 
  if (priv->extend_desc != 0 && priv->mode == 2U) 
                                                  #line 2201 
                                                  atds = 1;
  #line 2203 
  __result = -22;
  #line 2203 
  if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->reset != (int (*)(void *))0) 
    #line 2203 
    __result = (*(((priv->hw)->dma)->reset))(priv->ioaddr);
  #line 2203 
  ret = __result;
  #line 2204 
  if (ret != 0) {
    #line 2205 
    _dev_err(priv->device,(char *)"Failed to reset the dma\n");
    #line 2206 
    return ret;
  }
  {
    #line 2210 
    int __result_0 = -22;
    #line 2210 
    if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->init != (void (*)(void *, struct stmmac_dma_cfg *, int ))0) {
      #line 2210 
      (*(((priv->hw)->dma)->init))(priv->ioaddr,(priv->plat)->dma_cfg,atds);
      #line 2210 
      __result_0 = 0;
    }
    #line 2210 
    int tmp_2 = __result_0;
  }
  #line 2212 
  if ((priv->plat)->axi != (struct stmmac_axi *)0) {
    #line 2213 
    int __result_1 = -22;
    #line 2213 
    if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->axi != (void (*)(void *, struct stmmac_axi *))0) {
      #line 2213 
      (*(((priv->hw)->dma)->axi))(priv->ioaddr,(priv->plat)->axi);
      #line 2213 
      __result_1 = 0;
    }
    #line 2213 
    int tmp_4 = __result_1;
  }
  #line 2216 
  chan = 0U;
  #line 2216 
  while (chan < dma_csr_ch) {
    {
      #line 2217 
      int __result_2 = -22;
      #line 2217 
      if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->init_chan != (void (*)(void *, struct stmmac_dma_cfg *, u32 ))0) {
        #line 2217 
        (*(((priv->hw)->dma)->init_chan))(priv->ioaddr,(priv->plat)->dma_cfg,chan);
        #line 2217 
        __result_2 = 0;
      }
      #line 2217 
      int tmp_6 = __result_2;
    }
    #line 2216 
    chan ++;
  }
  #line 2220 
  chan = 0U;
  #line 2220 
  while (chan < rx_channels_count) {
    #line 2221 
    rx_q = & priv->rx_queue[chan];
    {
      #line 2223 
      int __result_3 = -22;
      #line 2223 
      if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->init_rx_chan != (void (*)(void *, struct stmmac_dma_cfg *, dma_addr_t , u32 ))0) {
        #line 2223 
        (*(((priv->hw)->dma)->init_rx_chan))(priv->ioaddr,(priv->plat)->dma_cfg,rx_q->dma_rx_phy,chan);
        #line 2223 
        __result_3 = 0;
      }
      #line 2223 
      int tmp_8 = __result_3;
    }
    #line 2226 
    rx_q->rx_tail_addr = (unsigned int)rx_q->dma_rx_phy + 8192U;
    {
      #line 2228 
      int __result_4 = -22;
      #line 2228 
      if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->set_rx_tail_ptr != (void (*)(void *, u32 , u32 ))0) {
        #line 2228 
        (*(((priv->hw)->dma)->set_rx_tail_ptr))(priv->ioaddr,rx_q->rx_tail_addr,chan);
        #line 2228 
        __result_4 = 0;
      }
      #line 2228 
      int tmp_10 = __result_4;
    }
    #line 2220 
    chan ++;
  }
  #line 2233 
  chan = 0U;
  #line 2233 
  while (chan < tx_channels_count) {
    #line 2234 
    tx_q = & priv->tx_queue[chan];
    {
      #line 2236 
      int __result_5 = -22;
      #line 2236 
      if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->init_tx_chan != (void (*)(void *, struct stmmac_dma_cfg *, dma_addr_t , u32 ))0) {
        #line 2236 
        (*(((priv->hw)->dma)->init_tx_chan))(priv->ioaddr,(priv->plat)->dma_cfg,tx_q->dma_tx_phy,chan);
        #line 2236 
        __result_5 = 0;
      }
      #line 2236 
      int tmp_12 = __result_5;
    }
    #line 2239 
    tx_q->tx_tail_addr = (unsigned int)tx_q->dma_tx_phy;
    {
      #line 2240 
      int __result_6 = -22;
      #line 2240 
      if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->set_tx_tail_ptr != (void (*)(void *, u32 , u32 ))0) {
        #line 2240 
        (*(((priv->hw)->dma)->set_tx_tail_ptr))(priv->ioaddr,tx_q->tx_tail_addr,chan);
        #line 2240 
        __result_6 = 0;
      }
      #line 2240 
      int tmp_14 = __result_6;
    }
    #line 2233 
    chan ++;
  }
  #line 2244 
  return ret;
}

#line 2247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_tx_timer_arm(struct stmmac_priv *priv, u32 queue)
{
  #line 2249 
  struct stmmac_tx_queue *tx_q = & priv->tx_queue[queue];
  #line 2251 
  ;
  #line 2251 
  ;
  #line 2251 
  cif_mod_timer(& tx_q->txtimer,usecs_to_jiffies(priv->tx_coal_timer) + jiffies);
  #line 2252 
  return;
}

#line 2260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_tx_timer(struct timer_list *t)
{
  #line 2262 
  void *__mptr;
  #line 2264 
  struct stmmac_channel *ch;
  #line 2262 
  __mptr = (void *)t;
  #line 2262 
  struct stmmac_tx_queue *tx_q = ((struct stmmac_tx_queue *)(__mptr + 18446744073709551608U));
  #line 2263 
  struct stmmac_priv *priv = tx_q->priv_data;
  #line 2266 
  ch = & priv->channel[tx_q->queue_index];
  #line 2272 
  if ((long)((int)napi_schedule_prep(& ch->tx_napi) != 0) != 0L) 
                                                                 #line 2273 
                                                                 __napi_schedule(& ch->tx_napi);
  else {
    #line 2275 
    ;
    #line 2275 
    ;
    #line 2275 
    cif_mod_timer(& tx_q->txtimer,usecs_to_jiffies(10U) + jiffies);
  }
  #line 2276 
  return;
}

#line 2286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_init_coalesce(struct stmmac_priv *priv)
{
  #line 2289 
  u32 chan;
  #line 2288 
  u32 tx_channel_count = (priv->plat)->tx_queues_to_use;
  #line 2291 
  priv->tx_coal_frames = 25U;
  #line 2292 
  priv->tx_coal_timer = 1000U;
  #line 2293 
  priv->rx_coal_frames = 0U;
  #line 2295 
  chan = 0U;
  #line 2295 
  while (chan < tx_channel_count) {
    {
      #line 2296 
      struct stmmac_tx_queue *tx_q = & priv->tx_queue[chan];
      {
        #line 2298 
        struct lock_class_key __key;
        #line 2298 
        init_timer_key(& tx_q->txtimer,& stmmac_tx_timer,0U,(char *)"(&tx_q->txtimer)",& __key);
      }
    }
    #line 2295 
    chan ++;
  }
  #line 2301 
  return;
}

#line 2302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_set_rings_length(struct stmmac_priv *priv)
{
  #line 2306 
  u32 chan;
  #line 2304 
  u32 rx_channels_count = (priv->plat)->rx_queues_to_use;
  #line 2305 
  u32 tx_channels_count = (priv->plat)->tx_queues_to_use;
  #line 2309 
  chan = 0U;
  #line 2309 
  while (chan < tx_channels_count) {
    {
      #line 2310 
      int __result = -22;
      #line 2310 
      if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->set_tx_ring_len != (void (*)(void *, u32 , u32 ))0) {
        #line 2310 
        (*(((priv->hw)->dma)->set_tx_ring_len))(priv->ioaddr,511U,chan);
        #line 2310 
        __result = 0;
      }
      #line 2310 
      int tmp = __result;
    }
    #line 2309 
    chan ++;
  }
  #line 2314 
  chan = 0U;
  #line 2314 
  while (chan < rx_channels_count) {
    {
      #line 2315 
      int __result_0 = -22;
      #line 2315 
      if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->set_rx_ring_len != (void (*)(void *, u32 , u32 ))0) {
        #line 2315 
        (*(((priv->hw)->dma)->set_rx_ring_len))(priv->ioaddr,511U,chan);
        #line 2315 
        __result_0 = 0;
      }
      #line 2315 
      int tmp_3 = __result_0;
    }
    #line 2314 
    chan ++;
  }
  #line 2317 
  return;
}

#line 2324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_set_tx_queue_weight(struct stmmac_priv *priv)
{
  #line 2327 
  u32 weight;
  #line 2328 
  u32 queue;
  #line 2326 
  u32 tx_queues_count = (priv->plat)->tx_queues_to_use;
  #line 2330 
  queue = 0U;
  #line 2330 
  while (queue < tx_queues_count) {
    #line 2331 
    weight = (priv->plat)->tx_queues_cfg[queue].weight;
    {
      #line 2332 
      int __result = -22;
      #line 2332 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_mtl_tx_queue_weight != (void (*)(struct mac_device_info *, u32 , u32 ))0) {
        #line 2332 
        (*(((priv->hw)->mac)->set_mtl_tx_queue_weight))(priv->hw,weight,queue);
        #line 2332 
        __result = 0;
      }
      #line 2332 
      int tmp = __result;
    }
    #line 2330 
    queue ++;
  }
  #line 2335 
  return;
}

#line 2341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_configure_cbs(struct stmmac_priv *priv)
{
  #line 2344 
  u32 mode_to_use;
  #line 2345 
  u32 queue;
  #line 2343 
  u32 tx_queues_count = (priv->plat)->tx_queues_to_use;
  #line 2348 
  queue = 1U;
  #line 2348 
  while (queue < tx_queues_count) {
    #line 2349 
    mode_to_use = (unsigned int)(priv->plat)->tx_queues_cfg[queue].mode_to_use;
    #line 2350 
    if (mode_to_use == 1U) 
                           #line 2351 
                           goto __Cont;
    {
      #line 2353 
      int __result = -22;
      #line 2353 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->config_cbs != (void (*)(struct mac_device_info *, u32 , u32 , u32 , u32 , u32 ))0) {
        #line 2353 
        (*(((priv->hw)->mac)->config_cbs))(priv->hw,(priv->plat)->tx_queues_cfg[queue].send_slope,(priv->plat)->tx_queues_cfg[queue].idle_slope,(priv->plat)->tx_queues_cfg[queue].high_credit,(priv->plat)->tx_queues_cfg[queue].low_credit,queue);
        #line 2353 
        __result = 0;
      }
      #line 2353 
      int tmp = __result;
    }
    #line 2348 
    __Cont: 
            #line 2348 
    queue ++;
  }
  #line 2356 
  return;
}

#line 2367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_rx_queue_dma_chan_map(struct stmmac_priv *priv)
{
  #line 2370 
  u32 queue;
  #line 2371 
  u32 chan;
  #line 2369 
  u32 rx_queues_count = (priv->plat)->rx_queues_to_use;
  #line 2373 
  queue = 0U;
  #line 2373 
  while (queue < rx_queues_count) {
    #line 2374 
    chan = (priv->plat)->rx_queues_cfg[queue].chan;
    {
      #line 2375 
      int __result = -22;
      #line 2375 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->map_mtl_to_dma != (void (*)(struct mac_device_info *, u32 , u32 ))0) {
        #line 2375 
        (*(((priv->hw)->mac)->map_mtl_to_dma))(priv->hw,queue,chan);
        #line 2375 
        __result = 0;
      }
      #line 2375 
      int tmp = __result;
    }
    #line 2373 
    queue ++;
  }
  #line 2378 
  return;
}

#line 2384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_mac_config_rx_queues_prio(struct stmmac_priv *priv)
{
  #line 2387 
  u32 queue;
  #line 2388 
  u32 prio;
  #line 2386 
  u32 rx_queues_count = (priv->plat)->rx_queues_to_use;
  #line 2390 
  queue = 0U;
  #line 2390 
  while (queue < rx_queues_count) {
    #line 2391 
    if (! (priv->plat)->rx_queues_cfg[queue].use_prio) 
                                                       #line 2392 
                                                       goto __Cont;
    #line 2394 
    prio = (priv->plat)->rx_queues_cfg[queue].prio;
    {
      #line 2395 
      int __result = -22;
      #line 2395 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->rx_queue_prio != (void (*)(struct mac_device_info *, u32 , u32 ))0) {
        #line 2395 
        (*(((priv->hw)->mac)->rx_queue_prio))(priv->hw,prio,queue);
        #line 2395 
        __result = 0;
      }
      #line 2395 
      int tmp = __result;
    }
    #line 2390 
    __Cont: 
            #line 2390 
    queue ++;
  }
  #line 2398 
  return;
}

#line 2404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_mac_config_tx_queues_prio(struct stmmac_priv *priv)
{
  #line 2407 
  u32 queue;
  #line 2408 
  u32 prio;
  #line 2406 
  u32 tx_queues_count = (priv->plat)->tx_queues_to_use;
  #line 2410 
  queue = 0U;
  #line 2410 
  while (queue < tx_queues_count) {
    #line 2411 
    if (! (priv->plat)->tx_queues_cfg[queue].use_prio) 
                                                       #line 2412 
                                                       goto __Cont;
    #line 2414 
    prio = (priv->plat)->tx_queues_cfg[queue].prio;
    {
      #line 2415 
      int __result = -22;
      #line 2415 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->tx_queue_prio != (void (*)(struct mac_device_info *, u32 , u32 ))0) {
        #line 2415 
        (*(((priv->hw)->mac)->tx_queue_prio))(priv->hw,prio,queue);
        #line 2415 
        __result = 0;
      }
      #line 2415 
      int tmp = __result;
    }
    #line 2410 
    __Cont: 
            #line 2410 
    queue ++;
  }
  #line 2418 
  return;
}

#line 2424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_mac_config_rx_queues_routing(struct stmmac_priv *priv)
{
  #line 2427 
  u32 queue;
  #line 2428 
  u8 packet;
  #line 2426 
  u32 rx_queues_count = (priv->plat)->rx_queues_to_use;
  #line 2430 
  queue = 0U;
  #line 2430 
  while (queue < rx_queues_count) {
    #line 2432 
    if ((unsigned int)(priv->plat)->rx_queues_cfg[queue].pkt_route == 0U) 
      #line 2433 
      goto __Cont;
    #line 2435 
    packet = (priv->plat)->rx_queues_cfg[queue].pkt_route;
    {
      #line 2436 
      int __result = -22;
      #line 2436 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->rx_queue_routing != (void (*)(struct mac_device_info *, u8 , u32 ))0) {
        #line 2436 
        (*(((priv->hw)->mac)->rx_queue_routing))(priv->hw,(unsigned char)((int)packet),queue);
        #line 2436 
        __result = 0;
      }
      #line 2436 
      int tmp = __result;
    }
    #line 2430 
    __Cont: 
            #line 2430 
    queue ++;
  }
  #line 2439 
  return;
}

#line 2440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_mac_config_rss(struct stmmac_priv *priv)
{
  #line 2442 
  if (priv->dma_cap.rssen == 0U || (priv->plat)->rss_en == 0) {
    #line 2443 
    priv->rss.enable = 0;
    #line 2444 
    return;
  }
  #line 2447 
  if (((priv->dev)->features & 274877906944ULL) != 0ULL) 
                                                         #line 2448 
                                                         priv->rss.enable = 1; else 
                                                                    #line 2450 
                                                                    priv->rss.enable = 0;
  {
    #line 2452 
    int __result = -22;
    #line 2452 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->rss_configure != (int (*)(struct mac_device_info *, struct stmmac_rss *, u32 ))0) 
      #line 2452 
      __result = (*(((priv->hw)->mac)->rss_configure))(priv->hw,& priv->rss,(priv->plat)->rx_queues_to_use);
    #line 2452 
    int tmp = __result;
  }
  #line 2454 
  return;
}

#line 2461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_mtl_configuration(struct stmmac_priv *priv)
{
  #line 2463 
  u32 rx_queues_count = (priv->plat)->rx_queues_to_use;
  #line 2464 
  u32 tx_queues_count = (priv->plat)->tx_queues_to_use;
  #line 2466 
  if (tx_queues_count > 1U) 
                            #line 2467 
                            stmmac_set_tx_queue_weight(priv);
  #line 2470 
  if (rx_queues_count > 1U) {
    #line 2471 
    int __result = -22;
    #line 2471 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->prog_mtl_rx_algorithms != (void (*)(struct mac_device_info *, u32 ))0) {
      #line 2471 
      (*(((priv->hw)->mac)->prog_mtl_rx_algorithms))(priv->hw,(unsigned int)(priv->plat)->rx_sched_algorithm);
      #line 2471 
      __result = 0;
    }
    #line 2471 
    int tmp = __result;
  }
  #line 2475 
  if (tx_queues_count > 1U) {
    #line 2476 
    int __result_0 = -22;
    #line 2476 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->prog_mtl_tx_algorithms != (void (*)(struct mac_device_info *, u32 ))0) {
      #line 2476 
      (*(((priv->hw)->mac)->prog_mtl_tx_algorithms))(priv->hw,(unsigned int)(priv->plat)->tx_sched_algorithm);
      #line 2476 
      __result_0 = 0;
    }
    #line 2476 
    int tmp_3 = __result_0;
  }
  #line 2480 
  if (tx_queues_count > 1U) 
                            #line 2481 
                            stmmac_configure_cbs(priv);
  #line 2484 
  stmmac_rx_queue_dma_chan_map(priv);
  #line 2487 
  stmmac_mac_enable_rx_queues(priv);
  #line 2490 
  if (rx_queues_count > 1U) 
                            #line 2491 
                            stmmac_mac_config_rx_queues_prio(priv);
  #line 2494 
  if (tx_queues_count > 1U) 
                            #line 2495 
                            stmmac_mac_config_tx_queues_prio(priv);
  #line 2498 
  if (rx_queues_count > 1U) 
                            #line 2499 
                            stmmac_mac_config_rx_queues_routing(priv);
  #line 2502 
  if (rx_queues_count > 1U) 
                            #line 2503 
                            stmmac_mac_config_rss(priv);
  #line 2504 
  return;
}

#line 2506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_safety_feat_configuration(struct stmmac_priv *priv)
{
  #line 2508 
  if (priv->dma_cap.asp != 0U) {
    #line 2509 
    netdev_info(priv->dev,(char *)"Enabling Safety Features\n");
    {
      #line 2510 
      int __result = -22;
      #line 2510 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->safety_feat_config != (int (*)(void *, unsigned int ))0) 
        #line 2510 
        __result = (*(((priv->hw)->mac)->safety_feat_config))(priv->ioaddr,priv->dma_cap.asp);
      #line 2510 
      int tmp = __result;
    }
  }
  else 
       #line 2512 
       netdev_info(priv->dev,(char *)"No Safety Features support found\n");
  #line 2513 
  return;
}

#line 2528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_hw_setup(struct net_device *dev, bool init_ptp)
{
  #line 2569 
  int __result_1;
  #line 2533 
  u32 chan;
  #line 2534 
  int ret;
  #line 2530 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 2531 
  u32 rx_cnt = (priv->plat)->rx_queues_to_use;
  #line 2532 
  u32 tx_cnt = (priv->plat)->tx_queues_to_use;
  #line 2537 
  ret = stmmac_init_dma_engine(priv);
  #line 2538 
  if (ret < 0) {
    #line 2539 
    netdev_err(priv->dev,(char *)"%s: DMA engine initialization failed\n",(char *)"stmmac_hw_setup");
    #line 2541 
    return ret;
  }
  {
    #line 2545 
    int __result = -22;
    #line 2545 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_umac_addr != (void (*)(struct mac_device_info *, unsigned char *, unsigned int ))0) {
      #line 2545 
      (*(((priv->hw)->mac)->set_umac_addr))(priv->hw,dev->dev_addr,0U);
      #line 2545 
      __result = 0;
    }
    #line 2545 
    int tmp_2 = __result;
  }
  #line 2548 
  if ((priv->hw)->pcs != 0U) {
    #line 2549 
    int speed = (priv->plat)->mac_port_sel_speed;
    #line 2551 
    if ((speed == 10 || speed == 100) || speed == 1000) 
                                                        #line 2553 
                                                        (priv->hw)->ps = (unsigned int)speed;
    else {
      #line 2555 
      _dev_warn(priv->device,(char *)"invalid port speed\n");
      #line 2556 
      (priv->hw)->ps = 0U;
    }
  }
  {
    #line 2561 
    int __result_0 = -22;
    #line 2561 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->core_init != (void (*)(struct mac_device_info *, struct net_device *))0) {
      #line 2561 
      (*(((priv->hw)->mac)->core_init))(priv->hw,dev);
      #line 2561 
      __result_0 = 0;
    }
    #line 2561 
    int tmp_4 = __result_0;
  }
  #line 2564 
  stmmac_mtl_configuration(priv);
  #line 2567 
  stmmac_safety_feat_configuration(priv);
  #line 2569 
  __result_1 = -22;
  #line 2569 
  if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->rx_ipc != (int (*)(struct mac_device_info *))0) 
    #line 2569 
    __result_1 = (*(((priv->hw)->mac)->rx_ipc))(priv->hw);
  #line 2569 
  ret = __result_1;
  #line 2570 
  if (ret == 0) {
    #line 2571 
    netdev_warn(priv->dev,(char *)"RX IPC Checksum Offload disabled\n");
    #line 2572 
    (priv->plat)->rx_coe = 0;
    #line 2573 
    (priv->hw)->rx_csum = 0U;
  }
  {
    #line 2577 
    int __result_2 = -22;
    #line 2577 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_mac != (void (*)(void *, bool ))0) {
      #line 2577 
      (*(((priv->hw)->mac)->set_mac))(priv->ioaddr,(_Bool)1);
      #line 2577 
      __result_2 = 0;
    }
    #line 2577 
    int tmp_6 = __result_2;
  }
  #line 2580 
  stmmac_dma_operation_mode(priv);
  #line 2582 
  stmmac_mmc_setup(priv);
  #line 2584 
  if ((int)init_ptp != 0) {
    #line 2585 
    ret = clk_prepare_enable((priv->plat)->clk_ptp_ref);
    #line 2586 
    if (ret < 0) 
                 #line 2587 
                 netdev_warn(priv->dev,(char *)"failed to enable PTP reference clock: %d\n",ret);
    #line 2589 
    ret = stmmac_init_ptp(priv);
    #line 2590 
    if (ret == -95) 
                    #line 2591 
                    netdev_warn(priv->dev,(char *)"PTP not supported by HW\n");
    else 
      #line 2592 
      if (ret != 0) 
                    #line 2593 
                    netdev_warn(priv->dev,(char *)"PTP init failed\n");
  }
  #line 2596 
  priv->tx_lpi_timer = 30;
  #line 2598 
  if (priv->use_riwt != 0) {
    #line 2602 
    int __result_3;
    #line 2599 
    if (priv->rx_riwt == 0U) 
                             #line 2600 
                             priv->rx_riwt = 160U;
    #line 2602 
    __result_3 = -22;
    #line 2602 
    if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->rx_watchdog != (void (*)(void *, u32 , u32 ))0) {
      #line 2602 
      (*(((priv->hw)->dma)->rx_watchdog))(priv->ioaddr,priv->rx_riwt,rx_cnt);
      #line 2602 
      __result_3 = 0;
    }
    #line 2602 
    ret = __result_3;
  }
  #line 2605 
  if ((priv->hw)->pcs != 0U) {
    #line 2606 
    int __result_4 = -22;
    #line 2606 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->pcs_ctrl_ane != (void (*)(void *, bool , bool , bool ))0) {
      #line 2606 
      (*(((priv->hw)->mac)->pcs_ctrl_ane))(priv->ioaddr,(_Bool)1,(_Bool)((priv->hw)->ps != 0U),(_Bool)0);
      #line 2606 
      __result_4 = 0;
    }
    #line 2606 
    int tmp_8 = __result_4;
  }
  #line 2609 
  stmmac_set_rings_length(priv);
  #line 2612 
  if ((int)priv->tso != 0) {
    #line 2613 
    chan = 0U;
    #line 2613 
    while (chan < tx_cnt) {
      {
        #line 2614 
        int __result_5 = -22;
        #line 2614 
        if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->enable_tso != (void (*)(void *, bool , u32 ))0) {
          #line 2614 
          (*(((priv->hw)->dma)->enable_tso))(priv->ioaddr,(_Bool)1,chan);
          #line 2614 
          __result_5 = 0;
        }
        #line 2614 
        int tmp_10 = __result_5;
      }
      #line 2613 
      chan ++;
    }
  }
  #line 2618 
  if (priv->sph != 0 && (priv->hw)->rx_csum != 0U) {
    #line 2619 
    chan = 0U;
    #line 2619 
    while (chan < rx_cnt) {
      {
        #line 2620 
        int __result_6 = -22;
        #line 2620 
        if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->enable_sph != (void (*)(void *, bool , u32 ))0) {
          #line 2620 
          (*(((priv->hw)->dma)->enable_sph))(priv->ioaddr,(_Bool)1,chan);
          #line 2620 
          __result_6 = 0;
        }
        #line 2620 
        int tmp_12 = __result_6;
      }
      #line 2619 
      chan ++;
    }
  }
  #line 2624 
  if (priv->dma_cap.vlins != 0U) {
    #line 2625 
    int __result_7 = -22;
    #line 2625 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->enable_vlan != (void (*)(struct mac_device_info *, u32 ))0) {
      #line 2625 
      (*(((priv->hw)->mac)->enable_vlan))(priv->hw,2U);
      #line 2625 
      __result_7 = 0;
    }
    #line 2625 
    int tmp_14 = __result_7;
  }
  #line 2628 
  stmmac_start_all_dma(priv);
  #line 2630 
  return 0;
}

#line 2633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_hw_teardown(struct net_device *dev)
{
  #line 2635 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 2637 
  clk_disable_unprepare((priv->plat)->clk_ptp_ref);
  #line 2638 
  return;
}

#line 2649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_open(struct net_device *dev)
{
  #line 2672 
  int __result;
  #line 2653 
  u32 chan;
  #line 2654 
  int ret;
  #line 2651 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 2652 
  int bfsize = 0;
  #line 2656 
  if (((priv->hw)->pcs != 1U && (priv->hw)->pcs != 4U) && (priv->hw)->pcs != 8U) {
    #line 2659 
    ret = stmmac_init_phy(dev);
    #line 2660 
    if (ret != 0) {
      #line 2661 
      netdev_err(priv->dev,(char *)"%s: Cannot attach to PHY (error: %d)\n",(char *)"stmmac_open",ret);
      #line 2664 
      return ret;
    }
  }
  #line 2669 
  memset((void *)(& priv->xstats),0,960UL);
  #line 2670 
  priv->xstats.threshold = (unsigned long)tc;
  #line 2672 
  __result = -22;
  #line 2672 
  if ((priv->hw)->mode != (struct stmmac_mode_ops *)0 && ((priv->hw)->mode)->set_16kib_bfsize != (int (*)(int ))0) 
    #line 2672 
    __result = (*(((priv->hw)->mode)->set_16kib_bfsize))((int)dev->mtu);
  #line 2672 
  bfsize = __result;
  #line 2673 
  if (bfsize < 0) 
                  #line 2674 
                  bfsize = 0;
  #line 2676 
  if (bfsize <= 16367) 
                       #line 2677 
                       bfsize = stmmac_set_bfsize((int)dev->mtu,(int)priv->dma_buf_sz);
  #line 2679 
  priv->dma_buf_sz = (unsigned int)bfsize;
  #line 2680 
  buf_sz = bfsize;
  #line 2682 
  priv->rx_copybreak = 256U;
  #line 2684 
  ret = alloc_dma_desc_resources(priv);
  #line 2685 
  if (ret < 0) {
    #line 2686 
    netdev_err(priv->dev,(char *)"%s: DMA descriptors allocation failed\n",(char *)"stmmac_open");
    #line 2688 
    goto dma_desc_error;
  }
  #line 2691 
  ret = init_dma_desc_rings(dev,3264U);
  #line 2692 
  if (ret < 0) {
    #line 2693 
    netdev_err(priv->dev,(char *)"%s: DMA descriptors initialization failed\n",(char *)"stmmac_open");
    #line 2695 
    goto init_error;
  }
  #line 2698 
  ret = stmmac_hw_setup(dev,(_Bool)1);
  #line 2699 
  if (ret < 0) {
    #line 2700 
    netdev_err(priv->dev,(char *)"%s: Hw setup failed\n",(char *)"stmmac_open");
    #line 2701 
    goto init_error;
  }
  #line 2704 
  stmmac_init_coalesce(priv);
  #line 2706 
  phylink_start(priv->phylink);
  #line 2709 
  ret = cif_request_irq((unsigned int)dev->irq,& stmmac_interrupt,128UL,(char *)(& dev->name),(void *)dev);
  #line 2711 
  if ((long)(ret < 0) != 0L) {
    #line 2712 
    netdev_err(priv->dev,(char *)"%s: ERROR: allocating the IRQ %d (error: %d)\n",(char *)"stmmac_open",dev->irq,ret);
    #line 2715 
    goto irq_error;
  }
  #line 2719 
  if (priv->wol_irq != dev->irq) {
    #line 2720 
    ret = cif_request_irq((unsigned int)priv->wol_irq,& stmmac_interrupt,128UL,(char *)(& dev->name),(void *)dev);
    #line 2722 
    if ((long)(ret < 0) != 0L) {
      #line 2723 
      netdev_err(priv->dev,(char *)"%s: ERROR: allocating the WoL IRQ %d (%d)\n",(char *)"stmmac_open",priv->wol_irq,ret);
      #line 2726 
      goto wolirq_error;
    }
  }
  #line 2731 
  if (priv->lpi_irq > 0) {
    #line 2732 
    ret = cif_request_irq((unsigned int)priv->lpi_irq,& stmmac_interrupt,128UL,(char *)(& dev->name),(void *)dev);
    #line 2734 
    if ((long)(ret < 0) != 0L) {
      #line 2735 
      netdev_err(priv->dev,(char *)"%s: ERROR: allocating the LPI IRQ %d (%d)\n",(char *)"stmmac_open",priv->lpi_irq,ret);
      #line 2738 
      goto lpiirq_error;
    }
  }
  #line 2742 
  stmmac_enable_all_queues(priv);
  #line 2743 
  stmmac_start_all_queues(priv);
  #line 2745 
  return 0;
  #line 2747 
  lpiirq_error: 
                #line 2747 
  ;
  #line 2748 
  if (priv->wol_irq != dev->irq) 
                                 #line 2749 
                                 cif_free_irq((unsigned int)priv->wol_irq,(void *)dev);
  #line 2750 
  wolirq_error: 
                #line 2750 
  ;
  #line 2751 
  cif_free_irq((unsigned int)dev->irq,(void *)dev);
  #line 2752 
  irq_error: 
             #line 2752 
  ;
  #line 2753 
  phylink_stop(priv->phylink);
  #line 2755 
  chan = 0U;
  #line 2755 
  while ((priv->plat)->tx_queues_to_use > chan) {
    #line 2756 
    cif_del_timer_sync(& priv->tx_queue[chan].txtimer);
    #line 2755 
    chan ++;
  }
  #line 2758 
  stmmac_hw_teardown(dev);
  #line 2759 
  init_error: 
              #line 2759 
  ;
  #line 2760 
  free_dma_desc_resources(priv);
  #line 2761 
  dma_desc_error: 
                  #line 2761 
  ;
  #line 2762 
  phylink_disconnect_phy(priv->phylink);
  #line 2763 
  return ret;
}

#line 2772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_release(struct net_device *dev)
{
  #line 2775 
  u32 chan;
  #line 2774 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 2777 
  if (priv->eee_enabled != 0) 
                              #line 2778 
                              cif_del_timer_sync(& priv->eee_ctrl_timer);
  #line 2781 
  phylink_stop(priv->phylink);
  #line 2782 
  phylink_disconnect_phy(priv->phylink);
  #line 2784 
  stmmac_stop_all_queues(priv);
  #line 2786 
  stmmac_disable_all_queues(priv);
  #line 2788 
  chan = 0U;
  #line 2788 
  while ((priv->plat)->tx_queues_to_use > chan) {
    #line 2789 
    cif_del_timer_sync(& priv->tx_queue[chan].txtimer);
    #line 2788 
    chan ++;
  }
  #line 2792 
  cif_free_irq((unsigned int)dev->irq,(void *)dev);
  #line 2793 
  if (priv->wol_irq != dev->irq) 
                                 #line 2794 
                                 cif_free_irq((unsigned int)priv->wol_irq,(void *)dev);
  #line 2795 
  if (priv->lpi_irq > 0) 
                         #line 2796 
                         cif_free_irq((unsigned int)priv->lpi_irq,(void *)dev);
  #line 2799 
  stmmac_stop_all_dma(priv);
  #line 2802 
  free_dma_desc_resources(priv);
  {
    #line 2805 
    int __result = -22;
    #line 2805 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_mac != (void (*)(void *, bool ))0) {
      #line 2805 
      (*(((priv->hw)->mac)->set_mac))(priv->ioaddr,(_Bool)0);
      #line 2805 
      __result = 0;
    }
    #line 2805 
    int tmp_2 = __result;
  }
  #line 2807 
  netif_carrier_off(dev);
  #line 2809 
  stmmac_release_ptp(priv);
  #line 2811 
  return 0;
}

#line 2814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static bool stmmac_vlan_insert(struct stmmac_priv *priv, struct sk_buff *skb, struct stmmac_tx_queue *tx_q)
{
  #line 2833 
  int __result;
  #line 2819 
  struct dma_desc *p;
  #line 2817 
  u16 tag = (unsigned short)0U;
  #line 2817 
  u16 inner_tag = (unsigned short)0U;
  #line 2818 
  u32 inner_type = 0U;
  #line 2821 
  if (priv->dma_cap.vlins == 0U) 
                                 #line 2822 
                                 return (_Bool)0;
  #line 2823 
  if ((unsigned int)skb->vlan_present == 0U) 
                                             #line 2824 
                                             return (_Bool)0;
  #line 2825 
  if ((unsigned int)skb->vlan_proto == 43144U) {
    #line 2826 
    inner_tag = skb->vlan_tci;
    #line 2827 
    inner_type = 2U;
  }
  #line 2830 
  tag = skb->vlan_tci;
  #line 2832 
  p = tx_q->dma_tx + (unsigned long)tx_q->cur_tx;
  #line 2833 
  __result = -22;
  #line 2833 
  if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_vlan_tag != (void (*)(struct dma_desc *, u16 , u16 , u32 ))0) {
    #line 2833 
    (*(((priv->hw)->desc)->set_vlan_tag))(p,(unsigned short)((int)tag),(unsigned short)((int)inner_tag),inner_type);
    #line 2833 
    __result = 0;
  }
  #line 2833 
  if (__result != 0) 
                     #line 2834 
                     return (_Bool)0;
  {
    #line 2836 
    int __result_0 = -22;
    #line 2836 
    if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_tx_owner != (void (*)(struct dma_desc *))0) {
      #line 2836 
      (*(((priv->hw)->desc)->set_tx_owner))(p);
      #line 2836 
      __result_0 = 0;
    }
    #line 2836 
    int tmp_2 = __result_0;
  }
  #line 2837 
  tx_q->cur_tx = (tx_q->cur_tx + 1U) & 511U;
  #line 2838 
  return (_Bool)1;
}

#line 2852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_tso_allocator(struct stmmac_priv *priv, dma_addr_t des, int total_len, bool last_segment, u32 queue)
{
  #line 2856 
  struct dma_desc *desc;
  #line 2857 
  u32 buff_size;
  #line 2858 
  int tmp_len;
  #line 2855 
  struct stmmac_tx_queue *tx_q = & priv->tx_queue[queue];
  #line 2860 
  tmp_len = total_len;
  #line 2862 
  while (tmp_len > 0) {
    #line 2863 
    dma_addr_t curr_addr;
    #line 2876 
    int tmp_0;
    #line 2865 
    tx_q->cur_tx = (tx_q->cur_tx + 1U) & 511U;
    {
      #line 2866 
      int __ret_warn_on = *(tx_q->tx_skbuff + (unsigned long)tx_q->cur_tx) != (struct sk_buff *)0;
      #line 2866 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 2867 
        ldv_inline_asm();
        #line 2868 
        ldv_inline_asm();
      }
      #line 2866 
      long tmp = (long)(__ret_warn_on != 0);
    }
    #line 2867 
    desc = tx_q->dma_tx + (unsigned long)tx_q->cur_tx;
    #line 2869 
    curr_addr = (unsigned long long)(total_len - tmp_len) + des;
    #line 2870 
    if (priv->dma_cap.addr64 <= 32U) 
                                     #line 2871 
                                     desc->des0 = (unsigned int)curr_addr;
    else {
      #line 2873 
      int __result = -22;
      #line 2873 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_addr != (void (*)(struct dma_desc *, dma_addr_t ))0) {
        #line 2873 
        (*(((priv->hw)->desc)->set_addr))(desc,curr_addr);
        #line 2873 
        __result = 0;
      }
      #line 2873 
      int tmp_3 = __result;
    }
    #line 2876 
    if (16383 < tmp_len) 
                         #line 2876 
                         tmp_0 = 16383; else 
                                             #line 2876 
                                             tmp_0 = tmp_len;
    #line 2875 
    buff_size = (unsigned int)tmp_0;
    {
      #line 2878 
      int __result_0 = -22;
      #line 2878 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->prepare_tso_tx_desc != (void (*)(struct dma_desc *, int , int , int , bool , bool , unsigned int , unsigned int ))0) {
        #line 2878 
        (*(((priv->hw)->desc)->prepare_tso_tx_desc))(desc,0,(int)buff_size,0,(_Bool)1,(_Bool)((int)((_Bool)(((int)last_segment != 0 && tmp_len <= 16383) != 0))),0U,0U);
        #line 2878 
        __result_0 = 0;
      }
      #line 2878 
      int tmp_5 = __result_0;
    }
    #line 2883 
    tmp_len += -16383;
  }
  #line 2885 
  return;
}

#line 2914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static netdev_tx_t stmmac_tso_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 2916 
  struct dma_desc *desc;
  #line 2916 
  struct dma_desc *first;
  #line 2920 
  unsigned int first_entry;
  #line 2920 
  unsigned int tx_packets;
  #line 2921 
  int first_tx;
  #line 2922 
  struct stmmac_tx_queue *tx_q;
  #line 2923 
  u8 proto_hdr_len;
  #line 2923 
  u8 hdr;
  #line 2924 
  bool has_vlan;
  #line 2924 
  bool set_ic;
  #line 2925 
  u32 pay_len;
  #line 2925 
  u32 mss;
  #line 2926 
  dma_addr_t des;
  #line 2927 
  int i;
  #line 2916 
  struct dma_desc *mss_desc = (struct dma_desc *)0;
  #line 2917 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 2918 
  int nfrags = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 2919 
  u32 queue = (unsigned int)skb_get_queue_mapping(skb);
  #line 2921 
  int tmp_pay_len = 0;
  #line 2929 
  tx_q = & priv->tx_queue[queue];
  #line 2930 
  first_tx = (int)tx_q->cur_tx;
  #line 2933 
  ;
  #line 2933 
  if ((((struct skb_shared_info *)skb_end_pointer(skb))->gso_type & 131072U) != 0U) {
    #line 2934 
    proto_hdr_len = (unsigned char)((unsigned int)((unsigned char)skb_transport_offset(skb)) + 8U);
    #line 2935 
    hdr = (unsigned char)8U;
  }
  else {
    #line 2937 
    proto_hdr_len = (unsigned char)((int)((unsigned char)skb_transport_offset(skb)) + (int)((unsigned char)tcp_hdrlen(skb)));
    #line 2938 
    hdr = (unsigned char)tcp_hdrlen(skb);
  }
  #line 2942 
  ;
  #line 2942 
  if ((long)(stmmac_tx_avail(priv,queue) < (skb->len - (unsigned int)proto_hdr_len) / 16383U + 1U) != 0L) {
    #line 2944 
    if (! netif_tx_queue_stopped(netdev_get_tx_queue(dev,queue))) {
      #line 2945 
      netif_tx_stop_queue(netdev_get_tx_queue(priv->dev,queue));
      #line 2948 
      netdev_err(priv->dev,(char *)"%s: Tx Ring full when queue awake\n",(char *)"stmmac_tso_xmit");
    }
    #line 2952 
    return NETDEV_TX_BUSY;
  }
  #line 2955 
  pay_len = skb_headlen(skb) - (unsigned int)proto_hdr_len;
  #line 2957 
  mss = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 2960 
  if (tx_q->mss != mss) {
    #line 2961 
    mss_desc = tx_q->dma_tx + (unsigned long)tx_q->cur_tx;
    {
      #line 2962 
      int __result = -22;
      #line 2962 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_mss != (void (*)(struct dma_desc *, unsigned int ))0) {
        #line 2962 
        (*(((priv->hw)->desc)->set_mss))(mss_desc,mss);
        #line 2962 
        __result = 0;
      }
      #line 2962 
      int tmp_13 = __result;
    }
    #line 2963 
    tx_q->mss = mss;
    #line 2964 
    tx_q->cur_tx = (tx_q->cur_tx + 1U) & 511U;
    {
      #line 2965 
      int __ret_warn_on = *(tx_q->tx_skbuff + (unsigned long)tx_q->cur_tx) != (struct sk_buff *)0;
      #line 2965 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 2966 
        ldv_inline_asm();
        #line 2967 
        ldv_inline_asm();
      }
      #line 2965 
      long tmp_15 = (long)(__ret_warn_on != 0);
    }
  }
  #line 2968 
  if ((priv->msg_enable & 256U) != 0U) {
    #line 2969 
    printk((char *)"\001",(char *)"stmmac_tso_xmit",(int)hdr,(int)proto_hdr_len,pay_len,mss);
    #line 2971 
    printk((char *)"\001",skb->len,skb->data_len);
  }
  #line 2976 
  has_vlan = stmmac_vlan_insert(priv,skb,tx_q);
  #line 2978 
  first_entry = tx_q->cur_tx;
  {
    #line 2979 
    int __ret_warn_on_0 = *(tx_q->tx_skbuff + (unsigned long)first_entry) != (struct sk_buff *)0;
    #line 2979 
    if ((long)(__ret_warn_on_0 != 0) != 0L) {
      #line 2980 
      ldv_inline_asm();
      #line 2981 
      ldv_inline_asm();
    }
    #line 2979 
    long tmp_17 = (long)(__ret_warn_on_0 != 0);
  }
  #line 2981 
  desc = tx_q->dma_tx + (unsigned long)first_entry;
  #line 2982 
  first = desc;
  #line 2984 
  if ((int)has_vlan != 0) {
    #line 2985 
    int __result_0 = -22;
    #line 2985 
    if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_vlan != (void (*)(struct dma_desc *, u32 ))0) {
      #line 2985 
      (*(((priv->hw)->desc)->set_vlan))(first,2U);
      #line 2985 
      __result_0 = 0;
    }
    #line 2985 
    int tmp_19 = __result_0;
  }
  #line 2988 
  ;
  #line 2988 
  ;
  #line 2988 
  des = dma_map_single_attrs(priv->device,(void *)skb->data,(unsigned long)skb_headlen(skb),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 2990 
  if (dma_mapping_error(priv->device,des) != 0) 
                                                #line 2991 
                                                goto dma_map_err;
  #line 2993 
  (tx_q->tx_skbuff_dma + (unsigned long)first_entry)->buf = des;
  #line 2994 
  (tx_q->tx_skbuff_dma + (unsigned long)first_entry)->len = skb_headlen(skb);
  #line 2996 
  if (priv->dma_cap.addr64 <= 32U) {
    #line 2997 
    first->des0 = (unsigned int)des;
    #line 3000 
    if (pay_len != 0U) 
                       #line 3001 
                       first->des1 = (unsigned int)des + (unsigned int)proto_hdr_len;
    #line 3004 
    tmp_pay_len = (int)(pay_len + 4294950913U);
  }
  else {
    {
      #line 3006 
      int __result_1 = -22;
      #line 3006 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_addr != (void (*)(struct dma_desc *, dma_addr_t ))0) {
        #line 3006 
        (*(((priv->hw)->desc)->set_addr))(first,des);
        #line 3006 
        __result_1 = 0;
      }
      #line 3006 
      int tmp_21 = __result_1;
    }
    #line 3007 
    tmp_pay_len = (int)pay_len;
    #line 3008 
    des = (unsigned long long)proto_hdr_len + des;
    #line 3009 
    pay_len = 0U;
  }
  #line 3012 
  stmmac_tso_allocator(priv,des,tmp_pay_len,(_Bool)(nfrags == 0),queue);
  #line 3015 
  i = 0;
  #line 3015 
  while (i < nfrags) {
    {
      #line 3016 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 3018 
      ;
      #line 3018 
      ;
      #line 3018 
      des = skb_frag_dma_map(priv->device,frag,0UL,(unsigned long)skb_frag_size(frag),(enum dma_data_direction)DMA_TO_DEVICE);
      #line 3021 
      if (dma_mapping_error(priv->device,des) != 0) 
                                                    #line 3022 
                                                    goto dma_map_err;
      #line 3024 
      ;
      #line 3024 
      ;
      #line 3024 
      ;
      #line 3024 
      ;
      #line 3024 
      stmmac_tso_allocator(priv,des,(int)skb_frag_size(frag),(_Bool)(nfrags + -1 == i),queue);
      #line 3027 
      (tx_q->tx_skbuff_dma + (unsigned long)tx_q->cur_tx)->buf = des;
      #line 3028 
      (tx_q->tx_skbuff_dma + (unsigned long)tx_q->cur_tx)->len = skb_frag_size(frag);
      #line 3029 
      (tx_q->tx_skbuff_dma + (unsigned long)tx_q->cur_tx)->map_as_page = (_Bool)1;
    }
    #line 3015 
    i ++;
  }
  #line 3032 
  (tx_q->tx_skbuff_dma + (unsigned long)tx_q->cur_tx)->last_segment = (_Bool)1;
  #line 3035 
  *(tx_q->tx_skbuff + (unsigned long)tx_q->cur_tx) = skb;
  #line 3038 
  tx_packets = (tx_q->cur_tx - (unsigned int)first_tx) + 1U;
  #line 3039 
  tx_q->tx_count_frames += tx_packets;
  #line 3041 
  ;
  #line 3041 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 1) != 0) {
    #line 3041 
    if (priv->hwts_tx_en != 0) 
                               #line 3042 
                               set_ic = (_Bool)1; else 
                                                       #line 3041 
                                                       goto _LAND;
  }
  else {
    #line 3041 
    _LAND: 
           #line 3043 
    ;
    #line 3043 
    if (priv->tx_coal_frames == 0U) 
                                    #line 3044 
                                    set_ic = (_Bool)0;
    else 
      #line 3045 
      if (priv->tx_coal_frames < tx_packets) 
                                             #line 3046 
                                             set_ic = (_Bool)1;
      else 
        #line 3047 
        if (tx_q->tx_count_frames % priv->tx_coal_frames < tx_packets) 
          #line 3048 
          set_ic = (_Bool)1; else 
                                  #line 3050 
                                  set_ic = (_Bool)0;
  }
  #line 3052 
  if ((int)set_ic != 0) {
    #line 3053 
    desc = tx_q->dma_tx + (unsigned long)tx_q->cur_tx;
    #line 3054 
    tx_q->tx_count_frames = 0U;
    {
      #line 3055 
      int __result_2 = -22;
      #line 3055 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_tx_ic != (void (*)(struct dma_desc *))0) {
        #line 3055 
        (*(((priv->hw)->desc)->set_tx_ic))(desc);
        #line 3055 
        __result_2 = 0;
      }
      #line 3055 
      int tmp_23 = __result_2;
    }
    #line 3056 
    (priv->xstats.tx_set_ic_bit) ++;
  }
  #line 3064 
  tx_q->cur_tx = (tx_q->cur_tx + 1U) & 511U;
  #line 3066 
  if ((long)(stmmac_tx_avail(priv,queue) <= 18U) != 0L) {
    #line 3067 
    if ((priv->msg_enable & 8192U) != 0U) {
      #line 3067 
      bool branch;
      #line 3067 
      struct _ddebug __UNIQUE_ID_ddebug585 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_tso_xmit", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"%s: stop transmitted packets\n", .lineno = (unsigned int)3067U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3067 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug585.key.dd_key_false.key,(_Bool)0);
      #line 3067 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3067 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug585,priv->dev,(char *)"%s: stop transmitted packets\n",(char *)"stmmac_tso_xmit");
    }
    #line 3069 
    netif_tx_stop_queue(netdev_get_tx_queue(priv->dev,queue));
  }
  #line 3072 
  dev->stats.tx_bytes += (unsigned long)skb->len;
  #line 3073 
  (priv->xstats.tx_tso_frames) ++;
  #line 3074 
  priv->xstats.tx_tso_nfrags += (unsigned long)nfrags;
  #line 3076 
  if (priv->sarc_type != 0U) {
    #line 3077 
    int __result_3 = -22;
    #line 3077 
    if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_sarc != (void (*)(struct dma_desc *, u32 ))0) {
      #line 3077 
      (*(((priv->hw)->desc)->set_sarc))(first,priv->sarc_type);
      #line 3077 
      __result_3 = 0;
    }
    #line 3077 
    int tmp_25 = __result_3;
  }
  #line 3079 
  skb_tx_timestamp(skb);
  #line 3081 
  ;
  #line 3081 
  if ((long)(((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 1) != 0) != 0L) 
    #line 3081 
    if ((long)(priv->hwts_tx_en != 0) != 0L) {
      #line 3084 
      ((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags = (unsigned char)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags | 4U);
      {
        #line 3085 
        int __result_4 = -22;
        #line 3085 
        if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->enable_tx_timestamp != (void (*)(struct dma_desc *))0) {
          #line 3085 
          (*(((priv->hw)->desc)->enable_tx_timestamp))(first);
          #line 3085 
          __result_4 = 0;
        }
        #line 3085 
        int tmp_27 = __result_4;
      }
    }
  {
    #line 3089 
    int __result_5 = -22;
    #line 3089 
    if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->prepare_tso_tx_desc != (void (*)(struct dma_desc *, int , int , int , bool , bool , unsigned int , unsigned int ))0) {
      #line 3089 
      (*(((priv->hw)->desc)->prepare_tso_tx_desc))(first,1,(int)proto_hdr_len,(int)pay_len,(_Bool)1,(_Bool)((bool)((int)(tx_q->tx_skbuff_dma + (unsigned long)first_entry)->last_segment) != 0),(unsigned int)hdr / 4U,skb->len - (unsigned int)proto_hdr_len);
      #line 3089 
      __result_5 = 0;
    }
    #line 3089 
    int tmp_29 = __result_5;
  }
  #line 3096 
  if (mss_desc != (struct dma_desc *)0) {
    #line 3098 
    ldv_inline_asm();
    {
      #line 3103 
      int __result_6 = -22;
      #line 3103 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_tx_owner != (void (*)(struct dma_desc *))0) {
        #line 3103 
        (*(((priv->hw)->desc)->set_tx_owner))(mss_desc);
        #line 3103 
        __result_6 = 0;
      }
      #line 3103 
      int tmp_31 = __result_6;
    }
  }
  #line 3106 
  ldv_inline_asm();
  #line 3112 
  if ((priv->msg_enable & 4096U) != 0U) {
    #line 3113 
    printk((char *)"\001",(char *)"stmmac_tso_xmit",tx_q->cur_tx,tx_q->dirty_tx,first_entry,tx_q->cur_tx,first,nfrags);
    {
      #line 3117 
      int __result_7 = -22;
      #line 3117 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->display_ring != (void (*)(void *, unsigned int , bool ))0) {
        #line 3117 
        (*(((priv->hw)->desc)->display_ring))((void *)tx_q->dma_tx,512U,(_Bool)0);
        #line 3117 
        __result_7 = 0;
      }
      #line 3117 
      int tmp_33 = __result_7;
    }
    #line 3119 
    printk((char *)"\001");
    #line 3120 
    ;
    #line 3120 
    print_pkt(skb->data,(int)skb_headlen(skb));
  }
  #line 3123 
  ;
  #line 3123 
  netdev_tx_sent_queue(netdev_get_tx_queue(dev,queue),skb->len);
  #line 3125 
  tx_q->tx_tail_addr = (unsigned int)tx_q->dma_tx_phy + tx_q->cur_tx * 16U;
  {
    #line 3126 
    int __result_8 = -22;
    #line 3126 
    if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->set_tx_tail_ptr != (void (*)(void *, u32 , u32 ))0) {
      #line 3126 
      (*(((priv->hw)->dma)->set_tx_tail_ptr))(priv->ioaddr,tx_q->tx_tail_addr,queue);
      #line 3126 
      __result_8 = 0;
    }
    #line 3126 
    int tmp_35 = __result_8;
  }
  #line 3127 
  stmmac_tx_timer_arm(priv,queue);
  #line 3129 
  return NETDEV_TX_OK;
  #line 3131 
  dma_map_err: 
               #line 3131 
  ;
  #line 3132 
  _dev_err(priv->device,(char *)"Tx dma map failed\n");
  #line 3133 
  consume_skb(skb);
  #line 3134 
  ((priv->dev)->stats.tx_dropped) ++;
  #line 3135 
  return NETDEV_TX_OK;
}

#line 3146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static netdev_tx_t stmmac_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 3148 
  unsigned int first_entry;
  #line 3148 
  unsigned int tx_packets;
  #line 3148 
  unsigned int enh_desc;
  #line 3151 
  int i;
  #line 3155 
  struct dma_desc *desc;
  #line 3155 
  struct dma_desc *first;
  #line 3156 
  struct stmmac_tx_queue *tx_q;
  #line 3157 
  bool has_vlan;
  #line 3157 
  bool set_ic;
  #line 3158 
  int entry;
  #line 3158 
  int first_tx;
  #line 3159 
  dma_addr_t des;
  #line 3149 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 3150 
  unsigned int nopaged_len = skb_headlen(skb);
  #line 3151 
  int csum_insertion = 0;
  #line 3151 
  int is_jumbo = 0;
  #line 3152 
  u32 queue = (unsigned int)skb_get_queue_mapping(skb);
  #line 3153 
  int nfrags = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 3154 
  int gso = (int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_type;
  #line 3161 
  tx_q = & priv->tx_queue[queue];
  #line 3162 
  first_tx = (int)tx_q->cur_tx;
  #line 3164 
  if ((int)priv->tx_path_in_lpi_mode != 0) 
                                           #line 3165 
                                           stmmac_disable_eee_mode(priv);
  #line 3168 
  if ((int)skb_is_gso(skb) != 0) 
    #line 3168 
    if ((int)priv->tso != 0) {
      #line 3169 
      if ((gso & 17) != 0) {
        #line 3170 
        return stmmac_tso_xmit(skb,dev);
      }
      #line 3171 
      if ((priv->plat)->has_gmac4 != 0 && (gso & 131072) != 0) {
        #line 3172 
        return stmmac_tso_xmit(skb,dev);
      }
    }
  #line 3175 
  ;
  #line 3175 
  if ((long)(stmmac_tx_avail(priv,queue) < (unsigned int)(nfrags + 1)) != 0L) {
    #line 3176 
    if (! netif_tx_queue_stopped(netdev_get_tx_queue(dev,queue))) {
      #line 3177 
      netif_tx_stop_queue(netdev_get_tx_queue(priv->dev,queue));
      #line 3180 
      netdev_err(priv->dev,(char *)"%s: Tx Ring full when queue awake\n",(char *)"stmmac_xmit");
    }
    #line 3184 
    return NETDEV_TX_BUSY;
  }
  #line 3188 
  has_vlan = stmmac_vlan_insert(priv,skb,tx_q);
  #line 3190 
  entry = (int)tx_q->cur_tx;
  #line 3191 
  first_entry = (unsigned int)entry;
  {
    #line 3192 
    int __ret_warn_on = *(tx_q->tx_skbuff + (unsigned long)first_entry) != (struct sk_buff *)0;
    #line 3192 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 3193 
      ldv_inline_asm();
      #line 3194 
      ldv_inline_asm();
    }
    #line 3192 
    long tmp_11 = (long)(__ret_warn_on != 0);
  }
  #line 3194 
  csum_insertion = (unsigned int)skb->ip_summed == 3U;
  #line 3196 
  if ((long)(priv->extend_desc != 0) != 0L) 
                                            #line 3197 
                                            desc = (struct dma_desc *)(tx_q->dma_etx + (unsigned long)entry); else 
                                                                    #line 3199 
                                                                    desc = tx_q->dma_tx + (unsigned long)entry;
  #line 3201 
  first = desc;
  #line 3203 
  if ((int)has_vlan != 0) {
    #line 3204 
    int __result = -22;
    #line 3204 
    if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_vlan != (void (*)(struct dma_desc *, u32 ))0) {
      #line 3204 
      (*(((priv->hw)->desc)->set_vlan))(first,2U);
      #line 3204 
      __result = 0;
    }
    #line 3204 
    int tmp_13 = __result;
  }
  #line 3206 
  enh_desc = (unsigned int)(priv->plat)->enh_desc;
  #line 3208 
  if (enh_desc != 0U) {
    #line 3209 
    int __result_0;
    #line 3209 
    __result_0 = -22;
    #line 3209 
    if ((priv->hw)->mode != (struct stmmac_mode_ops *)0 && ((priv->hw)->mode)->is_jumbo_frm != (unsigned int (*)(int , int ))0) {
      #line 3209 
      __result_0 = (int)(*(((priv->hw)->mode)->is_jumbo_frm))((int)skb->len,(int)enh_desc);
    }
    #line 3209 
    is_jumbo = __result_0;
  }
  #line 3211 
  if ((long)(is_jumbo != 0) != 0L) {
    #line 3212 
    int __result_1;
    #line 3212 
    __result_1 = -22;
    #line 3212 
    if ((priv->hw)->mode != (struct stmmac_mode_ops *)0 && ((priv->hw)->mode)->jumbo_frm != (int (*)(void *, struct sk_buff *, int ))0) 
      #line 3212 
      __result_1 = (*(((priv->hw)->mode)->jumbo_frm))((void *)tx_q,skb,csum_insertion);
    #line 3212 
    entry = __result_1;
    #line 3213 
    if ((long)(entry < 0) != 0L && entry != -22) 
                                                 #line 3214 
                                                 goto dma_map_err;
  }
  #line 3217 
  i = 0;
  #line 3217 
  while (i < nfrags) {
    {
      #line 3218 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 3219 
      int len = (int)skb_frag_size(frag);
      #line 3220 
      bool last_segment = (_Bool)(nfrags + -1 == i);
      #line 3222 
      entry = (entry + 1) & 511;
      {
        #line 3223 
        int __ret_warn_on_0 = *(tx_q->tx_skbuff + (unsigned long)entry) != (struct sk_buff *)0;
        #line 3223 
        if ((long)(__ret_warn_on_0 != 0) != 0L) {
          #line 3224 
          ldv_inline_asm();
          #line 3225 
          ldv_inline_asm();
        }
        #line 3223 
        long tmp_16 = (long)(__ret_warn_on_0 != 0);
      }
      #line 3225 
      if ((long)(priv->extend_desc != 0) != 0L) 
                                                #line 3226 
                                                desc = (struct dma_desc *)(tx_q->dma_etx + (unsigned long)entry); else 
                                                                    #line 3228 
                                                                    desc = tx_q->dma_tx + (unsigned long)entry;
      #line 3230 
      des = skb_frag_dma_map(priv->device,frag,0UL,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE);
      #line 3232 
      if (dma_mapping_error(priv->device,des) != 0) 
                                                    #line 3233 
                                                    goto dma_map_err;
      #line 3235 
      (tx_q->tx_skbuff_dma + (unsigned long)entry)->buf = des;
      {
        #line 3237 
        int __result_2 = -22;
        #line 3237 
        if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_addr != (void (*)(struct dma_desc *, dma_addr_t ))0) {
          #line 3237 
          (*(((priv->hw)->desc)->set_addr))(desc,des);
          #line 3237 
          __result_2 = 0;
        }
        #line 3237 
        int tmp_18 = __result_2;
      }
      #line 3239 
      (tx_q->tx_skbuff_dma + (unsigned long)entry)->map_as_page = (_Bool)1;
      #line 3240 
      (tx_q->tx_skbuff_dma + (unsigned long)entry)->len = (unsigned int)len;
      #line 3241 
      (tx_q->tx_skbuff_dma + (unsigned long)entry)->last_segment = last_segment;
      {
        #line 3244 
        int __result_3 = -22;
        #line 3244 
        if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->prepare_tx_desc != (void (*)(struct dma_desc *, int , int , bool , int , bool , bool , unsigned int ))0) {
          #line 3244 
          (*(((priv->hw)->desc)->prepare_tx_desc))(desc,0,len,(_Bool)(csum_insertion != 0),(int)priv->mode,(_Bool)1,(_Bool)((bool)((int)last_segment) != 0),skb->len);
          #line 3244 
          __result_3 = 0;
        }
        #line 3244 
        int tmp_20 = __result_3;
      }
    }
    #line 3217 
    i ++;
  }
  #line 3249 
  *(tx_q->tx_skbuff + (unsigned long)entry) = skb;
  #line 3256 
  tx_packets = (unsigned int)((entry + 1) - first_tx);
  #line 3257 
  tx_q->tx_count_frames += tx_packets;
  #line 3259 
  ;
  #line 3259 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 1) != 0) {
    #line 3259 
    if (priv->hwts_tx_en != 0) 
                               #line 3260 
                               set_ic = (_Bool)1; else 
                                                       #line 3259 
                                                       goto _LAND;
  }
  else {
    #line 3259 
    _LAND: 
           #line 3261 
    ;
    #line 3261 
    if (priv->tx_coal_frames == 0U) 
                                    #line 3262 
                                    set_ic = (_Bool)0;
    else 
      #line 3263 
      if (priv->tx_coal_frames < tx_packets) 
                                             #line 3264 
                                             set_ic = (_Bool)1;
      else 
        #line 3265 
        if (tx_q->tx_count_frames % priv->tx_coal_frames < tx_packets) 
          #line 3266 
          set_ic = (_Bool)1; else 
                                  #line 3268 
                                  set_ic = (_Bool)0;
  }
  #line 3270 
  if ((int)set_ic != 0) {
    #line 3271 
    if ((long)(priv->extend_desc != 0) != 0L) 
                                              #line 3272 
                                              desc = & (tx_q->dma_etx + (unsigned long)entry)->basic; else 
                                                                    #line 3274 
                                                                    desc = tx_q->dma_tx + (unsigned long)entry;
    #line 3276 
    tx_q->tx_count_frames = 0U;
    {
      #line 3277 
      int __result_4 = -22;
      #line 3277 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_tx_ic != (void (*)(struct dma_desc *))0) {
        #line 3277 
        (*(((priv->hw)->desc)->set_tx_ic))(desc);
        #line 3277 
        __result_4 = 0;
      }
      #line 3277 
      int tmp_22 = __result_4;
    }
    #line 3278 
    (priv->xstats.tx_set_ic_bit) ++;
  }
  #line 3286 
  entry = (entry + 1) & 511;
  #line 3287 
  tx_q->cur_tx = (unsigned int)entry;
  #line 3289 
  if ((priv->msg_enable & 4096U) != 0U) {
    #line 3290 
    void *tx_head;
    {
      #line 3292 
      bool branch;
      #line 3292 
      struct _ddebug __UNIQUE_ID_ddebug588 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_xmit", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"%s: curr=%d dirty=%d f=%d, e=%d, first=%p, nfrags=%d", .lineno = (unsigned int)3292U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3292 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug588.key.dd_key_false.key,(_Bool)0);
      #line 3292 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3292 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug588,priv->dev,(char *)"%s: curr=%d dirty=%d f=%d, e=%d, first=%p, nfrags=%d",(char *)"stmmac_xmit",tx_q->cur_tx,tx_q->dirty_tx,first_entry,entry,first,nfrags);
    }
    #line 3297 
    if (priv->extend_desc != 0) 
                                #line 3298 
                                tx_head = (void *)tx_q->dma_etx; else 
                                                                   #line 3300 
                                                                   tx_head = (void *)tx_q->dma_tx;
    {
      #line 3302 
      int __result_5 = -22;
      #line 3302 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->display_ring != (void (*)(void *, unsigned int , bool ))0) {
        #line 3302 
        (*(((priv->hw)->desc)->display_ring))(tx_head,512U,(_Bool)0);
        #line 3302 
        __result_5 = 0;
      }
      #line 3302 
      int tmp_24 = __result_5;
    }
    {
      #line 3304 
      bool branch_0;
      #line 3304 
      struct _ddebug __UNIQUE_ID_ddebug589 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_xmit", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)">>> frame to be transmitted: ", .lineno = (unsigned int)3304U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3304 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug589.key.dd_key_false.key,(_Bool)0);
      #line 3304 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 3304 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug589,priv->dev,(char *)">>> frame to be transmitted: ");
    }
    #line 3305 
    print_pkt(skb->data,(int)skb->len);
  }
  #line 3308 
  if ((long)(stmmac_tx_avail(priv,queue) <= 18U) != 0L) {
    #line 3309 
    if ((priv->msg_enable & 8192U) != 0U) {
      #line 3309 
      bool branch_1;
      #line 3309 
      struct _ddebug __UNIQUE_ID_ddebug590 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_xmit", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"%s: stop transmitted packets\n", .lineno = (unsigned int)3309U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3309 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug590.key.dd_key_false.key,(_Bool)0);
      #line 3309 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 3309 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug590,priv->dev,(char *)"%s: stop transmitted packets\n",(char *)"stmmac_xmit");
    }
    #line 3311 
    netif_tx_stop_queue(netdev_get_tx_queue(priv->dev,queue));
  }
  #line 3314 
  dev->stats.tx_bytes += (unsigned long)skb->len;
  #line 3316 
  if (priv->sarc_type != 0U) {
    #line 3317 
    int __result_6 = -22;
    #line 3317 
    if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_sarc != (void (*)(struct dma_desc *, u32 ))0) {
      #line 3317 
      (*(((priv->hw)->desc)->set_sarc))(first,priv->sarc_type);
      #line 3317 
      __result_6 = 0;
    }
    #line 3317 
    int tmp_26 = __result_6;
  }
  #line 3319 
  skb_tx_timestamp(skb);
  #line 3325 
  if ((long)(is_jumbo == 0) != 0L) {
    #line 3326 
    bool last_segment_0 = (_Bool)(nfrags == 0);
    #line 3328 
    des = dma_map_single_attrs(priv->device,(void *)skb->data,(unsigned long)nopaged_len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 3330 
    if (dma_mapping_error(priv->device,des) != 0) 
                                                  #line 3331 
                                                  goto dma_map_err;
    #line 3333 
    (tx_q->tx_skbuff_dma + (unsigned long)first_entry)->buf = des;
    {
      #line 3335 
      int __result_7 = -22;
      #line 3335 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_addr != (void (*)(struct dma_desc *, dma_addr_t ))0) {
        #line 3335 
        (*(((priv->hw)->desc)->set_addr))(first,des);
        #line 3335 
        __result_7 = 0;
      }
      #line 3335 
      int tmp_28 = __result_7;
    }
    #line 3337 
    (tx_q->tx_skbuff_dma + (unsigned long)first_entry)->len = nopaged_len;
    #line 3338 
    (tx_q->tx_skbuff_dma + (unsigned long)first_entry)->last_segment = last_segment_0;
    #line 3340 
    ;
    #line 3340 
    if ((long)(((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 1) != 0) != 0L) 
      #line 3340 
      if ((long)(priv->hwts_tx_en != 0) != 0L) {
        #line 3343 
        ((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags = (unsigned char)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags | 4U);
        {
          #line 3344 
          int __result_8 = -22;
          #line 3344 
          if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->enable_tx_timestamp != (void (*)(struct dma_desc *))0) {
            #line 3344 
            (*(((priv->hw)->desc)->enable_tx_timestamp))(first);
            #line 3344 
            __result_8 = 0;
          }
          #line 3344 
          int tmp_30 = __result_8;
        }
      }
    {
      #line 3348 
      int __result_9 = -22;
      #line 3348 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->prepare_tx_desc != (void (*)(struct dma_desc *, int , int , bool , int , bool , bool , unsigned int ))0) {
        #line 3348 
        (*(((priv->hw)->desc)->prepare_tx_desc))(first,1,(int)nopaged_len,(_Bool)(csum_insertion != 0),(int)priv->mode,(_Bool)1,(_Bool)((bool)((int)last_segment_0) != 0),skb->len);
        #line 3348 
        __result_9 = 0;
      }
      #line 3348 
      int tmp_32 = __result_9;
    }
  }
  else {
    #line 3352 
    int __result_10 = -22;
    #line 3352 
    if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_tx_owner != (void (*)(struct dma_desc *))0) {
      #line 3352 
      (*(((priv->hw)->desc)->set_tx_owner))(first);
      #line 3352 
      __result_10 = 0;
    }
    #line 3352 
    int tmp_34 = __result_10;
  }
  #line 3354 
  ldv_inline_asm();
  #line 3361 
  ;
  #line 3361 
  netdev_tx_sent_queue(netdev_get_tx_queue(dev,queue),skb->len);
  {
    #line 3363 
    int __result_11 = -22;
    #line 3363 
    if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->enable_dma_transmission != (void (*)(void *))0) {
      #line 3363 
      (*(((priv->hw)->dma)->enable_dma_transmission))(priv->ioaddr);
      #line 3363 
      __result_11 = 0;
    }
    #line 3363 
    int tmp_36 = __result_11;
  }
  #line 3365 
  tx_q->tx_tail_addr = (unsigned int)tx_q->dma_tx_phy + tx_q->cur_tx * 16U;
  {
    #line 3366 
    int __result_12 = -22;
    #line 3366 
    if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->set_tx_tail_ptr != (void (*)(void *, u32 , u32 ))0) {
      #line 3366 
      (*(((priv->hw)->dma)->set_tx_tail_ptr))(priv->ioaddr,tx_q->tx_tail_addr,queue);
      #line 3366 
      __result_12 = 0;
    }
    #line 3366 
    int tmp_38 = __result_12;
  }
  #line 3367 
  stmmac_tx_timer_arm(priv,queue);
  #line 3369 
  return NETDEV_TX_OK;
  #line 3371 
  dma_map_err: 
               #line 3371 
  ;
  #line 3372 
  netdev_err(priv->dev,(char *)"Tx DMA map failed\n");
  #line 3373 
  consume_skb(skb);
  #line 3374 
  ((priv->dev)->stats.tx_dropped) ++;
  #line 3375 
  return NETDEV_TX_OK;
}

#line 3378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_rx_vlan(struct net_device *dev, struct sk_buff *skb)
{
  #line 3380 
  struct vlan_ethhdr *veth;
  #line 3381 
  __be16 vlan_proto;
  #line 3382 
  u16 vlanid;
  #line 3384 
  veth = (struct vlan_ethhdr *)skb->data;
  #line 3385 
  vlan_proto = veth->h_vlan_proto;
  #line 3387 
  if ((unsigned int)vlan_proto == 129U && (dev->features & 256ULL) != 0ULL || (unsigned int)vlan_proto == 43144U && (dev->features & 35184372088832ULL) != 0ULL) {
    #line 3392 
    vlanid = __builtin_bswap16((unsigned short)((int)veth->h_vlan_TCI));
    #line 3393 
    __memmove((void *)(skb->data + 4U),(void *)veth,12UL);
    #line 3394 
    skb_pull(skb,4U);
    #line 3395 
    __vlan_hwaccel_put_tag(skb,(unsigned short)((int)vlan_proto),(unsigned short)((int)vlanid));
  }
  #line 3397 
  return;
}

#line 3415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
__inline static void stmmac_rx_refill(struct stmmac_priv *priv, u32 queue)
{
  #line 3418 
  int len;
  #line 3417 
  struct stmmac_rx_queue *rx_q = & priv->rx_queue[queue];
  #line 3418 
  int dirty = (int)stmmac_rx_dirty(priv,queue);
  #line 3419 
  unsigned int entry = rx_q->dirty_rx;
  #line 3421 
  len = (int)(priv->dma_buf_sz + 4095U) & -4096;
  #line 3423 
  while (1) {
    #line 3423 
    int tmp_0;
    #line 3423 
    tmp_0 = dirty;
    #line 3423 
    dirty --;
    #line 3423 
    ;
    #line 3423 
    if (! (tmp_0 > 0)) 
                       #line 3423 
                       break;
    {
      #line 3425 
      struct dma_desc *p;
      #line 3426 
      bool use_rx_wd;
      #line 3424 
      struct stmmac_rx_buffer *buf = rx_q->buf_pool + (unsigned long)entry;
      #line 3428 
      if (priv->extend_desc != 0) 
                                  #line 3429 
                                  p = (struct dma_desc *)(rx_q->dma_erx + (unsigned long)entry); else 
                                                                    #line 3431 
                                                                    p = rx_q->dma_rx + (unsigned long)entry;
      #line 3433 
      if (buf->page == (struct page *)0) {
        #line 3434 
        buf->page = page_pool_dev_alloc_pages(rx_q->page_pool);
        #line 3435 
        if (buf->page == (struct page *)0) 
                                           #line 3436 
                                           break;
      }
      #line 3439 
      if (priv->sph != 0 && buf->sec_page == (struct page *)0) {
        #line 3440 
        buf->sec_page = page_pool_dev_alloc_pages(rx_q->page_pool);
        #line 3441 
        if (buf->sec_page == (struct page *)0) 
                                               #line 3442 
                                               break;
        #line 3444 
        buf->sec_addr = page_pool_get_dma_addr(buf->sec_page);
        #line 3446 
        dma_sync_single_for_device(priv->device,buf->sec_addr,(unsigned long)len,(enum dma_data_direction)DMA_FROM_DEVICE);
      }
      #line 3450 
      buf->addr = page_pool_get_dma_addr(buf->page);
      #line 3455 
      dma_sync_single_for_device(priv->device,buf->addr,(unsigned long)len,(enum dma_data_direction)DMA_FROM_DEVICE);
      {
        #line 3458 
        int __result = -22;
        #line 3458 
        if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_addr != (void (*)(struct dma_desc *, dma_addr_t ))0) {
          #line 3458 
          (*(((priv->hw)->desc)->set_addr))(p,buf->addr);
          #line 3458 
          __result = 0;
        }
        #line 3458 
        int tmp_2 = __result;
      }
      {
        #line 3459 
        int __result_0 = -22;
        #line 3459 
        if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_sec_addr != (void (*)(struct dma_desc *, dma_addr_t ))0) {
          #line 3459 
          (*(((priv->hw)->desc)->set_sec_addr))(p,buf->sec_addr);
          #line 3459 
          __result_0 = 0;
        }
        #line 3459 
        int tmp_4 = __result_0;
      }
      {
        #line 3460 
        int __result_1 = -22;
        #line 3460 
        if ((priv->hw)->mode != (struct stmmac_mode_ops *)0 && ((priv->hw)->mode)->refill_desc3 != (void (*)(void *, struct dma_desc *))0) {
          #line 3460 
          (*(((priv->hw)->mode)->refill_desc3))((void *)rx_q,p);
          #line 3460 
          __result_1 = 0;
        }
        #line 3460 
        int tmp_6 = __result_1;
      }
      #line 3462 
      (rx_q->rx_count_frames) ++;
      #line 3463 
      rx_q->rx_count_frames += priv->rx_coal_frames;
      #line 3464 
      if (rx_q->rx_count_frames > priv->rx_coal_frames) 
                                                        #line 3465 
                                                        rx_q->rx_count_frames = 0U;
      #line 3467 
      use_rx_wd = (_Bool)(priv->rx_coal_frames == 0U);
      #line 3468 
      use_rx_wd = (_Bool)(((int)use_rx_wd | (rx_q->rx_count_frames != 0U)) != 0);
      #line 3469 
      if (priv->use_riwt == 0) 
                               #line 3470 
                               use_rx_wd = (_Bool)0;
      #line 3471 
      ldv_inline_asm();
      {
        #line 3473 
        int __result_2 = -22;
        #line 3473 
        if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->set_rx_owner != (void (*)(struct dma_desc *, int ))0) {
          #line 3473 
          (*(((priv->hw)->desc)->set_rx_owner))(p,(int)use_rx_wd);
          #line 3473 
          __result_2 = 0;
        }
        #line 3473 
        int tmp_8 = __result_2;
      }
      #line 3475 
      entry = (entry + 1U) & 511U;
    }
  }
  #line 3477 
  rx_q->dirty_rx = entry;
  #line 3478 
  rx_q->rx_tail_addr = (unsigned int)rx_q->dma_rx_phy + rx_q->dirty_rx * 16U;
  {
    #line 3480 
    int __result_3 = -22;
    #line 3480 
    if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->set_rx_tail_ptr != (void (*)(void *, u32 , u32 ))0) {
      #line 3480 
      (*(((priv->hw)->dma)->set_rx_tail_ptr))(priv->ioaddr,rx_q->rx_tail_addr,queue);
      #line 3480 
      __result_3 = 0;
    }
    #line 3480 
    int tmp_10 = __result_3;
  }
  #line 3482 
  return;
}

#line 3483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static unsigned int stmmac_rx_buf1_len(struct stmmac_priv *priv, struct dma_desc *p, int status, unsigned int len)
{
  #line 3505 
  int __result_0;
  #line 3508 
  unsigned int __UNIQUE_ID___x591;
  #line 3508 
  unsigned int tmp_1;
  #line 3495 
  int __result;
  #line 3487 
  int ret;
  #line 3487 
  int coe = (int)(priv->hw)->rx_csum;
  #line 3488 
  unsigned int plen = 0U;
  #line 3488 
  unsigned int hlen = 0U;
  #line 3491 
  if (priv->sph != 0 && len != 0U) 
                                   #line 3492 
                                   return 0U;
  #line 3495 
  __result = -22;
  #line 3495 
  if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->get_rx_header_len != (int (*)(struct dma_desc *, unsigned int *))0) 
    #line 3495 
    __result = (*(((priv->hw)->desc)->get_rx_header_len))(p,& hlen);
  #line 3495 
  ret = __result;
  #line 3496 
  if (priv->sph != 0 && hlen != 0U) {
    #line 3497 
    (priv->xstats.rx_split_hdr_pkt_n) ++;
    #line 3498 
    return hlen;
  }
  #line 3502 
  if ((status & 16) != 0) 
                          #line 3503 
                          return priv->dma_buf_sz;
  #line 3505 
  __result_0 = -22;
  #line 3505 
  if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->get_rx_frame_len != (int (*)(struct dma_desc *, int ))0) 
    #line 3505 
    __result_0 = (*(((priv->hw)->desc)->get_rx_frame_len))(p,coe);
  #line 3505 
  plen = (unsigned int)__result_0;
  {
    #line 3508 
    __UNIQUE_ID___x591 = priv->dma_buf_sz;
    #line 3508 
    unsigned int __UNIQUE_ID___y592 = plen;
    #line 3508 
    if (__UNIQUE_ID___x591 < __UNIQUE_ID___y592) 
                                                 #line 3508 
                                                 tmp_1 = __UNIQUE_ID___x591; else 
                                                                    #line 3508 
                                                                    tmp_1 = __UNIQUE_ID___y592;
    }
  #line 3508 
  return tmp_1;
}

#line 3511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static unsigned int stmmac_rx_buf2_len(struct stmmac_priv *priv, struct dma_desc *p, int status, unsigned int len)
{
  #line 3526 
  int __result;
  #line 3515 
  int coe = (int)(priv->hw)->rx_csum;
  #line 3516 
  unsigned int plen = 0U;
  #line 3519 
  if (priv->sph == 0) 
                      #line 3520 
                      return 0U;
  #line 3523 
  if ((status & 16) != 0) 
                          #line 3524 
                          return priv->dma_buf_sz;
  #line 3526 
  __result = -22;
  #line 3526 
  if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->get_rx_frame_len != (int (*)(struct dma_desc *, int ))0) 
    #line 3526 
    __result = (*(((priv->hw)->desc)->get_rx_frame_len))(p,coe);
  #line 3526 
  plen = (unsigned int)__result;
  #line 3529 
  return plen - len;
}

#line 3540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_rx(struct stmmac_priv *priv, int limit, u32 queue)
{
  #line 3542 
  struct stmmac_rx_queue *rx_q = & priv->rx_queue[queue];
  #line 3543 
  struct stmmac_channel *ch = & priv->channel[queue];
  #line 3544 
  unsigned int count = 0U;
  #line 3544 
  unsigned int error = 0U;
  #line 3544 
  unsigned int len = 0U;
  #line 3545 
  int status = 0;
  #line 3545 
  int coe = (int)(priv->hw)->rx_csum;
  #line 3546 
  unsigned int next_entry = rx_q->cur_rx;
  #line 3547 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 3549 
  if ((priv->msg_enable & 2048U) != 0U) {
    #line 3550 
    void *rx_head;
    {
      #line 3552 
      bool branch;
      #line 3552 
      struct _ddebug __UNIQUE_ID_ddebug593 = {.modname = (char *)"stmmac", .function = (char *)"stmmac_rx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c", .format = (char *)"%s: descriptor ring:\n", .lineno = (unsigned int)3552U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3552 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug593.key.dd_key_false.key,(_Bool)0);
      #line 3552 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3552 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug593,priv->dev,(char *)"%s: descriptor ring:\n",(char *)"stmmac_rx");
    }
    #line 3553 
    if (priv->extend_desc != 0) 
                                #line 3554 
                                rx_head = (void *)rx_q->dma_erx; else 
                                                                   #line 3556 
                                                                   rx_head = (void *)rx_q->dma_rx;
    {
      #line 3558 
      int __result = -22;
      #line 3558 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->display_ring != (void (*)(void *, unsigned int , bool ))0) {
        #line 3558 
        (*(((priv->hw)->desc)->display_ring))(rx_head,512U,(_Bool)1);
        #line 3558 
        __result = 0;
      }
      #line 3558 
      int tmp_2 = __result;
    }
  }
  #line 3560 
  while (count < (unsigned int)limit) {
    #line 3594 
    int __result_0;
    #line 3717 
    int __result_2;
    #line 3562 
    enum pkt_hash_types hash_type;
    #line 3563 
    struct stmmac_rx_buffer *buf;
    #line 3564 
    struct dma_desc *np;
    #line 3564 
    struct dma_desc *p;
    #line 3565 
    int entry;
    #line 3566 
    u32 hash;
    #line 3561 
    unsigned int buf1_len = 0U;
    #line 3561 
    unsigned int buf2_len = 0U;
    #line 3568 
    if (count == 0U && rx_q->state_saved != 0U) {
      #line 3569 
      skb = rx_q->state.skb;
      #line 3570 
      error = rx_q->state.error;
      #line 3571 
      len = rx_q->state.len;
    }
    else {
      #line 3573 
      rx_q->state_saved = 0U;
      #line 3574 
      skb = (struct sk_buff *)0;
      #line 3575 
      error = 0U;
      #line 3576 
      len = 0U;
    }
    #line 3579 
    if (count >= (unsigned int)limit) 
                                      #line 3580 
                                      break;
    #line 3582 
    read_again: 
                #line 3582 
    ;
    #line 3583 
    buf1_len = 0U;
    #line 3584 
    buf2_len = 0U;
    #line 3585 
    entry = (int)next_entry;
    #line 3586 
    buf = rx_q->buf_pool + (unsigned long)entry;
    #line 3588 
    if (priv->extend_desc != 0) 
                                #line 3589 
                                p = (struct dma_desc *)(rx_q->dma_erx + (unsigned long)entry); else 
                                                                    #line 3591 
                                                                    p = rx_q->dma_rx + (unsigned long)entry;
    #line 3594 
    __result_0 = -22;
    #line 3594 
    if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->rx_status != (int (*)(void *, struct stmmac_extra_stats *, struct dma_desc *))0) 
      #line 3594 
      __result_0 = (*(((priv->hw)->desc)->rx_status))((void *)(& (priv->dev)->stats),& priv->xstats,p);
    #line 3594 
    status = __result_0;
    #line 3597 
    if ((long)((status & 8) != 0) != 0L) 
                                         #line 3598 
                                         break;
    #line 3600 
    rx_q->cur_rx = (rx_q->cur_rx + 1U) & 511U;
    #line 3601 
    next_entry = rx_q->cur_rx;
    #line 3603 
    if (priv->extend_desc != 0) 
                                #line 3604 
                                np = (struct dma_desc *)(rx_q->dma_erx + (unsigned long)next_entry); else 
                                                                    #line 3606 
                                                                    np = rx_q->dma_rx + (unsigned long)next_entry;
    #line 3608 
    __builtin_prefetch((void const *)((void *)np));
    #line 3610 
    if (priv->extend_desc != 0) {
      #line 3611 
      int __result_1 = -22;
      #line 3611 
      if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->rx_extended_status != (void (*)(void *, struct stmmac_extra_stats *, struct dma_extended_desc *))0) {
        #line 3611 
        (*(((priv->hw)->desc)->rx_extended_status))((void *)(& (priv->dev)->stats),& priv->xstats,rx_q->dma_erx + (unsigned long)entry);
        #line 3611 
        __result_1 = 0;
      }
      #line 3611 
      int tmp_4 = __result_1;
    }
    #line 3613 
    if ((long)(status == 1) != 0L) {
      #line 3614 
      page_pool_recycle_direct(rx_q->page_pool,buf->page);
      #line 3615 
      buf->page = (struct page *)0;
      #line 3616 
      error = 1U;
      #line 3617 
      if (priv->hwts_rx_en == 0) 
                                 #line 3618 
                                 ((priv->dev)->stats.rx_errors) ++;
    }
    #line 3621 
    if ((long)(error != 0U) != 0L && (long)((status & 16) != 0) != 0L) 
      #line 3622 
      goto read_again;
    #line 3623 
    if ((long)(error != 0U) != 0L) {
      #line 3624 
      consume_skb(skb);
      #line 3625 
      skb = (struct sk_buff *)0;
      #line 3626 
      count ++;
      #line 3627 
      continue;
    }
    #line 3632 
    __builtin_prefetch((void const *)lowmem_page_address(buf->page));
    #line 3633 
    if (buf->sec_page != (struct page *)0) {
      #line 3634 
      __builtin_prefetch((void const *)lowmem_page_address(buf->sec_page));
    }
    #line 3636 
    buf1_len = stmmac_rx_buf1_len(priv,p,status,len);
    #line 3637 
    len += buf1_len;
    #line 3638 
    buf2_len = stmmac_rx_buf2_len(priv,p,status,len);
    #line 3639 
    len += buf2_len;
    #line 3648 
    if ((long)((status & 16) == 0) != 0L && ((long)(priv->synopsys_id > 63) != 0L || (long)(status != 4) != 0L)) {
      #line 3651 
      if (buf2_len != 0U) 
                          #line 3652 
                          buf2_len += 4294967292U; else 
                                                        #line 3654 
                                                        buf1_len += 4294967292U;
      #line 3656 
      len += 4294967292U;
    }
    #line 3659 
    if (skb == (struct sk_buff *)0) {
      #line 3660 
      skb = napi_alloc_skb(& ch->rx_napi,buf1_len);
      #line 3661 
      if (skb == (struct sk_buff *)0) {
        #line 3662 
        ((priv->dev)->stats.rx_dropped) ++;
        #line 3663 
        count ++;
        #line 3664 
        goto drain_data;
      }
      #line 3667 
      dma_sync_single_for_cpu(priv->device,buf->addr,(unsigned long)buf1_len,(enum dma_data_direction)DMA_FROM_DEVICE);
      #line 3669 
      ;
      #line 3669 
      ;
      #line 3669 
      skb_copy_to_linear_data(skb,lowmem_page_address(buf->page),buf1_len);
      #line 3671 
      skb_put(skb,buf1_len);
      #line 3674 
      page_pool_recycle_direct(rx_q->page_pool,buf->page);
      #line 3675 
      buf->page = (struct page *)0;
    }
    else 
      #line 3676 
      if (buf1_len != 0U) {
        #line 3677 
        dma_sync_single_for_cpu(priv->device,buf->addr,(unsigned long)buf1_len,(enum dma_data_direction)DMA_FROM_DEVICE);
        #line 3679 
        ;
        #line 3679 
        ;
        #line 3679 
        ;
        #line 3679 
        ;
        #line 3679 
        skb_add_rx_frag(skb,(int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags,buf->page,0,(int)buf1_len,priv->dma_buf_sz);
        #line 3684 
        page_pool_release_page(rx_q->page_pool,buf->page);
        #line 3685 
        buf->page = (struct page *)0;
      }
    #line 3688 
    if (buf2_len != 0U) {
      #line 3689 
      dma_sync_single_for_cpu(priv->device,buf->sec_addr,(unsigned long)buf2_len,(enum dma_data_direction)DMA_FROM_DEVICE);
      #line 3691 
      ;
      #line 3691 
      ;
      #line 3691 
      ;
      #line 3691 
      ;
      #line 3691 
      skb_add_rx_frag(skb,(int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags,buf->sec_page,0,(int)buf2_len,priv->dma_buf_sz);
      #line 3696 
      page_pool_release_page(rx_q->page_pool,buf->sec_page);
      #line 3697 
      buf->sec_page = (struct page *)0;
    }
    #line 3700 
    drain_data: 
                #line 3700 
    ;
    #line 3701 
    if ((long)((status & 16) != 0) != 0L) 
                                          #line 3702 
                                          goto read_again;
    #line 3703 
    if (skb == (struct sk_buff *)0) 
                                    #line 3704 
                                    continue;
    #line 3708 
    stmmac_get_rx_hwtstamp(priv,p,np,skb);
    #line 3709 
    stmmac_rx_vlan(priv->dev,skb);
    #line 3710 
    skb->protocol = eth_type_trans(skb,priv->dev);
    #line 3712 
    if ((long)(coe == 0) != 0L) 
                                #line 3713 
                                skb_checksum_none_assert(skb); else 
                                                                    #line 3715 
                                                                    skb->ip_summed = (unsigned char)1U;
    #line 3717 
    __result_2 = -22;
    #line 3717 
    if ((priv->hw)->desc != (struct stmmac_desc_ops *)0 && ((priv->hw)->desc)->get_rx_hash != (int (*)(struct dma_desc *, u32 *, enum pkt_hash_types *))0) 
      #line 3717 
      __result_2 = (*(((priv->hw)->desc)->get_rx_hash))(p,& hash,& hash_type);
    #line 3717 
    if (__result_2 == 0) 
                         #line 3718 
                         skb_set_hash(skb,hash,hash_type);
    #line 3720 
    skb_record_rx_queue(skb,(unsigned short)((int)((unsigned short)queue)));
    #line 3721 
    napi_gro_receive(& ch->rx_napi,skb);
    #line 3722 
    skb = (struct sk_buff *)0;
    #line 3724 
    ((priv->dev)->stats.rx_packets) ++;
    #line 3725 
    (priv->dev)->stats.rx_bytes += (unsigned long)len;
    #line 3726 
    count ++;
  }
  #line 3729 
  if ((status & 16) != 0 || skb != (struct sk_buff *)0) {
    #line 3730 
    rx_q->state_saved = 1U;
    #line 3731 
    rx_q->state.skb = skb;
    #line 3732 
    rx_q->state.error = error;
    #line 3733 
    rx_q->state.len = len;
  }
  #line 3736 
  stmmac_rx_refill(priv,queue);
  #line 3738 
  priv->xstats.rx_pkt_n += (unsigned long)count;
  #line 3740 
  return (int)count;
}

#line 3743  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_napi_poll_rx(struct napi_struct *napi, int budget)
{
  #line 3746 
  void *__mptr;
  #line 3749 
  int work_done;
  #line 3746 
  __mptr = (void *)napi;
  #line 3745 
  struct stmmac_channel *ch = ((struct stmmac_channel *)__mptr);
  #line 3747 
  struct stmmac_priv *priv = ch->priv_data;
  #line 3748 
  u32 chan = ch->index;
  #line 3751 
  (priv->xstats.napi_poll) ++;
  #line 3753 
  work_done = stmmac_rx(priv,budget,chan);
  #line 3754 
  if (work_done < budget) {
    #line 3754 
    if ((int)napi_complete_done(napi,work_done) != 0) {
      #line 3755 
      int __result = -22;
      #line 3755 
      if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->enable_dma_irq != (void (*)(void *, u32 ))0) {
        #line 3755 
        (*(((priv->hw)->dma)->enable_dma_irq))(priv->ioaddr,chan);
        #line 3755 
        __result = 0;
      }
      #line 3755 
      int tmp_2 = __result;
    }
  }
  #line 3756 
  return work_done;
}

#line 3759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_napi_poll_tx(struct napi_struct *napi, int budget)
{
  #line 3771 
  int __UNIQUE_ID___x594;
  #line 3771 
  int tmp_0;
  #line 3762 
  void *__mptr;
  #line 3764 
  struct stmmac_tx_queue *tx_q;
  #line 3766 
  int work_done;
  #line 3762 
  __mptr = (void *)napi;
  #line 3761 
  struct stmmac_channel *ch = ((struct stmmac_channel *)(__mptr + 18446744073709551168U));
  #line 3763 
  struct stmmac_priv *priv = ch->priv_data;
  #line 3765 
  u32 chan = ch->index;
  #line 3768 
  (priv->xstats.napi_poll) ++;
  #line 3770 
  work_done = stmmac_tx_clean(priv,512,chan);
  {
    #line 3771 
    __UNIQUE_ID___x594 = work_done;
    #line 3771 
    int __UNIQUE_ID___y595 = budget;
    #line 3771 
    if (__UNIQUE_ID___x594 < __UNIQUE_ID___y595) 
                                                 #line 3771 
                                                 tmp_0 = __UNIQUE_ID___x594; else 
                                                                    #line 3771 
                                                                    tmp_0 = __UNIQUE_ID___y595;
    }
  #line 3771 
  work_done = tmp_0;
  #line 3773 
  if (work_done < budget) 
                          #line 3774 
                          napi_complete_done(napi,work_done);
  #line 3777 
  tx_q = & priv->tx_queue[chan];
  #line 3778 
  if (tx_q->cur_tx != tx_q->dirty_tx) {
    {
      #line 3779 
      int __result = -22;
      #line 3779 
      if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->enable_dma_transmission != (void (*)(void *))0) {
        #line 3779 
        (*(((priv->hw)->dma)->enable_dma_transmission))(priv->ioaddr);
        #line 3779 
        __result = 0;
      }
      #line 3779 
      int tmp_2 = __result;
    }
    {
      #line 3780 
      int __result_0 = -22;
      #line 3780 
      if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->set_tx_tail_ptr != (void (*)(void *, u32 , u32 ))0) {
        #line 3780 
        (*(((priv->hw)->dma)->set_tx_tail_ptr))(priv->ioaddr,tx_q->tx_tail_addr,chan);
        #line 3780 
        __result_0 = 0;
      }
      #line 3780 
      int tmp_4 = __result_0;
    }
  }
  #line 3784 
  return work_done;
}

#line 3795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_tx_timeout(struct net_device *dev)
{
  #line 3797 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 3799 
  stmmac_global_err(priv);
  #line 3800 
  return;
}

#line 3811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_set_rx_mode(struct net_device *dev)
{
  #line 3813 
  struct stmmac_priv *priv = netdev_priv(dev);
  {
    #line 3815 
    int __result = -22;
    #line 3815 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_filter != (void (*)(struct mac_device_info *, struct net_device *))0) {
      #line 3815 
      (*(((priv->hw)->mac)->set_filter))(priv->hw,dev);
      #line 3815 
      __result = 0;
    }
    #line 3815 
    int tmp_2 = __result;
  }
  #line 3817 
  return;
}

#line 3829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_change_mtu(struct net_device *dev, int new_mtu)
{
  #line 3831 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 3832 
  int txfifosz = (priv->plat)->tx_fifo_size;
  #line 3834 
  if (txfifosz == 0) 
                     #line 3835 
                     txfifosz = (int)priv->dma_cap.tx_fifo_size;
  #line 3837 
  txfifosz = (int)((unsigned int)txfifosz / (priv->plat)->tx_queues_to_use);
  #line 3839 
  if ((int)netif_running(dev) != 0) {
    #line 3840 
    netdev_err(priv->dev,(char *)"must be stopped to change its MTU\n");
    #line 3841 
    return -16;
  }
  #line 3844 
  new_mtu = (((new_mtu + 63) & -64) + 15) & -16;
  #line 3847 
  if (txfifosz < new_mtu || new_mtu > 16368) 
                                             #line 3848 
                                             return -22;
  #line 3850 
  dev->mtu = (unsigned int)new_mtu;
  #line 3852 
  netdev_update_features(dev);
  #line 3854 
  return 0;
}

#line 3857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static netdev_features_t stmmac_fix_features(struct net_device *dev, netdev_features_t features)
{
  #line 3860 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 3862 
  if ((priv->plat)->rx_coe == 0) 
                                 #line 3863 
                                 features &= 18446743523953737727ULL;
  #line 3865 
  if ((priv->plat)->tx_coe == 0) 
                                 #line 3866 
                                 features &= 18446744073709551589ULL;
  #line 3873 
  if ((priv->plat)->bugged_jumbo != 0 && dev->mtu > 1500U) 
                                                           #line 3874 
                                                           features &= 18446744073709551589ULL;
  #line 3877 
  if ((int)(priv->plat)->tso_en != 0 && priv->dma_cap.tsoen != 0U) 
    #line 3878 
    if ((features & 65536ULL) != 0ULL) 
                                       #line 3879 
                                       priv->tso = (_Bool)1; else 
                                                                  #line 3881 
                                                                  priv->tso = (_Bool)0;
  #line 3884 
  return features;
}

#line 3887  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_set_features(struct net_device *netdev, netdev_features_t features)
{
  #line 3891 
  bool sph_en;
  #line 3892 
  u32 chan;
  #line 3890 
  struct stmmac_priv *priv = netdev_priv(netdev);
  #line 3895 
  if ((features & 549755813888ULL) != 0ULL) 
                                            #line 3896 
                                            (priv->hw)->rx_csum = (unsigned int)(priv->plat)->rx_coe; else 
                                                                    #line 3898 
                                                                    (priv->hw)->rx_csum = 0U;
  {
    #line 3902 
    int __result = -22;
    #line 3902 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->rx_ipc != (int (*)(struct mac_device_info *))0) 
      #line 3902 
      __result = (*(((priv->hw)->mac)->rx_ipc))(priv->hw);
    #line 3902 
    int tmp_2 = __result;
  }
  #line 3904 
  sph_en = (_Bool)(((priv->hw)->rx_csum != 0U && priv->sph != 0) != 0);
  #line 3905 
  chan = 0U;
  #line 3905 
  while ((priv->plat)->rx_queues_to_use > chan) {
    {
      #line 3906 
      int __result_0 = -22;
      #line 3906 
      if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->enable_sph != (void (*)(void *, bool , u32 ))0) {
        #line 3906 
        (*(((priv->hw)->dma)->enable_sph))(priv->ioaddr,(_Bool)((bool)((int)sph_en) != 0),chan);
        #line 3906 
        __result_0 = 0;
      }
      #line 3906 
      int tmp_4 = __result_0;
    }
    #line 3905 
    chan ++;
  }
  #line 3908 
  return 0;
}

#line 3922  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static irqreturn_t stmmac_interrupt(int irq, void *dev_id)
{
  #line 3928 
  u32 queues_count;
  #line 3929 
  u32 queue;
  #line 3930 
  bool xmac;
  #line 3924 
  struct net_device *dev = (struct net_device *)dev_id;
  #line 3925 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 3926 
  u32 rx_cnt = (priv->plat)->rx_queues_to_use;
  #line 3927 
  u32 tx_cnt = (priv->plat)->tx_queues_to_use;
  #line 3932 
  xmac = (_Bool)(((priv->plat)->has_gmac4 != 0 || (priv->plat)->has_xgmac != 0) != 0);
  #line 3933 
  if (rx_cnt > tx_cnt) 
                       #line 3933 
                       queues_count = rx_cnt; else 
                                                   #line 3933 
                                                   queues_count = tx_cnt;
  #line 3935 
  if (priv->irq_wake != 0) 
                           #line 3936 
                           pm_wakeup_event(priv->device,0U);
  #line 3938 
  if ((long)(dev == (struct net_device *)0) != 0L) {
    #line 3939 
    netdev_err(priv->dev,(char *)"%s: invalid dev pointer\n",(char *)"stmmac_interrupt");
    #line 3940 
    return IRQ_NONE;
  }
  #line 3944 
  if ((int)test_bit(0L,& priv->state) != 0) 
                                            #line 3945 
                                            return IRQ_HANDLED;
  #line 3947 
  if ((int)stmmac_safety_feat_interrupt(priv) != 0) 
                                                    #line 3948 
                                                    return IRQ_HANDLED;
  #line 3951 
  if ((priv->plat)->has_gmac != 0 || (int)xmac != 0) {
    #line 3952 
    int __result;
    #line 3953 
    int mtl_status;
    #line 3952 
    __result = -22;
    #line 3952 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->host_irq_status != (int (*)(struct mac_device_info *, struct stmmac_extra_stats *))0) 
      #line 3952 
      __result = (*(((priv->hw)->mac)->host_irq_status))(priv->hw,& priv->xstats);
    #line 3952 
    int status = __result;
    #line 3955 
    if ((long)(status != 0) != 0L) {
      #line 3957 
      if ((status & 1) != 0) 
                             #line 3958 
                             priv->tx_path_in_lpi_mode = (_Bool)1;
      #line 3959 
      if ((status & 2) != 0) 
                             #line 3960 
                             priv->tx_path_in_lpi_mode = (_Bool)0;
    }
    #line 3963 
    queue = 0U;
    #line 3963 
    while (queue < queues_count) {
      {
        #line 3966 
        int __result_0;
        #line 3964 
        struct stmmac_rx_queue *rx_q = & priv->rx_queue[queue];
        #line 3966 
        __result_0 = -22;
        #line 3966 
        if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->host_mtl_irq_status != (int (*)(struct mac_device_info *, u32 ))0) 
          #line 3966 
          __result_0 = (*(((priv->hw)->mac)->host_mtl_irq_status))(priv->hw,queue);
        #line 3966 
        mtl_status = __result_0;
        #line 3968 
        if (mtl_status != -22) 
                               #line 3969 
                               status |= mtl_status;
        #line 3971 
        if (((unsigned long)status & 256UL) != 0UL) {
          #line 3972 
          int __result_1 = -22;
          #line 3972 
          if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->set_rx_tail_ptr != (void (*)(void *, u32 , u32 ))0) {
            #line 3972 
            (*(((priv->hw)->dma)->set_rx_tail_ptr))(priv->ioaddr,rx_q->rx_tail_addr,queue);
            #line 3972 
            __result_1 = 0;
          }
          #line 3972 
          int tmp_4 = __result_1;
        }
      }
      #line 3963 
      queue ++;
    }
    #line 3978 
    if ((priv->hw)->pcs != 0U) 
      #line 3979 
      if (priv->xstats.pcs_link != 0UL) 
                                        #line 3980 
                                        netif_carrier_on(dev); else 
                                                                    #line 3982 
                                                                    netif_carrier_off(dev);
  }
  #line 3987 
  stmmac_dma_interrupt(priv);
  #line 3989 
  return IRQ_HANDLED;
}

#line 3996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_poll_controller(struct net_device *dev)
{
  #line 3998 
  disable_irq((unsigned int)dev->irq);
  #line 3999 
  stmmac_interrupt(dev->irq,(void *)dev);
  #line 4000 
  enable_irq((unsigned int)dev->irq);
  #line 4001 
  return;
}

#line 4013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
{
  #line 4015 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 4016 
  int ret = -95;
  #line 4018 
  if (! netif_running(dev)) 
                            #line 4019 
                            return -22;
  #line 4021 
  switch (cmd) {
    #line 4022 
    case 35143: 
                #line 4022 
    ;
    #line 4023 
    case 35144: 
                #line 4023 
    ;
    #line 4024 
    case 35145: 
                #line 4024 
    ;
    #line 4025 
    ret = phylink_mii_ioctl(priv->phylink,rq,cmd);
    #line 4026 
    break;
    #line 4027 
    case 35248: 
                #line 4027 
    ;
    #line 4028 
    ret = stmmac_hwtstamp_set(dev,rq);
    #line 4029 
    break;
    #line 4030 
    case 35249: 
                #line 4030 
    ;
    #line 4031 
    ret = stmmac_hwtstamp_get(dev,rq);
    #line 4032 
    break;
    #line 4033 
    default: 
             #line 4033 
    ;
    #line 4034 
    break;
  }
  #line 4037 
  return ret;
}

#line 4040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_setup_tc_block_cb(enum tc_setup_type type, void *type_data, void *cb_priv)
{
  #line 4043 
  struct stmmac_priv *priv = (struct stmmac_priv *)cb_priv;
  #line 4044 
  int ret = -95;
  #line 4046 
  if (! tc_cls_can_offload_and_chain0(priv->dev,
                                    (struct flow_cls_common_offload *)type_data)) 
    #line 4047 
    return ret;
  #line 4049 
  stmmac_disable_all_queues(priv);
  #line 4051 
  switch ((unsigned int)type) {
    #line 4056 
    int __result_0;
    #line 4053 
    int __result;
    #line 4052 
    case (unsigned int)1: 
                          #line 4052 
    ;
    #line 4053 
    __result = -22;
    #line 4053 
    if ((priv->hw)->tc != (struct stmmac_tc_ops *)0 && ((priv->hw)->tc)->setup_cls_u32 != (int (*)(struct stmmac_priv *, struct tc_cls_u32_offload *))0) 
      #line 4053 
      __result = (*(((priv->hw)->tc)->setup_cls_u32))(priv,(struct tc_cls_u32_offload *)type_data);
    #line 4053 
    ret = __result;
    #line 4054 
    break;
    #line 4055 
    case (unsigned int)2: 
                          #line 4055 
    ;
    #line 4056 
    __result_0 = -22;
    #line 4056 
    if ((priv->hw)->tc != (struct stmmac_tc_ops *)0 && ((priv->hw)->tc)->setup_cls != (int (*)(struct stmmac_priv *, struct flow_cls_offload *))0) 
      #line 4056 
      __result_0 = (*(((priv->hw)->tc)->setup_cls))(priv,(struct flow_cls_offload *)type_data);
    #line 4056 
    ret = __result_0;
    #line 4057 
    break;
    #line 4058 
    default: 
             #line 4058 
    ;
    #line 4059 
    break;
  }
  #line 4062 
  stmmac_enable_all_queues(priv);
  #line 4063 
  return ret;
}

#line 4066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static struct list_head stmmac_block_cb_list = {.next = & stmmac_block_cb_list, .prev = & stmmac_block_cb_list};
#line 4068  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_setup_tc(struct net_device *ndev, enum tc_setup_type type, void *type_data)
{
  #line 4071 
  struct stmmac_priv *priv = netdev_priv(ndev);
  #line 4073 
  switch ((unsigned int)type) {
    #line 4080 
    int __result;
    #line 4074 
    case (unsigned int)5: 
                          #line 4074 
    ;
    #line 4075 
    return flow_block_cb_setup_simple((struct flow_block_offload *)type_data,
                                   & stmmac_block_cb_list,
                                   & stmmac_setup_tc_block_cb,(void *)priv,
                                   (void *)priv,(_Bool)1);
    #line 4079 
    case (unsigned int)6: 
                          #line 4079 
    ;
    #line 4080 
    __result = -22;
    #line 4080 
    if ((priv->hw)->tc != (struct stmmac_tc_ops *)0 && ((priv->hw)->tc)->setup_cbs != (int (*)(struct stmmac_priv *, struct tc_cbs_qopt_offload *))0) 
      #line 4080 
      __result = (*(((priv->hw)->tc)->setup_cbs))(priv,(struct tc_cbs_qopt_offload *)type_data);
    #line 4080 
    return __result;
    #line 4081 
    default: 
             #line 4081 
    ;
    #line 4082 
    return -95;
  }
}

#line 4086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static u16 stmmac_select_queue(struct net_device *dev, struct sk_buff *skb, struct net_device *sb_dev)
{
  #line 4089 
  int gso = (int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_type;
  #line 4091 
  if ((gso & 131089) != 0) 
                           #line 4098 
                           return (unsigned short)0U;
  #line 4101 
  ;
  #line 4101 
  return (unsigned short)((unsigned int)netdev_pick_tx(dev,skb,(struct net_device *)0) % dev->real_num_tx_queues);
}

#line 4104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_set_mac_address(struct net_device *ndev, void *addr)
{
  #line 4106 
  struct stmmac_priv *priv = netdev_priv(ndev);
  #line 4107 
  int ret = 0;
  #line 4109 
  ret = eth_mac_addr(ndev,addr);
  #line 4110 
  if (ret != 0) 
                #line 4111 
                return ret;
  {
    #line 4113 
    int __result = -22;
    #line 4113 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_umac_addr != (void (*)(struct mac_device_info *, unsigned char *, unsigned int ))0) {
      #line 4113 
      (*(((priv->hw)->mac)->set_umac_addr))(priv->hw,ndev->dev_addr,0U);
      #line 4113 
      __result = 0;
    }
    #line 4113 
    int tmp_2 = __result;
  }
  #line 4115 
  return ret;
}

#line 4119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static struct dentry *stmmac_fs_dir;
#line 4121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void sysfs_display_ring(void *head, int size, int extend_desc, struct seq_file *seq)
{
  #line 4124 
  int i;
  #line 4125 
  struct dma_extended_desc *ep = (struct dma_extended_desc *)head;
  #line 4126 
  struct dma_desc *p = (struct dma_desc *)head;
  #line 4128 
  i = 0;
  #line 4128 
  while (i < size) {
    #line 4129 
    if (extend_desc != 0) {
      #line 4130 
      ;
      #line 4130 
      ;
      #line 4130 
      ;
      #line 4130 
      ;
      #line 4130 
      ;
      #line 4130 
      ;
      #line 4130 
      seq_printf(seq,(char *)"%d [0x%x]: 0x%x 0x%x 0x%x 0x%x\n",i,(unsigned int)virt_to_phys((void *)ep),ep->basic.des0,ep->basic.des1,ep->basic.des2,ep->basic.des3);
      #line 4136 
      ep ++;
    }
    else {
      #line 4138 
      ;
      #line 4138 
      ;
      #line 4138 
      ;
      #line 4138 
      ;
      #line 4138 
      ;
      #line 4138 
      ;
      #line 4138 
      seq_printf(seq,(char *)"%d [0x%x]: 0x%x 0x%x 0x%x 0x%x\n",i,(unsigned int)virt_to_phys((void *)p),p->des0,p->des1,p->des2,p->des3);
      #line 4142 
      p ++;
    }
    #line 4144 
    seq_printf(seq,(char *)"\n");
    #line 4128 
    i ++;
  }
  #line 4146 
  return;
}

#line 4148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_rings_status_show(struct seq_file *seq, void *v)
{
  #line 4154 
  u32 queue;
  #line 4150 
  struct net_device *dev = (struct net_device *)seq->private;
  #line 4151 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 4152 
  u32 rx_count = (priv->plat)->rx_queues_to_use;
  #line 4153 
  u32 tx_count = (priv->plat)->tx_queues_to_use;
  #line 4156 
  if ((dev->flags & 1U) == 0U) 
                               #line 4157 
                               return 0;
  #line 4159 
  queue = 0U;
  #line 4159 
  while (queue < rx_count) {
    {
      #line 4160 
      struct stmmac_rx_queue *rx_q = & priv->rx_queue[queue];
      #line 4162 
      seq_printf(seq,(char *)"RX Queue %d:\n",queue);
      #line 4164 
      if (priv->extend_desc != 0) {
        #line 4165 
        seq_printf(seq,(char *)"Extended descriptor ring:\n");
        #line 4166 
        sysfs_display_ring((void *)rx_q->dma_erx,512,1,seq);
      }
      else {
        #line 4169 
        seq_printf(seq,(char *)"Descriptor ring:\n");
        #line 4170 
        sysfs_display_ring((void *)rx_q->dma_rx,512,0,seq);
      }
    }
    #line 4159 
    queue ++;
  }
  #line 4175 
  queue = 0U;
  #line 4175 
  while (queue < tx_count) {
    {
      #line 4176 
      struct stmmac_tx_queue *tx_q = & priv->tx_queue[queue];
      #line 4178 
      seq_printf(seq,(char *)"TX Queue %d:\n",queue);
      #line 4180 
      if (priv->extend_desc != 0) {
        #line 4181 
        seq_printf(seq,(char *)"Extended descriptor ring:\n");
        #line 4182 
        sysfs_display_ring((void *)tx_q->dma_etx,512,1,seq);
      }
      else {
        #line 4185 
        seq_printf(seq,(char *)"Descriptor ring:\n");
        #line 4186 
        sysfs_display_ring((void *)tx_q->dma_tx,512,0,seq);
      }
    }
    #line 4175 
    queue ++;
  }
  #line 4191 
  return 0;
}

#line 4193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_rings_status_open(struct inode *inode, struct file *file)
{
  #line 4193 
  return single_open(file,& stmmac_rings_status_show,inode->i_private);
}

#line 4193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static struct file_operations stmmac_rings_status_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & stmmac_rings_status_open, .release = & single_release};
#line 4195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_dma_cap_show(struct seq_file *seq, void *v)
{
  #line 4209 
  char *tmp_0;
  #line 4211 
  char *tmp_1;
  #line 4213 
  char *tmp_2;
  #line 4215 
  char *tmp_3;
  #line 4217 
  char *tmp_4;
  #line 4219 
  char *tmp_5;
  #line 4221 
  char *tmp_6;
  #line 4223 
  char *tmp_7;
  #line 4225 
  char *tmp_8;
  #line 4227 
  char *tmp_9;
  #line 4229 
  char *tmp_10;
  #line 4231 
  char *tmp_11;
  #line 4233 
  char *tmp_12;
  #line 4235 
  char *tmp_13;
  #line 4236 
  char *tmp_14;
  #line 4247 
  char *tmp_18;
  #line 4253 
  char *tmp_19;
  #line 4197 
  struct net_device *dev = (struct net_device *)seq->private;
  #line 4198 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 4200 
  if (priv->hw_cap_support == 0) {
    #line 4201 
    seq_printf(seq,(char *)"DMA HW features not supported\n");
    #line 4202 
    return 0;
  }
  #line 4205 
  seq_printf(seq,(char *)"==============================\n");
  #line 4206 
  seq_printf(seq,(char *)"\tDMA HW features\n");
  #line 4207 
  seq_printf(seq,(char *)"==============================\n");
  #line 4209 
  if (priv->dma_cap.mbps_10_100 != 0U) 
                                       #line 4209 
                                       tmp_0 = (char *)"Y"; else 
                                                                 #line 4209 
                                                                 tmp_0 = (char *)"N";
  #line 4209 
  ;
  #line 4209 
  seq_printf(seq,(char *)"\t10/100 Mbps: %s\n",tmp_0);
  #line 4211 
  if (priv->dma_cap.mbps_1000 != 0U) 
                                     #line 4211 
                                     tmp_1 = (char *)"Y"; else 
                                                               #line 4211 
                                                               tmp_1 = (char *)"N";
  #line 4211 
  ;
  #line 4211 
  seq_printf(seq,(char *)"\t1000 Mbps: %s\n",tmp_1);
  #line 4213 
  if (priv->dma_cap.half_duplex != 0U) 
                                       #line 4213 
                                       tmp_2 = (char *)"Y"; else 
                                                                 #line 4213 
                                                                 tmp_2 = (char *)"N";
  #line 4213 
  ;
  #line 4213 
  seq_printf(seq,(char *)"\tHalf duplex: %s\n",tmp_2);
  #line 4215 
  if (priv->dma_cap.hash_filter != 0U) 
                                       #line 4215 
                                       tmp_3 = (char *)"Y"; else 
                                                                 #line 4215 
                                                                 tmp_3 = (char *)"N";
  #line 4215 
  ;
  #line 4215 
  seq_printf(seq,(char *)"\tHash Filter: %s\n",tmp_3);
  #line 4217 
  if (priv->dma_cap.multi_addr != 0U) 
                                      #line 4217 
                                      tmp_4 = (char *)"Y"; else 
                                                                #line 4217 
                                                                tmp_4 = (char *)"N";
  #line 4217 
  ;
  #line 4217 
  seq_printf(seq,(char *)"\tMultiple MAC address registers: %s\n",tmp_4);
  #line 4219 
  if (priv->dma_cap.pcs != 0U) 
                               #line 4219 
                               tmp_5 = (char *)"Y"; else 
                                                         #line 4219 
                                                         tmp_5 = (char *)"N";
  #line 4219 
  ;
  #line 4219 
  seq_printf(seq,(char *)"\tPCS (TBI/SGMII/RTBI PHY interfaces): %s\n",tmp_5);
  #line 4221 
  if (priv->dma_cap.sma_mdio != 0U) 
                                    #line 4221 
                                    tmp_6 = (char *)"Y"; else 
                                                              #line 4221 
                                                              tmp_6 = (char *)"N";
  #line 4221 
  ;
  #line 4221 
  seq_printf(seq,(char *)"\tSMA (MDIO) Interface: %s\n",tmp_6);
  #line 4223 
  if (priv->dma_cap.pmt_remote_wake_up != 0U) 
                                              #line 4223 
                                              tmp_7 = (char *)"Y"; else 
                                                                    #line 4223 
                                                                    tmp_7 = (char *)"N";
  #line 4223 
  ;
  #line 4223 
  seq_printf(seq,(char *)"\tPMT Remote wake up: %s\n",tmp_7);
  #line 4225 
  if (priv->dma_cap.pmt_magic_frame != 0U) 
                                           #line 4225 
                                           tmp_8 = (char *)"Y"; else 
                                                                  #line 4225 
                                                                  tmp_8 = (char *)"N";
  #line 4225 
  ;
  #line 4225 
  seq_printf(seq,(char *)"\tPMT Magic Frame: %s\n",tmp_8);
  #line 4227 
  if (priv->dma_cap.rmon != 0U) 
                                #line 4227 
                                tmp_9 = (char *)"Y"; else 
                                                          #line 4227 
                                                          tmp_9 = (char *)"N";
  #line 4227 
  ;
  #line 4227 
  seq_printf(seq,(char *)"\tRMON module: %s\n",tmp_9);
  #line 4229 
  if (priv->dma_cap.time_stamp != 0U) 
                                      #line 4229 
                                      tmp_10 = (char *)"Y"; else 
                                                                 #line 4229 
                                                                 tmp_10 = (char *)"N";
  #line 4229 
  ;
  #line 4229 
  seq_printf(seq,(char *)"\tIEEE 1588-2002 Time Stamp: %s\n",tmp_10);
  #line 4231 
  if (priv->dma_cap.atime_stamp != 0U) 
                                       #line 4231 
                                       tmp_11 = (char *)"Y"; else 
                                                                  #line 4231 
                                                                  tmp_11 = (char *)"N";
  #line 4231 
  ;
  #line 4231 
  seq_printf(seq,(char *)"\tIEEE 1588-2008 Advanced Time Stamp: %s\n",tmp_11);
  #line 4233 
  if (priv->dma_cap.eee != 0U) 
                               #line 4233 
                               tmp_12 = (char *)"Y"; else 
                                                          #line 4233 
                                                          tmp_12 = (char *)"N";
  #line 4233 
  ;
  #line 4233 
  seq_printf(seq,(char *)"\t802.3az - Energy-Efficient Ethernet (EEE): %s\n",tmp_12);
  #line 4235 
  if (priv->dma_cap.av != 0U) 
                              #line 4235 
                              tmp_13 = (char *)"Y"; else 
                                                         #line 4235 
                                                         tmp_13 = (char *)"N";
  #line 4235 
  ;
  #line 4235 
  seq_printf(seq,(char *)"\tAV features: %s\n",tmp_13);
  #line 4236 
  if (priv->dma_cap.tx_coe != 0U) 
                                  #line 4236 
                                  tmp_14 = (char *)"Y"; else 
                                                             #line 4236 
                                                             tmp_14 = (char *)"N";
  #line 4236 
  ;
  #line 4236 
  seq_printf(seq,(char *)"\tChecksum Offload in TX: %s\n",tmp_14);
  #line 4238 
  if (priv->synopsys_id > 63) {
    #line 4239 
    char *tmp_15;
    #line 4239 
    if (priv->dma_cap.rx_coe != 0U) 
                                    #line 4239 
                                    tmp_15 = (char *)"Y"; else 
                                                               #line 4239 
                                                               tmp_15 = (char *)"N";
    #line 4239 
    ;
    #line 4239 
    seq_printf(seq,(char *)"\tIP Checksum Offload in RX: %s\n",tmp_15);
  }
  else {
    #line 4242 
    char *tmp_16;
    #line 4244 
    char *tmp_17;
    #line 4242 
    if (priv->dma_cap.rx_coe_type1 != 0U) 
                                          #line 4242 
                                          tmp_16 = (char *)"Y"; else 
                                                                  #line 4242 
                                                                  tmp_16 = (char *)"N";
    #line 4242 
    ;
    #line 4242 
    seq_printf(seq,(char *)"\tIP Checksum Offload (type1) in RX: %s\n",tmp_16);
    #line 4244 
    if (priv->dma_cap.rx_coe_type2 != 0U) 
                                          #line 4244 
                                          tmp_17 = (char *)"Y"; else 
                                                                  #line 4244 
                                                                  tmp_17 = (char *)"N";
    #line 4244 
    ;
    #line 4244 
    seq_printf(seq,(char *)"\tIP Checksum Offload (type2) in RX: %s\n",tmp_17);
  }
  #line 4247 
  if (priv->dma_cap.rxfifo_over_2048 != 0U) 
                                            #line 4247 
                                            tmp_18 = (char *)"Y"; else 
                                                                    #line 4247 
                                                                    tmp_18 = (char *)"N";
  #line 4247 
  ;
  #line 4247 
  seq_printf(seq,(char *)"\tRXFIFO > 2048bytes: %s\n",tmp_18);
  #line 4249 
  seq_printf(seq,(char *)"\tNumber of Additional RX channel: %d\n",priv->dma_cap.number_rx_channel);
  #line 4251 
  seq_printf(seq,(char *)"\tNumber of Additional TX channel: %d\n",priv->dma_cap.number_tx_channel);
  #line 4253 
  if (priv->dma_cap.enh_desc != 0U) 
                                    #line 4253 
                                    tmp_19 = (char *)"Y"; else 
                                                               #line 4253 
                                                               tmp_19 = (char *)"N";
  #line 4253 
  ;
  #line 4253 
  seq_printf(seq,(char *)"\tEnhanced descriptors: %s\n",tmp_19);
  #line 4256 
  return 0;
}

#line 4258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_dma_cap_open(struct inode *inode, struct file *file)
{
  #line 4258 
  return single_open(file,& stmmac_dma_cap_show,inode->i_private);
}

#line 4258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static struct file_operations stmmac_dma_cap_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & stmmac_dma_cap_open, .release = & single_release};
#line 4262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_device_event(struct notifier_block *unused, unsigned long event, void *ptr)
{
  #line 4265 
  struct net_device *dev = netdev_notifier_info_to_dev((struct netdev_notifier_info *)ptr);
  #line 4266 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 4268 
  if (dev->netdev_ops != & stmmac_netdev_ops) 
                                              #line 4269 
                                              goto done;
  #line 4271 
  switch (event) {
    #line 4272 
    case (unsigned long)11: 
                            #line 4272 
    ;
    #line 4273 
    if (priv->dbgfs_dir != (struct dentry *)0) 
                                               #line 4274 
                                               priv->dbgfs_dir = debugfs_rename(stmmac_fs_dir,priv->dbgfs_dir,stmmac_fs_dir,(char *)(& dev->name));
    #line 4278 
    break;
  }
  #line 4280 
  done: 
        #line 4280 
  ;
  #line 4281 
  return 0;
}

#line 4284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static struct notifier_block stmmac_notifier = {.notifier_call = & stmmac_device_event};
#line 4288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_init_fs(struct net_device *dev)
{
  #line 4290 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 4293 
  priv->dbgfs_dir = cif_debugfs_create_dir((char *)(& dev->name),stmmac_fs_dir);
  #line 4296 
  cif_debugfs_create_file((char *)"descriptors_status",(unsigned short)292,priv->dbgfs_dir,(void *)dev,& stmmac_rings_status_fops);
  #line 4300 
  cif_debugfs_create_file((char *)"dma_cap",(unsigned short)292,priv->dbgfs_dir,(void *)dev,& stmmac_dma_cap_fops);
  #line 4303 
  register_netdevice_notifier(& stmmac_notifier);
  #line 4304 
  return;
}

#line 4306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_exit_fs(struct net_device *dev)
{
  #line 4308 
  struct stmmac_priv *priv = netdev_priv(dev);
  #line 4310 
  unregister_netdevice_notifier(& stmmac_notifier);
  #line 4311 
  debugfs_remove_recursive(priv->dbgfs_dir);
  #line 4312 
  return;
}

#line 4315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static u32 stmmac_vid_crc32_le(__le16 vid_le)
{
  #line 4321 
  int i;
  #line 4321 
  int bits;
  #line 4317 
  unsigned char *data = (unsigned char *)(& vid_le);
  #line 4318 
  unsigned char data_byte = (unsigned char)0U;
  #line 4319 
  u32 crc = 4294967295U;
  #line 4320 
  u32 temp = 0U;
  #line 4323 
  bits = get_bitmask_order(4095U);
  #line 4324 
  i = 0;
  #line 4324 
  while (i < bits) {
    #line 4325 
    if (((unsigned int)i & 7U) == 0U) 
                                      #line 4326 
                                      data_byte = *(data + (unsigned long)(i / 8));
    #line 4328 
    temp = ((crc & 1U) ^ (unsigned int)data_byte) & 1U;
    #line 4329 
    crc >>= 1;
    #line 4330 
    data_byte = (unsigned char)((int)data_byte >> 1);
    #line 4332 
    if (temp != 0U) 
                    #line 4333 
                    crc ^= 3988292384U;
    #line 4324 
    i ++;
  }
  #line 4336 
  return crc;
}

#line 4339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_vlan_update(struct stmmac_priv *priv, bool is_double)
{
  #line 4361 
  int __result;
  #line 4341 
  u32 crc;
  #line 4341 
  u32 hash = 0U;
  #line 4342 
  __le16 pmatch = (unsigned short)0U;
  #line 4343 
  int count = 0;
  #line 4344 
  u16 vid = (unsigned short)0U;
  #line 4346 
  vid = (unsigned short)cif_find_first_bit_0((unsigned long *)(& priv->active_vlans),4096UL);
  #line 4346 
  while ((unsigned int)vid <= 4095U) {
    {
      #line 4348 
      u32 ___x;
      #line 4348 
      u32 tmp_4;
      #line 4347 
      __le16 vid_le = vid;
      {
        #line 4348 
        u32 __x = ~ stmmac_vid_crc32_le((unsigned short)((int)vid_le));
        #line 4348 
        if (0 != 0) {
          #line 4348 
          ___x = __x;
          #line 4348 
          ___x = (___x << 16) | (___x << ((unsigned long)8 * sizeof(___x) - (unsigned long)16));
          #line 4348 
          ___x = ((___x >> 8) & 16711935U) | ((___x << 8) & 4278255360U);
          #line 4348 
          ___x = ((___x >> 4) & 252645135U) | ((___x << 4) & 4042322160U);
          #line 4348 
          ___x = ((___x >> 2) & 858993459U) | ((___x << 2) & 3435973836U);
          #line 4348 
          ___x = ((___x >> 1) & 1431655765U) | ((___x << 1) & 2863311530U);
          #line 4348 
          tmp_4 = ___x;
        }
        else 
             #line 4348 
             tmp_4 = __bitrev32(__x);
        }
      #line 4348 
      crc = tmp_4 >> 28;
      #line 4349 
      hash = (unsigned int)(1 << crc) | hash;
      #line 4350 
      count ++;
    }
    #line 4346 
    vid = (unsigned short)cif_find_next_bit_0((unsigned long *)(& priv->active_vlans),4096UL,
                            (unsigned long)((int)vid + 1));
  }
  #line 4353 
  if (priv->dma_cap.vlhash == 0U) {
    #line 4354 
    if (count > 2) 
                   #line 4355 
                   return -95;
    #line 4357 
    pmatch = vid;
    #line 4358 
    hash = 0U;
  }
  #line 4361 
  __result = -22;
  #line 4361 
  if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->update_vlan_hash != (void (*)(struct mac_device_info *, u32 , __le16 , bool ))0) {
    #line 4361 
    (*(((priv->hw)->mac)->update_vlan_hash))(priv->hw,hash,(unsigned short)((int)pmatch),(_Bool)((bool)((int)is_double) != 0));
    #line 4361 
    __result = 0;
  }
  #line 4361 
  return __result;
}

#line 4364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_vlan_rx_add_vid(struct net_device *ndev, __be16 proto, u16 vid)
{
  #line 4368 
  int ret;
  #line 4366 
  struct stmmac_priv *priv = netdev_priv(ndev);
  #line 4367 
  bool is_double = (_Bool)0;
  #line 4370 
  if ((unsigned int)__builtin_bswap16((unsigned short)((int)proto)) == 34984U) 
    #line 4371 
    is_double = (_Bool)1;
  #line 4373 
  cif_set_bit((long)vid,(unsigned long *)(& priv->active_vlans));
  #line 4374 
  ret = stmmac_vlan_update(priv,(_Bool)((bool)((int)is_double) != 0));
  #line 4375 
  if (ret != 0) {
    #line 4376 
    cif_clear_bit((long)vid,(unsigned long *)(& priv->active_vlans));
    #line 4377 
    return ret;
  }
  #line 4380 
  return ret;
}

#line 4383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_vlan_rx_kill_vid(struct net_device *ndev, __be16 proto, u16 vid)
{
  #line 4385 
  struct stmmac_priv *priv = netdev_priv(ndev);
  #line 4386 
  bool is_double = (_Bool)0;
  #line 4388 
  if ((unsigned int)__builtin_bswap16((unsigned short)((int)proto)) == 34984U) 
    #line 4389 
    is_double = (_Bool)1;
  #line 4391 
  cif_clear_bit((long)vid,(unsigned long *)(& priv->active_vlans));
  #line 4392 
  return stmmac_vlan_update(priv,(_Bool)((bool)((int)is_double) != 0));
}

#line 4395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static struct net_device_ops stmmac_netdev_ops = {.ndo_open = & stmmac_open, .ndo_stop = & stmmac_release, .ndo_start_xmit = & stmmac_xmit, .ndo_select_queue = & stmmac_select_queue, .ndo_set_rx_mode = & stmmac_set_rx_mode, .ndo_set_mac_address = & stmmac_set_mac_address, .ndo_do_ioctl = & stmmac_ioctl, .ndo_change_mtu = & stmmac_change_mtu, .ndo_tx_timeout = & stmmac_tx_timeout, .ndo_vlan_rx_add_vid = & stmmac_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & stmmac_vlan_rx_kill_vid, .ndo_poll_controller = & stmmac_poll_controller, .ndo_setup_tc = & stmmac_setup_tc, .ndo_fix_features = & stmmac_fix_features, .ndo_set_features = & stmmac_set_features};
#line 4415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_reset_subtask(struct stmmac_priv *priv)
{
  #line 4417 
  if (! test_and_set_bit(1L,& priv->state)) 
                                            #line 4418 
                                            return;
  #line 4419 
  if ((int)test_bit(0L,& priv->state) != 0) 
                                            #line 4420 
                                            return;
  #line 4422 
  netdev_err(priv->dev,(char *)"Reset adapter.\n");
  #line 4424 
  rtnl_lock();
  #line 4425 
  netif_trans_update(priv->dev);
  #line 4426 
  while (1) {
    #line 4426 
    if (! ((int)test_and_set_bit(2L,& priv->state) != 0)) 
                                                          #line 4426 
                                                          break;
    #line 4427 
    usleep_range(1000UL,2000UL);
  }
  #line 4429 
  cif_set_bit(0L,& priv->state);
  #line 4430 
  dev_close(priv->dev);
  #line 4431 
  dev_open(priv->dev,(struct netlink_ext_ack *)0);
  #line 4432 
  cif_clear_bit(0L,& priv->state);
  #line 4433 
  cif_clear_bit(2L,& priv->state);
  #line 4434 
  rtnl_unlock();
  #line 4435 
  return;
}

#line 4437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_service_task(struct work_struct *work)
{
  #line 4439 
  void *__mptr;
  #line 4439 
  __mptr = (void *)work;
  #line 4439 
  struct stmmac_priv *priv = ((struct stmmac_priv *)(__mptr + 18446744073709538256U));
  #line 4442 
  stmmac_reset_subtask(priv);
  #line 4443 
  cif_clear_bit(3L,& priv->state);
  #line 4444 
  return;
}

#line 4454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_hw_init(struct stmmac_priv *priv)
{
  #line 4456 
  int ret;
  #line 4459 
  if ((int)(priv->plat)->has_sun8i != 0) 
                                         #line 4460 
                                         chain_mode = 1U;
  #line 4461 
  priv->chain_mode = chain_mode;
  #line 4464 
  ret = stmmac_hwif_init(priv);
  #line 4465 
  if (ret != 0) 
                #line 4466 
                return ret;
  #line 4469 
  priv->hw_cap_support = stmmac_get_hw_features(priv);
  #line 4470 
  if (priv->hw_cap_support != 0) {
    #line 4471 
    _dev_info(priv->device,(char *)"DMA HW capability register supported\n");
    #line 4478 
    (priv->plat)->enh_desc = (int)priv->dma_cap.enh_desc;
    #line 4479 
    (priv->plat)->pmt = (int)priv->dma_cap.pmt_remote_wake_up;
    #line 4480 
    (priv->hw)->pmt = (unsigned int)(priv->plat)->pmt;
    #line 4481 
    if (priv->dma_cap.hash_tb_sz != 0U) {
      #line 4482 
      (priv->hw)->multicast_filter_bins = (unsigned int)(1UL << priv->dma_cap.hash_tb_sz) << 5U;
      #line 4484 
      if (0 != 0) {
        #line 4485 
        unsigned int tmp_56;
        #line 4485 
        unsigned int tmp_24;
        #line 4485 
        unsigned int tmp_25;
        #line 4485 
        unsigned int tmp_57;
        #line 4485 
        unsigned int tmp_58;
        #line 4485 
        unsigned int tmp_26;
        #line 4485 
        unsigned int tmp_27;
        #line 4485 
        unsigned int tmp_59;
        #line 4485 
        unsigned int tmp_60;
        #line 4485 
        unsigned int tmp_28;
        #line 4485 
        unsigned int tmp_29;
        #line 4485 
        unsigned int tmp_30;
        #line 4485 
        unsigned int tmp;
        #line 4485 
        unsigned int tmp_31;
        #line 4485 
        unsigned int tmp_32;
        #line 4485 
        unsigned int tmp_0;
        #line 4485 
        unsigned int tmp_1;
        #line 4485 
        unsigned int tmp_33;
        #line 4485 
        unsigned int tmp_34;
        #line 4485 
        unsigned int tmp_2;
        #line 4485 
        unsigned int tmp_3;
        #line 4485 
        unsigned int tmp_35;
        #line 4485 
        unsigned int tmp_36;
        #line 4485 
        unsigned int tmp_4;
        #line 4485 
        unsigned int tmp_5;
        #line 4485 
        unsigned int tmp_37;
        #line 4485 
        unsigned int tmp_38;
        #line 4485 
        unsigned int tmp_6;
        #line 4485 
        unsigned int tmp_7;
        #line 4485 
        unsigned int tmp_39;
        #line 4485 
        unsigned int tmp_40;
        #line 4485 
        unsigned int tmp_8;
        #line 4485 
        unsigned int tmp_9;
        #line 4485 
        unsigned int tmp_41;
        #line 4485 
        unsigned int tmp_42;
        #line 4485 
        unsigned int tmp_10;
        #line 4485 
        unsigned int tmp_11;
        #line 4485 
        unsigned int tmp_43;
        #line 4485 
        unsigned int tmp_44;
        #line 4485 
        unsigned int tmp_12;
        #line 4485 
        unsigned int tmp_13;
        #line 4485 
        unsigned int tmp_45;
        #line 4485 
        unsigned int tmp_46;
        #line 4485 
        unsigned int tmp_14;
        #line 4485 
        unsigned int tmp_15;
        #line 4485 
        unsigned int tmp_47;
        #line 4485 
        unsigned int tmp_48;
        #line 4485 
        unsigned int tmp_16;
        #line 4485 
        unsigned int tmp_17;
        #line 4485 
        unsigned int tmp_49;
        #line 4485 
        unsigned int tmp_50;
        #line 4485 
        unsigned int tmp_18;
        #line 4485 
        unsigned int tmp_19;
        #line 4485 
        unsigned int tmp_51;
        #line 4485 
        unsigned int tmp_52;
        #line 4485 
        unsigned int tmp_20;
        #line 4485 
        unsigned int tmp_21;
        #line 4485 
        unsigned int tmp_53;
        #line 4485 
        unsigned int tmp_54;
        #line 4485 
        unsigned int tmp_22;
        #line 4485 
        unsigned int tmp_23;
        #line 4485 
        unsigned int tmp_55;
        #line 4485 
        unsigned int tmp_61;
        #line 4485 
        if ((priv->hw)->multicast_filter_bins > 1U) {
          #line 4485 
          if (((unsigned long long)(priv->hw)->multicast_filter_bins & 9223372036854775808ULL) == 0ULL) {
            #line 4485 
            if (((unsigned long long)(priv->hw)->multicast_filter_bins & 4611686018427387904ULL) == 0ULL) {
              #line 4485 
              if (((unsigned long long)(priv->hw)->multicast_filter_bins & 2305843009213693952ULL) == 0ULL) {
                #line 4485 
                if (((unsigned long long)(priv->hw)->multicast_filter_bins & 1152921504606846976ULL) == 0ULL) {
                  #line 4485 
                  if (((unsigned long long)(priv->hw)->multicast_filter_bins & 576460752303423488ULL) == 0ULL) {
                    #line 4485 
                    if (((unsigned long long)(priv->hw)->multicast_filter_bins & 288230376151711744ULL) == 0ULL) {
                      #line 4485 
                      if (((unsigned long long)(priv->hw)->multicast_filter_bins & 144115188075855872ULL) == 0ULL) {
                        #line 4485 
                        if (((unsigned long long)(priv->hw)->multicast_filter_bins & 72057594037927936ULL) == 0ULL) {
                          #line 4485 
                          if (((unsigned long long)(priv->hw)->multicast_filter_bins & 36028797018963968ULL) == 0ULL) {
                            #line 4485 
                            if (((unsigned long long)(priv->hw)->multicast_filter_bins & 18014398509481984ULL) == 0ULL) {
                              #line 4485 
                              if (((unsigned long long)(priv->hw)->multicast_filter_bins & 9007199254740992ULL) == 0ULL) {
                                #line 4485 
                                if (((unsigned long long)(priv->hw)->multicast_filter_bins & 4503599627370496ULL) == 0ULL) {
                                  #line 4485 
                                  if (((unsigned long long)(priv->hw)->multicast_filter_bins & 2251799813685248ULL) == 0ULL) {
                                    #line 4485 
                                    if (((unsigned long long)(priv->hw)->multicast_filter_bins & 1125899906842624ULL) == 0ULL) {
                                      #line 4485 
                                      if (((unsigned long long)(priv->hw)->multicast_filter_bins & 562949953421312ULL) == 0ULL) {
                                        #line 4485 
                                        if (((unsigned long long)(priv->hw)->multicast_filter_bins & 281474976710656ULL) == 0ULL) {
                                          #line 4485 
                                          if (((unsigned long long)(priv->hw)->multicast_filter_bins & 140737488355328ULL) == 0ULL) {
                                            #line 4485 
                                            if (((unsigned long long)(priv->hw)->multicast_filter_bins & 70368744177664ULL) == 0ULL) {
                                              #line 4485 
                                              if (((unsigned long long)(priv->hw)->multicast_filter_bins & 35184372088832ULL) == 0ULL) {
                                                #line 4485 
                                                if (((unsigned long long)(priv->hw)->multicast_filter_bins & 17592186044416ULL) == 0ULL) {
                                                  #line 4485 
                                                  if (((unsigned long long)(priv->hw)->multicast_filter_bins & 8796093022208ULL) == 0ULL) {
                                                    #line 4485 
                                                    if (((unsigned long long)(priv->hw)->multicast_filter_bins & 4398046511104ULL) == 0ULL) {
                                                      #line 4485 
                                                      if (((unsigned long long)(priv->hw)->multicast_filter_bins & 2199023255552ULL) == 0ULL) {
                                                        #line 4485 
                                                        if (((unsigned long long)(priv->hw)->multicast_filter_bins & 1099511627776ULL) == 0ULL) {
                                                          #line 4485 
                                                          if (((unsigned long long)(priv->hw)->multicast_filter_bins & 549755813888ULL) == 0ULL) {
                                                            #line 4485 
                                                            if (((unsigned long long)(priv->hw)->multicast_filter_bins & 274877906944ULL) == 0ULL) {
                                                              #line 4485 
                                                              if (((unsigned long long)(priv->hw)->multicast_filter_bins & 137438953472ULL) == 0ULL) {
                                                                #line 4485 
                                                                if (((unsigned long long)(priv->hw)->multicast_filter_bins & 68719476736ULL) == 0ULL) {
                                                                  #line 4485 
                                                                  if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 34359738368ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 17179869184ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 8589934592ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 4294967296ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 2147483648ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 1073741824ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 536870912ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 268435456ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 134217728ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 67108864ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 33554432ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 16777216ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 8388608ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 4194304ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 2097152ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 1048576ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 524288ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 262144ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 131072ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 65536ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 32768ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 16384ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 8192ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 4096ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 2048ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 1024ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 512ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 256ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 128ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 64ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 32ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 16ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 8ULL) == 0ULL) {
                                                                    #line 4485 
                                                                    if (
                                                                    ((unsigned long long)(priv->hw)->multicast_filter_bins & 4ULL) != 0ULL) 
                                                                    #line 4485 
                                                                    tmp = 2U; else 
                                                                    #line 4485 
                                                                    tmp = 1U;
                                                                    #line 4485 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_0 = 3U;
                                                                    #line 4485 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_1 = 4U;
                                                                    #line 4485 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_2 = 5U;
                                                                    #line 4485 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_3 = 6U;
                                                                    #line 4485 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_4 = 7U;
                                                                    #line 4485 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_5 = 8U;
                                                                    #line 4485 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_6 = 9U;
                                                                    #line 4485 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_7 = 10U;
                                                                    #line 4485 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_8 = 11U;
                                                                    #line 4485 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_9 = 12U;
                                                                    #line 4485 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_10 = 13U;
                                                                    #line 4485 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_11 = 14U;
                                                                    #line 4485 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_12 = 15U;
                                                                    #line 4485 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_13 = 16U;
                                                                    #line 4485 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_14 = 17U;
                                                                    #line 4485 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_15 = 18U;
                                                                    #line 4485 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_16 = 19U;
                                                                    #line 4485 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_17 = 20U;
                                                                    #line 4485 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_18 = 21U;
                                                                    #line 4485 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_19 = 22U;
                                                                    #line 4485 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_20 = 23U;
                                                                    #line 4485 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_21 = 24U;
                                                                    #line 4485 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_22 = 25U;
                                                                    #line 4485 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_23 = 26U;
                                                                    #line 4485 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_24 = 27U;
                                                                    #line 4485 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_25 = 28U;
                                                                    #line 4485 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_26 = 29U;
                                                                    #line 4485 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_27 = 30U;
                                                                    #line 4485 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_28 = 31U;
                                                                    #line 4485 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_29 = 32U;
                                                                    #line 4485 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_30 = 33U;
                                                                    #line 4485 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 4485 
                                                                    tmp_31 = 34U;
                                                                    #line 4485 
                                                                    tmp_32 = tmp_31;
                                                                  }
                                                                  else 
                                                                    #line 4485 
                                                                    tmp_32 = 35U;
                                                                  #line 4485 
                                                                  tmp_33 = tmp_32;
                                                                }
                                                                else 
                                                                  #line 4485 
                                                                  tmp_33 = 36U;
                                                                #line 4485 
                                                                tmp_34 = tmp_33;
                                                              }
                                                              else 
                                                                   #line 4485 
                                                                   tmp_34 = 37U;
                                                              #line 4485 
                                                              tmp_35 = tmp_34;
                                                            }
                                                            else 
                                                                 #line 4485 
                                                                 tmp_35 = 38U;
                                                            #line 4485 
                                                            tmp_36 = tmp_35;
                                                          }
                                                          else 
                                                               #line 4485 
                                                               tmp_36 = 39U;
                                                          #line 4485 
                                                          tmp_37 = tmp_36;
                                                        }
                                                        else 
                                                             #line 4485 
                                                             tmp_37 = 40U;
                                                        #line 4485 
                                                        tmp_38 = tmp_37;
                                                      }
                                                      else 
                                                           #line 4485 
                                                           tmp_38 = 41U;
                                                      #line 4485 
                                                      tmp_39 = tmp_38;
                                                    }
                                                    else 
                                                         #line 4485 
                                                         tmp_39 = 42U;
                                                    #line 4485 
                                                    tmp_40 = tmp_39;
                                                  }
                                                  else 
                                                       #line 4485 
                                                       tmp_40 = 43U;
                                                  #line 4485 
                                                  tmp_41 = tmp_40;
                                                }
                                                else 
                                                     #line 4485 
                                                     tmp_41 = 44U;
                                                #line 4485 
                                                tmp_42 = tmp_41;
                                              }
                                              else 
                                                   #line 4485 
                                                   tmp_42 = 45U;
                                              #line 4485 
                                              tmp_43 = tmp_42;
                                            }
                                            else 
                                                 #line 4485 
                                                 tmp_43 = 46U;
                                            #line 4485 
                                            tmp_44 = tmp_43;
                                          }
                                          else 
                                               #line 4485 
                                               tmp_44 = 47U;
                                          #line 4485 
                                          tmp_45 = tmp_44;
                                        }
                                        else 
                                             #line 4485 
                                             tmp_45 = 48U;
                                        #line 4485 
                                        tmp_46 = tmp_45;
                                      }
                                      else 
                                           #line 4485 
                                           tmp_46 = 49U;
                                      #line 4485 
                                      tmp_47 = tmp_46;
                                    }
                                    else 
                                         #line 4485 
                                         tmp_47 = 50U;
                                    #line 4485 
                                    tmp_48 = tmp_47;
                                  }
                                  else 
                                       #line 4485 
                                       tmp_48 = 51U;
                                  #line 4485 
                                  tmp_49 = tmp_48;
                                }
                                else 
                                     #line 4485 
                                     tmp_49 = 52U;
                                #line 4485 
                                tmp_50 = tmp_49;
                              }
                              else 
                                   #line 4485 
                                   tmp_50 = 53U;
                              #line 4485 
                              tmp_51 = tmp_50;
                            }
                            else 
                                 #line 4485 
                                 tmp_51 = 54U;
                            #line 4485 
                            tmp_52 = tmp_51;
                          }
                          else 
                               #line 4485 
                               tmp_52 = 55U;
                          #line 4485 
                          tmp_53 = tmp_52;
                        }
                        else 
                             #line 4485 
                             tmp_53 = 56U;
                        #line 4485 
                        tmp_54 = tmp_53;
                      }
                      else 
                           #line 4485 
                           tmp_54 = 57U;
                      #line 4485 
                      tmp_55 = tmp_54;
                    }
                    else 
                         #line 4485 
                         tmp_55 = 58U;
                    #line 4485 
                    tmp_56 = tmp_55;
                  }
                  else 
                       #line 4485 
                       tmp_56 = 59U;
                  #line 4485 
                  tmp_57 = tmp_56;
                }
                else 
                     #line 4485 
                     tmp_57 = 60U;
                #line 4485 
                tmp_58 = tmp_57;
              }
              else 
                   #line 4485 
                   tmp_58 = 61U;
              #line 4485 
              tmp_59 = tmp_58;
            }
            else 
                 #line 4485 
                 tmp_59 = 62U;
            #line 4485 
            tmp_60 = tmp_59;
          }
          else 
               #line 4485 
               tmp_60 = 63U;
          #line 4485 
          tmp_61 = tmp_60;
        }
        else 
             #line 4485 
             tmp_61 = 0U;
        #line 4484 
        (priv->hw)->mcast_bits_log2 = tmp_61;
      }
      else {
        #line 4484 
        (priv->hw)->mcast_bits_log2 = (unsigned int)__ilog2_u32((priv->hw)->multicast_filter_bins);
      }
    }
    #line 4489 
    if ((priv->plat)->force_thresh_dma_mode != 0) 
                                                  #line 4490 
                                                  (priv->plat)->tx_coe = 0; else 
                                                                    #line 4492 
                                                                    (priv->plat)->tx_coe = (int)priv->dma_cap.tx_coe;
    #line 4495 
    (priv->plat)->rx_coe = (int)priv->dma_cap.rx_coe;
    #line 4497 
    if (priv->dma_cap.rx_coe_type2 != 0U) 
                                          #line 4498 
                                          (priv->plat)->rx_coe = 2;
    else 
      #line 4499 
      if (priv->dma_cap.rx_coe_type1 != 0U) 
                                            #line 4500 
                                            (priv->plat)->rx_coe = 1;
  }
  else 
       #line 4503 
       _dev_info(priv->device,(char *)"No HW DMA feature register supported\n");
  #line 4506 
  if ((priv->plat)->rx_coe != 0) {
    #line 4507 
    (priv->hw)->rx_csum = (unsigned int)(priv->plat)->rx_coe;
    #line 4508 
    _dev_info(priv->device,(char *)"RX Checksum Offload Engine supported\n");
    #line 4509 
    if (priv->synopsys_id <= 63) 
                                 #line 4510 
                                 _dev_info(priv->device,(char *)"COE Type %d\n",(priv->hw)->rx_csum);
  }
  #line 4512 
  if ((priv->plat)->tx_coe != 0) 
                                 #line 4513 
                                 _dev_info(priv->device,(char *)"TX Checksum insertion supported\n");
  #line 4515 
  if ((priv->plat)->pmt != 0) {
    #line 4516 
    _dev_info(priv->device,(char *)"Wake-Up On Lan supported\n");
    #line 4517 
    device_set_wakeup_capable(priv->device,(_Bool)1);
  }
  #line 4520 
  if (priv->dma_cap.tsoen != 0U) 
                                 #line 4521 
                                 _dev_info(priv->device,(char *)"TSO supported\n");
  #line 4524 
  if (priv->hwif_quirks != (int (*)(struct stmmac_priv *))0) {
    #line 4525 
    ret = (*(priv->hwif_quirks))(priv);
    #line 4526 
    if (ret != 0) 
                  #line 4527 
                  return ret;
  }
  #line 4535 
  if ((priv->synopsys_id > 52 || (priv->plat)->has_xgmac != 0) && (priv->plat)->riwt_off == 0) {
    #line 4537 
    priv->use_riwt = 1;
    #line 4538 
    _dev_info(priv->device,(char *)"Enable RX Mitigation via HW Watchdog Timer\n");
  }
  #line 4542 
  return 0;
}

#line 4555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
int stmmac_dvr_probe(struct device *device, struct plat_stmmacenet_data *plat_dat, struct stmmac_resources *res)
{
  #line 4726 
  u32 __UNIQUE_ID___x598;
  #line 4726 
  u32 tmp_4;
  #line 4634 
  int __result;
  #line 4560 
  struct stmmac_priv *priv;
  #line 4561 
  u32 queue;
  #line 4561 
  u32 rxq;
  #line 4561 
  u32 maxq;
  #line 4562 
  int i;
  #line 4559 
  struct net_device *ndev = (struct net_device *)0;
  #line 4562 
  int ret = 0;
  #line 4564 
  ndev = devm_alloc_etherdev_mqs(device,14720,8U,8U);
  #line 4566 
  if (ndev == (struct net_device *)0) 
                                      #line 4567 
                                      return -12;
  #line 4569 
  ndev->dev.parent = device;
  #line 4571 
  priv = (struct stmmac_priv *)netdev_priv(ndev);
  #line 4572 
  priv->device = device;
  #line 4573 
  priv->dev = ndev;
  #line 4575 
  stmmac_set_ethtool_ops(ndev);
  #line 4576 
  priv->pause = (unsigned int)pause;
  #line 4577 
  priv->plat = plat_dat;
  #line 4578 
  priv->ioaddr = res->addr;
  #line 4579 
  (priv->dev)->base_addr = (unsigned long)res->addr;
  #line 4581 
  (priv->dev)->irq = res->irq;
  #line 4582 
  priv->wol_irq = res->wol_irq;
  #line 4583 
  priv->lpi_irq = res->lpi_irq;
  #line 4585 
  if (! IS_ERR_OR_NULL((void *)res->mac)) 
                                          #line 4586 
                                          memcpy((void *)(priv->dev)->dev_addr,(void *)res->mac,6UL);
  #line 4588 
  dev_set_drvdata(device,(void *)priv->dev);
  #line 4591 
  stmmac_verify_args();
  #line 4594 
  priv->wq = alloc_workqueue((char *)"%s",917514U,1,(char *)"stmmac_wq");
  #line 4595 
  if (priv->wq == (struct workqueue_struct *)0) {
    #line 4596 
    _dev_err(priv->device,(char *)"failed to create workqueue\n");
    #line 4597 
    return -12;
  }
  {
    #line 4600 
    struct lock_class_key __key;
    #line 4600 
    __init_work(& priv->service_task,0);
    #line 4600 
    atomic_long_t __constr_expr_41 = {.counter = 137438953408LL};
    #line 4600 
    priv->service_task.data = __constr_expr_41;
    #line 4600 
    lockdep_init_map(& priv->service_task.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 4600 
    INIT_LIST_HEAD(& priv->service_task.entry);
    #line 4600 
    priv->service_task.func = & stmmac_service_task;
  }
  #line 4605 
  if ((unsigned int)phyaddr <= 31U) 
                                    #line 4606 
                                    (priv->plat)->phy_addr = phyaddr;
  #line 4608 
  if ((priv->plat)->stmmac_rst != (struct reset_control *)0) {
    #line 4609 
    ret = reset_control_assert((priv->plat)->stmmac_rst);
    #line 4610 
    reset_control_deassert((priv->plat)->stmmac_rst);
    #line 4614 
    if (ret == -524) 
                     #line 4615 
                     reset_control_reset((priv->plat)->stmmac_rst);
  }
  #line 4619 
  ret = stmmac_hw_init(priv);
  #line 4620 
  if (ret != 0) 
                #line 4621 
                goto error_hw_init;
  #line 4623 
  stmmac_check_ether_addr(priv);
  #line 4626 
  netif_set_real_num_rx_queues(ndev,(priv->plat)->rx_queues_to_use);
  #line 4627 
  netif_set_real_num_tx_queues(ndev,(priv->plat)->tx_queues_to_use);
  #line 4629 
  ndev->netdev_ops = & stmmac_netdev_ops;
  #line 4631 
  ndev->hw_features = 549755813907ULL;
  #line 4634 
  __result = -22;
  #line 4634 
  if ((priv->hw)->tc != (struct stmmac_tc_ops *)0 && ((priv->hw)->tc)->init != (int (*)(struct stmmac_priv *))0) 
    #line 4634 
    __result = (*(((priv->hw)->tc)->init))(priv);
  #line 4634 
  ret = __result;
  #line 4635 
  if (ret == 0) 
                #line 4636 
                ndev->hw_features |= 281474976710656ULL;
  #line 4639 
  if ((int)(priv->plat)->tso_en != 0 && priv->dma_cap.tsoen != 0U) {
    #line 4640 
    ndev->hw_features |= 1114112ULL;
    #line 4641 
    if ((priv->plat)->has_gmac4 != 0) 
                                      #line 4642 
                                      ndev->hw_features |= 8589934592ULL;
    #line 4643 
    priv->tso = (_Bool)1;
    #line 4644 
    _dev_info(priv->device,(char *)"TSO feature enabled\n");
  }
  #line 4647 
  if (priv->dma_cap.sphen != 0U) {
    #line 4648 
    ndev->hw_features |= 16384ULL;
    #line 4649 
    priv->sph = 1;
    #line 4650 
    _dev_info(priv->device,(char *)"SPH feature enabled\n");
  }
  #line 4653 
  if (priv->dma_cap.addr64 != 0U) {
    #line 4654 
    unsigned long long tmp_2;
    #line 4654 
    if (priv->dma_cap.addr64 != 64U) 
                                     #line 4654 
                                     tmp_2 = (1ULL << priv->dma_cap.addr64) + 18446744073709551615ULL; else 
                                                                    #line 4654 
                                                                    tmp_2 = 18446744073709551615ULL;
    #line 4654 
    ;
    #line 4654 
    ret = dma_set_mask_and_coherent(device,tmp_2);
    #line 4656 
    if (ret == 0) {
      #line 4657 
      _dev_info(priv->device,(char *)"Using %d bits DMA width\n",priv->dma_cap.addr64);
      #line 4665 
      ((priv->plat)->dma_cfg)->eame = (_Bool)1;
    }
    else {
      #line 4667 
      ret = dma_set_mask_and_coherent(device,4294967295ULL);
      #line 4668 
      if (ret != 0) {
        #line 4669 
        _dev_err(priv->device,(char *)"Failed to set DMA Mask\n");
        #line 4670 
        goto error_hw_init;
      }
      #line 4673 
      priv->dma_cap.addr64 = 32U;
    }
  }
  #line 4677 
  ndev->features = (ndev->features | ndev->hw_features) | 32ULL;
  #line 4678 
  ndev->watchdog_timeo = (int)msecs_to_jiffies((unsigned int)watchdog);
  #line 4681 
  ndev->features |= 35184372089088ULL;
  #line 4682 
  if (priv->dma_cap.vlhash != 0U) {
    #line 4683 
    ndev->features |= 512ULL;
    #line 4684 
    ndev->features |= 70368744177664ULL;
  }
  #line 4686 
  if (priv->dma_cap.vlins != 0U) {
    #line 4687 
    ndev->features |= 128ULL;
    #line 4688 
    if (priv->dma_cap.dvlan != 0U) 
                                   #line 4689 
                                   ndev->features |= 17592186044416ULL;
  }
  #line 4692 
  priv->msg_enable = netif_msg_init(debug,63);
  #line 4695 
  rxq = (priv->plat)->rx_queues_to_use;
  #line 4696 
  netdev_rss_key_fill((void *)(& priv->rss.key),40UL);
  #line 4697 
  i = 0;
  #line 4697 
  while ((unsigned int)i <= 255U) {
    #line 4698 
    priv->rss.table[i] = ethtool_rxfh_indir_default((unsigned int)i,rxq);
    #line 4697 
    i ++;
  }
  #line 4700 
  if (priv->dma_cap.rssen != 0U && (priv->plat)->rss_en != 0) 
                                                              #line 4701 
                                                              ndev->features |= 274877906944ULL;
  #line 4704 
  ndev->min_mtu = 46U;
  #line 4705 
  if ((priv->plat)->has_xgmac != 0) 
                                    #line 4706 
                                    ndev->max_mtu = 16368U;
  else 
    #line 4707 
    if ((priv->plat)->enh_desc != 0 || priv->synopsys_id > 63) 
                                                               #line 4708 
                                                               ndev->max_mtu = 9000U; else 
                                                                    #line 4710 
                                                                    ndev->max_mtu = 3712U;
  #line 4714 
  if ((unsigned int)(priv->plat)->maxmtu < ndev->max_mtu && (unsigned int)(priv->plat)->maxmtu >= ndev->min_mtu) 
    #line 4716 
    ndev->max_mtu = (unsigned int)(priv->plat)->maxmtu;
  else 
    #line 4717 
    if ((unsigned int)(priv->plat)->maxmtu < ndev->min_mtu) 
                                                            #line 4718 
                                                            _dev_warn(priv->device,(char *)"%s: warning: maxmtu having invalid value (%d)\n",(char *)"stmmac_dvr_probe",(priv->plat)->maxmtu);
  #line 4722 
  if (flow_ctrl != 0) 
                      #line 4723 
                      priv->flow_ctrl = 3U;
  {
    #line 4726 
    __UNIQUE_ID___x598 = (priv->plat)->rx_queues_to_use;
    #line 4726 
    u32 __UNIQUE_ID___y599 = (priv->plat)->tx_queues_to_use;
    #line 4726 
    if (__UNIQUE_ID___x598 > __UNIQUE_ID___y599) 
                                                 #line 4726 
                                                 tmp_4 = __UNIQUE_ID___x598; else 
                                                                    #line 4726 
                                                                    tmp_4 = __UNIQUE_ID___y599;
    }
  #line 4726 
  maxq = tmp_4;
  #line 4728 
  queue = 0U;
  #line 4728 
  while (queue < maxq) {
    {
      #line 4729 
      struct stmmac_channel *ch = & priv->channel[queue];
      #line 4731 
      ch->priv_data = priv;
      #line 4732 
      ch->index = queue;
      #line 4734 
      if ((priv->plat)->rx_queues_to_use > queue) 
                                                  #line 4735 
                                                  netif_napi_add(ndev,& ch->rx_napi,& stmmac_napi_poll_rx,64);
      #line 4738 
      if ((priv->plat)->tx_queues_to_use > queue) 
                                                  #line 4739 
                                                  netif_tx_napi_add(ndev,& ch->tx_napi,& stmmac_napi_poll_tx,64);
    }
    #line 4728 
    queue ++;
  }
  {
    #line 4745 
    struct lock_class_key __key_0;
    #line 4745 
    __mutex_init(& priv->lock,(char *)"&priv->lock",& __key_0);
  }
  #line 4753 
  if ((priv->plat)->clk_csr >= 0) 
                                  #line 4754 
                                  priv->clk_csr = (priv->plat)->clk_csr; else 
                                                                    #line 4756 
                                                                    stmmac_clk_csr_set(priv);
  #line 4758 
  stmmac_check_pcs_mode(priv);
  #line 4760 
  if (((priv->hw)->pcs != 1U && (priv->hw)->pcs != 4U) && (priv->hw)->pcs != 8U) {
    #line 4764 
    ret = stmmac_mdio_register(ndev);
    #line 4765 
    if (ret < 0) {
      #line 4766 
      _dev_err(priv->device,(char *)"%s: MDIO bus (id: %d) registration failed",(char *)"stmmac_dvr_probe",(priv->plat)->bus_id);
      #line 4769 
      goto error_mdio_register;
    }
  }
  #line 4773 
  ret = stmmac_phy_setup(priv);
  #line 4774 
  if (ret != 0) {
    #line 4775 
    netdev_err(ndev,(char *)"failed to setup phy (%d)\n",ret);
    #line 4776 
    goto error_phy_setup;
  }
  #line 4779 
  ret = cif_register_netdev(ndev);
  #line 4780 
  if (ret != 0) {
    #line 4781 
    _dev_err(priv->device,(char *)"%s: ERROR %i registering the device\n",(char *)"stmmac_dvr_probe",ret);
    #line 4783 
    goto error_netdev_register;
  }
  #line 4787 
  stmmac_init_fs(ndev);
  #line 4790 
  return ret;
  #line 4792 
  error_netdev_register: 
                         #line 4792 
  ;
  #line 4793 
  phylink_destroy(priv->phylink);
  #line 4794 
  error_phy_setup: 
                   #line 4794 
  ;
  #line 4795 
  if (((priv->hw)->pcs != 1U && (priv->hw)->pcs != 4U) && (priv->hw)->pcs != 8U) 
    #line 4798 
    stmmac_mdio_unregister(ndev);
  #line 4799 
  error_mdio_register: 
                       #line 4799 
  ;
  #line 4800 
  queue = 0U;
  #line 4800 
  while (queue < maxq) {
    {
      #line 4801 
      struct stmmac_channel *ch_0 = & priv->channel[queue];
      #line 4803 
      if ((priv->plat)->rx_queues_to_use > queue) 
                                                  #line 4804 
                                                  netif_napi_del(& ch_0->rx_napi);
      #line 4805 
      if ((priv->plat)->tx_queues_to_use > queue) 
                                                  #line 4806 
                                                  netif_napi_del(& ch_0->tx_napi);
    }
    #line 4800 
    queue ++;
  }
  #line 4808 
  error_hw_init: 
                 #line 4808 
  ;
  #line 4809 
  destroy_workqueue(priv->wq);
  #line 4811 
  return ret;
}

#line 4821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
int stmmac_dvr_remove(struct device *dev)
{
  #line 4823 
  struct net_device *ndev = dev_get_drvdata(dev);
  #line 4824 
  struct stmmac_priv *priv = netdev_priv(ndev);
  #line 4826 
  netdev_info(priv->dev,(char *)"%s: removing driver",(char *)"stmmac_dvr_remove");
  #line 4829 
  stmmac_exit_fs(ndev);
  #line 4831 
  stmmac_stop_all_dma(priv);
  {
    #line 4833 
    int __result = -22;
    #line 4833 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_mac != (void (*)(void *, bool ))0) {
      #line 4833 
      (*(((priv->hw)->mac)->set_mac))(priv->ioaddr,(_Bool)0);
      #line 4833 
      __result = 0;
    }
    #line 4833 
    int tmp_2 = __result;
  }
  #line 4834 
  netif_carrier_off(ndev);
  #line 4835 
  cif_unregister_netdev(ndev);
  #line 4836 
  phylink_destroy(priv->phylink);
  #line 4837 
  if ((priv->plat)->stmmac_rst != (struct reset_control *)0) 
                                                             #line 4838 
                                                             reset_control_assert((priv->plat)->stmmac_rst);
  #line 4839 
  clk_disable_unprepare((priv->plat)->pclk);
  #line 4840 
  clk_disable_unprepare((priv->plat)->stmmac_clk);
  #line 4841 
  if (((priv->hw)->pcs != 1U && (priv->hw)->pcs != 4U) && (priv->hw)->pcs != 8U) 
    #line 4844 
    stmmac_mdio_unregister(ndev);
  #line 4845 
  destroy_workqueue(priv->wq);
  #line 4846 
  mutex_destroy(& priv->lock);
  #line 4848 
  return 0;
}

#line 4859  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
int stmmac_suspend(struct device *dev)
{
  #line 4861 
  struct net_device *ndev = dev_get_drvdata(dev);
  #line 4862 
  struct stmmac_priv *priv = netdev_priv(ndev);
  #line 4864 
  if (ndev == (struct net_device *)0) 
                                      #line 4865 
                                      return 0;
  else {
    #line 4864 
    if (! netif_running(ndev)) 
                               #line 4865 
                               return 0;
  }
  #line 4867 
  phylink_mac_change(priv->phylink,(_Bool)0);
  #line 4869 
  cif_mutex_lock_lock_of_stmmac_priv_0(& priv->lock);
  #line 4871 
  netif_device_detach(ndev);
  #line 4872 
  stmmac_stop_all_queues(priv);
  #line 4874 
  stmmac_disable_all_queues(priv);
  #line 4877 
  stmmac_stop_all_dma(priv);
  #line 4880 
  if ((int)device_may_wakeup(priv->device) != 0) {
    {
      #line 4881 
      int __result = -22;
      #line 4881 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->pmt != (void (*)(struct mac_device_info *, unsigned long ))0) {
        #line 4881 
        (*(((priv->hw)->mac)->pmt))(priv->hw,(unsigned long)priv->wolopts);
        #line 4881 
        __result = 0;
      }
      #line 4881 
      int tmp_2 = __result;
    }
    #line 4882 
    priv->irq_wake = 1;
  }
  else {
    #line 4884 
    cif_mutex_unlock_lock_of_stmmac_priv_0(& priv->lock);
    #line 4885 
    rtnl_lock();
    #line 4886 
    phylink_stop(priv->phylink);
    #line 4887 
    rtnl_unlock();
    #line 4888 
    cif_mutex_lock_lock_of_stmmac_priv_0(& priv->lock);
    {
      #line 4890 
      int __result_0 = -22;
      #line 4890 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->set_mac != (void (*)(void *, bool ))0) {
        #line 4890 
        (*(((priv->hw)->mac)->set_mac))(priv->ioaddr,(_Bool)0);
        #line 4890 
        __result_0 = 0;
      }
      #line 4890 
      int tmp_4 = __result_0;
    }
    #line 4891 
    pinctrl_pm_select_sleep_state(priv->device);
    #line 4893 
    if ((priv->plat)->clk_ptp_ref != (struct clk *)0) 
                                                      #line 4894 
                                                      clk_disable_unprepare((priv->plat)->clk_ptp_ref);
    #line 4895 
    clk_disable_unprepare((priv->plat)->pclk);
    #line 4896 
    clk_disable_unprepare((priv->plat)->stmmac_clk);
  }
  #line 4898 
  cif_mutex_unlock_lock_of_stmmac_priv_0(& priv->lock);
  #line 4900 
  priv->speed = -1;
  #line 4901 
  return 0;
}

#line 4909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_reset_queues_param(struct stmmac_priv *priv)
{
  #line 4913 
  u32 queue;
  #line 4911 
  u32 rx_cnt = (priv->plat)->rx_queues_to_use;
  #line 4912 
  u32 tx_cnt = (priv->plat)->tx_queues_to_use;
  #line 4915 
  queue = 0U;
  #line 4915 
  while (queue < rx_cnt) {
    {
      #line 4916 
      struct stmmac_rx_queue *rx_q = & priv->rx_queue[queue];
      #line 4918 
      rx_q->cur_rx = 0U;
      #line 4919 
      rx_q->dirty_rx = 0U;
    }
    #line 4915 
    queue ++;
  }
  #line 4922 
  queue = 0U;
  #line 4922 
  while (queue < tx_cnt) {
    {
      #line 4923 
      struct stmmac_tx_queue *tx_q = & priv->tx_queue[queue];
      #line 4925 
      tx_q->cur_tx = 0U;
      #line 4926 
      tx_q->dirty_tx = 0U;
      #line 4927 
      tx_q->mss = 0U;
    }
    #line 4922 
    queue ++;
  }
  #line 4929 
  return;
}

#line 4937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
int stmmac_resume(struct device *dev)
{
  #line 4939 
  struct net_device *ndev = dev_get_drvdata(dev);
  #line 4940 
  struct stmmac_priv *priv = netdev_priv(ndev);
  #line 4942 
  if (! netif_running(ndev)) 
                             #line 4943 
                             return 0;
  #line 4951 
  if ((int)device_may_wakeup(priv->device) != 0) {
    #line 4952 
    cif_mutex_lock_lock_of_stmmac_priv_0(& priv->lock);
    {
      #line 4953 
      int __result = -22;
      #line 4953 
      if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->pmt != (void (*)(struct mac_device_info *, unsigned long ))0) {
        #line 4953 
        (*(((priv->hw)->mac)->pmt))(priv->hw,0UL);
        #line 4953 
        __result = 0;
      }
      #line 4953 
      int tmp_2 = __result;
    }
    #line 4954 
    cif_mutex_unlock_lock_of_stmmac_priv_0(& priv->lock);
    #line 4955 
    priv->irq_wake = 0;
  }
  else {
    #line 4957 
    pinctrl_pm_select_default_state(priv->device);
    #line 4959 
    clk_prepare_enable((priv->plat)->stmmac_clk);
    #line 4960 
    clk_prepare_enable((priv->plat)->pclk);
    #line 4961 
    if ((priv->plat)->clk_ptp_ref != (struct clk *)0) 
                                                      #line 4962 
                                                      clk_prepare_enable((priv->plat)->clk_ptp_ref);
    #line 4964 
    if (priv->mii != (struct mii_bus *)0) 
                                          #line 4965 
                                          stmmac_mdio_reset(priv->mii);
  }
  #line 4968 
  netif_device_attach(ndev);
  #line 4970 
  cif_mutex_lock_lock_of_stmmac_priv_0(& priv->lock);
  #line 4972 
  stmmac_reset_queues_param(priv);
  #line 4974 
  stmmac_clear_descriptors(priv);
  #line 4976 
  stmmac_hw_setup(ndev,(_Bool)0);
  #line 4977 
  stmmac_init_coalesce(priv);
  #line 4978 
  stmmac_set_rx_mode(ndev);
  #line 4980 
  stmmac_enable_all_queues(priv);
  #line 4982 
  stmmac_start_all_queues(priv);
  #line 4984 
  cif_mutex_unlock_lock_of_stmmac_priv_0(& priv->lock);
  #line 4986 
  if (! device_may_wakeup(priv->device)) {
    #line 4987 
    rtnl_lock();
    #line 4988 
    phylink_start(priv->phylink);
    #line 4989 
    rtnl_unlock();
  }
  #line 4992 
  phylink_mac_change(priv->phylink,(_Bool)1);
  #line 4994 
  return 0;
}

#line 5045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static int stmmac_init(void)
{
  #line 5049 
  if (stmmac_fs_dir == (struct dentry *)0) 
                                           #line 5050 
                                           stmmac_fs_dir = cif_debugfs_create_dir((char *)"stmmaceth",(struct dentry *)0);
  #line 5053 
  return 0;
}

#line 5056  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c"
static void stmmac_exit(void)
{
  #line 5059 
  debugfs_remove_recursive(stmmac_fs_dir);
  #line 5060 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
int (*emg_alias_single_release)(struct inode *, struct file *) = & single_release;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
struct file_operations *emg_alias_stmmac_dma_cap_fops = & stmmac_dma_cap_fops;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
struct file_operations *emg_alias_stmmac_rings_status_fops = & stmmac_rings_status_fops;
#line 98 
#line 98 
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1);
#line 99 
#line 99 
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);
#line 100 
#line 100 
int emg_del_timer_sync(struct timer_list *arg0);
#line 101 
#line 101 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 102 
#line 102 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 103 
#line 103 
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);
#line 104 
#line 104 
int emg_register_netdev(struct net_device *arg0);
#line 105 
#line 105 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 106 
#line 106 
void emg_unregister_netdev(struct net_device *arg0);
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
int emg_wrapper_stmmac_change_mtu(struct net_device *arg0, int arg1)
{
  #line 111 
  return stmmac_change_mtu(arg0,arg1);
}

#line 115  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
int emg_wrapper_stmmac_dma_cap_open(struct inode *arg0, struct file *arg1)
{
  #line 116 
  return stmmac_dma_cap_open(arg0,arg1);
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
unsigned long long emg_wrapper_stmmac_fix_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 121 
  return stmmac_fix_features(arg0,arg1);
}

#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
enum irqreturn emg_wrapper_stmmac_interrupt(int arg0, void *arg1)
{
  #line 126 
  return stmmac_interrupt(arg0,arg1);
}

#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
int emg_wrapper_stmmac_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 131 
  return stmmac_ioctl(arg0,arg1,arg2);
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
int emg_wrapper_stmmac_open(struct net_device *arg0)
{
  #line 136 
  return stmmac_open(arg0);
}

#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
void emg_wrapper_stmmac_poll_controller(struct net_device *arg0)
{
  #line 141 
  stmmac_poll_controller(arg0);
  #line 142 
  return;
}

#line 145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
int emg_wrapper_stmmac_release(struct net_device *arg0)
{
  #line 146 
  return stmmac_release(arg0);
}

#line 150  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
int emg_wrapper_stmmac_rings_status_open(struct inode *arg0, struct file *arg1)
{
  #line 151 
  return stmmac_rings_status_open(arg0,arg1);
}

#line 155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
unsigned short emg_wrapper_stmmac_select_queue(struct net_device *arg0, struct sk_buff *arg1, struct net_device *arg2)
{
  #line 156 
  return stmmac_select_queue(arg0,arg1,arg2);
}

#line 160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
int emg_wrapper_stmmac_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 161 
  return stmmac_set_features(arg0,arg1);
}

#line 165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
int emg_wrapper_stmmac_set_mac_address(struct net_device *arg0, void *arg1)
{
  #line 166 
  return stmmac_set_mac_address(arg0,arg1);
}

#line 170  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
void emg_wrapper_stmmac_set_rx_mode(struct net_device *arg0)
{
  #line 171 
  stmmac_set_rx_mode(arg0);
  #line 172 
  return;
}

#line 175  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
int emg_wrapper_stmmac_setup_tc(struct net_device *arg0, enum tc_setup_type arg1, void *arg2)
{
  #line 176 
  return stmmac_setup_tc(arg0,arg1,arg2);
}

#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
void emg_wrapper_stmmac_tx_timeout(struct net_device *arg0)
{
  #line 181 
  stmmac_tx_timeout(arg0);
  #line 182 
  return;
}

#line 185  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
int emg_wrapper_stmmac_vlan_rx_add_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 186 
  return stmmac_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),
                             (unsigned short)((int)arg2));
}

#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
int emg_wrapper_stmmac_vlan_rx_kill_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 191 
  return stmmac_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),
                              (unsigned short)((int)arg2));
}

#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
enum netdev_tx emg_wrapper_stmmac_xmit(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 196 
  return stmmac_xmit(arg0,arg1);
}

#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
void emg_stmmac_exit(void)
{
  #line 201 
  stmmac_exit();
  #line 202 
  return;
}

#line 204  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
int emg_stmmac_init(void)
{
  #line 205 
  return stmmac_init();
}

#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static unsigned long cif_find_next_bit_0(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 219 
  return ldv_find_next_bit(addr,size,offset);
}

#line 223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 226 
  ldv_set_bit(nr,addr);
  #line 227 
  return;
}

#line 230  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 233 
  ldv_clear_bit(nr,addr);
  #line 234 
  return;
}

#line 237  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 240 
  ldv_init_list_head(list);
  #line 241 
  return;
}

#line 258  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static unsigned long cif_find_first_bit_0(unsigned long *addr, unsigned long size)
{
  #line 261 
  return ldv_find_first_bit(addr,size);
}

#line 314  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static long PTR_ERR_0(void *ptr)
{
  #line 317 
  return ldv_ptr_err(ptr);
}

#line 321  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static bool IS_ERR_1(void *ptr)
{
  #line 324 
  return ldv_is_err(ptr);
}

#line 328  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static bool IS_ERR_OR_NULL(void *ptr)
{
  #line 331 
  return ldv_is_err_or_null(ptr);
}

#line 407  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 411 
  return emg_queue_work(wq,work);
}

#line 510  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 513 
  return ldv_kcalloc(n,size,flags);
}

#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void cif_spin_lock_bh__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 661 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 663 
  spin_lock_bh(lock);
  #line 664 
  return;
}

#line 698  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void cif_spin_unlock_bh__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 701 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 703 
  spin_unlock_bh(lock);
  #line 704 
  return;
}

#line 1106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 1110 
  return emg_del_timer_sync(timer);
}

#line 1114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 1118 
  return emg_mod_timer(timer,expires);
}

#line 1122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void cif_mutex_lock_lock_of_stmmac_priv_0(struct mutex *lock)
{
  #line 1125 
  ldv_mutex_model_lock(lock,(char *)"lock_of_stmmac_priv");
  #line 1126 
  return;
}

#line 1129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void cif_mutex_unlock_lock_of_stmmac_priv_0(struct mutex *lock)
{
  #line 1132 
  ldv_mutex_model_unlock(lock,(char *)"lock_of_stmmac_priv");
  #line 1133 
  return;
}

#line 1136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 1140 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 1144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 1148 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 1152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent)
{
  #line 1156 
  return emg_debugfs_create_dir(name,parent);
}

#line 1160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 1164 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

#line 1168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 1172 
  return emg_register_netdev(dev);
}

#line 1176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1180 
  emg_unregister_netdev(dev);
  #line 1181 
  return;
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/dwxgmac2_core.i.aux"
static unsigned long cif_find_next_bit_1(unsigned long *addr, unsigned long size, unsigned long offset);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/dwxgmac2_core.i.aux"
static unsigned long cif_find_first_bit_1(unsigned long *addr, unsigned long size);
#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 6 
void __bad_udelay(void);
#line 9 
#line 9 
void __udelay(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_core_init(struct mac_device_info *hw, struct net_device *dev)
{
  #line 18 
  u32 tx;
  #line 18 
  u32 rx;
  #line 17 
  void *ioaddr = hw->pcsr;
  #line 20 
  tx = readl(ioaddr);
  #line 21 
  rx = readl(ioaddr + 4U);
  #line 23 
  tx |= 65536U;
  #line 24 
  rx |= 1072693440U;
  #line 26 
  if (hw->ps != 0U) {
    #line 27 
    tx |= 1U;
    #line 28 
    tx = ~ hw->link.speed_mask & tx;
    #line 30 
    switch (hw->ps) {
      #line 31 
      case (unsigned int)10000: 
                                #line 31 
      ;
      #line 32 
      tx = hw->link.xgmii.speed10000 | tx;
      #line 33 
      break;
      #line 34 
      case (unsigned int)2500: 
                               #line 34 
      ;
      #line 35 
      tx = hw->link.speed2500 | tx;
      #line 36 
      break;
      #line 37 
      case (unsigned int)1000: 
                               #line 37 
      ;
      #line 38 
      default: 
               #line 38 
      ;
      #line 39 
      tx = hw->link.speed1000 | tx;
      #line 40 
      break;
    }
  }
  #line 44 
  writel(tx,ioaddr);
  #line 45 
  writel(rx,ioaddr + 4U);
  #line 46 
  writel(48U,ioaddr + 180U);
  #line 47 
  return;
}

#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_set_mac(void *ioaddr, bool enable)
{
  #line 51 
  u32 tx = readl(ioaddr);
  #line 52 
  u32 rx = readl(ioaddr + 4U);
  #line 54 
  if ((int)enable != 0) {
    #line 55 
    tx |= 1U;
    #line 56 
    rx |= 1U;
  }
  else {
    #line 58 
    tx &= 4294967294U;
    #line 59 
    rx &= 4294967294U;
  }
  #line 62 
  writel(tx,ioaddr);
  #line 63 
  writel(rx,ioaddr + 4U);
  #line 64 
  return;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static int dwxgmac2_rx_ipc(struct mac_device_info *hw)
{
  #line 69 
  u32 value;
  #line 68 
  void *ioaddr = hw->pcsr;
  #line 71 
  value = readl(ioaddr + 4U);
  #line 72 
  if (hw->rx_csum != 0U) 
                         #line 73 
                         value |= 512U; else 
                                             #line 75 
                                             value &= 4294966783U;
  #line 76 
  writel(value,ioaddr + 4U);
  #line 78 
  return ((unsigned long)readl(ioaddr + 4U) & 512UL) != 0UL;
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_rx_queue_enable(struct mac_device_info *hw, u8 mode, u32 queue)
{
  #line 85 
  u32 value;
  #line 84 
  void *ioaddr = hw->pcsr;
  #line 87 
  value = readl(ioaddr + 160U) & ~ (- ((unsigned int)(1UL << queue * 2U)) & (unsigned int)(18446744073709551615UL >> (31U - queue) * 2U));
  #line 88 
  if ((unsigned int)mode == 0U) 
                                #line 89 
                                value = (unsigned int)(1 << queue * 2U) | value;
  else 
    #line 90 
    if ((unsigned int)mode == 1U) 
                                  #line 91 
                                  value = (unsigned int)(2 << queue * 2U) | value;
  #line 92 
  writel(value,ioaddr + 160U);
  #line 93 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_rx_queue_prio(struct mac_device_info *hw, u32 prio, u32 queue)
{
  #line 99 
  u32 value;
  #line 99 
  u32 reg;
  #line 98 
  void *ioaddr = hw->pcsr;
  #line 101 
  if (queue <= 3U) 
                   #line 101 
                   reg = 168U; else 
                                    #line 101 
                                    reg = 172U;
  #line 102 
  if (queue > 3U) 
                  #line 103 
                  queue += 4294967292U;
  #line 105 
  value = readl(ioaddr + (unsigned long)reg);
  #line 106 
  value = ~ (- ((unsigned int)(1UL << queue * 8U)) & (unsigned int)(18446744073709551615UL >> (7U - queue) * 8U)) & value;
  #line 107 
  value = ((prio << queue * 8U) & (- ((unsigned int)(1UL << queue * 8U)) & (unsigned int)(18446744073709551615UL >> (7U - queue) * 8U))) | value;
  #line 109 
  writel(value,ioaddr + (unsigned long)reg);
  #line 110 
  return;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_tx_queue_prio(struct mac_device_info *hw, u32 prio, u32 queue)
{
  #line 116 
  u32 value;
  #line 116 
  u32 reg;
  #line 115 
  void *ioaddr = hw->pcsr;
  #line 118 
  if (queue <= 3U) 
                   #line 118 
                   reg = 4160U; else 
                                     #line 118 
                                     reg = 4164U;
  #line 119 
  if (queue > 3U) 
                  #line 120 
                  queue += 4294967292U;
  #line 122 
  value = readl(ioaddr + (unsigned long)reg);
  #line 123 
  value = ~ (- ((unsigned int)(1UL << queue * 8U)) & (unsigned int)(18446744073709551615UL >> (7U - queue) * 8U)) & value;
  #line 124 
  value = ((prio << queue * 8U) & (- ((unsigned int)(1UL << queue * 8U)) & (unsigned int)(18446744073709551615UL >> (7U - queue) * 8U))) | value;
  #line 126 
  writel(value,ioaddr + (unsigned long)reg);
  #line 127 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_prog_mtl_rx_algorithms(struct mac_device_info *hw, u32 rx_alg)
{
  #line 133 
  u32 value;
  #line 132 
  void *ioaddr = hw->pcsr;
  #line 135 
  value = readl(ioaddr + 4096U);
  #line 136 
  value &= 4294967291U;
  #line 138 
  switch (rx_alg) {
    #line 139 
    case (u32)4: 
                 #line 139 
    ;
    #line 140 
    break;
    #line 141 
    case (u32)5: 
                 #line 141 
    ;
    #line 142 
    value |= 4U;
    #line 143 
    break;
    #line 144 
    default: 
             #line 144 
    ;
    #line 145 
    break;
  }
  #line 148 
  writel(value,ioaddr + 4096U);
  #line 149 
  return;
}

#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_prog_mtl_tx_algorithms(struct mac_device_info *hw, u32 tx_alg)
{
  #line 156 
  u32 value;
  #line 157 
  int i;
  #line 154 
  void *ioaddr = hw->pcsr;
  #line 155 
  bool ets = (_Bool)1;
  #line 159 
  value = readl(ioaddr + 4096U);
  #line 160 
  value &= 4294967199U;
  #line 162 
  switch (tx_alg) {
    #line 163 
    case (u32)0: 
                 #line 163 
    ;
    #line 164 
    value = value;
    #line 165 
    break;
    #line 166 
    case (u32)1: 
                 #line 166 
    ;
    #line 167 
    value |= 32U;
    #line 168 
    break;
    #line 169 
    case (u32)2: 
                 #line 169 
    ;
    #line 170 
    value |= 64U;
    #line 171 
    break;
    #line 172 
    default: 
             #line 172 
    ;
    #line 173 
    ets = (_Bool)0;
    #line 174 
    break;
  }
  #line 177 
  writel(value,ioaddr + 4096U);
  #line 180 
  i = 0;
  #line 180 
  while (i <= 7) {
    #line 181 
    value = readl(ioaddr + (unsigned long)(i * 128 + 4368));
    #line 182 
    value &= 4294967292U;
    #line 183 
    if ((int)ets != 0) 
                       #line 184 
                       value |= 2U;
    #line 185 
    writel(value,ioaddr + (unsigned long)(i * 128 + 4368));
    #line 180 
    i ++;
  }
  #line 187 
  return;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_set_mtl_tx_queue_weight(struct mac_device_info *hw, u32 weight, u32 queue)
{
  #line 192 
  void *ioaddr = hw->pcsr;
  #line 194 
  writel(weight,ioaddr + (unsigned long)(queue * 128U + 4376U));
  #line 195 
  return;
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_map_mtl_to_dma(struct mac_device_info *hw, u32 queue, u32 chan)
{
  #line 201 
  u32 value;
  #line 201 
  u32 reg;
  #line 200 
  void *ioaddr = hw->pcsr;
  #line 203 
  if (queue <= 3U) 
                   #line 203 
                   reg = 4144U; else 
                                     #line 203 
                                     reg = 4148U;
  #line 204 
  if (queue > 3U) 
                  #line 205 
                  queue += 4294967292U;
  #line 207 
  value = readl(ioaddr + (unsigned long)reg);
  #line 208 
  value = ~ (- ((unsigned int)(1UL << queue * 8U)) & (unsigned int)(18446744073709551615UL >> (7U - queue) * 8U)) & value;
  #line 209 
  value = ((chan << queue * 8U) & (- ((unsigned int)(1UL << queue * 8U)) & (unsigned int)(18446744073709551615UL >> (7U - queue) * 8U))) | value;
  #line 211 
  writel(value,ioaddr + (unsigned long)reg);
  #line 212 
  return;
}

#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_config_cbs(struct mac_device_info *hw, u32 send_slope, u32 idle_slope, u32 high_credit, u32 low_credit, u32 queue)
{
  #line 219 
  u32 value;
  #line 218 
  void *ioaddr = hw->pcsr;
  #line 221 
  writel(send_slope,ioaddr + (unsigned long)(queue * 128U + 4380U));
  #line 222 
  writel(idle_slope,ioaddr + (unsigned long)(queue * 128U + 4376U));
  #line 223 
  writel(high_credit,ioaddr + (unsigned long)(queue * 128U + 4384U));
  #line 224 
  writel(low_credit,ioaddr + (unsigned long)(queue * 128U + 4388U));
  #line 226 
  value = readl(ioaddr + (unsigned long)(queue * 128U + 4368U));
  #line 227 
  value &= 4294967292U;
  #line 228 
  value |= 9U;
  #line 229 
  writel(value,ioaddr + (unsigned long)(queue * 128U + 4368U));
  #line 230 
  return;
}

#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_dump_regs(struct mac_device_info *hw, u32 *reg_space)
{
  #line 235 
  int i;
  #line 234 
  void *ioaddr = hw->pcsr;
  #line 237 
  i = 0;
  #line 237 
  while (i <= 1596) {
    #line 238 
    *(reg_space + (unsigned long)i) = readl(ioaddr + (unsigned long)(i * 4));
    #line 237 
    i ++;
  }
  #line 239 
  return;
}

#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static int dwxgmac2_host_irq_status(struct mac_device_info *hw, struct stmmac_extra_stats *x)
{
  #line 245 
  u32 stat;
  #line 245 
  u32 en;
  #line 244 
  void *ioaddr = hw->pcsr;
  #line 246 
  int ret = 0;
  #line 248 
  en = readl(ioaddr + 180U);
  #line 249 
  stat = readl(ioaddr + 176U);
  #line 251 
  stat &= en;
  #line 253 
  if (((unsigned long)stat & 16UL) != 0UL) {
    #line 254 
    (x->irq_receive_pmt_irq_n) ++;
    #line 255 
    readl(ioaddr + 192U);
  }
  #line 258 
  if (((unsigned long)stat & 32UL) != 0UL) {
    #line 259 
    u32 lpi = readl(ioaddr + 208U);
    #line 261 
    if (((unsigned long)lpi & 1UL) != 0UL) {
      #line 262 
      ret |= 1;
      #line 263 
      (x->irq_tx_path_in_lpi_mode_n) ++;
    }
    #line 265 
    if (((unsigned long)lpi & 2UL) != 0UL) {
      #line 266 
      ret |= 2;
      #line 267 
      (x->irq_tx_path_exit_lpi_mode_n) ++;
    }
    #line 269 
    if (((unsigned long)lpi & 4UL) != 0UL) 
                                           #line 270 
                                           (x->irq_rx_path_in_lpi_mode_n) ++;
    #line 271 
    if (((unsigned long)lpi & 8UL) != 0UL) 
                                           #line 272 
                                           (x->irq_rx_path_exit_lpi_mode_n) ++;
  }
  #line 275 
  return ret;
}

#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static int dwxgmac2_host_mtl_irq_status(struct mac_device_info *hw, u32 chan)
{
  #line 282 
  u32 status;
  #line 280 
  void *ioaddr = hw->pcsr;
  #line 281 
  int ret = 0;
  #line 284 
  status = readl(ioaddr + 4128U);
  #line 285 
  if ((((unsigned long)status >> chan) & 1UL) != 0UL) {
    #line 286 
    u32 chan_status = readl(ioaddr + (unsigned long)(chan * 128U + 4468U));
    #line 288 
    if (((unsigned long)chan_status & 65536UL) != 0UL) 
                                                       #line 289 
                                                       ret |= 256;
    #line 291 
    writel(4294967295U,ioaddr + (unsigned long)(chan * 128U + 4468U));
  }
  #line 294 
  return ret;
}

#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_flow_ctrl(struct mac_device_info *hw, unsigned int duplex, unsigned int fc, unsigned int pause_time, u32 tx_cnt)
{
  #line 302 
  u32 i;
  #line 301 
  void *ioaddr = hw->pcsr;
  #line 304 
  if ((fc & 1U) != 0U) 
                       #line 305 
                       writel(1U,ioaddr + 144U);
  #line 306 
  if ((fc & 2U) != 0U) {
    #line 307 
    i = 0U;
    #line 307 
    while (i < tx_cnt) {
      {
        #line 308 
        u32 value = 2U;
        #line 310 
        if (duplex != 0U) 
                          #line 311 
                          value = (pause_time << 16) | value;
        #line 313 
        writel(value,ioaddr + (unsigned long)((i + 28U) * 4U));
      }
      #line 307 
      i ++;
    }
  }
  #line 316 
  return;
}

#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_pmt(struct mac_device_info *hw, unsigned long mode)
{
  #line 320 
  void *ioaddr = hw->pcsr;
  #line 321 
  u32 val = 0U;
  #line 323 
  if ((mode & 32UL) != 0UL) 
                            #line 324 
                            val |= 3U;
  #line 325 
  if ((mode & 2UL) != 0UL) 
                           #line 326 
                           val |= 517U;
  #line 327 
  if (val != 0U) {
    #line 328 
    u32 cfg = readl(ioaddr + 4U);
    #line 329 
    cfg |= 1U;
    #line 330 
    writel(cfg,ioaddr + 4U);
  }
  #line 333 
  writel(val,ioaddr + 192U);
  #line 334 
  return;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_set_umac_addr(struct mac_device_info *hw, unsigned char *addr, unsigned int reg_n)
{
  #line 340 
  u32 value;
  #line 339 
  void *ioaddr = hw->pcsr;
  #line 342 
  value = (unsigned int)(((int)*(addr + 5U) << 8) | (int)*(addr + 4U));
  #line 343 
  writel(value | 2147483648U,ioaddr + (unsigned long)((reg_n + 96U) * 8U));
  #line 345 
  value = (unsigned int)(((((int)*(addr + 3U) << 24) | ((int)*(addr + 2U) << 16)) | ((int)*(addr + 1U) << 8)) | (int)*addr);
  #line 346 
  writel(value,ioaddr + (unsigned long)(reg_n * 8U + 772U));
  #line 347 
  return;
}

#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_get_umac_addr(struct mac_device_info *hw, unsigned char *addr, unsigned int reg_n)
{
  #line 353 
  u32 hi_addr;
  #line 353 
  u32 lo_addr;
  #line 352 
  void *ioaddr = hw->pcsr;
  #line 356 
  hi_addr = readl(ioaddr + (unsigned long)((reg_n + 96U) * 8U));
  #line 357 
  lo_addr = readl(ioaddr + (unsigned long)(reg_n * 8U + 772U));
  #line 360 
  *addr = (unsigned char)lo_addr;
  #line 361 
  *(addr + 1U) = (unsigned char)(lo_addr >> 8);
  #line 362 
  *(addr + 2U) = (unsigned char)(lo_addr >> 16);
  #line 363 
  *(addr + 3U) = (unsigned char)(lo_addr >> 24);
  #line 364 
  *(addr + 4U) = (unsigned char)hi_addr;
  #line 365 
  *(addr + 5U) = (unsigned char)(hi_addr >> 8);
  #line 366 
  return;
}

#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_set_eee_mode(struct mac_device_info *hw, bool en_tx_lpi_clockgating)
{
  #line 372 
  u32 value;
  #line 371 
  void *ioaddr = hw->pcsr;
  #line 374 
  value = readl(ioaddr + 208U);
  #line 376 
  value |= 589824U;
  #line 377 
  if ((int)en_tx_lpi_clockgating != 0) 
                                       #line 378 
                                       value |= 2097152U;
  #line 380 
  writel(value,ioaddr + 208U);
  #line 381 
  return;
}

#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_reset_eee_mode(struct mac_device_info *hw)
{
  #line 386 
  u32 value;
  #line 385 
  void *ioaddr = hw->pcsr;
  #line 388 
  value = readl(ioaddr + 208U);
  #line 389 
  value &= 4292280319U;
  #line 390 
  writel(value,ioaddr + 208U);
  #line 391 
  return;
}

#line 393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_set_eee_pls(struct mac_device_info *hw, int link)
{
  #line 396 
  u32 value;
  #line 395 
  void *ioaddr = hw->pcsr;
  #line 398 
  value = readl(ioaddr + 208U);
  #line 399 
  if (link != 0) 
                 #line 400 
                 value |= 131072U; else 
                                        #line 402 
                                        value &= 4294836223U;
  #line 403 
  writel(value,ioaddr + 208U);
  #line 404 
  return;
}

#line 406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_set_eee_timer(struct mac_device_info *hw, int ls, int tw)
{
  #line 409 
  u32 value;
  #line 408 
  void *ioaddr = hw->pcsr;
  #line 411 
  value = (unsigned int)((tw & 65535) | ((ls << 16) & 67043328));
  #line 412 
  writel(value,ioaddr + 212U);
  #line 413 
  return;
}

#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_set_mchash(void *ioaddr, u32 *mcfilterbits, int mcbitslog2)
{
  #line 418 
  int numhashregs;
  #line 418 
  int regs;
  #line 420 
  switch (mcbitslog2) {
    #line 421 
    case 6: 
            #line 421 
    ;
    #line 422 
    numhashregs = 2;
    #line 423 
    break;
    #line 424 
    case 7: 
            #line 424 
    ;
    #line 425 
    numhashregs = 4;
    #line 426 
    break;
    #line 427 
    case 8: 
            #line 427 
    ;
    #line 428 
    numhashregs = 8;
    #line 429 
    break;
    #line 430 
    default: 
             #line 430 
    ;
    #line 431 
    return;
  }
  #line 434 
  regs = 0;
  #line 434 
  while (regs < numhashregs) {
    #line 435 
    writel(*(mcfilterbits + (unsigned long)regs),ioaddr + (unsigned long)((regs + 4) * 4));
    #line 434 
    regs ++;
  }
  #line 436 
  return;
}

#line 438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_set_filter(struct mac_device_info *hw, struct net_device *dev)
{
  #line 444 
  u32 mc_filter[8U];
  #line 445 
  int i;
  #line 441 
  void *ioaddr = (void *)dev->base_addr;
  #line 442 
  u32 value = readl(ioaddr + 8U);
  #line 443 
  int mcbitslog2 = (int)hw->mcast_bits_log2;
  #line 447 
  value &= 4294967274U;
  #line 448 
  value |= 1024U;
  #line 450 
  memset((void *)(& mc_filter),0,32UL);
  #line 452 
  if ((dev->flags & 256U) != 0U) {
    #line 453 
    value |= 1U;
    #line 454 
    value |= 128U;
  }
  else 
    #line 455 
    if ((dev->flags & 512U) != 0U || (unsigned int)dev->mc.count > hw->multicast_filter_bins) {
      #line 457 
      value |= 16U;
      #line 459 
      i = 0;
      #line 459 
      while (i <= 7) {
        #line 460 
        writel(4294967295U,ioaddr + (unsigned long)((i + 4) * 4));
        #line 459 
        i ++;
      }
    }
    else 
      #line 461 
      if (dev->mc.count != 0) {
        #line 466 
        void *__mptr;
        #line 462 
        struct netdev_hw_addr *ha;
        #line 464 
        value |= 4U;
        #line 466 
        __mptr = (void *)dev->mc.list.next;
        #line 466 
        ha = ((struct netdev_hw_addr *)__mptr);
        #line 466 
        while (& ha->list != & dev->mc.list) {
          #line 466 
          void *__mptr_0;
          {
            #line 467 
            u32 ___x;
            #line 467 
            u32 tmp_5;
            {
              #line 467 
              u32 __x = ~ crc32_le(4294967295U,(unsigned char *)(& ha->addr),6UL);
              #line 467 
              if (0 != 0) {
                #line 467 
                ___x = __x;
                #line 467 
                ___x = (___x << 16) | (___x << ((unsigned long)8 * sizeof(___x) - (unsigned long)16));
                #line 467 
                ___x = ((___x >> 8) & 16711935U) | ((___x << 8) & 4278255360U);
                #line 467 
                ___x = ((___x >> 4) & 252645135U) | ((___x << 4) & 4042322160U);
                #line 467 
                ___x = ((___x >> 2) & 858993459U) | ((___x << 2) & 3435973836U);
                #line 467 
                ___x = ((___x >> 1) & 1431655765U) | ((___x << 1) & 2863311530U);
                #line 467 
                tmp_5 = ___x;
              }
              else 
                   #line 467 
                   tmp_5 = __bitrev32(__x);
              }
            #line 467 
            u32 nr = tmp_5 >> (32 - mcbitslog2);
            #line 469 
            mc_filter[nr >> 5] |= (unsigned int)(1 << (nr & 31U));
          }
          #line 466 
          __mptr_0 = (void *)ha->list.next;
          #line 466 
          ha = ((struct netdev_hw_addr *)__mptr_0);
        }
      }
  #line 473 
  dwxgmac2_set_mchash(ioaddr,(u32 *)(& mc_filter),mcbitslog2);
  #line 476 
  if ((unsigned int)dev->uc.count > hw->unicast_filter_entries) 
                                                                #line 477 
                                                                value |= 1U;
  else {
    #line 482 
    void *__mptr_1;
    #line 479 
    struct netdev_hw_addr *ha_0;
    #line 480 
    int reg = 1;
    #line 482 
    __mptr_1 = (void *)dev->uc.list.next;
    #line 482 
    ha_0 = ((struct netdev_hw_addr *)__mptr_1);
    #line 482 
    while (& ha_0->list != & dev->uc.list) {
      #line 482 
      void *__mptr_2;
      #line 483 
      dwxgmac2_set_umac_addr(hw,(unsigned char *)(& ha_0->addr),(unsigned int)reg);
      #line 484 
      reg ++;
      #line 482 
      __mptr_2 = (void *)ha_0->list.next;
      #line 482 
      ha_0 = ((struct netdev_hw_addr *)__mptr_2);
    }
    #line 487 
    while (reg <= 31) {
      #line 488 
      writel(0U,ioaddr + (unsigned long)((reg + 96) * 8));
      #line 489 
      writel(0U,ioaddr + (unsigned long)(reg * 8 + 772));
      #line 487 
      reg ++;
    }
  }
  #line 493 
  writel(value,ioaddr + 8U);
  #line 494 
  return;
}

#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_set_mac_loopback(void *ioaddr, bool enable)
{
  #line 498 
  u32 value = readl(ioaddr + 4U);
  #line 500 
  if ((int)enable != 0) 
                        #line 501 
                        value |= 1024U; else 
                                             #line 503 
                                             value &= 4294966271U;
  #line 505 
  writel(value,ioaddr + 4U);
  #line 506 
  return;
}

#line 508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static int dwxgmac2_rss_write_reg(void *ioaddr, bool is_key, int idx, u32 val)
{
  #line 519 
  int tmp_4;
  #line 515 
  unsigned int tmp;
  #line 511 
  u32 ctrl = 0U;
  #line 513 
  writel(val,ioaddr + 3212U);
  #line 514 
  ctrl = (unsigned int)(idx << 8) | ctrl;
  #line 515 
  if ((int)is_key != 0) 
                        #line 515 
                        tmp = 4U; else 
                                       #line 515 
                                       tmp = 0U;
  #line 515 
  ctrl = tmp | ctrl;
  #line 516 
  ctrl |= 1U;
  #line 517 
  writel(ctrl,ioaddr + 3208U);
  {
    #line 519 
    u64 __timeout_us = 10000ULL;
    #line 519 
    unsigned long __sleep_us = 100UL;
    #line 519 
    ;
    #line 519 
    ktime_t __timeout = ktime_add_us(ktime_get(),__timeout_us);
    #line 519 
    if (__sleep_us != 0UL) 
                           #line 519 
                           __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c",519,0);
    #line 519 
    while (1) {
      #line 519 
      ctrl = readl(ioaddr + 3208U);
      #line 519 
      if (((unsigned long)ctrl & 1UL) == 0UL) 
                                              #line 519 
                                              break;
      #line 519 
      if (__timeout_us != 0ULL) {
        #line 519 
        ;
        #line 519 
        if (ktime_compare(ktime_get(),__timeout) > 0) {
          #line 519 
          ctrl = readl(ioaddr + 3208U);
          #line 519 
          break;
        }
      }
      #line 519 
      if (__sleep_us != 0UL) 
                             #line 519 
                             usleep_range((__sleep_us >> 2) + 1UL,__sleep_us);
    }
    #line 519 
    if (((unsigned long)ctrl & 1UL) == 0UL) 
                                            #line 519 
                                            tmp_4 = 0; else 
                                                            #line 519 
                                                            tmp_4 = -110;
    }
  #line 519 
  return tmp_4;
}

#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static int dwxgmac2_rss_configure(struct mac_device_info *hw, struct stmmac_rss *cfg, u32 num_rxq)
{
  #line 527 
  u32 value;
  #line 527 
  u32 *key;
  #line 528 
  int i;
  #line 528 
  int ret;
  #line 526 
  void *ioaddr = hw->pcsr;
  #line 530 
  value = readl(ioaddr + 3200U);
  #line 531 
  if (cfg == (struct stmmac_rss *)0 || cfg->enable == 0) {
    #line 532 
    value &= 4294967294U;
    #line 533 
    writel(value,ioaddr + 3200U);
    #line 534 
    return 0;
  }
  #line 537 
  key = (u32 *)(& cfg->key);
  #line 538 
  i = 0;
  #line 538 
  while ((unsigned int)i <= 9U) {
    #line 539 
    ret = dwxgmac2_rss_write_reg(ioaddr,(_Bool)1,i,*(key + (unsigned long)i));
    #line 540 
    if (ret != 0) 
                  #line 541 
                  return ret;
    #line 538 
    i ++;
  }
  #line 544 
  i = 0;
  #line 544 
  while ((unsigned int)i <= 255U) {
    #line 545 
    ret = dwxgmac2_rss_write_reg(ioaddr,(_Bool)0,i,cfg->table[i]);
    #line 546 
    if (ret != 0) 
                  #line 547 
                  return ret;
    #line 544 
    i ++;
  }
  #line 550 
  i = 0;
  #line 550 
  while ((unsigned int)i < num_rxq) {
    #line 551 
    dwxgmac2_map_mtl_to_dma(hw,(unsigned int)i,128U);
    #line 550 
    i ++;
  }
  #line 553 
  value |= 15U;
  #line 554 
  writel(value,ioaddr + 3200U);
  #line 555 
  return 0;
}

#line 558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_update_vlan_hash(struct mac_device_info *hw, u32 hash, __le16 perfect_match, bool is_double)
{
  #line 561 
  void *ioaddr = hw->pcsr;
  #line 563 
  writel(hash,ioaddr + 88U);
  #line 565 
  if (hash != 0U) {
    #line 566 
    u32 value = readl(ioaddr + 8U);
    #line 568 
    value |= 65536U;
    #line 570 
    writel(value,ioaddr + 8U);
    #line 572 
    value = 33619968U;
    #line 573 
    if ((int)is_double != 0) {
      #line 574 
      value |= 67108864U;
      #line 575 
      value |= 262144U;
      #line 576 
      value |= 1048576U;
    }
    #line 579 
    writel(value,ioaddr + 80U);
  }
  else 
    #line 580 
    if ((unsigned int)perfect_match != 0U) {
      #line 581 
      u32 value_0 = readl(ioaddr + 8U);
      #line 583 
      value_0 |= 65536U;
      #line 585 
      writel(value_0,ioaddr + 8U);
      #line 587 
      value_0 = 65536U;
      #line 588 
      if ((int)is_double != 0) {
        #line 589 
        value_0 |= 67108864U;
        #line 590 
        value_0 |= 262144U;
        #line 591 
        value_0 |= 1048576U;
      }
      #line 594 
      writel((unsigned int)perfect_match | value_0,ioaddr + 80U);
    }
    else {
      #line 596 
      u32 value_1 = readl(ioaddr + 8U);
      #line 598 
      value_1 &= 4294901759U;
      #line 600 
      writel(value_1,ioaddr + 8U);
      #line 602 
      value_1 = readl(ioaddr + 80U);
      #line 604 
      value_1 &= 4261347327U;
      #line 605 
      value_1 &= 4227596287U;
      #line 606 
      value_1 &= 4293918719U;
      #line 607 
      value_1 &= 4294901760U;
      #line 609 
      writel(value_1,ioaddr + 80U);
    }
  #line 611 
  return;
}

#line 621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac3_log_error(struct net_device *ndev, u32 value, bool corr, char *module_name, struct dwxgmac3_error_desc *desc, unsigned long field_offset, struct stmmac_safety_stats *stats)
{
  #line 627 
  unsigned long loc;
  #line 627 
  unsigned long mask;
  #line 629 
  unsigned long *ptr;
  #line 628 
  u8 *bptr = (u8 *)stats;
  #line 631 
  ptr = (unsigned long *)(bptr + field_offset);
  #line 633 
  mask = (unsigned long)value;
  #line 634 
  loc = cif_find_first_bit_1(& mask,32UL);
  #line 634 
  while (loc <= 31UL) {
    {
      #line 635 
      char *tmp;
      #line 635 
      ;
      #line 635 
      ;
      #line 635 
      ;
      #line 635 
      if ((int)corr != 0) 
                          #line 635 
                          tmp = (char *)"correctable"; else 
                                                            #line 635 
                                                            tmp = (char *)"uncorrectable";
      #line 635 
      ;
      #line 635 
      netdev_err(ndev,(char *)"Found %s error in %s: \'%s: %s\'\n",tmp,module_name,(desc + loc)->desc,(desc + loc)->detailed_desc);
      #line 640 
      (*(ptr + loc)) ++;
    }
    #line 634 
    loc = cif_find_next_bit_1(& mask,32UL,loc + 1UL);
  }
  #line 642 
  return;
}

#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static struct dwxgmac3_error_desc dwxgmac3_mac_errors[32U] = {{.valid = (_Bool)1, .desc = (char *)"ATPES", .detailed_desc = (char *)"Application Transmit Interface Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"DPES", .detailed_desc = (char *)"Descriptor Cache Data Path Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"TPES", .detailed_desc = (char *)"TSO Data Path Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"TSOPES", .detailed_desc = (char *)"TSO Header Data Path Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"MTPES", .detailed_desc = (char *)"MTL Data Path Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"MTSPES", .detailed_desc = (char *)"MTL TX Status Data Path Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"MTBUPES", .detailed_desc = (char *)"MAC TBU Data Path Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"MTFCPES", .detailed_desc = (char *)"MAC TFC Data Path Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"ARPES", .detailed_desc = (char *)"Application Receive Interface Data Path Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"MRWCPES", .detailed_desc = (char *)"MTL RWC Data Path Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"MRRCPES", .detailed_desc = (char *)"MTL RCC Data Path Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"CWPES", .detailed_desc = (char *)"CSR Write Data Path Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"ASRPES", .detailed_desc = (char *)"AXI Slave Read Data Path Parity Check Error"}, {.valid = (_Bool)1, .desc = (char *)"TTES", .detailed_desc = (char *)"TX FSM Timeout Error"}, {.valid = (_Bool)1, .desc = (char *)"RTES", .detailed_desc = (char *)"RX FSM Timeout Error"}, {.valid = (_Bool)1, .desc = (char *)"CTES", .detailed_desc = (char *)"CSR FSM Timeout Error"}, {.valid = (_Bool)1, .desc = (char *)"ATES", .detailed_desc = (char *)"APP FSM Timeout Error"}, {.valid = (_Bool)1, .desc = (char *)"PTES", .detailed_desc = (char *)"PTP FSM Timeout Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.valid = (_Bool)1, .desc = (char *)"MSTTES", .detailed_desc = (char *)"Master Read/Write Timeout Error"}, {.valid = (_Bool)1, .desc = (char *)"SLVTES", .detailed_desc = (char *)"Slave Read/Write Timeout Error"}, {.valid = (_Bool)1, .desc = (char *)"ATITES", .detailed_desc = (char *)"Application Timeout on ATI Interface Error"}, {.valid = (_Bool)1, .desc = (char *)"ARITES", .detailed_desc = (char *)"Application Timeout on ARI Interface Error"}, {.valid = (_Bool)1, .desc = (char *)"FSMPES", .detailed_desc = (char *)"FSM State Parity Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.valid = (_Bool)1, .desc = (char *)"CPI", .detailed_desc = (char *)"Control Register Parity Check Error"}};
#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac3_handle_mac_err(struct net_device *ndev, void *ioaddr, bool correctable, struct stmmac_safety_stats *stats)
{
  #line 683 
  u32 value;
  #line 685 
  value = readl(ioaddr + 336U);
  #line 686 
  writel(value,ioaddr + 336U);
  #line 688 
  dwxgmac3_log_error(ndev,value,(_Bool)((bool)((int)correctable) != 0),(char *)"MAC",(struct dwxgmac3_error_desc *)(& dwxgmac3_mac_errors),0UL,stats);
  #line 690 
  return;
}

#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static struct dwxgmac3_error_desc dwxgmac3_mtl_errors[32U] = {{.valid = (_Bool)1, .desc = (char *)"TXCES", .detailed_desc = (char *)"MTL TX Memory Error"}, {.valid = (_Bool)1, .desc = (char *)"TXAMS", .detailed_desc = (char *)"MTL TX Memory Address Mismatch Error"}, {.valid = (_Bool)1, .desc = (char *)"TXUES", .detailed_desc = (char *)"MTL TX Memory Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.valid = (_Bool)1, .desc = (char *)"RXCES", .detailed_desc = (char *)"MTL RX Memory Error"}, {.valid = (_Bool)1, .desc = (char *)"RXAMS", .detailed_desc = (char *)"MTL RX Memory Address Mismatch Error"}, {.valid = (_Bool)1, .desc = (char *)"RXUES", .detailed_desc = (char *)"MTL RX Memory Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.valid = (_Bool)1, .desc = (char *)"ECES", .detailed_desc = (char *)"MTL EST Memory Error"}, {.valid = (_Bool)1, .desc = (char *)"EAMS", .detailed_desc = (char *)"MTL EST Memory Address Mismatch Error"}, {.valid = (_Bool)1, .desc = (char *)"EUES", .detailed_desc = (char *)"MTL EST Memory Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.valid = (_Bool)1, .desc = (char *)"RPCES", .detailed_desc = (char *)"MTL RX Parser Memory Error"}, {.valid = (_Bool)1, .desc = (char *)"RPAMS", .detailed_desc = (char *)"MTL RX Parser Memory Address Mismatch Error"}, {.valid = (_Bool)1, .desc = (char *)"RPUES", .detailed_desc = (char *)"MTL RX Parser Memory Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac3_handle_mtl_err(struct net_device *ndev, void *ioaddr, bool correctable, struct stmmac_safety_stats *stats)
{
  #line 731 
  u32 value;
  #line 733 
  value = readl(ioaddr + 4300U);
  #line 734 
  writel(value,ioaddr + 4300U);
  #line 736 
  dwxgmac3_log_error(ndev,value,(_Bool)((bool)((int)correctable) != 0),(char *)"MTL",(struct dwxgmac3_error_desc *)(& dwxgmac3_mtl_errors),256UL,stats);
  #line 738 
  return;
}

#line 740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static struct dwxgmac3_error_desc dwxgmac3_dma_errors[32U] = {{.valid = (_Bool)1, .desc = (char *)"TCES", .detailed_desc = (char *)"DMA TSO Memory Error"}, {.valid = (_Bool)1, .desc = (char *)"TAMS", .detailed_desc = (char *)"DMA TSO Memory Address Mismatch Error"}, {.valid = (_Bool)1, .desc = (char *)"TUES", .detailed_desc = (char *)"DMA TSO Memory Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.valid = (_Bool)1, .desc = (char *)"DCES", .detailed_desc = (char *)"DMA DCACHE Memory Error"}, {.valid = (_Bool)1, .desc = (char *)"DAMS", .detailed_desc = (char *)"DMA DCACHE Address Mismatch Error"}, {.valid = (_Bool)1, .desc = (char *)"DUES", .detailed_desc = (char *)"DMA DCACHE Memory Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}, {.desc = (char *)"UNKNOWN", .detailed_desc = (char *)"Unknown Error"}};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac3_handle_dma_err(struct net_device *ndev, void *ioaddr, bool correctable, struct stmmac_safety_stats *stats)
{
  #line 779 
  u32 value;
  #line 781 
  value = readl(ioaddr + 12396U);
  #line 782 
  writel(value,ioaddr + 12396U);
  #line 784 
  dwxgmac3_log_error(ndev,value,(_Bool)((bool)((int)correctable) != 0),(char *)"DMA",(struct dwxgmac3_error_desc *)(& dwxgmac3_dma_errors),512UL,stats);
  #line 786 
  return;
}

#line 788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static int dwxgmac3_safety_feat_config(void *ioaddr, unsigned int asp)
{
  #line 790 
  u32 value;
  #line 792 
  if (asp == 0U) 
                 #line 793 
                 return -22;
  #line 796 
  writel(0U,ioaddr + 4288U);
  #line 799 
  value = readl(ioaddr + 4296U);
  #line 800 
  value |= 4096U;
  #line 801 
  value |= 256U;
  #line 802 
  value |= 16U;
  #line 803 
  value |= 1U;
  #line 804 
  writel(value,ioaddr + 4296U);
  #line 807 
  value = readl(ioaddr + 12392U);
  #line 808 
  value |= 2U;
  #line 809 
  value |= 1U;
  #line 810 
  writel(value,ioaddr + 12392U);
  #line 813 
  if (asp <= 1U) 
                 #line 814 
                 return 0;
  #line 817 
  value = readl(ioaddr + 344U);
  #line 818 
  value |= 2U;
  #line 819 
  value |= 1U;
  #line 820 
  writel(value,ioaddr + 344U);
  #line 822 
  return 0;
}

#line 825  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static int dwxgmac3_safety_feat_irq_status(struct net_device *ndev, void *ioaddr, unsigned int asp, struct stmmac_safety_stats *stats)
{
  #line 830 
  bool err;
  #line 830 
  bool corr;
  #line 831 
  u32 mtl;
  #line 831 
  u32 dma;
  #line 832 
  int ret = 0;
  #line 834 
  if (asp == 0U) 
                 #line 835 
                 return -22;
  #line 837 
  mtl = readl(ioaddr + 4292U);
  #line 838 
  dma = readl(ioaddr + 12388U);
  #line 840 
  err = (_Bool)((((unsigned long)mtl & 2147483648UL) != 0UL || ((unsigned long)dma & 2147483648UL) != 0UL) != 0);
  #line 841 
  corr = (_Bool)0;
  #line 842 
  if ((int)err != 0) {
    #line 843 
    dwxgmac3_handle_mac_err(ndev,ioaddr,(_Bool)((bool)((int)corr) != 0),stats);
    #line 844 
    ret = ! corr | ret;
  }
  #line 847 
  err = (_Bool)((((unsigned long)mtl & 3UL) != 0UL || ((unsigned long)dma & 805306368UL) != 0UL) != 0);
  #line 849 
  corr = (_Bool)((((unsigned long)mtl & 1UL) != 0UL || ((unsigned long)dma & 268435456UL) != 0UL) != 0);
  #line 850 
  if ((int)err != 0) {
    #line 851 
    dwxgmac3_handle_mtl_err(ndev,ioaddr,(_Bool)((bool)((int)corr) != 0),stats);
    #line 852 
    ret = ! corr | ret;
  }
  #line 855 
  err = (_Bool)(((unsigned long)dma & 3UL) != 0UL);
  #line 856 
  corr = (_Bool)(((unsigned long)dma & 1UL) != 0UL);
  #line 857 
  if ((int)err != 0) {
    #line 858 
    dwxgmac3_handle_dma_err(ndev,ioaddr,(_Bool)((bool)((int)corr) != 0),stats);
    #line 859 
    ret = ! corr | ret;
  }
  #line 862 
  return ret;
}

#line 867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static struct dwxgmac3_error dwxgmac3_all_errors[3U] = {{.desc = (struct dwxgmac3_error_desc *)(& dwxgmac3_mac_errors)}, {.desc = (struct dwxgmac3_error_desc *)(& dwxgmac3_mtl_errors)}, {.desc = (struct dwxgmac3_error_desc *)(& dwxgmac3_dma_errors)}};
#line 873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static int dwxgmac3_safety_feat_dump(struct stmmac_safety_stats *stats, int index, unsigned long *count, char **desc)
{
  #line 877 
  int module = index / 32;
  #line 877 
  int offset = index % 32;
  #line 878 
  unsigned long *ptr = (unsigned long *)stats;
  #line 880 
  if ((unsigned int)module > 2U) 
                                 #line 881 
                                 return -22;
  #line 882 
  if (! (dwxgmac3_all_errors[module].desc + (unsigned long)offset)->valid) 
    #line 883 
    return -22;
  #line 884 
  if (count != (unsigned long *)0UL) 
                                     #line 885 
                                     *count = *(ptr + (unsigned long)index);
  #line 886 
  if (desc != (char **)0) 
                          #line 887 
                          *desc = (dwxgmac3_all_errors[module].desc + (unsigned long)offset)->desc;
  #line 888 
  return 0;
}

#line 891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static int dwxgmac3_rxp_disable(void *ioaddr)
{
  #line 893 
  u32 val = readl(ioaddr + 4096U);
  #line 895 
  val &= 4294934527U;
  #line 896 
  writel(val,ioaddr + 4096U);
  #line 898 
  return 0;
}

#line 901  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac3_rxp_enable(void *ioaddr)
{
  #line 903 
  u32 val;
  #line 905 
  val = readl(ioaddr + 4096U);
  #line 906 
  val |= 32768U;
  #line 907 
  writel(val,ioaddr + 4096U);
  #line 908 
  return;
}

#line 910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static int dwxgmac3_rxp_update_single_entry(void *ioaddr, struct stmmac_tc_entry *entry, int pos)
{
  #line 914 
  int ret;
  #line 914 
  int i;
  #line 916 
  i = 0;
  #line 916 
  while ((unsigned int)i <= 3U) {
    {
      #line 943 
      int tmp_9;
      #line 921 
      int tmp_3;
      #line 918 
      u32 val;
      #line 917 
      int real_pos = (int)((unsigned long)pos * (unsigned long)4U + (unsigned long)i);
      {
        #line 921 
        u64 __timeout_us = 10000ULL;
        #line 921 
        unsigned long __sleep_us = 1UL;
        #line 921 
        ;
        #line 921 
        ktime_t __timeout = ktime_add_us(ktime_get(),__timeout_us);
        #line 921 
        if (__sleep_us != 0UL) 
                               #line 921 
                               __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c",921,0);
        #line 921 
        while (1) {
          #line 921 
          val = readl(ioaddr + 4272U);
          #line 921 
          if (((unsigned long)val & 2147483648UL) == 0UL) 
                                                          #line 921 
                                                          break;
          #line 921 
          if (__timeout_us != 0ULL) {
            #line 921 
            ;
            #line 921 
            if (ktime_compare(ktime_get(),__timeout) > 0) {
              #line 921 
              val = readl(ioaddr + 4272U);
              #line 921 
              break;
            }
          }
          #line 921 
          if (__sleep_us != 0UL) 
                                 #line 921 
                                 usleep_range((__sleep_us >> 2) + 1UL,__sleep_us);
        }
        #line 921 
        if (((unsigned long)val & 2147483648UL) == 0UL) 
                                                        #line 921 
                                                        tmp_3 = 0; else 
                                                                    #line 921 
                                                                    tmp_3 = -110;
        }
      #line 921 
      ret = tmp_3;
      #line 923 
      if (ret != 0) 
                    #line 924 
                    return ret;
      #line 927 
      val = *((u32 *)(& entry->val) + (unsigned long)i);
      #line 928 
      writel(val,ioaddr + 4276U);
      #line 931 
      val = (unsigned int)real_pos & 1023U;
      #line 932 
      writel(val,ioaddr + 4272U);
      #line 935 
      val |= 65536U;
      #line 936 
      writel(val,ioaddr + 4272U);
      #line 939 
      val |= 2147483648U;
      #line 940 
      writel(val,ioaddr + 4272U);
      {
        #line 943 
        u64 __timeout_us_0 = 10000ULL;
        #line 943 
        unsigned long __sleep_us_0 = 1UL;
        #line 943 
        ;
        #line 943 
        ktime_t __timeout_0 = ktime_add_us(ktime_get(),__timeout_us_0);
        #line 943 
        if (__sleep_us_0 != 0UL) 
                                 #line 943 
                                 __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c",943,0);
        #line 943 
        while (1) {
          #line 943 
          val = readl(ioaddr + 4272U);
          #line 943 
          if (((unsigned long)val & 2147483648UL) == 0UL) 
                                                          #line 943 
                                                          break;
          #line 943 
          if (__timeout_us_0 != 0ULL) {
            #line 943 
            ;
            #line 943 
            if (ktime_compare(ktime_get(),__timeout_0) > 0) {
              #line 943 
              val = readl(ioaddr + 4272U);
              #line 943 
              break;
            }
          }
          #line 943 
          if (__sleep_us_0 != 0UL) 
                                   #line 943 
                                   usleep_range((__sleep_us_0 >> 2) + 1UL,__sleep_us_0);
        }
        #line 943 
        if (((unsigned long)val & 2147483648UL) == 0UL) 
                                                        #line 943 
                                                        tmp_9 = 0; else 
                                                                    #line 943 
                                                                    tmp_9 = -110;
        }
      #line 943 
      ret = tmp_9;
      #line 945 
      if (ret != 0) 
                    #line 946 
                    return ret;
    }
    #line 916 
    i ++;
  }
  #line 949 
  return 0;
}

#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static struct stmmac_tc_entry *dwxgmac3_rxp_get_next_entry(struct stmmac_tc_entry *entries, unsigned int count, u32 curr_prio)
{
  #line 956 
  struct stmmac_tc_entry *entry;
  #line 958 
  int i;
  #line 958 
  int min_prio_idx;
  #line 957 
  u32 min_prio = 4294967295U;
  #line 959 
  bool found = (_Bool)0;
  #line 961 
  i = (int)(count + 4294967295U);
  #line 961 
  while (i >= 0) {
    #line 962 
    entry = entries + (unsigned long)i;
    #line 965 
    if (! entry->in_use) 
                         #line 966 
                         goto __Cont;
    #line 968 
    if ((int)entry->in_hw != 0) 
                                #line 969 
                                goto __Cont;
    #line 971 
    if ((int)entry->is_last != 0) 
                                  #line 972 
                                  goto __Cont;
    #line 974 
    if ((int)entry->is_frag != 0) 
                                  #line 975 
                                  goto __Cont;
    #line 977 
    if (entry->prio < curr_prio) 
                                 #line 978 
                                 goto __Cont;
    #line 980 
    if (entry->prio < min_prio) {
      #line 981 
      min_prio = entry->prio;
      #line 982 
      min_prio_idx = i;
      #line 983 
      found = (_Bool)1;
    }
    #line 961 
    __Cont: 
            #line 961 
    i --;
  }
  #line 987 
  if ((int)found != 0) 
                       #line 988 
                       return entries + (unsigned long)min_prio_idx;
  #line 989 
  return (struct stmmac_tc_entry *)0;
}

#line 992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static int dwxgmac3_rxp_config(void *ioaddr, struct stmmac_tc_entry *entries, unsigned int count)
{
  #line 996 
  struct stmmac_tc_entry *entry;
  #line 996 
  struct stmmac_tc_entry *frag;
  #line 997 
  int i;
  #line 997 
  int ret;
  #line 999 
  u32 old_val;
  #line 999 
  u32 val;
  #line 997 
  int nve = 0;
  #line 998 
  u32 curr_prio = 0U;
  #line 1002 
  old_val = readl(ioaddr + 4U);
  #line 1003 
  val = old_val & 4294967294U;
  #line 1004 
  writel(val,ioaddr + 4U);
  #line 1007 
  ret = dwxgmac3_rxp_disable(ioaddr);
  #line 1008 
  if (ret != 0) 
                #line 1009 
                goto re_enable;
  #line 1012 
  i = 0;
  #line 1012 
  while ((unsigned int)i < count) {
    #line 1013 
    entry = entries + (unsigned long)i;
    #line 1014 
    entry->in_hw = (_Bool)0;
    #line 1012 
    i ++;
  }
  #line 1018 
  while (1) {
    {
      #line 1038 
      int tmp;
      #line 1019 
      entry = dwxgmac3_rxp_get_next_entry(entries,count,curr_prio);
      #line 1020 
      if (entry == (struct stmmac_tc_entry *)0) 
                                                #line 1021 
                                                break;
      #line 1023 
      curr_prio = entry->prio;
      #line 1024 
      frag = (struct stmmac_tc_entry *)entry->frag_ptr;
      #line 1027 
      if (frag != (struct stmmac_tc_entry *)0) {
        #line 1028 
        entry->val.af = (unsigned char)0U;
        #line 1029 
        entry->val.rf = (unsigned char)0U;
        #line 1030 
        entry->val.nc = (unsigned char)1U;
        #line 1031 
        entry->val.ok_index = (unsigned char)((unsigned int)((unsigned char)nve) + 2U);
      }
      #line 1034 
      ret = dwxgmac3_rxp_update_single_entry(ioaddr,entry,nve);
      #line 1035 
      if (ret != 0) 
                    #line 1036 
                    goto re_enable;
      #line 1038 
      tmp = nve;
      #line 1038 
      nve ++;
      #line 1038 
      entry->table_pos = (unsigned int)tmp;
      #line 1039 
      entry->in_hw = (_Bool)1;
      #line 1041 
      if (frag != (struct stmmac_tc_entry *)0 && ! frag->in_hw) {
        #line 1045 
        int tmp_0;
        #line 1042 
        ret = dwxgmac3_rxp_update_single_entry(ioaddr,frag,nve);
        #line 1043 
        if (ret != 0) 
                      #line 1044 
                      goto re_enable;
        #line 1045 
        tmp_0 = nve;
        #line 1045 
        nve ++;
        #line 1045 
        frag->table_pos = (unsigned int)tmp_0;
        #line 1046 
        frag->in_hw = (_Bool)1;
      }
    }
  }
  #line 1050 
  if (nve == 0) 
                #line 1051 
                goto re_enable;
  #line 1054 
  i = 0;
  #line 1054 
  while ((unsigned int)i < count) {
    {
      #line 1063 
      int tmp_1;
      #line 1055 
      entry = entries + (unsigned long)i;
      #line 1056 
      if (! entry->is_last) 
                            #line 1057 
                            goto __Cont;
      #line 1059 
      ret = dwxgmac3_rxp_update_single_entry(ioaddr,entry,nve);
      #line 1060 
      if (ret != 0) 
                    #line 1061 
                    goto re_enable;
      #line 1063 
      tmp_1 = nve;
      #line 1063 
      nve ++;
      #line 1063 
      entry->table_pos = (unsigned int)tmp_1;
    }
    #line 1054 
    __Cont: 
            #line 1054 
    i ++;
  }
  #line 1067 
  val = (unsigned int)(nve << 16) & 16711680U;
  #line 1068 
  val = ((unsigned int)nve & 255U) | val;
  #line 1069 
  writel(val,ioaddr + 4256U);
  #line 1072 
  dwxgmac3_rxp_enable(ioaddr);
  #line 1074 
  re_enable: 
             #line 1074 
  ;
  #line 1076 
  writel(old_val,ioaddr + 4U);
  #line 1077 
  return ret;
}

#line 1080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static int dwxgmac2_get_mac_tx_timestamp(struct mac_device_info *hw, u64 *ts)
{
  #line 1085 
  int tmp_3;
  #line 1083 
  u32 value;
  #line 1082 
  void *ioaddr = hw->pcsr;
  {
    #line 1085 
    u64 __timeout_us = 10000ULL;
    #line 1085 
    unsigned long __delay_us = 100UL;
    #line 1085 
    ;
    #line 1085 
    ktime_t __timeout = ktime_add_us(ktime_get(),__timeout_us);
    #line 1085 
    while (1) {
      #line 1085 
      value = readl(ioaddr + 3360U);
      #line 1085 
      if (((unsigned long)value & 32768UL) != 0UL) 
                                                   #line 1085 
                                                   break;
      #line 1085 
      if (__timeout_us != 0ULL) {
        #line 1085 
        ;
        #line 1085 
        if (ktime_compare(ktime_get(),__timeout) > 0) {
          #line 1085 
          value = readl(ioaddr + 3360U);
          #line 1085 
          break;
        }
      }
      #line 1085 
      if (__delay_us != 0UL) 
        #line 1085 
        if (0 != 0) 
          #line 1085 
          if (__delay_us > 19999UL) 
                                    #line 1085 
                                    __bad_udelay(); else 
                                                         #line 1085 
                                                         __const_udelay(__delay_us * 4295UL);
        else 
             #line 1085 
             __udelay(__delay_us);
    }
    #line 1085 
    if (((unsigned long)value & 32768UL) != 0UL) 
                                                 #line 1085 
                                                 tmp_3 = 0; else 
                                                                 #line 1085 
                                                                 tmp_3 = -110;
    }
  #line 1085 
  if (tmp_3 != 0) 
                  #line 1087 
                  return -16;
  #line 1089 
  *ts = (unsigned long long)readl(ioaddr + 3376U) & 2147483647ULL;
  #line 1090 
  *ts += (unsigned long long)readl(ioaddr + 3380U) * 1000000000ULL;
  #line 1091 
  return 0;
}

#line 1094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static int dwxgmac2_flex_pps_config(void *ioaddr, int index, struct stmmac_pps_cfg *cfg, bool enable, u32 sub_second_inc, u32 systime_flags)
{
  #line 1100 
  u64 period;
  #line 1098 
  u32 tnsec = readl(ioaddr + (unsigned long)(index * 16 + 3460));
  #line 1099 
  u32 val = readl(ioaddr + 3440U);
  #line 1102 
  if (! cfg->available) 
                        #line 1103 
                        return -22;
  #line 1104 
  if (((unsigned long)tnsec & 2147483648UL) != 0UL) 
                                                    #line 1105 
                                                    return -16;
  #line 1106 
  if (sub_second_inc == 0U || systime_flags == 0U) 
                                                   #line 1107 
                                                   return -22;
  #line 1109 
  val = ~ (- ((unsigned int)(1UL << index * 8)) & (unsigned int)(18446744073709551615UL >> (7 - index) * 8)) & val;
  #line 1111 
  if (! enable) {
    #line 1112 
    val = ((- ((unsigned int)(1UL << index * 8)) & (unsigned int)(18446744073709551615UL >> (60 - index * 8))) & (unsigned int)(5 << index * 8)) | val;
    #line 1113 
    writel(val,ioaddr + 3440U);
    #line 1114 
    return 0;
  }
  #line 1117 
  val = ((- ((unsigned int)(1UL << index * 8)) & (unsigned int)(18446744073709551615UL >> (60 - index * 8))) & (unsigned int)(2 << index * 8)) | val;
  #line 1118 
  val = ((- ((unsigned int)(1UL << ((index + 1) * 8 + -3))) & (unsigned int)(18446744073709551615UL >> (65 - (index + 1) * 8))) & (unsigned int)(2 << ((index + 1) * 8 + -3))) | val;
  #line 1119 
  val |= 16U;
  #line 1121 
  writel((unsigned int)cfg->start.tv_sec,ioaddr + (unsigned long)((index + 216) * 16));
  #line 1123 
  if (((unsigned long)systime_flags & 512UL) == 0UL) 
                                                     #line 1124 
                                                     cfg->start.tv_nsec = (cfg->start.tv_nsec * 1000L) / 465L;
  #line 1125 
  writel((unsigned int)cfg->start.tv_nsec,ioaddr + (unsigned long)(index * 16 + 3460));
  #line 1127 
  period = (unsigned long long)(cfg->period.tv_sec * 1000000000LL);
  #line 1128 
  period = (unsigned long long)cfg->period.tv_nsec + period;
  {
    #line 1130 
    uint32_t __rem;
    #line 1130 
    uint32_t __base = sub_second_inc;
    #line 1130 
    __rem = (unsigned int)(period % (unsigned long long)__base);
    #line 1130 
    period /= (unsigned long long)__base;
    #line 1130 
    uint32_t tmp_2 = __rem;
  }
  #line 1132 
  if (period <= 1ULL) 
                      #line 1133 
                      return -22;
  #line 1135 
  writel((unsigned int)period + 4294967295U,ioaddr + (unsigned long)(index * 16 + 3464));
  #line 1137 
  period >>= 1;
  #line 1138 
  if (period <= 1ULL) 
                      #line 1139 
                      return -22;
  #line 1141 
  writel((unsigned int)period + 4294967295U,ioaddr + (unsigned long)(index * 16 + 3468));
  #line 1144 
  writel(val,ioaddr + 3440U);
  #line 1145 
  return 0;
}

#line 1148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_sarc_configure(void *ioaddr, int val)
{
  #line 1150 
  u32 value = readl(ioaddr);
  #line 1152 
  value &= 4287627263U;
  #line 1153 
  value = (unsigned int)(val << 20) | value;
  #line 1155 
  writel(value,ioaddr);
  #line 1156 
  return;
}

#line 1158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_enable_vlan(struct mac_device_info *hw, u32 type)
{
  #line 1161 
  u32 value;
  #line 1160 
  void *ioaddr = hw->pcsr;
  #line 1163 
  value = readl(ioaddr + 96U);
  #line 1164 
  value |= 1048576U;
  #line 1165 
  value |= 524288U;
  #line 1166 
  value &= 4294770687U;
  #line 1167 
  value = ((type << 16) & 196608U) | value;
  #line 1168 
  writel(value,ioaddr + 96U);
  #line 1169 
  return;
}

#line 1171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static int dwxgmac2_filter_wait(struct mac_device_info *hw)
{
  #line 1176 
  int tmp_3;
  #line 1174 
  u32 value;
  #line 1173 
  void *ioaddr = hw->pcsr;
  {
    #line 1176 
    u64 __timeout_us = 10000ULL;
    #line 1176 
    unsigned long __sleep_us = 100UL;
    #line 1176 
    ;
    #line 1176 
    ktime_t __timeout = ktime_add_us(ktime_get(),__timeout_us);
    #line 1176 
    if (__sleep_us != 0UL) 
                           #line 1176 
                           __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c",1176,0);
    #line 1176 
    while (1) {
      #line 1176 
      value = readl(ioaddr + 3072U);
      #line 1176 
      if (((unsigned long)value & 1UL) == 0UL) 
                                               #line 1176 
                                               break;
      #line 1176 
      if (__timeout_us != 0ULL) {
        #line 1176 
        ;
        #line 1176 
        if (ktime_compare(ktime_get(),__timeout) > 0) {
          #line 1176 
          value = readl(ioaddr + 3072U);
          #line 1176 
          break;
        }
      }
      #line 1176 
      if (__sleep_us != 0UL) 
                             #line 1176 
                             usleep_range((__sleep_us >> 2) + 1UL,__sleep_us);
    }
    #line 1176 
    if (((unsigned long)value & 1UL) == 0UL) 
                                             #line 1176 
                                             tmp_3 = 0; else 
                                                             #line 1176 
                                                             tmp_3 = -110;
    }
  #line 1176 
  if (tmp_3 != 0) 
                  #line 1178 
                  return -16;
  #line 1179 
  return 0;
}

#line 1182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static int dwxgmac2_filter_read(struct mac_device_info *hw, u32 filter_no, u8 reg, u32 *data)
{
  #line 1186 
  u32 value;
  #line 1187 
  int ret;
  #line 1185 
  void *ioaddr = hw->pcsr;
  #line 1189 
  ret = dwxgmac2_filter_wait(hw);
  #line 1190 
  if (ret != 0) 
                #line 1191 
                return ret;
  #line 1193 
  value = ((filter_no << 4) | (unsigned int)reg) << 8;
  #line 1194 
  value |= 3U;
  #line 1195 
  writel(value,ioaddr + 3072U);
  #line 1197 
  ret = dwxgmac2_filter_wait(hw);
  #line 1198 
  if (ret != 0) 
                #line 1199 
                return ret;
  #line 1201 
  *data = readl(ioaddr + 3076U);
  #line 1202 
  return 0;
}

#line 1205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static int dwxgmac2_filter_write(struct mac_device_info *hw, u32 filter_no, u8 reg, u32 data)
{
  #line 1209 
  u32 value;
  #line 1210 
  int ret;
  #line 1208 
  void *ioaddr = hw->pcsr;
  #line 1212 
  ret = dwxgmac2_filter_wait(hw);
  #line 1213 
  if (ret != 0) 
                #line 1214 
                return ret;
  #line 1216 
  writel(data,ioaddr + 3076U);
  #line 1218 
  value = ((filter_no << 4) | (unsigned int)reg) << 8;
  #line 1219 
  value |= 1U;
  #line 1220 
  writel(value,ioaddr + 3072U);
  #line 1222 
  return dwxgmac2_filter_wait(hw);
}

#line 1225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static int dwxgmac2_config_l3_filter(struct mac_device_info *hw, u32 filter_no, bool en, bool ipv6, bool sa, bool inv, u32 match)
{
  #line 1230 
  u32 value;
  #line 1231 
  int ret;
  #line 1229 
  void *ioaddr = hw->pcsr;
  #line 1233 
  value = readl(ioaddr + 8U);
  #line 1234 
  value |= 1048576U;
  #line 1235 
  writel(value,ioaddr + 8U);
  #line 1237 
  ret = dwxgmac2_filter_read(hw,filter_no,(unsigned char)0,& value);
  #line 1238 
  if (ret != 0) 
                #line 1239 
                return ret;
  #line 1242 
  if ((int)ipv6 != 0) {
    #line 1243 
    value |= 1U;
    #line 1244 
    value &= 4294967283U;
    #line 1245 
    value &= 4294967247U;
    #line 1246 
    if ((int)sa != 0) {
      #line 1247 
      value |= 4U;
      #line 1248 
      if ((int)inv != 0) 
                         #line 1249 
                         value |= 8U;
    }
    else {
      #line 1251 
      value |= 16U;
      #line 1252 
      if ((int)inv != 0) 
                         #line 1253 
                         value |= 32U;
    }
  }
  else {
    #line 1256 
    value &= 4294967294U;
    #line 1257 
    if ((int)sa != 0) {
      #line 1258 
      value |= 4U;
      #line 1259 
      if ((int)inv != 0) 
                         #line 1260 
                         value |= 8U;
    }
    else {
      #line 1262 
      value |= 16U;
      #line 1263 
      if ((int)inv != 0) 
                         #line 1264 
                         value |= 32U;
    }
  }
  #line 1268 
  ret = dwxgmac2_filter_write(hw,filter_no,(unsigned char)0,value);
  #line 1269 
  if (ret != 0) 
                #line 1270 
                return ret;
  #line 1272 
  if ((int)sa != 0) {
    #line 1273 
    ret = dwxgmac2_filter_write(hw,filter_no,(unsigned char)4,match);
    #line 1274 
    if (ret != 0) 
                  #line 1275 
                  return ret;
  }
  else {
    #line 1277 
    ret = dwxgmac2_filter_write(hw,filter_no,(unsigned char)5,match);
    #line 1278 
    if (ret != 0) 
                  #line 1279 
                  return ret;
  }
  #line 1282 
  if (! en) {
    #line 1283 
    return dwxgmac2_filter_write(hw,filter_no,(unsigned char)0,0U);
  }
  #line 1285 
  return 0;
}

#line 1288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static int dwxgmac2_config_l4_filter(struct mac_device_info *hw, u32 filter_no, bool en, bool udp, bool sa, bool inv, u32 match)
{
  #line 1293 
  u32 value;
  #line 1294 
  int ret;
  #line 1292 
  void *ioaddr = hw->pcsr;
  #line 1296 
  value = readl(ioaddr + 8U);
  #line 1297 
  value |= 1048576U;
  #line 1298 
  writel(value,ioaddr + 8U);
  #line 1300 
  ret = dwxgmac2_filter_read(hw,filter_no,(unsigned char)0,& value);
  #line 1301 
  if (ret != 0) 
                #line 1302 
                return ret;
  #line 1304 
  if ((int)udp != 0) 
                     #line 1305 
                     value |= 65536U; else 
                                           #line 1307 
                                           value &= 4294901759U;
  #line 1310 
  value &= 4294180863U;
  #line 1311 
  value &= 4291821567U;
  #line 1312 
  if ((int)sa != 0) {
    #line 1313 
    value |= 262144U;
    #line 1314 
    if ((int)inv != 0) 
                       #line 1315 
                       value |= 524288U;
  }
  else {
    #line 1317 
    value |= 1048576U;
    #line 1318 
    if ((int)inv != 0) 
                       #line 1319 
                       value |= 2097152U;
  }
  #line 1322 
  ret = dwxgmac2_filter_write(hw,filter_no,(unsigned char)0,value);
  #line 1323 
  if (ret != 0) 
                #line 1324 
                return ret;
  #line 1326 
  if ((int)sa != 0) {
    #line 1327 
    value = match & 65535U;
    #line 1329 
    ret = dwxgmac2_filter_write(hw,filter_no,(unsigned char)1,value);
    #line 1330 
    if (ret != 0) 
                  #line 1331 
                  return ret;
  }
  else {
    #line 1333 
    value = match << 16;
    #line 1335 
    ret = dwxgmac2_filter_write(hw,filter_no,(unsigned char)1,value);
    #line 1336 
    if (ret != 0) 
                  #line 1337 
                  return ret;
  }
  #line 1340 
  if (! en) {
    #line 1341 
    return dwxgmac2_filter_write(hw,filter_no,(unsigned char)0,0U);
  }
  #line 1343 
  return 0;
}

#line 1346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
static void dwxgmac2_set_arp_offload(struct mac_device_info *hw, bool en, u32 addr)
{
  #line 1350 
  u32 value;
  #line 1349 
  void *ioaddr = hw->pcsr;
  #line 1352 
  writel(addr,ioaddr + 3088U);
  #line 1354 
  value = readl(ioaddr + 4U);
  #line 1355 
  if ((int)en != 0) 
                    #line 1356 
                    value |= 2147483648U; else 
                                               #line 1358 
                                               value &= 2147483647U;
  #line 1359 
  writel(value,ioaddr + 4U);
  #line 1360 
  return;
}

#line 1362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
struct stmmac_ops dwxgmac210_ops = {.core_init = & dwxgmac2_core_init, .set_mac = & dwxgmac2_set_mac, .rx_ipc = & dwxgmac2_rx_ipc, .rx_queue_enable = & dwxgmac2_rx_queue_enable, .rx_queue_prio = & dwxgmac2_rx_queue_prio, .tx_queue_prio = & dwxgmac2_tx_queue_prio, .prog_mtl_rx_algorithms = & dwxgmac2_prog_mtl_rx_algorithms, .prog_mtl_tx_algorithms = & dwxgmac2_prog_mtl_tx_algorithms, .set_mtl_tx_queue_weight = & dwxgmac2_set_mtl_tx_queue_weight, .map_mtl_to_dma = & dwxgmac2_map_mtl_to_dma, .config_cbs = & dwxgmac2_config_cbs, .dump_regs = & dwxgmac2_dump_regs, .host_irq_status = & dwxgmac2_host_irq_status, .host_mtl_irq_status = & dwxgmac2_host_mtl_irq_status, .set_filter = & dwxgmac2_set_filter, .flow_ctrl = & dwxgmac2_flow_ctrl, .pmt = & dwxgmac2_pmt, .set_umac_addr = & dwxgmac2_set_umac_addr, .get_umac_addr = & dwxgmac2_get_umac_addr, .set_eee_mode = & dwxgmac2_set_eee_mode, .reset_eee_mode = & dwxgmac2_reset_eee_mode, .set_eee_timer = & dwxgmac2_set_eee_timer, .set_eee_pls = & dwxgmac2_set_eee_pls, .safety_feat_config = & dwxgmac3_safety_feat_config, .safety_feat_irq_status = & dwxgmac3_safety_feat_irq_status, .safety_feat_dump = & dwxgmac3_safety_feat_dump, .rxp_config = & dwxgmac3_rxp_config, .flex_pps_config = & dwxgmac2_flex_pps_config, .set_mac_loopback = & dwxgmac2_set_mac_loopback, .rss_configure = & dwxgmac2_rss_configure, .update_vlan_hash = & dwxgmac2_update_vlan_hash, .enable_vlan = & dwxgmac2_enable_vlan, .get_mac_tx_timestamp = & dwxgmac2_get_mac_tx_timestamp, .sarc_configure = & dwxgmac2_sarc_configure, .config_l3_filter = & dwxgmac2_config_l3_filter, .config_l4_filter = & dwxgmac2_config_l4_filter, .set_arp_offload = & dwxgmac2_set_arp_offload};
#line 1407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c"
int dwxgmac2_setup(struct stmmac_priv *priv)
{
  #line 1409 
  struct mac_device_info *mac = priv->hw;
  #line 1411 
  _dev_info(priv->device,(char *)"\tXGMAC2\n");
  #line 1413 
  (priv->dev)->priv_flags |= 4096U;
  #line 1414 
  mac->pcsr = priv->ioaddr;
  #line 1415 
  mac->multicast_filter_bins = (unsigned int)(priv->plat)->multicast_filter_bins;
  #line 1416 
  mac->unicast_filter_entries = (unsigned int)(priv->plat)->unicast_filter_entries;
  #line 1417 
  mac->mcast_bits_log2 = 0U;
  #line 1419 
  if (mac->multicast_filter_bins != 0U) 
    #line 1420 
    if (0 != 0) {
      #line 1420 
      unsigned int tmp;
      #line 1420 
      unsigned int tmp_31;
      #line 1420 
      unsigned int tmp_32;
      #line 1420 
      unsigned int tmp_0;
      #line 1420 
      unsigned int tmp_1;
      #line 1420 
      unsigned int tmp_33;
      #line 1420 
      unsigned int tmp_34;
      #line 1420 
      unsigned int tmp_2;
      #line 1420 
      unsigned int tmp_3;
      #line 1420 
      unsigned int tmp_35;
      #line 1420 
      unsigned int tmp_36;
      #line 1420 
      unsigned int tmp_4;
      #line 1420 
      unsigned int tmp_5;
      #line 1420 
      unsigned int tmp_37;
      #line 1420 
      unsigned int tmp_38;
      #line 1420 
      unsigned int tmp_6;
      #line 1420 
      unsigned int tmp_7;
      #line 1420 
      unsigned int tmp_39;
      #line 1420 
      unsigned int tmp_40;
      #line 1420 
      unsigned int tmp_8;
      #line 1420 
      unsigned int tmp_9;
      #line 1420 
      unsigned int tmp_41;
      #line 1420 
      unsigned int tmp_42;
      #line 1420 
      unsigned int tmp_10;
      #line 1420 
      unsigned int tmp_11;
      #line 1420 
      unsigned int tmp_43;
      #line 1420 
      unsigned int tmp_44;
      #line 1420 
      unsigned int tmp_12;
      #line 1420 
      unsigned int tmp_13;
      #line 1420 
      unsigned int tmp_45;
      #line 1420 
      unsigned int tmp_46;
      #line 1420 
      unsigned int tmp_14;
      #line 1420 
      unsigned int tmp_15;
      #line 1420 
      unsigned int tmp_47;
      #line 1420 
      unsigned int tmp_48;
      #line 1420 
      unsigned int tmp_16;
      #line 1420 
      unsigned int tmp_17;
      #line 1420 
      unsigned int tmp_49;
      #line 1420 
      unsigned int tmp_50;
      #line 1420 
      unsigned int tmp_18;
      #line 1420 
      unsigned int tmp_19;
      #line 1420 
      unsigned int tmp_51;
      #line 1420 
      unsigned int tmp_52;
      #line 1420 
      unsigned int tmp_20;
      #line 1420 
      unsigned int tmp_21;
      #line 1420 
      unsigned int tmp_53;
      #line 1420 
      unsigned int tmp_54;
      #line 1420 
      unsigned int tmp_22;
      #line 1420 
      unsigned int tmp_23;
      #line 1420 
      unsigned int tmp_55;
      #line 1420 
      unsigned int tmp_56;
      #line 1420 
      unsigned int tmp_24;
      #line 1420 
      unsigned int tmp_25;
      #line 1420 
      unsigned int tmp_57;
      #line 1420 
      unsigned int tmp_58;
      #line 1420 
      unsigned int tmp_26;
      #line 1420 
      unsigned int tmp_27;
      #line 1420 
      unsigned int tmp_59;
      #line 1420 
      unsigned int tmp_60;
      #line 1420 
      unsigned int tmp_28;
      #line 1420 
      unsigned int tmp_29;
      #line 1420 
      unsigned int tmp_30;
      #line 1420 
      unsigned int tmp_61;
      #line 1420 
      if (mac->multicast_filter_bins > 1U) {
        #line 1420 
        if (((unsigned long long)mac->multicast_filter_bins & 9223372036854775808ULL) == 0ULL) {
          #line 1420 
          if (((unsigned long long)mac->multicast_filter_bins & 4611686018427387904ULL) == 0ULL) {
            #line 1420 
            if (((unsigned long long)mac->multicast_filter_bins & 2305843009213693952ULL) == 0ULL) {
              #line 1420 
              if (((unsigned long long)mac->multicast_filter_bins & 1152921504606846976ULL) == 0ULL) {
                #line 1420 
                if (((unsigned long long)mac->multicast_filter_bins & 576460752303423488ULL) == 0ULL) {
                  #line 1420 
                  if (((unsigned long long)mac->multicast_filter_bins & 288230376151711744ULL) == 0ULL) {
                    #line 1420 
                    if (((unsigned long long)mac->multicast_filter_bins & 144115188075855872ULL) == 0ULL) {
                      #line 1420 
                      if (((unsigned long long)mac->multicast_filter_bins & 72057594037927936ULL) == 0ULL) {
                        #line 1420 
                        if (((unsigned long long)mac->multicast_filter_bins & 36028797018963968ULL) == 0ULL) {
                          #line 1420 
                          if (((unsigned long long)mac->multicast_filter_bins & 18014398509481984ULL) == 0ULL) {
                            #line 1420 
                            if (((unsigned long long)mac->multicast_filter_bins & 9007199254740992ULL) == 0ULL) {
                              #line 1420 
                              if (((unsigned long long)mac->multicast_filter_bins & 4503599627370496ULL) == 0ULL) {
                                #line 1420 
                                if (((unsigned long long)mac->multicast_filter_bins & 2251799813685248ULL) == 0ULL) {
                                  #line 1420 
                                  if (((unsigned long long)mac->multicast_filter_bins & 1125899906842624ULL) == 0ULL) {
                                    #line 1420 
                                    if (((unsigned long long)mac->multicast_filter_bins & 562949953421312ULL) == 0ULL) {
                                      #line 1420 
                                      if (((unsigned long long)mac->multicast_filter_bins & 281474976710656ULL) == 0ULL) {
                                        #line 1420 
                                        if (((unsigned long long)mac->multicast_filter_bins & 140737488355328ULL) == 0ULL) {
                                          #line 1420 
                                          if (((unsigned long long)mac->multicast_filter_bins & 70368744177664ULL) == 0ULL) {
                                            #line 1420 
                                            if (((unsigned long long)mac->multicast_filter_bins & 35184372088832ULL) == 0ULL) {
                                              #line 1420 
                                              if (((unsigned long long)mac->multicast_filter_bins & 17592186044416ULL) == 0ULL) {
                                                #line 1420 
                                                if (((unsigned long long)mac->multicast_filter_bins & 8796093022208ULL) == 0ULL) {
                                                  #line 1420 
                                                  if (((unsigned long long)mac->multicast_filter_bins & 4398046511104ULL) == 0ULL) {
                                                    #line 1420 
                                                    if (((unsigned long long)mac->multicast_filter_bins & 2199023255552ULL) == 0ULL) {
                                                      #line 1420 
                                                      if (((unsigned long long)mac->multicast_filter_bins & 1099511627776ULL) == 0ULL) {
                                                        #line 1420 
                                                        if (((unsigned long long)mac->multicast_filter_bins & 549755813888ULL) == 0ULL) {
                                                          #line 1420 
                                                          if (((unsigned long long)mac->multicast_filter_bins & 274877906944ULL) == 0ULL) {
                                                            #line 1420 
                                                            if (((unsigned long long)mac->multicast_filter_bins & 137438953472ULL) == 0ULL) {
                                                              #line 1420 
                                                              if (((unsigned long long)mac->multicast_filter_bins & 68719476736ULL) == 0ULL) {
                                                                #line 1420 
                                                                if (((unsigned long long)mac->multicast_filter_bins & 34359738368ULL) == 0ULL) {
                                                                  #line 1420 
                                                                  if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 17179869184ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 8589934592ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 4294967296ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 2147483648ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 1073741824ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 536870912ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 268435456ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 134217728ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 67108864ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 33554432ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 16777216ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 8388608ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 4194304ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 2097152ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 1048576ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 524288ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 262144ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 131072ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 65536ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 32768ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 16384ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 8192ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 4096ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 2048ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 1024ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 512ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 256ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 128ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 64ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 32ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 16ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 8ULL) == 0ULL) {
                                                                    #line 1420 
                                                                    if (
                                                                    ((unsigned long long)mac->multicast_filter_bins & 4ULL) != 0ULL) 
                                                                    #line 1420 
                                                                    tmp = 2U; else 
                                                                    #line 1420 
                                                                    tmp = 1U;
                                                                    #line 1420 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_0 = 3U;
                                                                    #line 1420 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_1 = 4U;
                                                                    #line 1420 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_2 = 5U;
                                                                    #line 1420 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_3 = 6U;
                                                                    #line 1420 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_4 = 7U;
                                                                    #line 1420 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_5 = 8U;
                                                                    #line 1420 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_6 = 9U;
                                                                    #line 1420 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_7 = 10U;
                                                                    #line 1420 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_8 = 11U;
                                                                    #line 1420 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_9 = 12U;
                                                                    #line 1420 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_10 = 13U;
                                                                    #line 1420 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_11 = 14U;
                                                                    #line 1420 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_12 = 15U;
                                                                    #line 1420 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_13 = 16U;
                                                                    #line 1420 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_14 = 17U;
                                                                    #line 1420 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_15 = 18U;
                                                                    #line 1420 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_16 = 19U;
                                                                    #line 1420 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_17 = 20U;
                                                                    #line 1420 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_18 = 21U;
                                                                    #line 1420 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_19 = 22U;
                                                                    #line 1420 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_20 = 23U;
                                                                    #line 1420 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_21 = 24U;
                                                                    #line 1420 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_22 = 25U;
                                                                    #line 1420 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_23 = 26U;
                                                                    #line 1420 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_24 = 27U;
                                                                    #line 1420 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_25 = 28U;
                                                                    #line 1420 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_26 = 29U;
                                                                    #line 1420 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_27 = 30U;
                                                                    #line 1420 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_28 = 31U;
                                                                    #line 1420 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_29 = 32U;
                                                                    #line 1420 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 1420 
                                                                    tmp_30 = 33U;
                                                                    #line 1420 
                                                                    tmp_31 = tmp_30;
                                                                  }
                                                                  else 
                                                                    #line 1420 
                                                                    tmp_31 = 34U;
                                                                  #line 1420 
                                                                  tmp_32 = tmp_31;
                                                                }
                                                                else 
                                                                  #line 1420 
                                                                  tmp_32 = 35U;
                                                                #line 1420 
                                                                tmp_33 = tmp_32;
                                                              }
                                                              else 
                                                                   #line 1420 
                                                                   tmp_33 = 36U;
                                                              #line 1420 
                                                              tmp_34 = tmp_33;
                                                            }
                                                            else 
                                                                 #line 1420 
                                                                 tmp_34 = 37U;
                                                            #line 1420 
                                                            tmp_35 = tmp_34;
                                                          }
                                                          else 
                                                               #line 1420 
                                                               tmp_35 = 38U;
                                                          #line 1420 
                                                          tmp_36 = tmp_35;
                                                        }
                                                        else 
                                                             #line 1420 
                                                             tmp_36 = 39U;
                                                        #line 1420 
                                                        tmp_37 = tmp_36;
                                                      }
                                                      else 
                                                           #line 1420 
                                                           tmp_37 = 40U;
                                                      #line 1420 
                                                      tmp_38 = tmp_37;
                                                    }
                                                    else 
                                                         #line 1420 
                                                         tmp_38 = 41U;
                                                    #line 1420 
                                                    tmp_39 = tmp_38;
                                                  }
                                                  else 
                                                       #line 1420 
                                                       tmp_39 = 42U;
                                                  #line 1420 
                                                  tmp_40 = tmp_39;
                                                }
                                                else 
                                                     #line 1420 
                                                     tmp_40 = 43U;
                                                #line 1420 
                                                tmp_41 = tmp_40;
                                              }
                                              else 
                                                   #line 1420 
                                                   tmp_41 = 44U;
                                              #line 1420 
                                              tmp_42 = tmp_41;
                                            }
                                            else 
                                                 #line 1420 
                                                 tmp_42 = 45U;
                                            #line 1420 
                                            tmp_43 = tmp_42;
                                          }
                                          else 
                                               #line 1420 
                                               tmp_43 = 46U;
                                          #line 1420 
                                          tmp_44 = tmp_43;
                                        }
                                        else 
                                             #line 1420 
                                             tmp_44 = 47U;
                                        #line 1420 
                                        tmp_45 = tmp_44;
                                      }
                                      else 
                                           #line 1420 
                                           tmp_45 = 48U;
                                      #line 1420 
                                      tmp_46 = tmp_45;
                                    }
                                    else 
                                         #line 1420 
                                         tmp_46 = 49U;
                                    #line 1420 
                                    tmp_47 = tmp_46;
                                  }
                                  else 
                                       #line 1420 
                                       tmp_47 = 50U;
                                  #line 1420 
                                  tmp_48 = tmp_47;
                                }
                                else 
                                     #line 1420 
                                     tmp_48 = 51U;
                                #line 1420 
                                tmp_49 = tmp_48;
                              }
                              else 
                                   #line 1420 
                                   tmp_49 = 52U;
                              #line 1420 
                              tmp_50 = tmp_49;
                            }
                            else 
                                 #line 1420 
                                 tmp_50 = 53U;
                            #line 1420 
                            tmp_51 = tmp_50;
                          }
                          else 
                               #line 1420 
                               tmp_51 = 54U;
                          #line 1420 
                          tmp_52 = tmp_51;
                        }
                        else 
                             #line 1420 
                             tmp_52 = 55U;
                        #line 1420 
                        tmp_53 = tmp_52;
                      }
                      else 
                           #line 1420 
                           tmp_53 = 56U;
                      #line 1420 
                      tmp_54 = tmp_53;
                    }
                    else 
                         #line 1420 
                         tmp_54 = 57U;
                    #line 1420 
                    tmp_55 = tmp_54;
                  }
                  else 
                       #line 1420 
                       tmp_55 = 58U;
                  #line 1420 
                  tmp_56 = tmp_55;
                }
                else 
                     #line 1420 
                     tmp_56 = 59U;
                #line 1420 
                tmp_57 = tmp_56;
              }
              else 
                   #line 1420 
                   tmp_57 = 60U;
              #line 1420 
              tmp_58 = tmp_57;
            }
            else 
                 #line 1420 
                 tmp_58 = 61U;
            #line 1420 
            tmp_59 = tmp_58;
          }
          else 
               #line 1420 
               tmp_59 = 62U;
          #line 1420 
          tmp_60 = tmp_59;
        }
        else 
             #line 1420 
             tmp_60 = 63U;
        #line 1420 
        tmp_61 = tmp_60;
      }
      else 
           #line 1420 
           tmp_61 = 0U;
      #line 1420 
      mac->mcast_bits_log2 = tmp_61;
    }
    else {
      #line 1420 
      mac->mcast_bits_log2 = (unsigned int)__ilog2_u32(mac->multicast_filter_bins);
    }
  #line 1422 
  mac->link.duplex = 0U;
  #line 1423 
  mac->link.speed10 = 3758096384U;
  #line 1424 
  mac->link.speed100 = 2147483648U;
  #line 1425 
  mac->link.speed1000 = 1610612736U;
  #line 1426 
  mac->link.speed2500 = 1073741824U;
  #line 1427 
  mac->link.xgmii.speed2500 = 3221225472U;
  #line 1428 
  mac->link.xgmii.speed5000 = 2684354560U;
  #line 1429 
  mac->link.xgmii.speed10000 = 0U;
  #line 1430 
  mac->link.speed_mask = 3758096384U;
  #line 1432 
  mac->mii.addr = 512U;
  #line 1433 
  mac->mii.data = 516U;
  #line 1434 
  mac->mii.addr_shift = 16U;
  #line 1435 
  mac->mii.addr_mask = 2031616U;
  #line 1436 
  mac->mii.reg_shift = 0U;
  #line 1437 
  mac->mii.reg_mask = 65535U;
  #line 1438 
  mac->mii.clk_csr_shift = 19U;
  #line 1439 
  mac->mii.clk_csr_mask = 3670016U;
  #line 1441 
  return 0;
}

#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/dwxgmac2_core.i.aux"
static unsigned long cif_find_next_bit_1(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 112 
  return ldv_find_next_bit(addr,size,offset);
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/dwxgmac2_core.i.aux"
static unsigned long cif_find_first_bit_1(unsigned long *addr, unsigned long size)
{
  #line 154 
  return ldv_find_first_bit(addr,size);
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
__inline static s64 div_s64_rem(s64 dividend, s32 divisor, s32 *remainder)
{
  #line 40 
  *remainder = (int)(dividend % (long long)divisor);
  #line 41 
  return dividend / (long long)divisor;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
__inline static s64 div_s64(s64 dividend, s32 divisor)
{
  #line 138 
  s32 remainder;
  #line 139 
  return div_s64_rem(dividend,divisor,& remainder);
}

#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29 
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 919  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_tc.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
__inline static bool dissector_uses_key(struct flow_dissector *flow_dissector, enum flow_dissector_key_id key_id)
{
  #line 335 
  return (_Bool)((flow_dissector->used_keys & (unsigned int)(1 << (unsigned int)key_id)) != 0U);
}

#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
#line 75 
void flow_rule_match_basic(struct flow_rule *, struct flow_match_basic *);
#line 85 
#line 85 
void flow_rule_match_ipv4_addrs(struct flow_rule *, struct flow_match_ipv4_addrs *);
#line 91 
#line 91 
void flow_rule_match_ports(struct flow_rule *, struct flow_match_ports *);
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
__inline static bool flow_action_has_entries(struct flow_action *action)
{
  #line 226 
  return (_Bool)(action->num_entries != 0U);
}

#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
__inline static struct flow_rule *flow_cls_offload_flow_rule(struct flow_cls_offload *flow_cmd)
{
  #line 372 
  return flow_cmd->rule;
}

#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
__inline static bool tcf_exts_has_actions(struct tcf_exts *exts)
{
  #line 273 
  return (_Bool)(exts->nr_actions != 0);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tc_act/tc_gact.h"
__inline static bool __is_tcf_gact_act(struct tc_action *a, int act, bool is_ext)
{
  #line 23 
  struct tcf_gact *gact;
  #line 25 
  if (a->ops != (struct tc_action_ops *)0 && (a->ops)->id != (unsigned int)TCA_ID_GACT) 
    #line 26 
    return (_Bool)0;
  #line 28 
  gact = (struct tcf_gact *)a;
  #line 29 
  if (! is_ext && gact->common.tcfa_action == act || (int)is_ext != 0 && (gact->common.tcfa_action & -268435456) == act) 
    #line 31 
    return (_Bool)1;
  #line 34 
  return (_Bool)0;
}

#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tc_act/tc_gact.h"
__inline static bool is_tcf_gact_ok(struct tc_action *a)
{
  #line 39 
  return __is_tcf_gact_act(a,0,(_Bool)0);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tc_act/tc_gact.h"
__inline static bool is_tcf_gact_shot(struct tc_action *a)
{
  #line 44 
  return __is_tcf_gact_act(a,2,(_Bool)0);
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static void tc_fill_all_pass_entry(struct stmmac_tc_entry *entry)
{
  #line 16 
  memset((void *)entry,0,48UL);
  #line 17 
  entry->in_use = (_Bool)1;
  #line 18 
  entry->is_last = (_Bool)1;
  #line 19 
  entry->is_frag = (_Bool)0;
  #line 20 
  entry->prio = 4294967295U;
  #line 21 
  entry->handle = 0U;
  #line 22 
  entry->val.match_data = 0U;
  #line 23 
  entry->val.match_en = 0U;
  #line 24 
  entry->val.af = (unsigned char)1U;
  #line 25 
  entry->val.dma_ch_no = (unsigned char)0U;
  #line 26 
  return;
}

#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static struct stmmac_tc_entry *tc_find_entry(struct stmmac_priv *priv, struct tc_cls_u32_offload *cls, bool free_0)
{
  #line 32 
  struct stmmac_tc_entry *entry;
  #line 34 
  int i;
  #line 32 
  struct stmmac_tc_entry *first = (struct stmmac_tc_entry *)0;
  #line 32 
  struct stmmac_tc_entry *dup = (struct stmmac_tc_entry *)0;
  #line 33 
  u32 loc = cls->__anonCompField_tc_cls_u32_offload_191.knode.handle;
  #line 36 
  i = 0;
  #line 36 
  while (priv->tc_entries_max > (unsigned int)i) {
    #line 37 
    entry = priv->tc_entries + (unsigned long)i;
    #line 38 
    if (! entry->in_use && (first == (struct stmmac_tc_entry *)0 && (int)free_0 != 0)) 
      #line 39 
      first = entry;
    #line 40 
    if ((entry->handle == loc && ! free_0) && ! entry->is_frag) 
                                                                #line 41 
                                                                dup = entry;
    #line 36 
    i ++;
  }
  #line 44 
  if (dup != (struct stmmac_tc_entry *)0) 
                                          #line 45 
                                          return dup;
  #line 46 
  if (first != (struct stmmac_tc_entry *)0) {
    #line 47 
    first->handle = loc;
    #line 48 
    first->in_use = (_Bool)1;
    #line 51 
    memset((void *)(& first->val),0,16UL);
  }
  #line 54 
  return first;
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static int tc_fill_actions(struct stmmac_tc_entry *entry, struct stmmac_tc_entry *frag, struct tc_cls_u32_offload *cls)
{
  #line 62 
  struct tc_action *act;
  #line 63 
  struct tcf_exts *exts;
  #line 64 
  int i;
  #line 61 
  struct stmmac_tc_entry *action_entry = entry;
  #line 66 
  exts = cls->__anonCompField_tc_cls_u32_offload_191.knode.exts;
  #line 67 
  if (! tcf_exts_has_actions(exts)) 
                                    #line 68 
                                    return -22;
  #line 69 
  if (frag != (struct stmmac_tc_entry *)0) 
                                           #line 70 
                                           action_entry = frag;
  #line 72 
  i = 0;
  #line 72 
  while (1) {
    #line 72 
    if (i <= 31) {
      #line 72 
      act = *(exts->actions + (unsigned long)i);
      #line 72 
      if (! (act != (struct tc_action *)0)) 
                                            #line 72 
                                            break;
    }
    else 
         #line 72 
         break;
    {
      #line 74 
      if ((int)is_tcf_gact_ok(act) != 0) {
        #line 75 
        action_entry->val.af = (unsigned char)1U;
        #line 76 
        break;
      }
      #line 79 
      if ((int)is_tcf_gact_shot(act) != 0) {
        #line 80 
        action_entry->val.rf = (unsigned char)1U;
        #line 81 
        break;
      }
      #line 85 
      return -22;
    }
    #line 72 
    i ++;
  }
  #line 88 
  return 0;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static int tc_fill_entry(struct stmmac_priv *priv, struct tc_cls_u32_offload *cls)
{
  #line 94 
  struct stmmac_tc_entry *entry;
  #line 96 
  u32 off;
  #line 96 
  u32 data;
  #line 96 
  u32 mask;
  #line 96 
  u32 real_off;
  #line 96 
  u32 rem;
  #line 98 
  int ret;
  #line 94 
  struct stmmac_tc_entry *frag = (struct stmmac_tc_entry *)0;
  #line 95 
  struct tc_u32_sel *sel = cls->__anonCompField_tc_cls_u32_offload_191.knode.sel;
  #line 97 
  u32 prio = cls->common.prio << 16;
  #line 101 
  if ((unsigned int)sel->nkeys != 1U) 
                                      #line 102 
                                      return -22;
  #line 104 
  off = (unsigned int)(sel->keys[0].off << (int)sel->offshift);
  #line 105 
  data = sel->keys[0].val;
  #line 106 
  mask = sel->keys[0].mask;
  #line 108 
  switch ((int)__builtin_bswap16((unsigned short)((int)cls->common.protocol))) {
    #line 109 
    case 3: 
            #line 109 
    ;
    #line 110 
    break;
    #line 111 
    case 2048: 
               #line 111 
    ;
    #line 112 
    off += 14U;
    #line 113 
    break;
    #line 114 
    default: 
             #line 114 
    ;
    #line 115 
    return -22;
  }
  #line 118 
  if (priv->tc_off_max < off) 
                              #line 119 
                              return -22;
  #line 121 
  real_off = off / 4U;
  #line 122 
  rem = off & 3U;
  #line 124 
  entry = tc_find_entry(priv,cls,(_Bool)1);
  #line 125 
  if (entry == (struct stmmac_tc_entry *)0) 
                                            #line 126 
                                            return -22;
  #line 128 
  if (rem != 0U) {
    #line 129 
    frag = tc_find_entry(priv,cls,(_Bool)1);
    #line 130 
    if (frag == (struct stmmac_tc_entry *)0) {
      #line 131 
      ret = -22;
      #line 132 
      goto err_unuse;
    }
    #line 135 
    entry->frag_ptr = (void *)frag;
    #line 136 
    entry->val.match_en = (mask << rem * 8U) & - ((unsigned int)(1UL << rem * 8U));
    #line 138 
    entry->val.match_data = (data << rem * 8U) & - ((unsigned int)(1UL << rem * 8U));
    #line 140 
    entry->val.frame_offset = (unsigned char)real_off;
    #line 141 
    entry->prio = prio;
    #line 143 
    frag->val.match_en = (mask >> rem * 8U) & (unsigned int)(18446744073709551615UL >> (8U - rem) * 8U);
    #line 145 
    frag->val.match_data = (data >> rem * 8U) & (unsigned int)(18446744073709551615UL >> (8U - rem) * 8U);
    #line 147 
    frag->val.frame_offset = (unsigned char)((unsigned int)((unsigned char)real_off) + 1U);
    #line 148 
    frag->prio = prio;
    #line 149 
    frag->is_frag = (_Bool)1;
  }
  else {
    #line 151 
    entry->frag_ptr = (void *)0;
    #line 152 
    entry->val.match_en = mask;
    #line 153 
    entry->val.match_data = data;
    #line 154 
    entry->val.frame_offset = (unsigned char)real_off;
    #line 155 
    entry->prio = prio;
  }
  #line 158 
  ret = tc_fill_actions(entry,frag,cls);
  #line 159 
  if (ret != 0) 
                #line 160 
                goto err_unuse;
  #line 162 
  return 0;
  #line 164 
  err_unuse: 
             #line 164 
  ;
  #line 165 
  if (frag != (struct stmmac_tc_entry *)0) 
                                           #line 166 
                                           frag->in_use = (_Bool)0;
  #line 167 
  entry->in_use = (_Bool)0;
  #line 168 
  return ret;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static void tc_unfill_entry(struct stmmac_priv *priv, struct tc_cls_u32_offload *cls)
{
  #line 174 
  struct stmmac_tc_entry *entry;
  #line 176 
  entry = tc_find_entry(priv,cls,(_Bool)0);
  #line 177 
  if (entry == (struct stmmac_tc_entry *)0) 
                                            #line 178 
                                            return;
  #line 180 
  entry->in_use = (_Bool)0;
  #line 181 
  if (entry->frag_ptr != (void *)0) {
    #line 182 
    entry = (struct stmmac_tc_entry *)entry->frag_ptr;
    #line 183 
    entry->is_frag = (_Bool)0;
    #line 184 
    entry->in_use = (_Bool)0;
  }
  #line 186 
  return;
}

#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static int tc_config_knode(struct stmmac_priv *priv, struct tc_cls_u32_offload *cls)
{
  #line 197 
  int __result;
  #line 191 
  int ret;
  #line 193 
  ret = tc_fill_entry(priv,cls);
  #line 194 
  if (ret != 0) 
                #line 195 
                return ret;
  #line 197 
  __result = -22;
  #line 197 
  if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->rxp_config != (int (*)(void *, struct stmmac_tc_entry *, unsigned int ))0) 
    #line 197 
    __result = (*(((priv->hw)->mac)->rxp_config))((priv->hw)->pcsr,priv->tc_entries,priv->tc_entries_max);
  #line 197 
  ret = __result;
  #line 199 
  if (ret != 0) 
                #line 200 
                goto err_unfill;
  #line 202 
  return 0;
  #line 204 
  err_unfill: 
              #line 204 
  ;
  #line 205 
  tc_unfill_entry(priv,cls);
  #line 206 
  return ret;
}

#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static int tc_delete_knode(struct stmmac_priv *priv, struct tc_cls_u32_offload *cls)
{
  #line 217 
  int __result;
  #line 212 
  int ret;
  #line 215 
  tc_unfill_entry(priv,cls);
  #line 217 
  __result = -22;
  #line 217 
  if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->rxp_config != (int (*)(void *, struct stmmac_tc_entry *, unsigned int ))0) 
    #line 217 
    __result = (*(((priv->hw)->mac)->rxp_config))((priv->hw)->pcsr,priv->tc_entries,priv->tc_entries_max);
  #line 217 
  ret = __result;
  #line 219 
  if (ret != 0) 
                #line 220 
                return ret;
  #line 222 
  return 0;
}

#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static int tc_setup_cls_u32(struct stmmac_priv *priv, struct tc_cls_u32_offload *cls)
{
  #line 228 
  switch ((unsigned int)cls->command) {
    #line 229 
    case (unsigned int)1: 
                          #line 229 
    ;
    #line 230 
    tc_unfill_entry(priv,cls);
    #line 232 
    case (unsigned int)0: 
                          #line 232 
    ;
    #line 233 
    return tc_config_knode(priv,cls);
    #line 234 
    case (unsigned int)2: 
                          #line 234 
    ;
    #line 235 
    return tc_delete_knode(priv,cls);
    #line 236 
    default: 
             #line 236 
    ;
    #line 237 
    return -95;
  }
}

#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static int tc_init(struct stmmac_priv *priv)
{
  #line 244 
  unsigned int count;
  #line 245 
  int i;
  #line 243 
  struct dma_features *dma_cap = & priv->dma_cap;
  #line 247 
  if (dma_cap->l3l4fnum != 0U) {
    #line 248 
    priv->flow_entries_max = dma_cap->l3l4fnum;
    #line 249 
    priv->flow_entries = (struct stmmac_flow_entry *)cif_devm_kcalloc(priv->device,(unsigned long)dma_cap->l3l4fnum,32UL,3264U);
    #line 253 
    if (priv->flow_entries == (struct stmmac_flow_entry *)0) 
                                                             #line 254 
                                                             return -12;
    #line 256 
    i = 0;
    #line 256 
    while (priv->flow_entries_max > (unsigned int)i) {
      #line 257 
      (priv->flow_entries + (unsigned long)i)->idx = i;
      #line 256 
      i ++;
    }
    #line 259 
    _dev_info(priv->device,(char *)"Enabled Flow TC (entries=%d)\n",priv->flow_entries_max);
  }
  #line 264 
  if (dma_cap->frpsel == 0U) 
                             #line 265 
                             return 0;
  #line 267 
  switch (dma_cap->frpbs) {
    #line 268 
    case (unsigned int)0: 
                          #line 268 
    ;
    #line 269 
    priv->tc_off_max = 64U;
    #line 270 
    break;
    #line 271 
    case (unsigned int)1: 
                          #line 271 
    ;
    #line 272 
    priv->tc_off_max = 128U;
    #line 273 
    break;
    #line 274 
    case (unsigned int)2: 
                          #line 274 
    ;
    #line 275 
    priv->tc_off_max = 256U;
    #line 276 
    break;
    #line 277 
    default: 
             #line 277 
    ;
    #line 278 
    return -22;
  }
  #line 281 
  switch (dma_cap->frpes) {
    #line 282 
    case (unsigned int)0: 
                          #line 282 
    ;
    #line 283 
    count = 64U;
    #line 284 
    break;
    #line 285 
    case (unsigned int)1: 
                          #line 285 
    ;
    #line 286 
    count = 128U;
    #line 287 
    break;
    #line 288 
    case (unsigned int)2: 
                          #line 288 
    ;
    #line 289 
    count = 256U;
    #line 290 
    break;
    #line 291 
    default: 
             #line 291 
    ;
    #line 292 
    return -22;
  }
  #line 296 
  priv->tc_entries_max = count;
  #line 297 
  priv->tc_entries = (struct stmmac_tc_entry *)cif_devm_kcalloc(priv->device,(unsigned long)count,48UL,3264U);
  #line 299 
  if (priv->tc_entries == (struct stmmac_tc_entry *)0) 
                                                       #line 300 
                                                       return -12;
  #line 302 
  tc_fill_all_pass_entry(priv->tc_entries + (unsigned long)(count + 4294967295U));
  #line 304 
  _dev_info(priv->device,(char *)"Enabling HW TC (entries=%d, max_off=%d)\n",priv->tc_entries_max,priv->tc_off_max);
  #line 306 
  return 0;
}

#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static int tc_setup_cbs(struct stmmac_priv *priv, struct tc_cbs_qopt_offload *qopt)
{
  #line 353 
  int __result_1;
  #line 314 
  u32 ptr;
  #line 314 
  u32 speed_div;
  #line 315 
  u32 mode_to_use;
  #line 316 
  u64 value;
  #line 317 
  int ret;
  #line 312 
  u32 tx_queues_count = (priv->plat)->tx_queues_to_use;
  #line 313 
  u32 queue = (unsigned int)qopt->queue;
  #line 320 
  if (queue == 0U || queue >= tx_queues_count) 
                                               #line 321 
                                               return -22;
  #line 322 
  if (priv->dma_cap.av == 0U) 
                              #line 323 
                              return -95;
  #line 325 
  mode_to_use = (unsigned int)(priv->plat)->tx_queues_cfg[queue].mode_to_use;
  #line 326 
  if (mode_to_use == 1U && (unsigned int)qopt->enable != 0U) {
    #line 327 
    int __result;
    #line 327 
    __result = -22;
    #line 327 
    if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->qmode != (void (*)(void *, u32 , u8 ))0) {
      #line 327 
      (*(((priv->hw)->dma)->qmode))(priv->ioaddr,queue,(unsigned char)0);
      #line 327 
      __result = 0;
    }
    #line 327 
    ret = __result;
    #line 328 
    if (ret != 0) 
                  #line 329 
                  return ret;
    #line 331 
    (priv->plat)->tx_queues_cfg[queue].mode_to_use = (unsigned char)0U;
  }
  else 
    #line 332 
    if ((unsigned int)qopt->enable == 0U) {
      #line 333 
      int __result_0;
      #line 333 
      __result_0 = -22;
      #line 333 
      if ((priv->hw)->dma != (struct stmmac_dma_ops *)0 && ((priv->hw)->dma)->qmode != (void (*)(void *, u32 , u8 ))0) {
        #line 333 
        (*(((priv->hw)->dma)->qmode))(priv->ioaddr,queue,(unsigned char)1);
        #line 333 
        __result_0 = 0;
      }
      #line 333 
      return __result_0;
    }
  #line 337 
  if (priv->speed == 100) 
                          #line 337 
                          ptr = 4U; else 
                                         #line 337 
                                         ptr = 8U;
  #line 338 
  if (priv->speed == 100) 
                          #line 338 
                          speed_div = 100000U; else 
                                                    #line 338 
                                                    speed_div = 1000000U;
  #line 341 
  value = (unsigned long long)div_s64(((long long)qopt->idleslope * (long long)ptr) * 1024LL,
                (int)speed_div);
  #line 342 
  (priv->plat)->tx_queues_cfg[queue].idle_slope = (unsigned int)value;
  #line 344 
  value = (unsigned long long)div_s64(((long long)(- qopt->sendslope) * (long long)ptr) * 1024LL,
                (int)speed_div);
  #line 345 
  (priv->plat)->tx_queues_cfg[queue].send_slope = (unsigned int)value;
  #line 347 
  value = (unsigned long long)((long long)qopt->hicredit * 8192LL);
  #line 348 
  (priv->plat)->tx_queues_cfg[queue].high_credit = (unsigned int)value;
  #line 350 
  value = (unsigned long long)((long long)qopt->locredit * 8192LL);
  #line 351 
  (priv->plat)->tx_queues_cfg[queue].low_credit = (unsigned int)value;
  #line 353 
  __result_1 = -22;
  #line 353 
  if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->config_cbs != (void (*)(struct mac_device_info *, u32 , u32 , u32 , u32 , u32 ))0) {
    #line 353 
    (*(((priv->hw)->mac)->config_cbs))(priv->hw,(priv->plat)->tx_queues_cfg[queue].send_slope,(priv->plat)->tx_queues_cfg[queue].idle_slope,(priv->plat)->tx_queues_cfg[queue].high_credit,(priv->plat)->tx_queues_cfg[queue].low_credit,queue);
    #line 353 
    __result_1 = 0;
  }
  #line 353 
  ret = __result_1;
  #line 359 
  if (ret != 0) 
                #line 360 
                return ret;
  #line 362 
  _dev_info(priv->device,(char *)"CBS queue %d: send %d, idle %d, hi %d, lo %d\n",queue,qopt->sendslope,qopt->idleslope,qopt->hicredit,qopt->locredit);
  #line 365 
  return 0;
}

#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static int tc_parse_flow_actions(struct stmmac_priv *priv, struct flow_action *action, struct stmmac_flow_entry *entry)
{
  #line 372 
  struct flow_action_entry *act;
  #line 373 
  int i;
  #line 375 
  if (! flow_action_has_entries(action)) 
                                         #line 376 
                                         return -22;
  #line 378 
  i = 0;
  #line 378 
  act = & action->entries[0];
  #line 378 
  while (action->num_entries > (unsigned int)i) {
    #line 379 
    switch ((unsigned int)act->id) {
      #line 380 
      case (unsigned int)1: 
                            #line 380 
      ;
      #line 381 
      entry->action |= 1UL;
      #line 382 
      return 0;
      #line 383 
      default: 
               #line 383 
      ;
      #line 384 
      break;
    }
    #line 378 
    i ++;
    #line 378 
    act = & action->entries[i];
  }
  #line 389 
  return 0;
}

#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static int tc_add_basic_flow(struct stmmac_priv *priv, struct flow_cls_offload *cls, struct stmmac_flow_entry *entry)
{
  #line 398 
  struct flow_match_basic match;
  #line 396 
  struct flow_rule *rule = flow_cls_offload_flow_rule(cls);
  #line 397 
  struct flow_dissector *dissector = rule->match.dissector;
  #line 401 
  if (! dissector_uses_key(dissector,
                           (enum flow_dissector_key_id)FLOW_DISSECTOR_KEY_BASIC)) 
    #line 402 
    return -22;
  #line 404 
  flow_rule_match_basic(rule,& match);
  #line 405 
  entry->ip_proto = (match.key)->ip_proto;
  #line 406 
  return 0;
}

#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static int tc_add_ip4_flow(struct stmmac_priv *priv, struct flow_cls_offload *cls, struct stmmac_flow_entry *entry)
{
  #line 416 
  struct flow_match_ipv4_addrs match;
  #line 417 
  u32 hw_match;
  #line 418 
  int ret;
  #line 413 
  struct flow_rule *rule = flow_cls_offload_flow_rule(cls);
  #line 414 
  struct flow_dissector *dissector = rule->match.dissector;
  #line 415 
  bool inv = (_Bool)((entry->action & 1UL) != 0UL);
  #line 421 
  if (! dissector_uses_key(dissector,
                           (enum flow_dissector_key_id)FLOW_DISSECTOR_KEY_IPV4_ADDRS)) 
    #line 422 
    return -22;
  #line 424 
  flow_rule_match_ipv4_addrs(rule,& match);
  #line 425 
  hw_match = __builtin_bswap32((match.key)->src) & __builtin_bswap32((match.mask)->src);
  #line 426 
  if (hw_match != 0U) {
    #line 427 
    int __result;
    #line 427 
    __result = -22;
    #line 427 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->config_l3_filter != (int (*)(struct mac_device_info *, u32 , bool , bool , bool , bool , u32 ))0) 
      #line 427 
      __result = (*(((priv->hw)->mac)->config_l3_filter))(priv->hw,(unsigned int)entry->idx,(_Bool)1,(_Bool)0,(_Bool)1,(_Bool)((bool)((int)inv) != 0),hw_match);
    #line 427 
    ret = __result;
    #line 429 
    if (ret != 0) 
                  #line 430 
                  return ret;
  }
  #line 433 
  hw_match = __builtin_bswap32((match.key)->dst) & __builtin_bswap32((match.mask)->dst);
  #line 434 
  if (hw_match != 0U) {
    #line 435 
    int __result_0;
    #line 435 
    __result_0 = -22;
    #line 435 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->config_l3_filter != (int (*)(struct mac_device_info *, u32 , bool , bool , bool , bool , u32 ))0) 
      #line 435 
      __result_0 = (*(((priv->hw)->mac)->config_l3_filter))(priv->hw,(unsigned int)entry->idx,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)((bool)((int)inv) != 0),hw_match);
    #line 435 
    ret = __result_0;
    #line 437 
    if (ret != 0) 
                  #line 438 
                  return ret;
  }
  #line 441 
  return 0;
}

#line 444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static int tc_add_ports_flow(struct stmmac_priv *priv, struct flow_cls_offload *cls, struct stmmac_flow_entry *entry)
{
  #line 451 
  struct flow_match_ports match;
  #line 452 
  u32 hw_match;
  #line 453 
  bool is_udp;
  #line 454 
  int ret;
  #line 448 
  struct flow_rule *rule = flow_cls_offload_flow_rule(cls);
  #line 449 
  struct flow_dissector *dissector = rule->match.dissector;
  #line 450 
  bool inv = (_Bool)((entry->action & 1UL) != 0UL);
  #line 457 
  if (! dissector_uses_key(dissector,
                           (enum flow_dissector_key_id)FLOW_DISSECTOR_KEY_PORTS)) 
    #line 458 
    return -22;
  #line 460 
  switch ((int)entry->ip_proto) {
    #line 461 
    case 6: 
            #line 461 
    ;
    #line 462 
    is_udp = (_Bool)0;
    #line 463 
    break;
    #line 464 
    case 17: 
             #line 464 
    ;
    #line 465 
    is_udp = (_Bool)1;
    #line 466 
    break;
    #line 467 
    default: 
             #line 467 
    ;
    #line 468 
    return -22;
  }
  #line 471 
  flow_rule_match_ports(rule,& match);
  #line 473 
  hw_match = (unsigned int)((int)__builtin_bswap16((unsigned short)((int)(match.key)->__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_9284_77.src)) & (int)__builtin_bswap16((unsigned short)((int)(match.mask)->__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_9284_77.src)));
  #line 474 
  if (hw_match != 0U) {
    #line 475 
    int __result;
    #line 475 
    __result = -22;
    #line 475 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->config_l4_filter != (int (*)(struct mac_device_info *, u32 , bool , bool , bool , bool , u32 ))0) 
      #line 475 
      __result = (*(((priv->hw)->mac)->config_l4_filter))(priv->hw,(unsigned int)entry->idx,(_Bool)1,(_Bool)((bool)((int)is_udp) != 0),(_Bool)1,(_Bool)((bool)((int)inv) != 0),hw_match);
    #line 475 
    ret = __result;
    #line 477 
    if (ret != 0) 
                  #line 478 
                  return ret;
  }
  #line 481 
  hw_match = (unsigned int)((int)__builtin_bswap16((unsigned short)((int)(match.key)->__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_9284_77.dst)) & (int)__builtin_bswap16((unsigned short)((int)(match.mask)->__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_9284_77.dst)));
  #line 482 
  if (hw_match != 0U) {
    #line 483 
    int __result_0;
    #line 483 
    __result_0 = -22;
    #line 483 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->config_l4_filter != (int (*)(struct mac_device_info *, u32 , bool , bool , bool , bool , u32 ))0) 
      #line 483 
      __result_0 = (*(((priv->hw)->mac)->config_l4_filter))(priv->hw,(unsigned int)entry->idx,(_Bool)1,(_Bool)((bool)((int)is_udp) != 0),(_Bool)0,(_Bool)((bool)((int)inv) != 0),hw_match);
    #line 483 
    ret = __result_0;
    #line 485 
    if (ret != 0) 
                  #line 486 
                  return ret;
  }
  #line 489 
  entry->is_l4 = 1;
  #line 490 
  return 0;
}

#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static struct stmmac_flow_entry *tc_find_flow(struct stmmac_priv *priv, struct flow_cls_offload *cls, bool get_free)
{
  #line 497 
  int i;
  #line 499 
  i = 0;
  #line 499 
  while (priv->flow_entries_max > (unsigned int)i) {
    {
      #line 500 
      struct stmmac_flow_entry *entry = priv->flow_entries + (unsigned long)i;
      #line 502 
      if (entry->cookie == cls->cookie) 
                                        #line 503 
                                        return entry;
      #line 504 
      if ((int)get_free != 0 && entry->in_use == 0) 
                                                    #line 505 
                                                    return entry;
    }
    #line 499 
    i ++;
  }
  #line 508 
  return (struct stmmac_flow_entry *)0;
}

#line 514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static struct __anonstruct_tc_flow_parsers_20069 tc_flow_parsers[3U] = {{.fn = & tc_add_basic_flow}, {.fn = & tc_add_ip4_flow}, {.fn = & tc_add_ports_flow}};
#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static int tc_add_flow(struct stmmac_priv *priv, struct flow_cls_offload *cls)
{
  #line 525 
  int i;
  #line 525 
  int ret;
  #line 523 
  struct stmmac_flow_entry *entry = tc_find_flow(priv,cls,(_Bool)0);
  #line 524 
  struct flow_rule *rule = flow_cls_offload_flow_rule(cls);
  #line 527 
  if (entry == (struct stmmac_flow_entry *)0) {
    #line 528 
    entry = tc_find_flow(priv,cls,(_Bool)1);
    #line 529 
    if (entry == (struct stmmac_flow_entry *)0) 
                                                #line 530 
                                                return -2;
  }
  #line 533 
  ret = tc_parse_flow_actions(priv,& rule->action,entry);
  #line 534 
  if (ret != 0) 
                #line 535 
                return ret;
  #line 537 
  i = 0;
  #line 537 
  while ((unsigned int)i <= 2U) {
    #line 538 
    ret = (*(tc_flow_parsers[i].fn))(priv,cls,entry);
    #line 539 
    if (ret == 0) {
      #line 540 
      entry->in_use = 1;
      #line 541 
      goto __Cont;
    }
    #line 537 
    __Cont: 
            #line 537 
    i ++;
  }
  #line 545 
  if (entry->in_use == 0) 
                          #line 546 
                          return -22;
  #line 548 
  entry->cookie = cls->cookie;
  #line 549 
  return 0;
}

#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static int tc_del_flow(struct stmmac_priv *priv, struct flow_cls_offload *cls)
{
  #line 556 
  int ret;
  #line 555 
  struct stmmac_flow_entry *entry = tc_find_flow(priv,cls,(_Bool)0);
  #line 558 
  if (entry == (struct stmmac_flow_entry *)0 || entry->in_use == 0) 
                                                                    #line 559 
                                                                    return -2;
  #line 561 
  if (entry->is_l4 != 0) {
    #line 562 
    int __result;
    #line 562 
    __result = -22;
    #line 562 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->config_l4_filter != (int (*)(struct mac_device_info *, u32 , bool , bool , bool , bool , u32 ))0) 
      #line 562 
      __result = (*(((priv->hw)->mac)->config_l4_filter))(priv->hw,(unsigned int)entry->idx,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0,0U);
    #line 562 
    ret = __result;
  }
  else {
    #line 565 
    int __result_0;
    #line 565 
    __result_0 = -22;
    #line 565 
    if ((priv->hw)->mac != (struct stmmac_ops *)0 && ((priv->hw)->mac)->config_l3_filter != (int (*)(struct mac_device_info *, u32 , bool , bool , bool , bool , u32 ))0) 
      #line 565 
      __result_0 = (*(((priv->hw)->mac)->config_l3_filter))(priv->hw,(unsigned int)entry->idx,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0,0U);
    #line 565 
    ret = __result_0;
  }
  #line 569 
  entry->in_use = 0;
  #line 570 
  entry->cookie = 0UL;
  #line 571 
  entry->is_l4 = 0;
  #line 572 
  return ret;
}

#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
static int tc_setup_cls(struct stmmac_priv *priv, struct flow_cls_offload *cls)
{
  #line 578 
  int ret = 0;
  #line 581 
  if (priv->rss.enable != 0) 
                             #line 582 
                             return -16;
  #line 584 
  switch ((unsigned int)cls->command) {
    #line 585 
    case (unsigned int)0: 
                          #line 585 
    ;
    #line 586 
    ret = tc_add_flow(priv,cls);
    #line 587 
    break;
    #line 588 
    case (unsigned int)1: 
                          #line 588 
    ;
    #line 589 
    ret = tc_del_flow(priv,cls);
    #line 590 
    break;
    #line 591 
    default: 
             #line 591 
    ;
    #line 592 
    return -95;
  }
  #line 595 
  return ret;
}

#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c"
struct stmmac_tc_ops dwmac510_tc_ops = {.init = & tc_init, .setup_cls_u32 = & tc_setup_cls_u32, .setup_cbs = & tc_setup_cbs, .setup_cls = & tc_setup_cls};
#line 919  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/0/concurrency safety/weaver/stmmac_tc.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 922 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static void *ERR_PTR(long error)
{
  #line 26 
  return (void *)error;
}

#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
#line 211 
void emg_dispatch_deregister_10(struct net_device *arg0);
#line 108 
#line 157 
void emg_dispatch_instance_deregister_4(struct timer_list *arg0);
#line 109 
#line 175 
void emg_dispatch_instance_register_6(struct timer_list *arg0);
#line 110 
#line 166 
void emg_dispatch_irq_deregister_5(int arg0);
#line 111 
#line 197 
void emg_dispatch_irq_register_9(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 112 
#line 137 
void emg_dispatch_register_3(struct file_operations *arg0);
#line 113 
#line 186 
void emg_dispatch_register_8(struct net_device *arg0);
#line 114 
#line 1522 
void *emg_entry_point_insmod(void *arg0);
#line 115 
#line 220 
void *emg_file_operations_character_driver_scenario_stmmac_dma_cap_fops(void *arg0);
#line 116 
#line 397 
void *emg_file_operations_character_driver_scenario_stmmac_rings_status_fops(void *arg0);
#line 118 
#line 574 
void *emg_interrupt_interrupt_scenario_stmmac_interrupt(void *arg0);
#line 120 
#line 637 
void *emg_net_random_allocationless_scenario_stmmac_check_if_running(void *arg0);
#line 124 
#line 1225 
void *emg_timer_timer_scenario_4(void *arg0);
#line 126 
#line 1551 
int main(void);
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_11;
#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_12;
#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_3(struct file_operations *arg0)
{
  #line 138 
  int ret;
  #line 139 
  struct emg_struct_character_driver_scenario_stmmac_dma_cap_fops_11 *cf_arg_11;
  #line 140 
  struct emg_struct_character_driver_scenario_stmmac_dma_cap_fops_11 *cf_arg_12;
  #line 141 
  if (ldv_undef_int() != 0) {
    #line 142 
    cf_arg_11 = (struct emg_struct_character_driver_scenario_stmmac_dma_cap_fops_11 *)ldv_xmalloc(16UL);
    #line 143 
    cf_arg_11->arg0 = arg0;
    #line 144 
    ret = pthread_create(& emg_thread_11,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_stmmac_dma_cap_fops,(void *)cf_arg_11);
    #line 145 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 148 
    cf_arg_12 = (struct emg_struct_character_driver_scenario_stmmac_dma_cap_fops_11 *)ldv_xmalloc(16UL);
    #line 149 
    cf_arg_12->arg0 = arg0;
    #line 150 
    ret = pthread_create(& emg_thread_12,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_stmmac_rings_status_fops,(void *)cf_arg_12);
    #line 151 
    __VERIFIER_assume(ret == 0);
  }
  #line 153 
  return;
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_4(struct timer_list *arg0)
{
  #line 158 
  int ret;
  #line 159 
  struct emg_struct_timer_scenario_4_15 *cf_arg_15;
  #line 160 
  ret = pthread_join(emg_thread_15,(void **)0);
  #line 161 
  __VERIFIER_assume(ret == 0);
  #line 162 
  return;
}

#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_5(int arg0)
{
  #line 167 
  int ret;
  #line 168 
  struct emg_struct_free_irq_5 *cf_arg_13;
  #line 169 
  ret = pthread_join(emg_thread_13,(void **)0);
  #line 170 
  __VERIFIER_assume(ret == 0);
  #line 171 
  return;
}

#line 175  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_6(struct timer_list *arg0)
{
  #line 176 
  int ret;
  #line 177 
  struct emg_struct_timer_scenario_4_15 *cf_arg_15;
  #line 178 
  cf_arg_15 = (struct emg_struct_timer_scenario_4_15 *)ldv_xmalloc(16UL);
  #line 179 
  cf_arg_15->arg0 = arg0;
  #line 180 
  ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_timer_timer_scenario_4,(void *)cf_arg_15);
  #line 181 
  __VERIFIER_assume(ret == 0);
  #line 182 
  return;
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_8(struct net_device *arg0)
{
  #line 187 
  int ret;
  #line 188 
  struct emg_struct_random_allocationless_scenario_stmmac_check_if_running_14 *cf_arg_14;
  #line 189 
  cf_arg_14 = (struct emg_struct_random_allocationless_scenario_stmmac_check_if_running_14 *)ldv_xmalloc(16UL);
  #line 190 
  cf_arg_14->arg0 = arg0;
  #line 191 
  ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_stmmac_check_if_running,(void *)cf_arg_14);
  #line 192 
  __VERIFIER_assume(ret == 0);
  #line 193 
  return;
}

#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_9(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 198 
  int ret;
  #line 199 
  struct emg_struct_interrupt_scenario_stmmac_interrupt_13 *cf_arg_13;
  #line 200 
  cf_arg_13 = (struct emg_struct_interrupt_scenario_stmmac_interrupt_13 *)ldv_xmalloc(40UL);
  #line 201 
  cf_arg_13->arg0 = arg0;
  #line 202 
  cf_arg_13->arg1 = arg1;
  #line 203 
  cf_arg_13->arg2 = arg2;
  #line 204 
  cf_arg_13->arg3 = arg3;
  #line 205 
  ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_stmmac_interrupt,(void *)cf_arg_13);
  #line 206 
  __VERIFIER_assume(ret == 0);
  #line 207 
  return;
}

#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_10(struct net_device *arg0)
{
  #line 212 
  int ret;
  #line 213 
  struct emg_struct_random_allocationless_scenario_stmmac_check_if_running_14 *cf_arg_14;
  #line 214 
  ret = pthread_join(emg_thread_14,(void **)0);
  #line 215 
  __VERIFIER_assume(ret == 0);
  #line 216 
  return;
}

#line 220  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_stmmac_dma_cap_fops(void *arg0)
{
  #line 223 
  struct file_operations *emg_11_container;
  #line 224 
  long long emg_11_emg_param_1_0;
  #line 225 
  char *emg_11_emg_param_1_2;
  #line 226 
  char *emg_11_emg_param_1_4;
  #line 227 
  int emg_11_emg_param_2_1;
  #line 228 
  long long *emg_11_emg_param_3_3;
  #line 229 
  long long *emg_11_emg_param_3_5;
  #line 230 
  struct file *emg_11_resource_0;
  #line 231 
  struct inode *emg_11_resource_1;
  #line 232 
  int emg_11_ret;
  #line 233 
  unsigned long emg_11_size_cnt;
  #line 234 
  int emg_repeat_cnt_main_11_1 = 1;
  #line 235 
  int emg_repeat_cnt_main_11_0 = 1;
  #line 236 
  int emg_repeat_cnt_call_11 = 1;
  #line 238 
  struct emg_struct_character_driver_scenario_stmmac_dma_cap_fops_11 *data = (struct emg_struct_character_driver_scenario_stmmac_dma_cap_fops_11 *)arg0;
  #line 242 
  emg_11_ret = ldv_undef_int();
  #line 243 
  emg_11_container = emg_alias_stmmac_dma_cap_fops;
  #line 244 
  emg_11_ret = ldv_undef_int();
  #line 246 
  __VERIFIER_assume(data->arg0 == emg_alias_stmmac_dma_cap_fops);
  #line 248 
  if (data != (struct emg_struct_character_driver_scenario_stmmac_dma_cap_fops_11 *)0) {
    #line 249 
    emg_11_container = data->arg0;
    #line 250 
    ldv_free((void *)data);
  }
  #line 255 
  emg_11_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 256 
  emg_11_size_cnt = (unsigned long)ldv_undef_int();
  #line 260 
  goto emg_main_11;
  #line 264 
  return (void *)0;
  #line 267 
  emg_call_11: 
               #line 267 
  ;
  #line 268 
  if (ldv_undef_int() != 0) {
    #line 269 
    switch (ldv_undef_int()) {
      #line 270 
      case 0: 
              #line 270 
      ;
      #line 272 
      emg_11_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 272 
      emg_11_emg_param_1_2 = emg_11_emg_param_1_2;
      #line 273 
      emg_11_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 273 
      emg_11_emg_param_3_3 = emg_11_emg_param_3_3;
      #line 277 
      seq_read(emg_11_resource_0,emg_11_emg_param_1_2,emg_11_size_cnt,emg_11_emg_param_3_3);
      #line 281 
      ldv_free((void *)emg_11_emg_param_1_2);
      #line 282 
      ldv_free((void *)emg_11_emg_param_3_3);
      #line 284 
      break;
      #line 286 
      case 1: 
              #line 286 
      ;
      #line 288 
      seq_lseek(emg_11_resource_0,emg_11_emg_param_1_0,emg_11_emg_param_2_1);
      #line 290 
      break;
      #line 292 
      case 2: 
              #line 292 
      ;
      #line 299 
      __VERIFIER_assume(emg_11_size_cnt <= 2147479552UL);
      #line 300 
      emg_11_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 300 
      emg_11_emg_param_1_4 = emg_11_emg_param_1_4;
      #line 301 
      emg_11_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 301 
      emg_11_emg_param_3_5 = emg_11_emg_param_3_5;
      #line 305 
      if (emg_11_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 306 
        (*(emg_11_container->write))(emg_11_resource_0,emg_11_emg_param_1_4,emg_11_size_cnt,emg_11_emg_param_3_5);
      #line 311 
      ldv_free((void *)emg_11_emg_param_1_4);
      #line 312 
      ldv_free((void *)emg_11_emg_param_3_5);
      #line 314 
      break;
      #line 316 
      default: 
               #line 316 
      ;
      #line 316 
      __VERIFIER_assume(0);
    }
    #line 319 
    if (emg_repeat_cnt_call_11 > 0) {
      #line 320 
      emg_repeat_cnt_call_11 --;
      #line 322 
      goto emg_call_11;
    }
    else 
         #line 324 
         __VERIFIER_assume(0);
  }
  else {
    #line 330 
    (*emg_alias_single_release)(emg_11_resource_1,emg_11_resource_0);
    #line 333 
    if (emg_repeat_cnt_main_11_1 > 0) {
      #line 334 
      emg_repeat_cnt_main_11_1 --;
      #line 336 
      goto emg_main_11;
    }
    else 
         #line 338 
         __VERIFIER_assume(0);
  }
  #line 344 
  return (void *)0;
  #line 347 
  emg_main_11: 
               #line 347 
  ;
  #line 348 
  if (ldv_undef_int() != 0) {
    #line 350 
    emg_11_ret = emg_wrapper_stmmac_dma_cap_open(emg_11_resource_1,emg_11_resource_0);
    #line 355 
    emg_11_ret = ldv_filter_err_code(emg_11_ret);
    #line 358 
    if (ldv_undef_int() != 0) {
      #line 360 
      __VERIFIER_assume(emg_11_ret == 0);
      #line 364 
      goto emg_call_11;
    }
    else {
      #line 369 
      __VERIFIER_assume(emg_11_ret != 0);
      #line 372 
      if (emg_repeat_cnt_main_11_0 > 0) {
        #line 373 
        emg_repeat_cnt_main_11_0 --;
        #line 375 
        goto emg_main_11;
      }
      else 
           #line 377 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 384 
       ldv_free((void *)emg_11_resource_0);
  #line 392 
  return (void *)0;
}

#line 397  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_stmmac_rings_status_fops(void *arg0)
{
  #line 400 
  struct file_operations *emg_12_container;
  #line 401 
  long long emg_12_emg_param_1_0;
  #line 402 
  char *emg_12_emg_param_1_2;
  #line 403 
  char *emg_12_emg_param_1_4;
  #line 404 
  int emg_12_emg_param_2_1;
  #line 405 
  long long *emg_12_emg_param_3_3;
  #line 406 
  long long *emg_12_emg_param_3_5;
  #line 407 
  struct file *emg_12_resource_0;
  #line 408 
  struct inode *emg_12_resource_1;
  #line 409 
  int emg_12_ret;
  #line 410 
  unsigned long emg_12_size_cnt;
  #line 411 
  int emg_repeat_cnt_call_12 = 1;
  #line 412 
  int emg_repeat_cnt_main_12_0 = 1;
  #line 413 
  int emg_repeat_cnt_main_12_1 = 1;
  #line 415 
  struct emg_struct_character_driver_scenario_stmmac_dma_cap_fops_11 *data = (struct emg_struct_character_driver_scenario_stmmac_dma_cap_fops_11 *)arg0;
  #line 419 
  emg_12_ret = ldv_undef_int();
  #line 420 
  emg_12_container = emg_alias_stmmac_rings_status_fops;
  #line 421 
  emg_12_ret = ldv_undef_int();
  #line 423 
  __VERIFIER_assume(data->arg0 == emg_alias_stmmac_rings_status_fops);
  #line 425 
  if (data != (struct emg_struct_character_driver_scenario_stmmac_dma_cap_fops_11 *)0) {
    #line 426 
    emg_12_container = data->arg0;
    #line 427 
    ldv_free((void *)data);
  }
  #line 432 
  emg_12_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 433 
  emg_12_size_cnt = (unsigned long)ldv_undef_int();
  #line 437 
  goto emg_main_12;
  #line 441 
  return (void *)0;
  #line 444 
  emg_call_12: 
               #line 444 
  ;
  #line 445 
  if (ldv_undef_int() != 0) {
    #line 446 
    switch (ldv_undef_int()) {
      #line 447 
      case 0: 
              #line 447 
      ;
      #line 449 
      emg_12_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 449 
      emg_12_emg_param_1_2 = emg_12_emg_param_1_2;
      #line 450 
      emg_12_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 450 
      emg_12_emg_param_3_3 = emg_12_emg_param_3_3;
      #line 454 
      seq_read(emg_12_resource_0,emg_12_emg_param_1_2,emg_12_size_cnt,emg_12_emg_param_3_3);
      #line 458 
      ldv_free((void *)emg_12_emg_param_1_2);
      #line 459 
      ldv_free((void *)emg_12_emg_param_3_3);
      #line 461 
      break;
      #line 463 
      case 1: 
              #line 463 
      ;
      #line 465 
      seq_lseek(emg_12_resource_0,emg_12_emg_param_1_0,emg_12_emg_param_2_1);
      #line 467 
      break;
      #line 469 
      case 2: 
              #line 469 
      ;
      #line 476 
      __VERIFIER_assume(emg_12_size_cnt <= 2147479552UL);
      #line 477 
      emg_12_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 477 
      emg_12_emg_param_1_4 = emg_12_emg_param_1_4;
      #line 478 
      emg_12_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 478 
      emg_12_emg_param_3_5 = emg_12_emg_param_3_5;
      #line 482 
      if (emg_12_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 483 
        (*(emg_12_container->write))(emg_12_resource_0,emg_12_emg_param_1_4,emg_12_size_cnt,emg_12_emg_param_3_5);
      #line 488 
      ldv_free((void *)emg_12_emg_param_1_4);
      #line 489 
      ldv_free((void *)emg_12_emg_param_3_5);
      #line 491 
      break;
      #line 493 
      default: 
               #line 493 
      ;
      #line 493 
      __VERIFIER_assume(0);
    }
    #line 496 
    if (emg_repeat_cnt_call_12 > 0) {
      #line 497 
      emg_repeat_cnt_call_12 --;
      #line 499 
      goto emg_call_12;
    }
    else 
         #line 501 
         __VERIFIER_assume(0);
  }
  else {
    #line 507 
    (*emg_alias_single_release)(emg_12_resource_1,emg_12_resource_0);
    #line 510 
    if (emg_repeat_cnt_main_12_1 > 0) {
      #line 511 
      emg_repeat_cnt_main_12_1 --;
      #line 513 
      goto emg_main_12;
    }
    else 
         #line 515 
         __VERIFIER_assume(0);
  }
  #line 521 
  return (void *)0;
  #line 524 
  emg_main_12: 
               #line 524 
  ;
  #line 525 
  if (ldv_undef_int() != 0) {
    #line 527 
    emg_12_ret = emg_wrapper_stmmac_rings_status_open(emg_12_resource_1,emg_12_resource_0);
    #line 532 
    emg_12_ret = ldv_filter_err_code(emg_12_ret);
    #line 535 
    if (ldv_undef_int() != 0) {
      #line 537 
      __VERIFIER_assume(emg_12_ret == 0);
      #line 541 
      goto emg_call_12;
    }
    else {
      #line 546 
      __VERIFIER_assume(emg_12_ret != 0);
      #line 549 
      if (emg_repeat_cnt_main_12_0 > 0) {
        #line 550 
        emg_repeat_cnt_main_12_0 --;
        #line 552 
        goto emg_main_12;
      }
      else 
           #line 554 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 561 
       ldv_free((void *)emg_12_resource_0);
  #line 569 
  return (void *)0;
}

#line 574  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_stmmac_interrupt(void *arg0)
{
  #line 577 
  enum irqreturn (*emg_13_callback)(int , void *);
  #line 578 
  void *emg_13_data;
  #line 579 
  int emg_13_line;
  #line 580 
  enum irqreturn emg_13_ret_val;
  #line 581 
  enum irqreturn (*emg_13_thread)(int , void *);
  #line 583 
  struct emg_struct_interrupt_scenario_stmmac_interrupt_13 *data = (struct emg_struct_interrupt_scenario_stmmac_interrupt_13 *)arg0;
  #line 586 
  emg_13_callback = & emg_wrapper_stmmac_interrupt;
  #line 589 
  if (data != (struct emg_struct_interrupt_scenario_stmmac_interrupt_13 *)0) {
    #line 590 
    emg_13_line = data->arg0;
    #line 591 
    emg_13_callback = data->arg1;
    #line 592 
    emg_13_thread = data->arg2;
    #line 593 
    emg_13_data = data->arg3;
    #line 594 
    ldv_free((void *)data);
  }
  #line 600 
  ldv_switch_to_interrupt_context();
  #line 604 
  emg_13_ret_val = emg_wrapper_stmmac_interrupt(emg_13_line,emg_13_data);
  #line 609 
  ldv_switch_to_process_context();
  #line 612 
  if (ldv_undef_int() != 0) {
    #line 614 
    __VERIFIER_assume(emg_13_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 618 
    if (emg_13_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 619 
                                                              (*emg_13_thread)(emg_13_line,emg_13_data);
  }
  else 
       #line 624 
       __VERIFIER_assume(emg_13_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 632 
  return (void *)0;
}

#line 637  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_stmmac_check_if_running(void *arg0)
{
  #line 640 
  struct net_device *emg_14_container;
  #line 641 
  struct sk_buff *emg_14_emg_param_0_31;
  #line 642 
  struct ethtool_coalesce *emg_14_emg_param_1_0;
  #line 643 
  struct ethtool_drvinfo *emg_14_emg_param_1_1;
  #line 644 
  struct ethtool_rxnfc *emg_14_emg_param_1_12;
  #line 645 
  int emg_14_emg_param_1_14;
  #line 646 
  unsigned int emg_14_emg_param_1_15;
  #line 647 
  struct ethtool_ts_info *emg_14_emg_param_1_17;
  #line 648 
  struct ethtool_tunable *emg_14_emg_param_1_18;
  #line 649 
  struct ethtool_eee *emg_14_emg_param_1_2;
  #line 650 
  struct ethtool_wolinfo *emg_14_emg_param_1_20;
  #line 651 
  int emg_14_emg_param_1_21;
  #line 652 
  struct ifreq *emg_14_emg_param_1_22;
  #line 653 
  unsigned long long emg_14_emg_param_1_24;
  #line 654 
  struct sk_buff *emg_14_emg_param_1_25;
  #line 655 
  unsigned long long emg_14_emg_param_1_27;
  #line 656 
  void *emg_14_emg_param_1_28;
  #line 657 
  enum tc_setup_type *emg_14_emg_param_1_29;
  #line 658 
  struct ethtool_stats *emg_14_emg_param_1_3;
  #line 659 
  unsigned short emg_14_emg_param_1_32;
  #line 660 
  unsigned short emg_14_emg_param_1_34;
  #line 661 
  struct ethtool_test *emg_14_emg_param_1_36;
  #line 662 
  struct ethtool_coalesce *emg_14_emg_param_1_38;
  #line 663 
  struct ethtool_eee *emg_14_emg_param_1_39;
  #line 664 
  struct ethtool_link_ksettings *emg_14_emg_param_1_40;
  #line 665 
  unsigned int emg_14_emg_param_1_41;
  #line 666 
  struct ethtool_pauseparam *emg_14_emg_param_1_42;
  #line 667 
  unsigned int *emg_14_emg_param_1_43;
  #line 668 
  struct ethtool_tunable *emg_14_emg_param_1_46;
  #line 669 
  struct ethtool_wolinfo *emg_14_emg_param_1_48;
  #line 670 
  struct ethtool_link_ksettings *emg_14_emg_param_1_5;
  #line 671 
  struct ethtool_pauseparam *emg_14_emg_param_1_6;
  #line 672 
  struct ethtool_regs *emg_14_emg_param_1_7;
  #line 673 
  unsigned int *emg_14_emg_param_1_9;
  #line 674 
  unsigned char *emg_14_emg_param_2_10;
  #line 675 
  unsigned int *emg_14_emg_param_2_13;
  #line 676 
  unsigned char *emg_14_emg_param_2_16;
  #line 677 
  void *emg_14_emg_param_2_19;
  #line 678 
  int emg_14_emg_param_2_23;
  #line 679 
  struct net_device *emg_14_emg_param_2_26;
  #line 680 
  void *emg_14_emg_param_2_30;
  #line 681 
  unsigned short emg_14_emg_param_2_33;
  #line 682 
  unsigned short emg_14_emg_param_2_35;
  #line 683 
  unsigned long long *emg_14_emg_param_2_37;
  #line 684 
  unsigned long long *emg_14_emg_param_2_4;
  #line 685 
  unsigned char *emg_14_emg_param_2_44;
  #line 686 
  void *emg_14_emg_param_2_47;
  #line 687 
  void *emg_14_emg_param_2_8;
  #line 688 
  unsigned char *emg_14_emg_param_3_11;
  #line 689 
  unsigned char emg_14_emg_param_3_45;
  #line 690 
  int emg_repeat_cnt_call_14 = 1;
  #line 692 
  struct emg_struct_random_allocationless_scenario_stmmac_check_if_running_14 *data = (struct emg_struct_random_allocationless_scenario_stmmac_check_if_running_14 *)arg0;
  #line 697 
  if (data != (struct emg_struct_random_allocationless_scenario_stmmac_check_if_running_14 *)0) {
    #line 698 
    emg_14_container = data->arg0;
    #line 699 
    ldv_free((void *)data);
  }
  #line 704 
  goto emg_call_14;
  #line 708 
  return (void *)0;
  #line 711 
  emg_call_14: 
               #line 711 
  ;
  #line 712 
  switch (ldv_undef_int()) {
    #line 713 
    case 0: 
            #line 713 
    ;
    #line 715 
    emg_14_emg_param_1_48 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 715 
    emg_14_emg_param_1_48 = emg_14_emg_param_1_48;
    #line 719 
    emg_wrapper_stmmac_set_wol(emg_14_container,emg_14_emg_param_1_48);
    #line 723 
    ldv_free((void *)emg_14_emg_param_1_48);
    #line 725 
    break;
    #line 727 
    case 1: 
            #line 727 
    ;
    #line 729 
    emg_14_emg_param_1_46 = (struct ethtool_tunable *)ldv_xmalloc_unknown_size(0UL);
    #line 729 
    emg_14_emg_param_1_46 = emg_14_emg_param_1_46;
    #line 730 
    emg_14_emg_param_2_47 = ldv_xmalloc_unknown_size(0UL);
    #line 730 
    emg_14_emg_param_2_47 = emg_14_emg_param_2_47;
    #line 734 
    emg_wrapper_stmmac_set_tunable(emg_14_container,emg_14_emg_param_1_46,emg_14_emg_param_2_47);
    #line 738 
    ldv_free((void *)emg_14_emg_param_1_46);
    #line 739 
    ldv_free(emg_14_emg_param_2_47);
    #line 741 
    break;
    #line 743 
    case 2: 
            #line 743 
    ;
    #line 745 
    emg_14_emg_param_1_43 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 745 
    emg_14_emg_param_1_43 = emg_14_emg_param_1_43;
    #line 746 
    emg_14_emg_param_2_44 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 746 
    emg_14_emg_param_2_44 = emg_14_emg_param_2_44;
    #line 750 
    emg_wrapper_stmmac_set_rxfh(emg_14_container,emg_14_emg_param_1_43,emg_14_emg_param_2_44,(unsigned char)((int)emg_14_emg_param_3_45));
    #line 754 
    ldv_free((void *)emg_14_emg_param_1_43);
    #line 755 
    ldv_free((void *)emg_14_emg_param_2_44);
    #line 757 
    break;
    #line 759 
    case 3: 
            #line 759 
    ;
    #line 761 
    emg_14_emg_param_1_42 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 761 
    emg_14_emg_param_1_42 = emg_14_emg_param_1_42;
    #line 765 
    emg_wrapper_stmmac_set_pauseparam(emg_14_container,emg_14_emg_param_1_42);
    #line 769 
    ldv_free((void *)emg_14_emg_param_1_42);
    #line 771 
    break;
    #line 773 
    case 4: 
            #line 773 
    ;
    #line 775 
    emg_wrapper_stmmac_ethtool_setmsglevel(emg_14_container,emg_14_emg_param_1_41);
    #line 777 
    break;
    #line 779 
    case 5: 
            #line 779 
    ;
    #line 781 
    emg_14_emg_param_1_40 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 781 
    emg_14_emg_param_1_40 = emg_14_emg_param_1_40;
    #line 785 
    emg_wrapper_stmmac_ethtool_set_link_ksettings(emg_14_container,emg_14_emg_param_1_40);
    #line 789 
    ldv_free((void *)emg_14_emg_param_1_40);
    #line 791 
    break;
    #line 793 
    case 6: 
            #line 793 
    ;
    #line 795 
    emg_14_emg_param_1_39 = (struct ethtool_eee *)ldv_xmalloc_unknown_size(0UL);
    #line 795 
    emg_14_emg_param_1_39 = emg_14_emg_param_1_39;
    #line 799 
    emg_wrapper_stmmac_ethtool_op_set_eee(emg_14_container,emg_14_emg_param_1_39);
    #line 803 
    ldv_free((void *)emg_14_emg_param_1_39);
    #line 805 
    break;
    #line 807 
    case 7: 
            #line 807 
    ;
    #line 809 
    emg_14_emg_param_1_38 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 809 
    emg_14_emg_param_1_38 = emg_14_emg_param_1_38;
    #line 813 
    emg_wrapper_stmmac_set_coalesce(emg_14_container,emg_14_emg_param_1_38);
    #line 817 
    ldv_free((void *)emg_14_emg_param_1_38);
    #line 819 
    break;
    #line 821 
    case 8: 
            #line 821 
    ;
    #line 823 
    emg_14_emg_param_1_36 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
    #line 823 
    emg_14_emg_param_1_36 = emg_14_emg_param_1_36;
    #line 824 
    emg_14_emg_param_2_37 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 824 
    emg_14_emg_param_2_37 = emg_14_emg_param_2_37;
    #line 828 
    stmmac_selftest_run(emg_14_container,emg_14_emg_param_1_36,emg_14_emg_param_2_37);
    #line 832 
    ldv_free((void *)emg_14_emg_param_1_36);
    #line 833 
    ldv_free((void *)emg_14_emg_param_2_37);
    #line 835 
    break;
    #line 837 
    case 9: 
            #line 837 
    ;
    #line 839 
    emg_wrapper_stmmac_nway_reset(emg_14_container);
    #line 841 
    break;
    #line 843 
    case 10: 
             #line 843 
    ;
    #line 845 
    emg_wrapper_stmmac_vlan_rx_kill_vid(emg_14_container,(unsigned short)((int)emg_14_emg_param_1_34),(unsigned short)((int)emg_14_emg_param_2_35));
    #line 847 
    break;
    #line 849 
    case 11: 
             #line 849 
    ;
    #line 851 
    emg_wrapper_stmmac_vlan_rx_add_vid(emg_14_container,(unsigned short)((int)emg_14_emg_param_1_32),(unsigned short)((int)emg_14_emg_param_2_33));
    #line 853 
    break;
    #line 855 
    case 12: 
             #line 855 
    ;
    #line 857 
    emg_wrapper_stmmac_tx_timeout(emg_14_container);
    #line 859 
    break;
    #line 861 
    case 13: 
             #line 861 
    ;
    #line 863 
    emg_14_emg_param_0_31 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 863 
    emg_14_emg_param_0_31 = emg_14_emg_param_0_31;
    #line 867 
    emg_wrapper_stmmac_xmit(emg_14_emg_param_0_31,emg_14_container);
    #line 871 
    ldv_free((void *)emg_14_emg_param_0_31);
    #line 873 
    break;
    #line 875 
    case 14: 
             #line 875 
    ;
    #line 877 
    emg_14_emg_param_1_29 = (enum tc_setup_type *)ldv_xmalloc_unknown_size(0UL);
    #line 877 
    emg_14_emg_param_1_29 = emg_14_emg_param_1_29;
    #line 878 
    emg_14_emg_param_2_30 = ldv_xmalloc_unknown_size(0UL);
    #line 878 
    emg_14_emg_param_2_30 = emg_14_emg_param_2_30;
    #line 882 
    emg_wrapper_stmmac_setup_tc(emg_14_container,*emg_14_emg_param_1_29,emg_14_emg_param_2_30);
    #line 886 
    ldv_free((void *)emg_14_emg_param_1_29);
    #line 887 
    ldv_free(emg_14_emg_param_2_30);
    #line 889 
    break;
    #line 891 
    case 15: 
             #line 891 
    ;
    #line 893 
    emg_wrapper_stmmac_set_rx_mode(emg_14_container);
    #line 895 
    break;
    #line 897 
    case 16: 
             #line 897 
    ;
    #line 899 
    emg_14_emg_param_1_28 = ldv_xmalloc_unknown_size(0UL);
    #line 899 
    emg_14_emg_param_1_28 = emg_14_emg_param_1_28;
    #line 903 
    emg_wrapper_stmmac_set_mac_address(emg_14_container,emg_14_emg_param_1_28);
    #line 907 
    ldv_free(emg_14_emg_param_1_28);
    #line 909 
    break;
    #line 911 
    case 17: 
             #line 911 
    ;
    #line 913 
    emg_wrapper_stmmac_set_features(emg_14_container,emg_14_emg_param_1_27);
    #line 915 
    break;
    #line 917 
    case 18: 
             #line 917 
    ;
    #line 919 
    emg_14_emg_param_1_25 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 919 
    emg_14_emg_param_1_25 = emg_14_emg_param_1_25;
    #line 920 
    emg_14_emg_param_2_26 = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    #line 920 
    emg_14_emg_param_2_26 = emg_14_emg_param_2_26;
    #line 924 
    emg_wrapper_stmmac_select_queue(emg_14_container,emg_14_emg_param_1_25,emg_14_emg_param_2_26);
    #line 928 
    ldv_free((void *)emg_14_emg_param_1_25);
    #line 929 
    ldv_free((void *)emg_14_emg_param_2_26);
    #line 931 
    break;
    #line 933 
    case 19: 
             #line 933 
    ;
    #line 935 
    emg_wrapper_stmmac_poll_controller(emg_14_container);
    #line 937 
    break;
    #line 939 
    case 20: 
             #line 939 
    ;
    #line 941 
    emg_wrapper_stmmac_fix_features(emg_14_container,emg_14_emg_param_1_24);
    #line 943 
    break;
    #line 945 
    case 21: 
             #line 945 
    ;
    #line 947 
    emg_14_emg_param_1_22 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 947 
    emg_14_emg_param_1_22 = emg_14_emg_param_1_22;
    #line 951 
    emg_wrapper_stmmac_ioctl(emg_14_container,emg_14_emg_param_1_22,emg_14_emg_param_2_23);
    #line 955 
    ldv_free((void *)emg_14_emg_param_1_22);
    #line 957 
    break;
    #line 959 
    case 22: 
             #line 959 
    ;
    #line 961 
    emg_wrapper_stmmac_change_mtu(emg_14_container,emg_14_emg_param_1_21);
    #line 963 
    break;
    #line 965 
    case 23: 
             #line 965 
    ;
    #line 967 
    emg_14_emg_param_1_20 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 967 
    emg_14_emg_param_1_20 = emg_14_emg_param_1_20;
    #line 971 
    emg_wrapper_stmmac_get_wol(emg_14_container,emg_14_emg_param_1_20);
    #line 975 
    ldv_free((void *)emg_14_emg_param_1_20);
    #line 977 
    break;
    #line 979 
    case 24: 
             #line 979 
    ;
    #line 981 
    emg_14_emg_param_1_18 = (struct ethtool_tunable *)ldv_xmalloc_unknown_size(0UL);
    #line 981 
    emg_14_emg_param_1_18 = emg_14_emg_param_1_18;
    #line 982 
    emg_14_emg_param_2_19 = ldv_xmalloc_unknown_size(0UL);
    #line 982 
    emg_14_emg_param_2_19 = emg_14_emg_param_2_19;
    #line 986 
    emg_wrapper_stmmac_get_tunable(emg_14_container,emg_14_emg_param_1_18,emg_14_emg_param_2_19);
    #line 990 
    ldv_free((void *)emg_14_emg_param_1_18);
    #line 991 
    ldv_free(emg_14_emg_param_2_19);
    #line 993 
    break;
    #line 995 
    case 25: 
             #line 995 
    ;
    #line 997 
    emg_14_emg_param_1_17 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
    #line 997 
    emg_14_emg_param_1_17 = emg_14_emg_param_1_17;
    #line 1001 
    emg_wrapper_stmmac_get_ts_info(emg_14_container,emg_14_emg_param_1_17);
    #line 1005 
    ldv_free((void *)emg_14_emg_param_1_17);
    #line 1007 
    break;
    #line 1009 
    case 26: 
             #line 1009 
    ;
    #line 1011 
    emg_14_emg_param_2_16 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1011 
    emg_14_emg_param_2_16 = emg_14_emg_param_2_16;
    #line 1015 
    emg_wrapper_stmmac_get_strings(emg_14_container,emg_14_emg_param_1_15,emg_14_emg_param_2_16);
    #line 1019 
    ldv_free((void *)emg_14_emg_param_2_16);
    #line 1021 
    break;
    #line 1023 
    case 27: 
             #line 1023 
    ;
    #line 1025 
    emg_wrapper_stmmac_get_sset_count(emg_14_container,emg_14_emg_param_1_14);
    #line 1027 
    break;
    #line 1029 
    case 28: 
             #line 1029 
    ;
    #line 1031 
    emg_14_emg_param_1_12 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 1031 
    emg_14_emg_param_1_12 = emg_14_emg_param_1_12;
    #line 1032 
    emg_14_emg_param_2_13 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 1032 
    emg_14_emg_param_2_13 = emg_14_emg_param_2_13;
    #line 1036 
    emg_wrapper_stmmac_get_rxnfc(emg_14_container,emg_14_emg_param_1_12,emg_14_emg_param_2_13);
    #line 1040 
    ldv_free((void *)emg_14_emg_param_1_12);
    #line 1041 
    ldv_free((void *)emg_14_emg_param_2_13);
    #line 1043 
    break;
    #line 1045 
    case 29: 
             #line 1045 
    ;
    #line 1047 
    emg_wrapper_stmmac_get_rxfh_key_size(emg_14_container);
    #line 1049 
    break;
    #line 1051 
    case 30: 
             #line 1051 
    ;
    #line 1053 
    emg_wrapper_stmmac_get_rxfh_indir_size(emg_14_container);
    #line 1055 
    break;
    #line 1057 
    case 31: 
             #line 1057 
    ;
    #line 1059 
    emg_14_emg_param_1_9 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 1059 
    emg_14_emg_param_1_9 = emg_14_emg_param_1_9;
    #line 1060 
    emg_14_emg_param_2_10 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1060 
    emg_14_emg_param_2_10 = emg_14_emg_param_2_10;
    #line 1061 
    emg_14_emg_param_3_11 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1061 
    emg_14_emg_param_3_11 = emg_14_emg_param_3_11;
    #line 1065 
    emg_wrapper_stmmac_get_rxfh(emg_14_container,emg_14_emg_param_1_9,emg_14_emg_param_2_10,emg_14_emg_param_3_11);
    #line 1069 
    ldv_free((void *)emg_14_emg_param_1_9);
    #line 1070 
    ldv_free((void *)emg_14_emg_param_2_10);
    #line 1071 
    ldv_free((void *)emg_14_emg_param_3_11);
    #line 1073 
    break;
    #line 1075 
    case 32: 
             #line 1075 
    ;
    #line 1077 
    emg_wrapper_stmmac_ethtool_get_regs_len(emg_14_container);
    #line 1079 
    break;
    #line 1081 
    case 33: 
             #line 1081 
    ;
    #line 1083 
    emg_14_emg_param_1_7 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 1083 
    emg_14_emg_param_1_7 = emg_14_emg_param_1_7;
    #line 1084 
    emg_14_emg_param_2_8 = ldv_xmalloc_unknown_size(0UL);
    #line 1084 
    emg_14_emg_param_2_8 = emg_14_emg_param_2_8;
    #line 1088 
    emg_wrapper_stmmac_ethtool_gregs(emg_14_container,emg_14_emg_param_1_7,emg_14_emg_param_2_8);
    #line 1092 
    ldv_free((void *)emg_14_emg_param_1_7);
    #line 1093 
    ldv_free(emg_14_emg_param_2_8);
    #line 1095 
    break;
    #line 1097 
    case 34: 
             #line 1097 
    ;
    #line 1099 
    emg_14_emg_param_1_6 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1099 
    emg_14_emg_param_1_6 = emg_14_emg_param_1_6;
    #line 1103 
    emg_wrapper_stmmac_get_pauseparam(emg_14_container,emg_14_emg_param_1_6);
    #line 1107 
    ldv_free((void *)emg_14_emg_param_1_6);
    #line 1109 
    break;
    #line 1111 
    case 35: 
             #line 1111 
    ;
    #line 1113 
    emg_wrapper_stmmac_ethtool_getmsglevel(emg_14_container);
    #line 1115 
    break;
    #line 1117 
    case 36: 
             #line 1117 
    ;
    #line 1119 
    emg_14_emg_param_1_5 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 1119 
    emg_14_emg_param_1_5 = emg_14_emg_param_1_5;
    #line 1123 
    emg_wrapper_stmmac_ethtool_get_link_ksettings(emg_14_container,emg_14_emg_param_1_5);
    #line 1127 
    ldv_free((void *)emg_14_emg_param_1_5);
    #line 1129 
    break;
    #line 1131 
    case 37: 
             #line 1131 
    ;
    #line 1133 
    ethtool_op_get_link(emg_14_container);
    #line 1135 
    break;
    #line 1137 
    case 38: 
             #line 1137 
    ;
    #line 1139 
    emg_14_emg_param_1_3 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 1139 
    emg_14_emg_param_1_3 = emg_14_emg_param_1_3;
    #line 1140 
    emg_14_emg_param_2_4 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 1140 
    emg_14_emg_param_2_4 = emg_14_emg_param_2_4;
    #line 1144 
    emg_wrapper_stmmac_get_ethtool_stats(emg_14_container,emg_14_emg_param_1_3,emg_14_emg_param_2_4);
    #line 1148 
    ldv_free((void *)emg_14_emg_param_1_3);
    #line 1149 
    ldv_free((void *)emg_14_emg_param_2_4);
    #line 1151 
    break;
    #line 1153 
    case 39: 
             #line 1153 
    ;
    #line 1155 
    emg_14_emg_param_1_2 = (struct ethtool_eee *)ldv_xmalloc_unknown_size(0UL);
    #line 1155 
    emg_14_emg_param_1_2 = emg_14_emg_param_1_2;
    #line 1159 
    emg_wrapper_stmmac_ethtool_op_get_eee(emg_14_container,emg_14_emg_param_1_2);
    #line 1163 
    ldv_free((void *)emg_14_emg_param_1_2);
    #line 1165 
    break;
    #line 1167 
    case 40: 
             #line 1167 
    ;
    #line 1169 
    emg_14_emg_param_1_1 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1169 
    emg_14_emg_param_1_1 = emg_14_emg_param_1_1;
    #line 1173 
    emg_wrapper_stmmac_ethtool_getdrvinfo(emg_14_container,emg_14_emg_param_1_1);
    #line 1177 
    ldv_free((void *)emg_14_emg_param_1_1);
    #line 1179 
    break;
    #line 1181 
    case 41: 
             #line 1181 
    ;
    #line 1183 
    emg_14_emg_param_1_0 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1183 
    emg_14_emg_param_1_0 = emg_14_emg_param_1_0;
    #line 1187 
    emg_wrapper_stmmac_get_coalesce(emg_14_container,emg_14_emg_param_1_0);
    #line 1191 
    ldv_free((void *)emg_14_emg_param_1_0);
    #line 1193 
    break;
    #line 1195 
    case 42: 
             #line 1195 
    ;
    #line 1197 
    emg_wrapper_stmmac_check_if_running(emg_14_container);
    #line 1200 
    if (emg_repeat_cnt_call_14 > 0) {
      #line 1201 
      emg_repeat_cnt_call_14 --;
      #line 1203 
      goto emg_call_14;
    }
    else 
         #line 1205 
         __VERIFIER_assume(0);
    #line 1209 
    break;
    #line 1211 
    case 43: 
             #line 1211 
    ;
    #line 1215 
    break;
    #line 1217 
    default: 
             #line 1217 
    ;
    #line 1217 
    __VERIFIER_assume(0);
  }
  #line 1220 
  return (void *)0;
}

#line 1225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_4(void *arg0)
{
  #line 1228 
  struct timer_list *emg_15_container;
  #line 1229 
  unsigned long emg_15_emg_param_0_0;
  #line 1231 
  struct emg_struct_timer_scenario_4_15 *data = (struct emg_struct_timer_scenario_4_15 *)arg0;
  #line 1236 
  if (data != (struct emg_struct_timer_scenario_4_15 *)0) {
    #line 1237 
    emg_15_container = data->arg0;
    #line 1238 
    ldv_free((void *)data);
  }
  #line 1244 
  ldv_switch_to_interrupt_context();
  #line 1248 
  if (emg_15_container->function != (void (*)(struct timer_list *))0) 
    #line 1249 
    (*(emg_15_container->function))((struct timer_list *)emg_15_emg_param_0_0);
  #line 1255 
  ldv_switch_to_process_context();
  #line 1262 
  return (void *)0;
}

#line 1267  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1)
{
  #line 1270 
  struct dentry *emg_2_dentry;
  #line 1271 
  struct inode *emg_2_inode;
  #line 1273 
  if (ldv_undef_int() != 0) {
    #line 1275 
    emg_2_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 1276 
    emg_2_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 1277 
    emg_2_inode->i_mode = (unsigned short)16877U;
    #line 1278 
    emg_2_dentry->d_parent = arg1;
    #line 1279 
    emg_2_dentry->d_inode = emg_2_inode;
    #line 1280 
    return emg_2_dentry;
  }
  else {
    #line 1284 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 1292  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  #line 1295 
  struct dentry *emg_3_dentry;
  #line 1296 
  struct file_operations *emg_3_file_operations;
  #line 1297 
  struct inode *emg_3_inode;
  #line 1299 
  if (ldv_undef_int() != 0) {
    #line 1301 
    emg_3_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 1302 
    emg_3_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 1303 
    emg_3_inode->i_mode = arg1;
    #line 1304 
    emg_3_dentry->d_parent = arg2;
    #line 1305 
    emg_3_inode->i_private = arg3;
    #line 1306 
    emg_3_file_operations = arg4;
    #line 1307 
    emg_3_dentry->d_inode = emg_3_inode;
    #line 1308 
    ldv_save_allocated_memory_to_list((void *)emg_3_dentry);
    #line 1312 
    emg_dispatch_register_3(emg_3_file_operations);
    #line 1316 
    return emg_3_dentry;
  }
  else {
    #line 1320 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 1328  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 1331 
  struct timer_list *emg_4_timer_list;
  #line 1334 
  emg_4_timer_list = arg0;
  #line 1338 
  emg_dispatch_instance_deregister_4(emg_4_timer_list);
  #line 1339 
  ;
  #line 1339 
  return 0;
}

#line 1345  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 1348 
  int emg_5_line;
  #line 1351 
  emg_5_line = (int)arg0;
  #line 1355 
  emg_dispatch_irq_deregister_5(emg_5_line);
  #line 1356 
  ;
  #line 1356 
  return (void *)0;
}

#line 1362  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 1365 
  struct timer_list *emg_6_timer_list;
  #line 1367 
  if (ldv_undef_int() != 0) {
    #line 1369 
    emg_6_timer_list = arg0;
    #line 1373 
    emg_dispatch_instance_register_6(emg_6_timer_list);
    #line 1377 
    return 1;
  }
  else 
       #line 1381 
       return 0;
}

#line 1389  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  #line 1392 
  struct work_struct *emg_7_work_struct;
  #line 1394 
  if (ldv_undef_int() != 0) {
    #line 1396 
    emg_7_work_struct = arg1;
    #line 1400 
    if (emg_7_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1401 
      (*(emg_7_work_struct->func))(emg_7_work_struct);
    #line 1406 
    return (_Bool)1;
  }
  else 
       #line 1410 
       return (_Bool)0;
}

#line 1418  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 1421 
  struct net_device *emg_8_netdev;
  #line 1422 
  int emg_8_ret;
  #line 1425 
  emg_8_ret = ldv_undef_int();
  #line 1426 
  emg_8_ret = ldv_undef_int();
  #line 1427 
  if (ldv_undef_int() != 0) {
    #line 1429 
    emg_8_netdev = arg0;
    #line 1433 
    emg_8_ret = emg_wrapper_stmmac_open(emg_8_netdev);
    #line 1436 
    if (ldv_undef_int() != 0) {
      #line 1438 
      __VERIFIER_assume(emg_8_ret == 0);
      #line 1442 
      emg_dispatch_register_8(emg_8_netdev);
      #line 1446 
      return 0;
    }
    else {
      #line 1450 
      __VERIFIER_assume(emg_8_ret != 0);
      #line 1451 
      ldv_failed_register_netdev();
      #line 1452 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 1457 
    ldv_failed_register_netdev();
    #line 1458 
    return ldv_undef_int_negative();
  }
}

#line 1466  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 1469 
  enum irqreturn (*emg_9_callback)(int , void *);
  #line 1470 
  void *emg_9_data;
  #line 1471 
  int emg_9_line;
  #line 1472 
  enum irqreturn (*emg_9_thread)(int , void *);
  #line 1474 
  emg_9_callback = & emg_wrapper_stmmac_interrupt;
  #line 1475 
  if (ldv_undef_int() != 0) {
    #line 1477 
    emg_9_line = (int)arg0;
    #line 1478 
    emg_9_callback = arg1;
    #line 1479 
    emg_9_thread = (enum irqreturn (*)(int , void *))0;
    #line 1480 
    emg_9_data = arg4;
    #line 1484 
    emg_dispatch_irq_register_9(emg_9_line,emg_9_callback,emg_9_thread,emg_9_data);
    #line 1488 
    return 0;
  }
  else {
    #line 1492 
    return ldv_undef_int_negative();
  }
}

#line 1500  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 1503 
  struct net_device *emg_10_netdev;
  #line 1506 
  emg_10_netdev = arg0;
  #line 1510 
  emg_wrapper_stmmac_release(emg_10_netdev);
  #line 1514 
  emg_dispatch_deregister_10(emg_10_netdev);
  #line 1517 
  return;
}

#line 1522  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1525 
  int emg_1_ret;
  #line 1528 
  emg_1_ret = emg_stmmac_init();
  #line 1529 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1532 
  if (ldv_undef_int() != 0) {
    #line 1534 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1538 
    emg_stmmac_exit();
  }
  else 
       #line 1542 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1546 
  return (void *)0;
}

#line 1551  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/stmicro/stmmac/stmmac.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1553 
  ldv_initialize();
  #line 1555 
  emg_entry_point_insmod((void *)0);
  #line 1557 
  return 0;
}

