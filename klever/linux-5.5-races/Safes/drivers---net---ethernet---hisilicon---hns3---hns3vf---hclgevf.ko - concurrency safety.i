/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_9 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_9 key ;
} __attribute__((__aligned__(8)));
#line 59 
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_113 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_113 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 195 
struct hrtimer;
#line 196 
enum hrtimer_restart;
#line 220 
struct workqueue_struct;
#line 221 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_126 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_127 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_125 {
   struct __anonstruct_126 __anonCompField___anonunion_125_28 ;
   struct __anonstruct_127 __anonCompField___anonunion_125_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_125 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_128 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_128 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_130 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_131 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct list_head slab_list ;
   struct __anonstruct_134 __anonCompField___anonunion_133_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_136 __anonCompField___anonunion_135_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   union __anonunion_133 __anonCompField___anonstruct_132_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_135 __anonCompField___anonstruct_132_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_140 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_140 __anonCompField___anonstruct_139_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_31 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_32 ;
   struct __anonstruct_132 __anonCompField___anonunion_129_37 ;
   struct __anonstruct_137 __anonCompField___anonunion_129_38 ;
   struct __anonstruct_138 __anonCompField___anonunion_129_39 ;
   struct __anonstruct_139 __anonCompField___anonunion_129_41 ;
   struct __anonstruct_141 __anonCompField___anonunion_129_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_129 __anonCompField_page_43 ;
   union __anonunion_142 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_143 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_143 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_144 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_144 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/apic.h"
struct irq_data;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/arch_topology.h"
struct device_node;
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct user_struct;
#line 178 
struct writeback_control;
#line 179 
struct bdi_writeback;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 305 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_272 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_272 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_273 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_273 kgid_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_276 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_276 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_277 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_278 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_279 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_280 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_283 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_284 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_282 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_283 _addr_bnd ;
   struct __anonstruct__addr_pkey_284 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_281 {
   void *_addr ;
   union __anonunion_282 __anonCompField___anonstruct__sigfault_281_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_285 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_286 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_277 _kill ;
   struct __anonstruct__timer_278 _timer ;
   struct __anonstruct__rt_279 _rt ;
   struct __anonstruct__sigchld_280 _sigchld ;
   struct __anonstruct__sigfault_281 _sigfault ;
   struct __anonstruct__sigpoll_285 _sigpoll ;
   struct __anonstruct__sigsys_286 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_291 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_291 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_296 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_296 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_298 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_298 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_387 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_386 {
   struct __anonstruct_387 __anonCompField___anonunion_386_53 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_386 __anonCompField_lockref_54 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_389 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_388 {
   struct __anonstruct_389 __anonCompField___anonunion_388_55 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_388 __anonCompField_qstr_56 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_390 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_391 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_390 __anonCompField_dentry_57 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_391 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_409 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_409 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_410 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_411 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_410 __anonCompField_io_cq_60 ;
   union __anonunion_411 __anonCompField_io_cq_61 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct export_operations;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kobject;
#line 293 
struct kstatfs;
#line 294 
struct swap_info_struct;
#line 295 
struct iov_iter;
#line 296 
struct fscrypt_info;
#line 297 
struct fscrypt_operations;
#line 298 
struct fsverity_info;
#line 299 
struct fsverity_operations;
#line 300 
struct fs_context;
#line 301 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_412 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_412 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_413 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_413 __anonCompField_kqid_62 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_418 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_419 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_420 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_421 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_418 __anonCompField_inode_63 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_419 __anonCompField_inode_64 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_420 __anonCompField_inode_65 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_421 __anonCompField_inode_66 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_422 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_422 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_424 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_423 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_424 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_423 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 3599 
struct sock;
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_438 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_440 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_439 {
   unsigned long nr_segs ;
   struct __anonstruct_440 __anonCompField___anonunion_439_68 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_438 __anonCompField_iov_iter_67 ;
   union __anonunion_439 __anonCompField_iov_iter_69 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 422 
struct ns_common;
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct sk_buff;
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_463 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_463 __anonCompField_kernfs_node_72 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct irq_domain;
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_466 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_466 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_467 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_467 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_control {
   u16 thoff ;
   u16 addr_type ;
   u32 flags ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_basic {
   __be16 n_proto ;
   u8 ip_proto ;
   u8 padding ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_tags {
   u32 flow_label ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_470 {
   u16 vlan_id : 12 ;
   u16 vlan_dei : 1 ;
   u16 vlan_priority : 3 ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_469 {
   struct __anonstruct_470 __anonCompField___anonunion_469_73 ;
   __be16 vlan_tci ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_vlan {
   union __anonunion_469 __anonCompField_flow_dissector_key_vlan_74 ;
   __be16 vlan_tpid ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_keyid {
   __be32 keyid ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ipv4_addrs {
   __be32 src ;
   __be32 dst ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ipv6_addrs {
   struct in6_addr src ;
   struct in6_addr dst ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_tipc {
   __be32 key ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_471 {
   struct flow_dissector_key_ipv4_addrs v4addrs ;
   struct flow_dissector_key_ipv6_addrs v6addrs ;
   struct flow_dissector_key_tipc tipckey ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_addrs {
   union __anonunion_471 __anonCompField_flow_dissector_key_addrs_75 ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_473 {
   __be16 src ;
   __be16 dst ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_472 {
   __be32 ports ;
   struct __anonstruct_473 __anonCompField___anonunion_472_76 ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ports {
   union __anonunion_472 __anonCompField_flow_dissector_key_ports_77 ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_474 {
   u8 type ;
   u8 code ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_icmp {
   struct __anonstruct_474 __anonCompField_flow_dissector_key_icmp_78 ;
   u16 id ;
};
#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_keys {
   struct flow_dissector_key_control control ;
   struct flow_dissector_key_basic basic ;
   struct flow_dissector_key_tags tags ;
   struct flow_dissector_key_vlan vlan ;
   struct flow_dissector_key_vlan cvlan ;
   struct flow_dissector_key_keyid keyid ;
   struct flow_dissector_key_ports ports ;
   struct flow_dissector_key_icmp icmp ;
   struct flow_dissector_key_addrs addrs ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_489 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_488 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_489 __anonCompField___anonstruct_488_85 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_487 {
   struct __anonstruct_488 __anonCompField___anonunion_487_86 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_490 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_491 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_493 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_492 {
   struct __anonstruct_493 __anonCompField___anonunion_492_90 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_495 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_494 {
   __wsum csum ;
   struct __anonstruct_495 __anonCompField___anonunion_494_92 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_496 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_497 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_498 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_487 __anonCompField_sk_buff_87 ;
   union __anonunion_490 __anonCompField_sk_buff_88 ;
   union __anonunion_491 __anonCompField_sk_buff_89 ;
   char cb[48U] ;
   union __anonunion_492 __anonCompField_sk_buff_91 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_494 __anonCompField_sk_buff_93 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_496 __anonCompField_sk_buff_94 ;
   __u32 secmark ;
   union __anonunion_497 __anonCompField_sk_buff_95 ;
   union __anonunion_498 __anonCompField_sk_buff_96 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 1165 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_528 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_528 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_529 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_529 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_530 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_530 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_531 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_531 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_532 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_532 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_533 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_533 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_534 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_534 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_535 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_535 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_536 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_537 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_536 ifr_ifrn ;
   union __anonunion_ifr_ifru_537 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 139 
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irq_affinity {
   unsigned int pre_vectors ;
   unsigned int post_vectors ;
   unsigned int nr_sets ;
   unsigned int set_size[4U] ;
   void (*calc_sets)(struct irq_affinity *, unsigned int ) ;
   void *priv ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14506 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14507 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14506 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14507 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_697 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_696 {
   void *validation_data ;
   struct __anonstruct_697 __anonCompField___anonunion_696_160 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_696 __anonCompField_nla_policy_161 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqhandler.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_711 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_711 __anonCompField_kernel_param_163 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_715 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_715 __anonCompField_pci_dev_165 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
struct hnae3_handle;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_ae_algo;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_queue {
   void *io_base ;
   struct hnae3_ae_algo *ae_algo ;
   struct hnae3_handle *handle ;
   int tqp_index ;
   u32 buf_size ;
   u16 tx_desc_num ;
   u16 rx_desc_num ;
};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hns3_mac_stats {
   u64 tx_pause_cnt ;
   u64 rx_pause_cnt ;
};
#line 100 
enum hnae3_loop {
    HNAE3_LOOP_APP = 0,
    HNAE3_LOOP_SERIAL_SERDES = 1,
    HNAE3_LOOP_PARALLEL_SERDES = 2,
    HNAE3_LOOP_PHY = 3,
    HNAE3_LOOP_NONE = 4
};
#line 108 
enum hnae3_client_type {
    HNAE3_CLIENT_KNIC = 0,
    HNAE3_CLIENT_ROCE = 1
};
#line 138 
enum hnae3_reset_notify_type {
    HNAE3_UP_CLIENT = 0,
    HNAE3_DOWN_CLIENT = 1,
    HNAE3_INIT_CLIENT = 2,
    HNAE3_UNINIT_CLIENT = 3,
    HNAE3_RESTORE_CLIENT = 4
};
#line 146 
enum hnae3_hw_error_type {
    HNAE3_PPU_POISON_ERROR = 0,
    HNAE3_CMDQ_ECC_ERROR = 1,
    HNAE3_IMP_RD_POISON_ERROR = 2
};
#line 152 
enum hnae3_reset_type {
    HNAE3_VF_RESET = 0,
    HNAE3_VF_FUNC_RESET = 1,
    HNAE3_VF_PF_FUNC_RESET = 2,
    HNAE3_VF_FULL_RESET = 3,
    HNAE3_FLR_RESET = 4,
    HNAE3_FUNC_RESET = 5,
    HNAE3_GLOBAL_RESET = 6,
    HNAE3_IMP_RESET = 7,
    HNAE3_UNKNOWN_RESET = 8,
    HNAE3_NONE_RESET = 9
};
#line 170 
enum hnae3_port_base_vlan_state {
    HNAE3_PORT_BASE_VLAN_DISABLE = 0,
    HNAE3_PORT_BASE_VLAN_ENABLE = 1,
    HNAE3_PORT_BASE_VLAN_MODIFY = 2,
    HNAE3_PORT_BASE_VLAN_NOCHANGE = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_vector_info {
   u8 *io_addr ;
   int vector ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_ring_chain_node {
   struct hnae3_ring_chain_node *next ;
   u32 tqp_index ;
   u32 flag ;
   u32 int_gl_idx ;
};
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_client_ops {
   int (*init_instance)(struct hnae3_handle *) ;
   void (*uninit_instance)(struct hnae3_handle *, bool ) ;
   void (*link_status_change)(struct hnae3_handle *, bool ) ;
   int (*setup_tc)(struct hnae3_handle *, u8 ) ;
   int (*reset_notify)(struct hnae3_handle *, enum hnae3_reset_notify_type ) ;
   void (*process_hw_error)(struct hnae3_handle *, enum hnae3_hw_error_type ) ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_client {
   char name[16U] ;
   unsigned long state ;
   enum hnae3_client_type type ;
   struct hnae3_client_ops *ops ;
   struct list_head node ;
};
#line 233 
struct hnae3_ae_ops;
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_ae_dev {
   struct pci_dev *pdev ;
   struct hnae3_ae_ops *ops ;
   struct list_head node ;
   u32 flag ;
   unsigned long hw_err_reset_req ;
   enum hnae3_reset_type reset_type ;
   void *priv ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_ae_ops {
   int (*init_ae_dev)(struct hnae3_ae_dev *) ;
   void (*uninit_ae_dev)(struct hnae3_ae_dev *) ;
   void (*flr_prepare)(struct hnae3_ae_dev *) ;
   void (*flr_done)(struct hnae3_ae_dev *) ;
   int (*init_client_instance)(struct hnae3_client *, struct hnae3_ae_dev *) ;
   void (*uninit_client_instance)(struct hnae3_client *, struct hnae3_ae_dev *) ;
   int (*start)(struct hnae3_handle *) ;
   void (*stop)(struct hnae3_handle *) ;
   int (*client_start)(struct hnae3_handle *) ;
   void (*client_stop)(struct hnae3_handle *) ;
   int (*get_status)(struct hnae3_handle *) ;
   void (*get_ksettings_an_result)(struct hnae3_handle *, u8 *, u32 *, u8 *) ;
   int (*cfg_mac_speed_dup_h)(struct hnae3_handle *, int , u8 ) ;
   void (*get_media_type)(struct hnae3_handle *, u8 *, u8 *) ;
   int (*check_port_speed)(struct hnae3_handle *, u32 ) ;
   void (*get_fec)(struct hnae3_handle *, u8 *, u8 *) ;
   int (*set_fec)(struct hnae3_handle *, u32 ) ;
   void (*adjust_link)(struct hnae3_handle *, int , int ) ;
   int (*set_loopback)(struct hnae3_handle *, enum hnae3_loop , bool ) ;
   int (*set_promisc_mode)(struct hnae3_handle *, bool , bool ) ;
   int (*set_mtu)(struct hnae3_handle *, int ) ;
   void (*get_pauseparam)(struct hnae3_handle *, u32 *, u32 *, u32 *) ;
   int (*set_pauseparam)(struct hnae3_handle *, u32 , u32 , u32 ) ;
   int (*set_autoneg)(struct hnae3_handle *, bool ) ;
   int (*get_autoneg)(struct hnae3_handle *) ;
   int (*restart_autoneg)(struct hnae3_handle *) ;
   int (*halt_autoneg)(struct hnae3_handle *, bool ) ;
   void (*get_coalesce_usecs)(struct hnae3_handle *, u32 *, u32 *) ;
   void (*get_rx_max_coalesced_frames)(struct hnae3_handle *, u32 *, u32 *) ;
   int (*set_coalesce_usecs)(struct hnae3_handle *, u32 ) ;
   int (*set_coalesce_frames)(struct hnae3_handle *, u32 ) ;
   void (*get_coalesce_range)(struct hnae3_handle *, u32 *, u32 *, u32 *, u32 *, u32 *, u32 *, u32 *, u32 *) ;
   void (*get_mac_addr)(struct hnae3_handle *, u8 *) ;
   int (*set_mac_addr)(struct hnae3_handle *, void *, bool ) ;
   int (*do_ioctl)(struct hnae3_handle *, struct ifreq *, int ) ;
   int (*add_uc_addr)(struct hnae3_handle *, unsigned char *) ;
   int (*rm_uc_addr)(struct hnae3_handle *, unsigned char *) ;
   int (*set_mc_addr)(struct hnae3_handle *, void *) ;
   int (*add_mc_addr)(struct hnae3_handle *, unsigned char *) ;
   int (*rm_mc_addr)(struct hnae3_handle *, unsigned char *) ;
   void (*set_tso_stats)(struct hnae3_handle *, int ) ;
   void (*update_stats)(struct hnae3_handle *, struct net_device_stats *) ;
   void (*get_stats)(struct hnae3_handle *, u64 *) ;
   void (*get_mac_stats)(struct hnae3_handle *, struct hns3_mac_stats *) ;
   void (*get_strings)(struct hnae3_handle *, u32 , u8 *) ;
   int (*get_sset_count)(struct hnae3_handle *, int ) ;
   void (*get_regs)(struct hnae3_handle *, u32 *, void *) ;
   int (*get_regs_len)(struct hnae3_handle *) ;
   u32 (*get_rss_key_size)(struct hnae3_handle *) ;
   u32 (*get_rss_indir_size)(struct hnae3_handle *) ;
   int (*get_rss)(struct hnae3_handle *, u32 *, u8 *, u8 *) ;
   int (*set_rss)(struct hnae3_handle *, u32 *, u8 *, u8 ) ;
   int (*set_rss_tuple)(struct hnae3_handle *, struct ethtool_rxnfc *) ;
   int (*get_rss_tuple)(struct hnae3_handle *, struct ethtool_rxnfc *) ;
   int (*get_tc_size)(struct hnae3_handle *) ;
   int (*get_vector)(struct hnae3_handle *, u16 , struct hnae3_vector_info *) ;
   int (*put_vector)(struct hnae3_handle *, int ) ;
   int (*map_ring_to_vector)(struct hnae3_handle *, int , struct hnae3_ring_chain_node *) ;
   int (*unmap_ring_from_vector)(struct hnae3_handle *, int , struct hnae3_ring_chain_node *) ;
   int (*reset_queue)(struct hnae3_handle *, u16 ) ;
   u32 (*get_fw_version)(struct hnae3_handle *) ;
   void (*get_mdix_mode)(struct hnae3_handle *, u8 *, u8 *) ;
   void (*enable_vlan_filter)(struct hnae3_handle *, bool ) ;
   int (*set_vlan_filter)(struct hnae3_handle *, __be16 , u16 , bool ) ;
   int (*set_vf_vlan_filter)(struct hnae3_handle *, int , u16 , u8 , __be16 ) ;
   int (*enable_hw_strip_rxvtag)(struct hnae3_handle *, bool ) ;
   void (*reset_event)(struct pci_dev *, struct hnae3_handle *) ;
   enum hnae3_reset_type (*get_reset_level)(struct hnae3_ae_dev *, unsigned long *) ;
   void (*set_default_reset_request)(struct hnae3_ae_dev *, enum hnae3_reset_type ) ;
   void (*get_channels)(struct hnae3_handle *, struct ethtool_channels *) ;
   void (*get_tqps_and_rss_info)(struct hnae3_handle *, u16 *, u16 *) ;
   int (*set_channels)(struct hnae3_handle *, u32 , bool ) ;
   void (*get_flowctrl_adv)(struct hnae3_handle *, u32 *) ;
   int (*set_led_id)(struct hnae3_handle *, enum ethtool_phys_id_state ) ;
   void (*get_link_mode)(struct hnae3_handle *, unsigned long *, unsigned long *) ;
   int (*add_fd_entry)(struct hnae3_handle *, struct ethtool_rxnfc *) ;
   int (*del_fd_entry)(struct hnae3_handle *, struct ethtool_rxnfc *) ;
   void (*del_all_fd_entries)(struct hnae3_handle *, bool ) ;
   int (*get_fd_rule_cnt)(struct hnae3_handle *, struct ethtool_rxnfc *) ;
   int (*get_fd_rule_info)(struct hnae3_handle *, struct ethtool_rxnfc *) ;
   int (*get_fd_all_rules)(struct hnae3_handle *, struct ethtool_rxnfc *, u32 *) ;
   int (*restore_fd_rules)(struct hnae3_handle *) ;
   void (*enable_fd)(struct hnae3_handle *, bool ) ;
   int (*add_arfs_entry)(struct hnae3_handle *, u16 , u16 , struct flow_keys *) ;
   int (*dbg_run_cmd)(struct hnae3_handle *, char *) ;
   pci_ers_result_t (*handle_hw_ras_error)(struct hnae3_ae_dev *) ;
   bool (*get_hw_reset_stat)(struct hnae3_handle *) ;
   bool (*ae_dev_resetting)(struct hnae3_handle *) ;
   unsigned long (*ae_dev_reset_cnt)(struct hnae3_handle *) ;
   int (*set_gro_en)(struct hnae3_handle *, bool ) ;
   u16 (*get_global_queue_id)(struct hnae3_handle *, u16 ) ;
   void (*set_timer_task)(struct hnae3_handle *, bool ) ;
   int (*mac_connect_phy)(struct hnae3_handle *) ;
   void (*mac_disconnect_phy)(struct hnae3_handle *) ;
   void (*restore_vlan_table)(struct hnae3_handle *) ;
   int (*get_vf_config)(struct hnae3_handle *, int , struct ifla_vf_info *) ;
   int (*set_vf_link_state)(struct hnae3_handle *, int , int ) ;
   int (*set_vf_spoofchk)(struct hnae3_handle *, int , bool ) ;
   int (*set_vf_trust)(struct hnae3_handle *, int , bool ) ;
   int (*set_vf_rate)(struct hnae3_handle *, int , int , int , bool ) ;
   int (*set_vf_mac)(struct hnae3_handle *, int , u8 *) ;
};
#line 558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_dcb_ops {
   int (*ieee_getets)(struct hnae3_handle *, struct ieee_ets *) ;
   int (*ieee_setets)(struct hnae3_handle *, struct ieee_ets *) ;
   int (*ieee_getpfc)(struct hnae3_handle *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct hnae3_handle *, struct ieee_pfc *) ;
   u8 (*getdcbx)(struct hnae3_handle *) ;
   u8 (*setdcbx)(struct hnae3_handle *, u8 ) ;
   int (*setup_tc)(struct hnae3_handle *, u8 , u8 *) ;
};
#line 572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_ae_algo {
   struct hnae3_ae_ops *ops ;
   struct list_head node ;
   struct pci_device_id *pdev_id_table ;
};
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_tc_info {
   u16 tqp_offset ;
   u16 tqp_count ;
   u8 tc ;
   bool enable ;
};
#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_knic_private_info {
   struct net_device *netdev ;
   u16 rss_size ;
   u16 req_rss_size ;
   u16 rx_buf_len ;
   u16 num_tx_desc ;
   u16 num_rx_desc ;
   u8 num_tc ;
   u8 prio_tc[8U] ;
   struct hnae3_tc_info tc_info[8U] ;
   u16 num_tqps ;
   struct hnae3_queue **tqp ;
   struct hnae3_dcb_ops *dcb_ops ;
   u16 int_rl_setting ;
   enum pkt_hash_types rss_type ;
};
#line 611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_roce_private_info {
   struct net_device *netdev ;
   void *roce_io_base ;
   int base_vector ;
   int num_vectors ;
   unsigned long reset_state ;
   unsigned long instance_state ;
   unsigned long state ;
};
#line 626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_unic_private_info {
   struct net_device *netdev ;
   u16 rx_buf_len ;
   u16 num_tx_desc ;
   u16 num_rx_desc ;
   u16 num_tqps ;
   struct hnae3_queue **tqp ;
};
#line 651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
union __anonunion_716 {
   struct net_device *netdev ;
   struct hnae3_knic_private_info kinfo ;
   struct hnae3_unic_private_info uinfo ;
   struct hnae3_roce_private_info rinfo ;
};
#line 651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_handle {
   struct hnae3_client *client ;
   struct pci_dev *pdev ;
   void *priv ;
   struct hnae3_ae_algo *ae_algo ;
   u64 flags ;
   union __anonunion_716 __anonCompField_hnae3_handle_166 ;
   u32 numa_node_mask ;
   enum hnae3_port_base_vlan_state port_base_vlan_state ;
   u8 netdev_flags ;
   struct dentry *hnae3_dbgfs ;
   u32 msg_enable ;
};
#line 698 
struct hclgevf_hw;
#line 699 
struct hclgevf_dev;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
struct hclgevf_desc {
   __le16 opcode ;
   __le16 flag ;
   __le16 retval ;
   __le16 rsv ;
   __le32 data[6U] ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
struct hclgevf_desc_cb {
   dma_addr_t dma ;
   void *va ;
   u32 length ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
struct hclgevf_cmq_ring {
   dma_addr_t desc_dma_addr ;
   struct hclgevf_desc *desc ;
   struct hclgevf_desc_cb *desc_cb ;
   struct hclgevf_dev *dev ;
   u32 head ;
   u32 tail ;
   u16 buf_size ;
   u16 desc_num ;
   int next_to_use ;
   int next_to_clean ;
   u8 flag ;
   spinlock_t lock ;
};
#line 61 
enum hclgevf_cmd_status {
    HCLGEVF_STATUS_SUCCESS = 0,
    HCLGEVF_ERR_CSQ_FULL = -1,
    HCLGEVF_ERR_CSQ_TIMEOUT = -2,
    HCLGEVF_ERR_CSQ_ERROR = -3
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
struct hclgevf_cmq {
   struct hclgevf_cmq_ring csq ;
   struct hclgevf_cmq_ring crq ;
   u16 tx_timeout ;
   enum hclgevf_cmd_status last_status ;
};
#line 75 
enum hclgevf_opcode_type {
    HCLGEVF_OPC_QUERY_FW_VER = 1,
    HCLGEVF_OPC_QUERY_VF_RSRC = 36,
    HCLGEVF_OPC_QUERY_TX_STATUS = 2819,
    HCLGEVF_OPC_QUERY_RX_STATUS = 2835,
    HCLGEVF_OPC_CFG_COM_TQP_QUEUE = 2848,
    HCLGEVF_OPC_GRO_GENERIC_CONFIG = 3088,
    HCLGEVF_OPC_RSS_GENERIC_CONFIG = 3329,
    HCLGEVF_OPC_RSS_INPUT_TUPLE = 3330,
    HCLGEVF_OPC_RSS_INDIR_TABLE = 3335,
    HCLGEVF_OPC_RSS_TC_MODE = 3336,
    HCLGEVF_OPC_MBX_VF_TO_PF = 8193
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
struct hclgevf_query_res_cmd {
   __le16 tqp_num ;
   __le16 reserved ;
   __le16 msixcap_localid_ba_nic ;
   __le16 msixcap_localid_ba_rocee ;
   __le16 vf_intr_vector_number ;
   __le16 rsv[7U] ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
struct hclgevf_cfg_gro_status_cmd {
   __le16 gro_en ;
   u8 rsv[22U] ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
struct hclgevf_rss_config_cmd {
   u8 hash_config ;
   u8 rsv[7U] ;
   u8 hash_key[16U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
struct hclgevf_rss_input_tuple_cmd {
   u8 ipv4_tcp_en ;
   u8 ipv4_udp_en ;
   u8 ipv4_sctp_en ;
   u8 ipv4_fragment_en ;
   u8 ipv6_tcp_en ;
   u8 ipv6_udp_en ;
   u8 ipv6_sctp_en ;
   u8 ipv6_fragment_en ;
   u8 rsv[16U] ;
};
#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
struct hclgevf_rss_indirection_table_cmd {
   u16 start_table_index ;
   u16 rss_set_bitmap ;
   u8 rsv[4U] ;
   u8 rss_result[16U] ;
};
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
struct hclgevf_rss_tc_mode_cmd {
   u16 rss_tc_mode[8U] ;
   u8 rsv[8U] ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
struct hclgevf_cfg_com_tqp_queue_cmd {
   __le16 tqp_id ;
   __le16 stream_id ;
   u8 enable ;
   u8 rsv[19U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
union __anonunion___u_718 {
   u8 *__val ;
   char __c[1U] ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hclge_mbx.h"
struct hclgevf_mbx_resp_status {
   struct mutex mbx_mutex ;
   u32 origin_mbx_msg ;
   bool received_resp ;
   int resp_status ;
   u8 additional_info[8U] ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hclge_mbx.h"
struct hclge_mbx_vf_to_pf_cmd {
   u8 rsv ;
   u8 mbx_src_vfid ;
   u8 mbx_need_resp ;
   u8 rsv1[1U] ;
   u8 msg_len ;
   u8 rsv2[3U] ;
   u8 msg[16U] ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hclge_mbx.h"
struct hclgevf_mbx_arq_ring {
   struct hclgevf_dev *hdev ;
   u32 head ;
   u32 tail ;
   atomic_t count ;
   u16 msg_q[1024U][8U] ;
};
#line 123 
enum hclgevf_evt_cause {
    HCLGEVF_VECTOR0_EVENT_RST = 0,
    HCLGEVF_VECTOR0_EVENT_MBX = 1,
    HCLGEVF_VECTOR0_EVENT_OTHER = 2
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.h"
struct hclgevf_mac {
   u8 media_type ;
   u8 module_type ;
   u8 mac_addr[6U] ;
   int link ;
   u8 duplex ;
   u32 speed ;
   u64 supported ;
   u64 advertising ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.h"
struct hclgevf_hw {
   void *io_base ;
   int num_vec ;
   struct hclgevf_cmq cmq ;
   struct hclgevf_mac mac ;
   void *hdev ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.h"
struct hlcgevf_tqp_stats {
   u64 rcb_tx_ring_pktnum_rcd ;
   u64 rcb_rx_ring_pktnum_rcd ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.h"
struct hclgevf_tqp {
   struct device *dev ;
   struct hnae3_queue q ;
   struct hlcgevf_tqp_stats tqp_stats ;
   u16 index ;
   bool alloced ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.h"
struct hclgevf_rss_tuple_cfg {
   u8 ipv4_tcp_en ;
   u8 ipv4_udp_en ;
   u8 ipv4_sctp_en ;
   u8 ipv4_fragment_en ;
   u8 ipv6_tcp_en ;
   u8 ipv6_udp_en ;
   u8 ipv6_sctp_en ;
   u8 ipv6_fragment_en ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.h"
struct hclgevf_rss_cfg {
   u8 rss_hash_key[40U] ;
   u32 hash_algo ;
   u32 rss_size ;
   u8 hw_tc_map ;
   u8 rss_indirection_tbl[512U] ;
   struct hclgevf_rss_tuple_cfg rss_tuple_sets ;
};
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.h"
struct hclgevf_misc_vector {
   u8 *addr ;
   int vector_irq ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.h"
struct hclgevf_rst_stats {
   u32 rst_cnt ;
   u32 vf_func_rst_cnt ;
   u32 flr_rst_cnt ;
   u32 vf_rst_cnt ;
   u32 rst_done_cnt ;
   u32 hw_rst_done_cnt ;
   u32 rst_fail_cnt ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.h"
struct hclgevf_dev {
   struct pci_dev *pdev ;
   struct hnae3_ae_dev *ae_dev ;
   struct hclgevf_hw hw ;
   struct hclgevf_misc_vector misc_vector ;
   struct hclgevf_rss_cfg rss_cfg ;
   unsigned long state ;
   unsigned long flr_state ;
   unsigned long default_reset_request ;
   unsigned long last_reset_time ;
   enum hnae3_reset_type reset_level ;
   unsigned long reset_pending ;
   enum hnae3_reset_type reset_type ;
   unsigned long reset_state ;
   struct hclgevf_rst_stats rst_stats ;
   u32 reset_attempts ;
   u32 fw_version ;
   u16 num_tqps ;
   u16 alloc_rss_size ;
   u16 rss_size_max ;
   u16 num_alloc_vport ;
   u32 numa_node_mask ;
   u16 rx_buf_len ;
   u16 num_tx_desc ;
   u16 num_rx_desc ;
   u8 hw_tc_map ;
   u8 has_pf_mac ;
   u16 num_msi ;
   u16 num_msi_left ;
   u16 num_msi_used ;
   u16 num_nic_msix ;
   u16 num_roce_msix ;
   u16 roce_base_msix_offset ;
   int roce_base_vector ;
   u32 base_msi_vector ;
   u16 *vector_status ;
   int *vector_irq ;
   unsigned long vlan_del_fail_bmap[64U] ;
   bool mbx_event_pending ;
   struct hclgevf_mbx_resp_status mbx_resp ;
   struct hclgevf_mbx_arq_ring arq ;
   struct timer_list service_timer ;
   struct timer_list keep_alive_timer ;
   struct work_struct service_task ;
   struct work_struct keep_alive_task ;
   struct work_struct rst_service_task ;
   struct work_struct mbx_service_task ;
   struct hclgevf_tqp *htqp ;
   struct hnae3_handle nic ;
   struct hnae3_handle roce ;
   struct hnae3_client *nic_client ;
   struct hnae3_client *roce_client ;
   u32 flag ;
   u32 stats_timer ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_788 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
struct hclgevf_query_version_cmd {
   __le32 firmware ;
   __le32 firmware_rsv[5U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
union __anonunion___u_1426 {
   u8 *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_1504 {
   int __val ;
   char __c[1U] ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hclge_mbx.h"
struct hclge_mbx_pf_to_vf_cmd {
   u8 dest_vfid ;
   u8 rsv[3U] ;
   u8 msg_len ;
   u8 rsv1[3U] ;
   u16 msg[8U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
union __anonunion___u_2154 {
   u8 *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_3933 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_3933 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_3934 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_3934 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_3950 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_3950 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_3954 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_3954 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_3955 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_3956 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_3955 __anonCompField_media_link_90 ;
   union __anonunion_3956 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_3958 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_3957 {
   struct __anonstruct_dev_3958 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_3957 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_3972 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_3973 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_3971 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_3972 i2c ;
   struct __anonstruct_custom_3973 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_3971 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_4874 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_4874 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 12  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_3 {
   int arg0 ;
   int signal_pending ;
};
#line 17  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_hclgevf_misc_irq_handle_7 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_1_8 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  #line 368 
  int bitpos = -1;
  #line 369 
  ldv_inline_asm();
  #line 377 
  return bitpos + 1;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static unsigned int fls_long(unsigned long l)
{
  #line 183 
  return (unsigned int)fls64((unsigned long long)l);
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  #line 24 
  return fls(n) + -1;
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static unsigned long __roundup_pow_of_two(unsigned long n)
{
  #line 57 
  return 1UL << fls_long(n + 18446744073709551615UL);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 64 
void __dynamic_dev_dbg(struct _ddebug *, struct device *, char * , ...);
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 204 
void __might_sleep(char *, int, int);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 27 
void *ldv_devm_kzalloc(size_t size, gfp_t flags);
#line 29 
#line 29 
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 21 
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 86 
void mutex_destroy(struct mutex *);
#line 128 
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static int ktime_compare(ktime_t cmp1, ktime_t cmp2)
{
  #line 114 
  if (cmp1 < cmp2) 
                   #line 115 
                   return -1;
  #line 116 
  if (cmp1 > cmp2) 
                   #line 117 
                   return 1;
  #line 118 
  return 0;
}

#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static ktime_t ktime_add_us(ktime_t kt, u64 usec)
{
  #line 198 
  return (long long)(usec * 1000ULL + (unsigned long long)kt);
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 67 
ktime_t ktime_get(void);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 688  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 703  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 554 
#line 680  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 107 
void pci_iounmap(struct pci_dev *, void *);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/pci_iomap.h"
#line 13 
void *pci_iomap(struct pci_dev *, int, unsigned long);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 607 
#line 408  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 696  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 673  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 952 
void devm_kfree(struct device *, void *);
#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  #line 671 
  int rc = dma_set_mask(dev,mask);
  #line 672 
  if (rc == 0) 
               #line 673 
               dma_set_coherent_mask(dev,mask);
  #line 674 
  return rc;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 61 
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 711  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 719  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 1131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1161 
#line 1161 
void pci_clear_master(struct pci_dev *);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1447 
#line 1447 
int pci_alloc_irq_vectors_affinity(struct pci_dev *, unsigned int, unsigned int, unsigned int, struct irq_affinity *);
#line 1451 
#line 1451 
void pci_free_irq_vectors(struct pci_dev *);
#line 1452 
#line 1452 
int pci_irq_vector(struct pci_dev *, unsigned int);
#line 1768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_alloc_irq_vectors(struct pci_dev *dev, unsigned int min_vecs, unsigned int max_vecs, unsigned int flags)
{
  #line 1771 
  return pci_alloc_irq_vectors_affinity(dev,min_vecs,max_vecs,flags,
                                     (struct irq_affinity *)0);
}

#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
#line 691 
void hnae3_unregister_ae_algo(struct hnae3_ae_algo *);
#line 692 
#line 692 
void hnae3_register_ae_algo(struct hnae3_ae_algo *);
#line 697 
#line 697 
void hnae3_set_client_init_flag(struct hnae3_client *, struct hnae3_ae_dev *, unsigned int);
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
__inline static void hclgevf_write_reg(void *base, u32 reg, u32 value)
{
  #line 258 
  writel(value,base + (unsigned long)reg);
  #line 259 
  return;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
__inline static u32 hclgevf_read_reg(u8 *base, u32 reg)
{
  #line 264 
  union __anonunion___u_718 __u;
  #line 263 
  __read_once_size((void *)(& base),(void *)(& __u.__c),8);
  #line 263 
  u8 *reg_addr = (__u.__val);
  #line 265 
  return readl((void *)(reg_addr + (unsigned long)reg));
}

#line 276 
#line 276 
int hclgevf_cmd_init(struct hclgevf_dev *hdev);
#line 277 
#line 277 
void hclgevf_cmd_uninit(struct hclgevf_dev *hdev);
#line 278 
#line 278 
int hclgevf_cmd_queue_init(struct hclgevf_dev *hdev);
#line 280 
#line 280 
int hclgevf_cmd_send(struct hclgevf_hw *hw, struct hclgevf_desc *desc, int num);
#line 281 
#line 281 
void hclgevf_cmd_setup_basic_desc(struct hclgevf_desc *desc, enum hclgevf_opcode_type opcode, bool is_read);
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.h"
__inline static bool hclgevf_is_reset_pending(struct hclgevf_dev *hdev)
{
  #line 306 
  return (_Bool)(hdev->reset_pending != 0UL);
}

#line 309 
#line 309 
int hclgevf_send_mbx_msg(struct hclgevf_dev *hdev, u16 code, u16 subcode, u8 *msg_data, u8 msg_len, bool need_resp, u8 *resp_data, u16 resp_len);
#line 312 
#line 312 
void hclgevf_mbx_handler(struct hclgevf_dev *hdev);
#line 313 
#line 313 
void hclgevf_mbx_async_handler(struct hclgevf_dev *hdev);
#line 315 
#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
void hclgevf_update_link_status(struct hclgevf_dev *hdev, int link_state);
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.h"
#line 3002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
void hclgevf_update_speed_duplex(struct hclgevf_dev *hdev, u32 speed, u8 duplex);
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.h"
#line 1768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
void hclgevf_reset_task_schedule(struct hclgevf_dev *hdev);
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.h"
#line 1777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
void hclgevf_mbx_task_schedule(struct hclgevf_dev *hdev);
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.h"
#line 3125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
void hclgevf_update_port_base_vlan_info(struct hclgevf_dev *hdev, u16 state, u8 *port_base_vlan_info, u8 data_size);
#line 16 
#line 2682 
static int hclgevf_reset_hdev(struct hclgevf_dev *hdev);
#line 17 
#line 3207 
static struct hnae3_ae_algo ae_algovf;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static struct pci_device_id ae_algovf_pci_tbl[3U] = {{.vendor = 6629U, .device = 41518U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6629U, .device = 41519U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static u8 hclgevf_hash_key[40U] = {(unsigned char)109U, (unsigned char)90U, (unsigned char)86U, (unsigned char)218U, (unsigned char)37U, (unsigned char)91U, (unsigned char)14U, (unsigned char)194U, (unsigned char)65U, (unsigned char)103U, (unsigned char)37U, (unsigned char)61U, (unsigned char)67U, (unsigned char)163U, (unsigned char)143U, (unsigned char)176U, (unsigned char)208U, (unsigned char)202U, (unsigned char)43U, (unsigned char)203U, (unsigned char)174U, (unsigned char)123U, (unsigned char)48U, (unsigned char)180U, (unsigned char)119U, (unsigned char)203U, (unsigned char)45U, (unsigned char)163U, (unsigned char)128U, (unsigned char)48U, (unsigned char)242U, (unsigned char)12U, (unsigned char)106U, (unsigned char)66U, (unsigned char)183U, (unsigned char)59U, (unsigned char)190U, (unsigned char)172U, (unsigned char)1U, (unsigned char)250U};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
struct pci_device_id __mod_pci__ae_algovf_pci_tbl_device_table[3U];
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static u32 cmdq_reg_addr_list[14U] = {159744U, 159748U, 159752U, 159760U, 159764U, 159768U, 159772U, 159776U, 159780U, 159784U, 160000U, 160004U, 160008U, 160012U};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static u32 common_reg_addr_list[3U] = {132096U, 134144U, 163840U};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static u32 ring_reg_addr_list[26U] = {524288U, 524292U, 524296U, 524300U, 524308U, 524312U, 524316U, 524320U, 524324U, 524328U, 524336U, 524340U, 524352U, 524356U, 524360U, 524364U, 524368U, 524372U, 524376U, 524380U, 524384U, 524388U, 524392U, 524400U, 524404U, 524432U};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static u32 tqp_intr_reg_addr_list[5U] = {131072U, 131328U, 131584U, 131840U, 133376U};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static struct hclgevf_dev *hclgevf_ae_get_hdev(struct hnae3_handle *handle)
{
  #line 90 
  if (handle->client == (struct hnae3_client *)0) {
    #line 91 
    void *__mptr;
    #line 91 
    __mptr = (void *)handle;
    #line 91 
    return ((struct hclgevf_dev *)(__mptr + 18446744073709532904U));
  }
  else 
    #line 92 
    if ((handle->client)->type == (unsigned int)HNAE3_CLIENT_ROCE) {
      #line 93 
      void *__mptr_0;
      #line 93 
      __mptr_0 = (void *)handle;
      #line 93 
      return ((struct hclgevf_dev *)(__mptr_0 + 18446744073709532728U));
    }
    else {
      #line 95 
      void *__mptr_1;
      #line 95 
      __mptr_1 = (void *)handle;
      #line 95 
      return ((struct hclgevf_dev *)(__mptr_1 + 18446744073709532904U));
    }
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_tqps_update_stats(struct hnae3_handle *handle)
{
  #line 102 
  struct hclgevf_desc desc;
  #line 103 
  struct hclgevf_tqp *tqp;
  #line 104 
  int status;
  #line 105 
  int i;
  #line 100 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_166.kinfo;
  #line 101 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 107 
  i = 0;
  #line 107 
  while ((int)kinfo->num_tqps > i) {
    {
      #line 108 
      void *__mptr;
      #line 108 
      __mptr = (void *)*(kinfo->tqp + (unsigned long)i);
      #line 108 
      tqp = ((struct hclgevf_tqp *)(__mptr + 18446744073709551608U));
      #line 109 
      hclgevf_cmd_setup_basic_desc(& desc,(enum hclgevf_opcode_type)HCLGEVF_OPC_QUERY_RX_STATUS,(_Bool)1);
      #line 113 
      desc.data[0] = (unsigned int)tqp->index & 511U;
      #line 114 
      status = hclgevf_cmd_send(& hdev->hw,& desc,1);
      #line 115 
      if (status != 0) {
        #line 116 
        _dev_err(& (hdev->pdev)->dev,(char *)"Query tqp stat fail, status = %d,queue = %d\n",status,i);
        #line 119 
        return status;
      }
      #line 121 
      tqp->tqp_stats.rcb_rx_ring_pktnum_rcd += (unsigned long long)desc.data[1];
      #line 124 
      hclgevf_cmd_setup_basic_desc(& desc,(enum hclgevf_opcode_type)HCLGEVF_OPC_QUERY_TX_STATUS,(_Bool)1);
      #line 127 
      desc.data[0] = (unsigned int)tqp->index & 511U;
      #line 128 
      status = hclgevf_cmd_send(& hdev->hw,& desc,1);
      #line 129 
      if (status != 0) {
        #line 130 
        _dev_err(& (hdev->pdev)->dev,(char *)"Query tqp stat fail, status = %d,queue = %d\n",status,i);
        #line 133 
        return status;
      }
      #line 135 
      tqp->tqp_stats.rcb_tx_ring_pktnum_rcd += (unsigned long long)desc.data[1];
    }
    #line 107 
    i ++;
  }
  #line 139 
  return 0;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static u64 *hclgevf_tqps_get_stats(struct hnae3_handle *handle, u64 *data)
{
  #line 145 
  struct hclgevf_tqp *tqp;
  #line 147 
  int i;
  #line 144 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_166.kinfo;
  #line 146 
  u64 *buff = data;
  #line 149 
  i = 0;
  #line 149 
  while ((int)kinfo->num_tqps > i) {
    {
      #line 150 
      void *__mptr;
      #line 151 
      u64 *tmp_0;
      #line 150 
      __mptr = (void *)*(kinfo->tqp + (unsigned long)i);
      #line 150 
      tqp = ((struct hclgevf_tqp *)(__mptr + 18446744073709551608U));
      #line 151 
      tmp_0 = buff;
      #line 151 
      buff ++;
      #line 151 
      *tmp_0 = tqp->tqp_stats.rcb_tx_ring_pktnum_rcd;
    }
    #line 149 
    i ++;
  }
  #line 153 
  i = 0;
  #line 153 
  while ((int)kinfo->num_tqps > i) {
    {
      #line 154 
      void *__mptr_0;
      #line 155 
      u64 *tmp_2;
      #line 154 
      __mptr_0 = (void *)*(kinfo->tqp + (unsigned long)i);
      #line 154 
      tqp = ((struct hclgevf_tqp *)(__mptr_0 + 18446744073709551608U));
      #line 155 
      tmp_2 = buff;
      #line 155 
      buff ++;
      #line 155 
      *tmp_2 = tqp->tqp_stats.rcb_rx_ring_pktnum_rcd;
    }
    #line 153 
    i ++;
  }
  #line 158 
  return buff;
}

#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_tqps_get_sset_count(struct hnae3_handle *handle, int strset)
{
  #line 163 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_166.kinfo;
  #line 165 
  return (int)kinfo->num_tqps * 2;
}

#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static u8 *hclgevf_tqps_get_strings(struct hnae3_handle *handle, u8 *data)
{
  #line 170 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_166.kinfo;
  #line 171 
  u8 *buff = data;
  #line 172 
  int i = 0;
  #line 174 
  i = 0;
  #line 174 
  while ((int)kinfo->num_tqps > i) {
    {
      #line 175 
      void *__mptr;
      #line 175 
      __mptr = (void *)*(kinfo->tqp + (unsigned long)i);
      #line 175 
      struct hclgevf_tqp *tqp = ((struct hclgevf_tqp *)(__mptr + 18446744073709551608U));
      #line 177 
      snprintf((char *)buff,32UL,(char *)"txq%d_pktnum_rcd",(int)tqp->index);
      #line 179 
      buff += 32U;
    }
    #line 174 
    i ++;
  }
  #line 182 
  i = 0;
  #line 182 
  while ((int)kinfo->num_tqps > i) {
    {
      #line 183 
      void *__mptr_0;
      #line 183 
      __mptr_0 = (void *)*(kinfo->tqp + (unsigned long)i);
      #line 183 
      struct hclgevf_tqp *tqp_0 = ((struct hclgevf_tqp *)(__mptr_0 + 18446744073709551608U));
      #line 185 
      snprintf((char *)buff,32UL,(char *)"rxq%d_pktnum_rcd",(int)tqp_0->index);
      #line 187 
      buff += 32U;
    }
    #line 182 
    i ++;
  }
  #line 190 
  return buff;
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_update_stats(struct hnae3_handle *handle, struct net_device_stats *net_stats)
{
  #line 197 
  int status;
  #line 196 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 199 
  status = hclgevf_tqps_update_stats(handle);
  #line 200 
  if (status != 0) 
                   #line 201 
                   _dev_err(& (hdev->pdev)->dev,(char *)"VF update of TQPS stats fail, status = %d.\n",status);
  #line 202 
  return;
}

#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_get_sset_count(struct hnae3_handle *handle, int strset)
{
  #line 208 
  if (strset == 0) 
                   #line 209 
                   return -95;
  else 
    #line 210 
    if (strset == 1) {
      #line 211 
      return hclgevf_tqps_get_sset_count(handle,strset);
    }
  #line 213 
  return 0;
}

#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_get_strings(struct hnae3_handle *handle, u32 strset, u8 *data)
{
  #line 219 
  u8 *p = data;
  #line 221 
  if (strset == 1U) 
                    #line 222 
                    p = hclgevf_tqps_get_strings(handle,p);
  #line 223 
  return;
}

#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_get_stats(struct hnae3_handle *handle, u64 *data)
{
  #line 227 
  hclgevf_tqps_get_stats(handle,data);
  #line 228 
  return;
}

#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_get_tc_info(struct hclgevf_dev *hdev)
{
  #line 232 
  u8 resp_msg;
  #line 233 
  int status;
  #line 235 
  status = hclgevf_send_mbx_msg(hdev,(unsigned short)13,(unsigned short)0,(u8 *)0U,(unsigned char)0,(_Bool)1,& resp_msg,(unsigned short)1);
  #line 237 
  if (status != 0) {
    #line 238 
    _dev_err(& (hdev->pdev)->dev,(char *)"VF request to get TC info from PF failed %d",status);
    #line 241 
    return status;
  }
  #line 244 
  hdev->hw_tc_map = resp_msg;
  #line 246 
  return 0;
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_get_port_base_vlan_filter_state(struct hclgevf_dev *hdev)
{
  #line 252 
  u8 resp_msg;
  #line 253 
  int ret;
  #line 251 
  struct hnae3_handle *nic = & hdev->nic;
  #line 255 
  ret = hclgevf_send_mbx_msg(hdev,(unsigned short)5,(unsigned short)4,(u8 *)0U,(unsigned char)0,(_Bool)1,& resp_msg,(unsigned short)1);
  #line 258 
  if (ret != 0) {
    #line 259 
    _dev_err(& (hdev->pdev)->dev,(char *)"VF request to get port based vlan state failed %d",ret);
    #line 262 
    return ret;
  }
  #line 265 
  nic->port_base_vlan_state = (enum hnae3_port_base_vlan_state)resp_msg;
  #line 267 
  return 0;
}

#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_get_queue_info(struct hclgevf_dev *hdev)
{
  #line 273 
  u8 resp_msg[6U];
  #line 274 
  int status;
  #line 276 
  status = hclgevf_send_mbx_msg(hdev,(unsigned short)11,(unsigned short)0,(u8 *)0U,(unsigned char)0,(_Bool)1,(u8 *)(& resp_msg),(unsigned short)6);
  #line 279 
  if (status != 0) {
    #line 280 
    _dev_err(& (hdev->pdev)->dev,(char *)"VF request to get tqp info from PF failed %d",status);
    #line 283 
    return status;
  }
  #line 286 
  memcpy((void *)(& hdev->num_tqps),(void *)(resp_msg),2UL);
  #line 287 
  memcpy((void *)(& hdev->rss_size_max),(void *)(& resp_msg[2]),2UL);
  #line 288 
  memcpy((void *)(& hdev->rx_buf_len),(void *)(& resp_msg[4]),2UL);
  #line 290 
  return 0;
}

#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_get_queue_depth(struct hclgevf_dev *hdev)
{
  #line 296 
  u8 resp_msg[4U];
  #line 297 
  int ret;
  #line 299 
  ret = hclgevf_send_mbx_msg(hdev,(unsigned short)12,(unsigned short)0,(u8 *)0U,(unsigned char)0,(_Bool)1,(u8 *)(& resp_msg),(unsigned short)4);
  #line 302 
  if (ret != 0) {
    #line 303 
    _dev_err(& (hdev->pdev)->dev,(char *)"VF request to get tqp depth info from PF failed %d",ret);
    #line 306 
    return ret;
  }
  #line 309 
  memcpy((void *)(& hdev->num_tx_desc),(void *)(resp_msg),2UL);
  #line 310 
  memcpy((void *)(& hdev->num_rx_desc),(void *)(& resp_msg[2]),2UL);
  #line 312 
  return 0;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static u16 hclgevf_get_qid_global(struct hnae3_handle *handle, u16 queue_id)
{
  #line 318 
  u8 msg_data[2U];
  #line 318 
  u8 resp_data[2U];
  #line 320 
  int ret;
  #line 317 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 319 
  u16 qid_in_pf = (unsigned short)0U;
  #line 322 
  memcpy((void *)(msg_data),(void *)(& queue_id),2UL);
  #line 324 
  ret = hclgevf_send_mbx_msg(hdev,(unsigned short)31,(unsigned short)0,(u8 *)(& msg_data),(unsigned char)2,(_Bool)1,(u8 *)(& resp_data),(unsigned short)2);
  #line 327 
  if (ret == 0) 
                #line 328 
                qid_in_pf = *((u16 *)(& resp_data));
  #line 330 
  return qid_in_pf;
}

#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_get_pf_media_type(struct hclgevf_dev *hdev)
{
  #line 335 
  u8 resp_msg[2U];
  #line 336 
  int ret;
  #line 338 
  ret = hclgevf_send_mbx_msg(hdev,(unsigned short)35,(unsigned short)0,(u8 *)0U,(unsigned char)0,(_Bool)1,(u8 *)(& resp_msg),(unsigned short)2);
  #line 340 
  if (ret != 0) {
    #line 341 
    _dev_err(& (hdev->pdev)->dev,(char *)"VF request to get the pf port media type failed %d",ret);
    #line 344 
    return ret;
  }
  #line 347 
  hdev->hw.mac.media_type = resp_msg[0];
  #line 348 
  hdev->hw.mac.module_type = resp_msg[1];
  #line 350 
  return 0;
}

#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_alloc_tqps(struct hclgevf_dev *hdev)
{
  #line 355 
  struct hclgevf_tqp *tqp;
  #line 356 
  int i;
  #line 358 
  hdev->htqp = (struct hclgevf_tqp *)cif_devm_kcalloc(& (hdev->pdev)->dev,(unsigned long)hdev->num_tqps,72UL,3264U);
  #line 360 
  if (hdev->htqp == (struct hclgevf_tqp *)0) 
                                             #line 361 
                                             return -12;
  #line 363 
  tqp = hdev->htqp;
  #line 365 
  i = 0;
  #line 365 
  while ((int)hdev->num_tqps > i) {
    #line 366 
    tqp->dev = & (hdev->pdev)->dev;
    #line 367 
    tqp->index = (unsigned short)i;
    #line 369 
    tqp->q.ae_algo = & ae_algovf;
    #line 370 
    tqp->q.buf_size = (unsigned int)hdev->rx_buf_len;
    #line 371 
    tqp->q.tx_desc_num = hdev->num_tx_desc;
    #line 372 
    tqp->q.rx_desc_num = hdev->num_rx_desc;
    #line 373 
    tqp->q.io_base = hdev->hw.io_base + ((unsigned long)(i * 512) + (unsigned long)524288U);
    #line 376 
    tqp ++;
    #line 365 
    i ++;
  }
  #line 379 
  return 0;
}

#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_knic_setup(struct hclgevf_dev *hdev)
{
  #line 418 
  int tmp_6;
  #line 399 
  unsigned short __UNIQUE_ID___x443;
  #line 399 
  int tmp;
  #line 401 
  u16 __UNIQUE_ID___x445;
  #line 401 
  int tmp_1;
  #line 417 
  unsigned short __UNIQUE_ID___x447;
  #line 417 
  int tmp_4;
  #line 418 
  unsigned short __UNIQUE_ID___x449;
  #line 385 
  struct hnae3_knic_private_info *kinfo;
  #line 387 
  unsigned int i;
  #line 384 
  struct hnae3_handle *nic = & hdev->nic;
  #line 386 
  u16 new_tqps = hdev->num_tqps;
  #line 389 
  kinfo = & nic->__anonCompField_hnae3_handle_166.kinfo;
  #line 390 
  kinfo->num_tc = (unsigned char)0U;
  #line 391 
  kinfo->num_tx_desc = hdev->num_tx_desc;
  #line 392 
  kinfo->num_rx_desc = hdev->num_rx_desc;
  #line 393 
  kinfo->rx_buf_len = hdev->rx_buf_len;
  #line 394 
  i = 0U;
  #line 394 
  while (i <= 7U) {
    #line 395 
    if ((((unsigned long)hdev->hw_tc_map >> i) & 1UL) != 0UL) 
                                                              #line 396 
                                                              kinfo->num_tc = (u8)((int)kinfo->num_tc + 1);
    #line 394 
    i ++;
  }
  {
    #line 399 
    __UNIQUE_ID___x443 = hdev->rss_size_max;
    #line 399 
    unsigned short __UNIQUE_ID___y444 = (unsigned short)((int)new_tqps / (int)kinfo->num_tc);
    #line 399 
    if ((int)__UNIQUE_ID___x443 < (int)__UNIQUE_ID___y444) 
                                                           #line 399 
                                                           tmp = (int)__UNIQUE_ID___x443; else 
                                                                    #line 399 
                                                                    tmp = (int)__UNIQUE_ID___y444;
    }
  #line 399 
  kinfo->rss_size = (unsigned short)tmp;
  #line 400 
  new_tqps = (unsigned short)((int)kinfo->rss_size * (int)((unsigned short)kinfo->num_tc));
  {
    #line 401 
    __UNIQUE_ID___x445 = new_tqps;
    #line 401 
    u16 __UNIQUE_ID___y446 = hdev->num_tqps;
    #line 401 
    if ((int)__UNIQUE_ID___x445 < (int)__UNIQUE_ID___y446) 
                                                           #line 401 
                                                           tmp_1 = (int)__UNIQUE_ID___x445; else 
                                                                    #line 401 
                                                                    tmp_1 = (int)__UNIQUE_ID___y446;
    }
  #line 401 
  kinfo->num_tqps = (unsigned short)tmp_1;
  #line 403 
  kinfo->tqp = (struct hnae3_queue **)cif_devm_kcalloc(& (hdev->pdev)->dev,(unsigned long)kinfo->num_tqps,8UL,3264U);
  #line 405 
  if (kinfo->tqp == (struct hnae3_queue **)0) 
                                              #line 406 
                                              return -12;
  #line 408 
  i = 0U;
  #line 408 
  while ((unsigned int)kinfo->num_tqps > i) {
    #line 409 
    (hdev->htqp + (unsigned long)i)->q.handle = & hdev->nic;
    #line 410 
    (hdev->htqp + (unsigned long)i)->q.tqp_index = (int)i;
    #line 411 
    *(kinfo->tqp + (unsigned long)i) = & (hdev->htqp + (unsigned long)i)->q;
    #line 408 
    i ++;
  }
  {
    #line 417 
    __UNIQUE_ID___x447 = (unsigned short)((unsigned int)hdev->num_nic_msix + 65535U);
    #line 417 
    unsigned short __UNIQUE_ID___y448 = kinfo->num_tqps;
    #line 417 
    if ((int)__UNIQUE_ID___x447 < (int)__UNIQUE_ID___y448) 
                                                           #line 417 
                                                           tmp_4 = (int)__UNIQUE_ID___x447; else 
                                                                    #line 417 
                                                                    tmp_4 = (int)__UNIQUE_ID___y448;
    }
  #line 417 
  kinfo->num_tqps = (unsigned short)tmp_4;
  {
    #line 418 
    __UNIQUE_ID___x449 = (unsigned short)((int)kinfo->num_tqps / (int)kinfo->num_tc);
    #line 418 
    unsigned short __UNIQUE_ID___y450 = kinfo->rss_size;
    #line 418 
    if ((int)__UNIQUE_ID___x449 < (int)__UNIQUE_ID___y450) 
                                                           #line 418 
                                                           tmp_6 = (int)__UNIQUE_ID___x449; else 
                                                                    #line 418 
                                                                    tmp_6 = (int)__UNIQUE_ID___y450;
    }
  #line 418 
  kinfo->rss_size = (unsigned short)tmp_6;
  #line 421 
  return 0;
}

#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_request_link_info(struct hclgevf_dev *hdev)
{
  #line 426 
  int status;
  #line 427 
  u8 resp_msg;
  #line 429 
  status = hclgevf_send_mbx_msg(hdev,(unsigned short)26,(unsigned short)0,(u8 *)0U,(unsigned char)0,(_Bool)0,& resp_msg,(unsigned short)1);
  #line 431 
  if (status != 0) 
                   #line 432 
                   _dev_err(& (hdev->pdev)->dev,(char *)"VF failed to fetch link status(%d) from PF",status);
  #line 433 
  return;
}

#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
void hclgevf_update_link_status(struct hclgevf_dev *hdev, int link_state)
{
  #line 440 
  struct hnae3_client *rclient;
  #line 441 
  struct hnae3_client *client;
  #line 438 
  struct hnae3_handle *rhandle = & hdev->roce;
  #line 439 
  struct hnae3_handle *handle = & hdev->nic;
  #line 443 
  client = handle->client;
  #line 444 
  rclient = hdev->roce_client;
  #line 446 
  if ((int)test_bit(0L,& hdev->state) == 0) 
                                            #line 446 
                                            link_state = link_state; else 
                                                                    #line 446 
                                                                    link_state = 0;
  #line 449 
  if (hdev->hw.mac.link != link_state) {
    #line 450 
    (*((client->ops)->link_status_change))(handle,(_Bool)(link_state != 0));
    #line 451 
    if (rclient != (struct hnae3_client *)0 && (rclient->ops)->link_status_change != (void (*)(struct hnae3_handle *, bool ))0) 
      #line 452 
      (*((rclient->ops)->link_status_change))(rhandle,(_Bool)(link_state != 0));
    #line 453 
    hdev->hw.mac.link = link_state;
  }
  #line 455 
  return;
}

#line 457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_update_link_mode(struct hclgevf_dev *hdev)
{
  #line 461 
  u8 send_msg;
  #line 462 
  u8 resp_msg;
  #line 464 
  send_msg = (unsigned char)0U;
  #line 465 
  hclgevf_send_mbx_msg(hdev,(unsigned short)33,(unsigned short)0,& send_msg,(unsigned char)1,(_Bool)0,& resp_msg,(unsigned short)1);
  #line 468 
  send_msg = (unsigned char)1U;
  #line 469 
  hclgevf_send_mbx_msg(hdev,(unsigned short)33,(unsigned short)0,& send_msg,(unsigned char)1,(_Bool)0,& resp_msg,(unsigned short)1);
  #line 472 
  return;
}

#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_set_handle_info(struct hclgevf_dev *hdev)
{
  #line 477 
  int ret;
  #line 476 
  struct hnae3_handle *nic = & hdev->nic;
  #line 479 
  nic->ae_algo = & ae_algovf;
  #line 480 
  nic->pdev = hdev->pdev;
  #line 481 
  nic->numa_node_mask = hdev->numa_node_mask;
  #line 482 
  nic->flags |= 8ULL;
  #line 484 
  ret = hclgevf_knic_setup(hdev);
  #line 485 
  if (ret != 0) 
                #line 486 
                _dev_err(& (hdev->pdev)->dev,(char *)"VF knic setup failed %d\n",ret);
  #line 488 
  return ret;
}

#line 491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_free_vector(struct hclgevf_dev *hdev, int vector_id)
{
  #line 493 
  if ((unsigned int)*(hdev->vector_status + (unsigned long)vector_id) == 65535U) {
    #line 494 
    _dev_warn(& (hdev->pdev)->dev,(char *)"vector(vector_id %d) has been freed.\n",vector_id);
    #line 496 
    return;
  }
  #line 499 
  *(hdev->vector_status + (unsigned long)vector_id) = (unsigned short)65535U;
  #line 500 
  hdev->num_msi_left = (unsigned short)((unsigned int)hdev->num_msi_left + 1U);
  #line 501 
  hdev->num_msi_used = (unsigned short)((unsigned int)hdev->num_msi_used + 65535U);
  #line 502 
  return;
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_get_vector(struct hnae3_handle *handle, u16 vector_num, struct hnae3_vector_info *vector_info)
{
  #line 512 
  unsigned short __UNIQUE_ID___x451;
  #line 512 
  int tmp_0;
  #line 513 
  u16 __UNIQUE_ID___x453;
  #line 513 
  int tmp_2;
  #line 510 
  int i;
  #line 510 
  int j;
  #line 507 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 508 
  struct hnae3_vector_info *vector = vector_info;
  #line 509 
  int alloc = 0;
  {
    #line 512 
    __UNIQUE_ID___x451 = (unsigned short)((unsigned int)hdev->num_nic_msix + 65535U);
    #line 512 
    unsigned short __UNIQUE_ID___y452 = vector_num;
    #line 512 
    if ((int)__UNIQUE_ID___x451 < (int)__UNIQUE_ID___y452) 
                                                           #line 512 
                                                           tmp_0 = (int)__UNIQUE_ID___x451; else 
                                                                    #line 512 
                                                                    tmp_0 = (int)__UNIQUE_ID___y452;
    }
  #line 512 
  vector_num = (unsigned short)tmp_0;
  {
    #line 513 
    __UNIQUE_ID___x453 = hdev->num_msi_left;
    #line 513 
    u16 __UNIQUE_ID___y454 = vector_num;
    #line 513 
    if ((int)__UNIQUE_ID___x453 < (int)__UNIQUE_ID___y454) 
                                                           #line 513 
                                                           tmp_2 = (int)__UNIQUE_ID___x453; else 
                                                                    #line 513 
                                                                    tmp_2 = (int)__UNIQUE_ID___y454;
    }
  #line 513 
  vector_num = (unsigned short)tmp_2;
  #line 515 
  j = 0;
  #line 515 
  while ((int)vector_num > j) {
    #line 516 
    i = 1;
    #line 516 
    while ((int)hdev->num_msi > i) {
      #line 517 
      if ((unsigned int)*(hdev->vector_status + (unsigned long)i) == 65535U) {
        #line 518 
        vector->vector = pci_irq_vector(hdev->pdev,(unsigned int)i);
        #line 519 
        vector->io_addr = (u8 *)(hdev->hw.io_base + ((unsigned long)((i + -1) * 4) + (unsigned long)131072U));
        #line 522 
        *(hdev->vector_status + (unsigned long)i) = (unsigned short)0U;
        #line 523 
        *(hdev->vector_irq + (unsigned long)i) = vector->vector;
        #line 525 
        vector ++;
        #line 526 
        alloc ++;
        #line 528 
        break;
      }
      #line 516 
      i ++;
    }
    #line 515 
    j ++;
  }
  #line 532 
  hdev->num_msi_left = (unsigned short)((int)hdev->num_msi_left - (int)((unsigned short)alloc));
  #line 533 
  hdev->num_msi_used = (unsigned short)((int)hdev->num_msi_used + (int)((unsigned short)alloc));
  #line 535 
  return alloc;
}

#line 538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_get_vector_index(struct hclgevf_dev *hdev, int vector)
{
  #line 540 
  int i;
  #line 542 
  i = 0;
  #line 542 
  while ((int)hdev->num_msi > i) {
    #line 543 
    if (*(hdev->vector_irq + (unsigned long)i) == vector) 
                                                          #line 544 
                                                          return i;
    #line 542 
    i ++;
  }
  #line 546 
  return -22;
}

#line 549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_set_rss_algo_key(struct hclgevf_dev *hdev, u8 hfunc, u8 *key)
{
  #line 552 
  struct hclgevf_rss_config_cmd *req;
  #line 554 
  struct hclgevf_desc desc;
  #line 555 
  int key_counts;
  #line 556 
  int key_size;
  #line 557 
  int ret;
  #line 553 
  unsigned int key_offset = 0U;
  #line 559 
  key_counts = 40;
  #line 560 
  req = (struct hclgevf_rss_config_cmd *)(& desc.data);
  #line 562 
  while (key_counts != 0) {
    #line 571 
    int __UNIQUE_ID___x455;
    #line 571 
    int tmp;
    #line 563 
    hclgevf_cmd_setup_basic_desc(& desc,(enum hclgevf_opcode_type)HCLGEVF_OPC_RSS_GENERIC_CONFIG,(_Bool)0);
    #line 567 
    req->hash_config = (unsigned char)((int)req->hash_config | ((int)hfunc & 15));
    #line 568 
    req->hash_config = (unsigned char)((int)req->hash_config | ((int)((unsigned char)key_offset) << 4U));
    {
      #line 571 
      __UNIQUE_ID___x455 = 16;
      #line 571 
      int __UNIQUE_ID___y456 = key_counts;
      #line 571 
      if (__UNIQUE_ID___x455 < __UNIQUE_ID___y456) 
                                                   #line 571 
                                                   tmp = __UNIQUE_ID___x455; else 
                                                                    #line 571 
                                                                    tmp = __UNIQUE_ID___y456;
      }
    #line 571 
    key_size = tmp;
    #line 572 
    memcpy((void *)(& req->hash_key),(void *)(key + (unsigned long)(key_offset * 16U)),(unsigned long)key_size);
    #line 575 
    key_counts -= key_size;
    #line 576 
    key_offset ++;
    #line 577 
    ret = hclgevf_cmd_send(& hdev->hw,& desc,1);
    #line 578 
    if (ret != 0) {
      #line 579 
      _dev_err(& (hdev->pdev)->dev,(char *)"Configure RSS config fail, status = %d\n",ret);
      #line 582 
      return ret;
    }
  }
  #line 586 
  return 0;
}

#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static u32 hclgevf_get_rss_key_size(struct hnae3_handle *handle)
{
  #line 591 
  return 40U;
}

#line 594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static u32 hclgevf_get_rss_indir_size(struct hnae3_handle *handle)
{
  #line 596 
  return 512U;
}

#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_set_rss_indir_table(struct hclgevf_dev *hdev)
{
  #line 602 
  struct hclgevf_rss_indirection_table_cmd *req;
  #line 603 
  struct hclgevf_desc desc;
  #line 604 
  int status;
  #line 605 
  int i;
  #line 605 
  int j;
  #line 601 
  u8 *indir = (u8 *)(& hdev->rss_cfg.rss_indirection_tbl);
  #line 607 
  req = (struct hclgevf_rss_indirection_table_cmd *)(& desc.data);
  #line 609 
  i = 0;
  #line 609 
  while (i <= 31) {
    #line 610 
    hclgevf_cmd_setup_basic_desc(& desc,(enum hclgevf_opcode_type)HCLGEVF_OPC_RSS_INDIR_TABLE,(_Bool)0);
    #line 612 
    req->start_table_index = (unsigned short)((unsigned int)((unsigned short)i) * 16U);
    #line 613 
    req->rss_set_bitmap = (unsigned short)65535U;
    #line 614 
    j = 0;
    #line 614 
    while (j <= 15) {
      #line 615 
      req->rss_result[j] = *(indir + (unsigned long)(i * 16 + j));
      #line 614 
      j ++;
    }
    #line 618 
    status = hclgevf_cmd_send(& hdev->hw,& desc,1);
    #line 619 
    if (status != 0) {
      #line 620 
      _dev_err(& (hdev->pdev)->dev,(char *)"VF failed(=%d) to set RSS indirection table\n",status);
      #line 623 
      return status;
    }
    #line 609 
    i ++;
  }
  #line 627 
  return 0;
}

#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_set_rss_tc_mode(struct hclgevf_dev *hdev, u16 rss_size)
{
  #line 632 
  struct hclgevf_rss_tc_mode_cmd *req;
  #line 633 
  u16 tc_offset[8U];
  #line 634 
  u16 tc_valid[8U];
  #line 635 
  u16 tc_size[8U];
  #line 636 
  struct hclgevf_desc desc;
  #line 637 
  u16 roundup_size;
  #line 638 
  int status;
  #line 639 
  unsigned int i;
  #line 641 
  req = (struct hclgevf_rss_tc_mode_cmd *)(& desc.data);
  #line 643 
  if (0 != 0) {
    #line 643 
    unsigned int tmp_3;
    #line 643 
    unsigned int tmp_35;
    #line 643 
    unsigned int tmp_36;
    #line 643 
    unsigned int tmp_4;
    #line 643 
    unsigned int tmp_5;
    #line 643 
    unsigned int tmp_37;
    #line 643 
    unsigned int tmp_38;
    #line 643 
    unsigned int tmp_6;
    #line 643 
    unsigned int tmp_7;
    #line 643 
    unsigned int tmp_39;
    #line 643 
    unsigned int tmp_40;
    #line 643 
    unsigned int tmp_8;
    #line 643 
    unsigned int tmp_9;
    #line 643 
    unsigned int tmp_41;
    #line 643 
    unsigned int tmp_42;
    #line 643 
    unsigned int tmp_10;
    #line 643 
    unsigned int tmp_11;
    #line 643 
    unsigned int tmp_43;
    #line 643 
    unsigned int tmp_44;
    #line 643 
    unsigned int tmp_12;
    #line 643 
    unsigned int tmp_13;
    #line 643 
    unsigned int tmp_45;
    #line 643 
    unsigned int tmp_46;
    #line 643 
    unsigned int tmp_14;
    #line 643 
    unsigned int tmp_15;
    #line 643 
    unsigned int tmp_47;
    #line 643 
    unsigned int tmp_48;
    #line 643 
    unsigned int tmp_16;
    #line 643 
    unsigned int tmp_17;
    #line 643 
    unsigned int tmp_49;
    #line 643 
    unsigned int tmp_50;
    #line 643 
    unsigned int tmp_18;
    #line 643 
    unsigned int tmp_19;
    #line 643 
    unsigned int tmp_51;
    #line 643 
    unsigned int tmp_52;
    #line 643 
    unsigned int tmp_20;
    #line 643 
    unsigned int tmp_21;
    #line 643 
    unsigned int tmp_53;
    #line 643 
    unsigned int tmp_54;
    #line 643 
    unsigned int tmp_22;
    #line 643 
    unsigned int tmp_23;
    #line 643 
    unsigned int tmp_55;
    #line 643 
    unsigned int tmp_56;
    #line 643 
    unsigned int tmp_24;
    #line 643 
    unsigned int tmp_25;
    #line 643 
    unsigned int tmp_57;
    #line 643 
    unsigned int tmp_58;
    #line 643 
    unsigned int tmp_26;
    #line 643 
    unsigned int tmp_27;
    #line 643 
    unsigned int tmp_59;
    #line 643 
    unsigned int tmp_60;
    #line 643 
    unsigned int tmp_28;
    #line 643 
    unsigned int tmp_29;
    #line 643 
    unsigned int tmp_61;
    #line 643 
    unsigned int tmp_30;
    #line 643 
    unsigned int tmp_63;
    #line 643 
    unsigned int tmp;
    #line 643 
    unsigned int tmp_31;
    #line 643 
    unsigned int tmp_32;
    #line 643 
    unsigned int tmp_0;
    #line 643 
    unsigned int tmp_1;
    #line 643 
    unsigned int tmp_33;
    #line 643 
    unsigned int tmp_34;
    #line 643 
    unsigned int tmp_2;
    #line 643 
    unsigned int tmp_64;
    #line 643 
    if ((unsigned int)rss_size != 1U) {
      #line 643 
      if (0 != 0) {
        #line 643 
        if ((unsigned int)rss_size > 2U) {
          #line 643 
          if (((unsigned long long)((int)rss_size + -1) & 9223372036854775808ULL) == 0ULL) {
            #line 643 
            if (((unsigned long long)((int)rss_size + -1) & 4611686018427387904ULL) == 0ULL) {
              #line 643 
              if (((unsigned long long)((int)rss_size + -1) & 2305843009213693952ULL) == 0ULL) {
                #line 643 
                if (((unsigned long long)((int)rss_size + -1) & 1152921504606846976ULL) == 0ULL) {
                  #line 643 
                  if (((unsigned long long)((int)rss_size + -1) & 576460752303423488ULL) == 0ULL) {
                    #line 643 
                    if (((unsigned long long)((int)rss_size + -1) & 288230376151711744ULL) == 0ULL) {
                      #line 643 
                      if (((unsigned long long)((int)rss_size + -1) & 144115188075855872ULL) == 0ULL) {
                        #line 643 
                        if (((unsigned long long)((int)rss_size + -1) & 72057594037927936ULL) == 0ULL) {
                          #line 643 
                          if (((unsigned long long)((int)rss_size + -1) & 36028797018963968ULL) == 0ULL) {
                            #line 643 
                            if (((unsigned long long)((int)rss_size + -1) & 18014398509481984ULL) == 0ULL) {
                              #line 643 
                              if (((unsigned long long)((int)rss_size + -1) & 9007199254740992ULL) == 0ULL) {
                                #line 643 
                                if (((unsigned long long)((int)rss_size + -1) & 4503599627370496ULL) == 0ULL) {
                                  #line 643 
                                  if (((unsigned long long)((int)rss_size + -1) & 2251799813685248ULL) == 0ULL) {
                                    #line 643 
                                    if (((unsigned long long)((int)rss_size + -1) & 1125899906842624ULL) == 0ULL) {
                                      #line 643 
                                      if (((unsigned long long)((int)rss_size + -1) & 562949953421312ULL) == 0ULL) {
                                        #line 643 
                                        if (((unsigned long long)((int)rss_size + -1) & 281474976710656ULL) == 0ULL) {
                                          #line 643 
                                          if (((unsigned long long)((int)rss_size + -1) & 140737488355328ULL) == 0ULL) {
                                            #line 643 
                                            if (((unsigned long long)((int)rss_size + -1) & 70368744177664ULL) == 0ULL) {
                                              #line 643 
                                              if (((unsigned long long)((int)rss_size + -1) & 35184372088832ULL) == 0ULL) {
                                                #line 643 
                                                if (((unsigned long long)((int)rss_size + -1) & 17592186044416ULL) == 0ULL) {
                                                  #line 643 
                                                  if (((unsigned long long)((int)rss_size + -1) & 8796093022208ULL) == 0ULL) {
                                                    #line 643 
                                                    if (((unsigned long long)((int)rss_size + -1) & 4398046511104ULL) == 0ULL) {
                                                      #line 643 
                                                      if (((unsigned long long)((int)rss_size + -1) & 2199023255552ULL) == 0ULL) {
                                                        #line 643 
                                                        if (((unsigned long long)((int)rss_size + -1) & 1099511627776ULL) == 0ULL) {
                                                          #line 643 
                                                          if (((unsigned long long)((int)rss_size + -1) & 549755813888ULL) == 0ULL) {
                                                            #line 643 
                                                            if (((unsigned long long)((int)rss_size + -1) & 274877906944ULL) == 0ULL) {
                                                              #line 643 
                                                              if (((unsigned long long)((int)rss_size + -1) & 137438953472ULL) == 0ULL) {
                                                                #line 643 
                                                                if (((unsigned long long)((int)rss_size + -1) & 68719476736ULL) == 0ULL) {
                                                                  #line 643 
                                                                  if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 34359738368ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 17179869184ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 8589934592ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 4294967296ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 2147483648ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 1073741824ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 536870912ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 268435456ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 134217728ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 67108864ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 33554432ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 16777216ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 8388608ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 4194304ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 2097152ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 1048576ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 524288ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 262144ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 131072ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 65536ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 32768ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 16384ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 8192ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 4096ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 2048ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 1024ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 512ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 256ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 128ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 64ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 32ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 16ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 8ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)((int)rss_size + -1) & 4ULL) != 0ULL) 
                                                                    #line 643 
                                                                    tmp = 8U; else 
                                                                    #line 643 
                                                                    tmp = 4U;
                                                                    #line 643 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_0 = 16U;
                                                                    #line 643 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_1 = 32U;
                                                                    #line 643 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_2 = 64U;
                                                                    #line 643 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_3 = 128U;
                                                                    #line 643 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_4 = 256U;
                                                                    #line 643 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_5 = 512U;
                                                                    #line 643 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_6 = 1024U;
                                                                    #line 643 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_7 = 2048U;
                                                                    #line 643 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_8 = 4096U;
                                                                    #line 643 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_9 = 8192U;
                                                                    #line 643 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_10 = 16384U;
                                                                    #line 643 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_11 = 32768U;
                                                                    #line 643 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_12 = 0U;
                                                                    #line 643 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_13 = 0U;
                                                                    #line 643 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_14 = 0U;
                                                                    #line 643 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_15 = 0U;
                                                                    #line 643 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_16 = 0U;
                                                                    #line 643 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_17 = 0U;
                                                                    #line 643 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_18 = 0U;
                                                                    #line 643 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_19 = 0U;
                                                                    #line 643 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_20 = 0U;
                                                                    #line 643 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_21 = 0U;
                                                                    #line 643 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_22 = 0U;
                                                                    #line 643 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_23 = 0U;
                                                                    #line 643 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_24 = 0U;
                                                                    #line 643 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_25 = 0U;
                                                                    #line 643 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_26 = 0U;
                                                                    #line 643 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_27 = 0U;
                                                                    #line 643 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_28 = 0U;
                                                                    #line 643 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_29 = 0U;
                                                                    #line 643 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_30 = 0U;
                                                                    #line 643 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_31 = 0U;
                                                                    #line 643 
                                                                    tmp_32 = tmp_31;
                                                                  }
                                                                  else 
                                                                    #line 643 
                                                                    tmp_32 = 0U;
                                                                  #line 643 
                                                                  tmp_33 = tmp_32;
                                                                }
                                                                else 
                                                                  #line 643 
                                                                  tmp_33 = 0U;
                                                                #line 643 
                                                                tmp_34 = tmp_33;
                                                              }
                                                              else 
                                                                   #line 643 
                                                                   tmp_34 = 0U;
                                                              #line 643 
                                                              tmp_35 = tmp_34;
                                                            }
                                                            else 
                                                                 #line 643 
                                                                 tmp_35 = 0U;
                                                            #line 643 
                                                            tmp_36 = tmp_35;
                                                          }
                                                          else 
                                                               #line 643 
                                                               tmp_36 = 0U;
                                                          #line 643 
                                                          tmp_37 = tmp_36;
                                                        }
                                                        else 
                                                             #line 643 
                                                             tmp_37 = 0U;
                                                        #line 643 
                                                        tmp_38 = tmp_37;
                                                      }
                                                      else 
                                                           #line 643 
                                                           tmp_38 = 0U;
                                                      #line 643 
                                                      tmp_39 = tmp_38;
                                                    }
                                                    else 
                                                         #line 643 
                                                         tmp_39 = 0U;
                                                    #line 643 
                                                    tmp_40 = tmp_39;
                                                  }
                                                  else 
                                                       #line 643 
                                                       tmp_40 = 0U;
                                                  #line 643 
                                                  tmp_41 = tmp_40;
                                                }
                                                else 
                                                     #line 643 
                                                     tmp_41 = 0U;
                                                #line 643 
                                                tmp_42 = tmp_41;
                                              }
                                              else 
                                                   #line 643 
                                                   tmp_42 = 0U;
                                              #line 643 
                                              tmp_43 = tmp_42;
                                            }
                                            else 
                                                 #line 643 
                                                 tmp_43 = 0U;
                                            #line 643 
                                            tmp_44 = tmp_43;
                                          }
                                          else 
                                               #line 643 
                                               tmp_44 = 0U;
                                          #line 643 
                                          tmp_45 = tmp_44;
                                        }
                                        else 
                                             #line 643 
                                             tmp_45 = 0U;
                                        #line 643 
                                        tmp_46 = tmp_45;
                                      }
                                      else 
                                           #line 643 
                                           tmp_46 = 0U;
                                      #line 643 
                                      tmp_47 = tmp_46;
                                    }
                                    else 
                                         #line 643 
                                         tmp_47 = 0U;
                                    #line 643 
                                    tmp_48 = tmp_47;
                                  }
                                  else 
                                       #line 643 
                                       tmp_48 = 0U;
                                  #line 643 
                                  tmp_49 = tmp_48;
                                }
                                else 
                                     #line 643 
                                     tmp_49 = 0U;
                                #line 643 
                                tmp_50 = tmp_49;
                              }
                              else 
                                   #line 643 
                                   tmp_50 = 0U;
                              #line 643 
                              tmp_51 = tmp_50;
                            }
                            else 
                                 #line 643 
                                 tmp_51 = 0U;
                            #line 643 
                            tmp_52 = tmp_51;
                          }
                          else 
                               #line 643 
                               tmp_52 = 0U;
                          #line 643 
                          tmp_53 = tmp_52;
                        }
                        else 
                             #line 643 
                             tmp_53 = 0U;
                        #line 643 
                        tmp_54 = tmp_53;
                      }
                      else 
                           #line 643 
                           tmp_54 = 0U;
                      #line 643 
                      tmp_55 = tmp_54;
                    }
                    else 
                         #line 643 
                         tmp_55 = 0U;
                    #line 643 
                    tmp_56 = tmp_55;
                  }
                  else 
                       #line 643 
                       tmp_56 = 0U;
                  #line 643 
                  tmp_57 = tmp_56;
                }
                else 
                     #line 643 
                     tmp_57 = 0U;
                #line 643 
                tmp_58 = tmp_57;
              }
              else 
                   #line 643 
                   tmp_58 = 0U;
              #line 643 
              tmp_59 = tmp_58;
            }
            else 
                 #line 643 
                 tmp_59 = 0U;
            #line 643 
            tmp_60 = tmp_59;
          }
          else 
               #line 643 
               tmp_60 = 0U;
          #line 643 
          tmp_61 = tmp_60;
        }
        else 
             #line 643 
             tmp_61 = 2U;
        #line 643 
        tmp_63 = tmp_61;
      }
      else {
        #line 643 
        tmp_63 = (unsigned int)((unsigned short)(1UL << (__ilog2_u32((unsigned int)((int)rss_size + -1)) + 1)));
      }
      #line 643 
      tmp_64 = tmp_63;
    }
    else 
         #line 643 
         tmp_64 = 1U;
    #line 643 
    roundup_size = (unsigned short)tmp_64;
  }
  else {
    #line 643 
    roundup_size = (unsigned short)__roundup_pow_of_two((unsigned long)rss_size);
  }
  #line 644 
  if (0 != 0) {
    #line 644 
    unsigned int tmp_99;
    #line 644 
    unsigned int tmp_67;
    #line 644 
    unsigned int tmp_68;
    #line 644 
    unsigned int tmp_100;
    #line 644 
    unsigned int tmp_101;
    #line 644 
    unsigned int tmp_69;
    #line 644 
    unsigned int tmp_70;
    #line 644 
    unsigned int tmp_102;
    #line 644 
    unsigned int tmp_103;
    #line 644 
    unsigned int tmp_71;
    #line 644 
    unsigned int tmp_72;
    #line 644 
    unsigned int tmp_104;
    #line 644 
    unsigned int tmp_105;
    #line 644 
    unsigned int tmp_73;
    #line 644 
    unsigned int tmp_74;
    #line 644 
    unsigned int tmp_106;
    #line 644 
    unsigned int tmp_107;
    #line 644 
    unsigned int tmp_75;
    #line 644 
    unsigned int tmp_76;
    #line 644 
    unsigned int tmp_108;
    #line 644 
    unsigned int tmp_109;
    #line 644 
    unsigned int tmp_77;
    #line 644 
    unsigned int tmp_78;
    #line 644 
    unsigned int tmp_110;
    #line 644 
    unsigned int tmp_111;
    #line 644 
    unsigned int tmp_79;
    #line 644 
    unsigned int tmp_80;
    #line 644 
    unsigned int tmp_112;
    #line 644 
    unsigned int tmp_113;
    #line 644 
    unsigned int tmp_81;
    #line 644 
    unsigned int tmp_82;
    #line 644 
    unsigned int tmp_114;
    #line 644 
    unsigned int tmp_115;
    #line 644 
    unsigned int tmp_83;
    #line 644 
    unsigned int tmp_84;
    #line 644 
    unsigned int tmp_116;
    #line 644 
    unsigned int tmp_117;
    #line 644 
    unsigned int tmp_85;
    #line 644 
    unsigned int tmp_86;
    #line 644 
    unsigned int tmp_118;
    #line 644 
    unsigned int tmp_119;
    #line 644 
    unsigned int tmp_87;
    #line 644 
    unsigned int tmp_88;
    #line 644 
    unsigned int tmp_120;
    #line 644 
    unsigned int tmp_121;
    #line 644 
    unsigned int tmp_89;
    #line 644 
    unsigned int tmp_90;
    #line 644 
    unsigned int tmp_122;
    #line 644 
    unsigned int tmp_123;
    #line 644 
    unsigned int tmp_91;
    #line 644 
    unsigned int tmp_92;
    #line 644 
    unsigned int tmp_124;
    #line 644 
    unsigned int tmp_125;
    #line 644 
    unsigned int tmp_93;
    #line 644 
    unsigned int tmp_94;
    #line 644 
    unsigned int tmp_126;
    #line 644 
    unsigned int tmp_127;
    #line 644 
    unsigned int tmp_95;
    #line 644 
    unsigned int tmp_96;
    #line 644 
    unsigned int tmp_97;
    #line 644 
    unsigned int tmp_66;
    #line 644 
    unsigned int tmp_98;
    #line 644 
    unsigned int tmp_128;
    #line 644 
    if ((unsigned int)roundup_size > 1U) {
      #line 644 
      if (((unsigned long long)roundup_size & 9223372036854775808ULL) == 0ULL) {
        #line 644 
        if (((unsigned long long)roundup_size & 4611686018427387904ULL) == 0ULL) {
          #line 644 
          if (((unsigned long long)roundup_size & 2305843009213693952ULL) == 0ULL) {
            #line 644 
            if (((unsigned long long)roundup_size & 1152921504606846976ULL) == 0ULL) {
              #line 644 
              if (((unsigned long long)roundup_size & 576460752303423488ULL) == 0ULL) {
                #line 644 
                if (((unsigned long long)roundup_size & 288230376151711744ULL) == 0ULL) {
                  #line 644 
                  if (((unsigned long long)roundup_size & 144115188075855872ULL) == 0ULL) {
                    #line 644 
                    if (((unsigned long long)roundup_size & 72057594037927936ULL) == 0ULL) {
                      #line 644 
                      if (((unsigned long long)roundup_size & 36028797018963968ULL) == 0ULL) {
                        #line 644 
                        if (((unsigned long long)roundup_size & 18014398509481984ULL) == 0ULL) {
                          #line 644 
                          if (((unsigned long long)roundup_size & 9007199254740992ULL) == 0ULL) {
                            #line 644 
                            if (((unsigned long long)roundup_size & 4503599627370496ULL) == 0ULL) {
                              #line 644 
                              if (((unsigned long long)roundup_size & 2251799813685248ULL) == 0ULL) {
                                #line 644 
                                if (((unsigned long long)roundup_size & 1125899906842624ULL) == 0ULL) {
                                  #line 644 
                                  if (((unsigned long long)roundup_size & 562949953421312ULL) == 0ULL) {
                                    #line 644 
                                    if (((unsigned long long)roundup_size & 281474976710656ULL) == 0ULL) {
                                      #line 644 
                                      if (((unsigned long long)roundup_size & 140737488355328ULL) == 0ULL) {
                                        #line 644 
                                        if (((unsigned long long)roundup_size & 70368744177664ULL) == 0ULL) {
                                          #line 644 
                                          if (((unsigned long long)roundup_size & 35184372088832ULL) == 0ULL) {
                                            #line 644 
                                            if (((unsigned long long)roundup_size & 17592186044416ULL) == 0ULL) {
                                              #line 644 
                                              if (((unsigned long long)roundup_size & 8796093022208ULL) == 0ULL) {
                                                #line 644 
                                                if (((unsigned long long)roundup_size & 4398046511104ULL) == 0ULL) {
                                                  #line 644 
                                                  if (((unsigned long long)roundup_size & 2199023255552ULL) == 0ULL) {
                                                    #line 644 
                                                    if (((unsigned long long)roundup_size & 1099511627776ULL) == 0ULL) {
                                                      #line 644 
                                                      if (((unsigned long long)roundup_size & 549755813888ULL) == 0ULL) {
                                                        #line 644 
                                                        if (((unsigned long long)roundup_size & 274877906944ULL) == 0ULL) {
                                                          #line 644 
                                                          if (((unsigned long long)roundup_size & 137438953472ULL) == 0ULL) {
                                                            #line 644 
                                                            if (((unsigned long long)roundup_size & 68719476736ULL) == 0ULL) {
                                                              #line 644 
                                                              if (((unsigned long long)roundup_size & 34359738368ULL) == 0ULL) {
                                                                #line 644 
                                                                if (((unsigned long long)roundup_size & 17179869184ULL) == 0ULL) {
                                                                  #line 644 
                                                                  if (
                                                                    ((unsigned long long)roundup_size & 8589934592ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 4294967296ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 2147483648ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 1073741824ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 536870912ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 268435456ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 134217728ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 67108864ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 33554432ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 16777216ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 8388608ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 4194304ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 2097152ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 1048576ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 524288ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 262144ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 131072ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 65536ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 32768ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 16384ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 8192ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 4096ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 2048ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 1024ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 512ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 256ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 128ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 64ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 32ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 16ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 8ULL) == 0ULL) {
                                                                    #line 644 
                                                                    if (
                                                                    ((unsigned long long)roundup_size & 4ULL) != 0ULL) 
                                                                    #line 644 
                                                                    tmp_66 = 2U; else 
                                                                    #line 644 
                                                                    tmp_66 = 1U;
                                                                    #line 644 
                                                                    tmp_67 = tmp_66;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_67 = 3U;
                                                                    #line 644 
                                                                    tmp_68 = tmp_67;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_68 = 4U;
                                                                    #line 644 
                                                                    tmp_69 = tmp_68;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_69 = 5U;
                                                                    #line 644 
                                                                    tmp_70 = tmp_69;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_70 = 6U;
                                                                    #line 644 
                                                                    tmp_71 = tmp_70;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_71 = 7U;
                                                                    #line 644 
                                                                    tmp_72 = tmp_71;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_72 = 8U;
                                                                    #line 644 
                                                                    tmp_73 = tmp_72;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_73 = 9U;
                                                                    #line 644 
                                                                    tmp_74 = tmp_73;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_74 = 10U;
                                                                    #line 644 
                                                                    tmp_75 = tmp_74;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_75 = 11U;
                                                                    #line 644 
                                                                    tmp_76 = tmp_75;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_76 = 12U;
                                                                    #line 644 
                                                                    tmp_77 = tmp_76;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_77 = 13U;
                                                                    #line 644 
                                                                    tmp_78 = tmp_77;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_78 = 14U;
                                                                    #line 644 
                                                                    tmp_79 = tmp_78;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_79 = 15U;
                                                                    #line 644 
                                                                    tmp_80 = tmp_79;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_80 = 16U;
                                                                    #line 644 
                                                                    tmp_81 = tmp_80;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_81 = 17U;
                                                                    #line 644 
                                                                    tmp_82 = tmp_81;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_82 = 18U;
                                                                    #line 644 
                                                                    tmp_83 = tmp_82;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_83 = 19U;
                                                                    #line 644 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_84 = 20U;
                                                                    #line 644 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_85 = 21U;
                                                                    #line 644 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_86 = 22U;
                                                                    #line 644 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_87 = 23U;
                                                                    #line 644 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_88 = 24U;
                                                                    #line 644 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_89 = 25U;
                                                                    #line 644 
                                                                    tmp_90 = tmp_89;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_90 = 26U;
                                                                    #line 644 
                                                                    tmp_91 = tmp_90;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_91 = 27U;
                                                                    #line 644 
                                                                    tmp_92 = tmp_91;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_92 = 28U;
                                                                    #line 644 
                                                                    tmp_93 = tmp_92;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_93 = 29U;
                                                                    #line 644 
                                                                    tmp_94 = tmp_93;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_94 = 30U;
                                                                    #line 644 
                                                                    tmp_95 = tmp_94;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_95 = 31U;
                                                                    #line 644 
                                                                    tmp_96 = tmp_95;
                                                                    }
                                                                    else 
                                                                    #line 644 
                                                                    tmp_96 = 32U;
                                                                    #line 644 
                                                                    tmp_97 = tmp_96;
                                                                  }
                                                                  else 
                                                                    #line 644 
                                                                    tmp_97 = 33U;
                                                                  #line 644 
                                                                  tmp_98 = tmp_97;
                                                                }
                                                                else 
                                                                  #line 644 
                                                                  tmp_98 = 34U;
                                                                #line 644 
                                                                tmp_99 = tmp_98;
                                                              }
                                                              else 
                                                                   #line 644 
                                                                   tmp_99 = 35U;
                                                              #line 644 
                                                              tmp_100 = tmp_99;
                                                            }
                                                            else 
                                                                 #line 644 
                                                                 tmp_100 = 36U;
                                                            #line 644 
                                                            tmp_101 = tmp_100;
                                                          }
                                                          else 
                                                               #line 644 
                                                               tmp_101 = 37U;
                                                          #line 644 
                                                          tmp_102 = tmp_101;
                                                        }
                                                        else 
                                                             #line 644 
                                                             tmp_102 = 38U;
                                                        #line 644 
                                                        tmp_103 = tmp_102;
                                                      }
                                                      else 
                                                           #line 644 
                                                           tmp_103 = 39U;
                                                      #line 644 
                                                      tmp_104 = tmp_103;
                                                    }
                                                    else 
                                                         #line 644 
                                                         tmp_104 = 40U;
                                                    #line 644 
                                                    tmp_105 = tmp_104;
                                                  }
                                                  else 
                                                       #line 644 
                                                       tmp_105 = 41U;
                                                  #line 644 
                                                  tmp_106 = tmp_105;
                                                }
                                                else 
                                                     #line 644 
                                                     tmp_106 = 42U;
                                                #line 644 
                                                tmp_107 = tmp_106;
                                              }
                                              else 
                                                   #line 644 
                                                   tmp_107 = 43U;
                                              #line 644 
                                              tmp_108 = tmp_107;
                                            }
                                            else 
                                                 #line 644 
                                                 tmp_108 = 44U;
                                            #line 644 
                                            tmp_109 = tmp_108;
                                          }
                                          else 
                                               #line 644 
                                               tmp_109 = 45U;
                                          #line 644 
                                          tmp_110 = tmp_109;
                                        }
                                        else 
                                             #line 644 
                                             tmp_110 = 46U;
                                        #line 644 
                                        tmp_111 = tmp_110;
                                      }
                                      else 
                                           #line 644 
                                           tmp_111 = 47U;
                                      #line 644 
                                      tmp_112 = tmp_111;
                                    }
                                    else 
                                         #line 644 
                                         tmp_112 = 48U;
                                    #line 644 
                                    tmp_113 = tmp_112;
                                  }
                                  else 
                                       #line 644 
                                       tmp_113 = 49U;
                                  #line 644 
                                  tmp_114 = tmp_113;
                                }
                                else 
                                     #line 644 
                                     tmp_114 = 50U;
                                #line 644 
                                tmp_115 = tmp_114;
                              }
                              else 
                                   #line 644 
                                   tmp_115 = 51U;
                              #line 644 
                              tmp_116 = tmp_115;
                            }
                            else 
                                 #line 644 
                                 tmp_116 = 52U;
                            #line 644 
                            tmp_117 = tmp_116;
                          }
                          else 
                               #line 644 
                               tmp_117 = 53U;
                          #line 644 
                          tmp_118 = tmp_117;
                        }
                        else 
                             #line 644 
                             tmp_118 = 54U;
                        #line 644 
                        tmp_119 = tmp_118;
                      }
                      else 
                           #line 644 
                           tmp_119 = 55U;
                      #line 644 
                      tmp_120 = tmp_119;
                    }
                    else 
                         #line 644 
                         tmp_120 = 56U;
                    #line 644 
                    tmp_121 = tmp_120;
                  }
                  else 
                       #line 644 
                       tmp_121 = 57U;
                  #line 644 
                  tmp_122 = tmp_121;
                }
                else 
                     #line 644 
                     tmp_122 = 58U;
                #line 644 
                tmp_123 = tmp_122;
              }
              else 
                   #line 644 
                   tmp_123 = 59U;
              #line 644 
              tmp_124 = tmp_123;
            }
            else 
                 #line 644 
                 tmp_124 = 60U;
            #line 644 
            tmp_125 = tmp_124;
          }
          else 
               #line 644 
               tmp_125 = 61U;
          #line 644 
          tmp_126 = tmp_125;
        }
        else 
             #line 644 
             tmp_126 = 62U;
        #line 644 
        tmp_127 = tmp_126;
      }
      else 
           #line 644 
           tmp_127 = 63U;
      #line 644 
      tmp_128 = tmp_127;
    }
    else 
         #line 644 
         tmp_128 = 0U;
    #line 644 
    roundup_size = (unsigned short)tmp_128;
  }
  else {
    #line 644 
    roundup_size = (unsigned short)__ilog2_u32((unsigned int)roundup_size);
  }
  #line 646 
  i = 0U;
  #line 646 
  while (i <= 7U) {
    #line 647 
    tc_valid[i] = (unsigned short)((((unsigned long)hdev->hw_tc_map >> i) & 1UL) != 0UL);
    #line 648 
    tc_size[i] = roundup_size;
    #line 649 
    tc_offset[i] = (unsigned short)((int)((unsigned short)i) * (int)rss_size);
    #line 646 
    i ++;
  }
  #line 652 
  hclgevf_cmd_setup_basic_desc(& desc,(enum hclgevf_opcode_type)HCLGEVF_OPC_RSS_TC_MODE,(_Bool)0);
  #line 653 
  i = 0U;
  #line 653 
  while (i <= 7U) {
    #line 654 
    req->rss_tc_mode[i] = (unsigned short)((unsigned int)req->rss_tc_mode[i] & 32767U);
    #line 654 
    req->rss_tc_mode[i] = (unsigned short)((int)req->rss_tc_mode[i] | ((int)tc_valid[i] << 15));
    #line 656 
    req->rss_tc_mode[i] = (unsigned short)((unsigned int)req->rss_tc_mode[i] & 36863U);
    #line 656 
    req->rss_tc_mode[i] = (unsigned short)((int)req->rss_tc_mode[i] | (((int)tc_size[i] << 12) & 28672));
    #line 658 
    req->rss_tc_mode[i] = (unsigned short)((unsigned int)req->rss_tc_mode[i] & 64512U);
    #line 658 
    req->rss_tc_mode[i] = (unsigned short)((int)req->rss_tc_mode[i] | ((int)tc_offset[i] & 1023));
    #line 653 
    i ++;
  }
  #line 661 
  status = hclgevf_cmd_send(& hdev->hw,& desc,1);
  #line 662 
  if (status != 0) 
                   #line 663 
                   _dev_err(& (hdev->pdev)->dev,(char *)"VF failed(=%d) to set rss tc mode\n",status);
  #line 666 
  return status;
}

#line 670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_get_rss_hash_key(struct hclgevf_dev *hdev)
{
  #line 675 
  u8 resp_msg[8U];
  #line 676 
  u16 msg_num;
  #line 676 
  u16 hash_key_index;
  #line 677 
  u8 index;
  #line 678 
  int ret;
  #line 674 
  struct hclgevf_rss_cfg *rss_cfg = & hdev->rss_cfg;
  #line 680 
  msg_num = (unsigned short)5U;
  #line 682 
  index = (unsigned char)0U;
  #line 682 
  while ((int)((unsigned short)index) < (int)msg_num) {
    #line 683 
    ret = hclgevf_send_mbx_msg(hdev,(unsigned short)15,(unsigned short)0,& index,(unsigned char)1,(_Bool)1,(u8 *)(& resp_msg),(unsigned short)8);
    #line 687 
    if (ret != 0) {
      #line 688 
      _dev_err(& (hdev->pdev)->dev,(char *)"VF get rss hash key from PF failed, ret=%d",ret);
      #line 691 
      return ret;
    }
    #line 694 
    hash_key_index = (unsigned short)((unsigned int)((unsigned short)index) * 8U);
    #line 695 
    if ((int)index == (int)msg_num + -1) 
                                         #line 696 
                                         memcpy((void *)(& rss_cfg->rss_hash_key[(int)hash_key_index]),(void *)(resp_msg),(unsigned long)(40 - (int)hash_key_index)); else 
                                                                    #line 700 
                                                                    memcpy((void *)(& rss_cfg->rss_hash_key[(int)hash_key_index]),(void *)(resp_msg),8UL);
    #line 682 
    index = (u8)((int)index + 1);
  }
  #line 704 
  return 0;
}

#line 707  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_get_rss(struct hnae3_handle *handle, u32 *indir, u8 *key, u8 *hfunc)
{
  #line 712 
  int i;
  #line 712 
  int ret;
  #line 710 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 711 
  struct hclgevf_rss_cfg *rss_cfg = & hdev->rss_cfg;
  #line 714 
  if ((unsigned int)(handle->pdev)->revision > 32U) {
    #line 716 
    if (hfunc != (u8 *)0U) 
      #line 717 
      switch (rss_cfg->hash_algo) {
        #line 718 
        case (u32)0: 
                     #line 718 
        ;
        #line 719 
        *hfunc = (unsigned char)1U;
        #line 720 
        break;
        #line 721 
        case (u32)1: 
                     #line 721 
        ;
        #line 722 
        *hfunc = (unsigned char)2U;
        #line 723 
        break;
        #line 724 
        default: 
                 #line 724 
        ;
        #line 725 
        *hfunc = (unsigned char)0U;
        #line 726 
        break;
      }
    #line 731 
    if (key != (u8 *)0U) 
                         #line 732 
                         memcpy((void *)key,(void *)(& rss_cfg->rss_hash_key),40UL);
  }
  else {
    #line 735 
    if (hfunc != (u8 *)0U) 
                           #line 736 
                           *hfunc = (unsigned char)1U;
    #line 737 
    if (key != (u8 *)0U) {
      #line 738 
      ret = hclgevf_get_rss_hash_key(hdev);
      #line 739 
      if (ret != 0) 
                    #line 740 
                    return ret;
      #line 741 
      memcpy((void *)key,(void *)(& rss_cfg->rss_hash_key),40UL);
    }
  }
  #line 746 
  if (indir != (u32 *)0U) {
    #line 747 
    i = 0;
    #line 747 
    while (i <= 511) {
      #line 748 
      *(indir + (unsigned long)i) = (unsigned int)rss_cfg->rss_indirection_tbl[i];
      #line 747 
      i ++;
    }
  }
  #line 750 
  return 0;
}

#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_set_rss(struct hnae3_handle *handle, u32 *indir, u8 *key, u8 hfunc)
{
  #line 758 
  int ret;
  #line 758 
  int i;
  #line 756 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 757 
  struct hclgevf_rss_cfg *rss_cfg = & hdev->rss_cfg;
  #line 760 
  if ((unsigned int)(handle->pdev)->revision > 32U) 
    #line 762 
    if (key != (u8 *)0U) {
      #line 763 
      switch ((int)hfunc) {
        #line 764 
        case 1: 
                #line 764 
        ;
        #line 765 
        rss_cfg->hash_algo = 0U;
        #line 767 
        break;
        #line 768 
        case 2: 
                #line 768 
        ;
        #line 769 
        rss_cfg->hash_algo = 1U;
        #line 771 
        break;
        #line 772 
        case 0: 
                #line 772 
        ;
        #line 773 
        break;
        #line 774 
        default: 
                 #line 774 
        ;
        #line 775 
        return -22;
      }
      #line 778 
      ret = hclgevf_set_rss_algo_key(hdev,(unsigned char)((int)((unsigned char)rss_cfg->hash_algo)),key);
      #line 780 
      if (ret != 0) 
                    #line 781 
                    return ret;
      #line 784 
      memcpy((void *)(& rss_cfg->rss_hash_key),(void *)key,40UL);
    }
  #line 790 
  i = 0;
  #line 790 
  while (i <= 511) {
    #line 791 
    rss_cfg->rss_indirection_tbl[i] = (unsigned char)*(indir + (unsigned long)i);
    #line 790 
    i ++;
  }
  #line 794 
  return hclgevf_set_rss_indir_table(hdev);
}

#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static u8 hclgevf_get_rss_hash_bits(struct ethtool_rxnfc *nfc)
{
  #line 799 
  u8 hash_sets = (unsigned char)((unsigned int)((unsigned char)(nfc->data >> 5)) & 2U);
  #line 801 
  if ((nfc->data & 128ULL) != 0ULL) 
                                    #line 802 
                                    hash_sets = (unsigned char)((unsigned int)hash_sets | 1U); else 
                                                                    #line 804 
                                                                    hash_sets = (unsigned char)((unsigned int)hash_sets & 254U);
  #line 806 
  if ((nfc->data & 16ULL) != 0ULL) 
                                   #line 807 
                                   hash_sets = (unsigned char)((unsigned int)hash_sets | 8U); else 
                                                                    #line 809 
                                                                    hash_sets = (unsigned char)((unsigned int)hash_sets & 247U);
  #line 811 
  if ((nfc->data & 32ULL) != 0ULL) 
                                   #line 812 
                                   hash_sets = (unsigned char)((unsigned int)hash_sets | 4U); else 
                                                                    #line 814 
                                                                    hash_sets = (unsigned char)((unsigned int)hash_sets & 251U);
  #line 816 
  if (nfc->flow_type == 3U || nfc->flow_type == 7U) 
                                                    #line 817 
                                                    hash_sets = (unsigned char)((unsigned int)hash_sets | 16U);
  #line 819 
  return hash_sets;
}

#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_set_rss_tuple(struct hnae3_handle *handle, struct ethtool_rxnfc *nfc)
{
  #line 827 
  struct hclgevf_rss_input_tuple_cmd *req;
  #line 828 
  struct hclgevf_desc desc;
  #line 829 
  u8 tuple_sets;
  #line 830 
  int ret;
  #line 825 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 826 
  struct hclgevf_rss_cfg *rss_cfg = & hdev->rss_cfg;
  #line 832 
  if ((unsigned int)(handle->pdev)->revision == 32U) 
                                                     #line 833 
                                                     return -95;
  #line 835 
  if ((nfc->data & 18446744073709551375ULL) != 0ULL) 
                                                     #line 837 
                                                     return -22;
  #line 839 
  req = (struct hclgevf_rss_input_tuple_cmd *)(& desc.data);
  #line 840 
  hclgevf_cmd_setup_basic_desc(& desc,(enum hclgevf_opcode_type)HCLGEVF_OPC_RSS_INPUT_TUPLE,(_Bool)0);
  #line 842 
  req->ipv4_tcp_en = rss_cfg->rss_tuple_sets.ipv4_tcp_en;
  #line 843 
  req->ipv4_udp_en = rss_cfg->rss_tuple_sets.ipv4_udp_en;
  #line 844 
  req->ipv4_sctp_en = rss_cfg->rss_tuple_sets.ipv4_sctp_en;
  #line 845 
  req->ipv4_fragment_en = rss_cfg->rss_tuple_sets.ipv4_fragment_en;
  #line 846 
  req->ipv6_tcp_en = rss_cfg->rss_tuple_sets.ipv6_tcp_en;
  #line 847 
  req->ipv6_udp_en = rss_cfg->rss_tuple_sets.ipv6_udp_en;
  #line 848 
  req->ipv6_sctp_en = rss_cfg->rss_tuple_sets.ipv6_sctp_en;
  #line 849 
  req->ipv6_fragment_en = rss_cfg->rss_tuple_sets.ipv6_fragment_en;
  #line 851 
  tuple_sets = hclgevf_get_rss_hash_bits(nfc);
  #line 852 
  switch (nfc->flow_type) {
    #line 853 
    case (__u32)1: 
                   #line 853 
    ;
    #line 854 
    req->ipv4_tcp_en = tuple_sets;
    #line 855 
    break;
    #line 856 
    case (__u32)5: 
                   #line 856 
    ;
    #line 857 
    req->ipv6_tcp_en = tuple_sets;
    #line 858 
    break;
    #line 859 
    case (__u32)2: 
                   #line 859 
    ;
    #line 860 
    req->ipv4_udp_en = tuple_sets;
    #line 861 
    break;
    #line 862 
    case (__u32)6: 
                   #line 862 
    ;
    #line 863 
    req->ipv6_udp_en = tuple_sets;
    #line 864 
    break;
    #line 865 
    case (__u32)3: 
                   #line 865 
    ;
    #line 866 
    req->ipv4_sctp_en = tuple_sets;
    #line 867 
    break;
    #line 868 
    case (__u32)7: 
                   #line 868 
    ;
    #line 869 
    if ((nfc->data & 64ULL) != 0ULL || (nfc->data & 128ULL) != 0ULL) 
      #line 871 
      return -22;
    #line 873 
    req->ipv6_sctp_en = tuple_sets;
    #line 874 
    break;
    #line 875 
    case (__u32)16: 
                    #line 875 
    ;
    #line 876 
    req->ipv4_fragment_en = (unsigned char)15U;
    #line 877 
    break;
    #line 878 
    case (__u32)17: 
                    #line 878 
    ;
    #line 879 
    req->ipv6_fragment_en = (unsigned char)15U;
    #line 880 
    break;
    #line 881 
    default: 
             #line 881 
    ;
    #line 882 
    return -22;
  }
  #line 885 
  ret = hclgevf_cmd_send(& hdev->hw,& desc,1);
  #line 886 
  if (ret != 0) {
    #line 887 
    _dev_err(& (hdev->pdev)->dev,(char *)"Set rss tuple fail, status = %d\n",ret);
    #line 889 
    return ret;
  }
  #line 892 
  rss_cfg->rss_tuple_sets.ipv4_tcp_en = req->ipv4_tcp_en;
  #line 893 
  rss_cfg->rss_tuple_sets.ipv4_udp_en = req->ipv4_udp_en;
  #line 894 
  rss_cfg->rss_tuple_sets.ipv4_sctp_en = req->ipv4_sctp_en;
  #line 895 
  rss_cfg->rss_tuple_sets.ipv4_fragment_en = req->ipv4_fragment_en;
  #line 896 
  rss_cfg->rss_tuple_sets.ipv6_tcp_en = req->ipv6_tcp_en;
  #line 897 
  rss_cfg->rss_tuple_sets.ipv6_udp_en = req->ipv6_udp_en;
  #line 898 
  rss_cfg->rss_tuple_sets.ipv6_sctp_en = req->ipv6_sctp_en;
  #line 899 
  rss_cfg->rss_tuple_sets.ipv6_fragment_en = req->ipv6_fragment_en;
  #line 900 
  return 0;
}

#line 903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_get_rss_tuple(struct hnae3_handle *handle, struct ethtool_rxnfc *nfc)
{
  #line 908 
  u8 tuple_sets;
  #line 906 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 907 
  struct hclgevf_rss_cfg *rss_cfg = & hdev->rss_cfg;
  #line 910 
  if ((unsigned int)(handle->pdev)->revision == 32U) 
                                                     #line 911 
                                                     return -95;
  #line 913 
  nfc->data = 0ULL;
  #line 915 
  switch (nfc->flow_type) {
    #line 916 
    case (__u32)1: 
                   #line 916 
    ;
    #line 917 
    tuple_sets = rss_cfg->rss_tuple_sets.ipv4_tcp_en;
    #line 918 
    break;
    #line 919 
    case (__u32)2: 
                   #line 919 
    ;
    #line 920 
    tuple_sets = rss_cfg->rss_tuple_sets.ipv4_udp_en;
    #line 921 
    break;
    #line 922 
    case (__u32)5: 
                   #line 922 
    ;
    #line 923 
    tuple_sets = rss_cfg->rss_tuple_sets.ipv6_tcp_en;
    #line 924 
    break;
    #line 925 
    case (__u32)6: 
                   #line 925 
    ;
    #line 926 
    tuple_sets = rss_cfg->rss_tuple_sets.ipv6_udp_en;
    #line 927 
    break;
    #line 928 
    case (__u32)3: 
                   #line 928 
    ;
    #line 929 
    tuple_sets = rss_cfg->rss_tuple_sets.ipv4_sctp_en;
    #line 930 
    break;
    #line 931 
    case (__u32)7: 
                   #line 931 
    ;
    #line 932 
    tuple_sets = rss_cfg->rss_tuple_sets.ipv6_sctp_en;
    #line 933 
    break;
    #line 934 
    case (__u32)16: 
                    #line 934 
    ;
    #line 935 
    case (__u32)17: 
                    #line 935 
    ;
    #line 936 
    tuple_sets = (unsigned char)12U;
    #line 937 
    break;
    #line 938 
    default: 
             #line 938 
    ;
    #line 939 
    return -22;
  }
  #line 942 
  if ((unsigned int)tuple_sets == 0U) 
                                      #line 943 
                                      return 0;
  #line 945 
  if (((unsigned long)tuple_sets & 1UL) != 0UL) 
                                                #line 946 
                                                nfc->data |= 128ULL;
  #line 947 
  if (((unsigned long)tuple_sets & 2UL) != 0UL) 
                                                #line 948 
                                                nfc->data |= 64ULL;
  #line 949 
  if (((unsigned long)tuple_sets & 4UL) != 0UL) 
                                                #line 950 
                                                nfc->data |= 32ULL;
  #line 951 
  if (((unsigned long)tuple_sets & 8UL) != 0UL) 
                                                #line 952 
                                                nfc->data |= 16ULL;
  #line 954 
  return 0;
}

#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_set_rss_input_tuple(struct hclgevf_dev *hdev, struct hclgevf_rss_cfg *rss_cfg)
{
  #line 960 
  struct hclgevf_rss_input_tuple_cmd *req;
  #line 961 
  struct hclgevf_desc desc;
  #line 962 
  int ret;
  #line 964 
  hclgevf_cmd_setup_basic_desc(& desc,(enum hclgevf_opcode_type)HCLGEVF_OPC_RSS_INPUT_TUPLE,(_Bool)0);
  #line 966 
  req = (struct hclgevf_rss_input_tuple_cmd *)(& desc.data);
  #line 968 
  req->ipv4_tcp_en = rss_cfg->rss_tuple_sets.ipv4_tcp_en;
  #line 969 
  req->ipv4_udp_en = rss_cfg->rss_tuple_sets.ipv4_udp_en;
  #line 970 
  req->ipv4_sctp_en = rss_cfg->rss_tuple_sets.ipv4_sctp_en;
  #line 971 
  req->ipv4_fragment_en = rss_cfg->rss_tuple_sets.ipv4_fragment_en;
  #line 972 
  req->ipv6_tcp_en = rss_cfg->rss_tuple_sets.ipv6_tcp_en;
  #line 973 
  req->ipv6_udp_en = rss_cfg->rss_tuple_sets.ipv6_udp_en;
  #line 974 
  req->ipv6_sctp_en = rss_cfg->rss_tuple_sets.ipv6_sctp_en;
  #line 975 
  req->ipv6_fragment_en = rss_cfg->rss_tuple_sets.ipv6_fragment_en;
  #line 977 
  ret = hclgevf_cmd_send(& hdev->hw,& desc,1);
  #line 978 
  if (ret != 0) 
                #line 979 
                _dev_err(& (hdev->pdev)->dev,(char *)"Configure rss input fail, status = %d\n",ret);
  #line 981 
  return ret;
}

#line 984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_get_tc_size(struct hnae3_handle *handle)
{
  #line 986 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 987 
  struct hclgevf_rss_cfg *rss_cfg = & hdev->rss_cfg;
  #line 989 
  return (int)rss_cfg->rss_size;
}

#line 992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_bind_ring_to_vector(struct hnae3_handle *handle, bool en, int vector_id, struct hnae3_ring_chain_node *ring_chain)
{
  #line 997 
  struct hnae3_ring_chain_node *node;
  #line 998 
  struct hclge_mbx_vf_to_pf_cmd *req;
  #line 999 
  struct hclgevf_desc desc;
  #line 1001 
  int status;
  #line 1002 
  u8 type;
  #line 996 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 1000 
  int i = 0;
  #line 1004 
  req = (struct hclge_mbx_vf_to_pf_cmd *)(& desc.data);
  #line 1005 
  if ((int)en != 0) 
                    #line 1005 
                    type = (unsigned char)6U; else 
                                                   #line 1005 
                                                   type = (unsigned char)7U;
  #line 1008 
  node = ring_chain;
  #line 1008 
  while (node != (struct hnae3_ring_chain_node *)0) {
    {
      #line 1009 
      int idx_offset = (i + 1) * 3;
      #line 1012 
      if (i == 0) {
        #line 1013 
        hclgevf_cmd_setup_basic_desc(& desc,(enum hclgevf_opcode_type)HCLGEVF_OPC_MBX_VF_TO_PF,(_Bool)0);
        #line 1016 
        req->msg[0] = type;
        #line 1017 
        req->msg[1] = (unsigned char)vector_id;
      }
      #line 1020 
      req->msg[idx_offset] = (unsigned char)((unsigned int)((unsigned char)node->flag) & 1U);
      #line 1022 
      req->msg[idx_offset + 1] = (unsigned char)node->tqp_index;
      #line 1023 
      req->msg[idx_offset + 2] = (unsigned char)((unsigned int)((unsigned char)node->int_gl_idx) & 3U);
      #line 1027 
      i ++;
      #line 1028 
      if (i == 4 || node->next == (struct hnae3_ring_chain_node *)0) {
        #line 1032 
        req->msg[2] = (unsigned char)i;
        #line 1034 
        status = hclgevf_cmd_send(& hdev->hw,& desc,1);
        #line 1035 
        if (status != 0) {
          #line 1036 
          _dev_err(& (hdev->pdev)->dev,(char *)"Map TQP fail, status is %d.\n",status);
          #line 1039 
          return status;
        }
        #line 1041 
        i = 0;
        #line 1042 
        hclgevf_cmd_setup_basic_desc(& desc,(enum hclgevf_opcode_type)HCLGEVF_OPC_MBX_VF_TO_PF,(_Bool)0);
        #line 1045 
        req->msg[0] = type;
        #line 1046 
        req->msg[1] = (unsigned char)vector_id;
      }
    }
    #line 1008 
    node = node->next;
  }
  #line 1050 
  return 0;
}

#line 1053  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_map_ring_to_vector(struct hnae3_handle *handle, int vector, struct hnae3_ring_chain_node *ring_chain)
{
  #line 1057 
  int vector_id;
  #line 1056 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 1059 
  vector_id = hclgevf_get_vector_index(hdev,vector);
  #line 1060 
  if (vector_id < 0) {
    #line 1061 
    _dev_err(& (handle->pdev)->dev,(char *)"Get vector index fail. ret =%d\n",vector_id);
    #line 1063 
    return vector_id;
  }
  #line 1066 
  return hclgevf_bind_ring_to_vector(handle,(_Bool)1,vector_id,ring_chain);
}

#line 1069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_unmap_ring_from_vector(struct hnae3_handle *handle, int vector, struct hnae3_ring_chain_node *ring_chain)
{
  #line 1075 
  int ret;
  #line 1075 
  int vector_id;
  #line 1074 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 1077 
  if ((int)test_bit(7L,& hdev->state) != 0) 
                                            #line 1078 
                                            return 0;
  #line 1080 
  vector_id = hclgevf_get_vector_index(hdev,vector);
  #line 1081 
  if (vector_id < 0) {
    #line 1082 
    _dev_err(& (handle->pdev)->dev,(char *)"Get vector index fail. ret =%d\n",vector_id);
    #line 1084 
    return vector_id;
  }
  #line 1087 
  ret = hclgevf_bind_ring_to_vector(handle,(_Bool)0,vector_id,ring_chain);
  #line 1088 
  if (ret != 0) 
                #line 1089 
                _dev_err(& (handle->pdev)->dev,(char *)"Unmap ring from vector fail. vector=%d, ret =%d\n",vector_id,ret);
  #line 1094 
  return ret;
}

#line 1097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_put_vector(struct hnae3_handle *handle, int vector)
{
  #line 1100 
  int vector_id;
  #line 1099 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 1102 
  vector_id = hclgevf_get_vector_index(hdev,vector);
  #line 1103 
  if (vector_id < 0) {
    #line 1104 
    _dev_err(& (handle->pdev)->dev,(char *)"hclgevf_put_vector get vector index fail. ret =%d\n",vector_id);
    #line 1107 
    return vector_id;
  }
  #line 1110 
  hclgevf_free_vector(hdev,vector_id);
  #line 1112 
  return 0;
}

#line 1115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_cmd_set_promisc_mode(struct hclgevf_dev *hdev, bool en_uc_pmc, bool en_mc_pmc, bool en_bc_pmc)
{
  #line 1119 
  struct hclge_mbx_vf_to_pf_cmd *req;
  #line 1120 
  struct hclgevf_desc desc;
  #line 1121 
  int ret;
  #line 1123 
  req = (struct hclge_mbx_vf_to_pf_cmd *)(& desc.data);
  #line 1124 
  hclgevf_cmd_setup_basic_desc(& desc,(enum hclgevf_opcode_type)HCLGEVF_OPC_MBX_VF_TO_PF,(_Bool)0);
  #line 1125 
  req->msg[0] = (unsigned char)8U;
  #line 1126 
  req->msg[1] = (unsigned char)((int)en_bc_pmc != 0);
  #line 1127 
  req->msg[2] = (unsigned char)((int)en_uc_pmc != 0);
  #line 1128 
  req->msg[3] = (unsigned char)((int)en_mc_pmc != 0);
  #line 1130 
  ret = hclgevf_cmd_send(& hdev->hw,& desc,1);
  #line 1131 
  if (ret != 0) 
                #line 1132 
                _dev_err(& (hdev->pdev)->dev,(char *)"Set promisc mode fail, status is %d.\n",ret);
  #line 1135 
  return ret;
}

#line 1138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_set_promisc_mode(struct hnae3_handle *handle, bool en_uc_pmc, bool en_mc_pmc)
{
  #line 1143 
  bool en_bc_pmc;
  #line 1141 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 1142 
  struct pci_dev *pdev = hdev->pdev;
  #line 1145 
  en_bc_pmc = (_Bool)((unsigned int)pdev->revision != 32U);
  #line 1147 
  return hclgevf_cmd_set_promisc_mode(hdev,
                                     (_Bool)((bool)((int)en_uc_pmc) != 0),
                                     (_Bool)((bool)((int)en_mc_pmc) != 0),
                                     (_Bool)((bool)((int)en_bc_pmc) != 0));
}

#line 1151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_tqp_enable(struct hclgevf_dev *hdev, unsigned int tqp_id, int stream_id, bool enable)
{
  #line 1154 
  struct hclgevf_cfg_com_tqp_queue_cmd *req;
  #line 1155 
  struct hclgevf_desc desc;
  #line 1156 
  int status;
  #line 1158 
  req = (struct hclgevf_cfg_com_tqp_queue_cmd *)(& desc.data);
  #line 1160 
  hclgevf_cmd_setup_basic_desc(& desc,(enum hclgevf_opcode_type)HCLGEVF_OPC_CFG_COM_TQP_QUEUE,(_Bool)0);
  #line 1162 
  req->tqp_id = (unsigned short)((unsigned int)((unsigned short)tqp_id) & 1023U);
  #line 1163 
  req->stream_id = (unsigned short)stream_id;
  #line 1164 
  if ((int)enable != 0) 
                        #line 1165 
                        req->enable = (unsigned char)((unsigned int)req->enable | 1U);
  #line 1167 
  status = hclgevf_cmd_send(& hdev->hw,& desc,1);
  #line 1168 
  if (status != 0) 
                   #line 1169 
                   _dev_err(& (hdev->pdev)->dev,(char *)"TQP enable fail, status =%d.\n",status);
  #line 1172 
  return status;
}

#line 1175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_reset_tqp_stats(struct hnae3_handle *handle)
{
  #line 1178 
  struct hclgevf_tqp *tqp;
  #line 1179 
  int i;
  #line 1177 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_166.kinfo;
  #line 1181 
  i = 0;
  #line 1181 
  while ((int)kinfo->num_tqps > i) {
    {
      #line 1182 
      void *__mptr;
      #line 1182 
      __mptr = (void *)*(kinfo->tqp + (unsigned long)i);
      #line 1182 
      tqp = ((struct hclgevf_tqp *)(__mptr + 18446744073709551608U));
      #line 1183 
      memset((void *)(& tqp->tqp_stats),0,16UL);
    }
    #line 1181 
    i ++;
  }
  #line 1185 
  return;
}

#line 1187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_get_host_mac_addr(struct hclgevf_dev *hdev, u8 *p)
{
  #line 1189 
  u8 host_mac[6U];
  #line 1190 
  int status;
  #line 1192 
  status = hclgevf_send_mbx_msg(hdev,(unsigned short)16,(unsigned short)0,(u8 *)0U,(unsigned char)0,(_Bool)1,(u8 *)(& host_mac),(unsigned short)6);
  #line 1194 
  if (status != 0) {
    #line 1195 
    _dev_err(& (hdev->pdev)->dev,(char *)"fail to get VF MAC from host %d",status);
    #line 1197 
    return status;
  }
  #line 1200 
  ether_addr_copy(p,(u8 *)(& host_mac));
  #line 1202 
  return 0;
}

#line 1205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_get_mac_addr(struct hnae3_handle *handle, u8 *p)
{
  #line 1208 
  u8 host_mac_addr[6U];
  #line 1213 
  int tmp_2;
  #line 1207 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 1210 
  if (hclgevf_get_host_mac_addr(hdev,(u8 *)(& host_mac_addr)) != 0) 
                                                                    #line 1211 
                                                                    return;
  #line 1213 
  if (is_zero_ether_addr((u8 *)(& host_mac_addr))) 
                                                   #line 1213 
                                                   tmp_2 = 0; else 
                                                                   #line 1213 
                                                                   tmp_2 = 1;
  #line 1213 
  hdev->has_pf_mac = (unsigned char)tmp_2;
  #line 1214 
  if ((unsigned int)hdev->has_pf_mac != 0U) 
                                            #line 1215 
                                            ether_addr_copy(p,(u8 *)(& host_mac_addr)); else 
                                                                    #line 1217 
                                                                    ether_addr_copy(p,(u8 *)(& hdev->hw.mac.mac_addr));
  #line 1218 
  return;
}

#line 1220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_set_mac_addr(struct hnae3_handle *handle, void *p, bool is_first)
{
  #line 1226 
  u8 msg_data[12U];
  #line 1227 
  u16 subcode;
  #line 1228 
  int status;
  #line 1223 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 1224 
  u8 *old_mac_addr = (u8 *)(& hdev->hw.mac.mac_addr);
  #line 1225 
  u8 *new_mac_addr = (u8 *)p;
  #line 1230 
  ether_addr_copy((u8 *)(& msg_data),new_mac_addr);
  #line 1231 
  ether_addr_copy(& msg_data[6],old_mac_addr);
  #line 1233 
  subcode = (unsigned short)((int)is_first != 0);
  #line 1236 
  status = hclgevf_send_mbx_msg(hdev,(unsigned short)3,(unsigned short)((int)subcode),(u8 *)(& msg_data),(unsigned char)12,(_Bool)1,(u8 *)0U,(unsigned short)0);
  #line 1239 
  if (status == 0) 
                   #line 1240 
                   ether_addr_copy((u8 *)(& hdev->hw.mac.mac_addr),new_mac_addr);
  #line 1242 
  return status;
}

#line 1245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_add_uc_addr(struct hnae3_handle *handle, unsigned char *addr)
{
  #line 1248 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 1250 
  return hclgevf_send_mbx_msg(hdev,(unsigned short)3,(unsigned short)1,addr,
                             (unsigned char)6,(_Bool)0,(u8 *)0U,
                             (unsigned short)0);
}

#line 1255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_rm_uc_addr(struct hnae3_handle *handle, unsigned char *addr)
{
  #line 1258 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 1260 
  return hclgevf_send_mbx_msg(hdev,(unsigned short)3,(unsigned short)2,addr,
                             (unsigned char)6,(_Bool)0,(u8 *)0U,
                             (unsigned short)0);
}

#line 1265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_add_mc_addr(struct hnae3_handle *handle, unsigned char *addr)
{
  #line 1268 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 1270 
  return hclgevf_send_mbx_msg(hdev,(unsigned short)4,(unsigned short)4,addr,
                             (unsigned char)6,(_Bool)0,(u8 *)0U,
                             (unsigned short)0);
}

#line 1275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_rm_mc_addr(struct hnae3_handle *handle, unsigned char *addr)
{
  #line 1278 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 1280 
  return hclgevf_send_mbx_msg(hdev,(unsigned short)4,(unsigned short)5,addr,
                             (unsigned char)6,(_Bool)0,(u8 *)0U,
                             (unsigned short)0);
}

#line 1285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_set_vlan_filter(struct hnae3_handle *handle, __be16 proto, u16 vlan_id, bool is_kill)
{
  #line 1291 
  u8 msg_data[5U];
  #line 1292 
  int ret;
  #line 1290 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 1294 
  if ((unsigned int)vlan_id > 4095U) 
                                     #line 1295 
                                     return -22;
  #line 1297 
  if ((unsigned int)proto != 129U) 
                                   #line 1298 
                                   return -93;
  #line 1304 
  if ((int)test_bit(7L,& hdev->state) != 0) 
    #line 1304 
    if ((int)is_kill != 0) {
      #line 1305 
      cif_set_bit((long)vlan_id,(unsigned long *)(& hdev->vlan_del_fail_bmap));
      #line 1306 
      return -16;
    }
  #line 1309 
  msg_data[0] = (unsigned char)is_kill;
  #line 1310 
  memcpy((void *)(& msg_data[1]),(void *)(& vlan_id),2UL);
  #line 1311 
  memcpy((void *)(& msg_data[3]),(void *)(& proto),2UL);
  #line 1312 
  ret = hclgevf_send_mbx_msg(hdev,(unsigned short)5,(unsigned short)0,(u8 *)(& msg_data),(unsigned char)5,(_Bool)1,(u8 *)0U,(unsigned short)0);
  #line 1320 
  if ((int)is_kill != 0 && ret != 0) 
                                     #line 1321 
                                     cif_set_bit((long)vlan_id,(unsigned long *)(& hdev->vlan_del_fail_bmap));
  #line 1323 
  return ret;
}

#line 1326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_sync_vlan_filter(struct hclgevf_dev *hdev)
{
  #line 1330 
  int ret;
  #line 1331 
  u16 vlan_id;
  #line 1329 
  struct hnae3_handle *handle = & hdev->nic;
  #line 1330 
  int sync_cnt = 0;
  #line 1333 
  vlan_id = (unsigned short)cif_find_first_bit((unsigned long *)(& hdev->vlan_del_fail_bmap),
                         4096UL);
  #line 1334 
  while ((unsigned int)vlan_id != 4096U) {
    #line 1335 
    ret = hclgevf_set_vlan_filter(handle,(unsigned short)129,(unsigned short)((int)vlan_id),(_Bool)1);
    #line 1337 
    if (ret != 0) 
                  #line 1338 
                  return;
    #line 1340 
    cif_clear_bit((long)vlan_id,(unsigned long *)(& hdev->vlan_del_fail_bmap));
    #line 1341 
    sync_cnt ++;
    #line 1342 
    if (sync_cnt > 59) 
                       #line 1343 
                       return;
    #line 1345 
    vlan_id = (unsigned short)cif_find_first_bit((unsigned long *)(& hdev->vlan_del_fail_bmap),
                           4096UL);
  }
  #line 1347 
  return;
}

#line 1349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_en_hw_strip_rxvtag(struct hnae3_handle *handle, bool enable)
{
  #line 1352 
  u8 msg_data;
  #line 1351 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 1354 
  msg_data = (unsigned char)((int)enable != 0);
  #line 1355 
  return hclgevf_send_mbx_msg(hdev,(unsigned short)5,(unsigned short)2,
                             & msg_data,(unsigned char)1,(_Bool)0,(u8 *)0U,
                             (unsigned short)0);
}

#line 1360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_reset_tqp(struct hnae3_handle *handle, u16 queue_id)
{
  #line 1363 
  u8 msg_data[2U];
  #line 1364 
  int ret;
  #line 1362 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 1366 
  memcpy((void *)(& msg_data),(void *)(& queue_id),2UL);
  #line 1369 
  ret = hclgevf_tqp_enable(hdev,(unsigned int)queue_id,0,(_Bool)0);
  #line 1370 
  if (ret != 0) 
                #line 1371 
                return ret;
  #line 1373 
  return hclgevf_send_mbx_msg(hdev,(unsigned short)27,(unsigned short)0,
                             (u8 *)(& msg_data),(unsigned char)2,(_Bool)1,
                             (u8 *)0U,(unsigned short)0);
}

#line 1377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_set_mtu(struct hnae3_handle *handle, int new_mtu)
{
  #line 1379 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 1381 
  return hclgevf_send_mbx_msg(hdev,(unsigned short)30,(unsigned short)0,
                             (u8 *)(& new_mtu),(unsigned char)4,(_Bool)1,
                             (u8 *)0U,(unsigned short)0);
}

#line 1385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_notify_client(struct hclgevf_dev *hdev, enum hnae3_reset_notify_type type)
{
  #line 1390 
  int ret;
  #line 1388 
  struct hnae3_client *client = hdev->nic_client;
  #line 1389 
  struct hnae3_handle *handle = & hdev->nic;
  #line 1392 
  if (test_bit(4L,& hdev->state)) {
    #line 1392 
    if (client == (struct hnae3_client *)0) 
                                            #line 1394 
                                            return 0;
  }
  else 
       #line 1394 
       return 0;
  #line 1396 
  if ((client->ops)->reset_notify == (int (*)(struct hnae3_handle *, enum hnae3_reset_notify_type ))0) 
    #line 1397 
    return -95;
  #line 1399 
  ret = (*((client->ops)->reset_notify))(handle,type);
  #line 1400 
  if (ret != 0) 
                #line 1401 
                _dev_err(& (hdev->pdev)->dev,(char *)"notify nic client failed %d(%d)\n",(unsigned int)type,ret);
  #line 1404 
  return ret;
}

#line 1407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_flr_done(struct hnae3_ae_dev *ae_dev)
{
  #line 1409 
  struct hclgevf_dev *hdev = (struct hclgevf_dev *)ae_dev->priv;
  #line 1411 
  cif_set_bit(1L,& hdev->flr_state);
  #line 1412 
  return;
}

#line 1414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_flr_poll_timeout(struct hclgevf_dev *hdev, unsigned long delay_us, unsigned long wait_cnt)
{
  #line 1418 
  unsigned long cnt = 0UL;
  #line 1420 
  while (1) {
    #line 1420 
    if (test_bit(1L,& hdev->flr_state)) 
                                        #line 1420 
                                        break;
    else {
      #line 1420 
      unsigned long tmp_0;
      #line 1420 
      tmp_0 = cnt;
      #line 1420 
      cnt ++;
      #line 1420 
      ;
      #line 1420 
      if (! (tmp_0 < wait_cnt)) 
                                #line 1420 
                                break;
    }
    #line 1422 
    usleep_range(delay_us,delay_us * 2UL);
  }
  #line 1424 
  if (! test_bit(1L,& hdev->flr_state)) {
    #line 1425 
    _dev_err(& (hdev->pdev)->dev,(char *)"flr wait timeout\n");
    #line 1427 
    return -110;
  }
  #line 1430 
  return 0;
}

#line 1433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_reset_wait(struct hclgevf_dev *hdev)
{
  #line 1440 
  u32 val;
  #line 1441 
  int ret;
  #line 1443 
  if (hdev->reset_type == (unsigned int)HNAE3_FLR_RESET) {
    #line 1444 
    return hclgevf_flr_poll_timeout(hdev,20000UL,2000UL);
  }
  else 
    #line 1447 
    if (hdev->reset_type == (unsigned int)HNAE3_VF_RESET) {
      #line 1448 
      int tmp_4;
      {
        #line 1448 
        u64 __timeout_us = 40000000ULL;
        #line 1448 
        unsigned long __sleep_us = 20000UL;
        #line 1448 
        ;
        #line 1448 
        ktime_t __timeout = ktime_add_us(ktime_get(),__timeout_us);
        #line 1448 
        if (__sleep_us != 0UL) 
                               #line 1448 
                               __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c",1448,0);
        #line 1448 
        while (1) {
          #line 1448 
          val = readl(hdev->hw.io_base + 28680U);
          #line 1448 
          if (((unsigned long)val & 65536UL) == 0UL) 
                                                     #line 1448 
                                                     break;
          #line 1448 
          if (__timeout_us != 0ULL) {
            #line 1448 
            ;
            #line 1448 
            if (ktime_compare(ktime_get(),__timeout) > 0) {
              #line 1448 
              val = readl(hdev->hw.io_base + 28680U);
              #line 1448 
              break;
            }
          }
          #line 1448 
          if (__sleep_us != 0UL) 
                                 #line 1448 
                                 usleep_range((__sleep_us >> 2) + 1UL,__sleep_us);
        }
        #line 1448 
        if (((unsigned long)val & 65536UL) == 0UL) 
                                                   #line 1448 
                                                   tmp_4 = 0; else 
                                                                   #line 1448 
                                                                   tmp_4 = -110;
        }
      #line 1448 
      ret = tmp_4;
    }
    else {
      #line 1454 
      int tmp_10;
      {
        #line 1454 
        u64 __timeout_us_0 = 40000000ULL;
        #line 1454 
        unsigned long __sleep_us_0 = 20000UL;
        #line 1454 
        ;
        #line 1454 
        ktime_t __timeout_0 = ktime_add_us(ktime_get(),__timeout_us_0);
        #line 1454 
        if (__sleep_us_0 != 0UL) 
                                 #line 1454 
                                 __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c",1454,0);
        #line 1454 
        while (1) {
          #line 1454 
          val = readl(hdev->hw.io_base + 134144U);
          #line 1454 
          if (((unsigned long)val & 225UL) == 0UL) 
                                                   #line 1454 
                                                   break;
          #line 1454 
          if (__timeout_us_0 != 0ULL) {
            #line 1454 
            ;
            #line 1454 
            if (ktime_compare(ktime_get(),__timeout_0) > 0) {
              #line 1454 
              val = readl(hdev->hw.io_base + 134144U);
              #line 1454 
              break;
            }
          }
          #line 1454 
          if (__sleep_us_0 != 0UL) 
                                   #line 1454 
                                   usleep_range((__sleep_us_0 >> 2) + 1UL,__sleep_us_0);
        }
        #line 1454 
        if (((unsigned long)val & 225UL) == 0UL) 
                                                 #line 1454 
                                                 tmp_10 = 0; else 
                                                                  #line 1454 
                                                                  tmp_10 = -110;
        }
      #line 1454 
      ret = tmp_10;
    }
  #line 1461 
  if (ret != 0) {
    #line 1462 
    _dev_err(& (hdev->pdev)->dev,(char *)"could\'nt get reset done status from h/w, timeout!\n");
    #line 1464 
    return ret;
  }
  #line 1471 
  msleep(5000U);
  #line 1473 
  return 0;
}

#line 1476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_reset_handshake(struct hclgevf_dev *hdev, bool enable)
{
  #line 1478 
  u32 reg_val;
  #line 1480 
  reg_val = hclgevf_read_reg((u8 *)hdev->hw.io_base,159752U);
  #line 1481 
  if ((int)enable != 0) 
                        #line 1482 
                        reg_val |= 65536U; else 
                                                #line 1484 
                                                reg_val &= 4294901759U;
  #line 1486 
  hclgevf_write_reg(hdev->hw.io_base,159752U,reg_val);
  #line 1487 
  return;
}

#line 1490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_reset_stack(struct hclgevf_dev *hdev)
{
  #line 1492 
  int ret;
  #line 1495 
  ret = hclgevf_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_UNINIT_CLIENT);
  #line 1496 
  if (ret != 0) 
                #line 1497 
                return ret;
  #line 1500 
  ret = hclgevf_reset_hdev(hdev);
  #line 1501 
  if (ret != 0) {
    #line 1502 
    _dev_err(& (hdev->pdev)->dev,(char *)"hclge device re-init failed, VF is disabled!\n");
    #line 1504 
    return ret;
  }
  #line 1508 
  ret = hclgevf_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_INIT_CLIENT);
  #line 1509 
  if (ret != 0) 
                #line 1510 
                return ret;
  #line 1512 
  ret = hclgevf_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_RESTORE_CLIENT);
  #line 1513 
  if (ret != 0) 
                #line 1514 
                return ret;
  #line 1517 
  hclgevf_reset_handshake(hdev,(_Bool)0);
  #line 1519 
  return 0;
}

#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_reset_prepare_wait(struct hclgevf_dev *hdev)
{
  #line 1526 
  int ret = 0;
  #line 1528 
  switch ((unsigned int)hdev->reset_type) {
    #line 1529 
    case (unsigned int)1: 
                          #line 1529 
    ;
    #line 1530 
    ret = hclgevf_send_mbx_msg(hdev,(unsigned short)1,(unsigned short)0,(u8 *)0U,(unsigned char)0,(_Bool)1,(u8 *)0U,(unsigned short)1);
    #line 1532 
    (hdev->rst_stats.vf_func_rst_cnt) ++;
    #line 1533 
    break;
    #line 1534 
    case (unsigned int)4: 
                          #line 1534 
    ;
    #line 1535 
    cif_set_bit(0L,& hdev->flr_state);
    #line 1536 
    (hdev->rst_stats.flr_rst_cnt) ++;
    #line 1537 
    break;
    #line 1538 
    default: 
             #line 1538 
    ;
    #line 1539 
    break;
  }
  #line 1542 
  cif_set_bit(10L,& hdev->state);
  #line 1544 
  msleep(100U);
  #line 1545 
  hclgevf_reset_handshake(hdev,(_Bool)1);
  #line 1546 
  _dev_info(& (hdev->pdev)->dev,(char *)"prepare reset(%d) wait done, ret:%d\n",(unsigned int)hdev->reset_type,ret);
  #line 1549 
  return ret;
}

#line 1552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_dump_rst_info(struct hclgevf_dev *hdev)
{
  #line 1554 
  _dev_info(& (hdev->pdev)->dev,(char *)"VF function reset count: %u\n",hdev->rst_stats.vf_func_rst_cnt);
  #line 1556 
  _dev_info(& (hdev->pdev)->dev,(char *)"FLR reset count: %u\n",hdev->rst_stats.flr_rst_cnt);
  #line 1558 
  _dev_info(& (hdev->pdev)->dev,(char *)"VF reset count: %u\n",hdev->rst_stats.vf_rst_cnt);
  #line 1560 
  _dev_info(& (hdev->pdev)->dev,(char *)"reset done count: %u\n",hdev->rst_stats.rst_done_cnt);
  #line 1562 
  _dev_info(& (hdev->pdev)->dev,(char *)"HW reset done count: %u\n",hdev->rst_stats.hw_rst_done_cnt);
  #line 1564 
  _dev_info(& (hdev->pdev)->dev,(char *)"reset count: %u\n",hdev->rst_stats.rst_cnt);
  #line 1566 
  _dev_info(& (hdev->pdev)->dev,(char *)"reset fail count: %u\n",hdev->rst_stats.rst_fail_cnt);
  #line 1568 
  ;
  #line 1568 
  _dev_info(& (hdev->pdev)->dev,(char *)"vector0 interrupt enable status: 0x%x\n",hclgevf_read_reg((u8 *)hdev->hw.io_base,132096U));
  #line 1570 
  ;
  #line 1570 
  _dev_info(& (hdev->pdev)->dev,(char *)"vector0 interrupt status: 0x%x\n",hclgevf_read_reg((u8 *)hdev->hw.io_base,160004U));
  #line 1572 
  ;
  #line 1572 
  _dev_info(& (hdev->pdev)->dev,(char *)"handshake status: 0x%x\n",hclgevf_read_reg((u8 *)hdev->hw.io_base,159752U));
  #line 1574 
  ;
  #line 1574 
  _dev_info(& (hdev->pdev)->dev,(char *)"function reset status: 0x%x\n",hclgevf_read_reg((u8 *)hdev->hw.io_base,134144U));
  #line 1576 
  _dev_info(& (hdev->pdev)->dev,(char *)"hdev state: 0x%lx\n",hdev->state);
  #line 1577 
  return;
}

#line 1579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_reset_err_handle(struct hclgevf_dev *hdev)
{
  #line 1582 
  hclgevf_reset_handshake(hdev,(_Bool)1);
  #line 1583 
  (hdev->rst_stats.rst_fail_cnt) ++;
  #line 1584 
  _dev_err(& (hdev->pdev)->dev,(char *)"failed to reset VF(%u)\n",hdev->rst_stats.rst_fail_cnt);
  #line 1587 
  if (hdev->rst_stats.rst_fail_cnt <= 4U) 
                                          #line 1588 
                                          cif_set_bit((long)hdev->reset_type,& hdev->reset_pending);
  #line 1590 
  if ((int)hclgevf_is_reset_pending(hdev) != 0) {
    #line 1591 
    cif_set_bit(1L,& hdev->reset_state);
    #line 1592 
    hclgevf_reset_task_schedule(hdev);
  }
  else 
       #line 1594 
       hclgevf_dump_rst_info(hdev);
  #line 1595 
  return;
}

#line 1598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_reset(struct hclgevf_dev *hdev)
{
  #line 1601 
  int ret;
  #line 1600 
  struct hnae3_ae_dev *ae_dev = pci_get_drvdata(hdev->pdev);
  #line 1606 
  ae_dev->reset_type = hdev->reset_type;
  #line 1607 
  (hdev->rst_stats.rst_cnt) ++;
  #line 1608 
  rtnl_lock();
  #line 1611 
  ret = hclgevf_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_DOWN_CLIENT);
  #line 1612 
  if (ret != 0) 
                #line 1613 
                goto err_reset_lock;
  #line 1615 
  rtnl_unlock();
  #line 1617 
  ret = hclgevf_reset_prepare_wait(hdev);
  #line 1618 
  if (ret != 0) 
                #line 1619 
                goto err_reset;
  #line 1624 
  ret = hclgevf_reset_wait(hdev);
  #line 1625 
  if (ret != 0) {
    #line 1627 
    _dev_err(& (hdev->pdev)->dev,(char *)"VF failed(=%d) to fetch H/W reset completion status\n",ret);
    #line 1630 
    goto err_reset;
  }
  #line 1633 
  (hdev->rst_stats.hw_rst_done_cnt) ++;
  #line 1635 
  rtnl_lock();
  #line 1638 
  ret = hclgevf_reset_stack(hdev);
  #line 1639 
  if (ret != 0) {
    #line 1640 
    _dev_err(& (hdev->pdev)->dev,(char *)"failed to reset VF stack\n");
    #line 1641 
    goto err_reset_lock;
  }
  #line 1645 
  ret = hclgevf_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_UP_CLIENT);
  #line 1646 
  if (ret != 0) 
                #line 1647 
                goto err_reset_lock;
  #line 1649 
  rtnl_unlock();
  #line 1651 
  hdev->last_reset_time = jiffies;
  #line 1652 
  ae_dev->reset_type = HNAE3_NONE_RESET;
  #line 1653 
  (hdev->rst_stats.rst_done_cnt) ++;
  #line 1654 
  hdev->rst_stats.rst_fail_cnt = 0U;
  #line 1656 
  return ret;
  #line 1657 
  err_reset_lock: 
                  #line 1657 
  ;
  #line 1658 
  rtnl_unlock();
  #line 1659 
  err_reset: 
             #line 1659 
  ;
  #line 1660 
  hclgevf_reset_err_handle(hdev);
  #line 1662 
  return ret;
}

#line 1665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static enum hnae3_reset_type hclgevf_get_reset_level(struct hclgevf_dev *hdev, unsigned long *addr)
{
  #line 1668 
  enum hnae3_reset_type rst_level = HNAE3_NONE_RESET;
  #line 1671 
  if ((int)test_bit(0L,addr) != 0) {
    #line 1672 
    rst_level = HNAE3_VF_RESET;
    #line 1673 
    cif_clear_bit(0L,addr);
    #line 1674 
    cif_clear_bit(2L,addr);
    #line 1675 
    cif_clear_bit(1L,addr);
  }
  else {
    #line 1676 
    if ((int)test_bit(3L,addr) != 0) {
      #line 1677 
      rst_level = HNAE3_VF_FULL_RESET;
      #line 1678 
      cif_clear_bit(3L,addr);
      #line 1679 
      cif_clear_bit(1L,addr);
    }
    else {
      #line 1680 
      if ((int)test_bit(2L,addr) != 0) {
        #line 1681 
        rst_level = HNAE3_VF_PF_FUNC_RESET;
        #line 1682 
        cif_clear_bit(2L,addr);
        #line 1683 
        cif_clear_bit(1L,addr);
      }
      else {
        #line 1684 
        if ((int)test_bit(1L,addr) != 0) {
          #line 1685 
          rst_level = HNAE3_VF_FUNC_RESET;
          #line 1686 
          cif_clear_bit(1L,addr);
        }
        else {
          #line 1687 
          if ((int)test_bit(4L,addr) != 0) {
            #line 1688 
            rst_level = HNAE3_FLR_RESET;
            #line 1689 
            cif_clear_bit(4L,addr);
          }
        }
      }
    }
  }
  #line 1692 
  return rst_level;
}

#line 1695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_reset_event(struct pci_dev *pdev, struct hnae3_handle *handle)
{
  #line 1698 
  struct hnae3_ae_dev *ae_dev = pci_get_drvdata(pdev);
  #line 1699 
  struct hclgevf_dev *hdev = (struct hclgevf_dev *)ae_dev->priv;
  #line 1701 
  _dev_info(& (hdev->pdev)->dev,(char *)"received reset request from VF enet\n");
  #line 1703 
  if (hdev->default_reset_request != 0UL) 
                                          #line 1704 
                                          hdev->reset_level = hclgevf_get_reset_level(hdev,& hdev->default_reset_request); else 
                                                                    #line 1708 
                                                                    hdev->reset_level = HNAE3_VF_FUNC_RESET;
  #line 1711 
  cif_set_bit(0L,& hdev->reset_state);
  #line 1712 
  hclgevf_reset_task_schedule(hdev);
  #line 1714 
  hdev->last_reset_time = jiffies;
  #line 1715 
  return;
}

#line 1717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_set_def_reset_request(struct hnae3_ae_dev *ae_dev, enum hnae3_reset_type rst_type)
{
  #line 1720 
  struct hclgevf_dev *hdev = (struct hclgevf_dev *)ae_dev->priv;
  #line 1722 
  cif_set_bit((long)rst_type,& hdev->default_reset_request);
  #line 1723 
  return;
}

#line 1725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_flr_prepare(struct hnae3_ae_dev *ae_dev)
{
  #line 1729 
  struct hclgevf_dev *hdev = (struct hclgevf_dev *)ae_dev->priv;
  #line 1730 
  int cnt = 0;
  #line 1732 
  cif_clear_bit(0L,& hdev->flr_state);
  #line 1733 
  cif_clear_bit(1L,& hdev->flr_state);
  #line 1734 
  cif_set_bit(4L,& hdev->default_reset_request);
  #line 1735 
  hclgevf_reset_event(hdev->pdev,(struct hnae3_handle *)0);
  #line 1737 
  while (1) {
    #line 1737 
    if (test_bit(0L,& hdev->flr_state)) 
                                        #line 1737 
                                        break;
    else {
      #line 1737 
      int tmp_0;
      #line 1737 
      tmp_0 = cnt;
      #line 1737 
      cnt ++;
      #line 1737 
      ;
      #line 1737 
      if (! (tmp_0 <= 49)) 
                           #line 1737 
                           break;
    }
    #line 1739 
    msleep(100U);
  }
  #line 1741 
  if (! test_bit(0L,& hdev->flr_state)) 
                                        #line 1742 
                                        _dev_err(& (hdev->pdev)->dev,(char *)"flr wait down timeout: %d\n",cnt);
  #line 1743 
  return;
}

#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static u32 hclgevf_get_fw_version(struct hnae3_handle *handle)
{
  #line 1748 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 1750 
  return hdev->fw_version;
}

#line 1753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_get_misc_vector(struct hclgevf_dev *hdev)
{
  #line 1755 
  struct hclgevf_misc_vector *vector = & hdev->misc_vector;
  #line 1757 
  vector->vector_irq = pci_irq_vector(hdev->pdev,0U);
  #line 1759 
  vector->addr = (u8 *)(hdev->hw.io_base + 132096U);
  #line 1761 
  *(hdev->vector_status) = (unsigned short)0U;
  #line 1762 
  *(hdev->vector_irq) = vector->vector_irq;
  #line 1764 
  hdev->num_msi_left = (unsigned short)((unsigned int)hdev->num_msi_left + 65535U);
  #line 1765 
  hdev->num_msi_used = (unsigned short)((unsigned int)hdev->num_msi_used + 1U);
  #line 1766 
  return;
}

#line 1768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
void hclgevf_reset_task_schedule(struct hclgevf_dev *hdev)
{
  #line 1770 
  if (! test_bit(6L,& hdev->state)) {
    #line 1771 
    if (! test_bit(3L,& hdev->state)) {
      #line 1772 
      cif_set_bit(6L,& hdev->state);
      #line 1773 
      cif_schedule_work(& hdev->rst_service_task);
    }
  }
  #line 1775 
  return;
}

#line 1777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
void hclgevf_mbx_task_schedule(struct hclgevf_dev *hdev)
{
  #line 1779 
  if (! test_bit(8L,& hdev->state)) {
    #line 1780 
    if (! test_bit(9L,& hdev->state)) {
      #line 1781 
      cif_set_bit(8L,& hdev->state);
      #line 1782 
      cif_schedule_work(& hdev->mbx_service_task);
    }
  }
  #line 1784 
  return;
}

#line 1786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_task_schedule(struct hclgevf_dev *hdev)
{
  #line 1788 
  if (! test_bit(0L,& hdev->state)) {
    #line 1789 
    if (! test_and_set_bit(5L,& hdev->state)) 
                                              #line 1790 
                                              cif_schedule_work(& hdev->service_task);
  }
  #line 1791 
  return;
}

#line 1793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_deferred_task_schedule(struct hclgevf_dev *hdev)
{
  #line 1796 
  if ((int)hdev->mbx_event_pending != 0) 
                                         #line 1797 
                                         hclgevf_mbx_task_schedule(hdev);
  #line 1799 
  if ((int)test_bit(1L,& hdev->reset_state) != 0) 
                                                  #line 1800 
                                                  hclgevf_reset_task_schedule(hdev);
  #line 1801 
  return;
}

#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_service_timer(struct timer_list *t)
{
  #line 1805 
  void *__mptr;
  #line 1805 
  __mptr = (void *)t;
  #line 1805 
  struct hclgevf_dev *hdev = ((struct hclgevf_dev *)(__mptr + 18446744073709533408U));
  #line 1807 
  cif_mod_timer(& hdev->service_timer,jiffies + 1250UL);
  #line 1810 
  (hdev->stats_timer) ++;
  #line 1811 
  hclgevf_task_schedule(hdev);
  #line 1812 
  return;
}

#line 1814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_reset_service_task(struct work_struct *work)
{
  #line 1819 
  void *__mptr;
  #line 1820 
  int ret;
  #line 1819 
  __mptr = (void *)work;
  #line 1818 
  struct hclgevf_dev *hdev = ((struct hclgevf_dev *)(__mptr + 18446744073709533072U));
  #line 1822 
  if ((int)test_and_set_bit(7L,& hdev->state) != 0) 
                                                    #line 1823 
                                                    return;
  #line 1825 
  cif_clear_bit(6L,& hdev->state);
  #line 1827 
  if ((int)test_and_set_bit(1L,& hdev->reset_state) != 0) {
    #line 1834 
    hdev->reset_attempts = 0U;
    #line 1836 
    hdev->last_reset_time = jiffies;
    #line 1837 
    while (1) {
      #line 1837 
      hdev->reset_type = hclgevf_get_reset_level(hdev,& hdev->reset_pending);
      #line 1837 
      if (! (hclgevf_get_reset_level(hdev,& hdev->reset_pending) != (unsigned int)HNAE3_NONE_RESET)) 
        #line 1837 
        break;
      #line 1840 
      ret = hclgevf_reset(hdev);
      #line 1841 
      if (ret != 0) 
                    #line 1842 
                    _dev_err(& (hdev->pdev)->dev,(char *)"VF stack reset failed %d.\n",ret);
    }
  }
  else {
    #line 1845 
    if ((int)test_and_set_bit(0L,& hdev->reset_state) != 0) {
      #line 1870 
      if (hdev->reset_attempts > 3U) {
        #line 1872 
        cif_set_bit(3L,& hdev->reset_pending);
        #line 1875 
        cif_set_bit(1L,& hdev->reset_state);
      }
      else {
        #line 1877 
        (hdev->reset_attempts) ++;
        #line 1879 
        cif_set_bit((long)hdev->reset_level,& hdev->reset_pending);
        #line 1880 
        cif_set_bit(1L,& hdev->reset_state);
      }
      #line 1882 
      hclgevf_reset_task_schedule(hdev);
    }
  }
  #line 1885 
  cif_clear_bit(7L,& hdev->state);
  #line 1886 
  return;
}

#line 1888  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_mailbox_service_task(struct work_struct *work)
{
  #line 1892 
  void *__mptr;
  #line 1890 
  struct hclgevf_dev *hdev;
  #line 1892 
  __mptr = (void *)work;
  #line 1892 
  hdev = ((struct hclgevf_dev *)(__mptr + 18446744073709532992U));
  #line 1894 
  if ((int)test_and_set_bit(9L,& hdev->state) != 0) 
                                                    #line 1895 
                                                    return;
  #line 1897 
  cif_clear_bit(8L,& hdev->state);
  #line 1899 
  hclgevf_mbx_async_handler(hdev);
  #line 1901 
  cif_clear_bit(9L,& hdev->state);
  #line 1902 
  return;
}

#line 1904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_keep_alive_timer(struct timer_list *t)
{
  #line 1906 
  void *__mptr;
  #line 1906 
  __mptr = (void *)t;
  #line 1906 
  struct hclgevf_dev *hdev = ((struct hclgevf_dev *)(__mptr + 18446744073709533320U));
  #line 1908 
  cif_schedule_work(& hdev->keep_alive_task);
  #line 1909 
  cif_mod_timer(& hdev->keep_alive_timer,jiffies + 500UL);
  #line 1910 
  return;
}

#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_keep_alive_task(struct work_struct *work)
{
  #line 1919 
  void *__mptr;
  #line 1915 
  struct hclgevf_dev *hdev;
  #line 1916 
  u8 respmsg;
  #line 1917 
  int ret;
  #line 1919 
  __mptr = (void *)work;
  #line 1919 
  hdev = ((struct hclgevf_dev *)(__mptr + 18446744073709533152U));
  #line 1921 
  if ((int)test_bit(10L,& hdev->state) != 0) 
                                             #line 1922 
                                             return;
  #line 1924 
  ret = hclgevf_send_mbx_msg(hdev,(unsigned short)28,(unsigned short)0,(u8 *)0U,(unsigned char)0,(_Bool)0,& respmsg,(unsigned short)1);
  #line 1926 
  if (ret != 0) 
                #line 1927 
                _dev_err(& (hdev->pdev)->dev,(char *)"VF sends keep alive cmd failed(=%d)\n",ret);
  #line 1928 
  return;
}

#line 1931  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_service_task(struct work_struct *work)
{
  #line 1936 
  void *__mptr;
  #line 1933 
  struct hnae3_handle *handle;
  #line 1934 
  struct hclgevf_dev *hdev;
  #line 1936 
  __mptr = (void *)work;
  #line 1936 
  hdev = ((struct hclgevf_dev *)(__mptr + 18446744073709533232U));
  #line 1937 
  handle = & hdev->nic;
  #line 1939 
  if (hdev->stats_timer > 35U) {
    #line 1940 
    hclgevf_tqps_update_stats(handle);
    #line 1941 
    hdev->stats_timer = 0U;
  }
  #line 1947 
  hclgevf_request_link_info(hdev);
  #line 1949 
  hclgevf_update_link_mode(hdev);
  #line 1951 
  hclgevf_sync_vlan_filter(hdev);
  #line 1953 
  hclgevf_deferred_task_schedule(hdev);
  #line 1955 
  cif_clear_bit(5L,& hdev->state);
  #line 1956 
  return;
}

#line 1958  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_clear_event_cause(struct hclgevf_dev *hdev, u32 regclr)
{
  #line 1960 
  hclgevf_write_reg(hdev->hw.io_base,160000U,regclr);
  #line 1961 
  return;
}

#line 1963  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static enum hclgevf_evt_cause hclgevf_check_evt_cause(struct hclgevf_dev *hdev, u32 *clearval)
{
  #line 1966 
  u32 val;
  #line 1966 
  u32 cmdq_stat_reg;
  #line 1966 
  u32 rst_ing_reg;
  #line 1969 
  cmdq_stat_reg = hclgevf_read_reg((u8 *)hdev->hw.io_base,160004U);
  #line 1972 
  if ((cmdq_stat_reg & 4U) != 0U) {
    #line 1973 
    rst_ing_reg = hclgevf_read_reg((u8 *)hdev->hw.io_base,134144U);
    #line 1974 
    _dev_info(& (hdev->pdev)->dev,(char *)"receive reset interrupt 0x%x!\n",rst_ing_reg);
    #line 1976 
    cif_set_bit(0L,& hdev->reset_pending);
    #line 1977 
    cif_set_bit(1L,& hdev->reset_state);
    #line 1978 
    cif_set_bit(10L,& hdev->state);
    #line 1979 
    *clearval = 4294967291U;
    #line 1980 
    (hdev->rst_stats.vf_rst_cnt) ++;
    #line 1984 
    val = hclgevf_read_reg((u8 *)hdev->hw.io_base,28680U);
    #line 1985 
    hclgevf_write_reg(hdev->hw.io_base,28680U,val | 65536U);
    #line 1987 
    return HCLGEVF_VECTOR0_EVENT_RST;
  }
  #line 1991 
  if ((cmdq_stat_reg & 2U) != 0U) {
    #line 1999 
    if ((unsigned int)(hdev->pdev)->revision > 32U) 
                                                    #line 2000 
                                                    *clearval = 4294967293U; else 
                                                                    #line 2002 
                                                                    *clearval = cmdq_stat_reg & 4294967293U;
    #line 2005 
    return HCLGEVF_VECTOR0_EVENT_MBX;
  }
  {
    #line 2008 
    bool branch;
    #line 2008 
    struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"hclgevf", .function = (char *)"hclgevf_check_evt_cause", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c", .format = (char *)"vector 0 interrupt from unknown source\n", .lineno = (unsigned int)2008U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2008 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
    #line 2008 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2008 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug457,& (hdev->pdev)->dev,(char *)"vector 0 interrupt from unknown source\n");
  }
  #line 2010 
  return HCLGEVF_VECTOR0_EVENT_OTHER;
}

#line 2013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_enable_vector(struct hclgevf_misc_vector *vector, bool en)
{
  #line 2015 
  writel((unsigned int)((int)en != 0),(void *)vector->addr);
  #line 2016 
  return;
}

#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static irqreturn_t hclgevf_misc_irq_handle(int irq, void *data)
{
  #line 2020 
  enum hclgevf_evt_cause event_cause;
  #line 2022 
  u32 clearval;
  #line 2021 
  struct hclgevf_dev *hdev = (struct hclgevf_dev *)data;
  #line 2024 
  hclgevf_enable_vector(& hdev->misc_vector,(_Bool)0);
  #line 2025 
  event_cause = hclgevf_check_evt_cause(hdev,& clearval);
  #line 2027 
  switch ((unsigned int)event_cause) {
    #line 2028 
    case (unsigned int)0: 
                          #line 2028 
    ;
    #line 2029 
    hclgevf_reset_task_schedule(hdev);
    #line 2030 
    break;
    #line 2031 
    case (unsigned int)1: 
                          #line 2031 
    ;
    #line 2032 
    hclgevf_mbx_handler(hdev);
    #line 2033 
    break;
    #line 2034 
    default: 
             #line 2034 
    ;
    #line 2035 
    break;
  }
  #line 2038 
  if (event_cause != (unsigned int)HCLGEVF_VECTOR0_EVENT_OTHER) {
    #line 2039 
    hclgevf_clear_event_cause(hdev,clearval);
    #line 2040 
    hclgevf_enable_vector(& hdev->misc_vector,(_Bool)1);
  }
  #line 2043 
  return IRQ_HANDLED;
}

#line 2046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_configure(struct hclgevf_dev *hdev)
{
  #line 2048 
  int ret;
  #line 2051 
  ret = hclgevf_get_port_base_vlan_filter_state(hdev);
  #line 2052 
  if (ret != 0) 
                #line 2053 
                return ret;
  #line 2056 
  ret = hclgevf_get_queue_info(hdev);
  #line 2057 
  if (ret != 0) 
                #line 2058 
                return ret;
  #line 2061 
  ret = hclgevf_get_queue_depth(hdev);
  #line 2062 
  if (ret != 0) 
                #line 2063 
                return ret;
  #line 2065 
  ret = hclgevf_get_pf_media_type(hdev);
  #line 2066 
  if (ret != 0) 
                #line 2067 
                return ret;
  #line 2070 
  return hclgevf_get_tc_info(hdev);
}

#line 2073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_alloc_hdev(struct hnae3_ae_dev *ae_dev)
{
  #line 2076 
  struct hclgevf_dev *hdev;
  #line 2075 
  struct pci_dev *pdev = ae_dev->pdev;
  #line 2078 
  hdev = (struct hclgevf_dev *)cif_devm_kzalloc(& pdev->dev,19088UL,3264U);
  #line 2079 
  if (hdev == (struct hclgevf_dev *)0) 
                                       #line 2080 
                                       return -12;
  #line 2082 
  hdev->pdev = pdev;
  #line 2083 
  hdev->ae_dev = ae_dev;
  #line 2084 
  ae_dev->priv = (void *)hdev;
  #line 2086 
  return 0;
}

#line 2089  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_init_roce_base_info(struct hclgevf_dev *hdev)
{
  #line 2091 
  struct hnae3_handle *roce = & hdev->roce;
  #line 2092 
  struct hnae3_handle *nic = & hdev->nic;
  #line 2094 
  roce->__anonCompField_hnae3_handle_166.rinfo.num_vectors = (int)hdev->num_roce_msix;
  #line 2096 
  if ((int)hdev->num_msi_left < roce->__anonCompField_hnae3_handle_166.rinfo.num_vectors || (unsigned int)hdev->num_msi_left == 0U) 
    #line 2098 
    return -22;
  #line 2100 
  roce->__anonCompField_hnae3_handle_166.rinfo.base_vector = hdev->roce_base_vector;
  #line 2102 
  roce->__anonCompField_hnae3_handle_166.rinfo.netdev = nic->__anonCompField_hnae3_handle_166.kinfo.netdev;
  #line 2103 
  roce->__anonCompField_hnae3_handle_166.rinfo.roce_io_base = hdev->hw.io_base;
  #line 2105 
  roce->pdev = nic->pdev;
  #line 2106 
  roce->ae_algo = nic->ae_algo;
  #line 2107 
  roce->numa_node_mask = nic->numa_node_mask;
  #line 2109 
  return 0;
}

#line 2112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_config_gro(struct hclgevf_dev *hdev, bool en)
{
  #line 2114 
  struct hclgevf_cfg_gro_status_cmd *req;
  #line 2115 
  struct hclgevf_desc desc;
  #line 2116 
  int ret;
  #line 2118 
  if (((hdev->ae_dev)->flag & 128U) == 0U) 
                                           #line 2119 
                                           return 0;
  #line 2121 
  hclgevf_cmd_setup_basic_desc(& desc,(enum hclgevf_opcode_type)HCLGEVF_OPC_GRO_GENERIC_CONFIG,(_Bool)0);
  #line 2123 
  req = (struct hclgevf_cfg_gro_status_cmd *)(& desc.data);
  #line 2125 
  if ((int)en != 0) 
                    #line 2125 
                    req->gro_en = (unsigned short)1U; else 
                                                           #line 2125 
                                                           req->gro_en = (unsigned short)0U;
  #line 2127 
  ret = hclgevf_cmd_send(& hdev->hw,& desc,1);
  #line 2128 
  if (ret != 0) 
                #line 2129 
                _dev_err(& (hdev->pdev)->dev,(char *)"VF GRO hardware config cmd failed, ret = %d.\n",ret);
  #line 2132 
  return ret;
}

#line 2135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_rss_init_hw(struct hclgevf_dev *hdev)
{
  #line 2138 
  int ret;
  #line 2139 
  u32 i;
  #line 2137 
  struct hclgevf_rss_cfg *rss_cfg = & hdev->rss_cfg;
  #line 2141 
  rss_cfg->rss_size = (unsigned int)hdev->nic.__anonCompField_hnae3_handle_166.kinfo.rss_size;
  #line 2143 
  if ((unsigned int)(hdev->pdev)->revision > 32U) {
    #line 2144 
    rss_cfg->hash_algo = 1U;
    #line 2145 
    memcpy((void *)(& rss_cfg->rss_hash_key),(void *)(& hclgevf_hash_key),40UL);
    #line 2148 
    ret = hclgevf_set_rss_algo_key(hdev,(unsigned char)((int)((unsigned char)rss_cfg->hash_algo)),(u8 *)(& rss_cfg->rss_hash_key));
    #line 2150 
    if (ret != 0) 
                  #line 2151 
                  return ret;
    #line 2153 
    rss_cfg->rss_tuple_sets.ipv4_tcp_en = (unsigned char)15U;
    #line 2155 
    rss_cfg->rss_tuple_sets.ipv4_udp_en = (unsigned char)15U;
    #line 2157 
    rss_cfg->rss_tuple_sets.ipv4_sctp_en = (unsigned char)31U;
    #line 2159 
    rss_cfg->rss_tuple_sets.ipv4_fragment_en = (unsigned char)15U;
    #line 2161 
    rss_cfg->rss_tuple_sets.ipv6_tcp_en = (unsigned char)15U;
    #line 2163 
    rss_cfg->rss_tuple_sets.ipv6_udp_en = (unsigned char)15U;
    #line 2165 
    rss_cfg->rss_tuple_sets.ipv6_sctp_en = (unsigned char)31U;
    #line 2167 
    rss_cfg->rss_tuple_sets.ipv6_fragment_en = (unsigned char)15U;
    #line 2170 
    ret = hclgevf_set_rss_input_tuple(hdev,rss_cfg);
    #line 2171 
    if (ret != 0) 
                  #line 2172 
                  return ret;
  }
  #line 2176 
  i = 0U;
  #line 2176 
  while (i <= 511U) {
    #line 2177 
    rss_cfg->rss_indirection_tbl[i] = (unsigned char)(i % rss_cfg->rss_size);
    #line 2176 
    i ++;
  }
  #line 2179 
  ret = hclgevf_set_rss_indir_table(hdev);
  #line 2180 
  if (ret != 0) 
                #line 2181 
                return ret;
  #line 2183 
  return hclgevf_set_rss_tc_mode(hdev,
                              (unsigned short)((int)((unsigned short)rss_cfg->rss_size)));
}

#line 2186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_init_vlan_config(struct hclgevf_dev *hdev)
{
  #line 2188 
  return hclgevf_set_vlan_filter(& hdev->nic,(unsigned short)129,
                              (unsigned short)0,(_Bool)0);
}

#line 2192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_set_timer_task(struct hnae3_handle *handle, bool enable)
{
  #line 2194 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 2196 
  if ((int)enable != 0) 
                        #line 2197 
                        cif_mod_timer(& hdev->service_timer,jiffies + 250UL);
  else {
    #line 2199 
    cif_del_timer_sync(& hdev->service_timer);
    #line 2200 
    cancel_work_sync(& hdev->service_task);
    #line 2201 
    cif_clear_bit(5L,& hdev->state);
  }
  #line 2203 
  return;
}

#line 2205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_ae_start(struct hnae3_handle *handle)
{
  #line 2207 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 2209 
  hclgevf_reset_tqp_stats(handle);
  #line 2211 
  hclgevf_request_link_info(hdev);
  #line 2213 
  hclgevf_update_link_mode(hdev);
  #line 2215 
  cif_clear_bit(0L,& hdev->state);
  #line 2217 
  return 0;
}

#line 2220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_ae_stop(struct hnae3_handle *handle)
{
  #line 2223 
  int i;
  #line 2222 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 2225 
  cif_set_bit(0L,& hdev->state);
  #line 2227 
  if (hdev->reset_type != (unsigned int)HNAE3_VF_RESET) {
    #line 2228 
    i = 0;
    #line 2228 
    while ((int)handle->__anonCompField_hnae3_handle_166.kinfo.num_tqps > i) {
      #line 2229 
      if (hclgevf_reset_tqp(handle,(unsigned short)((int)((unsigned short)i))) != 0) 
        #line 2230 
        break;
      #line 2228 
      i ++;
    }
  }
  #line 2232 
  hclgevf_reset_tqp_stats(handle);
  #line 2233 
  hclgevf_update_link_status(hdev,0);
  #line 2234 
  return;
}

#line 2236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_set_alive(struct hnae3_handle *handle, bool alive)
{
  #line 2239 
  u8 msg_data;
  #line 2238 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 2241 
  msg_data = (unsigned char)((int)alive != 0);
  #line 2242 
  return hclgevf_send_mbx_msg(hdev,(unsigned short)29,(unsigned short)0,
                             & msg_data,(unsigned char)1,(_Bool)0,(u8 *)0U,
                             (unsigned short)0);
}

#line 2246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_client_start(struct hnae3_handle *handle)
{
  #line 2249 
  int ret;
  #line 2248 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 2251 
  ret = hclgevf_set_alive(handle,(_Bool)1);
  #line 2252 
  if (ret != 0) 
                #line 2253 
                return ret;
  #line 2255 
  cif_mod_timer(& hdev->keep_alive_timer,jiffies + 500UL);
  #line 2258 
  return 0;
}

#line 2261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_client_stop(struct hnae3_handle *handle)
{
  #line 2264 
  int ret;
  #line 2263 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 2266 
  ret = hclgevf_set_alive(handle,(_Bool)0);
  #line 2267 
  if (ret != 0) 
                #line 2268 
                _dev_warn(& (hdev->pdev)->dev,(char *)"%s failed %d\n",(char *)"hclgevf_client_stop",ret);
  #line 2271 
  cif_del_timer_sync(& hdev->keep_alive_timer);
  #line 2272 
  cancel_work_sync(& hdev->keep_alive_task);
  #line 2273 
  return;
}

#line 2275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_state_init(struct hclgevf_dev *hdev)
{
  {
    #line 2278 
    struct lock_class_key __key;
    #line 2278 
    __init_work(& hdev->mbx_service_task,0);
    #line 2278 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 2278 
    hdev->mbx_service_task.data = __constr_expr_34;
    #line 2278 
    lockdep_init_map(& hdev->mbx_service_task.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 2278 
    INIT_LIST_HEAD(& hdev->mbx_service_task.entry);
    #line 2278 
    hdev->mbx_service_task.func = & hclgevf_mailbox_service_task;
  }
  #line 2279 
  cif_clear_bit(8L,& hdev->state);
  #line 2280 
  cif_clear_bit(9L,& hdev->state);
  {
    #line 2283 
    struct lock_class_key __key_0;
    #line 2283 
    init_timer_key(& hdev->service_timer,& hclgevf_service_timer,0U,(char *)"(&hdev->service_timer)",& __key_0);
  }
  {
    #line 2285 
    struct lock_class_key __key_1;
    #line 2285 
    __init_work(& hdev->service_task,0);
    #line 2285 
    atomic_long_t __constr_expr_35 = {.counter = 137438953408LL};
    #line 2285 
    hdev->service_task.data = __constr_expr_35;
    #line 2285 
    lockdep_init_map(& hdev->service_task.lockdep_map,(char *)"(work_completion)",& __key_1,0);
    #line 2285 
    INIT_LIST_HEAD(& hdev->service_task.entry);
    #line 2285 
    hdev->service_task.func = & hclgevf_service_task;
  }
  #line 2286 
  cif_clear_bit(5L,& hdev->state);
  {
    #line 2288 
    struct lock_class_key __key_2;
    #line 2288 
    __init_work(& hdev->rst_service_task,0);
    #line 2288 
    atomic_long_t __constr_expr_36 = {.counter = 137438953408LL};
    #line 2288 
    hdev->rst_service_task.data = __constr_expr_36;
    #line 2288 
    lockdep_init_map(& hdev->rst_service_task.lockdep_map,(char *)"(work_completion)",& __key_2,0);
    #line 2288 
    INIT_LIST_HEAD(& hdev->rst_service_task.entry);
    #line 2288 
    hdev->rst_service_task.func = & hclgevf_reset_service_task;
  }
  {
    #line 2290 
    struct lock_class_key __key_3;
    #line 2290 
    __mutex_init(& hdev->mbx_resp.mbx_mutex,(char *)"&hdev->mbx_resp.mbx_mutex",& __key_3);
  }
  #line 2293 
  cif_set_bit(0L,& hdev->state);
  #line 2294 
  return;
}

#line 2296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_state_uninit(struct hclgevf_dev *hdev)
{
  #line 2298 
  cif_set_bit(0L,& hdev->state);
  #line 2299 
  cif_set_bit(3L,& hdev->state);
  #line 2301 
  if (hdev->keep_alive_timer.function != (void (*)(struct timer_list *))0) 
    #line 2302 
    cif_del_timer_sync(& hdev->keep_alive_timer);
  #line 2303 
  if (hdev->keep_alive_task.func != (void (*)(struct work_struct *))0) 
    #line 2304 
    cancel_work_sync(& hdev->keep_alive_task);
  #line 2305 
  if (hdev->service_timer.function != (void (*)(struct timer_list *))0) 
    #line 2306 
    cif_del_timer_sync(& hdev->service_timer);
  #line 2307 
  if (hdev->service_task.func != (void (*)(struct work_struct *))0) 
                                                                    #line 2308 
                                                                    cancel_work_sync(& hdev->service_task);
  #line 2309 
  if (hdev->mbx_service_task.func != (void (*)(struct work_struct *))0) 
    #line 2310 
    cancel_work_sync(& hdev->mbx_service_task);
  #line 2311 
  if (hdev->rst_service_task.func != (void (*)(struct work_struct *))0) 
    #line 2312 
    cancel_work_sync(& hdev->rst_service_task);
  #line 2314 
  mutex_destroy(& hdev->mbx_resp.mbx_mutex);
  #line 2315 
  return;
}

#line 2317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_init_msi(struct hclgevf_dev *hdev)
{
  #line 2320 
  int vectors;
  #line 2321 
  int i;
  #line 2319 
  struct pci_dev *pdev = hdev->pdev;
  #line 2323 
  if (((hdev->ae_dev)->flag & 2U) != 0U) 
                                         #line 2324 
                                         vectors = pci_alloc_irq_vectors(pdev,(unsigned int)((int)hdev->roce_base_msix_offset + 1),(unsigned int)hdev->num_msi,4U); else 
                                                                    #line 2329 
                                                                    vectors = pci_alloc_irq_vectors(pdev,2U,(unsigned int)hdev->num_msi,6U);
  #line 2333 
  if (vectors < 0) {
    #line 2334 
    _dev_err(& pdev->dev,(char *)"failed(%d) to allocate MSI/MSI-X vectors\n",vectors);
    #line 2337 
    return vectors;
  }
  #line 2339 
  if ((int)hdev->num_msi > vectors) 
                                    #line 2340 
                                    _dev_warn(& (hdev->pdev)->dev,(char *)"requested %u MSI/MSI-X, but allocated %d MSI/MSI-X\n",(int)hdev->num_msi,vectors);
  #line 2344 
  hdev->num_msi = (unsigned short)vectors;
  #line 2345 
  hdev->num_msi_left = (unsigned short)vectors;
  #line 2347 
  hdev->base_msi_vector = pdev->irq;
  #line 2348 
  hdev->roce_base_vector = (int)(pdev->irq + (unsigned int)hdev->roce_base_msix_offset);
  #line 2350 
  hdev->vector_status = (u16 *)cif_devm_kcalloc(& pdev->dev,(unsigned long)hdev->num_msi,2UL,3264U);
  #line 2352 
  if (hdev->vector_status == (u16 *)0U) {
    #line 2353 
    pci_free_irq_vectors(pdev);
    #line 2354 
    return -12;
  }
  #line 2357 
  i = 0;
  #line 2357 
  while ((int)hdev->num_msi > i) {
    #line 2358 
    *(hdev->vector_status + (unsigned long)i) = (unsigned short)65535U;
    #line 2357 
    i ++;
  }
  #line 2360 
  hdev->vector_irq = (int *)cif_devm_kcalloc(& pdev->dev,(unsigned long)hdev->num_msi,4UL,3264U);
  #line 2362 
  if (hdev->vector_irq == (int *)0) {
    #line 2363 
    devm_kfree(& pdev->dev,(void *)hdev->vector_status);
    #line 2364 
    pci_free_irq_vectors(pdev);
    #line 2365 
    return -12;
  }
  #line 2368 
  return 0;
}

#line 2371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_uninit_msi(struct hclgevf_dev *hdev)
{
  #line 2373 
  struct pci_dev *pdev = hdev->pdev;
  #line 2375 
  devm_kfree(& pdev->dev,(void *)hdev->vector_status);
  #line 2376 
  devm_kfree(& pdev->dev,(void *)hdev->vector_irq);
  #line 2377 
  pci_free_irq_vectors(pdev);
  #line 2378 
  return;
}

#line 2380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_misc_irq_init(struct hclgevf_dev *hdev)
{
  #line 2382 
  int ret;
  #line 2384 
  hclgevf_get_misc_vector(hdev);
  #line 2386 
  ret = cif_request_irq((unsigned int)hdev->misc_vector.vector_irq,& hclgevf_misc_irq_handle,0UL,(char *)"hclgevf_cmd",(void *)hdev);
  #line 2388 
  if (ret != 0) {
    #line 2389 
    _dev_err(& (hdev->pdev)->dev,(char *)"VF failed to request misc irq(%d)\n",hdev->misc_vector.vector_irq);
    #line 2391 
    return ret;
  }
  #line 2394 
  hclgevf_clear_event_cause(hdev,0U);
  #line 2397 
  hclgevf_enable_vector(& hdev->misc_vector,(_Bool)1);
  #line 2399 
  return ret;
}

#line 2402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_misc_irq_uninit(struct hclgevf_dev *hdev)
{
  #line 2405 
  hclgevf_enable_vector(& hdev->misc_vector,(_Bool)0);
  #line 2406 
  synchronize_irq((unsigned int)hdev->misc_vector.vector_irq);
  #line 2407 
  cif_free_irq((unsigned int)hdev->misc_vector.vector_irq,(void *)hdev);
  #line 2408 
  hclgevf_free_vector(hdev,0);
  #line 2409 
  return;
}

#line 2411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_info_show(struct hclgevf_dev *hdev)
{
  #line 2413 
  struct device *dev = & (hdev->pdev)->dev;
  #line 2415 
  _dev_info(dev,(char *)"VF info begin:\n");
  #line 2417 
  _dev_info(dev,(char *)"Task queue pairs numbers: %u\n",(int)hdev->num_tqps);
  #line 2418 
  _dev_info(dev,(char *)"Desc num per TX queue: %u\n",(int)hdev->num_tx_desc);
  #line 2419 
  _dev_info(dev,(char *)"Desc num per RX queue: %u\n",(int)hdev->num_rx_desc);
  #line 2420 
  _dev_info(dev,(char *)"Numbers of vports: %u\n",(int)hdev->num_alloc_vport);
  #line 2421 
  _dev_info(dev,(char *)"HW tc map: 0x%x\n",(int)hdev->hw_tc_map);
  #line 2422 
  _dev_info(dev,(char *)"PF media type of this VF: %u\n",(int)hdev->hw.mac.media_type);
  #line 2425 
  _dev_info(dev,(char *)"VF info end.\n");
  #line 2426 
  return;
}

#line 2428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_init_nic_client_instance(struct hnae3_ae_dev *ae_dev, struct hnae3_client *client)
{
  #line 2432 
  int ret;
  #line 2431 
  struct hclgevf_dev *hdev = (struct hclgevf_dev *)ae_dev->priv;
  #line 2434 
  ret = (*((client->ops)->init_instance))(& hdev->nic);
  #line 2435 
  if (ret != 0) 
                #line 2436 
                return ret;
  #line 2438 
  cif_set_bit(4L,& hdev->state);
  #line 2439 
  hnae3_set_client_init_flag(client,ae_dev,1U);
  #line 2441 
  if ((hdev->nic.msg_enable & 1U) != 0U) 
                                         #line 2442 
                                         hclgevf_info_show(hdev);
  #line 2444 
  return 0;
}

#line 2447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_init_roce_client_instance(struct hnae3_ae_dev *ae_dev, struct hnae3_client *client)
{
  #line 2451 
  int ret;
  #line 2450 
  struct hclgevf_dev *hdev = (struct hclgevf_dev *)ae_dev->priv;
  #line 2453 
  if ((((hdev->ae_dev)->flag & 2U) == 0U || hdev->roce_client == (struct hnae3_client *)0) || hdev->nic_client == (struct hnae3_client *)0) 
    #line 2455 
    return 0;
  #line 2457 
  ret = hclgevf_init_roce_base_info(hdev);
  #line 2458 
  if (ret != 0) 
                #line 2459 
                return ret;
  #line 2461 
  ret = (*((client->ops)->init_instance))(& hdev->roce);
  #line 2462 
  if (ret != 0) 
                #line 2463 
                return ret;
  #line 2465 
  hnae3_set_client_init_flag(client,ae_dev,1U);
  #line 2467 
  return 0;
}

#line 2470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_init_client_instance(struct hnae3_client *client, struct hnae3_ae_dev *ae_dev)
{
  #line 2474 
  int ret;
  #line 2473 
  struct hclgevf_dev *hdev = (struct hclgevf_dev *)ae_dev->priv;
  #line 2476 
  switch ((unsigned int)client->type) {
    #line 2477 
    case (unsigned int)0: 
                          #line 2477 
    ;
    #line 2478 
    hdev->nic_client = client;
    #line 2479 
    hdev->nic.client = client;
    #line 2481 
    ret = hclgevf_init_nic_client_instance(ae_dev,client);
    #line 2482 
    if (ret != 0) 
                  #line 2483 
                  goto clear_nic;
    #line 2485 
    ret = hclgevf_init_roce_client_instance(ae_dev,hdev->roce_client);
    #line 2487 
    if (ret != 0) 
                  #line 2488 
                  goto clear_roce;
    #line 2490 
    break;
    #line 2491 
    case (unsigned int)1: 
                          #line 2491 
    ;
    #line 2492 
    if (((hdev->ae_dev)->flag & 2U) != 0U) {
      #line 2493 
      hdev->roce_client = client;
      #line 2494 
      hdev->roce.client = client;
    }
    #line 2497 
    ret = hclgevf_init_roce_client_instance(ae_dev,client);
    #line 2498 
    if (ret != 0) 
                  #line 2499 
                  goto clear_roce;
    #line 2501 
    break;
    #line 2502 
    default: 
             #line 2502 
    ;
    #line 2503 
    return -22;
  }
  #line 2506 
  return 0;
  #line 2508 
  clear_nic: 
             #line 2508 
  ;
  #line 2509 
  hdev->nic_client = (struct hnae3_client *)0;
  #line 2510 
  hdev->nic.client = (struct hnae3_client *)0;
  #line 2511 
  return ret;
  #line 2512 
  clear_roce: 
              #line 2512 
  ;
  #line 2513 
  hdev->roce_client = (struct hnae3_client *)0;
  #line 2514 
  hdev->roce.client = (struct hnae3_client *)0;
  #line 2515 
  return ret;
}

#line 2518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_uninit_client_instance(struct hnae3_client *client, struct hnae3_ae_dev *ae_dev)
{
  #line 2521 
  struct hclgevf_dev *hdev = (struct hclgevf_dev *)ae_dev->priv;
  #line 2524 
  if (hdev->roce_client != (struct hnae3_client *)0) {
    #line 2525 
    (*(((hdev->roce_client)->ops)->uninit_instance))(& hdev->roce,(_Bool)0);
    #line 2526 
    hdev->roce_client = (struct hnae3_client *)0;
    #line 2527 
    hdev->roce.client = (struct hnae3_client *)0;
  }
  #line 2531 
  if (((client->ops)->uninit_instance != (void (*)(struct hnae3_handle *, bool ))0 && hdev->nic_client != (struct hnae3_client *)0) && client->type != (unsigned int)HNAE3_CLIENT_ROCE) {
    #line 2533 
    cif_clear_bit(4L,& hdev->state);
    #line 2535 
    (*((client->ops)->uninit_instance))(& hdev->nic,(_Bool)0);
    #line 2536 
    hdev->nic_client = (struct hnae3_client *)0;
    #line 2537 
    hdev->nic.client = (struct hnae3_client *)0;
  }
  #line 2539 
  return;
}

#line 2541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_pci_init(struct hclgevf_dev *hdev)
{
  #line 2544 
  struct hclgevf_hw *hw;
  #line 2545 
  int ret;
  #line 2543 
  struct pci_dev *pdev = hdev->pdev;
  #line 2547 
  ret = pci_enable_device(pdev);
  #line 2548 
  if (ret != 0) {
    #line 2549 
    _dev_err(& pdev->dev,(char *)"failed to enable PCI device\n");
    #line 2550 
    return ret;
  }
  #line 2553 
  ret = dma_set_mask_and_coherent(& pdev->dev,18446744073709551615ULL);
  #line 2554 
  if (ret != 0) {
    #line 2555 
    _dev_err(& pdev->dev,(char *)"can\'t set consistent PCI DMA, exiting");
    #line 2556 
    goto err_disable_device;
  }
  #line 2559 
  ret = pci_request_regions(pdev,(char *)"hclgevf");
  #line 2560 
  if (ret != 0) {
    #line 2561 
    _dev_err(& pdev->dev,(char *)"PCI request regions failed %d\n",ret);
    #line 2562 
    goto err_disable_device;
  }
  #line 2565 
  pci_set_master(pdev);
  #line 2566 
  hw = & hdev->hw;
  #line 2567 
  hw->hdev = (void *)hdev;
  #line 2568 
  hw->io_base = pci_iomap(pdev,2,0UL);
  #line 2569 
  if (hw->io_base == (void *)0) {
    #line 2570 
    _dev_err(& pdev->dev,(char *)"can\'t map configuration register space\n");
    #line 2571 
    ret = -12;
    #line 2572 
    goto err_clr_master;
  }
  #line 2575 
  return 0;
  #line 2577 
  err_clr_master: 
                  #line 2577 
  ;
  #line 2578 
  pci_clear_master(pdev);
  #line 2579 
  pci_release_regions(pdev);
  #line 2580 
  err_disable_device: 
                      #line 2580 
  ;
  #line 2581 
  pci_disable_device(pdev);
  #line 2583 
  return ret;
}

#line 2586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_pci_uninit(struct hclgevf_dev *hdev)
{
  #line 2588 
  struct pci_dev *pdev = hdev->pdev;
  #line 2590 
  pci_iounmap(pdev,hdev->hw.io_base);
  #line 2591 
  pci_clear_master(pdev);
  #line 2592 
  pci_release_regions(pdev);
  #line 2593 
  pci_disable_device(pdev);
  #line 2594 
  return;
}

#line 2596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_query_vf_resource(struct hclgevf_dev *hdev)
{
  #line 2598 
  struct hclgevf_query_res_cmd *req;
  #line 2599 
  struct hclgevf_desc desc;
  #line 2600 
  int ret;
  #line 2602 
  hclgevf_cmd_setup_basic_desc(& desc,(enum hclgevf_opcode_type)HCLGEVF_OPC_QUERY_VF_RSRC,(_Bool)1);
  #line 2603 
  ret = hclgevf_cmd_send(& hdev->hw,& desc,1);
  #line 2604 
  if (ret != 0) {
    #line 2605 
    _dev_err(& (hdev->pdev)->dev,(char *)"query vf resource failed, ret = %d.\n",ret);
    #line 2607 
    return ret;
  }
  #line 2610 
  req = (struct hclgevf_query_res_cmd *)(& desc.data);
  #line 2612 
  if (((hdev->ae_dev)->flag & 2U) != 0U) {
    #line 2613 
    hdev->roce_base_msix_offset = req->msixcap_localid_ba_rocee;
    #line 2617 
    hdev->num_roce_msix = (unsigned short)((unsigned int)req->vf_intr_vector_number & 255U);
    #line 2622 
    hdev->num_nic_msix = hdev->num_roce_msix;
    #line 2627 
    hdev->num_msi = (unsigned short)((int)hdev->num_roce_msix + (int)hdev->roce_base_msix_offset);
  }
  else {
    #line 2630 
    hdev->num_msi = (unsigned short)((unsigned int)req->vf_intr_vector_number & 255U);
    #line 2634 
    hdev->num_nic_msix = hdev->num_msi;
  }
  #line 2637 
  if ((unsigned int)hdev->num_nic_msix <= 1U) {
    #line 2638 
    _dev_err(& (hdev->pdev)->dev,(char *)"Just %u msi resources, not enough for vf(min:2).\n",(int)hdev->num_nic_msix);
    #line 2641 
    return -22;
  }
  #line 2644 
  return 0;
}

#line 2647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_pci_reset(struct hclgevf_dev *hdev)
{
  #line 2649 
  struct pci_dev *pdev = hdev->pdev;
  #line 2650 
  int ret = 0;
  #line 2652 
  if (hdev->reset_type == (unsigned int)HNAE3_VF_FULL_RESET) {
    #line 2652 
    if ((int)test_bit(2L,& hdev->state) != 0) {
      #line 2654 
      hclgevf_misc_irq_uninit(hdev);
      #line 2655 
      hclgevf_uninit_msi(hdev);
      #line 2656 
      cif_clear_bit(2L,& hdev->state);
    }
  }
  #line 2659 
  if (! test_bit(2L,& hdev->state)) {
    #line 2660 
    pci_set_master(pdev);
    #line 2661 
    ret = hclgevf_init_msi(hdev);
    #line 2662 
    if (ret != 0) {
      #line 2663 
      _dev_err(& pdev->dev,(char *)"failed(%d) to init MSI/MSI-X\n",ret);
      #line 2665 
      return ret;
    }
    #line 2668 
    ret = hclgevf_misc_irq_init(hdev);
    #line 2669 
    if (ret != 0) {
      #line 2670 
      hclgevf_uninit_msi(hdev);
      #line 2671 
      _dev_err(& pdev->dev,(char *)"failed(%d) to init Misc IRQ(vector0)\n",ret);
      #line 2673 
      return ret;
    }
    #line 2676 
    cif_set_bit(2L,& hdev->state);
  }
  #line 2679 
  return ret;
}

#line 2682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_reset_hdev(struct hclgevf_dev *hdev)
{
  #line 2685 
  int ret;
  #line 2684 
  struct pci_dev *pdev = hdev->pdev;
  #line 2687 
  ret = hclgevf_pci_reset(hdev);
  #line 2688 
  if (ret != 0) {
    #line 2689 
    _dev_err(& pdev->dev,(char *)"pci reset failed %d\n",ret);
    #line 2690 
    return ret;
  }
  #line 2693 
  ret = hclgevf_cmd_init(hdev);
  #line 2694 
  if (ret != 0) {
    #line 2695 
    _dev_err(& pdev->dev,(char *)"cmd failed %d\n",ret);
    #line 2696 
    return ret;
  }
  #line 2699 
  ret = hclgevf_rss_init_hw(hdev);
  #line 2700 
  if (ret != 0) {
    #line 2701 
    _dev_err(& (hdev->pdev)->dev,(char *)"failed(%d) to initialize RSS\n",ret);
    #line 2703 
    return ret;
  }
  #line 2706 
  ret = hclgevf_config_gro(hdev,(_Bool)1);
  #line 2707 
  if (ret != 0) 
                #line 2708 
                return ret;
  #line 2710 
  ret = hclgevf_init_vlan_config(hdev);
  #line 2711 
  if (ret != 0) {
    #line 2712 
    _dev_err(& (hdev->pdev)->dev,(char *)"failed(%d) to initialize VLAN config\n",ret);
    #line 2714 
    return ret;
  }
  #line 2717 
  _dev_info(& (hdev->pdev)->dev,(char *)"Reset done\n");
  #line 2719 
  return 0;
}

#line 2722  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_init_hdev(struct hclgevf_dev *hdev)
{
  #line 2725 
  int ret;
  #line 2724 
  struct pci_dev *pdev = hdev->pdev;
  #line 2727 
  ret = hclgevf_pci_init(hdev);
  #line 2728 
  if (ret != 0) {
    #line 2729 
    _dev_err(& pdev->dev,(char *)"PCI initialization failed\n");
    #line 2730 
    return ret;
  }
  #line 2733 
  ret = hclgevf_cmd_queue_init(hdev);
  #line 2734 
  if (ret != 0) {
    #line 2735 
    _dev_err(& pdev->dev,(char *)"Cmd queue init failed: %d\n",ret);
    #line 2736 
    goto err_cmd_queue_init;
  }
  #line 2739 
  ret = hclgevf_cmd_init(hdev);
  #line 2740 
  if (ret != 0) 
                #line 2741 
                goto err_cmd_init;
  #line 2744 
  ret = hclgevf_query_vf_resource(hdev);
  #line 2745 
  if (ret != 0) {
    #line 2746 
    _dev_err(& (hdev->pdev)->dev,(char *)"Query vf status error, ret = %d.\n",ret);
    #line 2748 
    goto err_cmd_init;
  }
  #line 2751 
  ret = hclgevf_init_msi(hdev);
  #line 2752 
  if (ret != 0) {
    #line 2753 
    _dev_err(& pdev->dev,(char *)"failed(%d) to init MSI/MSI-X\n",ret);
    #line 2754 
    goto err_cmd_init;
  }
  #line 2757 
  hclgevf_state_init(hdev);
  #line 2758 
  hdev->reset_level = HNAE3_VF_FUNC_RESET;
  #line 2760 
  ret = hclgevf_misc_irq_init(hdev);
  #line 2761 
  if (ret != 0) {
    #line 2762 
    _dev_err(& pdev->dev,(char *)"failed(%d) to init Misc IRQ(vector0)\n",ret);
    #line 2764 
    goto err_misc_irq_init;
  }
  #line 2767 
  cif_set_bit(2L,& hdev->state);
  #line 2769 
  ret = hclgevf_configure(hdev);
  #line 2770 
  if (ret != 0) {
    #line 2771 
    _dev_err(& pdev->dev,(char *)"failed(%d) to fetch configuration\n",ret);
    #line 2772 
    goto err_config;
  }
  #line 2775 
  ret = hclgevf_alloc_tqps(hdev);
  #line 2776 
  if (ret != 0) {
    #line 2777 
    _dev_err(& pdev->dev,(char *)"failed(%d) to allocate TQPs\n",ret);
    #line 2778 
    goto err_config;
  }
  #line 2781 
  ret = hclgevf_set_handle_info(hdev);
  #line 2782 
  if (ret != 0) {
    #line 2783 
    _dev_err(& pdev->dev,(char *)"failed(%d) to set handle info\n",ret);
    #line 2784 
    goto err_config;
  }
  #line 2787 
  ret = hclgevf_config_gro(hdev,(_Bool)1);
  #line 2788 
  if (ret != 0) 
                #line 2789 
                goto err_config;
  #line 2792 
  ret = hclgevf_rss_init_hw(hdev);
  #line 2793 
  if (ret != 0) {
    #line 2794 
    _dev_err(& (hdev->pdev)->dev,(char *)"failed(%d) to initialize RSS\n",ret);
    #line 2796 
    goto err_config;
  }
  #line 2799 
  ret = hclgevf_init_vlan_config(hdev);
  #line 2800 
  if (ret != 0) {
    #line 2801 
    _dev_err(& (hdev->pdev)->dev,(char *)"failed(%d) to initialize VLAN config\n",ret);
    #line 2803 
    goto err_config;
  }
  #line 2806 
  hdev->last_reset_time = jiffies;
  #line 2807 
  _dev_info(& (hdev->pdev)->dev,(char *)"finished initializing %s driver\n",(char *)"hclgevf");
  #line 2810 
  return 0;
  #line 2812 
  err_config: 
              #line 2812 
  ;
  #line 2813 
  hclgevf_misc_irq_uninit(hdev);
  #line 2814 
  err_misc_irq_init: 
                     #line 2814 
  ;
  #line 2815 
  hclgevf_state_uninit(hdev);
  #line 2816 
  hclgevf_uninit_msi(hdev);
  #line 2817 
  err_cmd_init: 
                #line 2817 
  ;
  #line 2818 
  hclgevf_cmd_uninit(hdev);
  #line 2819 
  err_cmd_queue_init: 
                      #line 2819 
  ;
  #line 2820 
  hclgevf_pci_uninit(hdev);
  #line 2821 
  cif_clear_bit(2L,& hdev->state);
  #line 2822 
  return ret;
}

#line 2825  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_uninit_hdev(struct hclgevf_dev *hdev)
{
  #line 2827 
  hclgevf_state_uninit(hdev);
  #line 2829 
  if ((int)test_bit(2L,& hdev->state) != 0) {
    #line 2830 
    hclgevf_misc_irq_uninit(hdev);
    #line 2831 
    hclgevf_uninit_msi(hdev);
  }
  #line 2834 
  hclgevf_pci_uninit(hdev);
  #line 2835 
  hclgevf_cmd_uninit(hdev);
  #line 2836 
  return;
}

#line 2838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_init_ae_dev(struct hnae3_ae_dev *ae_dev)
{
  #line 2841 
  struct hclgevf_dev *hdev;
  #line 2842 
  int ret;
  #line 2840 
  struct pci_dev *pdev = ae_dev->pdev;
  #line 2844 
  ret = hclgevf_alloc_hdev(ae_dev);
  #line 2845 
  if (ret != 0) {
    #line 2846 
    _dev_err(& pdev->dev,(char *)"hclge device allocation failed\n");
    #line 2847 
    return ret;
  }
  #line 2850 
  ret = hclgevf_init_hdev((struct hclgevf_dev *)ae_dev->priv);
  #line 2851 
  if (ret != 0) {
    #line 2852 
    _dev_err(& pdev->dev,(char *)"hclge device initialization failed\n");
    #line 2853 
    return ret;
  }
  #line 2856 
  hdev = (struct hclgevf_dev *)ae_dev->priv;
  {
    #line 2857 
    struct lock_class_key __key;
    #line 2857 
    init_timer_key(& hdev->keep_alive_timer,& hclgevf_keep_alive_timer,0U,(char *)"(&hdev->keep_alive_timer)",& __key);
  }
  {
    #line 2858 
    struct lock_class_key __key_0;
    #line 2858 
    __init_work(& hdev->keep_alive_task,0);
    #line 2858 
    atomic_long_t __constr_expr_37 = {.counter = 137438953408LL};
    #line 2858 
    hdev->keep_alive_task.data = __constr_expr_37;
    #line 2858 
    lockdep_init_map(& hdev->keep_alive_task.lockdep_map,(char *)"(work_completion)",& __key_0,0);
    #line 2858 
    INIT_LIST_HEAD(& hdev->keep_alive_task.entry);
    #line 2858 
    hdev->keep_alive_task.func = & hclgevf_keep_alive_task;
  }
  #line 2860 
  return 0;
}

#line 2863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_uninit_ae_dev(struct hnae3_ae_dev *ae_dev)
{
  #line 2865 
  struct hclgevf_dev *hdev = (struct hclgevf_dev *)ae_dev->priv;
  #line 2867 
  hclgevf_uninit_hdev(hdev);
  #line 2868 
  ae_dev->priv = (void *)0;
  #line 2869 
  return;
}

#line 2871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static u32 hclgevf_get_max_channels(struct hclgevf_dev *hdev)
{
  #line 2876 
  unsigned int __UNIQUE_ID___x458;
  #line 2876 
  unsigned int tmp;
  #line 2873 
  struct hnae3_handle *nic = & hdev->nic;
  #line 2874 
  struct hnae3_knic_private_info *kinfo = & nic->__anonCompField_hnae3_handle_166.kinfo;
  {
    #line 2876 
    __UNIQUE_ID___x458 = (unsigned int)hdev->rss_size_max;
    #line 2876 
    unsigned int __UNIQUE_ID___y459 = (unsigned int)((int)hdev->num_tqps / (int)kinfo->num_tc);
    #line 2876 
    if (__UNIQUE_ID___x458 < __UNIQUE_ID___y459) 
                                                 #line 2876 
                                                 tmp = __UNIQUE_ID___x458; else 
                                                                    #line 2876 
                                                                    tmp = __UNIQUE_ID___y459;
    }
  #line 2876 
  return tmp;
}

#line 2890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_get_channels(struct hnae3_handle *handle, struct ethtool_channels *ch)
{
  #line 2893 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 2895 
  ch->max_combined = hclgevf_get_max_channels(hdev);
  #line 2896 
  ch->other_count = 0U;
  #line 2897 
  ch->max_other = 0U;
  #line 2898 
  ch->combined_count = (unsigned int)handle->__anonCompField_hnae3_handle_166.kinfo.rss_size;
  #line 2899 
  return;
}

#line 2901  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_get_tqps_and_rss_info(struct hnae3_handle *handle, u16 *alloc_tqps, u16 *max_rss_size)
{
  #line 2904 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 2906 
  *alloc_tqps = hdev->num_tqps;
  #line 2907 
  *max_rss_size = hdev->rss_size_max;
  #line 2908 
  return;
}

#line 2910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_update_rss_size(struct hnae3_handle *handle, u32 new_tqps_num)
{
  #line 2919 
  unsigned short __UNIQUE_ID___x460;
  #line 2919 
  int tmp_0;
  #line 2915 
  u16 max_rss_size;
  #line 2913 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_166.kinfo;
  #line 2914 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 2917 
  kinfo->req_rss_size = (unsigned short)new_tqps_num;
  {
    #line 2919 
    __UNIQUE_ID___x460 = hdev->rss_size_max;
    #line 2919 
    unsigned short __UNIQUE_ID___y461 = (unsigned short)((int)hdev->num_tqps / (int)kinfo->num_tc);
    #line 2919 
    if ((int)__UNIQUE_ID___x460 < (int)__UNIQUE_ID___y461) 
                                                           #line 2919 
                                                           tmp_0 = (int)__UNIQUE_ID___x460; else 
                                                                    #line 2919 
                                                                    tmp_0 = (int)__UNIQUE_ID___y461;
    }
  #line 2919 
  max_rss_size = (unsigned short)tmp_0;
  #line 2925 
  if (((int)kinfo->req_rss_size != (int)kinfo->rss_size && (unsigned int)kinfo->req_rss_size != 0U) && (int)kinfo->req_rss_size <= (int)max_rss_size) 
    #line 2927 
    kinfo->rss_size = kinfo->req_rss_size;
  else 
    #line 2928 
    if ((int)kinfo->rss_size > (int)max_rss_size || (unsigned int)kinfo->req_rss_size == 0U && (int)kinfo->rss_size < (int)max_rss_size) 
      #line 2930 
      kinfo->rss_size = max_rss_size;
  #line 2932 
  kinfo->num_tqps = (unsigned short)((int)((unsigned short)kinfo->num_tc) * (int)kinfo->rss_size);
  #line 2933 
  return;
}

#line 2935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_set_channels(struct hnae3_handle *handle, u32 new_tqps_num, bool rxfh_configured)
{
  #line 2942 
  u32 *rss_indir;
  #line 2943 
  unsigned int i;
  #line 2944 
  int ret;
  #line 2938 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 2939 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_166.kinfo;
  #line 2940 
  u16 cur_rss_size = kinfo->rss_size;
  #line 2941 
  u16 cur_tqps = kinfo->num_tqps;
  #line 2946 
  hclgevf_update_rss_size(handle,new_tqps_num);
  #line 2948 
  ret = hclgevf_set_rss_tc_mode(hdev,(unsigned short)((int)kinfo->rss_size));
  #line 2949 
  if (ret != 0) 
                #line 2950 
                return ret;
  #line 2953 
  if ((int)rxfh_configured != 0) 
                                 #line 2954 
                                 goto out;
  #line 2957 
  rss_indir = (u32 *)kcalloc(512UL,4UL,3264U);
  #line 2958 
  if (rss_indir == (u32 *)0U) 
                              #line 2959 
                              return -12;
  #line 2961 
  i = 0U;
  #line 2961 
  while (i <= 511U) {
    #line 2962 
    *(rss_indir + (unsigned long)i) = i % (unsigned int)kinfo->rss_size;
    #line 2961 
    i ++;
  }
  #line 2964 
  ret = hclgevf_set_rss(handle,rss_indir,(u8 *)0U,(unsigned char)0);
  #line 2965 
  if (ret != 0) 
                #line 2966 
                _dev_err(& (hdev->pdev)->dev,(char *)"set rss indir table fail, ret=%d\n",ret);
  #line 2969 
  kfree((void *)rss_indir);
  #line 2971 
  out: 
       #line 2971 
  ;
  #line 2972 
  if (ret == 0) 
                #line 2973 
                _dev_info(& (hdev->pdev)->dev,(char *)"Channels changed, rss_size from %u to %u, tqps from %u to %u",(int)cur_rss_size,(int)kinfo->rss_size,(int)cur_tqps,(int)kinfo->rss_size * (int)kinfo->num_tc);
  #line 2978 
  return ret;
}

#line 2981  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_get_status(struct hnae3_handle *handle)
{
  #line 2983 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 2985 
  return hdev->hw.mac.link;
}

#line 2988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_get_ksettings_an_result(struct hnae3_handle *handle, u8 *auto_neg, u32 *speed, u8 *duplex)
{
  #line 2992 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 2994 
  if (speed != (u32 *)0U) 
                          #line 2995 
                          *speed = hdev->hw.mac.speed;
  #line 2996 
  if (duplex != (u8 *)0U) 
                          #line 2997 
                          *duplex = hdev->hw.mac.duplex;
  #line 2998 
  if (auto_neg != (u8 *)0U) 
                            #line 2999 
                            *auto_neg = (unsigned char)0U;
  #line 3000 
  return;
}

#line 3002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
void hclgevf_update_speed_duplex(struct hclgevf_dev *hdev, u32 speed, u8 duplex)
{
  #line 3005 
  hdev->hw.mac.speed = speed;
  #line 3006 
  hdev->hw.mac.duplex = duplex;
  #line 3007 
  return;
}

#line 3009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_gro_en(struct hnae3_handle *handle, bool enable)
{
  #line 3011 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 3013 
  return hclgevf_config_gro(hdev,(_Bool)((bool)((int)enable) != 0));
}

#line 3016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_get_media_type(struct hnae3_handle *handle, u8 *media_type, u8 *module_type)
{
  #line 3019 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 3021 
  if (media_type != (u8 *)0U) 
                              #line 3022 
                              *media_type = hdev->hw.mac.media_type;
  #line 3024 
  if (module_type != (u8 *)0U) 
                               #line 3025 
                               *module_type = hdev->hw.mac.module_type;
  #line 3026 
  return;
}

#line 3028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static bool hclgevf_get_hw_reset_stat(struct hnae3_handle *handle)
{
  #line 3030 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 3032 
  return (_Bool)(hclgevf_read_reg((u8 *)hdev->hw.io_base,134144U) != 0U);
}

#line 3035  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static bool hclgevf_ae_dev_resetting(struct hnae3_handle *handle)
{
  #line 3037 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 3039 
  return test_bit(7L,& hdev->state);
}

#line 3042  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static unsigned long hclgevf_ae_dev_reset_cnt(struct hnae3_handle *handle)
{
  #line 3044 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 3046 
  return (unsigned long)hdev->rst_stats.hw_rst_done_cnt;
}

#line 3049  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_get_link_mode(struct hnae3_handle *handle, unsigned long *supported, unsigned long *advertising)
{
  #line 3053 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 3055 
  *supported = (unsigned long)hdev->hw.mac.supported;
  #line 3056 
  *advertising = (unsigned long)hdev->hw.mac.advertising;
  #line 3057 
  return;
}

#line 3064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_get_regs_len(struct hnae3_handle *handle)
{
  #line 3066 
  int cmdq_lines;
  #line 3066 
  int common_lines;
  #line 3066 
  int ring_lines;
  #line 3066 
  int tqp_intr_lines;
  #line 3067 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 3069 
  cmdq_lines = 4;
  #line 3070 
  common_lines = 1;
  #line 3071 
  ring_lines = 7;
  #line 3072 
  tqp_intr_lines = 2;
  #line 3075 
  return (int)((unsigned long)(((cmdq_lines + common_lines) + (int)hdev->num_tqps * ring_lines) + ((int)hdev->num_msi_used + -1) * tqp_intr_lines) * (unsigned long)16U);
}

#line 3078  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_get_regs(struct hnae3_handle *handle, u32 *version, void *data)
{
  #line 3082 
  int i;
  #line 3082 
  int j;
  #line 3082 
  int reg_um;
  #line 3082 
  int separator_num;
  #line 3081 
  struct hclgevf_dev *hdev = hclgevf_ae_get_hdev(handle);
  #line 3083 
  u32 *reg = (u32 *)data;
  #line 3085 
  *version = hdev->fw_version;
  #line 3088 
  reg_um = 14;
  #line 3089 
  separator_num = 4 - reg_um % 4;
  #line 3090 
  i = 0;
  #line 3090 
  while (i < reg_um) {
    #line 3091 
    u32 *tmp_0;
    #line 3091 
    tmp_0 = reg;
    #line 3091 
    reg ++;
    #line 3091 
    *tmp_0 = hclgevf_read_reg((u8 *)hdev->hw.io_base,cmdq_reg_addr_list[i]);
    #line 3090 
    i ++;
  }
  #line 3092 
  i = 0;
  #line 3092 
  while (i < separator_num) {
    #line 3093 
    u32 *tmp_1;
    #line 3093 
    tmp_1 = reg;
    #line 3093 
    reg ++;
    #line 3093 
    *tmp_1 = 4294967295U;
    #line 3092 
    i ++;
  }
  #line 3095 
  reg_um = 3;
  #line 3096 
  separator_num = 4 - reg_um % 4;
  #line 3097 
  i = 0;
  #line 3097 
  while (i < reg_um) {
    #line 3098 
    u32 *tmp_2;
    #line 3098 
    tmp_2 = reg;
    #line 3098 
    reg ++;
    #line 3098 
    *tmp_2 = hclgevf_read_reg((u8 *)hdev->hw.io_base,common_reg_addr_list[i]);
    #line 3097 
    i ++;
  }
  #line 3099 
  i = 0;
  #line 3099 
  while (i < separator_num) {
    #line 3100 
    u32 *tmp_3;
    #line 3100 
    tmp_3 = reg;
    #line 3100 
    reg ++;
    #line 3100 
    *tmp_3 = 4294967295U;
    #line 3099 
    i ++;
  }
  #line 3102 
  reg_um = 26;
  #line 3103 
  separator_num = 4 - reg_um % 4;
  #line 3104 
  j = 0;
  #line 3104 
  while ((int)hdev->num_tqps > j) {
    #line 3105 
    i = 0;
    #line 3105 
    while (i < reg_um) {
      #line 3106 
      u32 *tmp_4;
      #line 3106 
      tmp_4 = reg;
      #line 3106 
      reg ++;
      #line 3106 
      *tmp_4 = hclgevf_read_reg((u8 *)hdev->hw.io_base,ring_reg_addr_list[i] + (unsigned int)(j * 512));
      #line 3105 
      i ++;
    }
    #line 3109 
    i = 0;
    #line 3109 
    while (i < separator_num) {
      #line 3110 
      u32 *tmp_5;
      #line 3110 
      tmp_5 = reg;
      #line 3110 
      reg ++;
      #line 3110 
      *tmp_5 = 4294967295U;
      #line 3109 
      i ++;
    }
    #line 3104 
    j ++;
  }
  #line 3113 
  reg_um = 5;
  #line 3114 
  separator_num = 4 - reg_um % 4;
  #line 3115 
  j = 0;
  #line 3115 
  while ((int)hdev->num_msi_used + -1 > j) {
    #line 3116 
    i = 0;
    #line 3116 
    while (i < reg_um) {
      #line 3117 
      u32 *tmp_6;
      #line 3117 
      tmp_6 = reg;
      #line 3117 
      reg ++;
      #line 3117 
      *tmp_6 = hclgevf_read_reg((u8 *)hdev->hw.io_base,tqp_intr_reg_addr_list[i] + (unsigned int)(j * 4));
      #line 3116 
      i ++;
    }
    #line 3120 
    i = 0;
    #line 3120 
    while (i < separator_num) {
      #line 3121 
      u32 *tmp_7;
      #line 3121 
      tmp_7 = reg;
      #line 3121 
      reg ++;
      #line 3121 
      *tmp_7 = 4294967295U;
      #line 3120 
      i ++;
    }
    #line 3115 
    j ++;
  }
  #line 3123 
  return;
}

#line 3125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
void hclgevf_update_port_base_vlan_info(struct hclgevf_dev *hdev, u16 state, u8 *port_base_vlan_info, u8 data_size)
{
  #line 3128 
  struct hnae3_handle *nic = & hdev->nic;
  #line 3130 
  rtnl_lock();
  #line 3131 
  hclgevf_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_DOWN_CLIENT);
  #line 3132 
  rtnl_unlock();
  #line 3135 
  hclgevf_send_mbx_msg(hdev,(unsigned short)5,(unsigned short)3,port_base_vlan_info,(unsigned char)((int)data_size),(_Bool)0,(u8 *)0U,(unsigned short)0);
  #line 3140 
  if ((unsigned int)state == 0U) 
                                 #line 3141 
                                 nic->port_base_vlan_state = HNAE3_PORT_BASE_VLAN_DISABLE; else 
                                                                    #line 3143 
                                                                    nic->port_base_vlan_state = HNAE3_PORT_BASE_VLAN_ENABLE;
  #line 3145 
  rtnl_lock();
  #line 3146 
  hclgevf_notify_client(hdev,(enum hnae3_reset_notify_type)HNAE3_UP_CLIENT);
  #line 3147 
  rtnl_unlock();
  #line 3148 
  return;
}

#line 3150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static struct hnae3_ae_ops hclgevf_ops = {.init_ae_dev = & hclgevf_init_ae_dev, .uninit_ae_dev = & hclgevf_uninit_ae_dev, .flr_prepare = & hclgevf_flr_prepare, .flr_done = & hclgevf_flr_done, .init_client_instance = & hclgevf_init_client_instance, .uninit_client_instance = & hclgevf_uninit_client_instance, .start = & hclgevf_ae_start, .stop = & hclgevf_ae_stop, .client_start = & hclgevf_client_start, .client_stop = & hclgevf_client_stop, .get_status = & hclgevf_get_status, .get_ksettings_an_result = & hclgevf_get_ksettings_an_result, .get_media_type = & hclgevf_get_media_type, .set_promisc_mode = & hclgevf_set_promisc_mode, .set_mtu = & hclgevf_set_mtu, .get_mac_addr = & hclgevf_get_mac_addr, .set_mac_addr = & hclgevf_set_mac_addr, .add_uc_addr = & hclgevf_add_uc_addr, .rm_uc_addr = & hclgevf_rm_uc_addr, .add_mc_addr = & hclgevf_add_mc_addr, .rm_mc_addr = & hclgevf_rm_mc_addr, .update_stats = & hclgevf_update_stats, .get_stats = & hclgevf_get_stats, .get_strings = & hclgevf_get_strings, .get_sset_count = & hclgevf_get_sset_count, .get_regs = & hclgevf_get_regs, .get_regs_len = & hclgevf_get_regs_len, .get_rss_key_size = & hclgevf_get_rss_key_size, .get_rss_indir_size = & hclgevf_get_rss_indir_size, .get_rss = & hclgevf_get_rss, .set_rss = & hclgevf_set_rss, .set_rss_tuple = & hclgevf_set_rss_tuple, .get_rss_tuple = & hclgevf_get_rss_tuple, .get_tc_size = & hclgevf_get_tc_size, .get_vector = & hclgevf_get_vector, .put_vector = & hclgevf_put_vector, .map_ring_to_vector = & hclgevf_map_ring_to_vector, .unmap_ring_from_vector = & hclgevf_unmap_ring_from_vector, .reset_queue = & hclgevf_reset_tqp, .get_fw_version = & hclgevf_get_fw_version, .set_vlan_filter = & hclgevf_set_vlan_filter, .enable_hw_strip_rxvtag = & hclgevf_en_hw_strip_rxvtag, .reset_event = & hclgevf_reset_event, .set_default_reset_request = & hclgevf_set_def_reset_request, .get_channels = & hclgevf_get_channels, .get_tqps_and_rss_info = & hclgevf_get_tqps_and_rss_info, .set_channels = & hclgevf_set_channels, .get_link_mode = & hclgevf_get_link_mode, .get_hw_reset_stat = & hclgevf_get_hw_reset_stat, .ae_dev_resetting = & hclgevf_ae_dev_resetting, .ae_dev_reset_cnt = & hclgevf_ae_dev_reset_cnt, .set_gro_en = & hclgevf_gro_en, .get_global_queue_id = & hclgevf_get_qid_global, .set_timer_task = & hclgevf_set_timer_task};
#line 3207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static struct hnae3_ae_algo ae_algovf = {.ops = & hclgevf_ops, .pdev_id_table = (struct pci_device_id *)(& ae_algovf_pci_tbl)};
#line 3212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static int hclgevf_init(void)
{
  #line 3214 
  printk((char *)"\001",(char *)"hclgevf");
  #line 3216 
  hnae3_register_ae_algo(& ae_algovf);
  #line 3218 
  return 0;
}

#line 3221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c"
static void hclgevf_exit(void)
{
  #line 3223 
  hnae3_unregister_ae_algo(& ae_algovf);
  #line 3224 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
#line 93 
int emg_del_timer_sync(struct timer_list *arg0);
#line 94 
#line 94 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 95 
#line 95 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 96 
#line 96 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 97 
#line 97 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
enum irqreturn emg_wrapper_hclgevf_misc_irq_handle(int arg0, void *arg1)
{
  #line 102 
  return hclgevf_misc_irq_handle(arg0,arg1);
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
void emg_hclgevf_exit(void)
{
  #line 107 
  hclgevf_exit();
  #line 108 
  return;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
int emg_hclgevf_init(void)
{
  #line 111 
  return hclgevf_init();
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 132 
  ldv_set_bit(nr,addr);
  #line 133 
  return;
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 139 
  ldv_clear_bit(nr,addr);
  #line 140 
  return;
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 146 
  ldv_init_list_head(list);
  #line 147 
  return;
}

#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 167 
  return ldv_find_first_bit(addr,size);
}

#line 408  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 411 
  return ldv_kcalloc(n,size,flags);
}

#line 673  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 676 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 680  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 684 
  return emg_schedule_work(work);
}

#line 688  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 692 
  return emg_mod_timer(timer,expires);
}

#line 696  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags)
{
  #line 699 
  return ldv_devm_kzalloc(size,flags);
}

#line 703  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 707 
  return emg_del_timer_sync(timer);
}

#line 711  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 715 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 719  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 723 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_cmd.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_cmd.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_788 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set(v,i);
  #line 46 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 28 
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 669  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_cmd.i.aux"
static void cif_spin_lock_lock_of_hclgevf_cmq_ring(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 651  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_cmd.i.aux"
static void cif_spin_lock_bh_lock_of_hclgevf_cmq_ring(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 678  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_cmd.i.aux"
static void cif_spin_unlock_lock_of_hclgevf_cmq_ring(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 660  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_cmd.i.aux"
static void cif_spin_unlock_bh_lock_of_hclgevf_cmq_ring(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
__inline static u32 hclgevf_read_reg_0(u8 *base, u32 reg)
{
  #line 264 
  union __anonunion___u_1426 __u;
  #line 263 
  __read_once_size((void *)(& base),(void *)(& __u.__c),8);
  #line 263 
  u8 *reg_addr = (__u.__val);
  #line 265 
  return readl((void *)(reg_addr + (unsigned long)reg));
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.c"
static int hclgevf_ring_space(struct hclgevf_cmq_ring *ring)
{
  #line 23 
  int used;
  #line 21 
  int ntc = ring->next_to_clean;
  #line 22 
  int ntu = ring->next_to_use;
  #line 25 
  used = ((ntu - ntc) + (int)ring->desc_num) % (int)ring->desc_num;
  #line 27 
  return ((int)ring->desc_num - used) + -1;
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.c"
static int hclgevf_is_valid_csq_clean_head(struct hclgevf_cmq_ring *ring, int head)
{
  #line 33 
  int ntu = ring->next_to_use;
  #line 34 
  int ntc = ring->next_to_clean;
  #line 36 
  if (ntu > ntc) 
                 #line 37 
                 return (head >= ntc && head <= ntu) != 0;
  #line 39 
  return (head >= ntc || head <= ntu) != 0;
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.c"
static int hclgevf_cmd_csq_clean(struct hclgevf_hw *hw)
{
  #line 44 
  void *__mptr;
  #line 46 
  int clean;
  #line 47 
  u32 head;
  #line 44 
  __mptr = (void *)hw;
  #line 44 
  struct hclgevf_dev *hdev = ((struct hclgevf_dev *)(__mptr + 18446744073709551600U));
  #line 45 
  struct hclgevf_cmq_ring *csq = & hw->cmq.csq;
  #line 49 
  head = hclgevf_read_reg_0((u8 *)hw->io_base,159764U);
  #line 50 
  ldv_inline_asm();
  #line 52 
  if (hclgevf_is_valid_csq_clean_head(csq,(int)head) == 0) {
    #line 53 
    _dev_warn(& (hdev->pdev)->dev,(char *)"wrong cmd head (%u, %d-%d)\n",head,csq->next_to_use,csq->next_to_clean);
    #line 55 
    _dev_warn(& (hdev->pdev)->dev,(char *)"Disabling any further commands to IMP firmware\n");
    #line 57 
    cif_set_bit_0(10L,& hdev->state);
    #line 58 
    return -5;
  }
  #line 61 
  clean = (int)(((head - (unsigned int)csq->next_to_clean) + (unsigned int)csq->desc_num) % (unsigned int)csq->desc_num);
  #line 62 
  csq->next_to_clean = (int)head;
  #line 63 
  return clean;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.c"
static bool hclgevf_cmd_csq_done(struct hclgevf_hw *hw)
{
  #line 68 
  u32 head;
  #line 70 
  head = hclgevf_read_reg_0((u8 *)hw->io_base,159764U);
  #line 72 
  return (_Bool)((unsigned int)hw->cmq.csq.next_to_use == head);
}

#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.c"
static bool hclgevf_is_special_opcode(u16 opcode)
{
  #line 78 
  int i;
  #line 77 
  u16 spec_opcode[3U] = {(unsigned short)48U, (unsigned short)49U, (unsigned short)50U};
  #line 80 
  i = 0;
  #line 80 
  while ((unsigned int)i <= 2U) {
    #line 81 
    if ((int)spec_opcode[i] == (int)opcode) 
                                            #line 82 
                                            return (_Bool)1;
    #line 80 
    i ++;
  }
  #line 85 
  return (_Bool)0;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.c"
static void hclgevf_cmd_config_regs(struct hclgevf_cmq_ring *ring)
{
  #line 92 
  u32 reg_val;
  #line 90 
  struct hclgevf_dev *hdev = ring->dev;
  #line 91 
  struct hclgevf_hw *hw = & hdev->hw;
  #line 94 
  if ((unsigned int)ring->flag == 1U) {
    #line 95 
    reg_val = (unsigned int)ring->desc_dma_addr;
    #line 96 
    hclgevf_write_reg(hw->io_base,159744U,reg_val);
    #line 97 
    reg_val = (unsigned int)(ring->desc_dma_addr >> 32);
    #line 98 
    hclgevf_write_reg(hw->io_base,159748U,reg_val);
    #line 100 
    reg_val = hclgevf_read_reg_0((u8 *)hw->io_base,159752U);
    #line 101 
    reg_val &= 65536U;
    #line 102 
    reg_val = (unsigned int)((int)ring->desc_num >> 3) | reg_val;
    #line 103 
    hclgevf_write_reg(hw->io_base,159752U,reg_val);
    #line 105 
    hclgevf_write_reg(hw->io_base,159764U,0U);
    #line 106 
    hclgevf_write_reg(hw->io_base,159760U,0U);
  }
  else {
    #line 108 
    reg_val = (unsigned int)ring->desc_dma_addr;
    #line 109 
    hclgevf_write_reg(hw->io_base,159768U,reg_val);
    #line 110 
    reg_val = (unsigned int)(ring->desc_dma_addr >> 32);
    #line 111 
    hclgevf_write_reg(hw->io_base,159772U,reg_val);
    #line 113 
    reg_val = (unsigned int)((int)ring->desc_num >> 3);
    #line 114 
    hclgevf_write_reg(hw->io_base,159776U,reg_val);
    #line 116 
    hclgevf_write_reg(hw->io_base,159784U,0U);
    #line 117 
    hclgevf_write_reg(hw->io_base,159780U,0U);
  }
  #line 119 
  return;
}

#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.c"
static void hclgevf_cmd_init_regs(struct hclgevf_hw *hw)
{
  #line 123 
  hclgevf_cmd_config_regs(& hw->cmq.csq);
  #line 124 
  hclgevf_cmd_config_regs(& hw->cmq.crq);
  #line 125 
  return;
}

#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.c"
static int hclgevf_alloc_cmd_desc(struct hclgevf_cmq_ring *ring)
{
  #line 129 
  int size = (int)((unsigned int)ring->desc_num * 32U);
  #line 131 
  ring->desc = (struct hclgevf_desc *)dma_alloc_coherent(& ((ring->dev)->pdev)->dev,(unsigned long)size,& ring->desc_dma_addr,3264U);
  #line 133 
  if (ring->desc == (struct hclgevf_desc *)0) 
                                              #line 134 
                                              return -12;
  #line 136 
  return 0;
}

#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.c"
static void hclgevf_free_cmd_desc(struct hclgevf_cmq_ring *ring)
{
  #line 141 
  int size = (int)((unsigned int)ring->desc_num * 32U);
  #line 143 
  if (ring->desc != (struct hclgevf_desc *)0) {
    #line 144 
    dma_free_coherent(& ((ring->dev)->pdev)->dev,(unsigned long)size,(void *)ring->desc,ring->desc_dma_addr);
    #line 146 
    ring->desc = (struct hclgevf_desc *)0;
  }
  #line 148 
  return;
}

#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.c"
static int hclgevf_alloc_cmd_queue(struct hclgevf_dev *hdev, int ring_type)
{
  #line 153 
  struct hclgevf_cmq_ring *tmp;
  #line 155 
  int ret;
  #line 152 
  struct hclgevf_hw *hw = & hdev->hw;
  #line 153 
  if (ring_type == 1) 
                      #line 153 
                      tmp = & hw->cmq.csq; else 
                                                #line 153 
                                                tmp = & hw->cmq.crq;
  #line 153 
  struct hclgevf_cmq_ring *ring = tmp;
  #line 157 
  ring->dev = hdev;
  #line 158 
  ring->flag = (unsigned char)ring_type;
  #line 161 
  ret = hclgevf_alloc_cmd_desc(ring);
  #line 162 
  if (ret != 0) {
    #line 163 
    char *tmp_0;
    #line 163 
    if (ring_type == 1) 
                        #line 163 
                        tmp_0 = (char *)"CSQ"; else 
                                                    #line 163 
                                                    tmp_0 = (char *)"CRQ";
    #line 163 
    ;
    #line 163 
    ;
    #line 163 
    _dev_err(& (hdev->pdev)->dev,(char *)"failed(%d) to alloc %s desc\n",ret,tmp_0);
  }
  #line 166 
  return ret;
}

#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.c"
void hclgevf_cmd_setup_basic_desc(struct hclgevf_desc *desc, enum hclgevf_opcode_type opcode, bool is_read)
{
  #line 172 
  memset((void *)desc,0,32UL);
  #line 173 
  desc->opcode = (unsigned short)opcode;
  #line 174 
  desc->flag = (unsigned short)17U;
  #line 176 
  if ((int)is_read != 0) 
                         #line 177 
                         desc->flag = (unsigned short)((unsigned int)desc->flag | 8U); else 
                                                                    #line 179 
                                                                    desc->flag = (unsigned short)((unsigned int)desc->flag & 65527U);
  #line 180 
  return;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.c"
static int hclgevf_cmd_convert_err_code(u16 desc_ret)
{
  #line 184 
  switch ((int)desc_ret) {
    #line 185 
    case 0: 
            #line 185 
    ;
    #line 186 
    return 0;
    #line 187 
    case 1: 
            #line 187 
    ;
    #line 188 
    return -1;
    #line 189 
    case 2: 
            #line 189 
    ;
    #line 190 
    return -95;
    #line 191 
    case 3: 
            #line 191 
    ;
    #line 192 
    return -54;
    #line 193 
    case 4: 
            #line 193 
    ;
    #line 194 
    return -63;
    #line 195 
    case 5: 
            #line 195 
    ;
    #line 196 
    return -15;
    #line 197 
    case 6: 
            #line 197 
    ;
    #line 198 
    return -22;
    #line 199 
    case 7: 
            #line 199 
    ;
    #line 200 
    return -34;
    #line 201 
    case 8: 
            #line 201 
    ;
    #line 202 
    return -62;
    #line 203 
    case 9: 
            #line 203 
    ;
    #line 204 
    return -67;
    #line 205 
    case 10: 
             #line 205 
    ;
    #line 206 
    return -6;
    #line 207 
    case 11: 
             #line 207 
    ;
    #line 208 
    return -53;
    #line 209 
    default: 
             #line 209 
    ;
    #line 210 
    return -5;
  }
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.c"
int hclgevf_cmd_send(struct hclgevf_hw *hw, struct hclgevf_desc *desc, int num)
{
  #line 226 
  struct hclgevf_desc *desc_to_use;
  #line 231 
  u16 retval;
  #line 232 
  u16 opcode;
  #line 233 
  int ntc;
  #line 224 
  struct hclgevf_dev *hdev = (struct hclgevf_dev *)hw->hdev;
  #line 225 
  struct hclgevf_cmq_ring *csq = & hw->cmq.csq;
  #line 227 
  bool complete = (_Bool)0;
  #line 228 
  u32 timeout = 0U;
  #line 229 
  int handle = 0;
  #line 230 
  int status = 0;
  #line 235 
  cif_spin_lock_bh_lock_of_hclgevf_cmq_ring(& hw->cmq.csq.lock);
  #line 237 
  if ((int)test_bit(10L,& hdev->state) != 0) {
    #line 238 
    cif_spin_unlock_bh_lock_of_hclgevf_cmq_ring(& hw->cmq.csq.lock);
    #line 239 
    return -16;
  }
  #line 242 
  ;
  #line 242 
  if (hclgevf_ring_space(& hw->cmq.csq) < num) {
    #line 246 
    csq->next_to_clean = (int)hclgevf_read_reg_0((u8 *)hw->io_base,159764U);
    #line 248 
    cif_spin_unlock_bh_lock_of_hclgevf_cmq_ring(& hw->cmq.csq.lock);
    #line 249 
    return -16;
  }
  #line 255 
  ntc = hw->cmq.csq.next_to_use;
  #line 256 
  opcode = desc->opcode;
  #line 257 
  while (handle < num) {
    #line 258 
    desc_to_use = hw->cmq.csq.desc + (unsigned long)hw->cmq.csq.next_to_use;
    #line 259 
    *desc_to_use = *(desc + (unsigned long)handle);
    #line 260 
    (hw->cmq.csq.next_to_use) ++;
    #line 261 
    if (hw->cmq.csq.next_to_use == (int)hw->cmq.csq.desc_num) 
                                                              #line 262 
                                                              hw->cmq.csq.next_to_use = 0;
    #line 263 
    handle ++;
  }
  #line 267 
  hclgevf_write_reg(hw->io_base,159760U,(unsigned int)hw->cmq.csq.next_to_use);
  #line 273 
  if (((unsigned long)desc->flag & 16UL) != 0UL) 
    #line 274 
    while (1) {
      {
        #line 275 
        if ((int)hclgevf_cmd_csq_done(hw) != 0) 
                                                #line 276 
                                                break;
        #line 277 
        __const_udelay(4295UL);
        #line 278 
        timeout ++;
      }
      #line 279 
      if (! ((unsigned int)hw->cmq.tx_timeout > timeout)) 
                                                          #line 274 
                                                          break;
    }
  #line 282 
  if ((int)hclgevf_cmd_csq_done(hw) != 0) {
    #line 283 
    complete = (_Bool)1;
    #line 284 
    handle = 0;
    #line 286 
    while (handle < num) {
      #line 291 
      int tmp_4;
      #line 288 
      desc_to_use = hw->cmq.csq.desc + (unsigned long)ntc;
      #line 289 
      *(desc + (unsigned long)handle) = *desc_to_use;
      #line 291 
      if (hclgevf_is_special_opcode((unsigned short)((int)opcode))) 
                                                                    #line 291 
                                                                    tmp_4 = 0; else 
                                                                    #line 291 
                                                                    tmp_4 = 1;
      #line 291 
      if ((long)tmp_4 != 0L) 
                             #line 292 
                             retval = (desc + (unsigned long)handle)->retval; else 
                                                                    #line 294 
                                                                    retval = desc->retval;
      #line 296 
      status = hclgevf_cmd_convert_err_code((unsigned short)((int)retval));
      #line 297 
      hw->cmq.last_status = (enum hclgevf_cmd_status)retval;
      #line 298 
      ntc ++;
      #line 299 
      handle ++;
      #line 300 
      if ((int)hw->cmq.csq.desc_num == ntc) 
                                            #line 301 
                                            ntc = 0;
    }
  }
  #line 305 
  if (! complete) 
                  #line 306 
                  status = -52;
  #line 309 
  handle = hclgevf_cmd_csq_clean(hw);
  #line 310 
  if (handle != num) 
                     #line 311 
                     _dev_warn(& (hdev->pdev)->dev,(char *)"cleaned %d, need to clean %d\n",handle,num);
  #line 314 
  cif_spin_unlock_bh_lock_of_hclgevf_cmq_ring(& hw->cmq.csq.lock);
  #line 316 
  return status;
}

#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.c"
static int hclgevf_cmd_query_firmware_version(struct hclgevf_hw *hw, u32 *version)
{
  #line 322 
  struct hclgevf_query_version_cmd *resp;
  #line 323 
  struct hclgevf_desc desc;
  #line 324 
  int status;
  #line 326 
  resp = (struct hclgevf_query_version_cmd *)(& desc.data);
  #line 328 
  hclgevf_cmd_setup_basic_desc(& desc,(enum hclgevf_opcode_type)HCLGEVF_OPC_QUERY_FW_VER,(_Bool)1);
  #line 329 
  status = hclgevf_cmd_send(hw,& desc,1);
  #line 330 
  if (status == 0) 
                   #line 331 
                   *version = resp->firmware;
  #line 333 
  return status;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.c"
int hclgevf_cmd_queue_init(struct hclgevf_dev *hdev)
{
  #line 338 
  int ret;
  #line 341 
  spinlock_check(& hdev->hw.cmq.csq.lock);
  {
    #line 341 
    struct lock_class_key __key;
    #line 341 
    __raw_spin_lock_init(& hdev->hw.cmq.csq.lock.__anonCompField_spinlock_25.rlock,(char *)"&(&hdev->hw.cmq.csq.lock)->rlock",& __key);
  }
  #line 342 
  spinlock_check(& hdev->hw.cmq.crq.lock);
  {
    #line 342 
    struct lock_class_key __key_0;
    #line 342 
    __raw_spin_lock_init(& hdev->hw.cmq.crq.lock.__anonCompField_spinlock_25.rlock,(char *)"&(&hdev->hw.cmq.crq.lock)->rlock",& __key_0);
  }
  #line 344 
  hdev->hw.cmq.tx_timeout = (unsigned short)30000U;
  #line 345 
  hdev->hw.cmq.csq.desc_num = (unsigned short)1024U;
  #line 346 
  hdev->hw.cmq.crq.desc_num = (unsigned short)1024U;
  #line 348 
  ret = hclgevf_alloc_cmd_queue(hdev,1);
  #line 349 
  if (ret != 0) {
    #line 350 
    _dev_err(& (hdev->pdev)->dev,(char *)"CSQ ring setup error %d\n",ret);
    #line 352 
    return ret;
  }
  #line 355 
  ret = hclgevf_alloc_cmd_queue(hdev,0);
  #line 356 
  if (ret != 0) {
    #line 357 
    _dev_err(& (hdev->pdev)->dev,(char *)"CRQ ring setup error %d\n",ret);
    #line 359 
    goto err_csq;
  }
  #line 362 
  return 0;
  #line 363 
  err_csq: 
           #line 363 
  ;
  #line 364 
  hclgevf_free_cmd_desc(& hdev->hw.cmq.csq);
  #line 365 
  return ret;
}

#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.c"
int hclgevf_cmd_init(struct hclgevf_dev *hdev)
{
  #line 370 
  u32 version;
  #line 371 
  int ret;
  #line 373 
  cif_spin_lock_bh_lock_of_hclgevf_cmq_ring(& hdev->hw.cmq.csq.lock);
  #line 374 
  cif_spin_lock_lock_of_hclgevf_cmq_ring(& hdev->hw.cmq.crq.lock);
  #line 377 
  hdev->arq.hdev = hdev;
  #line 378 
  hdev->arq.head = 0U;
  #line 379 
  hdev->arq.tail = 0U;
  #line 380 
  atomic_set(& hdev->arq.count,0);
  #line 381 
  hdev->hw.cmq.csq.next_to_clean = 0;
  #line 382 
  hdev->hw.cmq.csq.next_to_use = 0;
  #line 383 
  hdev->hw.cmq.crq.next_to_clean = 0;
  #line 384 
  hdev->hw.cmq.crq.next_to_use = 0;
  #line 386 
  hclgevf_cmd_init_regs(& hdev->hw);
  #line 388 
  cif_spin_unlock_lock_of_hclgevf_cmq_ring(& hdev->hw.cmq.crq.lock);
  #line 389 
  cif_spin_unlock_bh_lock_of_hclgevf_cmq_ring(& hdev->hw.cmq.csq.lock);
  #line 391 
  cif_clear_bit_0(10L,& hdev->state);
  #line 396 
  if ((int)hclgevf_is_reset_pending(hdev) != 0) {
    #line 397 
    ret = -16;
    #line 398 
    goto err_cmd_init;
  }
  #line 402 
  ret = hclgevf_cmd_query_firmware_version(& hdev->hw,& version);
  #line 403 
  if (ret != 0) {
    #line 404 
    _dev_err(& (hdev->pdev)->dev,(char *)"failed(%d) to query firmware version\n",ret);
    #line 406 
    goto err_cmd_init;
  }
  #line 408 
  hdev->fw_version = version;
  #line 410 
  _dev_info(& (hdev->pdev)->dev,(char *)"The firmware version is %lu.%lu.%lu.%lu\n",(unsigned long)(version >> 24),((unsigned long)version >> 16) & 255UL,((unsigned long)version >> 8) & 255UL,(unsigned long)version & 255UL);
  #line 420 
  return 0;
  #line 422 
  err_cmd_init: 
                #line 422 
  ;
  #line 423 
  cif_set_bit_0(10L,& hdev->state);
  #line 425 
  return ret;
}

#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.c"
static void hclgevf_cmd_uninit_regs(struct hclgevf_hw *hw)
{
  #line 430 
  hclgevf_write_reg(hw->io_base,159744U,0U);
  #line 431 
  hclgevf_write_reg(hw->io_base,159748U,0U);
  #line 432 
  hclgevf_write_reg(hw->io_base,159752U,0U);
  #line 433 
  hclgevf_write_reg(hw->io_base,159764U,0U);
  #line 434 
  hclgevf_write_reg(hw->io_base,159760U,0U);
  #line 435 
  hclgevf_write_reg(hw->io_base,159768U,0U);
  #line 436 
  hclgevf_write_reg(hw->io_base,159772U,0U);
  #line 437 
  hclgevf_write_reg(hw->io_base,159776U,0U);
  #line 438 
  hclgevf_write_reg(hw->io_base,159784U,0U);
  #line 439 
  hclgevf_write_reg(hw->io_base,159780U,0U);
  #line 440 
  return;
}

#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.c"
void hclgevf_cmd_uninit(struct hclgevf_dev *hdev)
{
  #line 444 
  cif_spin_lock_bh_lock_of_hclgevf_cmq_ring(& hdev->hw.cmq.csq.lock);
  #line 445 
  cif_spin_lock_lock_of_hclgevf_cmq_ring(& hdev->hw.cmq.crq.lock);
  #line 446 
  cif_clear_bit_0(10L,& hdev->state);
  #line 447 
  hclgevf_cmd_uninit_regs(& hdev->hw);
  #line 448 
  cif_spin_unlock_lock_of_hclgevf_cmq_ring(& hdev->hw.cmq.crq.lock);
  #line 449 
  cif_spin_unlock_bh_lock_of_hclgevf_cmq_ring(& hdev->hw.cmq.csq.lock);
  #line 450 
  hclgevf_free_cmd_desc(& hdev->hw.cmq.csq);
  #line 451 
  hclgevf_free_cmd_desc(& hdev->hw.cmq.crq);
  #line 452 
  return;
}

#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_cmd.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 117 
  ldv_set_bit(nr,addr);
  #line 118 
  return;
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_cmd.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 124 
  ldv_clear_bit(nr,addr);
  #line 125 
  return;
}

#line 651  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_cmd.i.aux"
static void cif_spin_lock_bh_lock_of_hclgevf_cmq_ring(spinlock_t *lock)
{
  #line 654 
  ldv_spin_model_lock((char *)"lock_of_hclgevf_cmq_ring");
  #line 656 
  spin_lock_bh(lock);
  #line 657 
  return;
}

#line 660  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_cmd.i.aux"
static void cif_spin_unlock_bh_lock_of_hclgevf_cmq_ring(spinlock_t *lock)
{
  #line 663 
  ldv_spin_model_unlock((char *)"lock_of_hclgevf_cmq_ring");
  #line 665 
  spin_unlock_bh(lock);
  #line 666 
  return;
}

#line 669  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_cmd.i.aux"
static void cif_spin_lock_lock_of_hclgevf_cmq_ring(spinlock_t *lock)
{
  #line 672 
  ldv_spin_model_lock((char *)"lock_of_hclgevf_cmq_ring");
  #line 674 
  spin_lock(lock);
  #line 675 
  return;
}

#line 678  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_cmd.i.aux"
static void cif_spin_unlock_lock_of_hclgevf_cmq_ring(spinlock_t *lock)
{
  #line 681 
  ldv_spin_model_unlock((char *)"lock_of_hclgevf_cmq_ring");
  #line 683 
  spin_unlock(lock);
  #line 684 
  return;
}

#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_mbx.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 8 
#line 8 
void ldv_atomic_dec(atomic_t *v);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_mbx.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_1504 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 237 
#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_mbx.i.aux"
static void atomic_inc(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_mbx.i.aux"
static void atomic_dec(atomic_t *v);
#line 26 
#line 651 
static void cif_mutex_lock_mbx_mutex_of_hclgevf_mbx_resp_status(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_mbx.i.aux"
static void cif_mutex_unlock_mbx_mutex_of_hclgevf_mbx_resp_status(struct mutex *lock);
#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_cmd.h"
__inline static u32 hclgevf_read_reg_1(u8 *base, u32 reg)
{
  #line 264 
  union __anonunion___u_2154 __u;
  #line 263 
  __read_once_size((void *)(& base),(void *)(& __u.__c),8);
  #line 263 
  u8 *reg_addr = (__u.__val);
  #line 265 
  return readl((void *)(reg_addr + (unsigned long)reg));
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_mbx.c"
static void hclgevf_reset_mbx_resp_status(struct hclgevf_dev *hdev)
{
  #line 13 
  hdev->mbx_resp.received_resp = (_Bool)0;
  #line 14 
  hdev->mbx_resp.origin_mbx_msg = 0U;
  #line 15 
  hdev->mbx_resp.resp_status = 0;
  #line 16 
  memset((void *)(& hdev->mbx_resp.additional_info),0,8UL);
  #line 17 
  return;
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_mbx.c"
static int hclgevf_get_mbx_resp(struct hclgevf_dev *hdev, u16 code0, u16 code1, u8 *resp_data, u16 resp_len)
{
  #line 30 
  struct hclgevf_mbx_resp_status *mbx_resp;
  #line 31 
  u16 r_code0;
  #line 31 
  u16 r_code1;
  #line 32 
  int i = 0;
  #line 34 
  if ((unsigned int)resp_len > 8U) {
    #line 35 
    _dev_err(& (hdev->pdev)->dev,(char *)"VF mbx response len(=%u) exceeds maximum(=%u)\n",(int)resp_len,8U);
    #line 39 
    return -22;
  }
  #line 42 
  while (! hdev->mbx_resp.received_resp && i <= 499) {
    #line 43 
    if ((int)test_bit(10L,& hdev->state) != 0) 
                                               #line 44 
                                               return -5;
    #line 46 
    usleep_range(1000UL,2000UL);
    #line 47 
    i ++;
  }
  #line 50 
  if (i > 499) {
    #line 51 
    _dev_err(& (hdev->pdev)->dev,(char *)"VF could not get mbx(%u,%u) resp(=%d) from PF in %d tries\n",(int)code0,(int)code1,(int)hdev->mbx_resp.received_resp,i);
    #line 54 
    return -5;
  }
  #line 57 
  mbx_resp = & hdev->mbx_resp;
  #line 58 
  r_code0 = (unsigned short)(mbx_resp->origin_mbx_msg >> 16);
  #line 59 
  r_code1 = (unsigned short)((unsigned int)((unsigned short)mbx_resp->origin_mbx_msg) & 255U);
  #line 61 
  if (mbx_resp->resp_status != 0) 
                                  #line 62 
                                  return mbx_resp->resp_status;
  #line 64 
  if (resp_data != (u8 *)0U) 
                             #line 65 
                             memcpy((void *)resp_data,(void *)(& mbx_resp->additional_info[0]),(unsigned long)resp_len);
  #line 67 
  hclgevf_reset_mbx_resp_status(hdev);
  #line 69 
  if (((int)r_code0 != (int)code0 || (int)r_code1 != (int)code1) || mbx_resp->resp_status != 0) {
    #line 70 
    _dev_err(& (hdev->pdev)->dev,(char *)"VF could not match resp code(code0=%u,code1=%u), %d\n",(int)code0,(int)code1,mbx_resp->resp_status);
    #line 73 
    _dev_err(& (hdev->pdev)->dev,(char *)"VF could not match resp r_code(r_code0=%u,r_code1=%u)\n",(int)r_code0,(int)r_code1);
    #line 76 
    return -5;
  }
  #line 79 
  return 0;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_mbx.c"
int hclgevf_send_mbx_msg(struct hclgevf_dev *hdev, u16 code, u16 subcode, u8 *msg_data, u8 msg_len, bool need_resp, u8 *resp_data, u16 resp_len)
{
  #line 86 
  struct hclge_mbx_vf_to_pf_cmd *req;
  #line 87 
  struct hclgevf_desc desc;
  #line 88 
  int status;
  #line 101 
  unsigned int tmp;
  #line 90 
  req = (struct hclge_mbx_vf_to_pf_cmd *)(& desc.data);
  #line 93 
  if ((unsigned int)msg_len > 14U) {
    #line 94 
    _dev_err(& (hdev->pdev)->dev,(char *)"VF send mbx msg fail, msg len %d exceeds max len %d\n",(int)msg_len,16);
    #line 97 
    return -22;
  }
  #line 100 
  hclgevf_cmd_setup_basic_desc(& desc,(enum hclgevf_opcode_type)HCLGEVF_OPC_MBX_VF_TO_PF,(_Bool)0);
  #line 101 
  if ((int)need_resp != 0) 
                           #line 101 
                           tmp = 1U; else 
                                          #line 101 
                                          tmp = 254U;
  #line 101 
  req->mbx_need_resp = (unsigned char)((unsigned int)req->mbx_need_resp | tmp);
  #line 103 
  req->msg[0] = (unsigned char)code;
  #line 104 
  req->msg[1] = (unsigned char)subcode;
  #line 105 
  if (msg_data != (u8 *)0U) 
                            #line 106 
                            memcpy((void *)(& req->msg[2]),(void *)msg_data,(unsigned long)msg_len);
  #line 109 
  if ((int)need_resp != 0) {
    #line 110 
    cif_mutex_lock_mbx_mutex_of_hclgevf_mbx_resp_status(& hdev->mbx_resp.mbx_mutex);
    #line 111 
    hclgevf_reset_mbx_resp_status(hdev);
    #line 112 
    status = hclgevf_cmd_send(& hdev->hw,& desc,1);
    #line 113 
    if (status != 0) {
      #line 114 
      _dev_err(& (hdev->pdev)->dev,(char *)"VF failed(=%d) to send mbx message to PF\n",status);
      #line 117 
      cif_mutex_unlock_mbx_mutex_of_hclgevf_mbx_resp_status(& hdev->mbx_resp.mbx_mutex);
      #line 118 
      return status;
    }
    #line 121 
    status = hclgevf_get_mbx_resp(hdev,(unsigned short)((int)code),(unsigned short)((int)subcode),resp_data,(unsigned short)((int)resp_len));
    #line 123 
    cif_mutex_unlock_mbx_mutex_of_hclgevf_mbx_resp_status(& hdev->mbx_resp.mbx_mutex);
  }
  else {
    #line 126 
    status = hclgevf_cmd_send(& hdev->hw,& desc,1);
    #line 127 
    if (status != 0) {
      #line 128 
      _dev_err(& (hdev->pdev)->dev,(char *)"VF failed(=%d) to send mbx message to PF\n",status);
      #line 131 
      return status;
    }
  }
  #line 135 
  return status;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_mbx.c"
static bool hclgevf_cmd_crq_empty(struct hclgevf_hw *hw)
{
  #line 140 
  u32 tail = hclgevf_read_reg_1((u8 *)hw->io_base,159780U);
  #line 142 
  return (_Bool)((unsigned int)hw->cmq.crq.next_to_use == tail);
}

#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_mbx.c"
void hclgevf_mbx_handler(struct hclgevf_dev *hdev)
{
  #line 147 
  struct hclgevf_mbx_resp_status *resp;
  #line 148 
  struct hclge_mbx_pf_to_vf_cmd *req;
  #line 149 
  struct hclgevf_cmq_ring *crq;
  #line 150 
  struct hclgevf_desc *desc;
  #line 151 
  u16 *msg_q;
  #line 152 
  u16 flag;
  #line 153 
  u8 *temp;
  #line 154 
  int i;
  #line 156 
  resp = & hdev->mbx_resp;
  #line 157 
  crq = & hdev->hw.cmq.crq;
  #line 159 
  while (1) {
    #line 159 
    if (hclgevf_cmd_crq_empty(& hdev->hw)) 
                                           #line 159 
                                           break;
    {
      #line 160 
      if ((int)test_bit(10L,& hdev->state) != 0) {
        #line 161 
        _dev_info(& (hdev->pdev)->dev,(char *)"vf crq need init\n");
        #line 162 
        return;
      }
      #line 165 
      desc = crq->desc + (unsigned long)crq->next_to_use;
      #line 166 
      req = (struct hclge_mbx_pf_to_vf_cmd *)(& desc->data);
      #line 168 
      flag = (crq->desc + (unsigned long)crq->next_to_use)->flag;
      #line 169 
      if ((long)(((int)flag & 2) == 0) != 0L) {
        #line 170 
        _dev_warn(& (hdev->pdev)->dev,(char *)"dropped invalid mailbox message, code = %u\n",(int)req->msg[0]);
        #line 175 
        (crq->desc + (unsigned long)crq->next_to_use)->flag = (unsigned short)0U;
        #line 176 
        crq->next_to_use = (crq->next_to_use + 1) % (int)crq->desc_num;
        #line 177 
        continue;
      }
      #line 186 
      switch ((int)req->msg[0]) {
        #line 187 
        case 17: 
                 #line 187 
        ;
        #line 188 
        if ((int)resp->received_resp != 0) 
                                           #line 189 
                                           _dev_warn(& (hdev->pdev)->dev,(char *)"VF mbx resp flag not clear(%u)\n",(int)req->msg[1]);
        #line 192 
        resp->received_resp = (_Bool)1;
        #line 194 
        resp->origin_mbx_msg = (unsigned int)((int)req->msg[1] << 16);
        #line 195 
        resp->origin_mbx_msg |= (unsigned int)req->msg[2];
        #line 196 
        resp->resp_status = (int)req->msg[3];
        #line 198 
        temp = (u8 *)(& req->msg[4]);
        #line 199 
        i = 0;
        #line 199 
        while ((unsigned int)i <= 7U) {
          #line 200 
          resp->additional_info[i] = *temp;
          #line 201 
          temp ++;
          #line 199 
          i ++;
        }
        #line 203 
        break;
        #line 204 
        case 23: 
                 #line 204 
        ;
        #line 205 
        case 2: 
                #line 205 
        ;
        #line 206 
        case 32: 
                 #line 206 
        ;
        #line 207 
        case 34: 
                 #line 207 
        ;
        #line 208 
        case 36: 
                 #line 208 
        ;
        #line 214 
        hdev->mbx_event_pending = (_Bool)1;
        #line 219 
        if (atomic_read(& hdev->arq.count) > 1023) {
          #line 221 
          _dev_warn(& (hdev->pdev)->dev,(char *)"Async Q full, dropping msg(%u)\n",(int)req->msg[1]);
          #line 224 
          break;
        }
        #line 228 
        msg_q = (u16 *)(& hdev->arq.msg_q[hdev->arq.tail]);
        #line 229 
        memcpy((void *)msg_q,(void *)(& req->msg),16UL);
        #line 231 
        hdev->arq.tail = (hdev->arq.tail + 1U) & 7U;
        #line 232 
        atomic_inc(& hdev->arq.count);
        #line 234 
        hclgevf_mbx_task_schedule(hdev);
        #line 236 
        break;
        #line 237 
        default: 
                 #line 237 
        ;
        #line 238 
        _dev_err(& (hdev->pdev)->dev,(char *)"VF received unsupported(%u) mbx msg from PF\n",(int)req->msg[0]);
        #line 241 
        break;
      }
      #line 243 
      (crq->desc + (unsigned long)crq->next_to_use)->flag = (unsigned short)0U;
      #line 244 
      crq->next_to_use = (crq->next_to_use + 1) % (int)crq->desc_num;
    }
  }
  #line 248 
  hclgevf_write_reg(hdev->hw.io_base,159784U,(unsigned int)crq->next_to_use);
  #line 249 
  return;
}

#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_mbx.c"
static void hclgevf_parse_promisc_info(struct hclgevf_dev *hdev, u16 promisc_info)
{
  #line 255 
  if ((unsigned int)promisc_info == 0U) 
                                        #line 256 
                                        _dev_info(& (hdev->pdev)->dev,(char *)"Promisc mode is closed by host for being untrusted.\n");
  #line 257 
  return;
}

#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_mbx.c"
void hclgevf_mbx_async_handler(struct hclgevf_dev *hdev)
{
  #line 262 
  enum hnae3_reset_type reset_type;
  #line 263 
  u16 link_status;
  #line 263 
  u16 state;
  #line 264 
  u16 *msg_q;
  #line 264 
  u16 *vlan_info;
  #line 265 
  u8 duplex;
  #line 266 
  u32 speed;
  #line 267 
  u32 tail;
  #line 268 
  u8 idx;
  #line 273 
  hdev->mbx_event_pending = (_Bool)0;
  #line 275 
  tail = hdev->arq.tail;
  #line 278 
  while (hdev->arq.head != tail) {
    #line 279 
    if ((int)test_bit(10L,& hdev->state) != 0) {
      #line 280 
      _dev_info(& (hdev->pdev)->dev,(char *)"vf crq need init in async\n");
      #line 282 
      return;
    }
    #line 285 
    msg_q = (u16 *)(& hdev->arq.msg_q[hdev->arq.head]);
    #line 287 
    switch ((int)*msg_q) {
      #line 288 
      case 23: 
               #line 288 
      ;
      #line 289 
      link_status = *(msg_q + 1U);
      #line 290 
      memcpy((void *)(& speed),(void *)(msg_q + 2U),4UL);
      #line 291 
      duplex = (unsigned char)*(msg_q + 4U);
      #line 294 
      hclgevf_update_link_status(hdev,(int)link_status);
      #line 295 
      hclgevf_update_speed_duplex(hdev,speed,(unsigned char)((int)duplex));
      #line 297 
      break;
      #line 298 
      case 32: 
               #line 298 
      ;
      #line 299 
      idx = (unsigned char)*(msg_q + 1U);
      #line 300 
      if ((unsigned int)idx != 0U) 
                                   #line 301 
                                   memcpy((void *)(& hdev->hw.mac.supported),(void *)(msg_q + 2U),8UL); else 
                                                                    #line 304 
                                                                    memcpy((void *)(& hdev->hw.mac.advertising),(void *)(msg_q + 2U),8UL);
      #line 306 
      break;
      #line 307 
      case 2: 
              #line 307 
      ;
      #line 313 
      reset_type = (enum hnae3_reset_type)*(msg_q + 1U);
      #line 314 
      cif_set_bit_1((long)reset_type,& hdev->reset_pending);
      #line 315 
      cif_set_bit_1(1L,& hdev->reset_state);
      #line 316 
      hclgevf_reset_task_schedule(hdev);
      #line 318 
      break;
      #line 319 
      case 34: 
               #line 319 
      ;
      #line 320 
      state = *(msg_q + 1U);
      #line 321 
      vlan_info = msg_q + 1U;
      #line 322 
      hclgevf_update_port_base_vlan_info(hdev,(unsigned short)((int)state),(u8 *)vlan_info,(unsigned char)8);
      #line 324 
      break;
      #line 325 
      case 36: 
               #line 325 
      ;
      #line 326 
      hclgevf_parse_promisc_info(hdev,(unsigned short)((int)*(msg_q + 1U)));
      #line 327 
      break;
      #line 328 
      default: 
               #line 328 
      ;
      #line 329 
      _dev_err(& (hdev->pdev)->dev,(char *)"fetched unsupported(%u) message from arq\n",(int)*msg_q);
      #line 332 
      break;
    }
    #line 335 
    hdev->arq.head = (hdev->arq.head + 1U) & 7U;
    #line 336 
    atomic_dec(& hdev->arq.count);
    #line 337 
    msg_q = (u16 *)(& hdev->arq.msg_q[hdev->arq.head]);
  }
  #line 339 
  return;
}

#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_mbx.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr)
{
  #line 117 
  ldv_set_bit(nr,addr);
  #line 118 
  return;
}

#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_mbx.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 180 
  ldv_atomic_inc(v);
  #line 181 
  return;
}

#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_mbx.i.aux"
static void atomic_dec(atomic_t *v)
{
  #line 187 
  ldv_atomic_dec(v);
  #line 188 
  return;
}

#line 651  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_mbx.i.aux"
static void cif_mutex_lock_mbx_mutex_of_hclgevf_mbx_resp_status(struct mutex *lock)
{
  #line 654 
  ldv_mutex_model_lock(lock,(char *)"mbx_mutex_of_hclgevf_mbx_resp_status");
  #line 655 
  return;
}

#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/0/concurrency safety/weaver/hclgevf_mbx.i.aux"
static void cif_mutex_unlock_mbx_mutex_of_hclgevf_mbx_resp_status(struct mutex *lock)
{
  #line 661 
  ldv_mutex_model_unlock(lock,(char *)"mbx_mutex_of_hclgevf_mbx_resp_status");
  #line 662 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
#line 57 
void emg_dispatch_instance_deregister_2(struct timer_list *arg0);
#line 39 
#line 75 
void emg_dispatch_instance_register_4(struct timer_list *arg0);
#line 40 
#line 66 
void emg_dispatch_irq_deregister_3(int arg0);
#line 41 
#line 86 
void emg_dispatch_irq_register_5(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 42 
#line 329 
void *emg_entry_point_insmod(void *arg0);
#line 44 
#line 100 
void *emg_interrupt_interrupt_scenario_hclgevf_misc_irq_handle(void *arg0);
#line 48 
#line 163 
void *emg_timer_timer_scenario_1(void *arg0);
#line 49 
#line 358 
int main(void);
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_7;
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_8;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_2(struct timer_list *arg0)
{
  #line 58 
  int ret;
  #line 59 
  struct emg_struct_timer_scenario_1_8 *cf_arg_8;
  #line 60 
  ret = pthread_join(emg_thread_8,(void **)0);
  #line 61 
  __VERIFIER_assume(ret == 0);
  #line 62 
  return;
}

#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_3(int arg0)
{
  #line 67 
  int ret;
  #line 68 
  struct emg_struct_free_irq_3 *cf_arg_7;
  #line 69 
  ret = pthread_join(emg_thread_7,(void **)0);
  #line 70 
  __VERIFIER_assume(ret == 0);
  #line 71 
  return;
}

#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_4(struct timer_list *arg0)
{
  #line 76 
  int ret;
  #line 77 
  struct emg_struct_timer_scenario_1_8 *cf_arg_8;
  #line 78 
  cf_arg_8 = (struct emg_struct_timer_scenario_1_8 *)ldv_xmalloc(16UL);
  #line 79 
  cf_arg_8->arg0 = arg0;
  #line 80 
  ret = pthread_create(& emg_thread_8,(pthread_attr_t *)0,& emg_timer_timer_scenario_1,(void *)cf_arg_8);
  #line 81 
  __VERIFIER_assume(ret == 0);
  #line 82 
  return;
}

#line 86  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_5(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 87 
  int ret;
  #line 88 
  struct emg_struct_interrupt_scenario_hclgevf_misc_irq_handle_7 *cf_arg_7;
  #line 89 
  cf_arg_7 = (struct emg_struct_interrupt_scenario_hclgevf_misc_irq_handle_7 *)ldv_xmalloc(40UL);
  #line 90 
  cf_arg_7->arg0 = arg0;
  #line 91 
  cf_arg_7->arg1 = arg1;
  #line 92 
  cf_arg_7->arg2 = arg2;
  #line 93 
  cf_arg_7->arg3 = arg3;
  #line 94 
  ret = pthread_create(& emg_thread_7,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_hclgevf_misc_irq_handle,(void *)cf_arg_7);
  #line 95 
  __VERIFIER_assume(ret == 0);
  #line 96 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_hclgevf_misc_irq_handle(void *arg0)
{
  #line 103 
  enum irqreturn (*emg_7_callback)(int , void *);
  #line 104 
  void *emg_7_data;
  #line 105 
  int emg_7_line;
  #line 106 
  enum irqreturn emg_7_ret_val;
  #line 107 
  enum irqreturn (*emg_7_thread)(int , void *);
  #line 109 
  struct emg_struct_interrupt_scenario_hclgevf_misc_irq_handle_7 *data = (struct emg_struct_interrupt_scenario_hclgevf_misc_irq_handle_7 *)arg0;
  #line 112 
  emg_7_callback = & emg_wrapper_hclgevf_misc_irq_handle;
  #line 115 
  if (data != (struct emg_struct_interrupt_scenario_hclgevf_misc_irq_handle_7 *)0) {
    #line 116 
    emg_7_line = data->arg0;
    #line 117 
    emg_7_callback = data->arg1;
    #line 118 
    emg_7_thread = data->arg2;
    #line 119 
    emg_7_data = data->arg3;
    #line 120 
    ldv_free((void *)data);
  }
  #line 126 
  ldv_switch_to_interrupt_context();
  #line 130 
  emg_7_ret_val = emg_wrapper_hclgevf_misc_irq_handle(emg_7_line,emg_7_data);
  #line 135 
  ldv_switch_to_process_context();
  #line 138 
  if (ldv_undef_int() != 0) {
    #line 140 
    __VERIFIER_assume(emg_7_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 144 
    if (emg_7_thread != (enum irqreturn (*)(int , void *))0) 
                                                             #line 145 
                                                             (*emg_7_thread)(emg_7_line,emg_7_data);
  }
  else 
       #line 150 
       __VERIFIER_assume(emg_7_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 158 
  return (void *)0;
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_1(void *arg0)
{
  #line 166 
  struct timer_list *emg_8_container;
  #line 167 
  unsigned long emg_8_emg_param_0_0;
  #line 169 
  struct emg_struct_timer_scenario_1_8 *data = (struct emg_struct_timer_scenario_1_8 *)arg0;
  #line 174 
  if (data != (struct emg_struct_timer_scenario_1_8 *)0) {
    #line 175 
    emg_8_container = data->arg0;
    #line 176 
    ldv_free((void *)data);
  }
  #line 182 
  ldv_switch_to_interrupt_context();
  #line 186 
  if (emg_8_container->function != (void (*)(struct timer_list *))0) 
    #line 187 
    (*(emg_8_container->function))((struct timer_list *)emg_8_emg_param_0_0);
  #line 193 
  ldv_switch_to_process_context();
  #line 200 
  return (void *)0;
}

#line 205  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 208 
  struct timer_list *emg_2_timer_list;
  #line 211 
  emg_2_timer_list = arg0;
  #line 215 
  emg_dispatch_instance_deregister_2(emg_2_timer_list);
  #line 216 
  ;
  #line 216 
  return 0;
}

#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 225 
  int emg_3_line;
  #line 228 
  emg_3_line = (int)arg0;
  #line 232 
  emg_dispatch_irq_deregister_3(emg_3_line);
  #line 233 
  ;
  #line 233 
  return (void *)0;
}

#line 239  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 242 
  struct timer_list *emg_4_timer_list;
  #line 244 
  if (ldv_undef_int() != 0) {
    #line 246 
    emg_4_timer_list = arg0;
    #line 250 
    emg_dispatch_instance_register_4(emg_4_timer_list);
    #line 254 
    return 1;
  }
  else 
       #line 258 
       return 0;
}

#line 266  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 269 
  enum irqreturn (*emg_5_callback)(int , void *);
  #line 270 
  void *emg_5_data;
  #line 271 
  int emg_5_line;
  #line 272 
  enum irqreturn (*emg_5_thread)(int , void *);
  #line 274 
  emg_5_callback = & emg_wrapper_hclgevf_misc_irq_handle;
  #line 275 
  if (ldv_undef_int() != 0) {
    #line 277 
    emg_5_line = (int)arg0;
    #line 278 
    emg_5_callback = arg1;
    #line 279 
    emg_5_thread = (enum irqreturn (*)(int , void *))0;
    #line 280 
    emg_5_data = arg4;
    #line 284 
    emg_dispatch_irq_register_5(emg_5_line,emg_5_callback,emg_5_thread,emg_5_data);
    #line 288 
    return 0;
  }
  else {
    #line 292 
    return ldv_undef_int_negative();
  }
}

#line 300  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 303 
  struct work_struct *emg_6_work_struct;
  #line 305 
  if (ldv_undef_int() != 0) {
    #line 307 
    emg_6_work_struct = arg0;
    #line 311 
    if (emg_6_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 312 
      (*(emg_6_work_struct->func))(emg_6_work_struct);
    #line 317 
    return (_Bool)1;
  }
  else 
       #line 321 
       return (_Bool)0;
}

#line 329  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 332 
  int emg_1_ret;
  #line 335 
  emg_1_ret = emg_hclgevf_init();
  #line 336 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 339 
  if (ldv_undef_int() != 0) {
    #line 341 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 345 
    emg_hclgevf_exit();
  }
  else 
       #line 349 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 353 
  return (void *)0;
}

#line 358  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 360 
  ldv_initialize();
  #line 362 
  emg_entry_point_insmod((void *)0);
  #line 364 
  return 0;
}

