/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned char u_char;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u8 uint8_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u16 uint16_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 uint64_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
struct task_struct;
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
struct firmware;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
struct __anonstruct_nodemask_t_152 {
   unsigned long bits[16U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
typedef struct __anonstruct_nodemask_t_152 nodemask_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 194 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 212 
struct ldt_struct;
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct __anonstruct_mm_context_t_153 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
typedef struct __anonstruct_mm_context_t_153 mm_context_t;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
struct notifier_block;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_177 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_177 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_184 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_185 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_183 {
   struct __anonstruct_184 __anonCompField___anonunion_183_29 ;
   struct __anonstruct_185 __anonCompField___anonunion_183_30 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_183 __anonCompField_uprobe_task_31 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct address_space;
#line 141 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_187 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_188 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_191 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_190 {
   struct list_head slab_list ;
   struct __anonstruct_191 __anonCompField___anonunion_190_34 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_193 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_192 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_193 __anonCompField___anonunion_192_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_189 {
   union __anonunion_190 __anonCompField___anonstruct_189_35 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_192 __anonCompField___anonstruct_189_37 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_194 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_195 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_197 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_196 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_197 __anonCompField___anonstruct_196_41 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_198 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_186 {
   struct __anonstruct_187 __anonCompField___anonunion_186_32 ;
   struct __anonstruct_188 __anonCompField___anonunion_186_33 ;
   struct __anonstruct_189 __anonCompField___anonunion_186_38 ;
   struct __anonstruct_194 __anonCompField___anonunion_186_39 ;
   struct __anonstruct_195 __anonCompField___anonunion_186_40 ;
   struct __anonstruct_196 __anonCompField___anonunion_186_42 ;
   struct __anonstruct_198 __anonCompField___anonunion_186_43 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_199 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_186 __anonCompField_page_44 ;
   union __anonunion_199 __anonCompField_page_45 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278 
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_200 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_200 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_201 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_201 __anonCompField_mm_struct_46 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_252 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_252 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_253 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_253 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sched.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_280 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_280 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_281 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_282 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_283 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_284 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_287 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_288 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_286 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_287 _addr_bnd ;
   struct __anonstruct__addr_pkey_288 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_285 {
   void *_addr ;
   union __anonunion_286 __anonCompField___anonstruct__sigfault_285_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_289 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_290 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_281 _kill ;
   struct __anonstruct__timer_282 _timer ;
   struct __anonstruct__rt_283 _rt ;
   struct __anonstruct__sigchld_284 _sigchld ;
   struct __anonstruct__sigfault_285 _sigfault ;
   struct __anonstruct__sigpoll_289 _sigpoll ;
   struct __anonstruct__sigsys_290 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_295 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_295 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_300 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_300 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_302 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_302 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_381 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_383 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_382 {
   unsigned long nr_segs ;
   struct __anonstruct_383 __anonCompField___anonunion_382_54 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_381 __anonCompField_iov_iter_53 ;
   union __anonunion_382 __anonCompField_iov_iter_55 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 
struct kiocb;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_386 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_386 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_387 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_387 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_388 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_388 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_389 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_389 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_390 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_390 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_391 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_391 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_392 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_392 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_393 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_393 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_394 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_395 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_394 ifr_ifrn ;
   union __anonunion_ifr_ifru_395 ifr_ifru ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_410 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_409 {
   struct __anonstruct_410 __anonCompField___anonunion_409_58 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_409 __anonCompField_lockref_59 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_412 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_411 {
   struct __anonstruct_412 __anonCompField___anonunion_411_60 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_411 __anonCompField_qstr_61 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_413 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_414 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_413 __anonCompField_dentry_62 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_414 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_432 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_432 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_433 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_434 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_433 __anonCompField_io_cq_65 ;
   union __anonunion_434 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bdi_writeback;
#line 288 
struct export_operations;
#line 290 
struct kobject;
#line 292 
struct kstatfs;
#line 293 
struct swap_info_struct;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_context;
#line 299 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_435 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_435 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_436 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_436 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
struct writeback_control;
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_438 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_437 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_438 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_437 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_441 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_442 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_443 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_444 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_441 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_442 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_443 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_444 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_445 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_445 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_447 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_446 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_447 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_446 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 3599 
struct sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_9122 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_9122 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_495 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_495 __anonCompField_kernfs_node_73 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_498 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_498 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_499 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_499 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_521 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_520 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_521 __anonCompField___anonstruct_520_86 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_519 {
   struct __anonstruct_520 __anonCompField___anonunion_519_87 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_522 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_523 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_525 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_524 {
   struct __anonstruct_525 __anonCompField___anonunion_524_91 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_527 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_526 {
   __wsum csum ;
   struct __anonstruct_527 __anonCompField___anonunion_526_93 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_528 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_529 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_530 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_519 __anonCompField_sk_buff_88 ;
   union __anonunion_522 __anonCompField_sk_buff_89 ;
   union __anonunion_523 __anonCompField_sk_buff_90 ;
   char cb[48U] ;
   union __anonunion_524 __anonCompField_sk_buff_92 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_526 __anonCompField_sk_buff_94 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_528 __anonCompField_sk_buff_95 ;
   __u32 secmark ;
   union __anonunion_529 __anonCompField_sk_buff_96 ;
   union __anonunion_530 __anonCompField_sk_buff_97 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14504 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14505 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14504 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14505 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 536 
enum nl80211_iftype {
    NL80211_IFTYPE_UNSPECIFIED = 0,
    NL80211_IFTYPE_ADHOC = 1,
    NL80211_IFTYPE_STATION = 2,
    NL80211_IFTYPE_AP = 3,
    NL80211_IFTYPE_AP_VLAN = 4,
    NL80211_IFTYPE_WDS = 5,
    NL80211_IFTYPE_MONITOR = 6,
    NL80211_IFTYPE_MESH_POINT = 7,
    NL80211_IFTYPE_P2P_CLIENT = 8,
    NL80211_IFTYPE_P2P_GO = 9,
    NL80211_IFTYPE_P2P_DEVICE = 10,
    NL80211_IFTYPE_OCB = 11,
    NL80211_IFTYPE_NAN = 12,
    NUM_NL80211_IFTYPES = 13,
    NL80211_IFTYPE_MAX = 12
};
#line 3263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
enum nl80211_reg_initiator {
    NL80211_REGDOM_SET_BY_CORE = 0,
    NL80211_REGDOM_SET_BY_USER = 1,
    NL80211_REGDOM_SET_BY_DRIVER = 2,
    NL80211_REGDOM_SET_BY_COUNTRY_IE = 3
};
#line 3320 
enum nl80211_dfs_regions {
    NL80211_DFS_UNSET = 0,
    NL80211_DFS_FCC = 1,
    NL80211_DFS_ETSI = 2,
    NL80211_DFS_JP = 3
};
#line 3327 
enum nl80211_user_reg_hint_type {
    NL80211_USER_REG_HINT_USER = 0,
    NL80211_USER_REG_HINT_CELL_BASE = 1,
    NL80211_USER_REG_HINT_INDOOR = 2
};
#line 3446 
enum nl80211_key_mode {
    NL80211_KEY_RX_TX = 0,
    NL80211_KEY_NO_TX = 1,
    NL80211_KEY_SET_TX = 2
};
#line 3452 
enum nl80211_chan_width {
    NL80211_CHAN_WIDTH_20_NOHT = 0,
    NL80211_CHAN_WIDTH_20 = 1,
    NL80211_CHAN_WIDTH_40 = 2,
    NL80211_CHAN_WIDTH_80 = 3,
    NL80211_CHAN_WIDTH_80P80 = 4,
    NL80211_CHAN_WIDTH_160 = 5,
    NL80211_CHAN_WIDTH_5 = 6,
    NL80211_CHAN_WIDTH_10 = 7
};
#line 3463 
enum nl80211_bss_scan_width {
    NL80211_BSS_CHAN_WIDTH_20 = 0,
    NL80211_BSS_CHAN_WIDTH_10 = 1,
    NL80211_BSS_CHAN_WIDTH_5 = 2
};
#line 3500 
enum nl80211_auth_type {
    NL80211_AUTHTYPE_OPEN_SYSTEM = 0,
    NL80211_AUTHTYPE_SHARED_KEY = 1,
    NL80211_AUTHTYPE_FT = 2,
    NL80211_AUTHTYPE_NETWORK_EAP = 3,
    NL80211_AUTHTYPE_SAE = 4,
    NL80211_AUTHTYPE_FILS_SK = 5,
    NL80211_AUTHTYPE_FILS_SK_PFS = 6,
    NL80211_AUTHTYPE_FILS_PK = 7,
    __NL80211_AUTHTYPE_NUM = 8,
    NL80211_AUTHTYPE_MAX = 7,
    NL80211_AUTHTYPE_AUTOMATIC = 8
};
#line 3521 
enum nl80211_mfp {
    NL80211_MFP_NO = 0,
    NL80211_MFP_REQUIRED = 1,
    NL80211_MFP_OPTIONAL = 2
};
#line 4599 
enum nl80211_band {
    NL80211_BAND_2GHZ = 0,
    NL80211_BAND_5GHZ = 1,
    NL80211_BAND_60GHZ = 2,
    NL80211_BAND_6GHZ = 3,
    NUM_NL80211_BANDS = 4
};
#line 4914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_seq {
   __u32 start ;
   __u32 offset ;
   __u32 len ;
};
#line 4925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token {
   __u32 offset ;
   __u32 len ;
   __u8 token_stream[] ;
};
#line 4936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token_feature {
   __u32 min_len ;
   __u32 max_len ;
   __u32 bufsize ;
};
#line 5237 
enum nl80211_dfs_state {
    NL80211_DFS_USABLE = 0,
    NL80211_DFS_UNAVAILABLE = 1,
    NL80211_DFS_AVAILABLE = 2
};
#line 5847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_vendor_cmd_info {
   __u32 vendor_id ;
   __u32 subcmd ;
};
#line 5903 
enum nl80211_bss_select_attr {
    __NL80211_BSS_SELECT_ATTR_INVALID = 0,
    NL80211_BSS_SELECT_ATTR_RSSI = 1,
    NL80211_BSS_SELECT_ATTR_BAND_PREF = 2,
    NL80211_BSS_SELECT_ATTR_RSSI_ADJUST = 3,
    __NL80211_BSS_SELECT_ATTR_AFTER_LAST = 4,
    NL80211_BSS_SELECT_ATTR_MAX = 3
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
struct lbs_fw_table {
   int model ;
   char *helper ;
   char *fwname ;
};
#line 21 
struct lbs_private;
#line 1276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_mcs_info {
   u8 rx_mask[10U] ;
   __le16 rx_highest ;
   u8 tx_params ;
   u8 reserved[3U] ;
} __attribute__((__packed__));
#line 1310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_ht_cap {
   __le16 cap_info ;
   u8 ampdu_params_info ;
   struct ieee80211_mcs_info mcs ;
   __le16 extended_ht_cap_info ;
   __le32 tx_BF_cap_info ;
   u8 antenna_selection_info ;
} __attribute__((__packed__));
#line 1483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_mcs_info {
   __le16 rx_mcs_map ;
   __le16 rx_highest ;
   __le16 tx_mcs_map ;
   __le16 tx_highest ;
} __attribute__((__packed__));
#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_cap {
   __le32 vht_cap_info ;
   struct ieee80211_vht_mcs_info supp_mcs ;
} __attribute__((__packed__));
#line 1569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_cap_elem {
   u8 mac_cap_info[6U] ;
   u8 phy_cap_info[11U] ;
} __attribute__((__packed__));
#line 1616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_mcs_nss_supp {
   __le16 rx_mcs_80 ;
   __le16 tx_mcs_80 ;
   __le16 rx_mcs_160 ;
   __le16 tx_mcs_160 ;
   __le16 rx_mcs_80p80 ;
   __le16 tx_mcs_80p80 ;
} __attribute__((__packed__));
#line 3414 
enum environment_cap {
    ENVIRON_ANY = 0,
    ENVIRON_INDOOR = 1,
    ENVIRON_OUTDOOR = 2
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct regulatory_request {
   struct callback_head callback_head ;
   int wiphy_idx ;
   enum nl80211_reg_initiator initiator ;
   enum nl80211_user_reg_hint_type user_reg_hint_type ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   bool intersect ;
   bool processed ;
   enum environment_cap country_ie_env ;
   struct list_head list ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_freq_range {
   u32 start_freq_khz ;
   u32 end_freq_khz ;
   u32 max_bandwidth_khz ;
};
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_power_rule {
   u32 max_antenna_gain ;
   u32 max_eirp ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_ac {
   u16 cw_min ;
   u16 cw_max ;
   u16 cot ;
   u8 aifsn ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_rule {
   struct ieee80211_wmm_ac client[4U] ;
   struct ieee80211_wmm_ac ap[4U] ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_reg_rule {
   struct ieee80211_freq_range freq_range ;
   struct ieee80211_power_rule power_rule ;
   struct ieee80211_wmm_rule wmm_rule ;
   u32 flags ;
   u32 dfs_cac_ms ;
   bool has_wmm ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_regdomain {
   struct callback_head callback_head ;
   u32 n_reg_rules ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   struct ieee80211_reg_rule reg_rules[] ;
};
#line 233 
struct wiphy;
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_channel {
   enum nl80211_band band ;
   u32 center_freq ;
   u16 hw_value ;
   u32 flags ;
   int max_antenna_gain ;
   int max_power ;
   int max_reg_power ;
   bool beacon_found ;
   u32 orig_flags ;
   int orig_mag ;
   int orig_mpwr ;
   enum nl80211_dfs_state dfs_state ;
   unsigned long dfs_state_entered ;
   unsigned int dfs_cac_ms ;
};
#line 172 
enum ieee80211_bss_type {
    IEEE80211_BSS_TYPE_ESS = 0,
    IEEE80211_BSS_TYPE_PBSS = 1,
    IEEE80211_BSS_TYPE_IBSS = 2,
    IEEE80211_BSS_TYPE_MBSS = 3,
    IEEE80211_BSS_TYPE_ANY = 4
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_rate {
   u32 flags ;
   u16 bitrate ;
   u16 hw_value ;
   u16 hw_value_short ;
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_ht_cap {
   u16 cap ;
   bool ht_supported ;
   u8 ampdu_factor ;
   u8 ampdu_density ;
   struct ieee80211_mcs_info mcs ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_vht_cap {
   bool vht_supported ;
   u32 cap ;
   struct ieee80211_vht_mcs_info vht_mcs ;
};
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_he_cap {
   bool has_he ;
   struct ieee80211_he_cap_elem he_cap_elem ;
   struct ieee80211_he_mcs_nss_supp he_mcs_nss_supp ;
   u8 ppe_thres[25U] ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sband_iftype_data {
   u16 types_mask ;
   struct ieee80211_sta_he_cap he_cap ;
};
#line 332 
enum ieee80211_edmg_bw_config {
    IEEE80211_EDMG_BW_CONFIG_4 = 4,
    IEEE80211_EDMG_BW_CONFIG_5 = 5,
    IEEE80211_EDMG_BW_CONFIG_6 = 6,
    IEEE80211_EDMG_BW_CONFIG_7 = 7,
    IEEE80211_EDMG_BW_CONFIG_8 = 8,
    IEEE80211_EDMG_BW_CONFIG_9 = 9,
    IEEE80211_EDMG_BW_CONFIG_10 = 10,
    IEEE80211_EDMG_BW_CONFIG_11 = 11,
    IEEE80211_EDMG_BW_CONFIG_12 = 12,
    IEEE80211_EDMG_BW_CONFIG_13 = 13,
    IEEE80211_EDMG_BW_CONFIG_14 = 14,
    IEEE80211_EDMG_BW_CONFIG_15 = 15
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_edmg {
   u8 channels ;
   enum ieee80211_edmg_bw_config bw_config ;
};
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_supported_band {
   struct ieee80211_channel *channels ;
   struct ieee80211_rate *bitrates ;
   enum nl80211_band band ;
   int n_channels ;
   int n_bitrates ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_edmg edmg_cap ;
   u16 n_iftype_data ;
   struct ieee80211_sband_iftype_data *iftype_data ;
};
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct key_params {
   u8 *key ;
   u8 *seq ;
   int key_len ;
   int seq_len ;
   u16 vlan_id ;
   u32 cipher ;
   enum nl80211_key_mode mode ;
};
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_chan_def {
   struct ieee80211_channel *chan ;
   enum nl80211_chan_width width ;
   u32 center_freq1 ;
   u32 center_freq2 ;
   struct ieee80211_edmg edmg ;
};
#line 853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_crypto_settings {
   u32 wpa_versions ;
   u32 cipher_group ;
   int n_ciphers_pairwise ;
   u32 ciphers_pairwise[5U] ;
   int n_akm_suites ;
   u32 akm_suites[2U] ;
   bool control_port ;
   __be16 control_port_ethertype ;
   bool control_port_no_encrypt ;
   bool control_port_over_nl80211 ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
   u8 *psk ;
   u8 *sae_pwd ;
   u8 sae_pwd_len ;
};
#line 917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct mac_address {
   u8 addr[6U] ;
};
#line 1885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ssid {
   u8 ssid[32U] ;
   u8 ssid_len ;
};
#line 1899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_scan_info {
   u64 scan_start_tsf ;
   u8 tsf_bssid[6U] ;
   bool aborted ;
};
#line 1934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_scan_request {
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 *ie ;
   size_t ie_len ;
   u16 duration ;
   bool duration_mandatory ;
   u32 flags ;
   u32 rates[4U] ;
   struct wireless_dev *wdev ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   u8 bssid[6U] ;
   struct wiphy *wiphy ;
   unsigned long scan_start ;
   struct cfg80211_scan_info info ;
   bool notified ;
   bool no_cck ;
   struct ieee80211_channel *channels[0U] ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_match_set {
   struct cfg80211_ssid ssid ;
   u8 bssid[6U] ;
   s32 rssi_thold ;
   s32 per_band_rssi_thold[4U] ;
};
#line 2007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_plan {
   u32 interval ;
   u32 iterations ;
};
#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_select_adjust {
   enum nl80211_band band ;
   s8 delta ;
};
#line 2073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_request {
   u64 reqid ;
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 *ie ;
   size_t ie_len ;
   u32 flags ;
   struct cfg80211_match_set *match_sets ;
   int n_match_sets ;
   s32 min_rssi_thold ;
   u32 delay ;
   struct cfg80211_sched_scan_plan *scan_plans ;
   int n_scan_plans ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   bool relative_rssi_set ;
   s8 relative_rssi ;
   struct cfg80211_bss_select_adjust rssi_adjust ;
   struct wiphy *wiphy ;
   struct net_device *dev ;
   unsigned long scan_start ;
   bool report_results ;
   struct callback_head callback_head ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   struct list_head list ;
   struct ieee80211_channel *channels[0U] ;
};
#line 2109 
enum cfg80211_signal_type {
    CFG80211_SIGNAL_TYPE_NONE = 0,
    CFG80211_SIGNAL_TYPE_MBM = 1,
    CFG80211_SIGNAL_TYPE_UNSPEC = 2
};
#line 2432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ibss_params {
   u8 *ssid ;
   u8 *bssid ;
   struct cfg80211_chan_def chandef ;
   u8 *ie ;
   u8 ssid_len ;
   u8 ie_len ;
   u16 beacon_interval ;
   u32 basic_rates ;
   bool channel_fixed ;
   bool privacy ;
   bool control_port ;
   bool control_port_over_nl80211 ;
   bool userspace_handles_dfs ;
   int mcast_rate[4U] ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
union __anonunion_param_733 {
   enum nl80211_band band_pref ;
   struct cfg80211_bss_select_adjust adjust ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_selection {
   enum nl80211_bss_select_attr behaviour ;
   union __anonunion_param_733 param ;
};
#line 2531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_connect_params {
   struct ieee80211_channel *channel ;
   struct ieee80211_channel *channel_hint ;
   u8 *bssid ;
   u8 *bssid_hint ;
   u8 *ssid ;
   size_t ssid_len ;
   enum nl80211_auth_type auth_type ;
   u8 *ie ;
   size_t ie_len ;
   bool privacy ;
   enum nl80211_mfp mfp ;
   struct cfg80211_crypto_settings crypto ;
   u8 *key ;
   u8 key_len ;
   u8 key_idx ;
   u32 flags ;
   int bg_scan_period ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct ieee80211_vht_cap vht_capa ;
   struct ieee80211_vht_cap vht_capa_mask ;
   bool pbss ;
   struct cfg80211_bss_selection bss_select ;
   u8 *prev_bssid ;
   u8 *fils_erp_username ;
   size_t fils_erp_username_len ;
   u8 *fils_erp_realm ;
   size_t fils_erp_realm_len ;
   u16 fils_erp_next_seq_num ;
   u8 *fils_erp_rrk ;
   size_t fils_erp_rrk_len ;
   bool want_1x ;
   struct ieee80211_edmg edmg ;
};
#line 2656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pkt_pattern {
   u8 *mask ;
   u8 *pattern ;
   int pattern_len ;
   int pkt_offset ;
};
#line 2681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan_tcp {
   struct socket *sock ;
   __be32 src ;
   __be32 dst ;
   u16 src_port ;
   u16 dst_port ;
   u8 dst_mac[6U] ;
   int payload_len ;
   u8 *payload ;
   struct nl80211_wowlan_tcp_data_seq payload_seq ;
   u32 data_interval ;
   u32 wake_len ;
   u8 *wake_data ;
   u8 *wake_mask ;
   u32 tokens_size ;
   struct nl80211_wowlan_tcp_data_token payload_tok ;
};
#line 2715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan {
   bool any ;
   bool disconnect ;
   bool magic_pkt ;
   bool gtk_rekey_failure ;
   bool eap_identity_req ;
   bool four_way_handshake ;
   bool rfkill_release ;
   struct cfg80211_pkt_pattern *patterns ;
   struct cfg80211_wowlan_tcp *tcp ;
   int n_patterns ;
   struct cfg80211_sched_scan_request *nd_config ;
};
#line 4043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_limit {
   u16 max ;
   u16 types ;
};
#line 4107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_combination {
   struct ieee80211_iface_limit *limits ;
   u32 num_different_channels ;
   u16 max_interfaces ;
   u8 n_limits ;
   bool beacon_int_infra_match ;
   u8 radar_detect_widths ;
   u8 radar_detect_regions ;
   u32 beacon_int_min_gcd ;
};
#line 4165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_txrx_stypes {
   u16 tx ;
   u16 rx ;
};
#line 4198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_tcp_support {
   struct nl80211_wowlan_tcp_data_token_feature *tok ;
   u32 data_payload_max ;
   u32 data_interval_max ;
   u32 wake_payload_max ;
   bool seq ;
};
#line 4221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_support {
   u32 flags ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
   int max_nd_match_sets ;
   struct wiphy_wowlan_tcp_support *tcp ;
};
#line 4241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_coalesce_support {
   int n_rules ;
   int max_delay ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
};
#line 4312 
struct nla_policy;
#line 4312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_vendor_command {
   struct nl80211_vendor_cmd_info info ;
   u32 flags ;
   int (*doit)(struct wiphy *, struct wireless_dev *, void *, int ) ;
   int (*dumpit)(struct wiphy *, struct wireless_dev *, struct sk_buff *, void *, int , unsigned long *) ;
   struct nla_policy *policy ;
   unsigned int maxattr ;
};
#line 4335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_iftype_ext_capab {
   enum nl80211_iftype iftype ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_ftm_735 {
   u32 preambles ;
   u32 bandwidths ;
   s8 max_bursts_exponent ;
   u8 max_ftms_per_burst ;
   u8 supported : 1 ;
   u8 asap : 1 ;
   u8 non_asap : 1 ;
   u8 request_lci : 1 ;
   u8 request_civicloc : 1 ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_capabilities {
   unsigned int max_peers ;
   u8 report_ap_tsf : 1 ;
   u8 randomize_mac_addr : 1 ;
   struct __anonstruct_ftm_735 ftm ;
};
#line 4552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy {
   u8 perm_addr[6U] ;
   u8 addr_mask[6U] ;
   struct mac_address *addresses ;
   struct ieee80211_txrx_stypes *mgmt_stypes ;
   struct ieee80211_iface_combination *iface_combinations ;
   int n_iface_combinations ;
   u16 software_iftypes ;
   u16 n_addresses ;
   u16 interface_modes ;
   u16 max_acl_mac_addrs ;
   u32 flags ;
   u32 regulatory_flags ;
   u32 features ;
   u8 ext_features[6U] ;
   u32 ap_sme_capa ;
   enum cfg80211_signal_type signal_type ;
   int bss_priv_size ;
   u8 max_scan_ssids ;
   u8 max_sched_scan_reqs ;
   u8 max_sched_scan_ssids ;
   u8 max_match_sets ;
   u16 max_scan_ie_len ;
   u16 max_sched_scan_ie_len ;
   u32 max_sched_scan_plans ;
   u32 max_sched_scan_plan_interval ;
   u32 max_sched_scan_plan_iterations ;
   int n_cipher_suites ;
   u32 *cipher_suites ;
   int n_akm_suites ;
   u32 *akm_suites ;
   u8 retry_short ;
   u8 retry_long ;
   u32 frag_threshold ;
   u32 rts_threshold ;
   u8 coverage_class ;
   char fw_version[32U] ;
   u32 hw_version ;
   struct wiphy_wowlan_support *wowlan ;
   struct cfg80211_wowlan *wowlan_config ;
   u16 max_remain_on_channel_duration ;
   u8 max_num_pmkids ;
   u32 available_antennas_tx ;
   u32 available_antennas_rx ;
   u32 probe_resp_offload ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
   struct wiphy_iftype_ext_capab *iftype_ext_capab ;
   unsigned int num_iftype_ext_capab ;
   void *privid ;
   struct ieee80211_supported_band *bands[4U] ;
   void (*reg_notifier)(struct wiphy *, struct regulatory_request *) ;
   struct ieee80211_regdomain *regd ;
   struct device dev ;
   bool registered ;
   struct dentry *debugfsdir ;
   struct ieee80211_ht_cap *ht_capa_mod_mask ;
   struct ieee80211_vht_cap *vht_capa_mod_mask ;
   struct list_head wdev_list ;
   possible_net_t _net ;
   struct iw_handler_def *wext ;
   struct wiphy_coalesce_support *coalesce ;
   struct wiphy_vendor_command *vendor_commands ;
   struct nl80211_vendor_cmd_info *vendor_events ;
   int n_vendor_commands ;
   int n_vendor_events ;
   u16 max_ap_assoc_sta ;
   u8 max_num_csa_counters ;
   u8 max_adj_channel_rssi_comp ;
   u32 bss_select_support ;
   u8 nan_supported_bands ;
   u32 txq_limit ;
   u32 txq_memory_limit ;
   u32 txq_quantum ;
   u8 support_mbssid : 1 ;
   u8 support_only_he_mbssid : 1 ;
   struct cfg80211_pmsr_capabilities *pmsr_capa ;
   char priv[0U] ;
};
#line 4826 
struct cfg80211_conn;
#line 4827 
struct cfg80211_internal_bss;
#line 4828 
struct cfg80211_cached_keys;
#line 4829 
struct cfg80211_cqm_config;
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_wext_736 {
   struct cfg80211_ibss_params ibss ;
   struct cfg80211_connect_params connect ;
   struct cfg80211_cached_keys *keys ;
   u8 *ie ;
   size_t ie_len ;
   u8 bssid[6U] ;
   u8 prev_bssid[6U] ;
   u8 ssid[32U] ;
   s8 default_key ;
   s8 default_mgmt_key ;
   bool prev_bssid_valid ;
};
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wireless_dev {
   struct wiphy *wiphy ;
   enum nl80211_iftype iftype ;
   struct list_head list ;
   struct net_device *netdev ;
   u32 identifier ;
   struct list_head mgmt_registrations ;
   spinlock_t mgmt_registrations_lock ;
   struct mutex mtx ;
   bool use_4addr ;
   bool is_running ;
   u8 address[6U] ;
   u8 ssid[32U] ;
   u8 ssid_len ;
   u8 mesh_id_len ;
   u8 mesh_id_up_len ;
   struct cfg80211_conn *conn ;
   struct cfg80211_cached_keys *connect_keys ;
   enum ieee80211_bss_type conn_bss_type ;
   u32 conn_owner_nlportid ;
   struct work_struct disconnect_wk ;
   u8 disconnect_bssid[6U] ;
   struct list_head event_list ;
   spinlock_t event_lock ;
   struct cfg80211_internal_bss *current_bss ;
   struct cfg80211_chan_def preset_chandef ;
   struct cfg80211_chan_def chandef ;
   bool ibss_fixed ;
   bool ibss_dfs_possible ;
   bool ps ;
   int ps_timeout ;
   int beacon_interval ;
   u32 ap_unexpected_nlportid ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   bool cac_started ;
   unsigned long cac_start_time ;
   unsigned int cac_time_ms ;
   struct __anonstruct_wext_736 wext ;
   struct cfg80211_cqm_config *cqm_config ;
   struct list_head pmsr_list ;
   spinlock_t pmsr_lock ;
   struct work_struct pmsr_free_wk ;
};
#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_header {
   __le16 command ;
   __le16 size ;
   __le16 seqnum ;
   __le16 result ;
} __attribute__((__packed__));
#line 863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_eeprom_access {
   struct cmd_header hdr ;
   __le16 action ;
   __le16 offset ;
   __le16 len ;
   u8 value[20U] ;
} __attribute__((__packed__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kfifo.h"
struct __kfifo {
   unsigned int in ;
   unsigned int out ;
   unsigned int mask ;
   unsigned int esize ;
   void *data ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kfifo.h"
union __anonunion_745 {
   struct __kfifo kfifo ;
   unsigned char *type ;
   unsigned char *const_type ;
   char (*rectype)[0U] ;
   void *ptr ;
   void *ptr_const ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kfifo.h"
struct kfifo {
   union __anonunion_745 __anonCompField_kfifo_165 ;
   unsigned char buf[0U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/dev.h"
struct lbs_mesh_stats {
   u32 fwd_bcast_cnt ;
   u32 fwd_unicast_cnt ;
   u32 fwd_drop_ttl ;
   u32 fwd_drop_rbt ;
   u32 fwd_drop_noroute ;
   u32 fwd_drop_nobuf ;
   u32 drop_blind ;
   u32 tx_failed_cnt ;
};
#line 39 
struct cmd_ctrl_node;
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/dev.h"
struct lbs_private {
   struct net_device *dev ;
   u32 connect_status ;
   struct work_struct mcast_work ;
   u32 nr_of_multicastmacaddr ;
   u8 multicastlist[32U][6U] ;
   struct wireless_dev *wdev ;
   bool wiphy_registered ;
   struct cfg80211_scan_request *scan_req ;
   u8 assoc_bss[6U] ;
   u8 country_code[3U] ;
   u8 disassoc_reason ;
   struct net_device *mesh_dev ;
   struct lbs_mesh_stats mstats ;
   uint16_t mesh_tlv ;
   u8 mesh_channel ;
   struct dentry *debugfs_dir ;
   struct dentry *debugfs_debug ;
   struct dentry *debugfs_files[6U] ;
   struct dentry *events_dir ;
   struct dentry *debugfs_events_files[6U] ;
   struct dentry *regs_dir ;
   struct dentry *debugfs_regs_files[6U] ;
   u32 mac_offset ;
   u32 bbp_offset ;
   u32 rf_offset ;
   u16 psmode ;
   u32 psstate ;
   u8 needtowakeup ;
   int is_deep_sleep ;
   int deep_sleep_required ;
   int is_auto_deep_sleep_enabled ;
   int wakeup_dev_required ;
   int is_activity_detected ;
   int auto_deep_sleep_timeout ;
   wait_queue_head_t ds_awake_q ;
   struct timer_list auto_deepsleep_timer ;
   int is_host_sleep_configured ;
   int is_host_sleep_activated ;
   wait_queue_head_t host_sleep_q ;
   void *card ;
   bool iface_running ;
   u8 is_polling ;
   u8 fw_ready ;
   u8 surpriseremoved ;
   u8 setup_fw_on_resume ;
   u8 power_up_on_resume ;
   int (*hw_host_to_card)(struct lbs_private *, u8 , u8 *, u16 ) ;
   void (*reset_card)(struct lbs_private *) ;
   int (*power_save)(struct lbs_private *) ;
   int (*power_restore)(struct lbs_private *) ;
   int (*enter_deep_sleep)(struct lbs_private *) ;
   int (*exit_deep_sleep)(struct lbs_private *) ;
   int (*reset_deep_sleep_wakeup)(struct lbs_private *) ;
   u32 fwrelease ;
   u32 fwcapinfo ;
   u16 regioncode ;
   u8 current_addr[6U] ;
   u8 copied_hwaddr ;
   u8 dnld_sent ;
   u16 seqnum ;
   struct cmd_ctrl_node *cmd_array ;
   struct cmd_ctrl_node *cur_cmd ;
   struct list_head cmdfreeq ;
   struct list_head cmdpendingq ;
   struct timer_list command_timer ;
   int cmd_timed_out ;
   u8 resp_idx ;
   u8 resp_buf[2U][2312U] ;
   u32 resp_len[2U] ;
   struct kfifo event_fifo ;
   struct task_struct *main_thread ;
   wait_queue_head_t waitq ;
   struct workqueue_struct *work_thread ;
   u8 authtype_auto ;
   u8 wep_tx_key ;
   u8 wep_key[4U][13U] ;
   u8 wep_key_len[4U] ;
   uint32_t wol_criteria ;
   uint8_t wol_gpio ;
   uint8_t wol_gap ;
   bool ehs_remove_supported ;
   int tx_pending_len ;
   u8 tx_pending_buf[2312U] ;
   u8 txretrycount ;
   struct sk_buff *currenttxskb ;
   struct timer_list tx_lockup_timer ;
   struct mutex lock ;
   spinlock_t driver_lock ;
   u16 mac_control ;
   u8 radio_on ;
   u8 cur_rate ;
   u8 channel ;
   s16 txpower_cur ;
   s16 txpower_min ;
   s16 txpower_max ;
   struct delayed_work scan_work ;
   int scan_channel ;
   wait_queue_head_t scan_q ;
   bool internal_scan ;
   u32 fw_model ;
   wait_queue_head_t fw_waitq ;
   struct device *fw_device ;
   struct firmware *helper_fw ;
   struct lbs_fw_table *fw_table ;
   struct lbs_fw_table *fw_iter ;
   void (*fw_callback)(struct lbs_private *, int , struct firmware *, struct firmware *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.h"
struct cmd_ctrl_node {
   struct list_head list ;
   int result ;
   int (*callback)(struct lbs_private *, unsigned long , struct cmd_header *) ;
   unsigned long callback_arg ;
   struct cmd_header *cmdbuf ;
   u16 cmdwaitqwoken ;
   wait_queue_head_t cmdwait_q ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_param {
   __s32 value ;
   __u8 fixed ;
   __u8 disabled ;
   __u16 flags ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_point {
   void *pointer ;
   __u16 length ;
   __u16 flags ;
};
#line 700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_freq {
   __s32 m ;
   __s16 e ;
   __u8 i ;
   __u8 flags ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_quality {
   __u8 qual ;
   __u8 level ;
   __u8 noise ;
   __u8 updated ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_discarded {
   __u32 nwid ;
   __u32 code ;
   __u32 fragment ;
   __u32 retries ;
   __u32 misc ;
};
#line 737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_missed {
   __u32 beacon ;
};
#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_statistics {
   __u16 status ;
   struct iw_quality qual ;
   struct iw_discarded discard ;
   struct iw_missed miss ;
};
#line 896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
union iwreq_data {
   char name[16U] ;
   struct iw_point essid ;
   struct iw_param nwid ;
   struct iw_freq freq ;
   struct iw_param sens ;
   struct iw_param bitrate ;
   struct iw_param txpower ;
   struct iw_param rts ;
   struct iw_param frag ;
   __u32 mode ;
   struct iw_param retry ;
   struct iw_point encoding ;
   struct iw_param power ;
   struct iw_quality qual ;
   struct sockaddr ap_addr ;
   struct sockaddr addr ;
   struct iw_param param ;
   struct iw_point data ;
};
#line 1057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_priv_args {
   __u32 cmd ;
   __u16 set_args ;
   __u16 get_args ;
   char name[16U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
struct iw_request_info {
   __u16 cmd ;
   __u16 flags ;
};
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
typedef int (*iw_handler)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
struct iw_handler_def {
   iw_handler *standard ;
   __u16 num_standard ;
   __u16 num_private ;
   __u16 num_private_args ;
   iw_handler *private ;
   struct iw_priv_args *private_args ;
   struct iw_statistics *(*get_wireless_stats)(struct net_device *) ;
};
#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
struct iw_spy_data {
   int spy_number ;
   u_char spy_address[8U][6U] ;
   struct iw_quality spy_stat[8U] ;
   struct iw_quality spy_thr_low ;
   struct iw_quality spy_thr_high ;
   u_char spy_thr_under[8U] ;
};
#line 406 
struct libipw_device;
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
struct iw_public_data {
   struct iw_spy_data *spy_data ;
   struct libipw_device *libipw ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char *, size_t ) ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/types.h"
struct mrvl_meshie_val {
   uint8_t oui[3U] ;
   uint8_t type ;
   uint8_t subtype ;
   uint8_t version ;
   uint8_t active_protocol_id ;
   uint8_t active_metric_id ;
   uint8_t mesh_capability ;
   uint8_t mesh_id_len ;
   uint8_t mesh_id[32U] ;
} __attribute__((__packed__));
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/types.h"
struct mrvl_meshie {
   u8 id ;
   u8 len ;
   struct mrvl_meshie_val val ;
} __attribute__((__packed__));
#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/types.h"
struct mrvl_mesh_defaults {
   __le32 bootflag ;
   uint8_t boottime ;
   uint8_t reserved ;
   __le16 channel ;
   struct mrvl_meshie meshie ;
} __attribute__((__packed__));
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct __anonstruct_bss_1490 {
   u8 bss_type ;
   u8 bss_num ;
   __le16 reserved ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
union __anonunion_u_1489 {
   __le32 tx_status ;
   struct __anonstruct_bss_1490 bss ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct txpd {
   union __anonunion_u_1489 u ;
   __le32 tx_control ;
   __le32 tx_packet_location ;
   __le16 tx_packet_length ;
   u8 tx_dest_addr_high[2U] ;
   u8 tx_dest_addr_low[4U] ;
   u8 priority ;
   u8 powermgmt ;
   u8 pktdelay_2ms ;
   u8 reserved1 ;
} __attribute__((__packed__));
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct __anonstruct_bss_1492 {
   u8 bss_type ;
   u8 bss_num ;
} __attribute__((__packed__));
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
union __anonunion_u_1491 {
   __le16 status ;
   struct __anonstruct_bss_1492 bss ;
} __attribute__((__packed__));
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct rxpd {
   union __anonunion_u_1491 u ;
   u8 snr ;
   u8 rx_control ;
   __le16 pkt_len ;
   u8 nf ;
   u8 rx_rate ;
   __le32 pkt_ptr ;
   __le32 next_rxpd_ptr ;
   u8 priority ;
   u8 reserved[3U] ;
} __attribute__((__packed__));
#line 960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_mesh_config {
   struct cmd_header hdr ;
   __le16 action ;
   __le16 channel ;
   __le16 type ;
   __le16 length ;
   u8 data[128U] ;
} __attribute__((__packed__));
#line 970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_mesh_access {
   struct cmd_header hdr ;
   __le16 action ;
   __le32 data[32U] ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 5125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_radiotap_header;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ieee80211_radiotap.h"
struct ieee80211_radiotap_header {
   uint8_t it_version ;
   uint8_t it_pad ;
   __le16 it_len ;
   __le32 it_present ;
} __attribute__((__packed__));
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/radiotap.h"
struct rx_radiotap_hdr {
   struct ieee80211_radiotap_header hdr ;
   u8 flags ;
   u8 rate ;
   u8 antsignal ;
} __attribute__((__packed__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/rx.c"
struct eth803hdr {
   u8 dest_addr[6U] ;
   u8 src_addr[6U] ;
   u16 h803_len ;
} __attribute__((__packed__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/rx.c"
struct rfc1042hdr {
   u8 llc_dsap ;
   u8 llc_ssap ;
   u8 llc_ctrl ;
   u8 snap_oui[3U] ;
   u16 snap_type ;
} __attribute__((__packed__));
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/rx.c"
struct rxpackethdr {
   struct eth803hdr eth803_hdr ;
   struct rfc1042hdr rfc1042_hdr ;
} __attribute__((__packed__));
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/rx.c"
struct rx80211packethdr {
   struct rxpd rx_pd ;
   void *eth80211_hdr ;
} __attribute__((__packed__));
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct wait_queue_entry;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_entry {
   unsigned int flags ;
   void *private ;
   int (*func)(struct wait_queue_entry *, unsigned int , int , void *) ;
   struct list_head entry ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 3362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct element {
   u8 id ;
   u8 datalen ;
   u8 data[] ;
} __attribute__((__packed__));
#line 3039  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_sta_flag_update {
   __u32 mask ;
   __u32 set ;
} __attribute__((__packed__));
#line 3362 
enum nl80211_mesh_power_mode {
    NL80211_MESH_POWER_UNKNOWN = 0,
    NL80211_MESH_POWER_ACTIVE = 1,
    NL80211_MESH_POWER_LIGHT_SLEEP = 2,
    NL80211_MESH_POWER_DEEP_SLEEP = 3,
    __NL80211_MESH_POWER_AFTER_LAST = 4,
    NL80211_MESH_POWER_MAX = 3
};
#line 3431 
enum nl80211_ac {
    NL80211_AC_VO = 0,
    NL80211_AC_VI = 1,
    NL80211_AC_BE = 2,
    NL80211_AC_BK = 3,
    NL80211_NUM_ACS = 4
};
#line 3439 
enum nl80211_channel_type {
    NL80211_CHAN_NO_HT = 0,
    NL80211_CHAN_HT20 = 1,
    NL80211_CHAN_HT40MINUS = 2,
    NL80211_CHAN_HT40PLUS = 3
};
#line 3514 
enum nl80211_key_type {
    NL80211_KEYTYPE_GROUP = 0,
    NL80211_KEYTYPE_PAIRWISE = 1,
    NL80211_KEYTYPE_PEERKEY = 2,
    NUM_NL80211_KEYTYPES = 3
};
#line 4593 
enum nl80211_txrate_gi {
    NL80211_TXRATE_DEFAULT_GI = 0,
    NL80211_TXRATE_FORCE_SGI = 1,
    NL80211_TXRATE_FORCE_LGI = 2
};
#line 4633 
enum nl80211_tx_power_setting {
    NL80211_TX_POWER_AUTOMATIC = 0,
    NL80211_TX_POWER_LIMITED = 1,
    NL80211_TX_POWER_FIXED = 2
};
#line 5014 
enum nl80211_coalesce_condition {
    NL80211_COALESCE_CONDITION_MATCH = 0,
    NL80211_COALESCE_CONDITION_NO_MATCH = 1
};
#line 5068 
enum nl80211_hidden_ssid {
    NL80211_HIDDEN_SSID_NOT_IN_USE = 0,
    NL80211_HIDDEN_SSID_ZERO_LEN = 1,
    NL80211_HIDDEN_SSID_ZERO_CONTENTS = 2
};
#line 5091 
enum nl80211_tdls_operation {
    NL80211_TDLS_DISCOVERY_REQ = 0,
    NL80211_TDLS_SETUP = 1,
    NL80211_TDLS_TEARDOWN = 2,
    NL80211_TDLS_ENABLE_LINK = 3,
    NL80211_TDLS_DISABLE_LINK = 4
};
#line 5192 
enum nl80211_timeout_reason {
    NL80211_TIMEOUT_UNSPECIFIED = 0,
    NL80211_TIMEOUT_SCAN = 1,
    NL80211_TIMEOUT_AUTH = 2,
    NL80211_TIMEOUT_ASSOC = 3
};
#line 5215 
enum nl80211_acl_policy {
    NL80211_ACL_POLICY_ACCEPT_UNLESS_LISTED = 0,
    NL80211_ACL_POLICY_DENY_UNLESS_LISTED = 1
};
#line 5220 
enum nl80211_smps_mode {
    NL80211_SMPS_OFF = 0,
    NL80211_SMPS_STATIC = 1,
    NL80211_SMPS_DYNAMIC = 2,
    __NL80211_SMPS_AFTER_LAST = 3,
    NL80211_SMPS_MAX = 2
};
#line 5247 
enum nl80211_crit_proto_id {
    NL80211_CRIT_PROTO_UNSPEC = 0,
    NL80211_CRIT_PROTO_DHCP = 1,
    NL80211_CRIT_PROTO_EAPOL = 2,
    NL80211_CRIT_PROTO_APIPA = 3,
    NUM_NL80211_CRIT_PROTO = 4
};
#line 5912 
enum nl80211_nan_function_type {
    NL80211_NAN_FUNC_PUBLISH = 0,
    NL80211_NAN_FUNC_SUBSCRIBE = 1,
    NL80211_NAN_FUNC_FOLLOW_UP = 2,
    __NL80211_NAN_FUNC_TYPE_AFTER_LAST = 3,
    NL80211_NAN_FUNC_MAX_TYPE = 2
};
#line 5971 
enum nl80211_external_auth_action {
    NL80211_EXTERNAL_AUTH_START = 0,
    NL80211_EXTERNAL_AUTH_ABORT = 1
};
#line 6001 
enum nl80211_preamble {
    NL80211_PREAMBLE_LEGACY = 0,
    NL80211_PREAMBLE_HT = 1,
    NL80211_PREAMBLE_VHT = 2,
    NL80211_PREAMBLE_DMG = 3
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
enum ieee80211_privacy {
    IEEE80211_PRIVACY_ON = 0,
    IEEE80211_PRIVACY_OFF = 1,
    IEEE80211_PRIVACY_ANY = 2
};
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_he_obss_pd {
   bool enable ;
   u8 min_offset ;
   u8 max_offset ;
};
#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct vif_params {
   u32 flags ;
   int use_4addr ;
   u8 macaddr[6U] ;
   u8 *vht_mumimo_groups ;
   u8 *vht_mumimo_follow_addr ;
};
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct survey_info {
   struct ieee80211_channel *channel ;
   u64 time ;
   u64 time_busy ;
   u64 time_ext_busy ;
   u64 time_rx ;
   u64 time_tx ;
   u64 time_scan ;
   u64 time_bss_rx ;
   u32 filled ;
   s8 noise ;
};
#line 898  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_beacon_data {
   u8 *head ;
   u8 *tail ;
   u8 *beacon_ies ;
   u8 *proberesp_ies ;
   u8 *assocresp_ies ;
   u8 *probe_resp ;
   u8 *lci ;
   u8 *civicloc ;
   s8 ftm_responder ;
   size_t head_len ;
   size_t tail_len ;
   size_t beacon_ies_len ;
   size_t proberesp_ies_len ;
   size_t assocresp_ies_len ;
   size_t probe_resp_len ;
   size_t lci_len ;
   size_t civicloc_len ;
};
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_acl_data {
   enum nl80211_acl_policy acl_policy ;
   int n_acl_entries ;
   struct mac_address mac_addrs[] ;
};
#line 940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_control_2976 {
   u32 legacy ;
   u8 ht_mcs[10U] ;
   u16 vht_mcs[8U] ;
   enum nl80211_txrate_gi gi ;
};
#line 940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bitrate_mask {
   struct __anonstruct_control_2976 control[4U] ;
};
#line 994  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ap_settings {
   struct cfg80211_chan_def chandef ;
   struct cfg80211_beacon_data beacon ;
   int beacon_interval ;
   int dtim_period ;
   u8 *ssid ;
   size_t ssid_len ;
   enum nl80211_hidden_ssid hidden_ssid ;
   struct cfg80211_crypto_settings crypto ;
   bool privacy ;
   enum nl80211_auth_type auth_type ;
   enum nl80211_smps_mode smps_mode ;
   int inactivity_timeout ;
   u8 p2p_ctwindow ;
   bool p2p_opp_ps ;
   struct cfg80211_acl_data *acl ;
   bool pbss ;
   struct cfg80211_bitrate_mask beacon_rate ;
   struct ieee80211_ht_cap *ht_cap ;
   struct ieee80211_vht_cap *vht_cap ;
   struct ieee80211_he_cap_elem *he_cap ;
   bool ht_required ;
   bool vht_required ;
   bool twt_responder ;
   u32 flags ;
   struct ieee80211_he_obss_pd he_obss_pd ;
};
#line 1039  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_csa_settings {
   struct cfg80211_chan_def chandef ;
   struct cfg80211_beacon_data beacon_csa ;
   u16 *counter_offsets_beacon ;
   u16 *counter_offsets_presp ;
   unsigned int n_counter_offsets_beacon ;
   unsigned int n_counter_offsets_presp ;
   struct cfg80211_beacon_data beacon_after ;
   bool radar_required ;
   bool block_tx ;
   u8 count ;
};
#line 1109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct sta_txpwr {
   s16 power ;
   enum nl80211_tx_power_setting type ;
};
#line 1158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct station_parameters {
   u8 *supported_rates ;
   struct net_device *vlan ;
   u32 sta_flags_mask ;
   u32 sta_flags_set ;
   u32 sta_modify_mask ;
   int listen_interval ;
   u16 aid ;
   u16 vlan_id ;
   u16 peer_aid ;
   u8 supported_rates_len ;
   u8 plink_action ;
   u8 plink_state ;
   struct ieee80211_ht_cap *ht_capa ;
   struct ieee80211_vht_cap *vht_capa ;
   u8 uapsd_queues ;
   u8 max_sp ;
   enum nl80211_mesh_power_mode local_pm ;
   u16 capability ;
   u8 *ext_capab ;
   u8 ext_capab_len ;
   u8 *supported_channels ;
   u8 supported_channels_len ;
   u8 *supported_oper_classes ;
   u8 supported_oper_classes_len ;
   u8 opmode_notif ;
   bool opmode_notif_used ;
   int support_p2p_ps ;
   struct ieee80211_he_cap_elem *he_capa ;
   u8 he_capa_len ;
   u16 airtime_weight ;
   struct sta_txpwr txpwr ;
};
#line 1201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct station_del_parameters {
   u8 *mac ;
   u8 subtype ;
   u16 reason_code ;
};
#line 1314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct rate_info {
   u8 flags ;
   u8 mcs ;
   u16 legacy ;
   u8 nss ;
   u8 bw ;
   u8 he_gi ;
   u8 he_dcm ;
   u8 he_ru_alloc ;
   u8 n_bonded_ch ;
};
#line 1351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct sta_bss_parameters {
   u8 flags ;
   u8 dtim_period ;
   u16 beacon_interval ;
};
#line 1373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_txq_stats {
   u32 filled ;
   u32 backlog_bytes ;
   u32 backlog_packets ;
   u32 flows ;
   u32 drops ;
   u32 ecn_marks ;
   u32 overlimit ;
   u32 overmemory ;
   u32 collisions ;
   u32 tx_bytes ;
   u32 tx_packets ;
   u32 max_flows ;
};
#line 1399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_tid_stats {
   u32 filled ;
   u64 rx_msdu ;
   u64 tx_msdu ;
   u64 tx_msdu_retries ;
   u64 tx_msdu_failed ;
   struct cfg80211_txq_stats txq_stats ;
};
#line 1476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct station_info {
   u64 filled ;
   u32 connected_time ;
   u32 inactive_time ;
   u64 assoc_at ;
   u64 rx_bytes ;
   u64 tx_bytes ;
   u16 llid ;
   u16 plid ;
   u8 plink_state ;
   s8 signal ;
   s8 signal_avg ;
   u8 chains ;
   s8 chain_signal[4U] ;
   s8 chain_signal_avg[4U] ;
   struct rate_info txrate ;
   struct rate_info rxrate ;
   u32 rx_packets ;
   u32 tx_packets ;
   u32 tx_retries ;
   u32 tx_failed ;
   u32 rx_dropped_misc ;
   struct sta_bss_parameters bss_param ;
   struct nl80211_sta_flag_update sta_flags ;
   int generation ;
   u8 *assoc_req_ies ;
   size_t assoc_req_ies_len ;
   u32 beacon_loss_count ;
   s64 t_offset ;
   enum nl80211_mesh_power_mode local_pm ;
   enum nl80211_mesh_power_mode peer_pm ;
   enum nl80211_mesh_power_mode nonpeer_pm ;
   u32 expected_throughput ;
   u64 tx_duration ;
   u64 rx_duration ;
   u64 rx_beacon ;
   u8 rx_beacon_signal_avg ;
   u8 connected_to_gate ;
   struct cfg80211_tid_stats *pertid ;
   s8 ack_signal ;
   s8 avg_ack_signal ;
   u16 airtime_weight ;
   u32 rx_mpdu_count ;
   u32 fcs_err_count ;
   u32 airtime_link_metric ;
};
#line 1628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct mpath_info {
   u32 filled ;
   u32 frame_qlen ;
   u32 sn ;
   u32 metric ;
   u32 exptime ;
   u32 discovery_timeout ;
   u8 discovery_retries ;
   u8 flags ;
   u8 hop_count ;
   u32 path_change_count ;
   int generation ;
};
#line 1663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct bss_parameters {
   int use_cts_prot ;
   int use_short_preamble ;
   int use_short_slot_time ;
   u8 *basic_rates ;
   u8 basic_rates_len ;
   int ap_isolate ;
   int ht_opmode ;
   s8 p2p_ctwindow ;
   s8 p2p_opp_ps ;
};
#line 1748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct mesh_config {
   u16 dot11MeshRetryTimeout ;
   u16 dot11MeshConfirmTimeout ;
   u16 dot11MeshHoldingTimeout ;
   u16 dot11MeshMaxPeerLinks ;
   u8 dot11MeshMaxRetries ;
   u8 dot11MeshTTL ;
   u8 element_ttl ;
   bool auto_open_plinks ;
   u32 dot11MeshNbrOffsetMaxNeighbor ;
   u8 dot11MeshHWMPmaxPREQretries ;
   u32 path_refresh_time ;
   u16 min_discovery_timeout ;
   u32 dot11MeshHWMPactivePathTimeout ;
   u16 dot11MeshHWMPpreqMinInterval ;
   u16 dot11MeshHWMPperrMinInterval ;
   u16 dot11MeshHWMPnetDiameterTraversalTime ;
   u8 dot11MeshHWMPRootMode ;
   bool dot11MeshConnectedToMeshGate ;
   u16 dot11MeshHWMPRannInterval ;
   bool dot11MeshGateAnnouncementProtocol ;
   bool dot11MeshForwarding ;
   s32 rssi_threshold ;
   u16 ht_opmode ;
   u32 dot11MeshHWMPactivePathToRootTimeout ;
   u16 dot11MeshHWMProotInterval ;
   u16 dot11MeshHWMPconfirmationInterval ;
   enum nl80211_mesh_power_mode power_mode ;
   u16 dot11MeshAwakeWindowDuration ;
   u32 plink_timeout ;
};
#line 1807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct mesh_setup {
   struct cfg80211_chan_def chandef ;
   u8 *mesh_id ;
   u8 mesh_id_len ;
   u8 sync_method ;
   u8 path_sel_proto ;
   u8 path_metric ;
   u8 auth_id ;
   u8 *ie ;
   u8 ie_len ;
   bool is_authenticated ;
   bool is_secure ;
   bool user_mpm ;
   u8 dtim_period ;
   u16 beacon_interval ;
   int mcast_rate[4U] ;
   u32 basic_rates ;
   struct cfg80211_bitrate_mask beacon_rate ;
   bool userspace_handles_dfs ;
   bool control_port_over_nl80211 ;
};
#line 1835  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ocb_setup {
   struct cfg80211_chan_def chandef ;
};
#line 1849  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_txq_params {
   enum nl80211_ac ac ;
   u16 txop ;
   u16 cwmin ;
   u16 cwmax ;
   u8 aifs ;
};
#line 2143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_inform_bss {
   struct ieee80211_channel *chan ;
   enum nl80211_bss_scan_width scan_width ;
   s32 signal ;
   u64 boottime_ns ;
   u64 parent_tsf ;
   u8 parent_bssid[6U] ;
   u8 chains ;
   s8 chain_signal[4U] ;
};
#line 2162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_ies {
   u64 tsf ;
   struct callback_head callback_head ;
   int len ;
   bool from_beacon ;
   u8 data[] ;
};
#line 2205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss {
   struct ieee80211_channel *channel ;
   enum nl80211_bss_scan_width scan_width ;
   struct cfg80211_bss_ies *ies ;
   struct cfg80211_bss_ies *beacon_ies ;
   struct cfg80211_bss_ies *proberesp_ies ;
   struct cfg80211_bss *hidden_beacon_bss ;
   struct cfg80211_bss *transmitted_bss ;
   struct list_head nontrans_list ;
   s32 signal ;
   u16 beacon_interval ;
   u16 capability ;
   u8 bssid[6U] ;
   u8 chains ;
   s8 chain_signal[4U] ;
   u8 bssid_index ;
   u8 max_bssid_indicator ;
   u8 priv[0U] ;
};
#line 2278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_auth_request {
   struct cfg80211_bss *bss ;
   u8 *ie ;
   size_t ie_len ;
   enum nl80211_auth_type auth_type ;
   u8 *key ;
   u8 key_len ;
   u8 key_idx ;
   u8 *auth_data ;
   size_t auth_data_len ;
};
#line 2339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_assoc_request {
   struct cfg80211_bss *bss ;
   u8 *ie ;
   u8 *prev_bssid ;
   size_t ie_len ;
   struct cfg80211_crypto_settings crypto ;
   bool use_mfp ;
   u32 flags ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct ieee80211_vht_cap vht_capa ;
   struct ieee80211_vht_cap vht_capa_mask ;
   u8 *fils_kek ;
   size_t fils_kek_len ;
   u8 *fils_nonces ;
};
#line 2367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_deauth_request {
   u8 *bssid ;
   u8 *ie ;
   size_t ie_len ;
   u16 reason_code ;
   bool local_state_change ;
};
#line 2388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_disassoc_request {
   struct cfg80211_bss *bss ;
   u8 *ie ;
   size_t ie_len ;
   u16 reason_code ;
   bool local_state_change ;
};
#line 2635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmksa {
   u8 *bssid ;
   u8 *pmkid ;
   u8 *pmk ;
   size_t pmk_len ;
   u8 *ssid ;
   size_t ssid_len ;
   u8 *cache_id ;
};
#line 2735  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_coalesce_rules {
   int delay ;
   enum nl80211_coalesce_condition condition ;
   struct cfg80211_pkt_pattern *patterns ;
   int n_patterns ;
};
#line 2749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_coalesce {
   struct cfg80211_coalesce_rules *rules ;
   int n_rules ;
};
#line 2821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_gtk_rekey_data {
   u8 *kek ;
   u8 *kck ;
   u8 *replay_ctr ;
};
#line 2834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_update_ft_ies_params {
   u16 md ;
   u8 *ie ;
   size_t ie_len ;
};
#line 2855  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_mgmt_tx_params {
   struct ieee80211_channel *chan ;
   bool offchan ;
   unsigned int wait ;
   u8 *buf ;
   size_t len ;
   bool no_cck ;
   bool dont_wait_for_ack ;
   int n_csa_offsets ;
   u16 *csa_offsets ;
};
#line 2873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_dscp_exception {
   u8 dscp ;
   u8 up ;
};
#line 2884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_dscp_range {
   u8 low ;
   u8 high ;
};
#line 2905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_qos_map {
   u8 num_des ;
   struct cfg80211_dscp_exception dscp_exception[21U] ;
   struct cfg80211_dscp_range up[8U] ;
};
#line 2921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_nan_conf {
   u8 master_pref ;
   u8 bands ;
};
#line 2944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_nan_func_filter {
   u8 *filter ;
   u8 len ;
};
#line 2978  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_nan_func {
   enum nl80211_nan_function_type type ;
   u8 service_id[6U] ;
   u8 publish_type ;
   bool close_range ;
   bool publish_bcast ;
   bool subscribe_active ;
   u8 followup_id ;
   u8 followup_reqid ;
   struct mac_address followup_dest ;
   u32 ttl ;
   u8 *serv_spec_info ;
   u8 serv_spec_info_len ;
   bool srf_include ;
   u8 *srf_bf ;
   u8 srf_bf_len ;
   u8 srf_bf_idx ;
   struct mac_address *srf_macs ;
   int srf_num_macs ;
   struct cfg80211_nan_func_filter *rx_filters ;
   struct cfg80211_nan_func_filter *tx_filters ;
   u8 num_tx_filters ;
   u8 num_rx_filters ;
   u8 instance_id ;
   u64 cookie ;
};
#line 3015  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmk_conf {
   u8 *aa ;
   u8 pmk_len ;
   u8 *pmk ;
   u8 *pmk_r0_name ;
};
#line 3042  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_external_auth_params {
   enum nl80211_external_auth_action action ;
   u8 bssid[6U] ;
   struct cfg80211_ssid ssid ;
   unsigned int key_mgmt_suite ;
   u16 status ;
   u8 *pmkid ;
};
#line 3072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ftm_responder_stats {
   u32 filled ;
   u32 success_num ;
   u32 partial_num ;
   u32 failed_num ;
   u32 asap_num ;
   u32 non_asap_num ;
   u64 total_duration_ms ;
   u32 unknown_triggers_num ;
   u32 reschedule_requests_num ;
   u32 out_of_window_triggers_num ;
};
#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_ftm_request_peer {
   enum nl80211_preamble preamble ;
   u16 burst_period ;
   u8 requested : 1 ;
   u8 asap : 1 ;
   u8 request_lci : 1 ;
   u8 request_civicloc : 1 ;
   u8 num_bursts_exp ;
   u8 burst_duration ;
   u8 ftms_per_burst ;
   u8 ftmr_retries ;
};
#line 3230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_request_peer {
   u8 addr[6U] ;
   struct cfg80211_chan_def chandef ;
   u8 report_ap_tsf : 1 ;
   struct cfg80211_pmsr_ftm_request_peer ftm ;
};
#line 3253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_request {
   u64 cookie ;
   void *drv_data ;
   u32 n_peers ;
   u32 nl_portid ;
   u32 timeout ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   struct list_head list ;
   struct cfg80211_pmsr_request_peer peers[] ;
};
#line 3288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_update_owe_info {
   u8 peer[6U] ;
   u16 status ;
   u8 *ie ;
   size_t ie_len ;
};
#line 3643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ops {
   int (*suspend)(struct wiphy *, struct cfg80211_wowlan *) ;
   int (*resume)(struct wiphy *) ;
   void (*set_wakeup)(struct wiphy *, bool ) ;
   struct wireless_dev *(*add_virtual_intf)(struct wiphy *, char *, unsigned char , enum nl80211_iftype , struct vif_params *) ;
   int (*del_virtual_intf)(struct wiphy *, struct wireless_dev *) ;
   int (*change_virtual_intf)(struct wiphy *, struct net_device *, enum nl80211_iftype , struct vif_params *) ;
   int (*add_key)(struct wiphy *, struct net_device *, u8 , bool , u8 *, struct key_params *) ;
   int (*get_key)(struct wiphy *, struct net_device *, u8 , bool , u8 *, void *, void (*)(void *, struct key_params *)) ;
   int (*del_key)(struct wiphy *, struct net_device *, u8 , bool , u8 *) ;
   int (*set_default_key)(struct wiphy *, struct net_device *, u8 , bool , bool ) ;
   int (*set_default_mgmt_key)(struct wiphy *, struct net_device *, u8 ) ;
   int (*start_ap)(struct wiphy *, struct net_device *, struct cfg80211_ap_settings *) ;
   int (*change_beacon)(struct wiphy *, struct net_device *, struct cfg80211_beacon_data *) ;
   int (*stop_ap)(struct wiphy *, struct net_device *) ;
   int (*add_station)(struct wiphy *, struct net_device *, u8 *, struct station_parameters *) ;
   int (*del_station)(struct wiphy *, struct net_device *, struct station_del_parameters *) ;
   int (*change_station)(struct wiphy *, struct net_device *, u8 *, struct station_parameters *) ;
   int (*get_station)(struct wiphy *, struct net_device *, u8 *, struct station_info *) ;
   int (*dump_station)(struct wiphy *, struct net_device *, int , u8 *, struct station_info *) ;
   int (*add_mpath)(struct wiphy *, struct net_device *, u8 *, u8 *) ;
   int (*del_mpath)(struct wiphy *, struct net_device *, u8 *) ;
   int (*change_mpath)(struct wiphy *, struct net_device *, u8 *, u8 *) ;
   int (*get_mpath)(struct wiphy *, struct net_device *, u8 *, u8 *, struct mpath_info *) ;
   int (*dump_mpath)(struct wiphy *, struct net_device *, int , u8 *, u8 *, struct mpath_info *) ;
   int (*get_mpp)(struct wiphy *, struct net_device *, u8 *, u8 *, struct mpath_info *) ;
   int (*dump_mpp)(struct wiphy *, struct net_device *, int , u8 *, u8 *, struct mpath_info *) ;
   int (*get_mesh_config)(struct wiphy *, struct net_device *, struct mesh_config *) ;
   int (*update_mesh_config)(struct wiphy *, struct net_device *, u32 , struct mesh_config *) ;
   int (*join_mesh)(struct wiphy *, struct net_device *, struct mesh_config *, struct mesh_setup *) ;
   int (*leave_mesh)(struct wiphy *, struct net_device *) ;
   int (*join_ocb)(struct wiphy *, struct net_device *, struct ocb_setup *) ;
   int (*leave_ocb)(struct wiphy *, struct net_device *) ;
   int (*change_bss)(struct wiphy *, struct net_device *, struct bss_parameters *) ;
   int (*set_txq_params)(struct wiphy *, struct net_device *, struct ieee80211_txq_params *) ;
   int (*libertas_set_mesh_channel)(struct wiphy *, struct net_device *, struct ieee80211_channel *) ;
   int (*set_monitor_channel)(struct wiphy *, struct cfg80211_chan_def *) ;
   int (*scan)(struct wiphy *, struct cfg80211_scan_request *) ;
   void (*abort_scan)(struct wiphy *, struct wireless_dev *) ;
   int (*auth)(struct wiphy *, struct net_device *, struct cfg80211_auth_request *) ;
   int (*assoc)(struct wiphy *, struct net_device *, struct cfg80211_assoc_request *) ;
   int (*deauth)(struct wiphy *, struct net_device *, struct cfg80211_deauth_request *) ;
   int (*disassoc)(struct wiphy *, struct net_device *, struct cfg80211_disassoc_request *) ;
   int (*connect)(struct wiphy *, struct net_device *, struct cfg80211_connect_params *) ;
   int (*update_connect_params)(struct wiphy *, struct net_device *, struct cfg80211_connect_params *, u32 ) ;
   int (*disconnect)(struct wiphy *, struct net_device *, u16 ) ;
   int (*join_ibss)(struct wiphy *, struct net_device *, struct cfg80211_ibss_params *) ;
   int (*leave_ibss)(struct wiphy *, struct net_device *) ;
   int (*set_mcast_rate)(struct wiphy *, struct net_device *, int *) ;
   int (*set_wiphy_params)(struct wiphy *, u32 ) ;
   int (*set_tx_power)(struct wiphy *, struct wireless_dev *, enum nl80211_tx_power_setting , int ) ;
   int (*get_tx_power)(struct wiphy *, struct wireless_dev *, int *) ;
   int (*set_wds_peer)(struct wiphy *, struct net_device *, u8 *) ;
   void (*rfkill_poll)(struct wiphy *) ;
   int (*testmode_cmd)(struct wiphy *, struct wireless_dev *, void *, int ) ;
   int (*testmode_dump)(struct wiphy *, struct sk_buff *, struct netlink_callback *, void *, int ) ;
   int (*set_bitrate_mask)(struct wiphy *, struct net_device *, u8 *, struct cfg80211_bitrate_mask *) ;
   int (*dump_survey)(struct wiphy *, struct net_device *, int , struct survey_info *) ;
   int (*set_pmksa)(struct wiphy *, struct net_device *, struct cfg80211_pmksa *) ;
   int (*del_pmksa)(struct wiphy *, struct net_device *, struct cfg80211_pmksa *) ;
   int (*flush_pmksa)(struct wiphy *, struct net_device *) ;
   int (*remain_on_channel)(struct wiphy *, struct wireless_dev *, struct ieee80211_channel *, unsigned int , u64 *) ;
   int (*cancel_remain_on_channel)(struct wiphy *, struct wireless_dev *, u64 ) ;
   int (*mgmt_tx)(struct wiphy *, struct wireless_dev *, struct cfg80211_mgmt_tx_params *, u64 *) ;
   int (*mgmt_tx_cancel_wait)(struct wiphy *, struct wireless_dev *, u64 ) ;
   int (*set_power_mgmt)(struct wiphy *, struct net_device *, bool , int ) ;
   int (*set_cqm_rssi_config)(struct wiphy *, struct net_device *, s32 , u32 ) ;
   int (*set_cqm_rssi_range_config)(struct wiphy *, struct net_device *, s32 , s32 ) ;
   int (*set_cqm_txe_config)(struct wiphy *, struct net_device *, u32 , u32 , u32 ) ;
   void (*mgmt_frame_register)(struct wiphy *, struct wireless_dev *, u16 , bool ) ;
   int (*set_antenna)(struct wiphy *, u32 , u32 ) ;
   int (*get_antenna)(struct wiphy *, u32 *, u32 *) ;
   int (*sched_scan_start)(struct wiphy *, struct net_device *, struct cfg80211_sched_scan_request *) ;
   int (*sched_scan_stop)(struct wiphy *, struct net_device *, u64 ) ;
   int (*set_rekey_data)(struct wiphy *, struct net_device *, struct cfg80211_gtk_rekey_data *) ;
   int (*tdls_mgmt)(struct wiphy *, struct net_device *, u8 *, u8 , u8 , u16 , u32 , bool , u8 *, size_t ) ;
   int (*tdls_oper)(struct wiphy *, struct net_device *, u8 *, enum nl80211_tdls_operation ) ;
   int (*probe_client)(struct wiphy *, struct net_device *, u8 *, u64 *) ;
   int (*set_noack_map)(struct wiphy *, struct net_device *, u16 ) ;
   int (*get_channel)(struct wiphy *, struct wireless_dev *, struct cfg80211_chan_def *) ;
   int (*start_p2p_device)(struct wiphy *, struct wireless_dev *) ;
   void (*stop_p2p_device)(struct wiphy *, struct wireless_dev *) ;
   int (*set_mac_acl)(struct wiphy *, struct net_device *, struct cfg80211_acl_data *) ;
   int (*start_radar_detection)(struct wiphy *, struct net_device *, struct cfg80211_chan_def *, u32 ) ;
   void (*end_cac)(struct wiphy *, struct net_device *) ;
   int (*update_ft_ies)(struct wiphy *, struct net_device *, struct cfg80211_update_ft_ies_params *) ;
   int (*crit_proto_start)(struct wiphy *, struct wireless_dev *, enum nl80211_crit_proto_id , u16 ) ;
   void (*crit_proto_stop)(struct wiphy *, struct wireless_dev *) ;
   int (*set_coalesce)(struct wiphy *, struct cfg80211_coalesce *) ;
   int (*channel_switch)(struct wiphy *, struct net_device *, struct cfg80211_csa_settings *) ;
   int (*set_qos_map)(struct wiphy *, struct net_device *, struct cfg80211_qos_map *) ;
   int (*set_ap_chanwidth)(struct wiphy *, struct net_device *, struct cfg80211_chan_def *) ;
   int (*add_tx_ts)(struct wiphy *, struct net_device *, u8 , u8 *, u8 , u16 ) ;
   int (*del_tx_ts)(struct wiphy *, struct net_device *, u8 , u8 *) ;
   int (*tdls_channel_switch)(struct wiphy *, struct net_device *, u8 *, u8 , struct cfg80211_chan_def *) ;
   void (*tdls_cancel_channel_switch)(struct wiphy *, struct net_device *, u8 *) ;
   int (*start_nan)(struct wiphy *, struct wireless_dev *, struct cfg80211_nan_conf *) ;
   void (*stop_nan)(struct wiphy *, struct wireless_dev *) ;
   int (*add_nan_func)(struct wiphy *, struct wireless_dev *, struct cfg80211_nan_func *) ;
   void (*del_nan_func)(struct wiphy *, struct wireless_dev *, u64 ) ;
   int (*nan_change_conf)(struct wiphy *, struct wireless_dev *, struct cfg80211_nan_conf *, u32 ) ;
   int (*set_multicast_to_unicast)(struct wiphy *, struct net_device *, bool ) ;
   int (*get_txq_stats)(struct wiphy *, struct wireless_dev *, struct cfg80211_txq_stats *) ;
   int (*set_pmk)(struct wiphy *, struct net_device *, struct cfg80211_pmk_conf *) ;
   int (*del_pmk)(struct wiphy *, struct net_device *, u8 *) ;
   int (*external_auth)(struct wiphy *, struct net_device *, struct cfg80211_external_auth_params *) ;
   int (*tx_control_port)(struct wiphy *, struct net_device *, u8 *, size_t , u8 *, __be16 , bool ) ;
   int (*get_ftm_responder_stats)(struct wiphy *, struct net_device *, struct cfg80211_ftm_responder_stats *) ;
   int (*start_pmsr)(struct wiphy *, struct wireless_dev *, struct cfg80211_pmsr_request *) ;
   void (*abort_pmsr)(struct wiphy *, struct wireless_dev *, struct cfg80211_pmsr_request *) ;
   int (*update_owe_info)(struct wiphy *, struct net_device *, struct cfg80211_update_owe_info *) ;
   int (*probe_mesh_link)(struct wiphy *, struct net_device *, u8 *, size_t ) ;
};
#line 5738 
enum cfg80211_bss_frame_type {
    CFG80211_BSS_FTYPE_UNKNOWN = 0,
    CFG80211_BSS_FTYPE_BEACON = 1,
    CFG80211_BSS_FTYPE_PRESP = 2
};
#line 6386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_fils_resp_params {
   u8 *kek ;
   size_t kek_len ;
   bool update_erp_next_seq_num ;
   u16 erp_next_seq_num ;
   u8 *pmk ;
   size_t pmk_len ;
   u8 *pmkid ;
};
#line 6425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_connect_resp_params {
   int status ;
   u8 *bssid ;
   struct cfg80211_bss *bss ;
   u8 *req_ie ;
   size_t req_ie_len ;
   u8 *resp_ie ;
   size_t resp_ie_len ;
   struct cfg80211_fils_resp_params fils ;
   enum nl80211_timeout_reason timeout_reason ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/types.h"
struct ieee_ie_header {
   u8 id ;
   u8 len ;
} __attribute__((__packed__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/types.h"
struct ieee_ie_ibss_param_set {
   struct ieee_ie_header header ;
   __le16 atimwindow ;
} __attribute__((__packed__));
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/types.h"
struct ieee_ie_ds_param_set {
   struct ieee_ie_header header ;
   u8 channel ;
} __attribute__((__packed__));
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/types.h"
struct mrvl_ie_header {
   __le16 type ;
   __le16 len ;
} __attribute__((__packed__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/types.h"
struct mrvl_ie_rates_param_set {
   struct mrvl_ie_header header ;
   u8 rates[1U] ;
} __attribute__((__packed__));
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/types.h"
struct mrvl_ie_ssid_param_set {
   struct mrvl_ie_header header ;
   u8 ssid[1U] ;
} __attribute__((__packed__));
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/types.h"
struct chanscanmode {
   u8 passivescan : 1 ;
   u8 disablechanfilt : 1 ;
   u8 reserved_2_7 : 6 ;
} __attribute__((__packed__));
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/types.h"
struct chanscanparamset {
   u8 radiotype ;
   u8 channumber ;
   struct chanscanmode chanscanmode ;
   __le16 minscantime ;
   __le16 maxscantime ;
} __attribute__((__packed__));
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/types.h"
struct mrvl_ie_cf_param_set {
   struct mrvl_ie_header header ;
   u8 cfpcnt ;
   u8 cfpperiod ;
   __le16 cfpmaxduration ;
   __le16 cfpdurationremaining ;
} __attribute__((__packed__));
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/types.h"
struct mrvl_ie_ds_param_set {
   struct mrvl_ie_header header ;
   u8 channel ;
} __attribute__((__packed__));
#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/types.h"
struct mrvl_ie_auth_type {
   struct mrvl_ie_header header ;
   __le16 auth ;
} __attribute__((__packed__));
#line 459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_scan {
   struct cmd_header hdr ;
   uint8_t bsstype ;
   uint8_t bssid[6U] ;
   uint8_t tlvbuffer[0U] ;
} __attribute__((__packed__));
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_scan_rsp {
   struct cmd_header hdr ;
   __le16 bssdescriptsize ;
   uint8_t nr_sets ;
   uint8_t bssdesc_and_tlvbuffer[0U] ;
} __attribute__((__packed__));
#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_authenticate {
   struct cmd_header hdr ;
   u8 bssid[6U] ;
   u8 authtype ;
   u8 reserved[10U] ;
} __attribute__((__packed__));
#line 514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_deauthenticate {
   struct cmd_header hdr ;
   u8 macaddr[6U] ;
   __le16 reasoncode ;
} __attribute__((__packed__));
#line 521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_associate {
   struct cmd_header hdr ;
   u8 bssid[6U] ;
   __le16 capability ;
   __le16 listeninterval ;
   __le16 bcnperiod ;
   u8 dtimperiod ;
   u8 iebuf[512U] ;
} __attribute__((__packed__));
#line 532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_associate_response {
   struct cmd_header hdr ;
   __le16 capability ;
   __le16 statuscode ;
   __le16 aid ;
   u8 iebuf[512U] ;
} __attribute__((__packed__));
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_set_wep {
   struct cmd_header hdr ;
   __le16 action ;
   __le16 keyindex ;
   uint8_t keytype[4U] ;
   uint8_t keymaterial[4U][16U] ;
} __attribute__((__packed__));
#line 741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_ad_hoc_start {
   struct cmd_header hdr ;
   u8 ssid[32U] ;
   u8 bsstype ;
   __le16 beaconperiod ;
   u8 dtimperiod ;
   struct ieee_ie_ibss_param_set ibss ;
   u8 reserved1[4U] ;
   struct ieee_ie_ds_param_set ds ;
   u8 reserved2[4U] ;
   __le16 probedelay ;
   __le16 capability ;
   u8 rates[14U] ;
   u8 tlv_memory_size_pad[100U] ;
} __attribute__((__packed__));
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_ad_hoc_result {
   struct cmd_header hdr ;
   u8 pad[3U] ;
   u8 bssid[6U] ;
} __attribute__((__packed__));
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct adhoc_bssdesc {
   u8 bssid[6U] ;
   u8 ssid[32U] ;
   u8 type ;
   __le16 beaconperiod ;
   u8 dtimperiod ;
   __le64 timestamp ;
   __le64 localtime ;
   struct ieee_ie_ds_param_set ds ;
   u8 reserved1[4U] ;
   struct ieee_ie_ibss_param_set ibss ;
   u8 reserved2[4U] ;
   __le16 capability ;
   u8 rates[14U] ;
} __attribute__((__packed__));
#line 787  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_ad_hoc_join {
   struct cmd_header hdr ;
   struct adhoc_bssdesc bss ;
   __le16 failtimeout ;
   __le16 probedelay ;
} __attribute__((__packed__));
#line 795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_ad_hoc_stop {
   struct cmd_header hdr ;
} __attribute__((__packed__));
#line 799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_enable_rsn {
   struct cmd_header hdr ;
   __le16 action ;
   __le16 enable ;
} __attribute__((__packed__));
#line 806  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct MrvlIEtype_keyParamSet {
   __le16 type ;
   __le16 length ;
   __le16 keytypeid ;
   __le16 keyinfo ;
   __le16 keylen ;
   u8 key[32U] ;
} __attribute__((__packed__));
#line 967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
struct cmd_key_material {
   struct cmd_header hdr ;
   __le16 action ;
   struct MrvlIEtype_keyParamSet param ;
} __attribute__((__packed__));
#line 2064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
struct region_code_mapping {
   char *cn ;
   int code ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/types.h"
struct mrvl_ie_thresholds {
   struct mrvl_ie_header header ;
   u8 value ;
   u8 freq ;
} __attribute__((__packed__));
#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_subscribe_event {
   struct cmd_header hdr ;
   __le16 action ;
   __le16 events ;
   uint8_t tlv[128U] ;
} __attribute__((__packed__));
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/dev.h"
struct sleep_params {
   uint16_t sp_error ;
   uint16_t sp_offset ;
   uint16_t sp_stabletime ;
   uint8_t sp_calcontrol ;
   uint8_t sp_extsleepclk ;
   uint16_t sp_reserved ;
};
#line 654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
struct lbs_debugfs_files {
   char *name ;
   umode_t perm ;
   struct file_operations fops ;
};
#line 781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
struct debug_data {
   char name[32U] ;
   u32 size ;
   size_t addr ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3770 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_ps_mode {
   struct cmd_header hdr ;
   __le16 action ;
   __le16 nullpktinterval ;
   __le16 multipledtim ;
   __le16 reserved ;
   __le16 locallisteninterval ;
   __le16 adhoc_awake_period ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_4508 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_4508 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_4517 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
typedef struct wait_queue_entry wait_queue_entry_t;
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_4759 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_4759 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_mac_multicast_adr {
   struct cmd_header hdr ;
   __le16 action ;
   __le16 nr_of_adrs ;
   u8 maclist[192U] ;
} __attribute__((__packed__));
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_mac_address {
   struct cmd_header hdr ;
   __le16 action ;
   u8 macadd[6U] ;
} __attribute__((__packed__));
#line 716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_confirm_sleep {
   struct cmd_header hdr ;
   __le16 action ;
   __le16 nullpktinterval ;
   __le16 multipledtim ;
   __le16 reserved ;
   __le16 locallisteninterval ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 3610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 4  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/radiotap.h"
struct tx_radiotap_hdr {
   struct ieee80211_radiotap_header hdr ;
   u8 rate ;
   u8 txpower ;
   u8 rts_retries ;
   u8 data_retries ;
} __attribute__((__packed__));
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s8 int8_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_6765 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_6767 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_6769 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 2897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_chans_7485 {
   u8 first_channel ;
   u8 num_channels ;
   s8 max_power ;
} __attribute__((__packed__));
#line 2897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_ext_7486 {
   u8 reg_extension_id ;
   u8 reg_class ;
   u8 coverage_class ;
} __attribute__((__packed__));
#line 2897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
union __anonunion_7484 {
   struct __anonstruct_chans_7485 chans ;
   struct __anonstruct_ext_7486 ext ;
};
#line 2897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_country_ie_triplet {
   union __anonunion_7484 __anonCompField_ieee80211_country_ie_triplet_163 ;
} __attribute__((__packed__));
#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct mrvl_ie_domain_param_set {
   struct mrvl_ie_header header ;
   u8 country_code[3U] ;
   struct ieee80211_country_ie_triplet triplet[83U] ;
} __attribute__((__packed__));
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11d_domain_info {
   struct cmd_header hdr ;
   __le16 action ;
   struct mrvl_ie_domain_param_set domain ;
} __attribute__((__packed__));
#line 406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_get_hw_spec {
   struct cmd_header hdr ;
   __le16 hwifversion ;
   __le16 version ;
   __le16 nr_txpd ;
   __le16 nr_mcast_adr ;
   u8 permanentaddr[6U] ;
   __le16 regioncode ;
   __le16 nr_antenna ;
   __le32 fwrelease ;
   __le32 wcb_base ;
   __le32 rxpd_rdptr ;
   __le32 rxpd_wrptr ;
   __le32 fwcapinfo ;
} __attribute__((__packed__));
#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_mac_control {
   struct cmd_header hdr ;
   __le16 action ;
   u16 reserved ;
} __attribute__((__packed__));
#line 555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_snmp_mib {
   struct cmd_header hdr ;
   __le16 action ;
   __le16 oid ;
   __le16 bufsize ;
   u8 value[128U] ;
} __attribute__((__packed__));
#line 564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
union __anonunion_value_7496 {
   u8 bbp_rf ;
   __le32 mac ;
};
#line 564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_reg_access {
   struct cmd_header hdr ;
   __le16 action ;
   __le16 offset ;
   union __anonunion_value_7496 value ;
} __attribute__((__packed__));
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_radio_control {
   struct cmd_header hdr ;
   __le16 action ;
   __le16 control ;
} __attribute__((__packed__));
#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_sleep_params {
   struct cmd_header hdr ;
   __le16 action ;
   __le16 error ;
   __le16 offset ;
   __le16 stabletime ;
   uint8_t calcontrol ;
   uint8_t externalsleepclk ;
   __le16 reserved ;
} __attribute__((__packed__));
#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_rf_channel {
   struct cmd_header hdr ;
   __le16 action ;
   __le16 channel ;
   __le16 rftype ;
   __le16 reserved ;
   u8 channellist[32U] ;
} __attribute__((__packed__));
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_rssi {
   struct cmd_header hdr ;
   __le16 n_or_snr ;
   __le16 nf ;
   __le16 avg_snr ;
   __le16 avg_nf ;
} __attribute__((__packed__));
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_rf_tx_power {
   struct cmd_header hdr ;
   __le16 action ;
   __le16 curlevel ;
   s8 maxlevel ;
   s8 minlevel ;
} __attribute__((__packed__));
#line 660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_monitor_mode {
   struct cmd_header hdr ;
   __le16 action ;
   __le16 mode ;
} __attribute__((__packed__));
#line 828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct host_wol_rule {
   uint8_t rule_no ;
   uint8_t rule_ops ;
   __le16 sig_offset ;
   __le16 sig_length ;
   __le16 reserve ;
   __be32 sig_mask ;
   __be32 signature ;
} __attribute__((__packed__));
#line 838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct wol_config {
   uint8_t action ;
   uint8_t pattern ;
   uint8_t no_rules_in_cmd ;
   uint8_t result ;
   struct host_wol_rule rule[16U] ;
} __attribute__((__packed__));
#line 846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_host_sleep {
   struct cmd_header hdr ;
   __le32 criteria ;
   uint8_t gpio ;
   uint16_t gap ;
   struct wol_config wol_conf ;
} __attribute__((__packed__));
#line 873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_tpc_cfg {
   struct cmd_header hdr ;
   __le16 action ;
   uint8_t enable ;
   int8_t P0 ;
   int8_t P1 ;
   int8_t P2 ;
   uint8_t usesnr ;
} __attribute__((__packed__));
#line 885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/host.h"
struct cmd_ds_802_11_pa_cfg {
   struct cmd_header hdr ;
   __le16 action ;
   uint8_t enable ;
   int8_t P0 ;
   int8_t P1 ;
   int8_t P2 ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_9278 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_9278 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_9279 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_9279 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_9295 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_9295 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_9299 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_9299 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_9300 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_9301 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_9300 __anonCompField_media_link_90 ;
   union __anonunion_9301 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_9303 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_9302 {
   struct __anonstruct_dev_9303 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_9302 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_9317 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_9318 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_9316 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_9317 i2c ;
   struct __anonstruct_custom_9318 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_9316 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_10219 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_10219 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 18  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 {
   struct device *arg0 ;
   struct device_attribute *arg1 ;
   int signal_pending ;
};
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_character_driver_scenario_11_27 {
   struct file_operations *arg0 ;
   int signal_pending ;
};
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_lbs_set_mac_address_42 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_26_43 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/ethtool.c"
struct ethtool_ops lbs_ethtool_ops;
#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/defs.h"
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
char lbs_driver_version[24U];
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.h"
#line 46 
int __lbs_cmd(struct lbs_private *priv, uint16_t command, struct cmd_header *in_cmd, int in_cmd_size, int (*callback)(struct lbs_private *, unsigned long , struct cmd_header *), unsigned long callback_arg);
#line 56 
#line 56 
int lbs_cmd_copyback(struct lbs_private *priv, unsigned long extra, struct cmd_header *resp);
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.h"
#line 54 
void lbs_mesh_ethtool_get_stats(struct net_device *dev, struct ethtool_stats *stats, uint64_t *data);
#line 56 
#line 56 
int lbs_mesh_ethtool_get_sset_count(struct net_device *dev, int sset);
#line 57 
#line 57 
void lbs_mesh_ethtool_get_strings(struct net_device *dev, uint32_t stringset, uint8_t *s);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/ethtool.c"
static void lbs_ethtool_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  #line 15 
  struct lbs_private *priv = (struct lbs_private *)dev->__anonCompField_net_device_159.ml_priv;
  #line 17 
  snprintf((char *)(& info->fw_version),32UL,(char *)"%u.%u.%u.p%u",priv->fwrelease >> 24,(priv->fwrelease >> 16) & 255U,(priv->fwrelease >> 8) & 255U,priv->fwrelease & 255U);
  #line 23 
  strlcpy((char *)(& info->driver),(char *)"libertas",32UL);
  #line 24 
  strlcpy((char *)(& info->version),(char *)(& lbs_driver_version),32UL);
  #line 25 
  return;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/ethtool.c"
static int lbs_ethtool_get_eeprom_len(struct net_device *dev)
{
  #line 35 
  return 16384;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/ethtool.c"
static int lbs_ethtool_get_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  #line 56 
  uint16_t __sz;
  #line 42 
  struct cmd_ds_802_11_eeprom_access cmd;
  #line 43 
  int ret;
  #line 41 
  struct lbs_private *priv = (struct lbs_private *)dev->__anonCompField_net_device_159.ml_priv;
  #line 45 
  if (eeprom->offset + eeprom->len > 16384U || eeprom->len > 20U) {
    #line 47 
    ret = -22;
    #line 48 
    goto out;
  }
  #line 51 
  cmd.hdr.size = (unsigned short)((unsigned int)((unsigned short)eeprom->len) + 14U);
  #line 53 
  cmd.action = (unsigned short)0U;
  #line 54 
  cmd.offset = (unsigned short)eeprom->offset;
  #line 55 
  cmd.len = (unsigned short)eeprom->len;
  #line 56 
  __sz = cmd.hdr.size;
  #line 56 
  cmd.hdr.size = (unsigned short)34U;
  #line 56 
  ret = __lbs_cmd(priv,(unsigned short)89,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 57 
  if (ret == 0) 
                #line 58 
                memcpy((void *)bytes,(void *)(& cmd.value),(unsigned long)eeprom->len);
  #line 60 
  out: 
       #line 60 
  ;
  #line 61 
  return ret;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/ethtool.c"
static void lbs_ethtool_get_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  #line 67 
  struct lbs_private *priv = (struct lbs_private *)dev->__anonCompField_net_device_159.ml_priv;
  #line 69 
  wol->supported = 15U;
  #line 71 
  if (priv->wol_criteria == 4294967295U) 
                                         #line 72 
                                         return;
  #line 74 
  if ((priv->wol_criteria & 2U) != 0U) 
                                       #line 75 
                                       wol->wolopts |= 2U;
  #line 76 
  if ((priv->wol_criteria & 8U) != 0U) 
                                       #line 77 
                                       wol->wolopts |= 4U;
  #line 78 
  if ((priv->wol_criteria & 1U) != 0U) 
                                       #line 79 
                                       wol->wolopts |= 8U;
  #line 80 
  if ((priv->wol_criteria & 4U) != 0U) 
                                       #line 81 
                                       wol->wolopts |= 1U;
  #line 82 
  return;
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/ethtool.c"
static int lbs_ethtool_set_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  #line 87 
  struct lbs_private *priv = (struct lbs_private *)dev->__anonCompField_net_device_159.ml_priv;
  #line 89 
  if ((wol->wolopts & 4294967280U) != 0U) 
                                          #line 90 
                                          return -95;
  #line 92 
  priv->wol_criteria = 0U;
  #line 93 
  if ((wol->wolopts & 2U) != 0U) 
                                 #line 94 
                                 priv->wol_criteria |= 2U;
  #line 95 
  if ((wol->wolopts & 4U) != 0U) 
                                 #line 96 
                                 priv->wol_criteria |= 8U;
  #line 97 
  if ((wol->wolopts & 8U) != 0U) 
                                 #line 98 
                                 priv->wol_criteria |= 1U;
  #line 99 
  if ((wol->wolopts & 1U) != 0U) 
                                 #line 100 
                                 priv->wol_criteria |= 4U;
  #line 101 
  if (wol->wolopts == 0U) 
                          #line 102 
                          priv->wol_criteria = 4294967295U;
  #line 103 
  return 0;
}

#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/ethtool.c"
struct ethtool_ops lbs_ethtool_ops = {.get_drvinfo = & lbs_ethtool_get_drvinfo, .get_wol = & lbs_ethtool_get_wol, .set_wol = & lbs_ethtool_set_wol, .get_eeprom_len = & lbs_ethtool_get_eeprom_len, .get_eeprom = & lbs_ethtool_get_eeprom, .get_strings = & lbs_mesh_ethtool_get_strings, .get_ethtool_stats = & lbs_mesh_ethtool_get_stats, .get_sset_count = & lbs_mesh_ethtool_get_sset_count};
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
void emg_wrapper_lbs_ethtool_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 112 
  lbs_ethtool_get_drvinfo(arg0,arg1);
  #line 113 
  return;
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_lbs_ethtool_get_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 117 
  return lbs_ethtool_get_eeprom(arg0,arg1,arg2);
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_lbs_ethtool_get_eeprom_len(struct net_device *arg0)
{
  #line 122 
  return lbs_ethtool_get_eeprom_len(arg0);
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
void emg_wrapper_lbs_ethtool_get_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 127 
  lbs_ethtool_get_wol(arg0,arg1);
  #line 128 
  return;
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_lbs_ethtool_set_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 132 
  return lbs_ethtool_set_wol(arg0,arg1);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 243  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 326 
int kstrtoull(char *, unsigned int, unsigned long long *);
#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
__inline static int kstrtoul(char *s, unsigned int base, unsigned long *res)
{
  #line 352 
  return kstrtoull(s,base,(unsigned long long *)res);
}

#line 469 
#line 469 
int sprintf(char *, char * , ...);
#line 487 
#line 487 
int sscanf(char *, char * , ...);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 18 
void *memset(void *, int, size_t);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 271  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static size_t cif_strlen(char *s);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  #line 26 
  int pfo_ret__;
  #line 26 
  switch (4UL) {
    #line 26 
    case (unsigned long)1: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)2: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)4: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)8: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    default: 
             #line 26 
    ;
    #line 26 
    __bad_percpu_size();
  }
  #line 26 
  return pfo_ret__ & 2147483647;
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 29 
void _raw_spin_lock_irq(raw_spinlock_t *);
#line 41 
#line 41 
void _raw_spin_unlock_irq(raw_spinlock_t *);
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_irq(spinlock_t *lock)
{
  #line 363 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_25.rlock);
  #line 364 
  return;
}

#line 365 
#line 797  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static void cif_spin_lock_irq_driver_lock_of_lbs_private(spinlock_t *lock);
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irq(spinlock_t *lock)
{
  #line 388 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_25.rlock);
  #line 389 
  return;
}

#line 390 
#line 806  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static void cif_spin_unlock_irq_driver_lock_of_lbs_private(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 25 
size_t ldv_strlen(char *s);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 668 
#line 551  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
#line 276 
int sysfs_create_group(struct kobject *, struct attribute_group *);
#line 284 
#line 284 
void sysfs_remove_group(struct kobject *, struct attribute_group *);
#line 873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 781  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static int cif_device_create_file(struct device *device, struct device_attribute *entry);
#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 789  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static void cif_device_remove_file(struct device *dev, struct device_attribute *attr);
#line 1712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2679 
#line 839  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_queue(struct net_device *dev)
{
  #line 3141 
  netif_tx_wake_queue(netdev_get_tx_queue(dev,0U));
  #line 3142 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_queue(struct net_device *dev)
{
  #line 3168 
  netif_tx_stop_queue(netdev_get_tx_queue(dev,0U));
  #line 3169 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 4116 
#line 4116 
void ether_setup(struct net_device *);
#line 4123 
#line 815  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static struct net_device *cif_alloc_netdev_mqs(int sizeof_priv, char *name, unsigned char name_assign_type, void (*setup)(struct net_device *), unsigned int txqs, unsigned int rxqs);
#line 4131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 823  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_hw_addr_inherit(struct net_device *dst, struct net_device *src)
{
  #line 302 
  dst->addr_assign_type = src->addr_assign_type;
  #line 303 
  ether_addr_copy(dst->dev_addr,src->dev_addr);
  #line 304 
  return;
}

#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/defs.h"
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
unsigned int lbs_debug;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 38 
netdev_tx_t lbs_hard_start_xmit(struct sk_buff *skb, struct net_device *dev);
#line 52 
#line 52 
int lbs_start_iface(struct lbs_private *priv);
#line 53 
#line 53 
int lbs_stop_iface(struct lbs_private *priv);
#line 58 
#line 58 
int lbs_set_mac_address(struct net_device *dev, void *addr);
#line 59 
#line 59 
void lbs_set_multicast_list(struct net_device *dev);
#line 60 
#line 60 
void lbs_update_mcast(struct lbs_private *priv);
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/dev.h"
__inline static int lbs_iface_active(struct lbs_private *priv)
{
  #line 203 
  int r;
  #line 205 
  r = (int)netif_running(priv->dev);
  #line 206 
  if (priv->mesh_dev != (struct net_device *)0) {
    #line 207 
    r = (int)netif_running(priv->mesh_dev) | r;
  }
  #line 209 
  return r;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.h"
#line 831  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
int lbs_init_mesh(struct lbs_private *priv);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.h"
#line 877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
void lbs_start_mesh(struct lbs_private *priv);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.h"
#line 885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
int lbs_deinit_mesh(struct lbs_private *priv);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.h"
#line 1051  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
void lbs_remove_mesh(struct lbs_private *priv);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.h"
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
int lbs_mesh_set_channel(struct lbs_private *priv, u8 channel);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.h"
#line 1073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
struct net_device *lbs_mesh_set_dev(struct lbs_private *priv, struct net_device *dev, struct rxpd *rxpd);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.h"
#line 1089  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
void lbs_mesh_set_txpd(struct lbs_private *priv, struct net_device *dev, struct txpd *txpd);
#line 19 
#line 979 
static int lbs_add_mesh(struct lbs_private *priv);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static int lbs_mesh_access(struct lbs_private *priv, uint16_t cmd_action, struct cmd_ds_mesh_access *cmd)
{
  #line 36 
  uint16_t __sz;
  #line 28 
  int ret;
  #line 30 
  cmd->hdr.command = (unsigned short)155U;
  #line 31 
  cmd->hdr.size = (unsigned short)138U;
  #line 32 
  cmd->hdr.result = (unsigned short)0U;
  #line 34 
  cmd->action = cmd_action;
  #line 36 
  __sz = cmd->hdr.size;
  #line 36 
  cmd->hdr.size = (unsigned short)138U;
  #line 36 
  ret = __lbs_cmd(priv,(unsigned short)155,& cmd->hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)cmd);
  #line 38 
  return ret;
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static int __lbs_mesh_config_send(struct lbs_private *priv, struct cmd_ds_mesh_config *cmd, uint16_t action, uint16_t type)
{
  #line 63 
  uint16_t __sz;
  #line 45 
  int ret;
  #line 46 
  u16 command = (unsigned short)163U;
  #line 52 
  if ((unsigned int)priv->mesh_tlv == 293U) 
                                            #line 53 
                                            command = (unsigned short)4268U;
  #line 56 
  cmd->hdr.command = command;
  #line 57 
  cmd->hdr.size = (unsigned short)144U;
  #line 58 
  cmd->hdr.result = (unsigned short)0U;
  #line 60 
  cmd->type = type;
  #line 61 
  cmd->action = action;
  #line 63 
  __sz = cmd->hdr.size;
  #line 63 
  cmd->hdr.size = (unsigned short)144U;
  #line 63 
  ret = __lbs_cmd(priv,(unsigned short)((int)command),& cmd->hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)cmd);
  #line 65 
  return ret;
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static int lbs_mesh_config_send(struct lbs_private *priv, struct cmd_ds_mesh_config *cmd, uint16_t action, uint16_t type)
{
  #line 72 
  int ret;
  #line 74 
  if ((priv->fwcapinfo & 32768U) == 0U) 
                                        #line 75 
                                        return -95;
  #line 77 
  ret = __lbs_mesh_config_send(priv,cmd,(unsigned short)((int)action),(unsigned short)((int)type));
  #line 78 
  return ret;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static int lbs_mesh_config(struct lbs_private *priv, uint16_t action, uint16_t chan)
{
  #line 89 
  struct wireless_dev *mesh_wdev;
  #line 90 
  struct cmd_ds_mesh_config cmd;
  #line 91 
  struct mrvl_meshie *ie;
  #line 93 
  memset((void *)(& cmd),0,144UL);
  #line 94 
  cmd.channel = chan;
  #line 95 
  ie = (struct mrvl_meshie *)(& cmd.data);
  #line 97 
  switch ((int)action) {
    #line 98 
    case 1: 
            #line 98 
    ;
    #line 99 
    ie->id = (unsigned char)221U;
    #line 100 
    ie->val.oui[0] = (unsigned char)0U;
    #line 101 
    ie->val.oui[1] = (unsigned char)80U;
    #line 102 
    ie->val.oui[2] = (unsigned char)67U;
    #line 103 
    ie->val.type = (unsigned char)4U;
    #line 104 
    ie->val.subtype = (unsigned char)0U;
    #line 105 
    ie->val.version = (unsigned char)0U;
    #line 106 
    ie->val.active_protocol_id = (unsigned char)0U;
    #line 107 
    ie->val.active_metric_id = (unsigned char)0U;
    #line 108 
    ie->val.mesh_capability = (unsigned char)0U;
    #line 110 
    if (priv->mesh_dev != (struct net_device *)0) {
      #line 111 
      mesh_wdev = (priv->mesh_dev)->ieee80211_ptr;
      #line 112 
      ie->val.mesh_id_len = mesh_wdev->mesh_id_up_len;
      #line 113 
      memcpy((void *)(& ie->val.mesh_id),(void *)(& mesh_wdev->ssid),(unsigned long)mesh_wdev->mesh_id_up_len);
    }
    #line 117 
    ie->len = (unsigned char)((unsigned int)ie->val.mesh_id_len + 10U);
    #line 120 
    cmd.length = (unsigned short)42U;
    #line 121 
    break;
    #line 122 
    case 0: 
            #line 122 
    ;
    #line 123 
    break;
    #line 124 
    default: 
             #line 124 
    ;
    #line 125 
    return -1;
  }
  #line 127 
  if ((lbs_debug & 16384U) != 0U) {
    #line 127 
    char *tmp_0;
    #line 127 
    ;
    #line 127 
    ;
    #line 127 
    ;
    #line 127 
    ;
    #line 127 
    ;
    #line 127 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 127 
                                                             tmp_0 = (char *)" (INT)"; else 
                                                                    #line 127 
                                                                    tmp_0 = (char *)"";
    #line 127 
    printk((char *)"\001",tmp_0,(int)action,(int)priv->mesh_tlv,(int)chan,(int)ie->val.mesh_id_len,(uint8_t *)(& ie->val.mesh_id));
  }
  #line 131 
  return __lbs_mesh_config_send(priv,& cmd,(unsigned short)((int)action),
                               (unsigned short)((int)priv->mesh_tlv));
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
int lbs_mesh_set_channel(struct lbs_private *priv, u8 channel)
{
  #line 136 
  priv->mesh_channel = channel;
  #line 137 
  return lbs_mesh_config(priv,(unsigned short)1,(unsigned short)((int)channel));
}

#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static uint16_t lbs_mesh_get_channel(struct lbs_private *priv)
{
  #line 142 
  unsigned int tmp;
  #line 142 
  if ((int)priv->mesh_channel != 0) 
                                    #line 142 
                                    tmp = (unsigned int)((unsigned short)((int)priv->mesh_channel)); else 
                                                                    #line 142 
                                                                    tmp = 1U;
  #line 142 
  return (unsigned short)tmp;
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t lbs_anycast_get(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 162 
  void *__mptr;
  #line 163 
  struct cmd_ds_mesh_access mesh_access;
  #line 164 
  int ret;
  #line 162 
  __mptr = (void *)dev;
  #line 162 
  struct lbs_private *priv = (struct lbs_private *)((struct net_device *)(__mptr + 18446744073709550144U))->__anonCompField_net_device_159.ml_priv;
  #line 166 
  memset((void *)(& mesh_access),0,138UL);
  #line 168 
  ret = lbs_mesh_access(priv,(unsigned short)4,& mesh_access);
  #line 169 
  if (ret != 0) 
                #line 170 
                return (long)ret;
  #line 172 
  return (long)snprintf(buf,12UL,(char *)"0x%X\n",mesh_access.data[0]);
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t lbs_anycast_set(struct device *dev, struct device_attribute *attr, char *buf, size_t count)
{
  #line 185 
  void *__mptr;
  #line 186 
  struct cmd_ds_mesh_access mesh_access;
  #line 187 
  uint32_t datum;
  #line 188 
  int ret;
  #line 185 
  __mptr = (void *)dev;
  #line 185 
  struct lbs_private *priv = (struct lbs_private *)((struct net_device *)(__mptr + 18446744073709550144U))->__anonCompField_net_device_159.ml_priv;
  #line 190 
  memset((void *)(& mesh_access),0,138UL);
  #line 191 
  sscanf(buf,(char *)"%x",& datum);
  #line 192 
  mesh_access.data[0] = datum;
  #line 194 
  ret = lbs_mesh_access(priv,(unsigned short)5,& mesh_access);
  #line 195 
  if (ret != 0) 
                #line 196 
                return (long)ret;
  #line 198 
  return (long)cif_strlen(buf);
}

#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t lbs_prb_rsp_limit_get(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 210 
  void *__mptr;
  #line 211 
  struct cmd_ds_mesh_access mesh_access;
  #line 212 
  int ret;
  #line 213 
  u32 retry_limit;
  #line 210 
  __mptr = (void *)dev;
  #line 210 
  struct lbs_private *priv = (struct lbs_private *)((struct net_device *)(__mptr + 18446744073709550144U))->__anonCompField_net_device_159.ml_priv;
  #line 215 
  memset((void *)(& mesh_access),0,138UL);
  #line 216 
  mesh_access.data[0] = 0U;
  #line 218 
  ret = lbs_mesh_access(priv,(unsigned short)17,& mesh_access);
  #line 220 
  if (ret != 0) 
                #line 221 
                return (long)ret;
  #line 223 
  retry_limit = mesh_access.data[1];
  #line 224 
  return (long)snprintf(buf,10UL,(char *)"%d\n",retry_limit);
}

#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t lbs_prb_rsp_limit_set(struct device *dev, struct device_attribute *attr, char *buf, size_t count)
{
  #line 237 
  void *__mptr;
  #line 238 
  struct cmd_ds_mesh_access mesh_access;
  #line 239 
  int ret;
  #line 240 
  unsigned long retry_limit;
  #line 237 
  __mptr = (void *)dev;
  #line 237 
  struct lbs_private *priv = (struct lbs_private *)((struct net_device *)(__mptr + 18446744073709550144U))->__anonCompField_net_device_159.ml_priv;
  #line 242 
  memset((void *)(& mesh_access),0,138UL);
  #line 243 
  mesh_access.data[0] = 1U;
  #line 245 
  ret = kstrtoul(buf,10U,& retry_limit);
  #line 246 
  if (ret != 0) 
                #line 247 
                return (long)ret;
  #line 248 
  if (retry_limit > 15UL) 
                          #line 249 
                          return -524L;
  #line 251 
  mesh_access.data[1] = (unsigned int)retry_limit;
  #line 253 
  ret = lbs_mesh_access(priv,(unsigned short)17,& mesh_access);
  #line 255 
  if (ret != 0) 
                #line 256 
                return (long)ret;
  #line 258 
  return (long)cif_strlen(buf);
}

#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t lbs_mesh_get(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 270 
  void *__mptr;
  #line 270 
  __mptr = (void *)dev;
  #line 270 
  struct lbs_private *priv = (struct lbs_private *)((struct net_device *)(__mptr + 18446744073709550144U))->__anonCompField_net_device_159.ml_priv;
  #line 271 
  return (long)snprintf(buf,5UL,(char *)"0x%X\n",
                 priv->mesh_dev != (struct net_device *)0);
}

#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t lbs_mesh_set(struct device *dev, struct device_attribute *attr, char *buf, size_t count)
{
  #line 284 
  void *__mptr;
  #line 285 
  int enable;
  #line 284 
  __mptr = (void *)dev;
  #line 284 
  struct lbs_private *priv = (struct lbs_private *)((struct net_device *)(__mptr + 18446744073709550144U))->__anonCompField_net_device_159.ml_priv;
  #line 287 
  sscanf(buf,(char *)"%x",& enable);
  #line 288 
  enable = enable != 0;
  #line 289 
  if ((priv->mesh_dev != (struct net_device *)0) == enable) 
                                                            #line 290 
                                                            return (long)count;
  #line 292 
  if (enable != 0) 
                   #line 293 
                   lbs_add_mesh(priv); else 
                                            #line 295 
                                            lbs_remove_mesh(priv);
  #line 297 
  return (long)count;
}

#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static struct device_attribute dev_attr_lbs_mesh = {.attr = {.name = (char *)"lbs_mesh", .mode = (unsigned short)420U}, .show = & lbs_mesh_get, .store = & lbs_mesh_set};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static struct device_attribute dev_attr_anycast_mask = {.attr = {.name = (char *)"anycast_mask", .mode = (unsigned short)420U}, .show = & lbs_anycast_get, .store = & lbs_anycast_set};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static struct device_attribute dev_attr_prb_rsp_limit = {.attr = {.name = (char *)"prb_rsp_limit", .mode = (unsigned short)420U}, .show = & lbs_prb_rsp_limit_get, .store = & lbs_prb_rsp_limit_set};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static struct attribute *lbs_mesh_sysfs_entries[3U] = {& dev_attr_anycast_mask.attr, & dev_attr_prb_rsp_limit.attr};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static struct attribute_group lbs_mesh_attr_group = {.attrs = (struct attribute **)(& lbs_mesh_sysfs_entries)};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static int mesh_get_default_parameters(struct device *dev, struct mrvl_mesh_defaults *defs)
{
  #line 337 
  void *__mptr;
  #line 338 
  struct cmd_ds_mesh_config cmd;
  #line 339 
  int ret;
  #line 337 
  __mptr = (void *)dev;
  #line 337 
  struct lbs_private *priv = (struct lbs_private *)((struct net_device *)(__mptr + 18446744073709550144U))->__anonCompField_net_device_159.ml_priv;
  #line 341 
  memset((void *)(& cmd),0,144UL);
  #line 342 
  ret = lbs_mesh_config_send(priv,& cmd,(unsigned short)3,(unsigned short)5);
  #line 345 
  if (ret != 0) 
                #line 346 
                return -95;
  #line 348 
  memcpy((void *)defs,(void *)(& cmd.data[0]),52UL);
  #line 350 
  return 0;
}

#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t bootflag_get(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 362 
  struct mrvl_mesh_defaults defs;
  #line 363 
  int ret;
  #line 365 
  ret = mesh_get_default_parameters(dev,& defs);
  #line 367 
  if (ret != 0) 
                #line 368 
                return (long)ret;
  #line 370 
  return (long)snprintf(buf,12UL,(char *)"%d\n",defs.bootflag);
}

#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t bootflag_set(struct device *dev, struct device_attribute *attr, char *buf, size_t count)
{
  #line 383 
  void *__mptr;
  #line 384 
  struct cmd_ds_mesh_config cmd;
  #line 385 
  uint32_t datum;
  #line 386 
  int ret;
  #line 383 
  __mptr = (void *)dev;
  #line 383 
  struct lbs_private *priv = (struct lbs_private *)((struct net_device *)(__mptr + 18446744073709550144U))->__anonCompField_net_device_159.ml_priv;
  #line 388 
  memset((void *)(& cmd),0,144UL);
  #line 389 
  ret = sscanf(buf,(char *)"%d",& datum);
  #line 390 
  if (ret != 1 || datum > 1U) 
                              #line 391 
                              return -22L;
  #line 393 
  *((__le32 *)(& cmd.data[0])) = (unsigned int)(datum != 0U);
  #line 394 
  cmd.length = (unsigned short)4U;
  #line 395 
  ret = lbs_mesh_config_send(priv,& cmd,(unsigned short)2,(unsigned short)1);
  #line 397 
  if (ret != 0) 
                #line 398 
                return (long)ret;
  #line 400 
  return (long)cif_strlen(buf);
}

#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t boottime_get(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 412 
  struct mrvl_mesh_defaults defs;
  #line 413 
  int ret;
  #line 415 
  ret = mesh_get_default_parameters(dev,& defs);
  #line 417 
  if (ret != 0) 
                #line 418 
                return (long)ret;
  #line 420 
  return (long)snprintf(buf,12UL,(char *)"%d\n",(int)defs.boottime);
}

#line 430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t boottime_set(struct device *dev, struct device_attribute *attr, char *buf, size_t count)
{
  #line 433 
  void *__mptr;
  #line 434 
  struct cmd_ds_mesh_config cmd;
  #line 435 
  uint32_t datum;
  #line 436 
  int ret;
  #line 433 
  __mptr = (void *)dev;
  #line 433 
  struct lbs_private *priv = (struct lbs_private *)((struct net_device *)(__mptr + 18446744073709550144U))->__anonCompField_net_device_159.ml_priv;
  #line 438 
  memset((void *)(& cmd),0,144UL);
  #line 439 
  ret = sscanf(buf,(char *)"%d",& datum);
  #line 440 
  if (ret != 1 || datum > 255U) 
                                #line 441 
                                return -22L;
  #line 451 
  if (20U > datum) 
                   #line 451 
                   datum = 20U; else 
                                     #line 451 
                                     datum = datum;
  #line 452 
  cmd.data[0] = (unsigned char)datum;
  #line 453 
  cmd.length = (unsigned short)1U;
  #line 454 
  ret = lbs_mesh_config_send(priv,& cmd,(unsigned short)2,(unsigned short)2);
  #line 456 
  if (ret != 0) 
                #line 457 
                return (long)ret;
  #line 459 
  return (long)cif_strlen(buf);
}

#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t channel_get(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 471 
  struct mrvl_mesh_defaults defs;
  #line 472 
  int ret;
  #line 474 
  ret = mesh_get_default_parameters(dev,& defs);
  #line 476 
  if (ret != 0) 
                #line 477 
                return (long)ret;
  #line 479 
  return (long)snprintf(buf,12UL,(char *)"%d\n",(int)defs.channel);
}

#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t channel_set(struct device *dev, struct device_attribute *attr, char *buf, size_t count)
{
  #line 492 
  void *__mptr;
  #line 493 
  struct cmd_ds_mesh_config cmd;
  #line 494 
  uint32_t datum;
  #line 495 
  int ret;
  #line 492 
  __mptr = (void *)dev;
  #line 492 
  struct lbs_private *priv = (struct lbs_private *)((struct net_device *)(__mptr + 18446744073709550144U))->__anonCompField_net_device_159.ml_priv;
  #line 497 
  memset((void *)(& cmd),0,144UL);
  #line 498 
  ret = sscanf(buf,(char *)"%d",& datum);
  #line 499 
  if ((ret != 1 || datum == 0U) || datum > 11U) 
                                                #line 500 
                                                return -22L;
  #line 502 
  *((__le16 *)(& cmd.data[0])) = (unsigned short)datum;
  #line 503 
  cmd.length = (unsigned short)2U;
  #line 504 
  ret = lbs_mesh_config_send(priv,& cmd,(unsigned short)2,(unsigned short)3);
  #line 506 
  if (ret != 0) 
                #line 507 
                return (long)ret;
  #line 509 
  return (long)cif_strlen(buf);
}

#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t mesh_id_get(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 521 
  struct mrvl_mesh_defaults defs;
  #line 522 
  int ret;
  #line 524 
  ret = mesh_get_default_parameters(dev,& defs);
  #line 526 
  if (ret != 0) 
                #line 527 
                return (long)ret;
  #line 529 
  if ((unsigned int)defs.meshie.val.mesh_id_len > 32U) {
    #line 530 
    _dev_err(dev,(char *)"inconsistent mesh ID length\n");
    #line 531 
    defs.meshie.val.mesh_id_len = (unsigned char)32U;
  }
  #line 534 
  memcpy((void *)buf,(void *)(& defs.meshie.val.mesh_id),(unsigned long)defs.meshie.val.mesh_id_len);
  #line 535 
  *(buf + (unsigned long)defs.meshie.val.mesh_id_len) = (char)10;
  #line 536 
  *(buf + ((unsigned long)defs.meshie.val.mesh_id_len + (unsigned long)1U)) = (char)0;
  #line 538 
  return (long)((int)defs.meshie.val.mesh_id_len + 1);
}

#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t mesh_id_set(struct device *dev, struct device_attribute *attr, char *buf, size_t count)
{
  #line 554 
  void *__mptr;
  #line 551 
  struct cmd_ds_mesh_config cmd;
  #line 552 
  struct mrvl_mesh_defaults defs;
  #line 553 
  struct mrvl_meshie *ie;
  #line 555 
  int len;
  #line 556 
  int ret;
  #line 554 
  __mptr = (void *)dev;
  #line 554 
  struct lbs_private *priv = (struct lbs_private *)((struct net_device *)(__mptr + 18446744073709550144U))->__anonCompField_net_device_159.ml_priv;
  #line 558 
  if (count + 18446744073709551614UL > 31UL) 
                                             #line 559 
                                             return -22L;
  #line 561 
  memset((void *)(& cmd),0,144UL);
  #line 562 
  ie = (struct mrvl_meshie *)(& cmd.data[0]);
  #line 565 
  ret = mesh_get_default_parameters(dev,& defs);
  #line 567 
  cmd.length = (unsigned short)44U;
  #line 570 
  memcpy((void *)ie,(void *)(& defs.meshie),44UL);
  #line 572 
  len = (int)(count + (size_t)4294967295U);
  #line 573 
  memcpy((void *)(& ie->val.mesh_id),(void *)buf,(unsigned long)len);
  #line 575 
  ie->val.mesh_id_len = (unsigned char)len;
  #line 577 
  ie->len = (unsigned char)((unsigned int)((unsigned char)len) + 10U);
  #line 579 
  ret = lbs_mesh_config_send(priv,& cmd,(unsigned short)2,(unsigned short)4);
  #line 581 
  if (ret != 0) 
                #line 582 
                return (long)ret;
  #line 584 
  return (long)cif_strlen(buf);
}

#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t protocol_id_get(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 596 
  struct mrvl_mesh_defaults defs;
  #line 597 
  int ret;
  #line 599 
  ret = mesh_get_default_parameters(dev,& defs);
  #line 601 
  if (ret != 0) 
                #line 602 
                return (long)ret;
  #line 604 
  return (long)snprintf(buf,5UL,(char *)"%d\n",
               (int)defs.meshie.val.active_protocol_id);
}

#line 614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t protocol_id_set(struct device *dev, struct device_attribute *attr, char *buf, size_t count)
{
  #line 620 
  void *__mptr;
  #line 617 
  struct cmd_ds_mesh_config cmd;
  #line 618 
  struct mrvl_mesh_defaults defs;
  #line 619 
  struct mrvl_meshie *ie;
  #line 621 
  uint32_t datum;
  #line 622 
  int ret;
  #line 620 
  __mptr = (void *)dev;
  #line 620 
  struct lbs_private *priv = (struct lbs_private *)((struct net_device *)(__mptr + 18446744073709550144U))->__anonCompField_net_device_159.ml_priv;
  #line 624 
  memset((void *)(& cmd),0,144UL);
  #line 625 
  ret = sscanf(buf,(char *)"%d",& datum);
  #line 626 
  if (ret != 1 || datum > 255U) 
                                #line 627 
                                return -22L;
  #line 630 
  ret = mesh_get_default_parameters(dev,& defs);
  #line 632 
  cmd.length = (unsigned short)44U;
  #line 635 
  ie = (struct mrvl_meshie *)(& cmd.data[0]);
  #line 636 
  memcpy((void *)ie,(void *)(& defs.meshie),44UL);
  #line 638 
  ie->val.active_protocol_id = (unsigned char)datum;
  #line 640 
  ret = lbs_mesh_config_send(priv,& cmd,(unsigned short)2,(unsigned short)4);
  #line 642 
  if (ret != 0) 
                #line 643 
                return (long)ret;
  #line 645 
  return (long)cif_strlen(buf);
}

#line 654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t metric_id_get(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 657 
  struct mrvl_mesh_defaults defs;
  #line 658 
  int ret;
  #line 660 
  ret = mesh_get_default_parameters(dev,& defs);
  #line 662 
  if (ret != 0) 
                #line 663 
                return (long)ret;
  #line 665 
  return (long)snprintf(buf,5UL,(char *)"%d\n",(int)defs.meshie.val.active_metric_id);
}

#line 675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t metric_id_set(struct device *dev, struct device_attribute *attr, char *buf, size_t count)
{
  #line 681 
  void *__mptr;
  #line 678 
  struct cmd_ds_mesh_config cmd;
  #line 679 
  struct mrvl_mesh_defaults defs;
  #line 680 
  struct mrvl_meshie *ie;
  #line 682 
  uint32_t datum;
  #line 683 
  int ret;
  #line 681 
  __mptr = (void *)dev;
  #line 681 
  struct lbs_private *priv = (struct lbs_private *)((struct net_device *)(__mptr + 18446744073709550144U))->__anonCompField_net_device_159.ml_priv;
  #line 685 
  memset((void *)(& cmd),0,144UL);
  #line 686 
  ret = sscanf(buf,(char *)"%d",& datum);
  #line 687 
  if (ret != 1 || datum > 255U) 
                                #line 688 
                                return -22L;
  #line 691 
  ret = mesh_get_default_parameters(dev,& defs);
  #line 693 
  cmd.length = (unsigned short)44U;
  #line 696 
  ie = (struct mrvl_meshie *)(& cmd.data[0]);
  #line 697 
  memcpy((void *)ie,(void *)(& defs.meshie),44UL);
  #line 699 
  ie->val.active_metric_id = (unsigned char)datum;
  #line 701 
  ret = lbs_mesh_config_send(priv,& cmd,(unsigned short)2,(unsigned short)4);
  #line 703 
  if (ret != 0) 
                #line 704 
                return (long)ret;
  #line 706 
  return (long)cif_strlen(buf);
}

#line 715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t capability_get(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 718 
  struct mrvl_mesh_defaults defs;
  #line 719 
  int ret;
  #line 721 
  ret = mesh_get_default_parameters(dev,& defs);
  #line 723 
  if (ret != 0) 
                #line 724 
                return (long)ret;
  #line 726 
  return (long)snprintf(buf,5UL,(char *)"%d\n",(int)defs.meshie.val.mesh_capability);
}

#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static ssize_t capability_set(struct device *dev, struct device_attribute *attr, char *buf, size_t count)
{
  #line 742 
  void *__mptr;
  #line 739 
  struct cmd_ds_mesh_config cmd;
  #line 740 
  struct mrvl_mesh_defaults defs;
  #line 741 
  struct mrvl_meshie *ie;
  #line 743 
  uint32_t datum;
  #line 744 
  int ret;
  #line 742 
  __mptr = (void *)dev;
  #line 742 
  struct lbs_private *priv = (struct lbs_private *)((struct net_device *)(__mptr + 18446744073709550144U))->__anonCompField_net_device_159.ml_priv;
  #line 746 
  memset((void *)(& cmd),0,144UL);
  #line 747 
  ret = sscanf(buf,(char *)"%d",& datum);
  #line 748 
  if (ret != 1 || datum > 255U) 
                                #line 749 
                                return -22L;
  #line 752 
  ret = mesh_get_default_parameters(dev,& defs);
  #line 754 
  cmd.length = (unsigned short)44U;
  #line 757 
  ie = (struct mrvl_meshie *)(& cmd.data[0]);
  #line 758 
  memcpy((void *)ie,(void *)(& defs.meshie),44UL);
  #line 760 
  ie->val.mesh_capability = (unsigned char)datum;
  #line 762 
  ret = lbs_mesh_config_send(priv,& cmd,(unsigned short)2,(unsigned short)4);
  #line 764 
  if (ret != 0) 
                #line 765 
                return (long)ret;
  #line 767 
  return (long)cif_strlen(buf);
}

#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static struct device_attribute dev_attr_bootflag = {.attr = {.name = (char *)"bootflag", .mode = (unsigned short)420U}, .show = & bootflag_get, .store = & bootflag_set};
#line 772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static struct device_attribute dev_attr_boottime = {.attr = {.name = (char *)"boottime", .mode = (unsigned short)420U}, .show = & boottime_get, .store = & boottime_set};
#line 773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static struct device_attribute dev_attr_channel = {.attr = {.name = (char *)"channel", .mode = (unsigned short)420U}, .show = & channel_get, .store = & channel_set};
#line 774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static struct device_attribute dev_attr_mesh_id = {.attr = {.name = (char *)"mesh_id", .mode = (unsigned short)420U}, .show = & mesh_id_get, .store = & mesh_id_set};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static struct device_attribute dev_attr_protocol_id = {.attr = {.name = (char *)"protocol_id", .mode = (unsigned short)420U}, .show = & protocol_id_get, .store = & protocol_id_set};
#line 776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static struct device_attribute dev_attr_metric_id = {.attr = {.name = (char *)"metric_id", .mode = (unsigned short)420U}, .show = & metric_id_get, .store = & metric_id_set};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static struct device_attribute dev_attr_capability = {.attr = {.name = (char *)"capability", .mode = (unsigned short)420U}, .show = & capability_get, .store = & capability_set};
#line 779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static struct attribute *boot_opts_attrs[4U] = {& dev_attr_bootflag.attr, & dev_attr_boottime.attr, & dev_attr_channel.attr};
#line 786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static struct attribute_group boot_opts_group = {.name = (char *)"boot_options", .attrs = (struct attribute **)(& boot_opts_attrs)};
#line 791  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static struct attribute *mesh_ie_attrs[5U] = {& dev_attr_mesh_id.attr, & dev_attr_protocol_id.attr, & dev_attr_metric_id.attr, & dev_attr_capability.attr};
#line 799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static struct attribute_group mesh_ie_group = {.name = (char *)"mesh_ie", .attrs = (struct attribute **)(& mesh_ie_attrs)};
#line 804  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static void lbs_persist_config_init(struct net_device *dev)
{
  #line 806 
  int ret;
  #line 807 
  ret = sysfs_create_group(& dev->dev.kobj,& boot_opts_group);
  #line 808 
  if (ret != 0) 
                #line 809 
                printk((char *)"\001");
  #line 811 
  ret = sysfs_create_group(& dev->dev.kobj,& mesh_ie_group);
  #line 812 
  if (ret != 0) 
                #line 813 
                printk((char *)"\001");
  #line 814 
  return;
}

#line 816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static void lbs_persist_config_remove(struct net_device *dev)
{
  #line 818 
  sysfs_remove_group(& dev->dev.kobj,& boot_opts_group);
  #line 819 
  sysfs_remove_group(& dev->dev.kobj,& mesh_ie_group);
  #line 820 
  return;
}

#line 831  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
int lbs_init_mesh(struct lbs_private *priv)
{
  #line 833 
  int ret = 0;
  #line 840 
  if (priv->fwrelease >> 24 == 5U) {
    #line 854 
    priv->mesh_tlv = (unsigned short)547U;
    #line 855 
    if (lbs_mesh_config(priv,(unsigned short)1,(unsigned short)1) != 0) {
      #line 856 
      priv->mesh_tlv = (unsigned short)293U;
      #line 857 
      if (lbs_mesh_config(priv,(unsigned short)1,(unsigned short)1) != 0) 
        #line 858 
        priv->mesh_tlv = (unsigned short)0U;
    }
  }
  else 
    #line 861 
    if (priv->fwrelease >> 24 > 9U && (priv->fwcapinfo & 65536U) != 0U) {
      #line 866 
      priv->mesh_tlv = (unsigned short)293U;
      #line 867 
      if (lbs_mesh_config(priv,(unsigned short)1,(unsigned short)1) != 0) 
        #line 868 
        priv->mesh_tlv = (unsigned short)0U;
    }
  #line 872 
  lbs_mesh_config(priv,(unsigned short)0,(unsigned short)1);
  #line 874 
  return ret;
}

#line 877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
void lbs_start_mesh(struct lbs_private *priv)
{
  #line 879 
  lbs_add_mesh(priv);
  #line 881 
  if (cif_device_create_file(& (priv->dev)->dev,& dev_attr_lbs_mesh) != 0) 
    #line 882 
    netdev_err(priv->dev,(char *)"cannot register lbs_mesh attribute\n");
  #line 883 
  return;
}

#line 885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
int lbs_deinit_mesh(struct lbs_private *priv)
{
  #line 887 
  struct net_device *dev = priv->dev;
  #line 888 
  int ret = 0;
  #line 890 
  if ((unsigned int)priv->mesh_tlv != 0U) {
    #line 891 
    cif_device_remove_file(& dev->dev,& dev_attr_lbs_mesh);
    #line 892 
    ret = 1;
  }
  #line 895 
  return ret;
}

#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static int lbs_mesh_stop(struct net_device *dev)
{
  #line 907 
  struct lbs_private *priv = (struct lbs_private *)dev->__anonCompField_net_device_159.ml_priv;
  #line 909 
  ;
  #line 909 
  lbs_mesh_config(priv,(unsigned short)0,(unsigned short)((int)lbs_mesh_get_channel(priv)));
  #line 912 
  cif_spin_lock_irq_driver_lock_of_lbs_private(& priv->driver_lock);
  #line 914 
  netif_stop_queue(dev);
  #line 915 
  netif_carrier_off(dev);
  #line 917 
  cif_spin_unlock_irq_driver_lock_of_lbs_private(& priv->driver_lock);
  #line 919 
  lbs_update_mcast(priv);
  #line 920 
  if (lbs_iface_active(priv) == 0) 
                                   #line 921 
                                   lbs_stop_iface(priv);
  #line 923 
  return 0;
}

#line 932  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static int lbs_mesh_dev_open(struct net_device *dev)
{
  #line 934 
  struct lbs_private *priv = (struct lbs_private *)dev->__anonCompField_net_device_159.ml_priv;
  #line 935 
  int ret = 0;
  #line 937 
  if (! priv->iface_running) {
    #line 938 
    ret = lbs_start_iface(priv);
    #line 939 
    if (ret != 0) 
                  #line 940 
                  goto out;
  }
  #line 943 
  cif_spin_lock_irq_driver_lock_of_lbs_private(& priv->driver_lock);
  #line 945 
  if ((priv->wdev)->iftype == (unsigned int)NL80211_IFTYPE_MONITOR) {
    #line 946 
    ret = -16;
    #line 947 
    cif_spin_unlock_irq_driver_lock_of_lbs_private(& priv->driver_lock);
    #line 948 
    goto out;
  }
  #line 951 
  netif_carrier_on(dev);
  #line 953 
  if (priv->tx_pending_len == 0) 
                                 #line 954 
                                 netif_wake_queue(dev);
  #line 956 
  cif_spin_unlock_irq_driver_lock_of_lbs_private(& priv->driver_lock);
  #line 958 
  ;
  #line 958 
  ret = lbs_mesh_config(priv,(unsigned short)1,(unsigned short)((int)lbs_mesh_get_channel(priv)));
  #line 961 
  out: 
       #line 961 
  ;
  #line 962 
  return ret;
}

#line 965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static struct net_device_ops mesh_netdev_ops = {.ndo_open = & lbs_mesh_dev_open, .ndo_stop = & lbs_mesh_stop, .ndo_start_xmit = & lbs_hard_start_xmit, .ndo_set_rx_mode = & lbs_set_multicast_list, .ndo_set_mac_address = & lbs_set_mac_address};
#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static int lbs_add_mesh(struct lbs_private *priv)
{
  #line 982 
  struct wireless_dev *mesh_wdev;
  #line 981 
  struct net_device *mesh_dev = (struct net_device *)0;
  #line 983 
  int ret = 0;
  #line 986 
  mesh_wdev = (struct wireless_dev *)kzalloc(1432UL,3264U);
  #line 987 
  if (mesh_wdev == (struct wireless_dev *)0) {
    #line 988 
    if ((lbs_debug & 16U) != 0U) {
      #line 988 
      char *tmp_1;
      #line 988 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 988 
                                                               tmp_1 = (char *)" (INT)"; else 
                                                                    #line 988 
                                                                    tmp_1 = (char *)"";
      #line 988 
      printk((char *)"\001",tmp_1);
    }
    #line 989 
    ret = -12;
    #line 990 
    goto done;
  }
  #line 993 
  mesh_dev = cif_alloc_netdev_mqs(0,(char *)"msh%d",(unsigned char)0,& ether_setup,1U,1U);
  #line 994 
  if (mesh_dev == (struct net_device *)0) {
    #line 995 
    if ((lbs_debug & 16U) != 0U) {
      #line 995 
      char *tmp_3;
      #line 995 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 995 
                                                               tmp_3 = (char *)" (INT)"; else 
                                                                    #line 995 
                                                                    tmp_3 = (char *)"";
      #line 995 
      printk((char *)"\001",tmp_3);
    }
    #line 996 
    ret = -12;
    #line 997 
    goto err_free_wdev;
  }
  #line 1000 
  mesh_wdev->iftype = NL80211_IFTYPE_MESH_POINT;
  #line 1001 
  mesh_wdev->wiphy = (priv->wdev)->wiphy;
  #line 1003 
  if ((unsigned int)priv->mesh_tlv != 0U) {
    #line 1004 
    sprintf((char *)(& mesh_wdev->ssid),(char *)"mesh");
    #line 1005 
    mesh_wdev->mesh_id_up_len = (unsigned char)4U;
  }
  #line 1008 
  mesh_wdev->netdev = mesh_dev;
  #line 1010 
  mesh_dev->__anonCompField_net_device_159.ml_priv = (void *)priv;
  #line 1011 
  mesh_dev->ieee80211_ptr = mesh_wdev;
  #line 1012 
  priv->mesh_dev = mesh_dev;
  #line 1014 
  mesh_dev->netdev_ops = & mesh_netdev_ops;
  #line 1015 
  mesh_dev->ethtool_ops = & lbs_ethtool_ops;
  #line 1016 
  eth_hw_addr_inherit(mesh_dev,priv->dev);
  #line 1018 
  (priv->mesh_dev)->dev.parent = (priv->dev)->dev.parent;
  #line 1020 
  mesh_dev->flags |= 4098U;
  #line 1022 
  ret = cif_register_netdev(mesh_dev);
  #line 1023 
  if (ret != 0) {
    #line 1024 
    printk((char *)"\001");
    #line 1025 
    goto err_free_netdev;
  }
  #line 1028 
  ret = sysfs_create_group(& mesh_dev->dev.kobj,& lbs_mesh_attr_group);
  #line 1029 
  if (ret != 0) 
                #line 1030 
                goto err_unregister;
  #line 1032 
  lbs_persist_config_init(mesh_dev);
  #line 1035 
  ret = 0;
  #line 1036 
  goto done;
  #line 1038 
  err_unregister: 
                  #line 1038 
  ;
  #line 1039 
  cif_unregister_netdev(mesh_dev);
  #line 1041 
  err_free_netdev: 
                   #line 1041 
  ;
  #line 1042 
  cif_free_netdev(mesh_dev);
  #line 1044 
  err_free_wdev: 
                 #line 1044 
  ;
  #line 1045 
  kfree((void *)mesh_wdev);
  #line 1047 
  done: 
        #line 1047 
  ;
  #line 1048 
  return ret;
}

#line 1051  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
void lbs_remove_mesh(struct lbs_private *priv)
{
  #line 1053 
  struct net_device *mesh_dev;
  #line 1055 
  mesh_dev = priv->mesh_dev;
  #line 1056 
  if (mesh_dev == (struct net_device *)0) 
                                          #line 1057 
                                          return;
  #line 1059 
  netif_stop_queue(mesh_dev);
  #line 1060 
  netif_carrier_off(mesh_dev);
  #line 1061 
  sysfs_remove_group(& mesh_dev->dev.kobj,& lbs_mesh_attr_group);
  #line 1062 
  lbs_persist_config_remove(mesh_dev);
  #line 1063 
  cif_unregister_netdev(mesh_dev);
  #line 1064 
  priv->mesh_dev = (struct net_device *)0;
  #line 1065 
  kfree((void *)mesh_dev->ieee80211_ptr);
  #line 1066 
  cif_free_netdev(mesh_dev);
  #line 1067 
  return;
}

#line 1073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
struct net_device *lbs_mesh_set_dev(struct lbs_private *priv, struct net_device *dev, struct rxpd *rxpd)
{
  #line 1076 
  if (priv->mesh_dev != (struct net_device *)0) 
    #line 1077 
    if ((unsigned int)priv->mesh_tlv == 547U) {
      #line 1078 
      if (((int)rxpd->rx_control & 64) != 0) 
                                             #line 1079 
                                             dev = priv->mesh_dev;
    }
    else 
      #line 1080 
      if ((unsigned int)priv->mesh_tlv == 293U) 
        #line 1081 
        if ((unsigned int)rxpd->u.bss.bss_num == 1U) 
                                                     #line 1082 
                                                     dev = priv->mesh_dev;
  #line 1085 
  return dev;
}

#line 1089  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
void lbs_mesh_set_txpd(struct lbs_private *priv, struct net_device *dev, struct txpd *txpd)
{
  #line 1092 
  if (priv->mesh_dev == dev) 
    #line 1093 
    if ((unsigned int)priv->mesh_tlv == 547U) 
                                              #line 1094 
                                              txpd->tx_control |= 131072U;
    else 
      #line 1095 
      if ((unsigned int)priv->mesh_tlv == 293U) 
                                                #line 1096 
                                                txpd->u.bss.bss_num = (unsigned char)1U;
  #line 1097 
  return;
}

#line 1105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
static char mesh_stat_strings[8U][32U] = {{(char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'d', (char)'u', (char)'p', (char)'l', (char)'i', (char)'c', (char)'a', (char)'t', (char)'e', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t'}, {(char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'t', (char)'t', (char)'l', (char)'_', (char)'z', (char)'e', (char)'r', (char)'o'}, {(char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'n', (char)'o', (char)'_', (char)'f', (char)'w', (char)'d', (char)'_', (char)'r', (char)'o', (char)'u', (char)'t', (char)'e'}, {(char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'n', (char)'o', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'e', (char)'r', (char)'s'}, {(char)'f', (char)'w', (char)'d', (char)'e', (char)'d', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'f', (char)'w', (char)'d', (char)'e', (char)'d', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'b', (char)'l', (char)'i', (char)'n', (char)'d', (char)'_', (char)'t', (char)'a', (char)'b', (char)'l', (char)'e'}, {(char)'t', (char)'x', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'e', (char)'d', (char)'_', (char)'c', (char)'n', (char)'t'}};
#line 1116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
void lbs_mesh_ethtool_get_stats(struct net_device *dev, struct ethtool_stats *stats, uint64_t *data)
{
  #line 1120 
  struct cmd_ds_mesh_access mesh_access;
  #line 1121 
  int ret;
  #line 1119 
  struct lbs_private *priv = (struct lbs_private *)dev->__anonCompField_net_device_159.ml_priv;
  #line 1124 
  ret = lbs_mesh_access(priv,(unsigned short)3,& mesh_access);
  #line 1126 
  if (ret != 0) {
    #line 1127 
    memset((void *)data,0,64UL);
    #line 1128 
    return;
  }
  #line 1131 
  priv->mstats.fwd_drop_rbt = mesh_access.data[0];
  #line 1132 
  priv->mstats.fwd_drop_ttl = mesh_access.data[1];
  #line 1133 
  priv->mstats.fwd_drop_noroute = mesh_access.data[2];
  #line 1134 
  priv->mstats.fwd_drop_nobuf = mesh_access.data[3];
  #line 1135 
  priv->mstats.fwd_unicast_cnt = mesh_access.data[4];
  #line 1136 
  priv->mstats.fwd_bcast_cnt = mesh_access.data[5];
  #line 1137 
  priv->mstats.drop_blind = mesh_access.data[6];
  #line 1138 
  priv->mstats.tx_failed_cnt = mesh_access.data[7];
  #line 1140 
  *data = (unsigned long long)priv->mstats.fwd_drop_rbt;
  #line 1141 
  *(data + 1U) = (unsigned long long)priv->mstats.fwd_drop_ttl;
  #line 1142 
  *(data + 2U) = (unsigned long long)priv->mstats.fwd_drop_noroute;
  #line 1143 
  *(data + 3U) = (unsigned long long)priv->mstats.fwd_drop_nobuf;
  #line 1144 
  *(data + 4U) = (unsigned long long)priv->mstats.fwd_unicast_cnt;
  #line 1145 
  *(data + 5U) = (unsigned long long)priv->mstats.fwd_bcast_cnt;
  #line 1146 
  *(data + 6U) = (unsigned long long)priv->mstats.drop_blind;
  #line 1147 
  *(data + 7U) = (unsigned long long)priv->mstats.tx_failed_cnt;
  #line 1148 
  return;
}

#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
int lbs_mesh_ethtool_get_sset_count(struct net_device *dev, int sset)
{
  #line 1152 
  struct lbs_private *priv = (struct lbs_private *)dev->__anonCompField_net_device_159.ml_priv;
  #line 1154 
  if (sset == 1 && priv->mesh_dev == dev) 
                                          #line 1155 
                                          return 8;
  #line 1157 
  return -95;
}

#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.c"
void lbs_mesh_ethtool_get_strings(struct net_device *dev, uint32_t stringset, uint8_t *s)
{
  #line 1163 
  switch (stringset) {
    #line 1164 
    case (uint32_t)1: 
                      #line 1164 
    ;
    #line 1165 
    memcpy((void *)s,(void *)(& mesh_stat_strings),256UL);
    #line 1166 
    break;
  }
  #line 1168 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
struct device_attribute *emg_alias_dev_attr_anycast_mask = & dev_attr_anycast_mask;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
struct device_attribute *emg_alias_dev_attr_bootflag = & dev_attr_bootflag;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
struct device_attribute *emg_alias_dev_attr_boottime = & dev_attr_boottime;
#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
struct device_attribute *emg_alias_dev_attr_capability = & dev_attr_capability;
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
struct device_attribute *emg_alias_dev_attr_channel = & dev_attr_channel;
#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
struct device_attribute *emg_alias_dev_attr_lbs_mesh = & dev_attr_lbs_mesh;
#line 99  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
struct device_attribute *emg_alias_dev_attr_mesh_id = & dev_attr_mesh_id;
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
struct device_attribute *emg_alias_dev_attr_metric_id = & dev_attr_metric_id;
#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
struct device_attribute *emg_alias_dev_attr_prb_rsp_limit = & dev_attr_prb_rsp_limit;
#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
struct device_attribute *emg_alias_dev_attr_protocol_id = & dev_attr_protocol_id;
#line 105 
#line 105 
struct net_device *emg_alloc_netdev_mqs(int arg0, char *arg1, unsigned char arg2, void (*arg3)(struct net_device *), unsigned int arg4, unsigned int arg5);
#line 111 
#line 111 
int emg_device_create_file(struct device *arg0, struct device_attribute *arg1);
#line 112 
#line 112 
void emg_device_remove_file(struct device *arg0, struct device_attribute *arg1);
#line 113 
#line 113 
void emg_free_netdev(struct net_device *arg0);
#line 117 
#line 117 
int emg_register_netdev(struct net_device *arg0);
#line 119 
#line 119 
void emg_unregister_netdev(struct net_device *arg0);
#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_bootflag_get(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 124 
  return bootflag_get(arg0,arg1,arg2);
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_bootflag_set(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  #line 129 
  return bootflag_set(arg0,arg1,arg2,arg3);
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_boottime_get(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 134 
  return boottime_get(arg0,arg1,arg2);
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_boottime_set(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  #line 139 
  return boottime_set(arg0,arg1,arg2,arg3);
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_capability_get(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 144 
  return capability_get(arg0,arg1,arg2);
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_capability_set(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  #line 149 
  return capability_set(arg0,arg1,arg2,arg3);
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_channel_get(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 154 
  return channel_get(arg0,arg1,arg2);
}

#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_channel_set(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  #line 159 
  return channel_set(arg0,arg1,arg2,arg3);
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_lbs_anycast_get(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 164 
  return lbs_anycast_get(arg0,arg1,arg2);
}

#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_lbs_anycast_set(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  #line 169 
  return lbs_anycast_set(arg0,arg1,arg2,arg3);
}

#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_lbs_mesh_get(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 174 
  return lbs_mesh_get(arg0,arg1,arg2);
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_lbs_mesh_set(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  #line 179 
  return lbs_mesh_set(arg0,arg1,arg2,arg3);
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_lbs_prb_rsp_limit_get(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 184 
  return lbs_prb_rsp_limit_get(arg0,arg1,arg2);
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_lbs_prb_rsp_limit_set(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  #line 189 
  return lbs_prb_rsp_limit_set(arg0,arg1,arg2,arg3);
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
void emg_wrapper_lbs_set_multicast_list(struct net_device *arg0)
{
  #line 194 
  lbs_set_multicast_list(arg0);
  #line 195 
  return;
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_mesh_id_get(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 199 
  return mesh_id_get(arg0,arg1,arg2);
}

#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_mesh_id_set(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  #line 204 
  return mesh_id_set(arg0,arg1,arg2,arg3);
}

#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_metric_id_get(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 209 
  return metric_id_get(arg0,arg1,arg2);
}

#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_metric_id_set(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  #line 214 
  return metric_id_set(arg0,arg1,arg2,arg3);
}

#line 218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_protocol_id_get(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 219 
  return protocol_id_get(arg0,arg1,arg2);
}

#line 223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
long emg_wrapper_protocol_id_set(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  #line 224 
  return protocol_id_set(arg0,arg1,arg2,arg3);
}

#line 243  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 246 
  ldv_set_bit(nr,addr);
  #line 247 
  return;
}

#line 271  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static size_t cif_strlen(char *s)
{
  #line 274 
  return ldv_strlen(s);
}

#line 551  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 554 
  return ldv_kzalloc(size,flags);
}

#line 781  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static int cif_device_create_file(struct device *device, struct device_attribute *entry)
{
  #line 785 
  return emg_device_create_file(device,entry);
}

#line 789  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static void cif_device_remove_file(struct device *dev, struct device_attribute *attr)
{
  #line 793 
  emg_device_remove_file(dev,attr);
  #line 794 
  return;
}

#line 797  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static void cif_spin_lock_irq_driver_lock_of_lbs_private(spinlock_t *lock)
{
  #line 800 
  ldv_spin_model_lock((char *)"driver_lock_of_lbs_private");
  #line 802 
  spin_lock_irq(lock);
  #line 803 
  return;
}

#line 806  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static void cif_spin_unlock_irq_driver_lock_of_lbs_private(spinlock_t *lock)
{
  #line 809 
  ldv_spin_model_unlock((char *)"driver_lock_of_lbs_private");
  #line 811 
  spin_unlock_irq(lock);
  #line 812 
  return;
}

#line 815  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static struct net_device *cif_alloc_netdev_mqs(int sizeof_priv, char *name, unsigned char name_assign_type, void (*setup)(struct net_device *), unsigned int txqs, unsigned int rxqs)
{
  #line 819 
  return emg_alloc_netdev_mqs(sizeof_priv,name,
                           (unsigned char)((int)name_assign_type),setup,txqs,
                           rxqs);
}

#line 823  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 827 
  return emg_register_netdev(dev);
}

#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 835 
  emg_unregister_netdev(dev);
  #line 836 
  return;
}

#line 839  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/mesh.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 843 
  emg_free_netdev(dev);
  #line 844 
  return;
}

/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 61 
int memcmp(void *, void *, size_t);
#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1019 
void kfree_skb(struct sk_buff *);
#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1116 
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 2245 
#line 2245 
void *skb_push(struct sk_buff *, unsigned int);
#line 2253 
#line 2253 
void *skb_pull(struct sk_buff *, unsigned int);
#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 3660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3660 
int netif_rx(struct sk_buff *);
#line 3661 
#line 3661 
int netif_rx_ni(struct sk_buff *);
#line 4746 
#line 4746 
void netdev_alert(struct net_device *, char * , ...);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/defs.h"
__inline static void lbs_deb_hex(unsigned int grp, char *prompt, u8 *buf, int len)
{
  #line 88 
  int i = 0;
  #line 90 
  if ((len != 0 && (lbs_debug & 2097152U) != 0U) && (lbs_debug & grp) != 0U) {
    #line 94 
    i = 1;
    #line 94 
    while (i <= len) {
      #line 95 
      if ((i & 15) == 1) {
        #line 96 
        if (i != 1) 
                    #line 97 
                    printk((char *)"\n");
        #line 98 
        printk((char *)"libertas",prompt);
      }
      #line 100 
      printk((char *)"%02x ",(int)*buf);
      #line 101 
      buf ++;
      #line 94 
      i ++;
    }
    #line 103 
    printk((char *)"\n");
  }
  #line 105 
  return;
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/rx.c"
int lbs_process_rxed_packet(struct lbs_private *priv, struct sk_buff *skb);
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 71 
u32 lbs_fw_index_to_data_rate(u8 idx);
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/rx.c"
#line 212 
static int process_rxed_802_11_packet(struct lbs_private *priv, struct sk_buff *skb);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/rx.c"
int lbs_process_rxed_packet(struct lbs_private *priv, struct sk_buff *skb)
{
  #line 85 
  unsigned int __UNIQUE_ID___x447;
  #line 85 
  unsigned int tmp;
  #line 61 
  struct rxpackethdr *p_rx_pkt;
  #line 62 
  struct rxpd *p_rx_pd;
  #line 63 
  int hdrchop;
  #line 64 
  struct ethhdr *p_ethhdr;
  #line 59 
  int ret = 0;
  #line 60 
  struct net_device *dev = priv->dev;
  #line 65 
  u8 rfc1042_eth_hdr[6U] = {(unsigned char)170U, (unsigned char)170U, (unsigned char)3U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U};
  #line 69 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    #line 70 
    ldv_inline_asm();
    #line 71 
    ldv_inline_asm();
    #line 72 
    ldv_inline_asm();
    #line 69 
    ;
  }
  #line 71 
  skb->ip_summed = (unsigned char)0U;
  #line 73 
  if ((priv->wdev)->iftype == (unsigned int)NL80211_IFTYPE_MONITOR) {
    #line 74 
    ret = process_rxed_802_11_packet(priv,skb);
    #line 75 
    goto done;
  }
  #line 78 
  p_rx_pd = (struct rxpd *)skb->data;
  #line 79 
  p_rx_pkt = (struct rxpackethdr *)((u8 *)p_rx_pd + (unsigned long)p_rx_pd->pkt_ptr);
  #line 82 
  dev = lbs_mesh_set_dev(priv,dev,p_rx_pd);
  {
    #line 85 
    __UNIQUE_ID___x447 = skb->len;
    #line 85 
    unsigned int __UNIQUE_ID___y448 = 100U;
    #line 85 
    if (__UNIQUE_ID___x447 < __UNIQUE_ID___y448) 
                                                 #line 85 
                                                 tmp = __UNIQUE_ID___x447; else 
                                                                    #line 85 
                                                                    tmp = __UNIQUE_ID___y448;
    }
  #line 84 
  ;
  #line 84 
  lbs_deb_hex(32768U,(char *)"RX Data: Before chop rxpd",skb->data,(int)tmp);
  #line 87 
  if (skb->len <= 41U) {
    #line 88 
    if ((lbs_debug & 32768U) != 0U) {
      #line 88 
      char *tmp_2;
      #line 88 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 88 
                                                               tmp_2 = (char *)" (INT)"; else 
                                                                    #line 88 
                                                                    tmp_2 = (char *)"";
      #line 88 
      printk((char *)"\001",tmp_2);
    }
    #line 89 
    (dev->stats.rx_length_errors) ++;
    #line 90 
    ret = -22;
    #line 91 
    consume_skb(skb);
    #line 92 
    goto done;
  }
  #line 95 
  if ((lbs_debug & 32768U) != 0U) {
    #line 95 
    char *tmp_4;
    #line 95 
    ;
    #line 95 
    ;
    #line 95 
    ;
    #line 95 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 95 
                                                             tmp_4 = (char *)" (INT)"; else 
                                                                    #line 95 
                                                                    tmp_4 = (char *)"";
    #line 95 
    printk((char *)"\001",tmp_4,skb->len,(unsigned long)p_rx_pd->pkt_ptr,(unsigned long)skb->len - (unsigned long)p_rx_pd->pkt_ptr);
  }
  #line 99 
  lbs_deb_hex(32768U,(char *)"RX Data: Dest",(u8 *)(& p_rx_pkt->eth803_hdr.dest_addr),6);
  #line 101 
  lbs_deb_hex(32768U,(char *)"RX Data: Src",(u8 *)(& p_rx_pkt->eth803_hdr.src_addr),6);
  #line 104 
  if (memcmp((void *)(& p_rx_pkt->rfc1042_hdr),(void *)(& rfc1042_eth_hdr),
               6UL) == 0) {
    #line 116 
    p_ethhdr = (struct ethhdr *)((u8 *)(& p_rx_pkt->eth803_hdr) + 8UL);
    #line 123 
    memcpy((void *)(& p_ethhdr->h_source),(void *)(& p_rx_pkt->eth803_hdr.src_addr),6UL);
    #line 125 
    memcpy((void *)(& p_ethhdr->h_dest),(void *)(& p_rx_pkt->eth803_hdr.dest_addr),6UL);
    #line 131 
    hdrchop = (int)((u8 *)p_ethhdr - (u8 *)p_rx_pd);
  }
  else {
    #line 133 
    lbs_deb_hex(32768U,(char *)"RX Data: LLC/SNAP",(u8 *)(& p_rx_pkt->rfc1042_hdr),8);
    #line 138 
    hdrchop = (int)((u8 *)(& p_rx_pkt->eth803_hdr) - (u8 *)p_rx_pd);
  }
  #line 144 
  skb_pull(skb,(unsigned int)hdrchop);
  #line 146 
  priv->cur_rate = (unsigned char)lbs_fw_index_to_data_rate((unsigned char)((int)p_rx_pd->rx_rate));
  #line 148 
  if ((lbs_debug & 32768U) != 0U) {
    #line 148 
    char *tmp_8;
    #line 148 
    ;
    #line 148 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 148 
                                                             tmp_8 = (char *)" (INT)"; else 
                                                                    #line 148 
                                                                    tmp_8 = (char *)"";
    #line 148 
    printk((char *)"\001",tmp_8,skb->len);
  }
  #line 149 
  dev->stats.rx_bytes += (unsigned long)skb->len;
  #line 150 
  (dev->stats.rx_packets) ++;
  #line 152 
  skb->protocol = eth_type_trans(skb,dev);
  #line 153 
  if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                           #line 154 
                                                           netif_rx(skb); else 
                                                                    #line 156 
                                                                    netif_rx_ni(skb);
  #line 158 
  ret = 0;
  #line 159 
  done: 
        #line 159 
  ;
  #line 160 
  return ret;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/rx.c"
static u8 convert_mv_rate_to_radiotap(u8 rate)
{
  #line 173 
  switch ((int)rate) {
    #line 174 
    case 0: 
            #line 174 
    ;
    #line 175 
    return (unsigned char)2U;
    #line 176 
    case 1: 
            #line 176 
    ;
    #line 177 
    return (unsigned char)4U;
    #line 178 
    case 2: 
            #line 178 
    ;
    #line 179 
    return (unsigned char)11U;
    #line 180 
    case 3: 
            #line 180 
    ;
    #line 181 
    return (unsigned char)22U;
    #line 183 
    case 5: 
            #line 183 
    ;
    #line 184 
    return (unsigned char)12U;
    #line 185 
    case 6: 
            #line 185 
    ;
    #line 186 
    return (unsigned char)18U;
    #line 187 
    case 7: 
            #line 187 
    ;
    #line 188 
    return (unsigned char)24U;
    #line 189 
    case 8: 
            #line 189 
    ;
    #line 190 
    return (unsigned char)36U;
    #line 191 
    case 9: 
            #line 191 
    ;
    #line 192 
    return (unsigned char)48U;
    #line 193 
    case 10: 
             #line 193 
    ;
    #line 194 
    return (unsigned char)72U;
    #line 195 
    case 11: 
             #line 195 
    ;
    #line 196 
    return (unsigned char)96U;
    #line 197 
    case 12: 
             #line 197 
    ;
    #line 198 
    return (unsigned char)108U;
  }
  #line 200 
  printk((char *)"\001",(int)rate);
  #line 201 
  return (unsigned char)0U;
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/rx.c"
static int process_rxed_802_11_packet(struct lbs_private *priv, struct sk_buff *skb)
{
  #line 217 
  struct rx80211packethdr *p_rx_pkt;
  #line 218 
  struct rxpd *prxpd;
  #line 219 
  struct rx_radiotap_hdr radiotap_hdr;
  #line 220 
  struct rx_radiotap_hdr *pradiotap_hdr;
  #line 215 
  int ret = 0;
  #line 216 
  struct net_device *dev = priv->dev;
  #line 222 
  p_rx_pkt = (struct rx80211packethdr *)skb->data;
  #line 223 
  prxpd = & p_rx_pkt->rx_pd;
  #line 227 
  if (skb->len <= 41U) {
    #line 228 
    if ((lbs_debug & 32768U) != 0U) {
      #line 228 
      char *tmp_0;
      #line 228 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 228 
                                                               tmp_0 = (char *)" (INT)"; else 
                                                                    #line 228 
                                                                    tmp_0 = (char *)"";
      #line 228 
      printk((char *)"\001",tmp_0);
    }
    #line 229 
    (dev->stats.rx_length_errors) ++;
    #line 230 
    ret = -22;
    #line 231 
    kfree_skb(skb);
    #line 232 
    goto done;
  }
  #line 235 
  if ((lbs_debug & 32768U) != 0U) {
    #line 235 
    char *tmp_2;
    #line 235 
    ;
    #line 235 
    ;
    #line 235 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 235 
                                                             tmp_2 = (char *)" (INT)"; else 
                                                                    #line 235 
                                                                    tmp_2 = (char *)"";
    #line 235 
    printk((char *)"\001",tmp_2,skb->len,20UL,(unsigned long)skb->len + 18446744073709551596UL);
  }
  #line 241 
  memset((void *)(& radiotap_hdr),0,11UL);
  #line 243 
  radiotap_hdr.hdr.it_len = (unsigned short)11U;
  #line 244 
  radiotap_hdr.hdr.it_present = 4102U;
  #line 245 
  radiotap_hdr.rate = convert_mv_rate_to_radiotap((unsigned char)((int)prxpd->rx_rate));
  #line 247 
  radiotap_hdr.antsignal = (unsigned char)((int)prxpd->snr + (int)prxpd->nf);
  #line 250 
  skb_pull(skb,20U);
  #line 253 
  if (skb_headroom(skb) <= 10U) {
    #line 253 
    if (pskb_expand_head(skb,11,0,2592U) != 0) {
      #line 255 
      netdev_alert(dev,(char *)"%s: couldn\'t pskb_expand_head\n",(char *)"process_rxed_802_11_packet");
      #line 256 
      ret = -12;
      #line 257 
      kfree_skb(skb);
      #line 258 
      goto done;
    }
  }
  #line 261 
  pradiotap_hdr = (struct rx_radiotap_hdr *)skb_push(skb,11U);
  #line 262 
  memcpy((void *)pradiotap_hdr,(void *)(& radiotap_hdr),11UL);
  #line 264 
  priv->cur_rate = (unsigned char)lbs_fw_index_to_data_rate((unsigned char)((int)prxpd->rx_rate));
  #line 266 
  if ((lbs_debug & 32768U) != 0U) {
    #line 266 
    char *tmp_8;
    #line 266 
    ;
    #line 266 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 266 
                                                             tmp_8 = (char *)" (INT)"; else 
                                                                    #line 266 
                                                                    tmp_8 = (char *)"";
    #line 266 
    printk((char *)"\001",tmp_8,skb->len);
  }
  #line 267 
  dev->stats.rx_bytes += (unsigned long)skb->len;
  #line 268 
  (dev->stats.rx_packets) ++;
  #line 270 
  skb->protocol = eth_type_trans(skb,priv->dev);
  #line 272 
  if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                           #line 273 
                                                           netif_rx(skb); else 
                                                                    #line 275 
                                                                    netif_rx_ni(skb);
  #line 277 
  ret = 0;
  #line 279 
  done: 
        #line 279 
  ;
  #line 280 
  return ret;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cfg.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 *p)
{
  #line 50 
  return *p;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 *p)
{
  #line 66 
  return *p;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 204 
void __might_sleep(char *, int, int);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cfg.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cfg.i.aux"
static void *ERR_PTR(long error);
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 348 
#line 348 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);
#line 352 
#line 352 
void lock_release(struct lockdep_map *, unsigned long);
#line 658 
#line 658 
void lockdep_rcu_suspicious(char *, int, char *);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25 
void *ldv_err_ptr(long error);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  #line 59 
  __preempt_count_add(1);
  #line 60 
  ldv_inline_asm();
  #line 62 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  #line 66 
  ldv_inline_asm();
  #line 64 
  __preempt_count_sub(1);
  #line 66 
  return;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 56 
bool rcu_is_watching(void);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  #line 208 
  __here_0: 
            #line 208 
  ;
  #line 208 
  ;
  #line 208 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  #line 210 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  #line 213 
  __here_0: 
            #line 213 
  ;
  #line 213 
  ;
  #line 213 
  lock_release(map,(unsigned long)((void *)0));
  #line 215 
  return;
}

#line 216 
#line 216 
extern struct lockdep_map rcu_lock_map;
#line 220 
#line 220 
int debug_lockdep_rcu_enabled(void);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  #line 615 
  __rcu_read_lock();
  #line 617 
  rcu_lock_acquire(& rcu_lock_map);
  {
    #line 618 
    bool __warned;
    #line 618 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 618 
      if (! __warned) {
        #line 618 
        if (! rcu_is_watching()) {
          #line 618 
          __warned = (_Bool)1;
          #line 618 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",618,(char *)"rcu_read_lock() used illegally while idle");
        }
      }
  }
  #line 621 
  return;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    #line 667 
    bool __warned;
    #line 667 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 667 
      if (! __warned) {
        #line 667 
        if (! rcu_is_watching()) {
          #line 667 
          __warned = (_Bool)1;
          #line 667 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",667,(char *)"rcu_read_unlock() used illegally while idle");
        }
      }
  }
  #line 670 
  __rcu_read_unlock();
  #line 671 
  rcu_lock_release(& rcu_lock_map);
  #line 672 
  return;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 200 
void __wake_up(struct wait_queue_head *, unsigned int, int, void *);
#line 248 
#line 248 
void init_wait_entry(struct wait_queue_entry *, int);
#line 1128 
#line 1128 
long prepare_to_wait_event(struct wait_queue_head *, struct wait_queue_entry *, int);
#line 1129 
#line 1129 
void finish_wait(struct wait_queue_head *, struct wait_queue_entry *);
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 207 
#line 207 
void __init_work(struct work_struct *, int);
#line 465 
#line 465 
bool cancel_delayed_work(struct delayed_work *);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 511 
#line 308  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cfg.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 219 
long schedule_timeout(long);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 369  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cfg.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 3144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_wake_all_queues(struct net_device *dev)
{
  #line 3146 
  unsigned int i;
  #line 3148 
  i = 0U;
  #line 3148 
  while (dev->num_tx_queues > i) {
    {
      #line 3149 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3150 
      netif_tx_wake_queue(txq);
    }
    #line 3148 
    i ++;
  }
  #line 3152 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue_0(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_0(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_queue_0(struct net_device *dev)
{
  #line 3168 
  netif_tx_stop_queue_0(netdev_get_tx_queue(dev,0U));
  #line 3169 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_queue_stopped(struct net_device *dev)
{
  #line 3187 
  return netif_tx_queue_stopped(netdev_get_tx_queue(dev,0U));
}

#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 4131 
#line 662  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cfg.i.aux"
static int cif_register_netdev_0(struct net_device *dev);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void *p)
{
  #line 10 
  return __le16_to_cpup((__le16 *)p);
}

#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void *p)
{
  #line 20 
  return __le64_to_cpup((__le64 *)p);
}

#line 609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static enum nl80211_channel_type cfg80211_get_chandef_type(struct cfg80211_chan_def *chandef)
{
  #line 611 
  switch ((unsigned int)chandef->width) {
    #line 612 
    case (unsigned int)0: 
                          #line 612 
    ;
    #line 613 
    return NL80211_CHAN_NO_HT;
    #line 614 
    case (unsigned int)1: 
                          #line 614 
    ;
    #line 615 
    return NL80211_CHAN_HT20;
    #line 616 
    case (unsigned int)2: 
                          #line 616 
    ;
    #line 617 
    if (chandef->center_freq1 > (chandef->chan)->center_freq) 
                                                              #line 618 
                                                              return NL80211_CHAN_HT40PLUS;
    #line 619 
    return NL80211_CHAN_HT40MINUS;
    #line 620 
    default: 
             #line 620 
    ;
    {
      #line 621 
      int __ret_warn_on = 1;
      #line 621 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 622 
        ldv_inline_asm();
        #line 623 
        ldv_inline_asm();
      }
      #line 621 
      long tmp = (long)(__ret_warn_on != 0);
    }
    #line 622 
    return NL80211_CHAN_NO_HT;
  }
}

#line 2241 
#line 2241 
struct element *ieee80211_bss_get_elem(struct cfg80211_bss *, u8);
#line 2252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static u8 *ieee80211_bss_get_ie(struct cfg80211_bss *bss, u8 id)
{
  #line 2254 
  return (u8 *)ieee80211_bss_get_elem(bss,(unsigned char)((int)id));
}

#line 4714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static void *wiphy_priv(struct wiphy *wiphy)
{
  #line 4716 
  if ((long)(wiphy == (struct wiphy *)0) != 0L) {
    #line 4717 
    ldv_inline_asm();
    #line 4718 
    ldv_inline_asm();
    #line 4719 
    ldv_inline_asm();
    #line 4716 
    ;
  }
  #line 4717 
  return (void *)(& wiphy->priv);
}

#line 4779 
#line 4779 
struct wiphy *wiphy_new_nm(struct cfg80211_ops *, int, char *);
#line 4794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static struct wiphy *wiphy_new(struct cfg80211_ops *ops, int sizeof_priv)
{
  #line 4797 
  return wiphy_new_nm(ops,sizeof_priv,(char *)0);
}

#line 4807 
#line 4807 
int wiphy_register(struct wiphy *);
#line 4818 
#line 4818 
void wiphy_unregister(struct wiphy *);
#line 4825 
#line 4825 
void wiphy_free(struct wiphy *);
#line 5027 
#line 5027 
int ieee80211_channel_to_frequency(int, enum nl80211_band);
#line 5044 
#line 5044 
struct ieee80211_channel *ieee80211_get_channel(struct wiphy *, int);
#line 5490 
#line 5490 
int regulatory_hint(struct wiphy *, char *);
#line 5612 
#line 5612 
void cfg80211_scan_done(struct cfg80211_scan_request *, struct cfg80211_scan_info *);
#line 5776 
#line 5776 
struct cfg80211_bss *cfg80211_inform_bss_data(struct wiphy *, struct cfg80211_inform_bss *, enum cfg80211_bss_frame_type, u8 *, u64, u16, u16, u8 *, size_t, gfp_t);
#line 5804  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static struct cfg80211_bss *cfg80211_inform_bss(struct wiphy *wiphy, struct ieee80211_channel *rx_channel, enum cfg80211_bss_frame_type ftype, u8 *bssid, u64 tsf, u16 capability, u16 beacon_interval, u8 *ie, size_t ielen, s32 signal, gfp_t gfp)
{
  #line 5811 
  struct cfg80211_inform_bss data = {.chan = rx_channel, .scan_width = NL80211_BSS_CHAN_WIDTH_20, .signal = signal, .boottime_ns = 0ULL, .parent_tsf = 0ULL, .parent_bssid = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .chains = (unsigned char)0, .chain_signal = {(signed char)0, (signed char)0, (signed char)0, (signed char)0}};
  #line 5817 
  return cfg80211_inform_bss_data(wiphy,& data,ftype,bssid,tsf,
                               (unsigned short)((int)capability),
                               (unsigned short)((int)beacon_interval),ie,
                               ielen,gfp);
}

#line 5832 
#line 5832 
struct cfg80211_bss *cfg80211_get_bss(struct wiphy *, struct ieee80211_channel *, u8 *, u8 *, size_t, enum ieee80211_bss_type, enum ieee80211_privacy);
#line 5864 
#line 5864 
void cfg80211_put_bss(struct wiphy *, struct cfg80211_bss *);
#line 6024 
#line 6024 
void cfg80211_michael_mic_failure(struct net_device *, u8 *, enum nl80211_key_type, int, u8 *, gfp_t);
#line 6043 
#line 6043 
void cfg80211_ibss_joined(struct net_device *, u8 *, struct ieee80211_channel *, gfp_t);
#line 6451 
#line 6451 
void cfg80211_connect_done(struct net_device *, struct cfg80211_connect_resp_params *, gfp_t);
#line 6494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static void cfg80211_connect_bss(struct net_device *dev, u8 *bssid, struct cfg80211_bss *bss, u8 *req_ie, size_t req_ie_len, u8 *resp_ie, size_t resp_ie_len, int status, gfp_t gfp, enum nl80211_timeout_reason timeout_reason)
{
  #line 6500 
  struct cfg80211_connect_resp_params params;
  #line 6502 
  memset((void *)(& params),0,112UL);
  #line 6503 
  params.status = status;
  #line 6504 
  params.bssid = bssid;
  #line 6505 
  params.bss = bss;
  #line 6506 
  params.req_ie = req_ie;
  #line 6507 
  params.req_ie_len = req_ie_len;
  #line 6508 
  params.resp_ie = resp_ie;
  #line 6509 
  params.resp_ie_len = resp_ie_len;
  #line 6510 
  params.timeout_reason = timeout_reason;
  #line 6512 
  cfg80211_connect_done(dev,& params,gfp);
  #line 6513 
  return;
}

#line 6536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static void cfg80211_connect_result(struct net_device *dev, u8 *bssid, u8 *req_ie, size_t req_ie_len, u8 *resp_ie, size_t resp_ie_len, u16 status, gfp_t gfp)
{
  #line 6541 
  cfg80211_connect_bss(dev,bssid,(struct cfg80211_bss *)0,req_ie,req_ie_len,resp_ie,resp_ie_len,(int)status,gfp,(enum nl80211_timeout_reason)NL80211_TIMEOUT_UNSPECIFIED);
  #line 6542 
  return;
}

#line 6647 
#line 6647 
void cfg80211_disconnected(struct net_device *, u16, u8 *, size_t, bool, gfp_t);
#line 7251 
#line 7251 
unsigned int ieee80211_get_num_supported_channels(struct wiphy *);
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 54 
int lbs_set_iface_type(struct lbs_private *priv, enum nl80211_iftype type);
#line 56 
#line 56 
int lbs_rtap_supported(struct lbs_private *priv);
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.h"
#line 2038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
struct wireless_dev *lbs_cfg_alloc(struct device *dev);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.h"
#line 2102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
int lbs_cfg_register(struct lbs_private *priv);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.h"
#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
void lbs_cfg_free(struct lbs_private *priv);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.h"
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
void lbs_send_disconnect_notification(struct lbs_private *priv, bool locally_generated);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.h"
#line 831  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
void lbs_send_mic_failureevent(struct lbs_private *priv, u32 event);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.h"
#line 779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
void lbs_scan_done(struct lbs_private *priv);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.h"
#line 2145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
void lbs_scan_deinit(struct lbs_private *priv);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.h"
#line 1401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
int lbs_disconnect(struct lbs_private *priv, u16 reason);
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.h"
#line 72 
void lbs_mac_event_disconnected(struct lbs_private *priv, bool locally_generated);
#line 86 
#line 86 
int lbs_set_channel(struct lbs_private *priv, u8 channel);
#line 98 
#line 98 
int lbs_set_radio(struct lbs_private *priv, u8 preamble, u8 radio_on);
#line 100 
#line 100 
void lbs_set_mac_control(struct lbs_private *priv);
#line 132 
#line 132 
int lbs_get_rssi(struct lbs_private *priv, s8 *rssi, s8 *nf);
#line 134 
#line 134 
int lbs_set_11d_domain_info(struct lbs_private *priv);
#line 140 
#line 140 
int lbs_set_ps_mode(struct lbs_private *priv, u16 cmd_action, bool block);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/mesh.h"
__inline static bool lbs_mesh_activated(struct lbs_private *priv)
{
  #line 27 
  return (_Bool)((unsigned int)priv->mesh_tlv != 0U);
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static struct ieee80211_channel lbs_2ghz_channels[14U] = {{.center_freq = 2412U, .hw_value = (unsigned short)1U, .max_power = 30}, {.center_freq = 2417U, .hw_value = (unsigned short)2U, .max_power = 30}, {.center_freq = 2422U, .hw_value = (unsigned short)3U, .max_power = 30}, {.center_freq = 2427U, .hw_value = (unsigned short)4U, .max_power = 30}, {.center_freq = 2432U, .hw_value = (unsigned short)5U, .max_power = 30}, {.center_freq = 2437U, .hw_value = (unsigned short)6U, .max_power = 30}, {.center_freq = 2442U, .hw_value = (unsigned short)7U, .max_power = 30}, {.center_freq = 2447U, .hw_value = (unsigned short)8U, .max_power = 30}, {.center_freq = 2452U, .hw_value = (unsigned short)9U, .max_power = 30}, {.center_freq = 2457U, .hw_value = (unsigned short)10U, .max_power = 30}, {.center_freq = 2462U, .hw_value = (unsigned short)11U, .max_power = 30}, {.center_freq = 2467U, .hw_value = (unsigned short)12U, .max_power = 30}, {.center_freq = 2472U, .hw_value = (unsigned short)13U, .max_power = 30}, {.center_freq = 2484U, .hw_value = (unsigned short)14U, .max_power = 30}};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static struct ieee80211_rate lbs_rates[12U] = {{.bitrate = (unsigned short)10U}, {.bitrate = (unsigned short)20U, .hw_value = (unsigned short)1U}, {.bitrate = (unsigned short)55U, .hw_value = (unsigned short)2U}, {.bitrate = (unsigned short)110U, .hw_value = (unsigned short)3U}, {.bitrate = (unsigned short)60U, .hw_value = (unsigned short)9U}, {.bitrate = (unsigned short)90U, .hw_value = (unsigned short)6U}, {.bitrate = (unsigned short)120U, .hw_value = (unsigned short)7U}, {.bitrate = (unsigned short)180U, .hw_value = (unsigned short)8U}, {.bitrate = (unsigned short)240U, .hw_value = (unsigned short)9U}, {.bitrate = (unsigned short)360U, .hw_value = (unsigned short)10U}, {.bitrate = (unsigned short)480U, .hw_value = (unsigned short)11U}, {.bitrate = (unsigned short)540U, .hw_value = (unsigned short)12U}};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static struct ieee80211_supported_band lbs_band_2ghz = {.channels = (struct ieee80211_channel *)(& lbs_2ghz_channels), .bitrates = (struct ieee80211_rate *)(& lbs_rates), .n_channels = 14, .n_bitrates = 12};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static u32 cipher_suites[4U] = {1027073U, 1027077U, 1027074U, 1027076U};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_auth_to_authtype(enum nl80211_auth_type auth_type)
{
  #line 109 
  int ret = -524;
  #line 111 
  switch ((unsigned int)auth_type) {
    #line 112 
    case (unsigned int)0: 
                          #line 112 
    ;
    #line 113 
    case (unsigned int)1: 
                          #line 113 
    ;
    #line 114 
    ret = (int)auth_type;
    #line 115 
    break;
    #line 116 
    case (unsigned int)8: 
                          #line 116 
    ;
    #line 117 
    ret = 0;
    #line 118 
    break;
    #line 119 
    case (unsigned int)3: 
                          #line 119 
    ;
    #line 120 
    ret = 128;
    #line 121 
    break;
    #line 122 
    default: 
             #line 122 
    ;
    #line 124 
    break;
  }
  #line 126 
  return ret;
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_add_rates(u8 *rates)
{
  #line 136 
  size_t i;
  #line 138 
  i = 0UL;
  #line 138 
  while (i <= 11UL) {
    {
      #line 139 
      u8 rate = (unsigned char)((unsigned int)lbs_rates[i].bitrate / 5U);
      #line 140 
      if (((unsigned int)rate == 2U || (unsigned int)rate == 4U) || ((unsigned int)rate == 11U || (unsigned int)rate == 22U)) 
        #line 142 
        rate = (unsigned char)((unsigned int)rate | 128U);
      #line 143 
      *(rates + i) = rate;
    }
    #line 138 
    i ++;
  }
  #line 145 
  return 12;
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_add_ssid_tlv(u8 *tlv, u8 *ssid, int ssid_len)
{
  #line 167 
  struct mrvl_ie_ssid_param_set *ssid_tlv = (struct mrvl_ie_ssid_param_set *)tlv;
  #line 174 
  ssid_tlv->header.type = (unsigned short)0U;
  #line 175 
  ssid_tlv->header.len = (unsigned short)ssid_len;
  #line 176 
  memcpy((void *)(& ssid_tlv->ssid),(void *)ssid,(unsigned long)ssid_len);
  #line 177 
  return (int)((unsigned int)ssid_len + 4U);
}

#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_add_channel_list_tlv(struct lbs_private *priv, u8 *tlv, int last_channel, int active_scan)
{
  #line 193 
  int chanscanparamsize = (int)((unsigned long)(last_channel - priv->scan_channel) * (unsigned long)7U);
  #line 196 
  struct mrvl_ie_header *header = (struct mrvl_ie_header *)tlv;
  #line 211 
  header->type = (unsigned short)257U;
  #line 212 
  header->len = (unsigned short)chanscanparamsize;
  #line 213 
  tlv += 4UL;
  #line 217 
  memset((void *)tlv,0,(unsigned long)chanscanparamsize);
  #line 219 
  while (priv->scan_channel < last_channel) {
    #line 220 
    struct chanscanparamset *param = (struct chanscanparamset *)tlv;
    #line 222 
    param->radiotype = (unsigned char)0U;
    #line 223 
    param->channumber = (unsigned char)((priv->scan_req)->channels[priv->scan_channel])->hw_value;
    #line 225 
    if (active_scan != 0) 
                          #line 226 
                          param->maxscantime = (unsigned short)40U;
    else {
      #line 228 
      param->chanscanmode.passivescan = (unsigned char)1U;
      #line 229 
      param->maxscantime = (unsigned short)100U;
    }
    #line 231 
    tlv += 7UL;
    #line 232 
    (priv->scan_channel) ++;
  }
  #line 234 
  return (int)((unsigned int)chanscanparamsize + 4U);
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_add_supported_rates_tlv(u8 *tlv)
{
  #line 253 
  size_t i;
  #line 254 
  struct mrvl_ie_rates_param_set *rate_tlv = (struct mrvl_ie_rates_param_set *)tlv;
  #line 261 
  rate_tlv->header.type = (unsigned short)1U;
  #line 262 
  tlv += 4UL;
  #line 263 
  i = (unsigned long)lbs_add_rates(tlv);
  #line 264 
  tlv += i;
  #line 265 
  rate_tlv->header.len = (unsigned short)i;
  #line 266 
  return (int)(i + (size_t)4U);
}

#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static u8 *add_ie_rates(u8 *tlv, u8 *ie, int *nrates)
{
  #line 273 
  int hw;
  #line 273 
  int ap;
  #line 274 
  u8 hw_rate;
  #line 273 
  int ap_max = (int)*(ie + 1U);
  #line 276 
  if (ap_max > 14) {
    #line 277 
    if ((lbs_debug & 256U) != 0U) {
      #line 277 
      char *tmp_0;
      #line 277 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 277 
                                                               tmp_0 = (char *)" (INT)"; else 
                                                                    #line 277 
                                                                    tmp_0 = (char *)"";
      #line 277 
      printk((char *)"\001",tmp_0);
    }
    #line 278 
    return tlv;
  }
  #line 281 
  ie += 2U;
  #line 283 
  lbs_deb_hex(256U,(char *)"AP IE Rates",ie,ap_max);
  #line 285 
  hw = 0;
  #line 285 
  while ((unsigned int)hw <= 11U) {
    #line 286 
    hw_rate = (unsigned char)((unsigned int)lbs_rates[hw].bitrate / 5U);
    #line 287 
    ap = 0;
    #line 287 
    while (ap < ap_max) {
      #line 288 
      if ((int)hw_rate == ((int)*(ie + (unsigned long)ap) & 127)) {
        #line 289 
        u8 *tmp_1;
        #line 289 
        tmp_1 = tlv;
        #line 289 
        tlv ++;
        #line 289 
        *tmp_1 = *(ie + (unsigned long)ap);
        #line 290 
        (*nrates) ++;
      }
      #line 287 
      ap ++;
    }
    #line 285 
    hw ++;
  }
  #line 294 
  return tlv;
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_add_common_rates_tlv(u8 *tlv, struct cfg80211_bss *bss)
{
  #line 303 
  u8 *rates_eid;
  #line 303 
  u8 *ext_rates_eid;
  #line 302 
  struct mrvl_ie_rates_param_set *rate_tlv = (struct mrvl_ie_rates_param_set *)tlv;
  #line 304 
  int n = 0;
  #line 306 
  rcu_read_lock();
  #line 307 
  rates_eid = ieee80211_bss_get_ie(bss,(unsigned char)1);
  #line 308 
  ext_rates_eid = ieee80211_bss_get_ie(bss,(unsigned char)50);
  #line 315 
  rate_tlv->header.type = (unsigned short)1U;
  #line 316 
  tlv += 4UL;
  #line 319 
  if (rates_eid != (u8 *)0U) {
    #line 320 
    tlv = add_ie_rates(tlv,rates_eid,& n);
    #line 323 
    if (ext_rates_eid != (u8 *)0U) 
                                   #line 324 
                                   tlv = add_ie_rates(tlv,ext_rates_eid,& n);
  }
  else {
    #line 328 
    u8 *tmp_1;
    #line 329 
    u8 *tmp_2;
    #line 330 
    u8 *tmp_3;
    #line 331 
    u8 *tmp_4;
    #line 326 
    if ((lbs_debug & 256U) != 0U) {
      #line 326 
      char *tmp_0;
      #line 326 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 326 
                                                               tmp_0 = (char *)" (INT)"; else 
                                                                    #line 326 
                                                                    tmp_0 = (char *)"";
      #line 326 
      printk((char *)"\001",tmp_0);
    }
    #line 328 
    tmp_1 = tlv;
    #line 328 
    tlv ++;
    #line 328 
    *tmp_1 = (unsigned char)130U;
    #line 329 
    tmp_2 = tlv;
    #line 329 
    tlv ++;
    #line 329 
    *tmp_2 = (unsigned char)132U;
    #line 330 
    tmp_3 = tlv;
    #line 330 
    tlv ++;
    #line 330 
    *tmp_3 = (unsigned char)139U;
    #line 331 
    tmp_4 = tlv;
    #line 331 
    tlv ++;
    #line 331 
    *tmp_4 = (unsigned char)150U;
    #line 332 
    n = 4;
  }
  #line 334 
  rcu_read_unlock();
  #line 336 
  rate_tlv->header.len = (unsigned short)n;
  #line 337 
  return (int)((unsigned int)n + 4U);
}

#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_add_auth_type_tlv(u8 *tlv, enum nl80211_auth_type auth_type)
{
  #line 351 
  struct mrvl_ie_auth_type *auth = (struct mrvl_ie_auth_type *)tlv;
  #line 358 
  auth->header.type = (unsigned short)287U;
  #line 359 
  auth->header.len = (unsigned short)2U;
  #line 360 
  auth->auth = (unsigned short)lbs_auth_to_authtype(auth_type);
  #line 361 
  return 6;
}

#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_add_channel_tlv(u8 *tlv, u8 channel)
{
  #line 373 
  struct mrvl_ie_ds_param_set *ds = (struct mrvl_ie_ds_param_set *)tlv;
  #line 380 
  ds->header.type = (unsigned short)3U;
  #line 381 
  ds->header.len = (unsigned short)1U;
  #line 382 
  ds->channel = channel;
  #line 383 
  return 5;
}

#line 393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_add_cf_param_tlv(u8 *tlv)
{
  #line 395 
  struct mrvl_ie_cf_param_set *cf = (struct mrvl_ie_cf_param_set *)tlv;
  #line 405 
  cf->header.type = (unsigned short)4U;
  #line 406 
  cf->header.len = (unsigned short)6U;
  #line 407 
  return 10;
}

#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_add_wpa_tlv(u8 *tlv, u8 *ie, u8 ie_len)
{
  #line 419 
  size_t tlv_len;
  #line 431 
  u8 *tmp;
  #line 431 
  u8 *tmp_0;
  #line 432 
  u8 *tmp_1;
  #line 433 
  u8 *tmp_2;
  #line 433 
  u8 *tmp_4;
  #line 434 
  u8 *tmp_5;
  #line 431 
  tmp = tlv;
  #line 431 
  tlv ++;
  #line 431 
  tmp_0 = ie;
  #line 431 
  ie ++;
  #line 431 
  *tmp = *tmp_0;
  #line 432 
  tmp_1 = tlv;
  #line 432 
  tlv ++;
  #line 432 
  *tmp_1 = (unsigned char)0U;
  #line 433 
  tmp_2 = tlv;
  #line 433 
  tlv ++;
  #line 433 
  tmp_4 = ie;
  #line 433 
  ie ++;
  #line 433 
  *tmp_2 = (*tmp_4);
  #line 433 
  tlv_len = (unsigned long)(*tmp_4);
  #line 434 
  tmp_5 = tlv;
  #line 434 
  tlv ++;
  #line 434 
  *tmp_5 = (unsigned char)0U;
  #line 435 
  while (1) {
    #line 435 
    size_t tmp_8;
    #line 436 
    u8 *tmp_6;
    #line 436 
    u8 *tmp_7;
    #line 435 
    tmp_8 = tlv_len;
    #line 435 
    tlv_len --;
    #line 435 
    ;
    #line 435 
    if (! (tmp_8 != 0UL)) 
                          #line 435 
                          break;
    #line 436 
    tmp_6 = tlv;
    #line 436 
    tlv ++;
    #line 436 
    tmp_7 = ie;
    #line 436 
    ie ++;
    #line 436 
    *tmp_6 = *tmp_7;
  }
  #line 438 
  return (int)ie_len + 2;
}

#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_cfg_set_monitor_channel(struct wiphy *wiphy, struct cfg80211_chan_def *chandef)
{
  #line 448 
  struct lbs_private *priv = wiphy_priv(wiphy);
  #line 449 
  int ret = -524;
  #line 451 
  if (cfg80211_get_chandef_type(chandef) != (unsigned int)NL80211_CHAN_NO_HT) 
    #line 452 
    goto out;
  #line 454 
  ret = lbs_set_channel(priv,(unsigned char)((int)((unsigned char)(chandef->chan)->hw_value)));
  #line 456 
  out: 
       #line 456 
  ;
  #line 457 
  return ret;
}

#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_cfg_set_mesh_channel(struct wiphy *wiphy, struct net_device *netdev, struct ieee80211_channel *channel)
{
  #line 464 
  struct lbs_private *priv = wiphy_priv(wiphy);
  #line 465 
  int ret = -524;
  #line 467 
  if (priv->mesh_dev != netdev) 
                                #line 468 
                                goto out;
  #line 470 
  ret = lbs_mesh_set_channel(priv,(unsigned char)((int)((unsigned char)channel->hw_value)));
  #line 472 
  out: 
       #line 472 
  ;
  #line 473 
  return ret;
}

#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_ret_scan(struct lbs_private *priv, unsigned long dummy, struct cmd_header *resp)
{
  #line 502 
  struct cfg80211_bss *bss;
  #line 504 
  int bsssize;
  #line 505 
  u8 *pos;
  #line 506 
  u8 *tsfdesc;
  #line 507 
  int tsfsize;
  #line 508 
  int i;
  #line 503 
  struct cmd_ds_802_11_scan_rsp *scanresp = (struct cmd_ds_802_11_scan_rsp *)resp;
  #line 509 
  int ret = -84;
  #line 511 
  bsssize = (int)get_unaligned_le16((void *)(& scanresp->bssdescriptsize));
  #line 513 
  if ((lbs_debug & 128U) != 0U) {
    #line 513 
    char *tmp_1;
    #line 513 
    ;
    #line 513 
    ;
    #line 513 
    ;
    #line 513 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 513 
                                                             tmp_1 = (char *)" (INT)"; else 
                                                                    #line 513 
                                                                    tmp_1 = (char *)"";
    #line 513 
    printk((char *)"\001",tmp_1,(int)scanresp->nr_sets,bsssize,(int)resp->size);
  }
  #line 516 
  if ((unsigned int)scanresp->nr_sets == 0U) {
    #line 517 
    ret = 0;
    #line 518 
    goto done;
  }
  #line 546 
  pos = (u8 *)(& scanresp->bssdesc_and_tlvbuffer);
  #line 548 
  lbs_deb_hex(128U,(char *)"SCAN_RSP",(u8 *)(& scanresp->bssdesc_and_tlvbuffer),(int)scanresp->bssdescriptsize);
  #line 551 
  tsfdesc = pos + (unsigned long)bsssize;
  #line 552 
  tsfsize = (int)scanresp->nr_sets * 8 + 4;
  #line 553 
  lbs_deb_hex(128U,(char *)"SCAN_TSF",tsfdesc,tsfsize);
  #line 556 
  i = (int)get_unaligned_le16((void *)tsfdesc);
  #line 557 
  tsfdesc += 2U;
  #line 558 
  if (i != 275) {
    #line 559 
    if ((lbs_debug & 128U) != 0U) {
      #line 559 
      char *tmp_4;
      #line 559 
      ;
      #line 559 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 559 
                                                               tmp_4 = (char *)" (INT)"; else 
                                                                    #line 559 
                                                                    tmp_4 = (char *)"";
      #line 559 
      printk((char *)"\001",tmp_4,i);
    }
    #line 560 
    goto done;
  }
  #line 567 
  i = (int)get_unaligned_le16((void *)tsfdesc);
  #line 568 
  tsfdesc += 2U;
  #line 569 
  if (i / 8 != (int)scanresp->nr_sets) {
    #line 570 
    if ((lbs_debug & 128U) != 0U) {
      #line 570 
      char *tmp_7;
      #line 570 
      ;
      #line 570 
      ;
      #line 570 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 570 
                                                               tmp_7 = (char *)" (INT)"; else 
                                                                    #line 570 
                                                                    tmp_7 = (char *)"";
      #line 570 
      printk((char *)"\001",tmp_7,(int)scanresp->nr_sets,i / 8);
    }
    #line 573 
    goto done;
  }
  #line 576 
  i = 0;
  #line 576 
  while ((int)scanresp->nr_sets > i) {
    {
      #line 577 
      u8 *bssid;
      #line 578 
      u8 *ie;
      #line 579 
      int left;
      #line 580 
      int ielen;
      #line 581 
      int rssi;
      #line 582 
      u16 intvl;
      #line 583 
      u16 capa;
      #line 595 
      u8 *tmp_9;
      #line 584 
      int chan_no = -1;
      #line 585 
      u8 *ssid = (u8 *)0U;
      #line 586 
      u8 ssid_len = (unsigned char)0U;
      #line 588 
      int len = (int)get_unaligned_le16((void *)pos);
      #line 589 
      pos += 2U;
      #line 592 
      bssid = pos;
      #line 593 
      pos += 6U;
      #line 595 
      tmp_9 = pos;
      #line 595 
      pos ++;
      #line 595 
      rssi = (int)*tmp_9;
      #line 597 
      pos += 8U;
      #line 599 
      intvl = get_unaligned_le16((void *)pos);
      #line 600 
      pos += 2U;
      #line 602 
      capa = get_unaligned_le16((void *)pos);
      #line 603 
      pos += 2U;
      #line 606 
      ie = pos;
      #line 611 
      left = len + -19;
      #line 611 
      ielen = left;
      #line 612 
      while (left > 1) {
        #line 613 
        u8 id;
        #line 613 
        u8 elen;
        #line 614 
        u8 *tmp_10;
        #line 615 
        u8 *tmp_11;
        #line 614 
        tmp_10 = pos;
        #line 614 
        pos ++;
        #line 614 
        id = *tmp_10;
        #line 615 
        tmp_11 = pos;
        #line 615 
        pos ++;
        #line 615 
        elen = *tmp_11;
        #line 616 
        left += -2;
        #line 617 
        if ((int)elen > left) {
          #line 618 
          if ((lbs_debug & 128U) != 0U) {
            #line 618 
            char *tmp_13;
            #line 618 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 618 
              tmp_13 = (char *)" (INT)"; else 
                                              #line 618 
                                              tmp_13 = (char *)"";
            #line 618 
            printk((char *)"\001",tmp_13);
          }
          #line 619 
          goto done;
        }
        #line 622 
        if ((unsigned int)id == 3U) 
                                    #line 623 
                                    chan_no = (int)*pos;
        #line 624 
        if ((unsigned int)id == 0U) {
          #line 625 
          ssid = pos;
          #line 626 
          ssid_len = elen;
        }
        #line 628 
        left -= (int)elen;
        #line 629 
        pos += (unsigned long)elen;
      }
      #line 633 
      if (chan_no != -1) {
        #line 634 
        struct wiphy *wiphy = (priv->wdev)->wiphy;
        #line 635 
        int freq = ieee80211_channel_to_frequency(chan_no,(enum nl80211_band)NL80211_BAND_2GHZ);
        #line 637 
        struct ieee80211_channel *channel = ieee80211_get_channel(wiphy,freq);
        #line 640 
        if ((lbs_debug & 128U) != 0U) {
          #line 640 
          char *tmp_17;
          #line 640 
          ;
          #line 640 
          ;
          #line 640 
          ;
          #line 640 
          ;
          #line 640 
          ;
          #line 640 
          ;
          #line 640 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 640 
                                                                   tmp_17 = (char *)" (INT)"; else 
                                                                    #line 640 
                                                                    tmp_17 = (char *)"";
          #line 640 
          printk((char *)"\001",tmp_17,bssid,(int)capa,chan_no,(int)ssid_len,ssid,3 - rssi);
        }
        #line 644 
        if (channel != (struct ieee80211_channel *)0 && (channel->flags & 1U) == 0U) {
          #line 646 
          ;
          #line 646 
          ;
          #line 646 
          ;
          #line 646 
          ;
          #line 646 
          ;
          #line 646 
          ;
          #line 646 
          ;
          #line 646 
          ;
          #line 646 
          bss = cfg80211_inform_bss(wiphy,channel,(enum cfg80211_bss_frame_type)CFG80211_BSS_FTYPE_UNKNOWN,bssid,get_unaligned_le64((void *)tsfdesc),(unsigned short)((int)capa),(unsigned short)((int)intvl),ie,(unsigned long)ielen,(3 - rssi) * 100,3264U);
          #line 652 
          cfg80211_put_bss(wiphy,bss);
        }
      }
      else 
        #line 655 
        if ((lbs_debug & 128U) != 0U) {
          #line 655 
          char *tmp_20;
          #line 655 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 655 
                                                                   tmp_20 = (char *)" (INT)"; else 
                                                                    #line 655 
                                                                    tmp_20 = (char *)"";
          #line 655 
          printk((char *)"\001",tmp_20);
        }
      #line 657 
      tsfdesc += 8U;
    }
    #line 576 
    i ++;
  }
  #line 659 
  ret = 0;
  #line 661 
  done: 
        #line 661 
  ;
  #line 662 
  return ret;
}

#line 680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static void lbs_scan_worker(struct work_struct *work)
{
  #line 683 
  void *__mptr;
  #line 684 
  struct cmd_ds_802_11_scan *scan_cmd;
  #line 685 
  u8 *tlv;
  #line 686 
  int last_channel;
  #line 687 
  int running;
  #line 687 
  int carrier;
  #line 697 
  int tmp_2;
  #line 683 
  __mptr = (void *)work;
  #line 682 
  struct lbs_private *priv = ((struct lbs_private *)(__mptr + 18446744073709543000U));
  #line 689 
  scan_cmd = (struct cmd_ds_802_11_scan *)kzalloc_0(99UL,3264U);
  #line 690 
  if (scan_cmd == (struct cmd_ds_802_11_scan *)0) 
                                                  #line 691 
                                                  return;
  #line 694 
  scan_cmd->bsstype = (unsigned char)3U;
  #line 697 
  if (netif_queue_stopped(priv->dev)) 
                                      #line 697 
                                      tmp_2 = 0; else 
                                                      #line 697 
                                                      tmp_2 = 1;
  #line 697 
  running = tmp_2;
  #line 698 
  carrier = (int)netif_carrier_ok(priv->dev);
  #line 699 
  if (running != 0) 
                    #line 700 
                    netif_stop_queue_0(priv->dev);
  #line 701 
  if (carrier != 0) 
                    #line 702 
                    netif_carrier_off(priv->dev);
  #line 705 
  tlv = (u8 *)(& scan_cmd->tlvbuffer);
  #line 708 
  if ((priv->scan_req)->n_ssids != 0 && (unsigned int)((priv->scan_req)->ssids)->ssid_len != 0U) {
    #line 711 
    tlv += (unsigned long)lbs_add_ssid_tlv(tlv,(u8 *)(& ((priv->scan_req)->ssids)->ssid),
                         (int)((priv->scan_req)->ssids)->ssid_len);
  }
  #line 714 
  last_channel = priv->scan_channel + 4;
  #line 715 
  if ((priv->scan_req)->n_channels < (unsigned int)last_channel) 
                                                                 #line 716 
                                                                 last_channel = (int)(priv->scan_req)->n_channels;
  #line 718 
  tlv += (unsigned long)lbs_add_channel_list_tlv(priv,tlv,last_channel,
                                 (priv->scan_req)->n_ssids);
  #line 721 
  tlv += (unsigned long)lbs_add_supported_rates_tlv(tlv);
  #line 723 
  if ((unsigned int)priv->scan_channel < (priv->scan_req)->n_channels) {
    #line 724 
    cancel_delayed_work(& priv->scan_work);
    #line 725 
    if ((int)netif_running(priv->dev) != 0) {
      #line 726 
      ;
      #line 726 
      ;
      #line 726 
      cif_queue_delayed_work(priv->work_thread,& priv->scan_work,msecs_to_jiffies(300U));
    }
  }
  #line 731 
  scan_cmd->hdr.size = (unsigned short)(tlv - (u8 *)scan_cmd);
  #line 732 
  lbs_deb_hex(128U,(char *)"SCAN_CMD",(u8 *)scan_cmd,15);
  #line 734 
  lbs_deb_hex(128U,(char *)"SCAN_TLV",(u8 *)(& scan_cmd->tlvbuffer),(int)(tlv - (uint8_t *)(& scan_cmd->tlvbuffer)));
  #line 737 
  __lbs_cmd(priv,(unsigned short)6,& scan_cmd->hdr,(int)scan_cmd->hdr.size,& lbs_ret_scan,0UL);
  #line 741 
  if ((unsigned int)priv->scan_channel >= (priv->scan_req)->n_channels) {
    #line 743 
    cancel_delayed_work(& priv->scan_work);
    #line 744 
    lbs_scan_done(priv);
  }
  #line 748 
  if (carrier != 0) 
                    #line 749 
                    netif_carrier_on(priv->dev);
  #line 750 
  if (running != 0 && priv->tx_pending_len == 0) 
                                                 #line 751 
                                                 netif_wake_queue(priv->dev);
  #line 753 
  kfree((void *)scan_cmd);
  #line 756 
  if (priv->scan_req == (struct cfg80211_scan_request *)0) {
    #line 757 
    if ((lbs_debug & 128U) != 0U) {
      #line 757 
      char *tmp_10;
      #line 757 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 757 
                                                               tmp_10 = (char *)" (INT)"; else 
                                                                    #line 757 
                                                                    tmp_10 = (char *)"";
      #line 757 
      printk((char *)"\001",tmp_10);
    }
    #line 758 
    __wake_up(& priv->scan_q,3U,0,(void *)0);
  }
  #line 760 
  return;
}

#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static void _internal_start_scan(struct lbs_private *priv, bool internal, struct cfg80211_scan_request *request)
{
  #line 765 
  if ((lbs_debug & 128U) != 0U) {
    #line 765 
    char *tmp_0;
    #line 765 
    ;
    #line 765 
    ;
    #line 765 
    ;
    #line 765 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 765 
                                                             tmp_0 = (char *)" (INT)"; else 
                                                                    #line 765 
                                                                    tmp_0 = (char *)"";
    #line 765 
    printk((char *)"\001",tmp_0,request->n_ssids,request->n_channels,request->ie_len);
  }
  #line 768 
  priv->scan_channel = 0;
  #line 769 
  priv->scan_req = request;
  #line 770 
  priv->internal_scan = internal;
  #line 772 
  ;
  #line 772 
  ;
  #line 772 
  cif_queue_delayed_work(priv->work_thread,& priv->scan_work,msecs_to_jiffies(50U));
  #line 774 
  return;
}

#line 779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
void lbs_scan_done(struct lbs_private *priv)
{
  {
    #line 781 
    int __ret_warn_on = priv->scan_req == (struct cfg80211_scan_request *)0;
    #line 781 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 782 
      ldv_inline_asm();
      #line 783 
      ldv_inline_asm();
    }
    #line 781 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 783 
  if ((int)priv->internal_scan != 0) 
                                     #line 784 
                                     kfree((void *)priv->scan_req);
  else {
    #line 786 
    struct cfg80211_scan_info info = {.scan_start_tsf = 0ULL, .tsf_bssid = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .aborted = (_Bool)0};
    #line 790 
    cfg80211_scan_done(priv->scan_req,& info);
  }
  #line 793 
  priv->scan_req = (struct cfg80211_scan_request *)0;
  #line 794 
  return;
}

#line 796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_cfg_scan(struct wiphy *wiphy, struct cfg80211_scan_request *request)
{
  #line 799 
  struct lbs_private *priv = wiphy_priv(wiphy);
  #line 800 
  int ret = 0;
  #line 802 
  if (priv->scan_req != (struct cfg80211_scan_request *)0) 
                                                           #line 802 
                                                           goto _LOR;
  else {
    #line 802 
    if ((int)test_bit(0L,(unsigned long *)(& priv->scan_work.work.data)) != 0) {
      #line 802 
      _LOR: {
              #line 804 
              ret = -11;
              #line 805 
              goto out;
            }
    }
  }
  #line 808 
  _internal_start_scan(priv,(_Bool)0,request);
  #line 810 
  if ((unsigned int)priv->surpriseremoved != 0U) 
                                                 #line 811 
                                                 ret = -5;
  #line 813 
  out: 
       #line 813 
  ;
  #line 814 
  return ret;
}

#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
void lbs_send_disconnect_notification(struct lbs_private *priv, bool locally_generated)
{
  #line 827 
  cfg80211_disconnected(priv->dev,(unsigned short)0,(u8 *)0U,0UL,(_Bool)((bool)((int)locally_generated) != 0),3264U);
  #line 828 
  return;
}

#line 831  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
void lbs_send_mic_failureevent(struct lbs_private *priv, u32 event)
{
  #line 833 
  cfg80211_michael_mic_failure(priv->dev,(u8 *)(& priv->assoc_bss),(enum nl80211_key_type)(event != 13U),-1,(u8 *)0U,3264U);
  #line 837 
  return;
}

#line 854  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_remove_wep_keys(struct lbs_private *priv)
{
  #line 864 
  uint16_t __sz;
  #line 856 
  struct cmd_ds_802_11_set_wep cmd;
  #line 857 
  int ret;
  #line 859 
  memset((void *)(& cmd),0,80UL);
  #line 860 
  cmd.hdr.size = (unsigned short)80U;
  #line 861 
  cmd.keyindex = (unsigned short)priv->wep_tx_key;
  #line 862 
  cmd.action = (unsigned short)4U;
  #line 864 
  __sz = cmd.hdr.size;
  #line 864 
  cmd.hdr.size = (unsigned short)80U;
  #line 864 
  ret = __lbs_cmd(priv,(unsigned short)19,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 866 
  return ret;
}

#line 872  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_set_wep_keys(struct lbs_private *priv)
{
  #line 874 
  struct cmd_ds_802_11_set_wep cmd;
  #line 875 
  int i;
  #line 876 
  int ret;
  #line 897 
  if ((((unsigned int)priv->wep_key_len[0] != 0U || (unsigned int)priv->wep_key_len[1] != 0U) || (unsigned int)priv->wep_key_len[2] != 0U) || (unsigned int)priv->wep_key_len[3] != 0U) {
    #line 921 
    uint16_t __sz;
    #line 900 
    memset((void *)(& cmd),0,80UL);
    #line 901 
    cmd.hdr.size = (unsigned short)80U;
    #line 902 
    cmd.keyindex = (unsigned short)priv->wep_tx_key;
    #line 903 
    cmd.action = (unsigned short)2U;
    #line 905 
    i = 0;
    #line 905 
    while (i <= 3) {
      #line 906 
      switch ((int)priv->wep_key_len[i]) {
        #line 907 
        case 5: 
                #line 907 
        ;
        #line 908 
        cmd.keytype[i] = (unsigned char)1U;
        #line 909 
        break;
        #line 910 
        case 13: 
                 #line 910 
        ;
        #line 911 
        cmd.keytype[i] = (unsigned char)2U;
        #line 912 
        break;
        #line 913 
        default: 
                 #line 913 
        ;
        #line 914 
        cmd.keytype[i] = (unsigned char)0U;
        #line 915 
        break;
      }
      #line 917 
      memcpy((void *)(& cmd.keymaterial[i]),(void *)(& priv->wep_key[i]),(unsigned long)priv->wep_key_len[i]);
      #line 905 
      i ++;
    }
    #line 921 
    __sz = cmd.hdr.size;
    #line 921 
    cmd.hdr.size = (unsigned short)80U;
    #line 921 
    ret = __lbs_cmd(priv,(unsigned short)19,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  }
  else 
       #line 924 
       ret = lbs_remove_wep_keys(priv);
  #line 927 
  return ret;
}

#line 934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_enable_rsn(struct lbs_private *priv, int enable)
{
  #line 952 
  uint16_t __sz;
  #line 936 
  struct cmd_ds_802_11_enable_rsn cmd;
  #line 937 
  int ret;
  #line 947 
  memset((void *)(& cmd),0,12UL);
  #line 948 
  cmd.hdr.size = (unsigned short)12U;
  #line 949 
  cmd.action = (unsigned short)1U;
  #line 950 
  cmd.enable = (unsigned short)enable;
  #line 952 
  __sz = cmd.hdr.size;
  #line 952 
  cmd.hdr.size = (unsigned short)12U;
  #line 952 
  ret = __lbs_cmd(priv,(unsigned short)47,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 954 
  return ret;
}

#line 974  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_set_key_material(struct lbs_private *priv, int key_type, int key_info, u8 *key, u16 key_len)
{
  #line 1007 
  uint16_t __sz;
  #line 978 
  struct cmd_key_material cmd;
  #line 979 
  int ret;
  #line 996 
  memset((void *)(& cmd),0,52UL);
  #line 997 
  cmd.hdr.size = (unsigned short)52U;
  #line 998 
  cmd.action = (unsigned short)1U;
  #line 999 
  cmd.param.type = (unsigned short)256U;
  #line 1000 
  cmd.param.length = (unsigned short)38U;
  #line 1001 
  cmd.param.keytypeid = (unsigned short)key_type;
  #line 1002 
  cmd.param.keyinfo = (unsigned short)key_info;
  #line 1003 
  cmd.param.keylen = key_len;
  #line 1004 
  if (key != (u8 *)0U && (unsigned int)key_len != 0U) 
                                                      #line 1005 
                                                      memcpy((void *)(& cmd.param.key),(void *)key,(unsigned long)key_len);
  #line 1007 
  __sz = cmd.hdr.size;
  #line 1007 
  cmd.hdr.size = (unsigned short)52U;
  #line 1007 
  ret = __lbs_cmd(priv,(unsigned short)94,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 1009 
  return ret;
}

#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_set_authtype(struct lbs_private *priv, struct cfg80211_connect_params *sme)
{
  #line 1044 
  uint16_t __sz;
  #line 1022 
  struct cmd_ds_802_11_authenticate cmd;
  #line 1023 
  int ret;
  #line 1034 
  memset((void *)(& cmd),0,25UL);
  #line 1035 
  cmd.hdr.size = (unsigned short)25U;
  #line 1036 
  if (sme->bssid != (u8 *)0U) 
                              #line 1037 
                              memcpy((void *)(& cmd.bssid),(void *)sme->bssid,6UL);
  #line 1039 
  ret = lbs_auth_to_authtype(sme->auth_type);
  #line 1040 
  if (ret < 0) 
               #line 1041 
               goto done;
  #line 1043 
  cmd.authtype = (unsigned char)ret;
  #line 1044 
  __sz = cmd.hdr.size;
  #line 1044 
  cmd.hdr.size = (unsigned short)25U;
  #line 1044 
  ret = __lbs_cmd(priv,(unsigned short)17,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 1046 
  done: 
        #line 1046 
  ;
  #line 1047 
  return ret;
}

#line 1063  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_associate(struct lbs_private *priv, struct cfg80211_bss *bss, struct cfg80211_connect_params *sme)
{
  #line 1143 
  uint16_t __sz;
  #line 1067 
  struct cmd_ds_802_11_associate_response *resp;
  #line 1070 
  u8 *ssid_eid;
  #line 1071 
  size_t len;
  #line 1071 
  size_t resp_ie_len;
  #line 1072 
  int status;
  #line 1073 
  int ret;
  #line 1074 
  u8 *pos;
  #line 1075 
  u8 *tmp;
  #line 1068 
  struct cmd_ds_802_11_associate *cmd = kzalloc_0(203UL,3264U);
  #line 1077 
  if (cmd == (struct cmd_ds_802_11_associate *)0) {
    #line 1078 
    ret = -12;
    #line 1079 
    goto done;
  }
  #line 1081 
  pos = & cmd->iebuf[0];
  #line 1095 
  cmd->hdr.command = (unsigned short)80U;
  #line 1098 
  memcpy((void *)(& cmd->bssid),(void *)(& bss->bssid),6UL);
  #line 1099 
  cmd->listeninterval = (unsigned short)10U;
  #line 1100 
  cmd->capability = bss->capability;
  #line 1103 
  rcu_read_lock();
  #line 1104 
  ssid_eid = ieee80211_bss_get_ie(bss,(unsigned char)0);
  #line 1105 
  if (ssid_eid != (u8 *)0U) {
    #line 1106 
    pos += (unsigned long)lbs_add_ssid_tlv(pos,ssid_eid + 2U,(int)*(ssid_eid + 1U));
  }
  else 
    #line 1108 
    if ((lbs_debug & 256U) != 0U) {
      #line 1108 
      char *tmp_3;
      #line 1108 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1108 
                                                               tmp_3 = (char *)" (INT)"; else 
                                                                    #line 1108 
                                                                    tmp_3 = (char *)"";
      #line 1108 
      printk((char *)"\001",tmp_3);
    }
  #line 1109 
  rcu_read_unlock();
  #line 1112 
  if (bss->channel != (struct ieee80211_channel *)0) {
    #line 1113 
    pos += (unsigned long)lbs_add_channel_tlv(pos,
                            (unsigned char)((int)((unsigned char)(bss->channel)->hw_value)));
  }
  else 
    #line 1115 
    if ((lbs_debug & 256U) != 0U) {
      #line 1115 
      char *tmp_6;
      #line 1115 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1115 
                                                               tmp_6 = (char *)" (INT)"; else 
                                                                    #line 1115 
                                                                    tmp_6 = (char *)"";
      #line 1115 
      printk((char *)"\001",tmp_6);
    }
  #line 1118 
  pos += (unsigned long)lbs_add_cf_param_tlv(pos);
  #line 1121 
  tmp = pos + 4U;
  #line 1122 
  pos += (unsigned long)lbs_add_common_rates_tlv(pos,bss);
  #line 1123 
  lbs_deb_hex(256U,(char *)"Common Rates",tmp,(int)(pos - tmp));
  #line 1126 
  if (priv->fwrelease >> 24 > 8U) {
    #line 1127 
    pos += (unsigned long)lbs_add_auth_type_tlv(pos,sme->auth_type);
  }
  #line 1130 
  if (sme->ie != (u8 *)0U && sme->ie_len != 0UL) {
    #line 1131 
    pos += (unsigned long)lbs_add_wpa_tlv(pos,sme->ie,
                         (unsigned char)((int)((unsigned char)sme->ie_len)));
  }
  #line 1133 
  len = (unsigned long)((unsigned short)(pos - (u8 *)(& cmd->iebuf))) + 21UL;
  #line 1135 
  cmd->hdr.size = (unsigned short)len;
  #line 1137 
  lbs_deb_hex(256U,(char *)"ASSOC_CMD",(u8 *)cmd,(int)cmd->hdr.size);
  #line 1141 
  memcpy((void *)(& priv->assoc_bss),(void *)(& bss->bssid),6UL);
  #line 1143 
  __sz = cmd->hdr.size;
  #line 1143 
  cmd->hdr.size = (unsigned short)533U;
  #line 1143 
  ret = __lbs_cmd(priv,(unsigned short)80,& cmd->hdr,(int)__sz,
                   & lbs_cmd_copyback,(unsigned long)cmd);
  #line 1144 
  if (ret != 0) 
                #line 1145 
                goto done;
  #line 1149 
  resp = (struct cmd_ds_802_11_associate_response *)cmd;
  #line 1150 
  status = (int)resp->statuscode;
  #line 1168 
  if (priv->fwrelease >> 24 <= 8U) 
    #line 1169 
    switch (status) {
      #line 1170 
      case 0: 
              #line 1170 
      ;
      #line 1171 
      break;
      #line 1172 
      case 1: 
              #line 1172 
      ;
      #line 1173 
      if ((lbs_debug & 256U) != 0U) {
        #line 1173 
        char *tmp_14;
        #line 1173 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 1173 
                                                                 tmp_14 = (char *)" (INT)"; else 
                                                                    #line 1173 
                                                                    tmp_14 = (char *)"";
        #line 1173 
        printk((char *)"\001",tmp_14);
      }
      #line 1174 
      status = 10;
      #line 1175 
      break;
      #line 1176 
      case 2: 
              #line 1176 
      ;
      #line 1177 
      if ((lbs_debug & 256U) != 0U) {
        #line 1177 
        char *tmp_16;
        #line 1177 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 1177 
                                                                 tmp_16 = (char *)" (INT)"; else 
                                                                    #line 1177 
                                                                    tmp_16 = (char *)"";
        #line 1177 
        printk((char *)"\001",tmp_16);
      }
      #line 1178 
      status = 16;
      #line 1179 
      break;
      #line 1180 
      case 3: 
              #line 1180 
      ;
      #line 1181 
      if ((lbs_debug & 256U) != 0U) {
        #line 1181 
        char *tmp_18;
        #line 1181 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 1181 
                                                                 tmp_18 = (char *)" (INT)"; else 
                                                                    #line 1181 
                                                                    tmp_18 = (char *)"";
        #line 1181 
        printk((char *)"\001",tmp_18);
      }
      #line 1182 
      status = 12;
      #line 1183 
      break;
      #line 1184 
      case 4: 
              #line 1184 
      ;
      #line 1185 
      if ((lbs_debug & 256U) != 0U) {
        #line 1185 
        char *tmp_20;
        #line 1185 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 1185 
                                                                 tmp_20 = (char *)" (INT)"; else 
                                                                    #line 1185 
                                                                    tmp_20 = (char *)"";
        #line 1185 
        printk((char *)"\001",tmp_20);
      }
      #line 1186 
      status = 14;
      #line 1187 
      break;
      #line 1188 
      default: 
               #line 1188 
      ;
      #line 1189 
      if ((lbs_debug & 256U) != 0U) {
        #line 1189 
        char *tmp_22;
        #line 1189 
        ;
        #line 1189 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 1189 
                                                                 tmp_22 = (char *)" (INT)"; else 
                                                                    #line 1189 
                                                                    tmp_22 = (char *)"";
        #line 1189 
        printk((char *)"\001",tmp_22,status);
      }
      #line 1193 
      break;
    }
  #line 1197 
  if ((lbs_debug & 256U) != 0U) {
    #line 1197 
    char *tmp_24;
    #line 1197 
    ;
    #line 1197 
    ;
    #line 1197 
    ;
    #line 1197 
    ;
    #line 1197 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1197 
                                                             tmp_24 = (char *)" (INT)"; else 
                                                                    #line 1197 
                                                                    tmp_24 = (char *)"";
    #line 1197 
    printk((char *)"\001",tmp_24,status,(int)resp->statuscode,(int)resp->capability,(int)resp->aid);
  }
  #line 1201 
  resp_ie_len = (unsigned long)resp->hdr.size + 18446744073709551602UL;
  #line 1204 
  cfg80211_connect_result(priv->dev,(u8 *)(& priv->assoc_bss),sme->ie,sme->ie_len,(u8 *)(& resp->iebuf),resp_ie_len,(unsigned short)((int)((unsigned short)status)),3264U);
  #line 1211 
  if (status == 0) {
    #line 1213 
    priv->connect_status = 0U;
    #line 1214 
    netif_carrier_on(priv->dev);
    #line 1215 
    if (priv->tx_pending_len == 0) 
                                   #line 1216 
                                   netif_tx_wake_all_queues(priv->dev);
  }
  #line 1219 
  kfree((void *)cmd);
  #line 1220 
  done: 
        #line 1220 
  ;
  #line 1221 
  return ret;
}

#line 1225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static struct cfg80211_scan_request *_new_connect_scan_req(struct wiphy *wiphy, struct cfg80211_connect_params *sme)
{
  #line 1228 
  int i;
  #line 1229 
  enum nl80211_band band;
  #line 1227 
  struct cfg80211_scan_request *creq = (struct cfg80211_scan_request *)0;
  #line 1228 
  int n_channels = (int)ieee80211_get_num_supported_channels(wiphy);
  #line 1231 
  creq = (struct cfg80211_scan_request *)kzalloc_0((unsigned long)n_channels * 8UL + 169UL,2592U);
  #line 1234 
  if (creq == (struct cfg80211_scan_request *)0) 
                                                 #line 1235 
                                                 return (struct cfg80211_scan_request *)0;
  #line 1238 
  creq->ssids = (struct cfg80211_ssid *)(& creq->channels[n_channels]);
  #line 1239 
  creq->n_channels = (unsigned int)n_channels;
  #line 1240 
  creq->n_ssids = 1;
  #line 1243 
  i = 0;
  #line 1244 
  band = NL80211_BAND_2GHZ;
  #line 1244 
  while (band <= (unsigned int)NL80211_BAND_6GHZ) {
    {
      #line 1245 
      int j;
      #line 1247 
      if (wiphy->bands[(unsigned int)band] == (struct ieee80211_supported_band *)0) 
        #line 1248 
        goto __Cont;
      #line 1250 
      j = 0;
      #line 1250 
      while ((wiphy->bands[(unsigned int)band])->n_channels > j) {
        #line 1252 
        if ((((wiphy->bands[(unsigned int)band])->channels + (unsigned long)j)->flags & 1U) != 0U) 
          #line 1254 
          goto __Cont_0;
        #line 1256 
        creq->channels[i] = (wiphy->bands[(unsigned int)band])->channels + (unsigned long)j;
        #line 1257 
        i ++;
        #line 1250 
        __Cont_0: 
                  #line 1250 
        j ++;
      }
    }
    #line 1244 
    __Cont: 
            #line 1244 
    band ++;
  }
  #line 1260 
  if (i != 0) {
    #line 1262 
    creq->n_channels = (unsigned int)i;
    #line 1265 
    memcpy((void *)(& (creq->ssids)->ssid),(void *)sme->ssid,sme->ssid_len);
    #line 1266 
    (creq->ssids)->ssid_len = (unsigned char)sme->ssid_len;
  }
  else {
    #line 1269 
    kfree((void *)creq);
    #line 1270 
    creq = (struct cfg80211_scan_request *)0;
  }
  #line 1273 
  return creq;
}

#line 1276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_cfg_connect(struct wiphy *wiphy, struct net_device *dev, struct cfg80211_connect_params *sme)
{
  #line 1279 
  struct lbs_private *priv = wiphy_priv(wiphy);
  #line 1280 
  struct cfg80211_bss *bss = (struct cfg80211_bss *)0;
  #line 1281 
  int ret = 0;
  #line 1282 
  u8 preamble = (unsigned char)2U;
  #line 1284 
  if (priv->mesh_dev == dev) 
                             #line 1285 
                             return -95;
  #line 1287 
  if (sme->bssid == (u8 *)0U) {
    #line 1288 
    struct cfg80211_scan_request *creq;
    #line 1294 
    if ((lbs_debug & 256U) != 0U) {
      #line 1294 
      char *tmp_1;
      #line 1294 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1294 
                                                               tmp_1 = (char *)" (INT)"; else 
                                                                    #line 1294 
                                                                    tmp_1 = (char *)"";
      #line 1294 
      printk((char *)"\001",tmp_1);
    }
    {
      #line 1295 
      long __ret = 3750L;
      #line 1295 
      __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c",1295,0);
      {
        #line 1295 
        bool __cond_0;
        #line 1295 
        __cond_0 = (_Bool)(priv->scan_req == (struct cfg80211_scan_request *)0);
        #line 1295 
        if ((int)__cond_0 != 0 && __ret == 0L) 
                                               #line 1295 
                                               __ret = 1L;
        #line 1295 
        if ((((int)__cond_0 != 0 || __ret == 0L) != 0) == 0) {
          #line 1295 
          long __ret_0;
          {
            #line 1295 
            struct wait_queue_entry __wq_entry;
            #line 1295 
            __ret_0 = 3750L;
            #line 1295 
            init_wait_entry(& __wq_entry,0);
            #line 1295 
            while (1) {
              #line 1295 
              bool __cond;
              #line 1295 
              long __int = prepare_to_wait_event(& priv->scan_q,& __wq_entry,1);
              #line 1295 
              __cond = (_Bool)(priv->scan_req == (struct cfg80211_scan_request *)0);
              #line 1295 
              if ((int)__cond != 0 && __ret_0 == 0L) 
                                                     #line 1295 
                                                     __ret_0 = 1L;
              #line 1295 
              if ((((int)__cond != 0 || __ret_0 == 0L) != 0) != 0) 
                                                                   #line 1295 
                                                                   break;
              #line 1295 
              if (__int != 0L) {
                #line 1295 
                __ret_0 = __int;
                #line 1295 
                goto __out_0;
              }
              #line 1295 
              __ret_0 = schedule_timeout(__ret_0);
            }
            #line 1295 
            finish_wait(& priv->scan_q,& __wq_entry);
            #line 1295 
            __out_0: 
                     #line 1295 
            ;
            }
          #line 1295 
          __ret = __ret_0;
        }
      }
      #line 1295 
      long tmp_6 = __ret;
    }
    #line 1299 
    creq = _new_connect_scan_req(wiphy,sme);
    #line 1300 
    if (creq == (struct cfg80211_scan_request *)0) {
      #line 1301 
      ret = -22;
      #line 1302 
      goto done;
    }
    #line 1305 
    if ((lbs_debug & 256U) != 0U) {
      #line 1305 
      char *tmp_7;
      #line 1305 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1305 
                                                               tmp_7 = (char *)" (INT)"; else 
                                                                    #line 1305 
                                                                    tmp_7 = (char *)"";
      #line 1305 
      printk((char *)"\001",tmp_7);
    }
    #line 1306 
    _internal_start_scan(priv,(_Bool)1,creq);
    #line 1308 
    if ((lbs_debug & 256U) != 0U) {
      #line 1308 
      char *tmp_9;
      #line 1308 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1308 
                                                               tmp_9 = (char *)" (INT)"; else 
                                                                    #line 1308 
                                                                    tmp_9 = (char *)"";
      #line 1308 
      printk((char *)"\001",tmp_9);
    }
    {
      #line 1309 
      long __ret_1 = 3750L;
      #line 1309 
      __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c",1309,0);
      {
        #line 1309 
        bool __cond_2;
        #line 1309 
        __cond_2 = (_Bool)(priv->scan_req == (struct cfg80211_scan_request *)0);
        #line 1309 
        if ((int)__cond_2 != 0 && __ret_1 == 0L) 
                                                 #line 1309 
                                                 __ret_1 = 1L;
        #line 1309 
        if ((((int)__cond_2 != 0 || __ret_1 == 0L) != 0) == 0) {
          #line 1309 
          long __ret_2;
          {
            #line 1309 
            struct wait_queue_entry __wq_entry_0;
            #line 1309 
            __ret_2 = 3750L;
            #line 1309 
            init_wait_entry(& __wq_entry_0,0);
            #line 1309 
            while (1) {
              #line 1309 
              bool __cond_1;
              #line 1309 
              long __int_0 = prepare_to_wait_event(& priv->scan_q,& __wq_entry_0,1);
              #line 1309 
              __cond_1 = (_Bool)(priv->scan_req == (struct cfg80211_scan_request *)0);
              #line 1309 
              if ((int)__cond_1 != 0 && __ret_2 == 0L) 
                                                       #line 1309 
                                                       __ret_2 = 1L;
              #line 1309 
              if ((((int)__cond_1 != 0 || __ret_2 == 0L) != 0) != 0) 
                #line 1309 
                break;
              #line 1309 
              if (__int_0 != 0L) {
                #line 1309 
                __ret_2 = __int_0;
                #line 1309 
                goto __out_1;
              }
              #line 1309 
              __ret_2 = schedule_timeout(__ret_2);
            }
            #line 1309 
            finish_wait(& priv->scan_q,& __wq_entry_0);
            #line 1309 
            __out_1: 
                     #line 1309 
            ;
            }
          #line 1309 
          __ret_1 = __ret_2;
        }
      }
      #line 1309 
      long tmp_14 = __ret_1;
    }
    #line 1312 
    if ((lbs_debug & 256U) != 0U) {
      #line 1312 
      char *tmp_15;
      #line 1312 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1312 
                                                               tmp_15 = (char *)" (INT)"; else 
                                                                    #line 1312 
                                                                    tmp_15 = (char *)"";
      #line 1312 
      printk((char *)"\001",tmp_15);
    }
  }
  #line 1316 
  bss = cfg80211_get_bss(wiphy,sme->channel,sme->bssid,sme->ssid,sme->ssid_len,(enum ieee80211_bss_type)IEEE80211_BSS_TYPE_ESS,(enum ieee80211_privacy)IEEE80211_PRIVACY_ANY);
  #line 1319 
  if (bss == (struct cfg80211_bss *)0) {
    #line 1320 
    _dev_err(& wiphy->dev,(char *)"assoc: bss %pM not in scan results\n",sme->bssid);
    #line 1322 
    ret = -2;
    #line 1323 
    goto done;
  }
  #line 1325 
  if ((lbs_debug & 256U) != 0U) {
    #line 1325 
    char *tmp_17;
    #line 1325 
    ;
    #line 1325 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1325 
                                                             tmp_17 = (char *)" (INT)"; else 
                                                                    #line 1325 
                                                                    tmp_17 = (char *)"";
    #line 1325 
    printk((char *)"\001",tmp_17,(u8 *)(& bss->bssid));
  }
  #line 1326 
  if ((lbs_debug & 256U) != 0U) {
    #line 1326 
    char *tmp_19;
    #line 1326 
    ;
    #line 1326 
    ;
    #line 1326 
    ;
    #line 1326 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1326 
                                                             tmp_19 = (char *)" (INT)"; else 
                                                                    #line 1326 
                                                                    tmp_19 = (char *)"";
    #line 1326 
    printk((char *)"\001",tmp_19,sme->crypto.cipher_group,(int)sme->key_idx,(int)sme->key_len);
  }
  #line 1331 
  priv->wep_tx_key = (unsigned char)0U;
  #line 1332 
  memset((void *)(& priv->wep_key),0,52UL);
  #line 1333 
  memset((void *)(& priv->wep_key_len),0,4UL);
  #line 1336 
  switch (sme->crypto.cipher_group) {
    #line 1337 
    case (u32)1027073: 
                       #line 1337 
    ;
    #line 1338 
    case (u32)1027077: 
                       #line 1338 
    ;
    #line 1340 
    priv->wep_tx_key = sme->key_idx;
    #line 1341 
    priv->wep_key_len[(int)sme->key_idx] = sme->key_len;
    #line 1342 
    memcpy((void *)(& priv->wep_key[(int)sme->key_idx]),(void *)sme->key,(unsigned long)sme->key_len);
    #line 1344 
    lbs_set_wep_keys(priv);
    #line 1345 
    priv->mac_control = (unsigned short)((unsigned int)priv->mac_control | 8U);
    #line 1346 
    lbs_set_mac_control(priv);
    #line 1348 
    lbs_enable_rsn(priv,0);
    #line 1349 
    break;
    #line 1350 
    case (u32)0: 
                 #line 1350 
    ;
    #line 1358 
    case (u32)1027074: 
                       #line 1358 
    ;
    #line 1359 
    case (u32)1027076: 
                       #line 1359 
    ;
    #line 1361 
    lbs_remove_wep_keys(priv);
    #line 1362 
    priv->mac_control = (unsigned short)((unsigned int)priv->mac_control & 65527U);
    #line 1363 
    lbs_set_mac_control(priv);
    #line 1366 
    lbs_set_key_material(priv,0,2,(u8 *)0U,(unsigned short)0);
    #line 1370 
    lbs_set_key_material(priv,0,1,(u8 *)0U,(unsigned short)0);
    #line 1375 
    lbs_enable_rsn(priv,sme->crypto.cipher_group != 0U);
    #line 1376 
    break;
    #line 1377 
    default: 
             #line 1377 
    ;
    #line 1378 
    _dev_err(& wiphy->dev,(char *)"unsupported cipher group 0x%x\n",sme->crypto.cipher_group);
    #line 1380 
    ret = -524;
    #line 1381 
    goto done;
  }
  #line 1384 
  ret = lbs_set_authtype(priv,sme);
  #line 1385 
  if (ret == -524) {
    #line 1386 
    _dev_err(& wiphy->dev,(char *)"unsupported authtype 0x%x\n",(unsigned int)sme->auth_type);
    #line 1387 
    goto done;
  }
  #line 1390 
  lbs_set_radio(priv,(unsigned char)((int)preamble),(unsigned char)1);
  #line 1393 
  ret = lbs_associate(priv,bss,sme);
  #line 1395 
  done: 
        #line 1395 
  ;
  #line 1396 
  if (bss != (struct cfg80211_bss *)0) 
                                       #line 1397 
                                       cfg80211_put_bss(wiphy,bss);
  #line 1398 
  return ret;
}

#line 1401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
int lbs_disconnect(struct lbs_private *priv, u16 reason)
{
  #line 1412 
  uint16_t __sz;
  #line 1403 
  struct cmd_ds_802_11_deauthenticate cmd;
  #line 1404 
  int ret;
  #line 1406 
  memset((void *)(& cmd),0,16UL);
  #line 1407 
  cmd.hdr.size = (unsigned short)16U;
  #line 1409 
  memcpy((void *)(& cmd.macaddr),(void *)(& priv->assoc_bss),6UL);
  #line 1410 
  cmd.reasoncode = reason;
  #line 1412 
  __sz = cmd.hdr.size;
  #line 1412 
  cmd.hdr.size = (unsigned short)16U;
  #line 1412 
  ret = __lbs_cmd(priv,(unsigned short)36,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 1413 
  if (ret != 0) 
                #line 1414 
                return ret;
  #line 1416 
  cfg80211_disconnected(priv->dev,(unsigned short)((int)reason),(u8 *)0U,0UL,(_Bool)1,3264U);
  #line 1420 
  priv->connect_status = 1U;
  #line 1422 
  return 0;
}

#line 1425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_cfg_disconnect(struct wiphy *wiphy, struct net_device *dev, u16 reason_code)
{
  #line 1428 
  struct lbs_private *priv = wiphy_priv(wiphy);
  #line 1430 
  if (priv->mesh_dev == dev) 
                             #line 1431 
                             return -95;
  #line 1434 
  priv->disassoc_reason = (unsigned char)reason_code;
  #line 1436 
  return lbs_disconnect(priv,(unsigned short)((int)reason_code));
}

#line 1439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_cfg_set_default_key(struct wiphy *wiphy, struct net_device *netdev, u8 key_index, bool unicast, bool multicast)
{
  #line 1444 
  struct lbs_private *priv = wiphy_priv(wiphy);
  #line 1446 
  if (priv->mesh_dev == netdev) 
                                #line 1447 
                                return -95;
  #line 1449 
  if ((int)priv->wep_tx_key != (int)key_index) {
    #line 1450 
    if ((lbs_debug & 256U) != 0U) {
      #line 1450 
      char *tmp_1;
      #line 1450 
      ;
      #line 1450 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1450 
                                                               tmp_1 = (char *)" (INT)"; else 
                                                                    #line 1450 
                                                                    tmp_1 = (char *)"";
      #line 1450 
      printk((char *)"\001",tmp_1,(int)key_index);
    }
    #line 1451 
    priv->wep_tx_key = key_index;
    #line 1452 
    lbs_set_wep_keys(priv);
  }
  #line 1455 
  return 0;
}

#line 1459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_cfg_add_key(struct wiphy *wiphy, struct net_device *netdev, u8 idx, bool pairwise, u8 *mac_addr, struct key_params *params)
{
  #line 1464 
  u16 key_info;
  #line 1465 
  u16 key_type;
  #line 1463 
  struct lbs_private *priv = wiphy_priv(wiphy);
  #line 1466 
  int ret = 0;
  #line 1468 
  if (priv->mesh_dev == netdev) 
                                #line 1469 
                                return -95;
  #line 1471 
  if ((lbs_debug & 256U) != 0U) {
    #line 1471 
    char *tmp_1;
    #line 1471 
    ;
    #line 1471 
    ;
    #line 1471 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1471 
                                                             tmp_1 = (char *)" (INT)"; else 
                                                                    #line 1471 
                                                                    tmp_1 = (char *)"";
    #line 1471 
    printk((char *)"\001",tmp_1,params->cipher,mac_addr);
  }
  #line 1473 
  if ((lbs_debug & 256U) != 0U) {
    #line 1473 
    char *tmp_3;
    #line 1473 
    ;
    #line 1473 
    ;
    #line 1473 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1473 
                                                             tmp_3 = (char *)" (INT)"; else 
                                                                    #line 1473 
                                                                    tmp_3 = (char *)"";
    #line 1473 
    printk((char *)"\001",tmp_3,(int)idx,params->key_len);
  }
  #line 1475 
  if (params->key_len != 0) 
                            #line 1476 
                            lbs_deb_hex(33554432U,(char *)"KEY",params->key,params->key_len);
  #line 1479 
  if ((lbs_debug & 256U) != 0U) {
    #line 1479 
    char *tmp_5;
    #line 1479 
    ;
    #line 1479 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1479 
                                                             tmp_5 = (char *)" (INT)"; else 
                                                                    #line 1479 
                                                                    tmp_5 = (char *)"";
    #line 1479 
    printk((char *)"\001",tmp_5,params->seq_len);
  }
  #line 1480 
  if (params->seq_len != 0) 
                            #line 1481 
                            lbs_deb_hex(33554432U,(char *)"SEQ",params->seq,params->seq_len);
  #line 1484 
  switch (params->cipher) {
    #line 1485 
    case (u32)1027073: 
                       #line 1485 
    ;
    #line 1486 
    case (u32)1027077: 
                       #line 1486 
    ;
    #line 1488 
    if ((int)priv->wep_key_len[(int)idx] != params->key_len) 
                                                             #line 1488 
                                                             goto _LOR;
    else {
      #line 1488 
      if (memcmp((void *)(& priv->wep_key[(int)idx]),(void *)params->key,
               (unsigned long)params->key_len) != 0) {
        #line 1488 
        _LOR: {
                #line 1491 
                priv->wep_key_len[(int)idx] = (unsigned char)params->key_len;
                #line 1492 
                memcpy((void *)(& priv->wep_key[(int)idx]),(void *)params->key,(unsigned long)params->key_len);
                #line 1494 
                lbs_set_wep_keys(priv);
              }
      }
    }
    #line 1496 
    break;
    #line 1497 
    case (u32)1027074: 
                       #line 1497 
    ;
    #line 1498 
    case (u32)1027076: 
                       #line 1498 
    ;
    #line 1499 
    if ((unsigned int)idx == 0U) 
                                 #line 1499 
                                 key_info = (unsigned short)6U; else 
                                                                  #line 1499 
                                                                  key_info = (unsigned short)5U;
    #line 1502 
    if (params->cipher == 1027074U) 
                                    #line 1502 
                                    key_type = (unsigned short)1U; else 
                                                                    #line 1502 
                                                                    key_type = (unsigned short)2U;
    #line 1505 
    lbs_set_key_material(priv,(int)key_type,(int)key_info,params->key,(unsigned short)((int)((unsigned short)params->key_len)));
    #line 1509 
    break;
    #line 1510 
    default: 
             #line 1510 
    ;
    #line 1511 
    _dev_err(& wiphy->dev,(char *)"unhandled cipher 0x%x\n",params->cipher);
    #line 1512 
    ret = -524;
    #line 1513 
    break;
  }
  #line 1516 
  return ret;
}

#line 1520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_cfg_del_key(struct wiphy *wiphy, struct net_device *netdev, u8 key_index, bool pairwise, u8 *mac_addr)
{
  #line 1524 
  if ((lbs_debug & 256U) != 0U) {
    #line 1524 
    char *tmp_0;
    #line 1524 
    ;
    #line 1524 
    ;
    #line 1524 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1524 
                                                             tmp_0 = (char *)" (INT)"; else 
                                                                    #line 1524 
                                                                    tmp_0 = (char *)"";
    #line 1524 
    printk((char *)"\001",tmp_0,(int)key_index,mac_addr);
  }
  #line 1550 
  return 0;
}

#line 1558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_cfg_get_station(struct wiphy *wiphy, struct net_device *dev, u8 *mac, struct station_info *sinfo)
{
  #line 1562 
  s8 signal;
  #line 1562 
  s8 noise;
  #line 1563 
  int ret;
  #line 1564 
  size_t i;
  #line 1561 
  struct lbs_private *priv = wiphy_priv(wiphy);
  #line 1566 
  sinfo->filled |= 1548ULL;
  #line 1570 
  sinfo->tx_bytes = (unsigned long long)(priv->dev)->stats.tx_bytes;
  #line 1571 
  sinfo->tx_packets = (unsigned int)(priv->dev)->stats.tx_packets;
  #line 1572 
  sinfo->rx_bytes = (unsigned long long)(priv->dev)->stats.rx_bytes;
  #line 1573 
  sinfo->rx_packets = (unsigned int)(priv->dev)->stats.rx_packets;
  #line 1576 
  ret = lbs_get_rssi(priv,& signal,& noise);
  #line 1577 
  if (ret == 0) {
    #line 1578 
    sinfo->signal = signal;
    #line 1579 
    sinfo->filled |= 128ULL;
  }
  #line 1583 
  i = 0UL;
  #line 1583 
  while (i <= 11UL) {
    #line 1584 
    if ((int)((unsigned short)priv->cur_rate) == (int)lbs_rates[i].hw_value) {
      #line 1585 
      sinfo->txrate.legacy = lbs_rates[i].bitrate;
      #line 1586 
      sinfo->filled |= 256ULL;
      #line 1587 
      break;
    }
    #line 1583 
    i ++;
  }
  #line 1591 
  return 0;
}

#line 1601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_change_intf(struct wiphy *wiphy, struct net_device *dev, enum nl80211_iftype type, struct vif_params *params)
{
  #line 1605 
  struct lbs_private *priv = wiphy_priv(wiphy);
  #line 1606 
  int ret = 0;
  #line 1608 
  if (priv->mesh_dev == dev) 
                             #line 1609 
                             return -95;
  #line 1611 
  switch ((unsigned int)type) {
    #line 1612 
    case (unsigned int)6: 
                          #line 1612 
    ;
    #line 1613 
    case (unsigned int)2: 
                          #line 1613 
    ;
    #line 1614 
    case (unsigned int)1: 
                          #line 1614 
    ;
    #line 1615 
    break;
    #line 1616 
    default: 
             #line 1616 
    ;
    #line 1617 
    return -95;
  }
  #line 1620 
  if ((int)priv->iface_running != 0) 
                                     #line 1621 
                                     ret = lbs_set_iface_type(priv,type);
  #line 1623 
  if (ret == 0) 
                #line 1624 
                (priv->wdev)->iftype = type;
  #line 1626 
  return ret;
}

#line 1643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static void lbs_join_post(struct lbs_private *priv, struct cfg80211_ibss_params *params, u8 *bssid, u16 capability)
{
  #line 1651 
  u8 fake_ie[57U];
  #line 1653 
  struct cfg80211_bss *bss;
  #line 1661 
  u8 *tmp;
  #line 1662 
  u8 *tmp_0;
  #line 1666 
  u8 *tmp_1;
  #line 1667 
  u8 *tmp_2;
  #line 1668 
  u8 *tmp_3;
  #line 1669 
  u8 *tmp_4;
  #line 1670 
  u8 *tmp_5;
  #line 1671 
  u8 *tmp_6;
  #line 1673 
  u8 *tmp_7;
  #line 1674 
  u8 *tmp_8;
  #line 1675 
  u8 *tmp_9;
  #line 1677 
  u8 *tmp_10;
  #line 1678 
  u8 *tmp_11;
  #line 1679 
  u8 *tmp_12;
  #line 1680 
  u8 *tmp_13;
  #line 1683 
  u8 *tmp_14;
  #line 1684 
  u8 *tmp_15;
  #line 1685 
  u8 *tmp_16;
  #line 1686 
  u8 *tmp_17;
  #line 1687 
  u8 *tmp_18;
  #line 1688 
  u8 *tmp_19;
  #line 1689 
  u8 *tmp_20;
  #line 1690 
  u8 *tmp_21;
  #line 1691 
  u8 *tmp_22;
  #line 1692 
  u8 *tmp_23;
  #line 1652 
  u8 *fake = (u8 *)(& fake_ie);
  #line 1661 
  tmp = fake;
  #line 1661 
  fake ++;
  #line 1661 
  *tmp = (unsigned char)0U;
  #line 1662 
  tmp_0 = fake;
  #line 1662 
  fake ++;
  #line 1662 
  *tmp_0 = params->ssid_len;
  #line 1663 
  memcpy((void *)fake,(void *)params->ssid,(unsigned long)params->ssid_len);
  #line 1664 
  fake += (unsigned long)params->ssid_len;
  #line 1666 
  tmp_1 = fake;
  #line 1666 
  fake ++;
  #line 1666 
  *tmp_1 = (unsigned char)1U;
  #line 1667 
  tmp_2 = fake;
  #line 1667 
  fake ++;
  #line 1667 
  *tmp_2 = (unsigned char)4U;
  #line 1668 
  tmp_3 = fake;
  #line 1668 
  fake ++;
  #line 1668 
  *tmp_3 = (unsigned char)130U;
  #line 1669 
  tmp_4 = fake;
  #line 1669 
  fake ++;
  #line 1669 
  *tmp_4 = (unsigned char)132U;
  #line 1670 
  tmp_5 = fake;
  #line 1670 
  fake ++;
  #line 1670 
  *tmp_5 = (unsigned char)139U;
  #line 1671 
  tmp_6 = fake;
  #line 1671 
  fake ++;
  #line 1671 
  *tmp_6 = (unsigned char)150U;
  #line 1673 
  tmp_7 = fake;
  #line 1673 
  fake ++;
  #line 1673 
  *tmp_7 = (unsigned char)3U;
  #line 1674 
  tmp_8 = fake;
  #line 1674 
  fake ++;
  #line 1674 
  *tmp_8 = (unsigned char)1U;
  #line 1675 
  tmp_9 = fake;
  #line 1675 
  fake ++;
  #line 1675 
  *tmp_9 = (unsigned char)(params->chandef.chan)->hw_value;
  #line 1677 
  tmp_10 = fake;
  #line 1677 
  fake ++;
  #line 1677 
  *tmp_10 = (unsigned char)6U;
  #line 1678 
  tmp_11 = fake;
  #line 1678 
  fake ++;
  #line 1678 
  *tmp_11 = (unsigned char)2U;
  #line 1679 
  tmp_12 = fake;
  #line 1679 
  fake ++;
  #line 1679 
  *tmp_12 = (unsigned char)0U;
  #line 1680 
  tmp_13 = fake;
  #line 1680 
  fake ++;
  #line 1680 
  *tmp_13 = (unsigned char)0U;
  #line 1683 
  tmp_14 = fake;
  #line 1683 
  fake ++;
  #line 1683 
  *tmp_14 = (unsigned char)50U;
  #line 1684 
  tmp_15 = fake;
  #line 1684 
  fake ++;
  #line 1684 
  *tmp_15 = (unsigned char)8U;
  #line 1685 
  tmp_16 = fake;
  #line 1685 
  fake ++;
  #line 1685 
  *tmp_16 = (unsigned char)12U;
  #line 1686 
  tmp_17 = fake;
  #line 1686 
  fake ++;
  #line 1686 
  *tmp_17 = (unsigned char)18U;
  #line 1687 
  tmp_18 = fake;
  #line 1687 
  fake ++;
  #line 1687 
  *tmp_18 = (unsigned char)24U;
  #line 1688 
  tmp_19 = fake;
  #line 1688 
  fake ++;
  #line 1688 
  *tmp_19 = (unsigned char)36U;
  #line 1689 
  tmp_20 = fake;
  #line 1689 
  fake ++;
  #line 1689 
  *tmp_20 = (unsigned char)48U;
  #line 1690 
  tmp_21 = fake;
  #line 1690 
  fake ++;
  #line 1690 
  *tmp_21 = (unsigned char)72U;
  #line 1691 
  tmp_22 = fake;
  #line 1691 
  fake ++;
  #line 1691 
  *tmp_22 = (unsigned char)96U;
  #line 1692 
  tmp_23 = fake;
  #line 1692 
  fake ++;
  #line 1692 
  *tmp_23 = (unsigned char)108U;
  #line 1693 
  lbs_deb_hex(33554432U,(char *)"IE",(u8 *)(& fake_ie),(int)(fake - (u8 *)(& fake_ie)));
  #line 1695 
  bss = cfg80211_inform_bss((priv->wdev)->wiphy,params->chandef.chan,(enum cfg80211_bss_frame_type)CFG80211_BSS_FTYPE_UNKNOWN,bssid,0ULL,(unsigned short)((int)capability),(unsigned short)((int)params->beacon_interval),(u8 *)(& fake_ie),(unsigned long)(fake - (u8 *)(& fake_ie)),0,3264U);
  #line 1704 
  cfg80211_put_bss((priv->wdev)->wiphy,bss);
  #line 1706 
  cfg80211_ibss_joined(priv->dev,bssid,params->chandef.chan,3264U);
  #line 1710 
  priv->connect_status = 0U;
  #line 1711 
  netif_carrier_on(priv->dev);
  #line 1712 
  if (priv->tx_pending_len == 0) 
                                 #line 1713 
                                 netif_wake_queue(priv->dev);
  #line 1714 
  return;
}

#line 1716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_ibss_join_existing(struct lbs_private *priv, struct cfg80211_ibss_params *params, struct cfg80211_bss *bss)
{
  #line 1811 
  uint16_t __sz;
  #line 1720 
  u8 *rates_eid;
  #line 1721 
  struct cmd_ds_802_11_ad_hoc_join cmd;
  #line 1724 
  int hw;
  #line 1724 
  int i;
  #line 1725 
  u8 rates_max;
  #line 1726 
  u8 *rates;
  #line 1722 
  u8 preamble = (unsigned char)2U;
  #line 1723 
  int ret = 0;
  #line 1729 
  ret = lbs_set_radio(priv,(unsigned char)((int)preamble),(unsigned char)1);
  #line 1730 
  if (ret != 0) 
                #line 1731 
                goto out;
  #line 1763 
  memset((void *)(& cmd),0,101UL);
  #line 1764 
  cmd.hdr.size = (unsigned short)101U;
  #line 1766 
  memcpy((void *)(& cmd.bss.bssid),(void *)(& bss->bssid),6UL);
  #line 1767 
  memcpy((void *)(& cmd.bss.ssid),(void *)params->ssid,(unsigned long)params->ssid_len);
  #line 1768 
  cmd.bss.type = (unsigned char)2U;
  #line 1769 
  cmd.bss.beaconperiod = params->beacon_interval;
  #line 1770 
  cmd.bss.ds.header.id = (unsigned char)3U;
  #line 1771 
  cmd.bss.ds.header.len = (unsigned char)1U;
  #line 1772 
  cmd.bss.ds.channel = (unsigned char)(params->chandef.chan)->hw_value;
  #line 1773 
  cmd.bss.ibss.header.id = (unsigned char)6U;
  #line 1774 
  cmd.bss.ibss.header.len = (unsigned char)2U;
  #line 1775 
  cmd.bss.ibss.atimwindow = (unsigned short)0U;
  #line 1776 
  cmd.bss.capability = (unsigned short)((unsigned int)bss->capability & 9727U);
  #line 1780 
  rcu_read_lock();
  #line 1781 
  rates_eid = ieee80211_bss_get_ie(bss,(unsigned char)1);
  #line 1782 
  if (rates_eid == (u8 *)0U) 
                             #line 1783 
                             lbs_add_rates((u8 *)(& cmd.bss.rates));
  else {
    #line 1785 
    rates_max = *(rates_eid + 1U);
    #line 1786 
    if ((unsigned int)rates_max > 14U) {
      #line 1787 
      if ((lbs_debug & 512U) != 0U) {
        #line 1787 
        char *tmp_0;
        #line 1787 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 1787 
                                                                 tmp_0 = (char *)" (INT)"; else 
                                                                    #line 1787 
                                                                    tmp_0 = (char *)"";
        #line 1787 
        printk((char *)"\001",tmp_0);
      }
      #line 1788 
      goto out;
    }
    #line 1790 
    rates = (u8 *)(& cmd.bss.rates);
    #line 1791 
    hw = 0;
    #line 1791 
    while ((unsigned int)hw <= 11U) {
      {
        #line 1792 
        u8 hw_rate = (unsigned char)((unsigned int)lbs_rates[hw].bitrate / 5U);
        #line 1793 
        i = 0;
        #line 1793 
        while ((int)rates_max > i) {
          #line 1794 
          if ((int)hw_rate == ((int)*(rates_eid + ((unsigned long)i + (unsigned long)2U)) & 127)) {
            #line 1799 
            u8 *tmp_1;
            #line 1795 
            u8 rate = *(rates_eid + ((unsigned long)i + (unsigned long)2U));
            #line 1796 
            if (((unsigned int)rate == 2U || (unsigned int)rate == 4U) || ((unsigned int)rate == 11U || (unsigned int)rate == 22U)) 
              #line 1798 
              rate = (unsigned char)((unsigned int)rate | 128U);
            #line 1799 
            tmp_1 = rates;
            #line 1799 
            rates ++;
            #line 1799 
            *tmp_1 = rate;
          }
          #line 1793 
          i ++;
        }
      }
      #line 1791 
      hw ++;
    }
  }
  #line 1804 
  rcu_read_unlock();
  #line 1807 
  if (priv->fwrelease >> 24 <= 8U) {
    #line 1808 
    cmd.failtimeout = (unsigned short)255U;
    #line 1809 
    cmd.probedelay = (unsigned short)0U;
  }
  #line 1811 
  __sz = cmd.hdr.size;
  #line 1811 
  cmd.hdr.size = (unsigned short)101U;
  #line 1811 
  ret = __lbs_cmd(priv,(unsigned short)44,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 1812 
  if (ret != 0) 
                #line 1813 
                goto out;
  #line 1824 
  lbs_join_post(priv,params,(u8 *)(& bss->bssid),(unsigned short)((int)bss->capability));
  #line 1826 
  out: 
       #line 1826 
  ;
  #line 1827 
  return ret;
}

#line 1832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_ibss_start_new(struct lbs_private *priv, struct cfg80211_ibss_params *params)
{
  #line 1894 
  uint16_t __sz;
  #line 1835 
  struct cmd_ds_802_11_ad_hoc_start cmd;
  #line 1840 
  u16 capability;
  #line 1836 
  struct cmd_ds_802_11_ad_hoc_result *resp = (struct cmd_ds_802_11_ad_hoc_result *)(& cmd);
  #line 1838 
  u8 preamble = (unsigned char)2U;
  #line 1839 
  int ret = 0;
  #line 1842 
  ret = lbs_set_radio(priv,(unsigned char)((int)preamble),(unsigned char)1);
  #line 1843 
  if (ret != 0) 
                #line 1844 
                goto out;
  #line 1874 
  memset((void *)(& cmd),0,177UL);
  #line 1875 
  cmd.hdr.size = (unsigned short)177U;
  #line 1876 
  memcpy((void *)(& cmd.ssid),(void *)params->ssid,(unsigned long)params->ssid_len);
  #line 1877 
  cmd.bsstype = (unsigned char)2U;
  #line 1878 
  cmd.beaconperiod = params->beacon_interval;
  #line 1879 
  cmd.ibss.header.id = (unsigned char)6U;
  #line 1880 
  cmd.ibss.header.len = (unsigned char)2U;
  #line 1881 
  cmd.ibss.atimwindow = (unsigned short)0U;
  #line 1882 
  cmd.ds.header.id = (unsigned char)3U;
  #line 1883 
  cmd.ds.header.len = (unsigned char)1U;
  #line 1884 
  cmd.ds.channel = (unsigned char)(params->chandef.chan)->hw_value;
  #line 1886 
  if (priv->fwrelease >> 24 <= 8U) 
                                   #line 1887 
                                   cmd.probedelay = (unsigned short)0U;
  #line 1889 
  capability = (unsigned short)2U;
  #line 1890 
  cmd.capability = capability;
  #line 1891 
  lbs_add_rates((u8 *)(& cmd.rates));
  #line 1894 
  __sz = cmd.hdr.size;
  #line 1894 
  cmd.hdr.size = (unsigned short)177U;
  #line 1894 
  ret = __lbs_cmd(priv,(unsigned short)43,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 1895 
  if (ret != 0) 
                #line 1896 
                goto out;
  #line 1908 
  lbs_join_post(priv,params,(u8 *)(& resp->bssid),(unsigned short)((int)capability));
  #line 1910 
  out: 
       #line 1910 
  ;
  #line 1911 
  return ret;
}

#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_join_ibss(struct wiphy *wiphy, struct net_device *dev, struct cfg80211_ibss_params *params)
{
  #line 1920 
  struct cfg80211_bss *bss;
  #line 1918 
  struct lbs_private *priv = wiphy_priv(wiphy);
  #line 1919 
  int ret = 0;
  #line 1922 
  if (priv->mesh_dev == dev) 
                             #line 1923 
                             return -95;
  #line 1925 
  if (params->chandef.chan == (struct ieee80211_channel *)0) {
    #line 1926 
    ret = -524;
    #line 1927 
    goto out;
  }
  #line 1930 
  ret = lbs_set_channel(priv,(unsigned char)((int)((unsigned char)(params->chandef.chan)->hw_value)));
  #line 1931 
  if (ret != 0) 
                #line 1932 
                goto out;
  #line 1936 
  bss = cfg80211_get_bss(wiphy,params->chandef.chan,params->bssid,params->ssid,(unsigned long)params->ssid_len,(enum ieee80211_bss_type)IEEE80211_BSS_TYPE_IBSS,(enum ieee80211_privacy)IEEE80211_PRIVACY_ANY);
  #line 1940 
  if (bss != (struct cfg80211_bss *)0) {
    #line 1941 
    ret = lbs_ibss_join_existing(priv,params,bss);
    #line 1942 
    cfg80211_put_bss(wiphy,bss);
  }
  else 
       #line 1944 
       ret = lbs_ibss_start_new(priv,params);
  #line 1947 
  out: 
       #line 1947 
  ;
  #line 1948 
  return ret;
}

#line 1952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_leave_ibss(struct wiphy *wiphy, struct net_device *dev)
{
  #line 1963 
  uint16_t __sz;
  #line 1955 
  struct cmd_ds_802_11_ad_hoc_stop cmd;
  #line 1954 
  struct lbs_private *priv = wiphy_priv(wiphy);
  #line 1956 
  int ret = 0;
  #line 1958 
  if (priv->mesh_dev == dev) 
                             #line 1959 
                             return -95;
  #line 1961 
  memset((void *)(& cmd),0,8UL);
  #line 1962 
  cmd.hdr.size = (unsigned short)8U;
  #line 1963 
  __sz = cmd.hdr.size;
  #line 1963 
  cmd.hdr.size = (unsigned short)8U;
  #line 1963 
  ret = __lbs_cmd(priv,(unsigned short)64,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 1966 
  lbs_mac_event_disconnected(priv,(_Bool)1);
  #line 1968 
  return ret;
}

#line 1973  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static int lbs_set_power_mgmt(struct wiphy *wiphy, struct net_device *dev, bool enabled, int timeout)
{
  #line 1976 
  struct lbs_private *priv = wiphy_priv(wiphy);
  #line 1978 
  if ((priv->fwcapinfo & 2U) == 0U) 
    #line 1979 
    if (! enabled) 
                   #line 1980 
                   return 0; else 
                                  #line 1982 
                                  return -22;
  #line 1989 
  if ((unsigned int)priv->is_polling != 0U) 
    #line 1990 
    if (! enabled) 
                   #line 1991 
                   return 0; else 
                                  #line 1993 
                                  return -22;
  #line 1995 
  if (! enabled) {
    #line 1996 
    priv->psmode = (unsigned short)0U;
    #line 1997 
    if (priv->psstate != 0U) 
                             #line 1998 
                             lbs_set_ps_mode(priv,(unsigned short)49,(_Bool)1);
    #line 2001 
    return 0;
  }
  #line 2003 
  if ((unsigned int)priv->psmode != 0U) 
                                        #line 2004 
                                        return 0;
  #line 2005 
  priv->psmode = (unsigned short)1U;
  #line 2006 
  if (priv->connect_status == 0U) 
                                  #line 2007 
                                  lbs_set_ps_mode(priv,(unsigned short)48,(_Bool)1);
  #line 2008 
  return 0;
}

#line 2015  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static struct cfg80211_ops lbs_cfg80211_ops = {.change_virtual_intf = & lbs_change_intf, .add_key = & lbs_cfg_add_key, .del_key = & lbs_cfg_del_key, .set_default_key = & lbs_cfg_set_default_key, .get_station = & lbs_cfg_get_station, .libertas_set_mesh_channel = & lbs_cfg_set_mesh_channel, .set_monitor_channel = & lbs_cfg_set_monitor_channel, .scan = & lbs_cfg_scan, .connect = & lbs_cfg_connect, .disconnect = & lbs_cfg_disconnect, .join_ibss = & lbs_join_ibss, .leave_ibss = & lbs_leave_ibss, .set_power_mgmt = & lbs_set_power_mgmt};
#line 2038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
struct wireless_dev *lbs_cfg_alloc(struct device *dev)
{
  #line 2041 
  struct wireless_dev *wdev;
  #line 2040 
  int ret = 0;
  #line 2043 
  wdev = (struct wireless_dev *)kzalloc_0(1432UL,3264U);
  #line 2044 
  if (wdev == (struct wireless_dev *)0) {
    #line 2045 
    return (struct wireless_dev *)ERR_PTR(-12L);
  }
  #line 2047 
  wdev->wiphy = wiphy_new(& lbs_cfg80211_ops,9032);
  #line 2048 
  if (wdev->wiphy == (struct wiphy *)0) {
    #line 2049 
    _dev_err(dev,(char *)"cannot allocate wiphy\n");
    #line 2050 
    ret = -12;
    #line 2051 
    goto err_wiphy_new;
  }
  #line 2054 
  return wdev;
  #line 2056 
  err_wiphy_new: 
                 #line 2056 
  ;
  #line 2057 
  kfree((void *)wdev);
  #line 2058 
  return (struct wireless_dev *)ERR_PTR((long)ret);
}

#line 2062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static void lbs_cfg_set_regulatory_hint(struct lbs_private *priv)
{
  #line 2078 
  size_t i;
  #line 2070 
  struct region_code_mapping regmap[6U] = {{.cn = (char *)"US ", .code = 16}, {.cn = (char *)"CA ", .code = 32}, {.cn = (char *)"EU ", .code = 48}, {.cn = (char *)"ES ", .code = 49}, {.cn = (char *)"FR ", .code = 50}, {.cn = (char *)"JP ", .code = 64}};
  #line 2080 
  i = 0UL;
  #line 2080 
  while (i <= 5UL) {
    #line 2081 
    if (regmap[i].code == (int)priv->regioncode) {
      #line 2082 
      regulatory_hint((priv->wdev)->wiphy,regmap[i].cn);
      #line 2083 
      break;
    }
    #line 2080 
    i ++;
  }
  #line 2085 
  return;
}

#line 2087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
static void lbs_reg_notifier(struct wiphy *wiphy, struct regulatory_request *request)
{
  #line 2090 
  struct lbs_private *priv = wiphy_priv(wiphy);
  #line 2092 
  memcpy((void *)(& priv->country_code),(void *)(& request->alpha2),3UL);
  #line 2093 
  if (lbs_iface_active(priv) != 0) 
                                   #line 2094 
                                   lbs_set_11d_domain_info(priv);
  #line 2095 
  return;
}

#line 2102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
int lbs_cfg_register(struct lbs_private *priv)
{
  #line 2105 
  int ret;
  #line 2104 
  struct wireless_dev *wdev = priv->wdev;
  #line 2107 
  (wdev->wiphy)->max_scan_ssids = (unsigned char)1U;
  #line 2108 
  (wdev->wiphy)->signal_type = CFG80211_SIGNAL_TYPE_MBM;
  #line 2110 
  (wdev->wiphy)->interface_modes = (unsigned short)6U;
  #line 2113 
  if (lbs_rtap_supported(priv) != 0) 
                                     #line 2114 
                                     (wdev->wiphy)->interface_modes = (unsigned short)((unsigned int)(wdev->wiphy)->interface_modes | 64U);
  #line 2115 
  if ((int)lbs_mesh_activated(priv) != 0) 
                                          #line 2116 
                                          (wdev->wiphy)->interface_modes = (unsigned short)((unsigned int)(wdev->wiphy)->interface_modes | 128U);
  #line 2118 
  (wdev->wiphy)->bands[0] = & lbs_band_2ghz;
  #line 2124 
  (wdev->wiphy)->cipher_suites = (u32 *)(& cipher_suites);
  #line 2125 
  (wdev->wiphy)->n_cipher_suites = 4;
  #line 2126 
  (wdev->wiphy)->reg_notifier = & lbs_reg_notifier;
  #line 2128 
  ret = wiphy_register(wdev->wiphy);
  #line 2129 
  if (ret < 0) 
               #line 2130 
               printk((char *)"\001");
  #line 2132 
  priv->wiphy_registered = (_Bool)1;
  #line 2134 
  ret = cif_register_netdev_0(priv->dev);
  #line 2135 
  if (ret != 0) 
                #line 2136 
                printk((char *)"\001");
  {
    #line 2138 
    struct lock_class_key __key;
    #line 2138 
    __init_work(& priv->scan_work.work,0);
    #line 2138 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 2138 
    priv->scan_work.work.data = __constr_expr_34;
    #line 2138 
    lockdep_init_map(& priv->scan_work.work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 2138 
    INIT_LIST_HEAD(& priv->scan_work.work.entry);
    #line 2138 
    priv->scan_work.work.func = & lbs_scan_worker;
  }
  {
    #line 2138 
    struct lock_class_key __key_0;
    #line 2138 
    init_timer_key(& priv->scan_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&priv->scan_work)->timer",& __key_0);
  }
  #line 2140 
  lbs_cfg_set_regulatory_hint(priv);
  #line 2142 
  return ret;
}

#line 2145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
void lbs_scan_deinit(struct lbs_private *priv)
{
  #line 2147 
  cancel_delayed_work_sync(& priv->scan_work);
  #line 2148 
  return;
}

#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cfg.c"
void lbs_cfg_free(struct lbs_private *priv)
{
  #line 2153 
  struct wireless_dev *wdev = priv->wdev;
  #line 2155 
  if (wdev == (struct wireless_dev *)0) 
                                        #line 2156 
                                        return;
  #line 2158 
  if ((int)priv->wiphy_registered != 0) 
                                        #line 2159 
                                        wiphy_unregister(wdev->wiphy);
  #line 2161 
  if (wdev->wiphy != (struct wiphy *)0) 
                                        #line 2162 
                                        wiphy_free(wdev->wiphy);
  #line 2164 
  kfree((void *)wdev);
  #line 2165 
  return;
}

#line 104  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cfg.i.aux"
#line 104 
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2);
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cfg.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 127 
  ldv_set_bit(nr,addr);
  #line 128 
  return;
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cfg.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 141 
  ldv_init_list_head(list);
  #line 142 
  return;
}

#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cfg.i.aux"
static void *ERR_PTR(long error)
{
  #line 211 
  return ldv_err_ptr(error);
}

#line 308  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cfg.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 312 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 369  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cfg.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 372 
  return ldv_kzalloc(size,flags);
}

#line 662  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cfg.i.aux"
static int cif_register_netdev_0(struct net_device *dev)
{
  #line 666 
  return emg_register_netdev(dev);
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 459 
unsigned long simple_strtoul(char *, char **, unsigned int);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 15 
void *memdup_user_nul(void *, size_t);
#line 59 
#line 59 
char *strchr(char *, int);
#line 82 
#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static char *cif_strstr(char *s1, char *s2);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 355  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 362  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static bool IS_ERR(void *ptr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 28 
char *ldv_strstr(char *cs, char *ct);
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 554 
unsigned long get_zeroed_page(gfp_t);
#line 567 
#line 567 
void free_pages(unsigned long, unsigned int);
#line 3013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
#line 3013 
loff_t default_llseek(struct file *, loff_t, int);
#line 3135 
#line 3135 
loff_t generic_file_llseek(struct file *, loff_t, int);
#line 3300 
#line 3300 
int simple_open(struct inode *, struct file *);
#line 3337 
#line 3337 
ssize_t simple_read_from_buffer(void *, size_t, loff_t *, void *, size_t);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 802  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 810  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static void cif_debugfs_remove(struct dentry *dentry);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 572  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags);
#line 4756  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.h"
#line 93 
int lbs_cmd_802_11_sleep_params(struct lbs_private *priv, uint16_t cmd_action, struct sleep_params *sp);
#line 128 
#line 128 
int lbs_set_host_sleep(struct lbs_private *priv, int host_sleep);
#line 136 
#line 136 
int lbs_get_reg(struct lbs_private *priv, u16 reg, u16 offset, u32 *value);
#line 138 
#line 138 
int lbs_set_reg(struct lbs_private *priv, u16 reg, u16 offset, u32 value);
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.h"
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
void lbs_debugfs_init(void);
#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.h"
#line 698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
void lbs_debugfs_remove(void);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.h"
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
void lbs_debugfs_init_one(struct lbs_private *priv, struct net_device *dev);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.h"
#line 750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
void lbs_debugfs_remove_one(struct lbs_private *priv);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static struct dentry *lbs_dir;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static char *szStates[2U] = {(char *)"Connected", (char *)"Disconnected"};
#line 22 
#line 917 
static void lbs_debug_init(struct lbs_private *priv);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t write_file_dummy(struct file *file, char *buf, size_t count, loff_t *ppos)
{
  #line 28 
  return -22L;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_dev_info(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 40 
  ssize_t res;
  #line 36 
  struct lbs_private *priv = (struct lbs_private *)file->private_data;
  #line 37 
  size_t pos = 0UL;
  #line 38 
  unsigned long addr = get_zeroed_page(3264U);
  #line 39 
  char *buf = (char *)addr;
  #line 41 
  if (buf == (char *)0) 
                        #line 42 
                        return -12L;
  #line 45 
  pos = (unsigned long)snprintf(buf + pos,4096UL - pos,(char *)"state = %s\n",
                 szStates[priv->connect_status]) + pos;
  #line 47 
  pos = (unsigned long)snprintf(buf + pos,4096UL - pos,(char *)"region_code = %02x\n",
                 (unsigned int)priv->regioncode) + pos;
  #line 49 
  res = simple_read_from_buffer((void *)userbuf,count,ppos,(void *)buf,pos);
  #line 51 
  free_pages(addr,0U);
  #line 52 
  return res;
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_sleepparams_write(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 65 
  size_t __UNIQUE_ID___x446;
  #line 65 
  unsigned long tmp;
  #line 60 
  ssize_t ret;
  #line 61 
  struct sleep_params sp;
  #line 62 
  int p1;
  #line 62 
  int p2;
  #line 62 
  int p3;
  #line 62 
  int p4;
  #line 62 
  int p5;
  #line 62 
  int p6;
  #line 63 
  char *buf;
  #line 59 
  struct lbs_private *priv = (struct lbs_private *)file->private_data;
  {
    #line 65 
    __UNIQUE_ID___x446 = count;
    #line 65 
    unsigned long __UNIQUE_ID___y447 = 4095UL;
    #line 65 
    if (__UNIQUE_ID___x446 < __UNIQUE_ID___y447) 
                                                 #line 65 
                                                 tmp = __UNIQUE_ID___x446; else 
                                                                    #line 65 
                                                                    tmp = __UNIQUE_ID___y447;
    }
  #line 65 
  ;
  #line 65 
  buf = (char *)memdup_user_nul((void *)user_buf,tmp);
  #line 66 
  if ((int)IS_ERR((void *)buf) != 0) {
    #line 67 
    return PTR_ERR((void *)buf);
  }
  #line 69 
  ret = (long)sscanf(buf,(char *)"%d %d %d %d %d %d",& p1,& p2,& p3,& p4,& p5,& p6);
  #line 70 
  if (ret != 6L) {
    #line 71 
    ret = -22L;
    #line 72 
    goto out_unlock;
  }
  #line 74 
  sp.sp_error = (unsigned short)p1;
  #line 75 
  sp.sp_offset = (unsigned short)p2;
  #line 76 
  sp.sp_stabletime = (unsigned short)p3;
  #line 77 
  sp.sp_calcontrol = (unsigned char)p4;
  #line 78 
  sp.sp_extsleepclk = (unsigned char)p5;
  #line 79 
  sp.sp_reserved = (unsigned short)p6;
  #line 81 
  ret = (long)lbs_cmd_802_11_sleep_params(priv,(unsigned short)1,& sp);
  #line 82 
  if (ret == 0L) 
                 #line 83 
                 ret = (long)count;
  else 
    #line 84 
    if (ret > 0L) 
                  #line 85 
                  ret = -22L;
  #line 87 
  out_unlock: 
              #line 87 
  ;
  #line 88 
  kfree((void *)buf);
  #line 89 
  return ret;
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_sleepparams_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 96 
  ssize_t ret;
  #line 98 
  struct sleep_params sp;
  #line 95 
  struct lbs_private *priv = (struct lbs_private *)file->private_data;
  #line 97 
  size_t pos = 0UL;
  #line 99 
  unsigned long addr = get_zeroed_page(3264U);
  #line 100 
  char *buf = (char *)addr;
  #line 101 
  if (buf == (char *)0) 
                        #line 102 
                        return -12L;
  #line 104 
  ret = (long)lbs_cmd_802_11_sleep_params(priv,(unsigned short)0,& sp);
  #line 105 
  if (ret != 0L) 
                 #line 106 
                 goto out_unlock;
  #line 111 
  pos = (unsigned long)snprintf(buf,4096UL,(char *)"%d %d %d %d %d %d\n",(int)sp.sp_error,
                 (int)sp.sp_offset,(int)sp.sp_stabletime,
                 (int)sp.sp_calcontrol,(int)sp.sp_extsleepclk,
                 (int)sp.sp_reserved) + pos;
  #line 113 
  ret = simple_read_from_buffer((void *)userbuf,count,ppos,(void *)buf,pos);
  #line 115 
  out_unlock: 
              #line 115 
  ;
  #line 116 
  free_pages(addr,0U);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_host_sleep_write(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 129 
  size_t __UNIQUE_ID___x448;
  #line 129 
  unsigned long tmp;
  #line 125 
  ssize_t ret;
  #line 126 
  int host_sleep;
  #line 127 
  char *buf;
  #line 124 
  struct lbs_private *priv = (struct lbs_private *)file->private_data;
  {
    #line 129 
    __UNIQUE_ID___x448 = count;
    #line 129 
    unsigned long __UNIQUE_ID___y449 = 4095UL;
    #line 129 
    if (__UNIQUE_ID___x448 < __UNIQUE_ID___y449) 
                                                 #line 129 
                                                 tmp = __UNIQUE_ID___x448; else 
                                                                    #line 129 
                                                                    tmp = __UNIQUE_ID___y449;
    }
  #line 129 
  ;
  #line 129 
  buf = (char *)memdup_user_nul((void *)user_buf,tmp);
  #line 130 
  if ((int)IS_ERR((void *)buf) != 0) {
    #line 131 
    return PTR_ERR((void *)buf);
  }
  #line 133 
  ret = (long)sscanf(buf,(char *)"%d",& host_sleep);
  #line 134 
  if (ret != 1L) {
    #line 135 
    ret = -22L;
    #line 136 
    goto out_unlock;
  }
  #line 139 
  if (host_sleep == 0) {
    #line 140 
    ret = (long)lbs_set_host_sleep(priv,0);
  }
  else 
    #line 141 
    if (host_sleep == 1) {
      #line 142 
      if (priv->wol_criteria == 4294967295U) {
        #line 143 
        netdev_info(priv->dev,(char *)"wake parameters not configured\n");
        #line 145 
        ret = -22L;
        #line 146 
        goto out_unlock;
      }
      #line 148 
      ret = (long)lbs_set_host_sleep(priv,1);
    }
    else {
      #line 150 
      netdev_err(priv->dev,(char *)"invalid option\n");
      #line 151 
      ret = -22L;
    }
  #line 154 
  if (ret == 0L) 
                 #line 155 
                 ret = (long)count;
  #line 157 
  out_unlock: 
              #line 157 
  ;
  #line 158 
  kfree((void *)buf);
  #line 159 
  return ret;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_host_sleep_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 166 
  ssize_t ret;
  #line 165 
  struct lbs_private *priv = (struct lbs_private *)file->private_data;
  #line 167 
  size_t pos = 0UL;
  #line 168 
  unsigned long addr = get_zeroed_page(3264U);
  #line 169 
  char *buf = (char *)addr;
  #line 170 
  if (buf == (char *)0) 
                        #line 171 
                        return -12L;
  #line 173 
  pos = (unsigned long)snprintf(buf,4096UL,(char *)"%d\n",priv->is_host_sleep_activated) + pos;
  #line 175 
  ret = simple_read_from_buffer((void *)userbuf,count,ppos,(void *)buf,pos);
  #line 177 
  free_pages(addr,0U);
  #line 178 
  return ret;
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static void *lbs_tlv_find(uint16_t tlv_type, uint8_t *tlv, uint16_t size)
{
  #line 199 
  struct mrvl_ie_header *tlv_h;
  #line 200 
  uint16_t length;
  #line 201 
  ssize_t pos = 0L;
  #line 203 
  while ((long)size > pos) {
    #line 204 
    tlv_h = (struct mrvl_ie_header *)tlv;
    #line 205 
    if ((unsigned int)tlv_h->len == 0U) 
                                        #line 206 
                                        return (void *)0;
    #line 207 
    if ((int)tlv_h->type == (int)tlv_type) 
                                           #line 208 
                                           return (void *)tlv_h;
    #line 209 
    length = (unsigned short)((unsigned int)tlv_h->len + 4U);
    #line 210 
    pos = (long)length + pos;
    #line 211 
    tlv += (unsigned long)length;
  }
  #line 213 
  return (void *)0;
}

#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_threshold_read(uint16_t tlv_type, uint16_t event_mask, struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 244 
  uint16_t __sz;
  #line 221 
  struct cmd_ds_802_11_subscribe_event *subscribed;
  #line 222 
  struct mrvl_ie_thresholds *got;
  #line 226 
  char *buf;
  #line 227 
  u8 value;
  #line 228 
  u8 freq;
  #line 223 
  struct lbs_private *priv = (struct lbs_private *)file->private_data;
  #line 224 
  ssize_t ret = 0L;
  #line 225 
  size_t pos = 0UL;
  #line 229 
  int events = 0;
  #line 231 
  buf = (char *)get_zeroed_page(3264U);
  #line 232 
  if (buf == (char *)0) 
                        #line 233 
                        return -12L;
  #line 235 
  subscribed = (struct cmd_ds_802_11_subscribe_event *)kzalloc_1(140UL,3264U);
  #line 236 
  if (subscribed == (struct cmd_ds_802_11_subscribe_event *)0) {
    #line 237 
    ret = -12L;
    #line 238 
    goto out_page;
  }
  #line 241 
  subscribed->hdr.size = (unsigned short)140U;
  #line 242 
  subscribed->action = (unsigned short)0U;
  #line 244 
  __sz = subscribed->hdr.size;
  #line 244 
  subscribed->hdr.size = (unsigned short)140U;
  #line 244 
  ret = (long)__lbs_cmd(priv,(unsigned short)117,& subscribed->hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)subscribed);
  #line 245 
  if (ret != 0L) 
                 #line 246 
                 goto out_cmd;
  #line 248 
  got = (struct mrvl_ie_thresholds *)lbs_tlv_find((unsigned short)((int)tlv_type),(uint8_t *)(& subscribed->tlv),(unsigned short)128);
  #line 249 
  if (got != (struct mrvl_ie_thresholds *)0) {
    #line 250 
    value = got->value;
    #line 251 
    freq = got->freq;
    #line 252 
    events = (int)subscribed->events;
    #line 255 
    pos = (unsigned long)snprintf(buf,4096UL,(char *)"%d %d %d\n",(int)value,(int)freq,
                 ((int)event_mask & events) != 0) + pos;
  }
  #line 258 
  ret = simple_read_from_buffer((void *)userbuf,count,ppos,(void *)buf,pos);
  #line 260 
  out_cmd: 
           #line 260 
  ;
  #line 261 
  kfree((void *)subscribed);
  #line 263 
  out_page: 
            #line 263 
  ;
  #line 264 
  free_pages((unsigned long)buf,0U);
  #line 265 
  return ret;
}

#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_threshold_write(uint16_t tlv_type, uint16_t event_mask, struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 282 
  size_t __UNIQUE_ID___x450;
  #line 282 
  unsigned long tmp;
  #line 300 
  uint16_t __sz;
  #line 326 
  uint16_t __sz_0;
  #line 274 
  struct cmd_ds_802_11_subscribe_event *events;
  #line 275 
  struct mrvl_ie_thresholds *tlv;
  #line 277 
  int value;
  #line 277 
  int freq;
  #line 277 
  int new_mask;
  #line 278 
  uint16_t curr_mask;
  #line 279 
  char *buf;
  #line 280 
  int ret;
  #line 276 
  struct lbs_private *priv = (struct lbs_private *)file->private_data;
  {
    #line 282 
    __UNIQUE_ID___x450 = count;
    #line 282 
    unsigned long __UNIQUE_ID___y451 = 4095UL;
    #line 282 
    if (__UNIQUE_ID___x450 < __UNIQUE_ID___y451) 
                                                 #line 282 
                                                 tmp = __UNIQUE_ID___x450; else 
                                                                    #line 282 
                                                                    tmp = __UNIQUE_ID___y451;
    }
  #line 282 
  ;
  #line 282 
  buf = (char *)memdup_user_nul((void *)userbuf,tmp);
  #line 283 
  if ((int)IS_ERR((void *)buf) != 0) {
    #line 284 
    return PTR_ERR((void *)buf);
  }
  #line 286 
  ret = sscanf(buf,(char *)"%d %d %d",& value,& freq,& new_mask);
  #line 287 
  if (ret != 3) {
    #line 288 
    ret = -22;
    #line 289 
    goto out_page;
  }
  #line 291 
  events = (struct cmd_ds_802_11_subscribe_event *)kzalloc_1(140UL,3264U);
  #line 292 
  if (events == (struct cmd_ds_802_11_subscribe_event *)0) {
    #line 293 
    ret = -12;
    #line 294 
    goto out_page;
  }
  #line 297 
  events->hdr.size = (unsigned short)140U;
  #line 298 
  events->action = (unsigned short)0U;
  #line 300 
  __sz = events->hdr.size;
  #line 300 
  events->hdr.size = (unsigned short)140U;
  #line 300 
  ret = __lbs_cmd(priv,(unsigned short)117,& events->hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)events);
  #line 301 
  if (ret != 0) 
                #line 302 
                goto out_events;
  #line 304 
  curr_mask = events->events;
  #line 306 
  if (new_mask != 0) 
                     #line 307 
                     new_mask = (int)curr_mask | (int)event_mask; else 
                                                                    #line 309 
                                                                    new_mask = (int)curr_mask & ~ ((int)event_mask);
  #line 313 
  tlv = (struct mrvl_ie_thresholds *)(& events->tlv);
  #line 315 
  events->action = (unsigned short)1U;
  #line 316 
  events->events = (unsigned short)new_mask;
  #line 317 
  tlv->header.type = tlv_type;
  #line 318 
  tlv->header.len = (unsigned short)2U;
  #line 319 
  tlv->value = (unsigned char)value;
  #line 320 
  if ((unsigned int)tlv_type != 263U) 
                                      #line 321 
                                      tlv->freq = (unsigned char)freq;
  #line 324 
  events->hdr.size = (unsigned short)18U;
  #line 326 
  __sz_0 = events->hdr.size;
  #line 326 
  events->hdr.size = (unsigned short)140U;
  #line 326 
  ret = __lbs_cmd(priv,(unsigned short)117,& events->hdr,(int)__sz_0,
                  & lbs_cmd_copyback,(unsigned long)events);
  #line 328 
  if (ret == 0) 
                #line 329 
                ret = (int)count;
  #line 330 
  out_events: 
              #line 330 
  ;
  #line 331 
  kfree((void *)events);
  #line 332 
  out_page: 
            #line 332 
  ;
  #line 333 
  kfree((void *)buf);
  #line 334 
  return (long)ret;
}

#line 338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_lowrssi_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 341 
  return lbs_threshold_read((unsigned short)260,(unsigned short)1,file,userbuf,
                         count,ppos);
}

#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_lowrssi_write(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 349 
  return lbs_threshold_write((unsigned short)260,(unsigned short)1,file,userbuf,
                          count,ppos);
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_lowsnr_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 357 
  return lbs_threshold_read((unsigned short)261,(unsigned short)2,file,userbuf,
                         count,ppos);
}

#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_lowsnr_write(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 365 
  return lbs_threshold_write((unsigned short)261,(unsigned short)2,file,userbuf,
                          count,ppos);
}

#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_failcount_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 373 
  return lbs_threshold_read((unsigned short)262,(unsigned short)4,file,userbuf,
                         count,ppos);
}

#line 378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_failcount_write(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 381 
  return lbs_threshold_write((unsigned short)262,(unsigned short)4,file,userbuf,
                          count,ppos);
}

#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_highrssi_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 389 
  return lbs_threshold_read((unsigned short)278,(unsigned short)16,file,userbuf,
                         count,ppos);
}

#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_highrssi_write(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 397 
  return lbs_threshold_write((unsigned short)278,(unsigned short)16,file,
                          userbuf,count,ppos);
}

#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_highsnr_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 405 
  return lbs_threshold_read((unsigned short)279,(unsigned short)32,file,userbuf,
                         count,ppos);
}

#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_highsnr_write(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 413 
  return lbs_threshold_write((unsigned short)279,(unsigned short)32,file,
                          userbuf,count,ppos);
}

#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_bcnmiss_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 420 
  return lbs_threshold_read((unsigned short)263,(unsigned short)8,file,userbuf,
                         count,ppos);
}

#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_bcnmiss_write(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 428 
  return lbs_threshold_write((unsigned short)263,(unsigned short)8,file,userbuf,
                          count,ppos);
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_rdmac_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 438 
  int ret;
  #line 436 
  struct lbs_private *priv = (struct lbs_private *)file->private_data;
  #line 437 
  ssize_t pos = 0L;
  #line 439 
  unsigned long addr = get_zeroed_page(3264U);
  #line 440 
  char *buf = (char *)addr;
  #line 441 
  u32 val = 0U;
  #line 443 
  if (buf == (char *)0) 
                        #line 444 
                        return -12L;
  #line 446 
  ret = lbs_get_reg(priv,(unsigned short)25,(unsigned short)((int)((unsigned short)priv->mac_offset)),& val);
  {
    #line 447 
    unsigned long __ms = 10UL;
    #line 447 
    while (1) {
      #line 447 
      unsigned long tmp_0;
      #line 447 
      tmp_0 = __ms;
      #line 447 
      __ms --;
      #line 447 
      ;
      #line 447 
      if (! (tmp_0 != 0UL)) 
                            #line 447 
                            break;
      #line 447 
      __const_udelay(4295000UL);
    }
  }
  #line 448 
  if (ret == 0) {
    #line 449 
    pos = (long)snprintf(buf,4096UL,(char *)"MAC[0x%x] = 0x%08x\n",priv->mac_offset,
                 val);
    #line 451 
    ret = (int)simple_read_from_buffer((void *)userbuf,count,ppos,(void *)buf,
                                (unsigned long)pos);
  }
  #line 453 
  free_pages(addr,0U);
  #line 454 
  return (long)ret;
}

#line 457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_rdmac_write(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 464 
  size_t __UNIQUE_ID___x452;
  #line 464 
  unsigned long tmp;
  #line 462 
  char *buf;
  #line 461 
  struct lbs_private *priv = (struct lbs_private *)file->private_data;
  {
    #line 464 
    __UNIQUE_ID___x452 = count;
    #line 464 
    unsigned long __UNIQUE_ID___y453 = 4095UL;
    #line 464 
    if (__UNIQUE_ID___x452 < __UNIQUE_ID___y453) 
                                                 #line 464 
                                                 tmp = __UNIQUE_ID___x452; else 
                                                                    #line 464 
                                                                    tmp = __UNIQUE_ID___y453;
    }
  #line 464 
  ;
  #line 464 
  buf = (char *)memdup_user_nul((void *)userbuf,tmp);
  #line 465 
  if ((int)IS_ERR((void *)buf) != 0) {
    #line 466 
    return PTR_ERR((void *)buf);
  }
  #line 468 
  priv->mac_offset = (unsigned int)simple_strtoul(buf,(char **)0,16U);
  #line 469 
  kfree((void *)buf);
  #line 470 
  return (long)count;
}

#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_wrmac_write(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 483 
  unsigned long tmp;
  #line 483 
  size_t __UNIQUE_ID___x454;
  #line 479 
  ssize_t res;
  #line 480 
  u32 offset;
  #line 480 
  u32 value;
  #line 481 
  char *buf;
  #line 478 
  struct lbs_private *priv = (struct lbs_private *)file->private_data;
  {
    #line 483 
    __UNIQUE_ID___x454 = count;
    #line 483 
    unsigned long __UNIQUE_ID___y455 = 4095UL;
    #line 483 
    if (__UNIQUE_ID___x454 < __UNIQUE_ID___y455) 
                                                 #line 483 
                                                 tmp = __UNIQUE_ID___x454; else 
                                                                    #line 483 
                                                                    tmp = __UNIQUE_ID___y455;
    }
  #line 483 
  ;
  #line 483 
  buf = (char *)memdup_user_nul((void *)userbuf,tmp);
  #line 484 
  if ((int)IS_ERR((void *)buf) != 0) {
    #line 485 
    return PTR_ERR((void *)buf);
  }
  #line 487 
  res = (long)sscanf(buf,(char *)"%x %x",& offset,& value);
  #line 488 
  if (res != 2L) {
    #line 489 
    res = -14L;
    #line 490 
    goto out_unlock;
  }
  #line 493 
  res = (long)lbs_set_reg(priv,(unsigned short)25,
                    (unsigned short)((int)((unsigned short)offset)),value);
  {
    #line 494 
    unsigned long __ms = 10UL;
    #line 494 
    while (1) {
      #line 494 
      unsigned long tmp_6;
      #line 494 
      tmp_6 = __ms;
      #line 494 
      __ms --;
      #line 494 
      ;
      #line 494 
      if (! (tmp_6 != 0UL)) 
                            #line 494 
                            break;
      #line 494 
      __const_udelay(4295000UL);
    }
  }
  #line 496 
  if (res == 0L) 
                 #line 497 
                 res = (long)count;
  #line 498 
  out_unlock: 
              #line 498 
  ;
  #line 499 
  kfree((void *)buf);
  #line 500 
  return res;
}

#line 503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_rdbbp_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 508 
  int ret;
  #line 511 
  u32 val;
  #line 506 
  struct lbs_private *priv = (struct lbs_private *)file->private_data;
  #line 507 
  ssize_t pos = 0L;
  #line 509 
  unsigned long addr = get_zeroed_page(3264U);
  #line 510 
  char *buf = (char *)addr;
  #line 513 
  if (buf == (char *)0) 
                        #line 514 
                        return -12L;
  #line 516 
  ret = lbs_get_reg(priv,(unsigned short)26,(unsigned short)((int)((unsigned short)priv->bbp_offset)),& val);
  {
    #line 517 
    unsigned long __ms = 10UL;
    #line 517 
    while (1) {
      #line 517 
      unsigned long tmp_0;
      #line 517 
      tmp_0 = __ms;
      #line 517 
      __ms --;
      #line 517 
      ;
      #line 517 
      if (! (tmp_0 != 0UL)) 
                            #line 517 
                            break;
      #line 517 
      __const_udelay(4295000UL);
    }
  }
  #line 518 
  if (ret == 0) {
    #line 519 
    pos = (long)snprintf(buf,4096UL,(char *)"BBP[0x%x] = 0x%08x\n",priv->bbp_offset,
                 val);
    #line 521 
    ret = (int)simple_read_from_buffer((void *)userbuf,count,ppos,(void *)buf,
                                (unsigned long)pos);
  }
  #line 523 
  free_pages(addr,0U);
  #line 525 
  return (long)ret;
}

#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_rdbbp_write(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 535 
  size_t __UNIQUE_ID___x456;
  #line 535 
  unsigned long tmp;
  #line 533 
  char *buf;
  #line 532 
  struct lbs_private *priv = (struct lbs_private *)file->private_data;
  {
    #line 535 
    __UNIQUE_ID___x456 = count;
    #line 535 
    unsigned long __UNIQUE_ID___y457 = 4095UL;
    #line 535 
    if (__UNIQUE_ID___x456 < __UNIQUE_ID___y457) 
                                                 #line 535 
                                                 tmp = __UNIQUE_ID___x456; else 
                                                                    #line 535 
                                                                    tmp = __UNIQUE_ID___y457;
    }
  #line 535 
  ;
  #line 535 
  buf = (char *)memdup_user_nul((void *)userbuf,tmp);
  #line 536 
  if ((int)IS_ERR((void *)buf) != 0) {
    #line 537 
    return PTR_ERR((void *)buf);
  }
  #line 539 
  priv->bbp_offset = (unsigned int)simple_strtoul(buf,(char **)0,16U);
  #line 540 
  kfree((void *)buf);
  #line 542 
  return (long)count;
}

#line 545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_wrbbp_write(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 555 
  unsigned long tmp;
  #line 555 
  size_t __UNIQUE_ID___x458;
  #line 551 
  ssize_t res;
  #line 552 
  u32 offset;
  #line 552 
  u32 value;
  #line 553 
  char *buf;
  #line 550 
  struct lbs_private *priv = (struct lbs_private *)file->private_data;
  {
    #line 555 
    __UNIQUE_ID___x458 = count;
    #line 555 
    unsigned long __UNIQUE_ID___y459 = 4095UL;
    #line 555 
    if (__UNIQUE_ID___x458 < __UNIQUE_ID___y459) 
                                                 #line 555 
                                                 tmp = __UNIQUE_ID___x458; else 
                                                                    #line 555 
                                                                    tmp = __UNIQUE_ID___y459;
    }
  #line 555 
  ;
  #line 555 
  buf = (char *)memdup_user_nul((void *)userbuf,tmp);
  #line 556 
  if ((int)IS_ERR((void *)buf) != 0) {
    #line 557 
    return PTR_ERR((void *)buf);
  }
  #line 559 
  res = (long)sscanf(buf,(char *)"%x %x",& offset,& value);
  #line 560 
  if (res != 2L) {
    #line 561 
    res = -14L;
    #line 562 
    goto out_unlock;
  }
  #line 565 
  res = (long)lbs_set_reg(priv,(unsigned short)26,
                    (unsigned short)((int)((unsigned short)offset)),value);
  {
    #line 566 
    unsigned long __ms = 10UL;
    #line 566 
    while (1) {
      #line 566 
      unsigned long tmp_6;
      #line 566 
      tmp_6 = __ms;
      #line 566 
      __ms --;
      #line 566 
      ;
      #line 566 
      if (! (tmp_6 != 0UL)) 
                            #line 566 
                            break;
      #line 566 
      __const_udelay(4295000UL);
    }
  }
  #line 568 
  if (res == 0L) 
                 #line 569 
                 res = (long)count;
  #line 570 
  out_unlock: 
              #line 570 
  ;
  #line 571 
  kfree((void *)buf);
  #line 572 
  return res;
}

#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_rdrf_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 580 
  int ret;
  #line 583 
  u32 val;
  #line 578 
  struct lbs_private *priv = (struct lbs_private *)file->private_data;
  #line 579 
  ssize_t pos = 0L;
  #line 581 
  unsigned long addr = get_zeroed_page(3264U);
  #line 582 
  char *buf = (char *)addr;
  #line 585 
  if (buf == (char *)0) 
                        #line 586 
                        return -12L;
  #line 588 
  ret = lbs_get_reg(priv,(unsigned short)27,(unsigned short)((int)((unsigned short)priv->rf_offset)),& val);
  {
    #line 589 
    unsigned long __ms = 10UL;
    #line 589 
    while (1) {
      #line 589 
      unsigned long tmp_0;
      #line 589 
      tmp_0 = __ms;
      #line 589 
      __ms --;
      #line 589 
      ;
      #line 589 
      if (! (tmp_0 != 0UL)) 
                            #line 589 
                            break;
      #line 589 
      __const_udelay(4295000UL);
    }
  }
  #line 590 
  if (ret == 0) {
    #line 591 
    pos = (long)snprintf(buf,4096UL,(char *)"RF[0x%x] = 0x%08x\n",priv->rf_offset,
                 val);
    #line 593 
    ret = (int)simple_read_from_buffer((void *)userbuf,count,ppos,(void *)buf,
                                (unsigned long)pos);
  }
  #line 595 
  free_pages(addr,0U);
  #line 597 
  return (long)ret;
}

#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_rdrf_write(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 607 
  size_t __UNIQUE_ID___x460;
  #line 607 
  unsigned long tmp;
  #line 605 
  char *buf;
  #line 604 
  struct lbs_private *priv = (struct lbs_private *)file->private_data;
  {
    #line 607 
    __UNIQUE_ID___x460 = count;
    #line 607 
    unsigned long __UNIQUE_ID___y461 = 4095UL;
    #line 607 
    if (__UNIQUE_ID___x460 < __UNIQUE_ID___y461) 
                                                 #line 607 
                                                 tmp = __UNIQUE_ID___x460; else 
                                                                    #line 607 
                                                                    tmp = __UNIQUE_ID___y461;
    }
  #line 607 
  ;
  #line 607 
  buf = (char *)memdup_user_nul((void *)userbuf,tmp);
  #line 608 
  if ((int)IS_ERR((void *)buf) != 0) {
    #line 609 
    return PTR_ERR((void *)buf);
  }
  #line 611 
  priv->rf_offset = (unsigned int)simple_strtoul(buf,(char **)0,16U);
  #line 612 
  kfree((void *)buf);
  #line 613 
  return (long)count;
}

#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_wrrf_write(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 626 
  unsigned long tmp;
  #line 626 
  size_t __UNIQUE_ID___x462;
  #line 622 
  ssize_t res;
  #line 623 
  u32 offset;
  #line 623 
  u32 value;
  #line 624 
  char *buf;
  #line 621 
  struct lbs_private *priv = (struct lbs_private *)file->private_data;
  {
    #line 626 
    __UNIQUE_ID___x462 = count;
    #line 626 
    unsigned long __UNIQUE_ID___y463 = 4095UL;
    #line 626 
    if (__UNIQUE_ID___x462 < __UNIQUE_ID___y463) 
                                                 #line 626 
                                                 tmp = __UNIQUE_ID___x462; else 
                                                                    #line 626 
                                                                    tmp = __UNIQUE_ID___y463;
    }
  #line 626 
  ;
  #line 626 
  buf = (char *)memdup_user_nul((void *)userbuf,tmp);
  #line 627 
  if ((int)IS_ERR((void *)buf) != 0) {
    #line 628 
    return PTR_ERR((void *)buf);
  }
  #line 630 
  res = (long)sscanf(buf,(char *)"%x %x",& offset,& value);
  #line 631 
  if (res != 2L) {
    #line 632 
    res = -14L;
    #line 633 
    goto out_unlock;
  }
  #line 636 
  res = (long)lbs_set_reg(priv,(unsigned short)27,
                    (unsigned short)((int)((unsigned short)offset)),value);
  {
    #line 637 
    unsigned long __ms = 10UL;
    #line 637 
    while (1) {
      #line 637 
      unsigned long tmp_6;
      #line 637 
      tmp_6 = __ms;
      #line 637 
      __ms --;
      #line 637 
      ;
      #line 637 
      if (! (tmp_6 != 0UL)) 
                            #line 637 
                            break;
      #line 637 
      __const_udelay(4295000UL);
    }
  }
  #line 639 
  if (res == 0L) 
                 #line 640 
                 res = (long)count;
  #line 641 
  out_unlock: 
              #line 641 
  ;
  #line 642 
  kfree((void *)buf);
  #line 643 
  return res;
}

#line 660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static struct lbs_debugfs_files debugfs_files[3U] = {{.name = (char *)"info", .perm = (unsigned short)292U, .fops = {.owner = & __this_module, .llseek = & generic_file_llseek, .read = & lbs_dev_info, .write = & write_file_dummy, .open = & simple_open}}, {.name = (char *)"sleepparams", .perm = (unsigned short)420U, .fops = {.owner = & __this_module, .llseek = & generic_file_llseek, .read = & lbs_sleepparams_read, .write = & lbs_sleepparams_write, .open = & simple_open}}, {.name = (char *)"hostsleep", .perm = (unsigned short)420U, .fops = {.owner = & __this_module, .llseek = & generic_file_llseek, .read = & lbs_host_sleep_read, .write = & lbs_host_sleep_write, .open = & simple_open}}};
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static struct lbs_debugfs_files debugfs_events_files[6U] = {{.name = (char *)"low_rssi", .perm = (unsigned short)420U, .fops = {.owner = & __this_module, .llseek = & generic_file_llseek, .read = & lbs_lowrssi_read, .write = & lbs_lowrssi_write, .open = & simple_open}}, {.name = (char *)"low_snr", .perm = (unsigned short)420U, .fops = {.owner = & __this_module, .llseek = & generic_file_llseek, .read = & lbs_lowsnr_read, .write = & lbs_lowsnr_write, .open = & simple_open}}, {.name = (char *)"failure_count", .perm = (unsigned short)420U, .fops = {.owner = & __this_module, .llseek = & generic_file_llseek, .read = & lbs_failcount_read, .write = & lbs_failcount_write, .open = & simple_open}}, {.name = (char *)"beacon_missed", .perm = (unsigned short)420U, .fops = {.owner = & __this_module, .llseek = & generic_file_llseek, .read = & lbs_bcnmiss_read, .write = & lbs_bcnmiss_write, .open = & simple_open}}, {.name = (char *)"high_rssi", .perm = (unsigned short)420U, .fops = {.owner = & __this_module, .llseek = & generic_file_llseek, .read = & lbs_highrssi_read, .write = & lbs_highrssi_write, .open = & simple_open}}, {.name = (char *)"high_snr", .perm = (unsigned short)420U, .fops = {.owner = & __this_module, .llseek = & generic_file_llseek, .read = & lbs_highsnr_read, .write = & lbs_highsnr_write, .open = & simple_open}}};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static struct lbs_debugfs_files debugfs_regs_files[6U] = {{.name = (char *)"rdmac", .perm = (unsigned short)420U, .fops = {.owner = & __this_module, .llseek = & generic_file_llseek, .read = & lbs_rdmac_read, .write = & lbs_rdmac_write, .open = & simple_open}}, {.name = (char *)"wrmac", .perm = (unsigned short)384U, .fops = {.owner = & __this_module, .llseek = & generic_file_llseek, .write = & lbs_wrmac_write, .open = & simple_open}}, {.name = (char *)"rdbbp", .perm = (unsigned short)420U, .fops = {.owner = & __this_module, .llseek = & generic_file_llseek, .read = & lbs_rdbbp_read, .write = & lbs_rdbbp_write, .open = & simple_open}}, {.name = (char *)"wrbbp", .perm = (unsigned short)384U, .fops = {.owner = & __this_module, .llseek = & generic_file_llseek, .write = & lbs_wrbbp_write, .open = & simple_open}}, {.name = (char *)"rdrf", .perm = (unsigned short)420U, .fops = {.owner = & __this_module, .llseek = & generic_file_llseek, .read = & lbs_rdrf_read, .write = & lbs_rdrf_write, .open = & simple_open}}, {.name = (char *)"wrrf", .perm = (unsigned short)384U, .fops = {.owner = & __this_module, .llseek = & generic_file_llseek, .write = & lbs_wrrf_write, .open = & simple_open}}};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
void lbs_debugfs_init(void)
{
  #line 694 
  if (lbs_dir == (struct dentry *)0) 
                                     #line 695 
                                     lbs_dir = cif_debugfs_create_dir((char *)"lbs_wireless",(struct dentry *)0);
  #line 696 
  return;
}

#line 698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
void lbs_debugfs_remove(void)
{
  #line 700 
  cif_debugfs_remove(lbs_dir);
  #line 701 
  return;
}

#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
void lbs_debugfs_init_one(struct lbs_private *priv, struct net_device *dev)
{
  #line 705 
  int i;
  #line 706 
  struct lbs_debugfs_files *files;
  #line 707 
  if (lbs_dir == (struct dentry *)0) 
                                     #line 708 
                                     goto exit;
  #line 710 
  priv->debugfs_dir = cif_debugfs_create_dir((char *)(& dev->name),lbs_dir);
  #line 712 
  i = 0;
  #line 712 
  while ((unsigned int)i <= 2U) {
    #line 713 
    files = & debugfs_files[i];
    #line 714 
    priv->debugfs_files[i] = cif_debugfs_create_file(files->name,(unsigned short)((int)files->perm),priv->debugfs_dir,(void *)priv,& files->fops);
    #line 712 
    i ++;
  }
  #line 721 
  priv->events_dir = cif_debugfs_create_dir((char *)"subscribed_events",priv->debugfs_dir);
  #line 723 
  i = 0;
  #line 723 
  while ((unsigned int)i <= 5U) {
    #line 724 
    files = & debugfs_events_files[i];
    #line 725 
    priv->debugfs_events_files[i] = cif_debugfs_create_file(files->name,(unsigned short)((int)files->perm),priv->events_dir,(void *)priv,& files->fops);
    #line 723 
    i ++;
  }
  #line 732 
  priv->regs_dir = cif_debugfs_create_dir((char *)"registers",priv->debugfs_dir);
  #line 734 
  i = 0;
  #line 734 
  while ((unsigned int)i <= 5U) {
    #line 735 
    files = & debugfs_regs_files[i];
    #line 736 
    priv->debugfs_regs_files[i] = cif_debugfs_create_file(files->name,(unsigned short)((int)files->perm),priv->regs_dir,(void *)priv,& files->fops);
    #line 734 
    i ++;
  }
  #line 744 
  lbs_debug_init(priv);
  #line 746 
  exit: 
        #line 746 
  ;
  #line 747 
  return;
}

#line 750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
void lbs_debugfs_remove_one(struct lbs_private *priv)
{
  #line 752 
  int i;
  #line 754 
  i = 0;
  #line 754 
  while ((unsigned int)i <= 5U) {
    #line 755 
    cif_debugfs_remove(priv->debugfs_regs_files[i]);
    #line 754 
    i ++;
  }
  #line 757 
  cif_debugfs_remove(priv->regs_dir);
  #line 759 
  i = 0;
  #line 759 
  while ((unsigned int)i <= 5U) {
    #line 760 
    cif_debugfs_remove(priv->debugfs_events_files[i]);
    #line 759 
    i ++;
  }
  #line 762 
  cif_debugfs_remove(priv->events_dir);
  #line 764 
  cif_debugfs_remove(priv->debugfs_debug);
  #line 766 
  i = 0;
  #line 766 
  while ((unsigned int)i <= 2U) {
    #line 767 
    cif_debugfs_remove(priv->debugfs_files[i]);
    #line 766 
    i ++;
  }
  #line 768 
  cif_debugfs_remove(priv->debugfs_dir);
  #line 769 
  return;
}

#line 789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static struct debug_data items[2U] = {{.name = {(char)'p', (char)'s', (char)'m', (char)'o', (char)'d', (char)'e'}, .size = 2U, .addr = 572UL}, {.name = {(char)'p', (char)'s', (char)'s', (char)'t', (char)'a', (char)'t', (char)'e'}, .size = 4U, .addr = 576UL}};
#line 794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static int num_of_items = 2;
#line 806  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_debugfs_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 811 
  ssize_t res;
  #line 812 
  char *p;
  #line 813 
  int i;
  #line 814 
  struct debug_data *d;
  #line 809 
  int val = 0;
  #line 810 
  size_t pos = 0UL;
  #line 815 
  unsigned long addr = get_zeroed_page(3264U);
  #line 816 
  char *buf = (char *)addr;
  #line 817 
  if (buf == (char *)0) 
                        #line 818 
                        return -12L;
  #line 820 
  p = buf;
  #line 822 
  d = (struct debug_data *)file->private_data;
  #line 824 
  i = 0;
  #line 824 
  while (i < num_of_items) {
    {
      #line 825 
      if ((d + (unsigned long)i)->size == 1U) 
                                              #line 826 
                                              val = (int)*((u8 *)(d + (unsigned long)i)->addr);
      else 
        #line 827 
        if ((d + (unsigned long)i)->size == 2U) 
                                                #line 828 
                                                val = (int)*((u16 *)(d + (unsigned long)i)->addr);
        else 
          #line 829 
          if ((d + (unsigned long)i)->size == 4U) 
                                                  #line 830 
                                                  val = (int)*((u32 *)(d + (unsigned long)i)->addr);
          else 
            #line 831 
            if ((d + (unsigned long)i)->size == 8U) 
                                                    #line 832 
                                                    val = (int)*((u64 *)(d + (unsigned long)i)->addr);
      #line 834 
      pos = (unsigned long)sprintf(p + pos,(char *)"%s=%d\n",
                (char *)(& (d + (unsigned long)i)->name),val) + pos;
    }
    #line 824 
    i ++;
  }
  #line 837 
  res = simple_read_from_buffer((void *)userbuf,count,ppos,(void *)p,pos);
  #line 839 
  free_pages(addr,0U);
  #line 840 
  return res;
}

#line 853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static ssize_t lbs_debugfs_write(struct file *f, char *buf, size_t cnt, loff_t *ppos)
{
  #line 856 
  int r;
  #line 856 
  int i;
  #line 857 
  char *pdata;
  #line 858 
  char *p;
  #line 859 
  char *p0;
  #line 860 
  char *p1;
  #line 861 
  char *p2;
  #line 862 
  struct debug_data *d = (struct debug_data *)f->private_data;
  #line 864 
  if (cnt == 0UL) 
                  #line 865 
                  return 0L;
  #line 867 
  pdata = (char *)memdup_user_nul((void *)buf,cnt);
  #line 868 
  if ((int)IS_ERR((void *)pdata) != 0) {
    #line 869 
    return PTR_ERR((void *)pdata);
  }
  #line 871 
  p0 = pdata;
  #line 872 
  i = 0;
  #line 872 
  while (i < num_of_items) {
    #line 873 
    while (1) {
      #line 880 
      char *tmp_2;
      #line 874 
      p = cif_strstr(p0,(char *)(& (d + (unsigned long)i)->name));
      #line 875 
      if (p == (char *)0) 
                          #line 876 
                          break;
      #line 877 
      p1 = strchr(p,10);
      #line 878 
      if (p1 == (char *)0) 
                           #line 879 
                           break;
      #line 880 
      tmp_2 = p1;
      #line 880 
      p1 ++;
      #line 880 
      p0 = tmp_2;
      #line 881 
      p2 = strchr(p,61);
      #line 882 
      if (p2 == (char *)0) 
                           #line 883 
                           break;
      #line 884 
      p2 ++;
      #line 885 
      r = (int)simple_strtoul(p2,(char **)0,0U);
      #line 886 
      if ((d + (unsigned long)i)->size == 1U) 
                                              #line 887 
                                              *((u8 *)(d + (unsigned long)i)->addr) = (unsigned char)r;
      else 
        #line 888 
        if ((d + (unsigned long)i)->size == 2U) 
                                                #line 889 
                                                *((u16 *)(d + (unsigned long)i)->addr) = (unsigned short)r;
        else 
          #line 890 
          if ((d + (unsigned long)i)->size == 4U) 
                                                  #line 891 
                                                  *((u32 *)(d + (unsigned long)i)->addr) = (unsigned int)r;
          else 
            #line 892 
            if ((d + (unsigned long)i)->size == 8U) 
                                                    #line 893 
                                                    *((u64 *)(d + (unsigned long)i)->addr) = (unsigned long long)r;
      #line 894 
      break;
    }
    #line 872 
    i ++;
  }
  #line 897 
  kfree((void *)pdata);
  #line 899 
  return (long)cnt;
}

#line 902  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static struct file_operations lbs_debug_fops = {.owner = & __this_module, .llseek = & default_llseek, .read = & lbs_debugfs_read, .write = & lbs_debugfs_write, .open = & simple_open};
#line 917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/debugfs.c"
static void lbs_debug_init(struct lbs_private *priv)
{
  #line 919 
  int i;
  #line 921 
  if (priv->debugfs_dir == (struct dentry *)0) 
                                               #line 922 
                                               return;
  #line 924 
  i = 0;
  #line 924 
  while (i < num_of_items) {
    #line 925 
    items[i].addr += (unsigned long)priv;
    #line 924 
    i ++;
  }
  #line 927 
  priv->debugfs_debug = cif_debugfs_create_file((char *)"debug",(unsigned short)420,priv->debugfs_dir,(void *)(items),& lbs_debug_fops);
  #line 930 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_lbs_debug_fops = & lbs_debug_fops;
#line 97 
#line 97 
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1);
#line 98 
#line 98 
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);
#line 99 
#line 99 
void emg_debugfs_remove(struct dentry *arg0);
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_debugfs_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 115 
  return lbs_debugfs_read(arg0,arg1,arg2,arg3);
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_debugfs_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 120 
  return lbs_debugfs_write(arg0,arg1,arg2,arg3);
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_dev_info(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 125 
  return lbs_dev_info(arg0,arg1,arg2,arg3);
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_failcount_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 130 
  return lbs_failcount_read(arg0,arg1,arg2,arg3);
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_failcount_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 135 
  return lbs_failcount_write(arg0,arg1,arg2,arg3);
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_highrssi_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 140 
  return lbs_highrssi_read(arg0,arg1,arg2,arg3);
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_highrssi_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 145 
  return lbs_highrssi_write(arg0,arg1,arg2,arg3);
}

#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_highsnr_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 150 
  return lbs_highsnr_read(arg0,arg1,arg2,arg3);
}

#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_highsnr_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 155 
  return lbs_highsnr_write(arg0,arg1,arg2,arg3);
}

#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_host_sleep_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 160 
  return lbs_host_sleep_read(arg0,arg1,arg2,arg3);
}

#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_host_sleep_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 165 
  return lbs_host_sleep_write(arg0,arg1,arg2,arg3);
}

#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_lowrssi_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 170 
  return lbs_lowrssi_read(arg0,arg1,arg2,arg3);
}

#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_lowrssi_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 175 
  return lbs_lowrssi_write(arg0,arg1,arg2,arg3);
}

#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_lowsnr_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 180 
  return lbs_lowsnr_read(arg0,arg1,arg2,arg3);
}

#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_lowsnr_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 185 
  return lbs_lowsnr_write(arg0,arg1,arg2,arg3);
}

#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_rdbbp_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 190 
  return lbs_rdbbp_read(arg0,arg1,arg2,arg3);
}

#line 194  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_rdbbp_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 195 
  return lbs_rdbbp_write(arg0,arg1,arg2,arg3);
}

#line 199  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_rdmac_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 200 
  return lbs_rdmac_read(arg0,arg1,arg2,arg3);
}

#line 204  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_rdmac_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 205 
  return lbs_rdmac_write(arg0,arg1,arg2,arg3);
}

#line 209  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_rdrf_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 210 
  return lbs_rdrf_read(arg0,arg1,arg2,arg3);
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_rdrf_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 215 
  return lbs_rdrf_write(arg0,arg1,arg2,arg3);
}

#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_sleepparams_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 220 
  return lbs_sleepparams_read(arg0,arg1,arg2,arg3);
}

#line 224  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_sleepparams_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 225 
  return lbs_sleepparams_write(arg0,arg1,arg2,arg3);
}

#line 229  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_wrbbp_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 230 
  return lbs_wrbbp_write(arg0,arg1,arg2,arg3);
}

#line 234  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_wrmac_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 235 
  return lbs_wrmac_write(arg0,arg1,arg2,arg3);
}

#line 239  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_lbs_wrrf_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 240 
  return lbs_wrrf_write(arg0,arg1,arg2,arg3);
}

#line 244  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_write_file_dummy(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 245 
  return write_file_dummy(arg0,arg1,arg2,arg3);
}

#line 355  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 358 
  return ldv_ptr_err(ptr);
}

#line 362  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 365 
  return ldv_is_err(ptr);
}

#line 572  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  #line 575 
  return ldv_kzalloc(size,flags);
}

#line 802  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent)
{
  #line 806 
  return emg_debugfs_create_dir(name,parent);
}

#line 810  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static void cif_debugfs_remove(struct dentry *dentry)
{
  #line 814 
  emg_debugfs_remove(dentry);
  #line 815 
  return;
}

#line 818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 822 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static char *cif_strstr(char *s1, char *s2)
{
  #line 829 
  return ldv_strstr(s1,s2);
}

/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmdresp.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr);
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty(struct list_head *head)
{
  #line 269 
  union __anonunion___u_3770 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 671  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmdresp.i.aux"
static void cif_spin_unlock_irqrestore_driver_lock_of_lbs_private(spinlock_t *lock, unsigned long flags);
#line 26 
#line 680 
static void cif_mutex_lock_lock_of_lbs_private(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 662 
static void cif___ldv_spin_lock_driver_lock_of_lbs_private(spinlock_t *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 695  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmdresp.i.aux"
static void cif_mutex_unlock_lock_of_lbs_private(struct mutex *lock);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmdresp.i.aux"
static int cif_del_timer(struct timer_list *timer);
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 60 
unsigned long msleep_interruptible(unsigned int);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue_1(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_1(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_queue_1(struct net_device *dev)
{
  #line 3168 
  netif_tx_stop_queue_1(netdev_get_tx_queue(dev,0U));
  #line 3169 
  return;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.h"
#line 43 
void lbs_cmd_async(struct lbs_private *priv, uint16_t command, struct cmd_header *in_cmd, int in_cmd_size);
#line 63 
#line 63 
void __lbs_complete_command(struct lbs_private *priv, struct cmd_ctrl_node *cmd, int result);
#line 67 
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmdresp.c"
int lbs_process_command_response(struct lbs_private *priv, u8 *data, u32 len);
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.h"
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmdresp.c"
int lbs_process_event(struct lbs_private *priv, u32 event);
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.h"
#line 96 
void lbs_ps_confirm_sleep(struct lbs_private *priv);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmdresp.c"
void lbs_mac_event_disconnected(struct lbs_private *priv, bool locally_generated)
{
  #line 31 
  unsigned long flags;
  #line 33 
  if (priv->connect_status != 0U) 
                                  #line 34 
                                  return;
  #line 40 
  msleep_interruptible(1000U);
  #line 42 
  if ((priv->wdev)->iftype == (unsigned int)NL80211_IFTYPE_STATION) 
                                                                    #line 43 
                                                                    lbs_send_disconnect_notification(priv,(_Bool)((bool)((int)locally_generated) != 0));
  #line 46 
  netif_stop_queue_1(priv->dev);
  #line 47 
  netif_carrier_off(priv->dev);
  #line 50 
  cif___ldv_spin_lock_driver_lock_of_lbs_private(& priv->driver_lock);
  #line 51 
  kfree_skb(priv->currenttxskb);
  #line 52 
  priv->currenttxskb = (struct sk_buff *)0;
  #line 53 
  priv->tx_pending_len = 0;
  #line 54 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private(& priv->driver_lock,flags);
  #line 56 
  priv->connect_status = 1U;
  #line 58 
  if (priv->psstate != 0U) {
    #line 60 
    if ((lbs_debug & 16384U) != 0U) {
      #line 60 
      char *tmp_0;
      #line 60 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 60 
                                                               tmp_0 = (char *)" (INT)"; else 
                                                                    #line 60 
                                                                    tmp_0 = (char *)"";
      #line 60 
      printk((char *)"\001",tmp_0);
    }
    #line 61 
    lbs_set_ps_mode(priv,(unsigned short)49,(_Bool)0);
  }
  #line 63 
  return;
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmdresp.c"
int lbs_process_command_response(struct lbs_private *priv, u8 *data, u32 len)
{
  #line 67 
  uint16_t respcmd;
  #line 67 
  uint16_t curcmd;
  #line 68 
  struct cmd_header *resp;
  #line 70 
  unsigned long flags;
  #line 71 
  uint16_t result;
  #line 69 
  int ret = 0;
  #line 73 
  cif_mutex_lock_lock_of_lbs_private(& priv->lock);
  #line 74 
  cif___ldv_spin_lock_driver_lock_of_lbs_private(& priv->driver_lock);
  #line 76 
  if (priv->cur_cmd == (struct cmd_ctrl_node *)0) {
    #line 77 
    if ((lbs_debug & 8192U) != 0U) {
      #line 77 
      char *tmp_0;
      #line 77 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 77 
                                                               tmp_0 = (char *)" (INT)"; else 
                                                                    #line 77 
                                                                    tmp_0 = (char *)"";
      #line 77 
      printk((char *)"\001",tmp_0);
    }
    #line 78 
    ret = -1;
    #line 79 
    cif_spin_unlock_irqrestore_driver_lock_of_lbs_private(& priv->driver_lock,flags);
    #line 80 
    goto done;
  }
  #line 83 
  resp = (struct cmd_header *)data;
  #line 84 
  curcmd = ((priv->cur_cmd)->cmdbuf)->command;
  #line 85 
  respcmd = resp->command;
  #line 86 
  result = resp->result;
  #line 88 
  if ((lbs_debug & 16384U) != 0U) {
    #line 88 
    char *tmp_2;
    #line 88 
    ;
    #line 88 
    ;
    #line 88 
    ;
    #line 88 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 88 
                                                             tmp_2 = (char *)" (INT)"; else 
                                                                    #line 88 
                                                                    tmp_2 = (char *)"";
    #line 88 
    printk((char *)"\001",tmp_2,(int)respcmd,(int)resp->seqnum,len);
  }
  #line 90 
  lbs_deb_hex(16384U,(char *)"CMD_RESP",(u8 *)resp,(int)len);
  #line 92 
  if ((int)resp->seqnum != (int)((priv->cur_cmd)->cmdbuf)->seqnum) {
    #line 93 
    netdev_info(priv->dev,(char *)"Received CMD_RESP with invalid sequence %d (expected %d)\n",(int)resp->seqnum,(int)((priv->cur_cmd)->cmdbuf)->seqnum);
    #line 97 
    cif_spin_unlock_irqrestore_driver_lock_of_lbs_private(& priv->driver_lock,flags);
    #line 98 
    ret = -1;
    #line 99 
    goto done;
  }
  #line 101 
  if (((unsigned int)curcmd | 32768U) != (unsigned int)respcmd && ((unsigned int)respcmd != 32786U && (unsigned int)curcmd != 80U)) {
    #line 103 
    netdev_info(priv->dev,(char *)"Invalid CMD_RESP %x to command %x!\n",(int)respcmd,(int)curcmd);
    #line 105 
    cif_spin_unlock_irqrestore_driver_lock_of_lbs_private(& priv->driver_lock,flags);
    #line 106 
    ret = -1;
    #line 107 
    goto done;
  }
  #line 110 
  if ((unsigned int)resp->result == 4U) {
    #line 113 
    netdev_info(priv->dev,(char *)"Firmware returns DEFER to command %x. Will let it time out...\n",(int)resp->command);
    #line 116 
    cif_spin_unlock_irqrestore_driver_lock_of_lbs_private(& priv->driver_lock,flags);
    #line 117 
    ret = -1;
    #line 118 
    goto done;
  }
  #line 122 
  cif_del_timer(& priv->command_timer);
  #line 123 
  priv->cmd_timed_out = 0;
  #line 125 
  if ((unsigned int)respcmd == 32801U) {
    #line 129 
    struct cmd_ds_802_11_ps_mode *psmode = (struct cmd_ds_802_11_ps_mode *)resp;
    #line 130 
    u16 action = psmode->action;
    #line 132 
    if ((lbs_debug & 8192U) != 0U) {
      #line 132 
      char *tmp_4;
      #line 132 
      ;
      #line 132 
      ;
      #line 132 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 132 
                                                               tmp_4 = (char *)" (INT)"; else 
                                                                    #line 132 
                                                                    tmp_4 = (char *)"";
      #line 132 
      printk((char *)"\001",tmp_4,(int)result,(int)action);
    }
    #line 136 
    if ((unsigned int)result != 0U) {
      #line 137 
      if ((lbs_debug & 8192U) != 0U) {
        #line 137 
        char *tmp_6;
        #line 137 
        ;
        #line 137 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 137 
                                                                 tmp_6 = (char *)" (INT)"; else 
                                                                    #line 137 
                                                                    tmp_6 = (char *)"";
        #line 137 
        printk((char *)"\001",tmp_6,(int)result);
      }
      #line 144 
      if ((priv->wdev)->iftype == (unsigned int)NL80211_IFTYPE_MONITOR && (unsigned int)action == 48U) 
        #line 146 
        priv->psmode = (unsigned short)0U;
    }
    else 
      #line 147 
      if ((unsigned int)action == 48U) {
        #line 148 
        priv->needtowakeup = (unsigned char)0U;
        #line 149 
        priv->psstate = 1U;
        #line 151 
        if ((lbs_debug & 8192U) != 0U) {
          #line 151 
          char *tmp_8;
          #line 151 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 151 
                                                                   tmp_8 = (char *)" (INT)"; else 
                                                                    #line 151 
                                                                    tmp_8 = (char *)"";
          #line 151 
          printk((char *)"\001",tmp_8);
        }
        #line 152 
        if (priv->connect_status != 0U) {
          #line 157 
          if ((lbs_debug & 8192U) != 0U) {
            #line 157 
            char *tmp_10;
            #line 157 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 157 
              tmp_10 = (char *)" (INT)"; else 
                                              #line 157 
                                              tmp_10 = (char *)"";
            #line 157 
            printk((char *)"\001",tmp_10);
          }
          #line 160 
          cif_spin_unlock_irqrestore_driver_lock_of_lbs_private(& priv->driver_lock,flags);
          #line 161 
          cif_mutex_unlock_lock_of_lbs_private(& priv->lock);
          #line 162 
          lbs_set_ps_mode(priv,(unsigned short)49,(_Bool)0);
          #line 164 
          cif_mutex_lock_lock_of_lbs_private(& priv->lock);
          #line 165 
          cif___ldv_spin_lock_driver_lock_of_lbs_private(& priv->driver_lock);
        }
      }
      else 
        #line 167 
        if ((unsigned int)action == 49U) {
          #line 168 
          priv->needtowakeup = (unsigned char)0U;
          #line 169 
          priv->psstate = 0U;
          #line 170 
          if ((lbs_debug & 8192U) != 0U) {
            #line 170 
            char *tmp_12;
            #line 170 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 170 
              tmp_12 = (char *)" (INT)"; else 
                                              #line 170 
                                              tmp_12 = (char *)"";
            #line 170 
            printk((char *)"\001",tmp_12);
          }
        }
        else 
          #line 172 
          if ((lbs_debug & 8192U) != 0U) {
            #line 172 
            char *tmp_14;
            #line 172 
            ;
            #line 172 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 172 
              tmp_14 = (char *)" (INT)"; else 
                                              #line 172 
                                              tmp_14 = (char *)"";
            #line 172 
            printk((char *)"\001",tmp_14,(int)action);
          }
    #line 175 
    __lbs_complete_command(priv,priv->cur_cmd,(int)result);
    #line 176 
    cif_spin_unlock_irqrestore_driver_lock_of_lbs_private(& priv->driver_lock,flags);
    #line 178 
    ret = 0;
    #line 179 
    goto done;
  }
  #line 183 
  if ((unsigned int)result != 0U || ((int)respcmd & 32768) == 0) {
    #line 184 
    if ((lbs_debug & 8192U) != 0U) {
      #line 184 
      char *tmp_16;
      #line 184 
      ;
      #line 184 
      ;
      #line 184 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 184 
                                                               tmp_16 = (char *)" (INT)"; else 
                                                                    #line 184 
                                                                    tmp_16 = (char *)"";
      #line 184 
      printk((char *)"\001",tmp_16,(int)result,(int)respcmd);
    }
    #line 189 
    switch ((int)respcmd) {
      #line 190 
      case 32771: 
                  #line 190 
      ;
      #line 191 
      case 32773: 
                  #line 191 
      ;
      #line 192 
      if ((lbs_debug & 8192U) != 0U) {
        #line 192 
        char *tmp_18;
        #line 192 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 192 
                                                                 tmp_18 = (char *)" (INT)"; else 
                                                                    #line 192 
                                                                    tmp_18 = (char *)"";
        #line 192 
        printk((char *)"\001",tmp_18);
      }
      #line 193 
      break;
    }
    #line 196 
    __lbs_complete_command(priv,priv->cur_cmd,(int)result);
    #line 197 
    cif_spin_unlock_irqrestore_driver_lock_of_lbs_private(& priv->driver_lock,flags);
    #line 199 
    ret = -1;
    #line 200 
    goto done;
  }
  #line 203 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private(& priv->driver_lock,flags);
  #line 205 
  if (priv->cur_cmd != (struct cmd_ctrl_node *)0 && (priv->cur_cmd)->callback != (int (*)(struct lbs_private *, unsigned long , struct cmd_header *))0) 
    #line 206 
    ret = (*((priv->cur_cmd)->callback))(priv,(priv->cur_cmd)->callback_arg,resp);
  #line 210 
  cif___ldv_spin_lock_driver_lock_of_lbs_private(& priv->driver_lock);
  #line 212 
  if (priv->cur_cmd != (struct cmd_ctrl_node *)0) 
                                                  #line 214 
                                                  __lbs_complete_command(priv,priv->cur_cmd,(int)result);
  #line 216 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private(& priv->driver_lock,flags);
  #line 218 
  done: 
        #line 218 
  ;
  #line 219 
  cif_mutex_unlock_lock_of_lbs_private(& priv->lock);
  #line 220 
  return ret;
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmdresp.c"
int lbs_process_event(struct lbs_private *priv, u32 event)
{
  #line 226 
  struct cmd_header cmd;
  #line 225 
  int ret = 0;
  #line 228 
  switch (event) {
    #line 229 
    case (u32)4: 
                 #line 229 
    ;
    #line 230 
    if ((lbs_debug & 16384U) != 0U) {
      #line 230 
      char *tmp_0;
      #line 230 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 230 
                                                               tmp_0 = (char *)" (INT)"; else 
                                                                    #line 230 
                                                                    tmp_0 = (char *)"";
      #line 230 
      printk((char *)"\001",tmp_0);
    }
    #line 231 
    break;
    #line 233 
    case (u32)8: 
                 #line 233 
    ;
    #line 234 
    if ((lbs_debug & 16384U) != 0U) {
      #line 234 
      char *tmp_2;
      #line 234 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 234 
                                                               tmp_2 = (char *)" (INT)"; else 
                                                                    #line 234 
                                                                    tmp_2 = (char *)"";
      #line 234 
      printk((char *)"\001",tmp_2);
    }
    #line 235 
    lbs_mac_event_disconnected(priv,(_Bool)0);
    #line 236 
    break;
    #line 238 
    case (u32)9: 
                 #line 238 
    ;
    #line 239 
    if ((lbs_debug & 16384U) != 0U) {
      #line 239 
      char *tmp_4;
      #line 239 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 239 
                                                               tmp_4 = (char *)" (INT)"; else 
                                                                    #line 239 
                                                                    tmp_4 = (char *)"";
      #line 239 
      printk((char *)"\001",tmp_4);
    }
    #line 240 
    lbs_mac_event_disconnected(priv,(_Bool)0);
    #line 241 
    break;
    #line 243 
    case (u32)3: 
                 #line 243 
    ;
    #line 244 
    if ((lbs_debug & 16384U) != 0U) {
      #line 244 
      char *tmp_6;
      #line 244 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 244 
                                                               tmp_6 = (char *)" (INT)"; else 
                                                                    #line 244 
                                                                    tmp_6 = (char *)"";
      #line 244 
      printk((char *)"\001",tmp_6);
    }
    #line 245 
    lbs_mac_event_disconnected(priv,(_Bool)1);
    #line 246 
    break;
    #line 248 
    case (u32)11: 
                  #line 248 
    ;
    #line 249 
    if ((lbs_debug & 16384U) != 0U) {
      #line 249 
      char *tmp_8;
      #line 249 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 249 
                                                               tmp_8 = (char *)" (INT)"; else 
                                                                    #line 249 
                                                                    tmp_8 = (char *)"";
      #line 249 
      printk((char *)"\001",tmp_8);
    }
    #line 252 
    if (priv->psstate == 0U) {
      #line 253 
      if ((lbs_debug & 16384U) != 0U) {
        #line 253 
        char *tmp_10;
        #line 253 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 253 
                                                                 tmp_10 = (char *)" (INT)"; else 
                                                                    #line 253 
                                                                    tmp_10 = (char *)"";
        #line 253 
        printk((char *)"\001",tmp_10);
      }
      #line 255 
      break;
    }
    #line 257 
    if (list_empty(& priv->cmdpendingq) == 0) {
      #line 258 
      if ((lbs_debug & 16384U) != 0U) {
        #line 258 
        char *tmp_12;
        #line 258 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 258 
                                                                 tmp_12 = (char *)" (INT)"; else 
                                                                    #line 258 
                                                                    tmp_12 = (char *)"";
        #line 258 
        printk((char *)"\001",tmp_12);
      }
      #line 259 
      break;
    }
    #line 261 
    priv->psstate = 2U;
    #line 263 
    lbs_ps_confirm_sleep(priv);
    #line 265 
    break;
    #line 267 
    case (u32)18: 
                  #line 267 
    ;
    #line 268 
    if ((lbs_debug & 16384U) != 0U) {
      #line 268 
      char *tmp_15;
      #line 268 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 268 
                                                               tmp_15 = (char *)" (INT)"; else 
                                                                    #line 268 
                                                                    tmp_15 = (char *)"";
      #line 268 
      printk((char *)"\001",tmp_15);
    }
    #line 269 
    if (priv->reset_deep_sleep_wakeup != (int (*)(struct lbs_private *))0) 
      #line 270 
      (*(priv->reset_deep_sleep_wakeup))(priv);
    #line 271 
    priv->is_deep_sleep = 0;
    #line 272 
    lbs_cmd_async(priv,(unsigned short)68,& cmd,8);
    #line 274 
    priv->is_host_sleep_activated = 0;
    #line 275 
    __wake_up(& priv->host_sleep_q,1U,1,(void *)0);
    #line 276 
    break;
    #line 278 
    case (u32)16: 
                  #line 278 
    ;
    #line 279 
    if (priv->reset_deep_sleep_wakeup != (int (*)(struct lbs_private *))0) 
      #line 280 
      (*(priv->reset_deep_sleep_wakeup))(priv);
    #line 281 
    if ((lbs_debug & 16384U) != 0U) {
      #line 281 
      char *tmp_17;
      #line 281 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 281 
                                                               tmp_17 = (char *)" (INT)"; else 
                                                                    #line 281 
                                                                    tmp_17 = (char *)"";
      #line 281 
      printk((char *)"\001",tmp_17);
    }
    #line 282 
    priv->is_deep_sleep = 0;
    #line 283 
    priv->wakeup_dev_required = 0;
    #line 284 
    __wake_up(& priv->ds_awake_q,1U,1,(void *)0);
    #line 285 
    break;
    #line 287 
    case (u32)10: 
                  #line 287 
    ;
    #line 288 
    if ((lbs_debug & 16384U) != 0U) {
      #line 288 
      char *tmp_19;
      #line 288 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 288 
                                                               tmp_19 = (char *)" (INT)"; else 
                                                                    #line 288 
                                                                    tmp_19 = (char *)"";
      #line 288 
      printk((char *)"\001",tmp_19);
    }
    #line 290 
    if (priv->psstate == 0U) {
      #line 291 
      if ((lbs_debug & 16384U) != 0U) {
        #line 291 
        char *tmp_21;
        #line 291 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 291 
                                                                 tmp_21 = (char *)" (INT)"; else 
                                                                    #line 291 
                                                                    tmp_21 = (char *)"";
        #line 291 
        printk((char *)"\001",tmp_21);
      }
      #line 293 
      break;
    }
    #line 296 
    priv->psstate = 1U;
    #line 298 
    if ((unsigned int)priv->needtowakeup != 0U) {
      #line 305 
      if ((lbs_debug & 16384U) != 0U) {
        #line 305 
        char *tmp_23;
        #line 305 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 305 
                                                                 tmp_23 = (char *)" (INT)"; else 
                                                                    #line 305 
                                                                    tmp_23 = (char *)"";
        #line 305 
        printk((char *)"\001",tmp_23);
      }
      #line 306 
      lbs_set_ps_mode(priv,(unsigned short)49,(_Bool)0);
    }
    #line 308 
    break;
    #line 310 
    case (u32)14: 
                  #line 310 
    ;
    #line 311 
    if ((lbs_debug & 16384U) != 0U) {
      #line 311 
      char *tmp_25;
      #line 311 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 311 
                                                               tmp_25 = (char *)" (INT)"; else 
                                                                    #line 311 
                                                                    tmp_25 = (char *)"";
      #line 311 
      printk((char *)"\001",tmp_25);
    }
    #line 312 
    lbs_send_mic_failureevent(priv,event);
    #line 313 
    break;
    #line 315 
    case (u32)13: 
                  #line 315 
    ;
    #line 316 
    if ((lbs_debug & 16384U) != 0U) {
      #line 316 
      char *tmp_27;
      #line 316 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 316 
                                                               tmp_27 = (char *)" (INT)"; else 
                                                                    #line 316 
                                                                    tmp_27 = (char *)"";
      #line 316 
      printk((char *)"\001",tmp_27);
    }
    #line 317 
    lbs_send_mic_failureevent(priv,event);
    #line 318 
    break;
    #line 320 
    case (u32)6: 
                 #line 320 
    ;
    #line 321 
    if ((lbs_debug & 16384U) != 0U) {
      #line 321 
      char *tmp_29;
      #line 321 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 321 
                                                               tmp_29 = (char *)" (INT)"; else 
                                                                    #line 321 
                                                                    tmp_29 = (char *)"";
      #line 321 
      printk((char *)"\001",tmp_29);
    }
    #line 322 
    break;
    #line 323 
    case (u32)7: 
                 #line 323 
    ;
    #line 324 
    if ((lbs_debug & 16384U) != 0U) {
      #line 324 
      char *tmp_31;
      #line 324 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 324 
                                                               tmp_31 = (char *)" (INT)"; else 
                                                                    #line 324 
                                                                    tmp_31 = (char *)"";
      #line 324 
      printk((char *)"\001",tmp_31);
    }
    #line 325 
    break;
    #line 326 
    case (u32)17: 
                  #line 326 
    ;
    #line 327 
    if ((lbs_debug & 16384U) != 0U) {
      #line 327 
      char *tmp_33;
      #line 327 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 327 
                                                               tmp_33 = (char *)" (INT)"; else 
                                                                    #line 327 
                                                                    tmp_33 = (char *)"";
      #line 327 
      printk((char *)"\001",tmp_33);
    }
    #line 328 
    break;
    #line 329 
    case (u32)25: 
                  #line 329 
    ;
    #line 330 
    netdev_alert(priv->dev,(char *)"EVENT: rssi low\n");
    #line 331 
    break;
    #line 332 
    case (u32)26: 
                  #line 332 
    ;
    #line 333 
    netdev_alert(priv->dev,(char *)"EVENT: snr low\n");
    #line 334 
    break;
    #line 335 
    case (u32)27: 
                  #line 335 
    ;
    #line 336 
    netdev_alert(priv->dev,(char *)"EVENT: max fail\n");
    #line 337 
    break;
    #line 338 
    case (u32)28: 
                  #line 338 
    ;
    #line 339 
    netdev_alert(priv->dev,(char *)"EVENT: rssi high\n");
    #line 340 
    break;
    #line 341 
    case (u32)29: 
                  #line 341 
    ;
    #line 342 
    netdev_alert(priv->dev,(char *)"EVENT: snr high\n");
    #line 343 
    break;
    #line 345 
    case (u32)35: 
                  #line 345 
    ;
    #line 347 
    netdev_info(priv->dev,(char *)"EVENT: MESH_AUTO_STARTED (ignoring)\n");
    #line 348 
    break;
    #line 350 
    default: 
             #line 350 
    ;
    #line 351 
    netdev_alert(priv->dev,(char *)"EVENT: unknown event id %d\n",event);
    #line 352 
    break;
  }
  #line 355 
  return ret;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmdresp.i.aux"
#line 97 
int emg_del_timer(struct timer_list *arg0);
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmdresp.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr)
{
  #line 127 
  ldv_set_bit(nr,addr);
  #line 128 
  return;
}

#line 662  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmdresp.i.aux"
static void cif___ldv_spin_lock_driver_lock_of_lbs_private(spinlock_t *lock)
{
  #line 665 
  ldv_spin_model_lock((char *)"driver_lock_of_lbs_private");
  #line 667 
  __ldv_spin_lock(lock);
  #line 668 
  return;
}

#line 671  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmdresp.i.aux"
static void cif_spin_unlock_irqrestore_driver_lock_of_lbs_private(spinlock_t *lock, unsigned long flags)
{
  #line 674 
  ldv_spin_model_unlock((char *)"driver_lock_of_lbs_private");
  #line 676 
  spin_unlock_irqrestore(lock,flags);
  #line 677 
  return;
}

#line 680  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmdresp.i.aux"
static void cif_mutex_lock_lock_of_lbs_private(struct mutex *lock)
{
  #line 683 
  ldv_mutex_model_lock(lock,(char *)"lock_of_lbs_private");
  #line 684 
  return;
}

#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmdresp.i.aux"
static int cif_del_timer(struct timer_list *timer)
{
  #line 691 
  return emg_del_timer(timer);
}

#line 695  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmdresp.i.aux"
static void cif_mutex_unlock_lock_of_lbs_private(struct mutex *lock)
{
  #line 698 
  ldv_mutex_model_unlock(lock,(char *)"lock_of_lbs_private");
  #line 699 
  return;
}

/* compiler builtin: 
   void __builtin_va_start(__builtin_va_list);   */
#line 16  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
#line 16 
struct task_struct *ldv_get_current(void);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_set_bit_2(long nr, unsigned long *addr);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_0(struct list_head *head)
{
  #line 269 
  union __anonunion___u_4517 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 63 
char *strcpy(char *, char *);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 13 
void __xchg_wrong_size(void);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 233  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void *ERR_PTR_0(long error);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 240  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static long PTR_ERR_0(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 247  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static bool IS_ERR_0(void *ptr);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 660  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device(spinlock_t *lock);
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_irq_0(spinlock_t *lock)
{
  #line 363 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_25.rlock);
  #line 364 
  return;
}

#line 365 
#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_irq_driver_lock_of_lbs_private_0(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 678  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device(spinlock_t *lock);
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irq_0(spinlock_t *lock)
{
  #line 388 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_25.rlock);
  #line 389 
  return;
}

#line 390 
#line 696  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_irq_driver_lock_of_lbs_private_0(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 714  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_0(spinlock_t *lock, unsigned long flags);
#line 35 
#line 705 
static void cif___ldv_spin_lock_driver_lock_of_lbs_private_0(spinlock_t *lock);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 17 
int default_wake_function(struct wait_queue_entry *, unsigned int, int, void *);
#line 61 
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
__inline static void init_waitqueue_entry(struct wait_queue_entry *wq_entry, struct task_struct *p)
{
  #line 81 
  wq_entry->flags = 0U;
  #line 82 
  wq_entry->private = (void *)p;
  #line 83 
  wq_entry->func = & default_wake_function;
  #line 84 
  return;
}

#line 163 
#line 163 
void add_wait_queue(struct wait_queue_head *, struct wait_queue_entry *);
#line 165 
#line 165 
void remove_wait_queue(struct wait_queue_head *, struct wait_queue_entry *);
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 731  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif_del_timer_0(struct timer_list *timer);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 747  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 723  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 554 
#line 739  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 224 
void schedule(void);
#line 1688 
#line 1688 
int wake_up_process(struct task_struct *);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
#line 763  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static struct task_struct *cif_kthread_create_on_node(int (*threadfn)(void *), void *data, int node, char *namefmt , ...);
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
#line 55 
int kthread_stop(struct task_struct *);
#line 56 
#line 56 
bool kthread_should_stop(void);
#line 2679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 774  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_free_netdev_0(struct net_device *dev);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue_2(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_2(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_queue_2(struct net_device *dev)
{
  #line 3168 
  netif_tx_stop_queue_2(netdev_get_tx_queue(dev,0U));
  #line 3169 
  return;
}

#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 4092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_lock_bh(struct net_device *dev)
{
  #line 4094 
  cif_spin_lock_bh_addr_list_lock_of_net_device(& dev->addr_list_lock);
  #line 4095 
  return;
}

#line 4102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_unlock_bh(struct net_device *dev)
{
  #line 4104 
  cif_spin_unlock_bh_addr_list_lock_of_net_device(& dev->addr_list_lock);
  #line 4105 
  return;
}

#line 4123 
#line 755  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static struct net_device *cif_alloc_netdev_mqs_0(int sizeof_priv, char *name, unsigned char name_assign_type, void (*setup)(struct net_device *), unsigned int txqs, unsigned int rxqs);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 782  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_unregister_netdev_0(struct net_device *dev);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 47 
int eth_validate_addr(struct net_device *);
#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_broadcast_addr(u8 *addr)
{
  #line 240 
  memset((void *)addr,255,6UL);
  #line 241 
  return;
}

#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kfifo.h"
__inline static unsigned int __kfifo_uint_must_check_helper(unsigned int val)
{
  #line 165 
  return val;
}

#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kfifo.h"
__inline static int __kfifo_int_must_check_helper(int val)
{
  #line 171 
  return val;
}

#line 758 
#line 758 
int __kfifo_alloc(struct __kfifo *, unsigned int, size_t, gfp_t);
#line 761 
#line 761 
void __kfifo_free(struct __kfifo *);
#line 766 
#line 766 
unsigned int __kfifo_in(struct __kfifo *, void *, unsigned int);
#line 769 
#line 769 
unsigned int __kfifo_out(struct __kfifo *, void *, unsigned int);
#line 5009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static void *wdev_priv(struct wireless_dev *wdev)
{
  #line 5011 
  if ((long)(wdev == (struct wireless_dev *)0) != 0L) {
    #line 5012 
    ldv_inline_asm();
    #line 5013 
    ldv_inline_asm();
    #line 5014 
    ldv_inline_asm();
    #line 5011 
    ;
  }
  #line 5012 
  return wiphy_priv(wdev->wiphy);
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
unsigned int lbs_debug;
#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/defs.h"
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
u16 lbs_region_code_to_index[6U];
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
struct lbs_private *lbs_add_card(void *card, struct device *dmdev);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 987  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
void lbs_remove_card(struct lbs_private *priv);
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 1046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
int lbs_start_card(struct lbs_private *priv);
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
void lbs_stop_card(struct lbs_private *priv);
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
void lbs_host_to_card_done(struct lbs_private *priv);
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 671  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
int lbs_suspend(struct lbs_private *priv);
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
int lbs_resume(struct lbs_private *priv);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 1105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
void lbs_queue_event(struct lbs_private *priv, u32 event);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 1122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
void lbs_notify_command_response(struct lbs_private *priv, u8 resp_idx);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 806  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
int lbs_enter_auto_deep_sleep(struct lbs_private *priv);
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
int lbs_exit_auto_deep_sleep(struct lbs_private *priv);
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
u8 lbs_data_rate_to_fw_index(u32 rate);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 81 
void lbs_wait_for_firmware_load(struct lbs_private *priv);
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
struct cmd_confirm_sleep confirm_sleep;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.h"
#line 59 
int lbs_allocate_cmd_buffer(struct lbs_private *priv);
#line 60 
#line 60 
int lbs_free_cmd_buffer(struct lbs_private *priv);
#line 62 
#line 62 
int lbs_execute_next_command(struct lbs_private *priv);
#line 65 
#line 65 
void lbs_complete_command(struct lbs_private *priv, struct cmd_ctrl_node *cmd, int result);
#line 84 
#line 84 
int lbs_update_hw_spec(struct lbs_private *priv);
#line 88 
#line 88 
int lbs_update_channel(struct lbs_private *priv);
#line 101 
#line 101 
int lbs_set_mac_control_sync(struct lbs_private *priv);
#line 103 
#line 103 
int lbs_get_tx_power(struct lbs_private *priv, s16 *curlevel, s16 *minlevel, s16 *maxlevel);
#line 106 
#line 106 
int lbs_set_snmp_mib(struct lbs_private *priv, u32 oid, u16 val);
#line 126 
#line 126 
int lbs_set_deep_sleep(struct lbs_private *priv, int deep_sleep);
#line 130 
#line 130 
int lbs_set_monitor_mode(struct lbs_private *priv, int enable);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
char lbs_driver_version[24U] = {(char)'C', (char)'O', (char)'M', (char)'M', (char)'-', (char)'U', (char)'S', (char)'B', (char)'8', (char)'3', (char)'8', (char)'8', (char)'-'};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
unsigned int lbs_disablemesh;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
u16 lbs_region_code_to_index[6U] = {(unsigned short)16U, (unsigned short)32U, (unsigned short)48U, (unsigned short)49U, (unsigned short)50U, (unsigned short)64U};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
static u8 fw_data_rates[14U] = {(unsigned char)2U, (unsigned char)4U, (unsigned char)11U, (unsigned char)22U, [5] = (unsigned char)12U, (unsigned char)18U, (unsigned char)24U, (unsigned char)36U, (unsigned char)48U, (unsigned char)72U, (unsigned char)96U, (unsigned char)108U};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
u32 lbs_fw_index_to_data_rate(u8 idx)
{
  #line 78 
  if ((unsigned int)idx > 13U) 
                               #line 79 
                               idx = (unsigned char)0U;
  #line 80 
  return (unsigned int)fw_data_rates[(int)idx];
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
u8 lbs_data_rate_to_fw_index(u32 rate)
{
  #line 91 
  u8 i;
  #line 93 
  if (rate == 0U) 
                  #line 94 
                  return (unsigned char)0U;
  #line 96 
  i = (unsigned char)0U;
  #line 96 
  while ((unsigned int)i <= 13U) {
    #line 97 
    if ((unsigned int)fw_data_rates[(int)i] == rate) 
                                                     #line 98 
                                                     return i;
    #line 96 
    i = (u8)((int)i + 1);
  }
  #line 100 
  return (unsigned char)0U;
}

#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
int lbs_set_iface_type(struct lbs_private *priv, enum nl80211_iftype type)
{
  #line 105 
  int ret = 0;
  #line 107 
  switch ((unsigned int)type) {
    #line 108 
    case (unsigned int)6: 
                          #line 108 
    ;
    #line 109 
    ret = lbs_set_monitor_mode(priv,1);
    #line 110 
    break;
    #line 111 
    case (unsigned int)2: 
                          #line 111 
    ;
    #line 112 
    if ((priv->wdev)->iftype == (unsigned int)NL80211_IFTYPE_MONITOR) 
      #line 113 
      ret = lbs_set_monitor_mode(priv,0);
    #line 114 
    if (ret == 0) 
                  #line 115 
                  ret = lbs_set_snmp_mib(priv,0U,(unsigned short)1);
    #line 116 
    break;
    #line 117 
    case (unsigned int)1: 
                          #line 117 
    ;
    #line 118 
    if ((priv->wdev)->iftype == (unsigned int)NL80211_IFTYPE_MONITOR) 
      #line 119 
      ret = lbs_set_monitor_mode(priv,0);
    #line 120 
    if (ret == 0) 
                  #line 121 
                  ret = lbs_set_snmp_mib(priv,0U,(unsigned short)2);
    #line 122 
    break;
    #line 123 
    default: 
             #line 123 
    ;
    #line 124 
    ret = -524;
  }
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
int lbs_start_iface(struct lbs_private *priv)
{
  #line 144 
  uint16_t __sz;
  #line 131 
  struct cmd_ds_802_11_mac_address cmd;
  #line 132 
  int ret;
  #line 134 
  if (priv->power_restore != (int (*)(struct lbs_private *))0) {
    #line 135 
    ret = (*(priv->power_restore))(priv);
    #line 136 
    if (ret != 0) 
                  #line 137 
                  return ret;
  }
  #line 140 
  cmd.hdr.size = (unsigned short)16U;
  #line 141 
  cmd.action = (unsigned short)1U;
  #line 142 
  memcpy((void *)(& cmd.macadd),(void *)(& priv->current_addr),6UL);
  #line 144 
  __sz = cmd.hdr.size;
  #line 144 
  cmd.hdr.size = (unsigned short)16U;
  #line 144 
  ret = __lbs_cmd(priv,(unsigned short)77,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 145 
  if (ret != 0) {
    #line 146 
    if ((lbs_debug & 8U) != 0U) {
      #line 146 
      char *tmp_2;
      #line 146 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 146 
                                                               tmp_2 = (char *)" (INT)"; else 
                                                                    #line 146 
                                                                    tmp_2 = (char *)"";
      #line 146 
      printk((char *)"\001",tmp_2);
    }
    #line 147 
    goto err;
  }
  #line 150 
  ret = lbs_set_iface_type(priv,(priv->wdev)->iftype);
  #line 151 
  if (ret != 0) {
    #line 152 
    if ((lbs_debug & 8U) != 0U) {
      #line 152 
      char *tmp_4;
      #line 152 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 152 
                                                               tmp_4 = (char *)" (INT)"; else 
                                                                    #line 152 
                                                                    tmp_4 = (char *)"";
      #line 152 
      printk((char *)"\001",tmp_4);
    }
    #line 153 
    goto err;
  }
  #line 156 
  ret = lbs_set_11d_domain_info(priv);
  #line 157 
  if (ret != 0) {
    #line 158 
    if ((lbs_debug & 8U) != 0U) {
      #line 158 
      char *tmp_6;
      #line 158 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 158 
                                                               tmp_6 = (char *)" (INT)"; else 
                                                                    #line 158 
                                                                    tmp_6 = (char *)"";
      #line 158 
      printk((char *)"\001",tmp_6);
    }
    #line 159 
    goto err;
  }
  #line 162 
  lbs_update_channel(priv);
  #line 164 
  priv->iface_running = (_Bool)1;
  #line 165 
  return 0;
  #line 167 
  err: 
       #line 167 
  ;
  #line 168 
  if (priv->power_save != (int (*)(struct lbs_private *))0) 
                                                            #line 169 
                                                            (*(priv->power_save))(priv);
  #line 170 
  return ret;
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
static int lbs_dev_open(struct net_device *dev)
{
  #line 181 
  struct lbs_private *priv = (struct lbs_private *)dev->__anonCompField_net_device_159.ml_priv;
  #line 182 
  int ret = 0;
  #line 184 
  if (! priv->iface_running) {
    #line 185 
    ret = lbs_start_iface(priv);
    #line 186 
    if (ret != 0) 
                  #line 187 
                  goto out;
  }
  #line 190 
  cif_spin_lock_irq_driver_lock_of_lbs_private_0(& priv->driver_lock);
  #line 192 
  netif_carrier_off(dev);
  #line 194 
  if (priv->tx_pending_len == 0) 
                                 #line 195 
                                 netif_wake_queue(dev);
  #line 197 
  cif_spin_unlock_irq_driver_lock_of_lbs_private_0(& priv->driver_lock);
  #line 199 
  out: 
       #line 199 
  ;
  #line 200 
  return ret;
}

#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
static bool lbs_command_queue_empty(struct lbs_private *priv)
{
  #line 205 
  unsigned long flags;
  #line 206 
  bool ret;
  #line 208 
  int tmp_0;
  #line 207 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_0(& priv->driver_lock);
  #line 208 
  if (priv->cur_cmd == (struct cmd_ctrl_node *)0) {
    #line 208 
    if (list_empty_0(& priv->cmdpendingq) != 0) 
                                                #line 208 
                                                tmp_0 = 1; else 
                                                                #line 208 
                                                                tmp_0 = 0;
  }
  else 
       #line 208 
       tmp_0 = 0;
  #line 208 
  ret = (_Bool)(tmp_0 != 0);
  #line 209 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_0(& priv->driver_lock,flags);
  #line 210 
  return ret;
}

#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
int lbs_stop_iface(struct lbs_private *priv)
{
  #line 215 
  unsigned long flags;
  #line 216 
  int ret = 0;
  #line 218 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_0(& priv->driver_lock);
  #line 219 
  priv->iface_running = (_Bool)0;
  #line 220 
  kfree_skb(priv->currenttxskb);
  #line 221 
  priv->currenttxskb = (struct sk_buff *)0;
  #line 222 
  priv->tx_pending_len = 0;
  #line 223 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_0(& priv->driver_lock,flags);
  #line 225 
  cancel_work_sync(& priv->mcast_work);
  #line 226 
  cif_del_timer_sync(& priv->tx_lockup_timer);
  #line 229 
  if ((lbs_debug & 4U) != 0U) {
    #line 229 
    char *tmp_0;
    #line 229 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 229 
                                                             tmp_0 = (char *)" (INT)"; else 
                                                                    #line 229 
                                                                    tmp_0 = (char *)"";
    #line 229 
    printk((char *)"\001",tmp_0);
  }
  #line 230 
  while (1) {
    {
      #line 230 
      __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c",230,0);
      #line 230 
      if ((int)lbs_command_queue_empty(priv) != 0) 
                                                   #line 230 
                                                   break;
      {
        #line 230 
        struct wait_queue_entry __wq_entry;
        #line 230 
        long __ret = 0L;
        #line 230 
        init_wait_entry(& __wq_entry,0);
        #line 230 
        while (1) {
          #line 230 
          long __int = prepare_to_wait_event(& priv->waitq,& __wq_entry,2);
          #line 230 
          if ((int)lbs_command_queue_empty(priv) != 0) 
                                                       #line 230 
                                                       break;
          #line 230 
          schedule();
        }
        #line 230 
        finish_wait(& priv->waitq,& __wq_entry);
        #line 230 
        __out_0: 
                 #line 230 
        ;
        #line 230 
        long tmp_4 = __ret;
      }
    }
    #line 230 
    break;
  }
  #line 231 
  if ((lbs_debug & 4U) != 0U) {
    #line 231 
    char *tmp_5;
    #line 231 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 231 
                                                             tmp_5 = (char *)" (INT)"; else 
                                                                    #line 231 
                                                                    tmp_5 = (char *)"";
    #line 231 
    printk((char *)"\001",tmp_5);
  }
  #line 233 
  if (priv->power_save != (int (*)(struct lbs_private *))0) 
                                                            #line 234 
                                                            ret = (*(priv->power_save))(priv);
  #line 236 
  return ret;
}

#line 245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
static int lbs_eth_stop(struct net_device *dev)
{
  #line 247 
  struct lbs_private *priv = (struct lbs_private *)dev->__anonCompField_net_device_159.ml_priv;
  #line 249 
  if (priv->connect_status == 0U) 
                                  #line 250 
                                  lbs_disconnect(priv,(unsigned short)3);
  #line 252 
  cif_spin_lock_irq_driver_lock_of_lbs_private_0(& priv->driver_lock);
  #line 253 
  netif_stop_queue_2(dev);
  #line 254 
  cif_spin_unlock_irq_driver_lock_of_lbs_private_0(& priv->driver_lock);
  #line 256 
  lbs_update_mcast(priv);
  #line 257 
  cancel_delayed_work_sync(& priv->scan_work);
  #line 258 
  if (priv->scan_req != (struct cfg80211_scan_request *)0) 
                                                           #line 259 
                                                           lbs_scan_done(priv);
  #line 261 
  netif_carrier_off(priv->dev);
  #line 263 
  if (lbs_iface_active(priv) == 0) 
                                   #line 264 
                                   lbs_stop_iface(priv);
  #line 266 
  return 0;
}

#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
void lbs_host_to_card_done(struct lbs_private *priv)
{
  #line 271 
  unsigned long flags;
  #line 273 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_0(& priv->driver_lock);
  #line 274 
  cif_del_timer_0(& priv->tx_lockup_timer);
  #line 276 
  priv->dnld_sent = (unsigned char)0U;
  #line 279 
  if (priv->cur_cmd == (struct cmd_ctrl_node *)0 || priv->tx_pending_len > 0) 
    #line 280 
    if (priv->wakeup_dev_required == 0) 
                                        #line 281 
                                        __wake_up(& priv->waitq,3U,1,(void *)0);
  #line 284 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_0(& priv->driver_lock,flags);
  #line 285 
  return;
}

#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
int lbs_set_mac_address(struct net_device *dev, void *addr)
{
  #line 290 
  int ret = 0;
  #line 291 
  struct lbs_private *priv = (struct lbs_private *)dev->__anonCompField_net_device_159.ml_priv;
  #line 292 
  struct sockaddr *phwaddr = (struct sockaddr *)addr;
  #line 298 
  if (lbs_iface_active(priv) != 0) 
                                   #line 299 
                                   return -16;
  #line 302 
  dev = priv->dev;
  #line 304 
  memcpy((void *)(& priv->current_addr),(void *)(& phwaddr->sa_data),6UL);
  #line 305 
  memcpy((void *)dev->dev_addr,(void *)(& phwaddr->sa_data),6UL);
  #line 306 
  if (priv->mesh_dev != (struct net_device *)0) 
                                                #line 307 
                                                memcpy((void *)(priv->mesh_dev)->dev_addr,(void *)(& phwaddr->sa_data),6UL);
  #line 309 
  return ret;
}

#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
__inline static int mac_in_list(unsigned char *list, int list_len, unsigned char *mac)
{
  #line 316 
  while (list_len != 0) {
    #line 317 
    if (memcmp((void *)list,(void *)mac,6UL) == 0) 
                                                   #line 318 
                                                   return 1;
    #line 319 
    list += 6U;
    #line 320 
    list_len --;
  }
  #line 322 
  return 0;
}

#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
static int lbs_add_mcast_addrs(struct cmd_ds_mac_multicast_adr *cmd, struct net_device *dev, int nr_addrs)
{
  #line 338 
  void *__mptr;
  #line 330 
  struct netdev_hw_addr *ha;
  #line 331 
  int cnt;
  #line 329 
  int i = nr_addrs;
  #line 333 
  if ((dev->flags & 4097U) != 4097U) 
                                     #line 334 
                                     return nr_addrs;
  #line 336 
  netif_addr_lock_bh(dev);
  #line 337 
  cnt = dev->mc.count;
  #line 338 
  __mptr = (void *)dev->mc.list.next;
  #line 338 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 338 
  while (& ha->list != & dev->mc.list) {
    #line 338 
    void *__mptr_0;
    {
      #line 339 
      if (mac_in_list((unsigned char *)(& cmd->maclist),nr_addrs,
                    (unsigned char *)(& ha->addr)) != 0) {
        #line 340 
        if ((lbs_debug & 8U) != 0U) {
          #line 340 
          char *tmp_2;
          #line 340 
          ;
          #line 340 
          ;
          #line 340 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 340 
                                                                   tmp_2 = (char *)" (INT)"; else 
                                                                    #line 340 
                                                                    tmp_2 = (char *)"";
          #line 340 
          printk((char *)"\001",tmp_2,(char *)(& dev->name),(unsigned char *)(& ha->addr));
        }
        #line 342 
        cnt --;
        #line 343 
        goto __Cont;
      }
      #line 346 
      if (i == 32) 
                   #line 347 
                   break;
      #line 348 
      memcpy((void *)(& cmd->maclist[i * 6]),(void *)(& ha->addr),6UL);
      #line 349 
      if ((lbs_debug & 8U) != 0U) {
        #line 349 
        char *tmp_5;
        #line 349 
        ;
        #line 349 
        ;
        #line 349 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 349 
                                                                 tmp_5 = (char *)" (INT)"; else 
                                                                    #line 349 
                                                                    tmp_5 = (char *)"";
        #line 349 
        printk((char *)"\001",tmp_5,(char *)(& dev->name),(unsigned char *)(& ha->addr));
      }
      #line 351 
      i ++;
      #line 352 
      cnt --;
    }
    #line 338 
    __Cont: { /* sequence */
              #line 338 
              __mptr_0 = (void *)ha->list.next;
              #line 338 
              ha = ((struct netdev_hw_addr *)__mptr_0);
            }
  }
  #line 354 
  netif_addr_unlock_bh(dev);
  #line 355 
  if (cnt != 0) 
                #line 356 
                return -75;
  #line 358 
  return i;
}

#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
void lbs_update_mcast(struct lbs_private *priv)
{
  #line 363 
  struct cmd_ds_mac_multicast_adr mcast_cmd;
  #line 365 
  int nr_addrs;
  #line 364 
  int dev_flags = 0;
  #line 366 
  int old_mac_control = (int)priv->mac_control;
  #line 368 
  if ((int)netif_running(priv->dev) != 0) 
                                          #line 369 
                                          dev_flags = (int)((priv->dev)->flags | (unsigned int)dev_flags);
  #line 370 
  if (priv->mesh_dev != (struct net_device *)0) {
    #line 370 
    if ((int)netif_running(priv->mesh_dev) != 0) 
                                                 #line 371 
                                                 dev_flags = (int)((priv->mesh_dev)->flags | (unsigned int)dev_flags);
  }
  #line 373 
  if ((dev_flags & 256) != 0) {
    #line 374 
    priv->mac_control = (unsigned short)((unsigned int)priv->mac_control | 128U);
    #line 375 
    priv->mac_control = (unsigned short)((unsigned int)priv->mac_control & 65247U);
    #line 377 
    goto out_set_mac_control;
  }
  else 
    #line 378 
    if ((dev_flags & 512) != 0) {
      #line 379 
      do_allmulti: 
                   #line 379 
      ;
      #line 380 
      priv->mac_control = (unsigned short)((unsigned int)priv->mac_control | 256U);
      #line 381 
      priv->mac_control = (unsigned short)((unsigned int)priv->mac_control & 65375U);
      #line 383 
      goto out_set_mac_control;
    }
  #line 387 
  nr_addrs = lbs_add_mcast_addrs(& mcast_cmd,priv->dev,0);
  #line 388 
  if (nr_addrs >= 0 && priv->mesh_dev != (struct net_device *)0) 
                                                                 #line 389 
                                                                 nr_addrs = lbs_add_mcast_addrs(& mcast_cmd,priv->mesh_dev,nr_addrs);
  #line 390 
  if (nr_addrs < 0) 
                    #line 391 
                    goto do_allmulti;
  #line 393 
  if (nr_addrs != 0) {
    #line 394 
    int size = (int)((unsigned int)(nr_addrs * 6) + 12U);
    #line 397 
    mcast_cmd.action = (unsigned short)1U;
    #line 398 
    mcast_cmd.hdr.size = (unsigned short)size;
    #line 399 
    mcast_cmd.nr_of_adrs = (unsigned short)nr_addrs;
    #line 401 
    lbs_cmd_async(priv,(unsigned short)16,& mcast_cmd.hdr,size);
    #line 403 
    priv->mac_control = (unsigned short)((unsigned int)priv->mac_control | 32U);
  }
  else 
       #line 405 
       priv->mac_control = (unsigned short)((unsigned int)priv->mac_control & 65503U);
  #line 407 
  priv->mac_control = (unsigned short)((unsigned int)priv->mac_control & 65151U);
  #line 409 
  out_set_mac_control: 
                       #line 409 
  ;
  #line 410 
  if ((int)priv->mac_control != old_mac_control) 
                                                 #line 411 
                                                 lbs_set_mac_control(priv);
  #line 412 
  return;
}

#line 414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
static void lbs_set_mcast_worker(struct work_struct *work)
{
  #line 416 
  void *__mptr;
  #line 416 
  __mptr = (void *)work;
  #line 416 
  struct lbs_private *priv = ((struct lbs_private *)(__mptr + 18446744073709551600U));
  #line 417 
  lbs_update_mcast(priv);
  #line 418 
  return;
}

#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
void lbs_set_multicast_list(struct net_device *dev)
{
  #line 422 
  struct lbs_private *priv = (struct lbs_private *)dev->__anonCompField_net_device_159.ml_priv;
  #line 424 
  cif_schedule_work(& priv->mcast_work);
  #line 425 
  return;
}

#line 435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
static int lbs_thread(void *data)
{
  #line 439 
  wait_queue_entry_t wait;
  #line 437 
  struct net_device *dev = (struct net_device *)data;
  #line 438 
  struct lbs_private *priv = (struct lbs_private *)dev->__anonCompField_net_device_159.ml_priv;
  #line 441 
  init_waitqueue_entry(& wait,ldv_get_current());
  #line 443 
  while (1) {
    {
      #line 444 
      int shouldsleep;
      #line 445 
      u8 resp_idx;
      #line 447 
      if ((lbs_debug & 1048576U) != 0U) {
        #line 447 
        char *tmp_1;
        #line 447 
        ;
        #line 447 
        ;
        #line 447 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 447 
                                                                 tmp_1 = (char *)" (INT)"; else 
                                                                    #line 447 
                                                                    tmp_1 = (char *)"";
        #line 447 
        printk((char *)"\001",tmp_1,priv->currenttxskb,(int)priv->dnld_sent);
      }
      #line 450 
      add_wait_queue(& priv->waitq,& wait);
      {
        {
          #line 451 
          int __ret_warn_on = 0;
          #line 451 
          if ((long)(__ret_warn_on != 0) != 0L) {
            #line 452 
            ldv_inline_asm();
            #line 453 
            ldv_inline_asm();
          }
          #line 451 
          long tmp_2 = (long)(__ret_warn_on != 0);
        }
        #line 451 
        __here_0: 
                  #line 451 
        ;
        #line 451 
        ldv_get_current()->task_state_change = (unsigned long)((void *)0);
        {
          #line 451 
          long *__ai_ptr = & ldv_get_current()->state;
          #line 451 
          kasan_check_read((void *)__ai_ptr,8U);
          {
            #line 451 
            long __ret = 1L;
            #line 451 
            switch (8UL) {
              #line 451 
              case (unsigned long)1: 
                                     #line 451 
              ;
              #line 452 
              ldv_inline_asm();
              #line 451 
              break;
              #line 451 
              case (unsigned long)2: 
                                     #line 451 
              ;
              #line 452 
              ldv_inline_asm();
              #line 451 
              break;
              #line 451 
              case (unsigned long)4: 
                                     #line 451 
              ;
              #line 452 
              ldv_inline_asm();
              #line 451 
              break;
              #line 451 
              case (unsigned long)8: 
                                     #line 451 
              ;
              #line 452 
              ldv_inline_asm();
              #line 451 
              break;
              #line 451 
              default: 
                       #line 451 
              ;
              #line 451 
              __xchg_wrong_size();
            }
            #line 451 
            long tmp_4 = __ret;
          }
        }
      }
      #line 452 
      cif_spin_lock_irq_driver_lock_of_lbs_private_0(& priv->driver_lock);
      #line 454 
      if ((int)kthread_should_stop() != 0) 
                                           #line 455 
                                           shouldsleep = 0;
      else 
        #line 456 
        if ((unsigned int)priv->surpriseremoved != 0U) 
                                                       #line 457 
                                                       shouldsleep = 1;
        else 
          #line 458 
          if (priv->psstate == 3U) 
                                   #line 459 
                                   shouldsleep = 1;
          else 
            #line 460 
            if (priv->cmd_timed_out != 0) 
                                          #line 461 
                                          shouldsleep = 0;
            else 
              #line 462 
              if ((unsigned int)priv->fw_ready == 0U) 
                                                      #line 463 
                                                      shouldsleep = 1;
              else 
                #line 464 
                if ((unsigned int)priv->dnld_sent != 0U) 
                                                         #line 465 
                                                         shouldsleep = 1;
                else 
                  #line 466 
                  if (priv->tx_pending_len > 0) 
                                                #line 467 
                                                shouldsleep = 0;
                  else 
                    #line 468 
                    if (priv->resp_len[(int)priv->resp_idx] != 0U) 
                                                                   #line 469 
                                                                   shouldsleep = 0;
                    else 
                      #line 470 
                      if (priv->cur_cmd != (struct cmd_ctrl_node *)0) 
                        #line 471 
                        shouldsleep = 1;
                      else {
                        #line 472 
                        if (list_empty_0(& priv->cmdpendingq) == 0) {
                          #line 472 
                          if (priv->wakeup_dev_required == 0) 
                                                              #line 474 
                                                              shouldsleep = 0; else 
                                                                    #line 472 
                                                                    goto _LAND;
                        }
                        else {
                          #line 475 
                          struct kfifo *__tmpl;
                          #line 472 
                          _LAND: {
                                   #line 475 
                                   __tmpl = & priv->event_fifo;
                                   }
                          #line 475 
                          if ((__tmpl->__anonCompField_kfifo_165.kfifo.in - __tmpl->__anonCompField_kfifo_165.kfifo.out) != 0U) 
                            #line 476 
                            shouldsleep = 0; else 
                                                  #line 478 
                                                  shouldsleep = 1;
                        }
                      }
      #line 480 
      if (shouldsleep != 0) {
        #line 481 
        if ((lbs_debug & 1048576U) != 0U) {
          #line 481 
          char *tmp_8;
          #line 481 
          ;
          #line 481 
          ;
          #line 481 
          ;
          #line 481 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 481 
                                                                   tmp_8 = (char *)" (INT)"; else 
                                                                    #line 481 
                                                                    tmp_8 = (char *)"";
          #line 481 
          printk((char *)"\001",tmp_8,priv->connect_status,(int)priv->psmode,priv->psstate);
        }
        #line 485 
        cif_spin_unlock_irq_driver_lock_of_lbs_private_0(& priv->driver_lock);
        #line 486 
        schedule();
      }
      else 
           #line 488 
           cif_spin_unlock_irq_driver_lock_of_lbs_private_0(& priv->driver_lock);
      #line 490 
      if ((lbs_debug & 1048576U) != 0U) {
        #line 490 
        char *tmp_10;
        #line 490 
        ;
        #line 490 
        ;
        #line 490 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 490 
                                                                 tmp_10 = (char *)" (INT)"; else 
                                                                    #line 490 
                                                                    tmp_10 = (char *)"";
        #line 490 
        printk((char *)"\001",tmp_10,priv->currenttxskb,(int)priv->dnld_sent);
      }
      {
        {
          #line 493 
          int __ret_warn_on_0 = 0;
          #line 493 
          if ((long)(__ret_warn_on_0 != 0) != 0L) {
            #line 494 
            ldv_inline_asm();
            #line 495 
            ldv_inline_asm();
          }
          #line 493 
          long tmp_11 = (long)(__ret_warn_on_0 != 0);
        }
        #line 493 
        __here_1: 
                  #line 493 
        ;
        #line 493 
        ldv_get_current()->task_state_change = (unsigned long)((void *)1);
        {
          #line 493 
          long *__ai_ptr_0 = & ldv_get_current()->state;
          #line 493 
          kasan_check_read((void *)__ai_ptr_0,8U);
          {
            #line 493 
            long __ret_0 = 0L;
            #line 493 
            switch (8UL) {
              #line 493 
              case (unsigned long)1: 
                                     #line 493 
              ;
              #line 494 
              ldv_inline_asm();
              #line 493 
              break;
              #line 493 
              case (unsigned long)2: 
                                     #line 493 
              ;
              #line 494 
              ldv_inline_asm();
              #line 493 
              break;
              #line 493 
              case (unsigned long)4: 
                                     #line 493 
              ;
              #line 494 
              ldv_inline_asm();
              #line 493 
              break;
              #line 493 
              case (unsigned long)8: 
                                     #line 493 
              ;
              #line 494 
              ldv_inline_asm();
              #line 493 
              break;
              #line 493 
              default: 
                       #line 493 
              ;
              #line 493 
              __xchg_wrong_size();
            }
            #line 493 
            long tmp_13 = __ret_0;
          }
        }
      }
      #line 494 
      remove_wait_queue(& priv->waitq,& wait);
      #line 496 
      if ((lbs_debug & 1048576U) != 0U) {
        #line 496 
        char *tmp_14;
        #line 496 
        ;
        #line 496 
        ;
        #line 496 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 496 
                                                                 tmp_14 = (char *)" (INT)"; else 
                                                                    #line 496 
                                                                    tmp_14 = (char *)"";
        #line 496 
        printk((char *)"\001",tmp_14,priv->currenttxskb,(int)priv->dnld_sent);
      }
      #line 499 
      if ((int)kthread_should_stop() != 0) {
        #line 500 
        if ((lbs_debug & 1048576U) != 0U) {
          #line 500 
          char *tmp_16;
          #line 500 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 500 
                                                                   tmp_16 = (char *)" (INT)"; else 
                                                                    #line 500 
                                                                    tmp_16 = (char *)"";
          #line 500 
          printk((char *)"\001",tmp_16);
        }
        #line 501 
        break;
      }
      #line 504 
      if ((unsigned int)priv->surpriseremoved != 0U) {
        #line 505 
        if ((lbs_debug & 1048576U) != 0U) {
          #line 505 
          char *tmp_19;
          #line 505 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 505 
                                                                   tmp_19 = (char *)" (INT)"; else 
                                                                    #line 505 
                                                                    tmp_19 = (char *)"";
          #line 505 
          printk((char *)"\001",tmp_19);
        }
        #line 506 
        goto __Cont;
      }
      #line 509 
      if ((lbs_debug & 1048576U) != 0U) {
        #line 509 
        char *tmp_21;
        #line 509 
        ;
        #line 509 
        ;
        #line 509 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 509 
                                                                 tmp_21 = (char *)" (INT)"; else 
                                                                    #line 509 
                                                                    tmp_21 = (char *)"";
        #line 509 
        printk((char *)"\001",tmp_21,priv->currenttxskb,(int)priv->dnld_sent);
      }
      #line 513 
      cif_spin_lock_irq_driver_lock_of_lbs_private_0(& priv->driver_lock);
      #line 514 
      resp_idx = priv->resp_idx;
      #line 515 
      if (priv->resp_len[(int)resp_idx] != 0U) {
        #line 516 
        cif_spin_unlock_irq_driver_lock_of_lbs_private_0(& priv->driver_lock);
        #line 517 
        lbs_process_command_response(priv,(u8 *)(& priv->resp_buf[(int)resp_idx]),priv->resp_len[(int)resp_idx]);
        #line 520 
        cif_spin_lock_irq_driver_lock_of_lbs_private_0(& priv->driver_lock);
        #line 521 
        priv->resp_len[(int)resp_idx] = 0U;
      }
      #line 523 
      cif_spin_unlock_irq_driver_lock_of_lbs_private_0(& priv->driver_lock);
      #line 526 
      cif_spin_lock_irq_driver_lock_of_lbs_private_0(& priv->driver_lock);
      #line 527 
      while (1) {
        #line 527 
        struct kfifo *__tmpl_0;
        #line 527 
        __tmpl_0 = & priv->event_fifo;
        #line 527 
        if (! ((__tmpl_0->__anonCompField_kfifo_165.kfifo.in - __tmpl_0->__anonCompField_kfifo_165.kfifo.out) != 0U)) 
          #line 527 
          break;
        {
          #line 530 
          struct __kfifo *__kfifo;
          #line 530 
          void *__buf;
          #line 530 
          unsigned long __n;
          #line 528 
          u32 event;
          {
            #line 530 
            struct kfifo *__tmp = & priv->event_fifo;
            #line 530 
            __buf = (void *)(& event);
            #line 530 
            __n = 4UL;
            #line 530 
            size_t __recsize = 0UL;
            #line 530 
            __kfifo = & __tmp->__anonCompField_kfifo_165.kfifo;
            }
          #line 530 
          if (__kfifo_uint_must_check_helper(__kfifo_out(__kfifo,__buf,(unsigned int)__n)) != 4U) 
            #line 533 
            break;
          #line 534 
          cif_spin_unlock_irq_driver_lock_of_lbs_private_0(& priv->driver_lock);
          #line 535 
          lbs_process_event(priv,event);
          #line 536 
          cif_spin_lock_irq_driver_lock_of_lbs_private_0(& priv->driver_lock);
        }
      }
      #line 538 
      cif_spin_unlock_irq_driver_lock_of_lbs_private_0(& priv->driver_lock);
      #line 540 
      if (priv->wakeup_dev_required != 0) {
        #line 541 
        if ((lbs_debug & 1048576U) != 0U) {
          #line 541 
          char *tmp_27;
          #line 541 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 541 
                                                                   tmp_27 = (char *)" (INT)"; else 
                                                                    #line 541 
                                                                    tmp_27 = (char *)"";
          #line 541 
          printk((char *)"\001",tmp_27);
        }
        #line 543 
        if ((*(priv->exit_deep_sleep))(priv) != 0) 
          #line 544 
          if ((lbs_debug & 1048576U) != 0U) {
            #line 544 
            char *tmp_29;
            #line 544 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 544 
              tmp_29 = (char *)" (INT)"; else 
                                              #line 544 
                                              tmp_29 = (char *)"";
            #line 544 
            printk((char *)"\001",tmp_29);
          }
        #line 545 
        goto __Cont;
      }
      #line 549 
      if (priv->cmd_timed_out != 0 && priv->cur_cmd != (struct cmd_ctrl_node *)0) {
        #line 550 
        struct cmd_ctrl_node *cmdnode = priv->cur_cmd;
        #line 552 
        netdev_info(dev,(char *)"Timeout submitting command 0x%04x\n",(int)(cmdnode->cmdbuf)->command);
        #line 554 
        lbs_complete_command(priv,cmdnode,-110);
        #line 558 
        if (! dev->dismantle && priv->reset_card != (void (*)(struct lbs_private *))0) 
          #line 559 
          (*(priv->reset_card))(priv);
      }
      #line 561 
      priv->cmd_timed_out = 0;
      #line 563 
      if ((unsigned int)priv->fw_ready == 0U) 
                                              #line 564 
                                              goto __Cont;
      #line 567 
      if ((priv->psstate == 2U && (unsigned int)priv->dnld_sent == 0U) && priv->cur_cmd == (struct cmd_ctrl_node *)0) 
        #line 569 
        if (priv->connect_status == 0U) {
          #line 570 
          if ((lbs_debug & 1048576U) != 0U) {
            #line 570 
            char *tmp_32;
            #line 570 
            ;
            #line 570 
            ;
            #line 570 
            ;
            #line 570 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 570 
              tmp_32 = (char *)" (INT)"; else 
                                              #line 570 
                                              tmp_32 = (char *)"";
            #line 570 
            printk((char *)"\001",tmp_32,priv->currenttxskb,(int)priv->dnld_sent,priv->cur_cmd);
          }
          #line 575 
          lbs_ps_confirm_sleep(priv);
        }
        else {
          #line 582 
          priv->psstate = 1U;
          #line 583 
          netdev_alert(dev,(char *)"ignore PS_SleepConfirm in non-connected state\n");
        }
      #line 591 
      if (priv->psstate + 4294967294U <= 1U) 
                                             #line 593 
                                             goto __Cont;
      #line 595 
      if (priv->is_deep_sleep != 0) 
                                    #line 596 
                                    goto __Cont;
      #line 599 
      if ((unsigned int)priv->dnld_sent == 0U && priv->cur_cmd == (struct cmd_ctrl_node *)0) 
        #line 600 
        lbs_execute_next_command(priv);
      #line 602 
      cif_spin_lock_irq_driver_lock_of_lbs_private_0(& priv->driver_lock);
      #line 603 
      if ((unsigned int)priv->dnld_sent == 0U && priv->tx_pending_len > 0) {
        #line 604 
        int ret = (*(priv->hw_host_to_card))(priv,(unsigned char)0,
                                    (u8 *)(& priv->tx_pending_buf),
                                    (unsigned short)((int)((unsigned short)priv->tx_pending_len)));
        #line 607 
        if (ret != 0) {
          #line 608 
          if ((lbs_debug & 65536U) != 0U) {
            #line 608 
            char *tmp_35;
            #line 608 
            ;
            #line 608 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 608 
              tmp_35 = (char *)" (INT)"; else 
                                              #line 608 
                                              tmp_35 = (char *)"";
            #line 608 
            printk((char *)"\001",tmp_35,ret);
          }
          #line 609 
          priv->dnld_sent = (unsigned char)0U;
        }
        else 
             #line 611 
             cif_mod_timer(& priv->tx_lockup_timer,jiffies + 1250UL);
        #line 614 
        priv->tx_pending_len = 0;
        #line 615 
        if (priv->currenttxskb == (struct sk_buff *)0) {
          #line 618 
          if (priv->connect_status == 0U) 
                                          #line 619 
                                          netif_wake_queue(priv->dev);
          #line 620 
          if (priv->mesh_dev != (struct net_device *)0) {
            #line 620 
            if ((int)netif_running(priv->mesh_dev) != 0) 
                                                         #line 622 
                                                         netif_wake_queue(priv->mesh_dev);
          }
        }
      }
      #line 625 
      cif_spin_unlock_irq_driver_lock_of_lbs_private_0(& priv->driver_lock);
    }
    #line 443 
    __Cont: 
            #line 443 
    ;
  }
  #line 628 
  cif_del_timer_0(& priv->command_timer);
  #line 629 
  cif_del_timer_0(& priv->tx_lockup_timer);
  #line 630 
  cif_del_timer_0(& priv->auto_deepsleep_timer);
  #line 632 
  return 0;
}

#line 642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
static int lbs_setup_firmware(struct lbs_private *priv)
{
  #line 644 
  int ret = -1;
  #line 645 
  s16 curlevel = (short)0;
  #line 645 
  s16 minlevel = (short)0;
  #line 645 
  s16 maxlevel = (short)0;
  #line 648 
  eth_broadcast_addr((u8 *)(& priv->current_addr));
  #line 649 
  ret = lbs_update_hw_spec(priv);
  #line 650 
  if (ret != 0) 
                #line 651 
                goto done;
  #line 654 
  ret = lbs_get_tx_power(priv,& curlevel,& minlevel,& maxlevel);
  #line 655 
  if (ret == 0) {
    #line 656 
    priv->txpower_cur = curlevel;
    #line 657 
    priv->txpower_min = minlevel;
    #line 658 
    priv->txpower_max = maxlevel;
  }
  #line 662 
  ret = lbs_set_snmp_mib(priv,9U,(unsigned short)1);
  #line 663 
  if (ret != 0) 
                #line 664 
                goto done;
  #line 666 
  ret = lbs_set_mac_control_sync(priv);
  #line 667 
  done: 
        #line 667 
  ;
  #line 668 
  return ret;
}

#line 671  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
int lbs_suspend(struct lbs_private *priv)
{
  #line 673 
  int ret;
  #line 675 
  if (priv->is_deep_sleep != 0) {
    #line 676 
    ret = lbs_set_deep_sleep(priv,0);
    #line 677 
    if (ret != 0) {
      #line 678 
      netdev_err(priv->dev,(char *)"deep sleep cancellation failed: %d\n",ret);
      #line 680 
      return ret;
    }
    #line 682 
    priv->deep_sleep_required = 1;
  }
  #line 685 
  ret = lbs_set_host_sleep(priv,1);
  #line 687 
  netif_device_detach(priv->dev);
  #line 688 
  if (priv->mesh_dev != (struct net_device *)0) 
                                                #line 689 
                                                netif_device_detach(priv->mesh_dev);
  #line 691 
  return ret;
}

#line 695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
int lbs_resume(struct lbs_private *priv)
{
  #line 697 
  int ret;
  #line 699 
  ret = lbs_set_host_sleep(priv,0);
  #line 701 
  netif_device_attach(priv->dev);
  #line 702 
  if (priv->mesh_dev != (struct net_device *)0) 
                                                #line 703 
                                                netif_device_attach(priv->mesh_dev);
  #line 705 
  if (priv->deep_sleep_required != 0) {
    #line 706 
    priv->deep_sleep_required = 0;
    #line 707 
    ret = lbs_set_deep_sleep(priv,1);
    #line 708 
    if (ret != 0) 
                  #line 709 
                  netdev_err(priv->dev,(char *)"deep sleep activation failed: %d\n",ret);
  }
  #line 713 
  if ((unsigned int)priv->setup_fw_on_resume != 0U) 
                                                    #line 714 
                                                    ret = lbs_setup_firmware(priv);
  #line 716 
  return ret;
}

#line 726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
static void lbs_cmd_timeout_handler(struct timer_list *t)
{
  #line 728 
  void *__mptr;
  #line 729 
  unsigned long flags;
  #line 728 
  __mptr = (void *)t;
  #line 728 
  struct lbs_private *priv = ((struct lbs_private *)(__mptr + 18446744073709550592U));
  #line 731 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_0(& priv->driver_lock);
  #line 733 
  if (priv->cur_cmd == (struct cmd_ctrl_node *)0) 
                                                  #line 734 
                                                  goto out;
  #line 736 
  netdev_info(priv->dev,(char *)"command 0x%04x timed out\n",(int)((priv->cur_cmd)->cmdbuf)->command);
  #line 739 
  priv->cmd_timed_out = 1;
  #line 745 
  if ((unsigned int)priv->dnld_sent == 2U) 
                                           #line 746 
                                           priv->dnld_sent = (unsigned char)0U;
  #line 748 
  __wake_up(& priv->waitq,3U,1,(void *)0);
  #line 749 
  out: 
       #line 749 
  ;
  #line 750 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_0(& priv->driver_lock,flags);
  #line 751 
  return;
}

#line 760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
static void lbs_tx_lockup_handler(struct timer_list *t)
{
  #line 762 
  void *__mptr;
  #line 763 
  unsigned long flags;
  #line 762 
  __mptr = (void *)t;
  #line 762 
  struct lbs_private *priv = ((struct lbs_private *)(__mptr + 18446744073709543336U));
  #line 765 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_0(& priv->driver_lock);
  #line 767 
  netdev_info(priv->dev,(char *)"TX lockup detected\n");
  #line 768 
  if (priv->reset_card != (void (*)(struct lbs_private *))0) 
                                                             #line 769 
                                                             (*(priv->reset_card))(priv);
  #line 771 
  priv->dnld_sent = (unsigned char)0U;
  #line 772 
  __wake_up(& priv->waitq,1U,1,(void *)0);
  #line 774 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_0(& priv->driver_lock,flags);
  #line 775 
  return;
}

#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
static void auto_deepsleep_timer_fn(struct timer_list *t)
{
  #line 785 
  void *__mptr;
  #line 785 
  __mptr = (void *)t;
  #line 785 
  struct lbs_private *priv = ((struct lbs_private *)(__mptr + 18446744073709550920U));
  #line 787 
  if (priv->is_activity_detected != 0) 
                                       #line 788 
                                       priv->is_activity_detected = 0;
  else 
    #line 790 
    if ((priv->is_auto_deep_sleep_enabled != 0 && priv->wakeup_dev_required == 0) && priv->connect_status != 0U) {
      #line 793 
      struct cmd_header cmd;
      #line 795 
      if ((lbs_debug & 4U) != 0U) {
        #line 795 
        char *tmp_1;
        #line 795 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 795 
                                                                 tmp_1 = (char *)" (INT)"; else 
                                                                    #line 795 
                                                                    tmp_1 = (char *)"";
        #line 795 
        printk((char *)"\001",tmp_1);
      }
      #line 796 
      memset((void *)(& cmd),0,8UL);
      #line 797 
      cmd.size = (unsigned short)8U;
      #line 798 
      lbs_cmd_async(priv,(unsigned short)62,& cmd,8);
    }
  #line 802 
  cif_mod_timer(& priv->auto_deepsleep_timer,(unsigned long)(priv->auto_deep_sleep_timeout / 4) + jiffies);
  #line 803 
  return;
}

#line 806  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
int lbs_enter_auto_deep_sleep(struct lbs_private *priv)
{
  #line 808 
  priv->is_auto_deep_sleep_enabled = 1;
  #line 809 
  if (priv->is_deep_sleep != 0) 
                                #line 810 
                                priv->wakeup_dev_required = 1;
  #line 811 
  cif_mod_timer(& priv->auto_deepsleep_timer,(unsigned long)(priv->auto_deep_sleep_timeout / 4) + jiffies);
  #line 814 
  return 0;
}

#line 817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
int lbs_exit_auto_deep_sleep(struct lbs_private *priv)
{
  #line 819 
  priv->is_auto_deep_sleep_enabled = 0;
  #line 820 
  priv->auto_deep_sleep_timeout = 0;
  #line 821 
  cif_del_timer_0(& priv->auto_deepsleep_timer);
  #line 823 
  return 0;
}

#line 826  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
static int lbs_init_adapter(struct lbs_private *priv)
{
  #line 870 
  struct __kfifo *__kfifo;
  #line 828 
  int ret;
  #line 830 
  eth_broadcast_addr((u8 *)(& priv->current_addr));
  #line 832 
  priv->connect_status = 1U;
  #line 833 
  priv->channel = (unsigned char)6U;
  #line 834 
  priv->mac_control = (unsigned short)3U;
  #line 835 
  priv->radio_on = (unsigned char)1U;
  #line 836 
  priv->psmode = (unsigned short)0U;
  #line 837 
  priv->psstate = 0U;
  #line 838 
  priv->is_deep_sleep = 0;
  #line 839 
  priv->is_auto_deep_sleep_enabled = 0;
  #line 840 
  priv->deep_sleep_required = 0;
  #line 841 
  priv->wakeup_dev_required = 0;
  {
    #line 842 
    struct lock_class_key __key;
    #line 842 
    __init_waitqueue_head(& priv->ds_awake_q,(char *)"&priv->ds_awake_q",& __key);
  }
  {
    #line 843 
    struct lock_class_key __key_0;
    #line 843 
    __init_waitqueue_head(& priv->scan_q,(char *)"&priv->scan_q",& __key_0);
  }
  #line 844 
  priv->authtype_auto = (unsigned char)1U;
  #line 845 
  priv->is_host_sleep_configured = 0;
  #line 846 
  priv->is_host_sleep_activated = 0;
  {
    #line 847 
    struct lock_class_key __key_1;
    #line 847 
    __init_waitqueue_head(& priv->host_sleep_q,(char *)"&priv->host_sleep_q",& __key_1);
  }
  {
    #line 848 
    struct lock_class_key __key_2;
    #line 848 
    __init_waitqueue_head(& priv->fw_waitq,(char *)"&priv->fw_waitq",& __key_2);
  }
  {
    #line 849 
    struct lock_class_key __key_3;
    #line 849 
    __mutex_init(& priv->lock,(char *)"&priv->lock",& __key_3);
  }
  {
    #line 851 
    struct lock_class_key __key_4;
    #line 851 
    init_timer_key(& priv->command_timer,& lbs_cmd_timeout_handler,0U,(char *)"(&priv->command_timer)",& __key_4);
  }
  {
    #line 852 
    struct lock_class_key __key_5;
    #line 852 
    init_timer_key(& priv->tx_lockup_timer,& lbs_tx_lockup_handler,0U,(char *)"(&priv->tx_lockup_timer)",& __key_5);
  }
  {
    #line 853 
    struct lock_class_key __key_6;
    #line 853 
    init_timer_key(& priv->auto_deepsleep_timer,& auto_deepsleep_timer_fn,0U,(char *)"(&priv->auto_deepsleep_timer)",& __key_6);
  }
  #line 855 
  INIT_LIST_HEAD_0(& priv->cmdfreeq);
  #line 856 
  INIT_LIST_HEAD_0(& priv->cmdpendingq);
  #line 858 
  spinlock_check(& priv->driver_lock);
  {
    #line 858 
    struct lock_class_key __key_7;
    #line 858 
    __raw_spin_lock_init(& priv->driver_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&priv->driver_lock)->rlock",& __key_7);
  }
  #line 861 
  if (lbs_allocate_cmd_buffer(priv) != 0) {
    #line 862 
    printk((char *)"\001");
    #line 863 
    ret = -12;
    #line 864 
    goto out;
  }
  #line 866 
  priv->resp_idx = (unsigned char)0U;
  #line 867 
  priv->resp_len[1] = 0U;
  #line 867 
  priv->resp_len[0] = 0U;
  {
    #line 870 
    struct kfifo *__tmp = & priv->event_fifo;
    #line 870 
    __kfifo = & __tmp->__anonCompField_kfifo_165.kfifo;
    }
  #line 870 
  ret = __kfifo_int_must_check_helper(__kfifo_alloc(__kfifo,64U,1UL,3264U));
  #line 871 
  if (ret != 0) {
    #line 872 
    printk((char *)"\001");
    #line 873 
    goto out;
  }
  #line 876 
  out: 
       #line 876 
  ;
  #line 877 
  return ret;
}

#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
static void lbs_free_adapter(struct lbs_private *priv)
{
  #line 882 
  lbs_free_cmd_buffer(priv);
  {
    #line 883 
    struct kfifo *__tmp = & priv->event_fifo;
    #line 883 
    struct __kfifo *__kfifo = & __tmp->__anonCompField_kfifo_165.kfifo;
    #line 883 
    __kfifo_free(__kfifo);
  }
  #line 884 
  cif_del_timer_0(& priv->command_timer);
  #line 885 
  cif_del_timer_0(& priv->tx_lockup_timer);
  #line 886 
  cif_del_timer_0(& priv->auto_deepsleep_timer);
  #line 887 
  return;
}

#line 889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
static struct net_device_ops lbs_netdev_ops = {.ndo_open = & lbs_dev_open, .ndo_stop = & lbs_eth_stop, .ndo_start_xmit = & lbs_hard_start_xmit, .ndo_set_rx_mode = & lbs_set_multicast_list, .ndo_set_mac_address = & lbs_set_mac_address, .ndo_validate_addr = & eth_validate_addr};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
struct lbs_private *lbs_add_card(void *card, struct device *dmdev)
{
  #line 955 
  struct task_struct *__k;
  #line 908 
  struct net_device *dev;
  #line 909 
  struct wireless_dev *wdev;
  #line 911 
  int err;
  #line 910 
  struct lbs_private *priv = (struct lbs_private *)0;
  #line 914 
  wdev = lbs_cfg_alloc(dmdev);
  #line 915 
  if ((int)IS_ERR_0((void *)wdev) != 0) {
    #line 916 
    err = (int)PTR_ERR_0((void *)wdev);
    #line 917 
    printk((char *)"\001");
    #line 918 
    goto err_cfg;
  }
  #line 921 
  wdev->iftype = NL80211_IFTYPE_STATION;
  #line 922 
  priv = (struct lbs_private *)wdev_priv(wdev);
  #line 923 
  priv->wdev = wdev;
  #line 925 
  err = lbs_init_adapter(priv);
  #line 926 
  if (err != 0) {
    #line 927 
    printk((char *)"\001");
    #line 928 
    goto err_wdev;
  }
  #line 931 
  dev = cif_alloc_netdev_mqs_0(0,(char *)"wlan%d",(unsigned char)0,& ether_setup,1U,1U);
  #line 932 
  if (dev == (struct net_device *)0) {
    #line 933 
    err = -12;
    #line 934 
    _dev_err(dmdev,(char *)"no memory for network device instance\n");
    #line 935 
    goto err_adapter;
  }
  #line 938 
  dev->ieee80211_ptr = wdev;
  #line 939 
  dev->__anonCompField_net_device_159.ml_priv = (void *)priv;
  #line 940 
  dev->dev.parent = dmdev;
  #line 941 
  wdev->netdev = dev;
  #line 942 
  priv->dev = dev;
  #line 944 
  dev->netdev_ops = & lbs_netdev_ops;
  #line 945 
  dev->watchdog_timeo = 1250;
  #line 946 
  dev->ethtool_ops = & lbs_ethtool_ops;
  #line 947 
  dev->flags |= 4098U;
  #line 949 
  priv->card = card;
  #line 951 
  strcpy((char *)(& dev->name),(char *)"wlan%d");
  #line 953 
  if ((lbs_debug & 1048576U) != 0U) {
    #line 953 
    char *tmp_3;
    #line 953 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 953 
                                                             tmp_3 = (char *)" (INT)"; else 
                                                                    #line 953 
                                                                    tmp_3 = (char *)"";
    #line 953 
    printk((char *)"\001",tmp_3);
  }
  {
    #line 954 
    struct lock_class_key __key;
    #line 954 
    __init_waitqueue_head(& priv->waitq,(char *)"&priv->waitq",& __key);
  }
  #line 955 
  __k = cif_kthread_create_on_node(& lbs_thread,(void *)dev,-1,(char *)"lbs_main");
  {
    #line 955 
    if (! IS_ERR_0((void *)__k)) 
                                 #line 955 
                                 wake_up_process(__k);
  }
  #line 955 
  priv->main_thread = __k;
  #line 956 
  if ((int)IS_ERR_0((void *)priv->main_thread) != 0) {
    #line 957 
    err = (int)PTR_ERR_0((void *)priv->main_thread);
    #line 958 
    if ((lbs_debug & 1048576U) != 0U) {
      #line 958 
      char *tmp_9;
      #line 958 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 958 
                                                               tmp_9 = (char *)" (INT)"; else 
                                                                    #line 958 
                                                                    tmp_9 = (char *)"";
      #line 958 
      printk((char *)"\001",tmp_9);
    }
    #line 959 
    goto err_ndev;
  }
  #line 962 
  priv->work_thread = alloc_workqueue((char *)"%s",917514U,1,(char *)"lbs_worker");
  {
    #line 963 
    struct lock_class_key __key_0;
    #line 963 
    __init_work(& priv->mcast_work,0);
    #line 963 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 963 
    priv->mcast_work.data = __constr_expr_34;
    #line 963 
    lockdep_init_map(& priv->mcast_work.lockdep_map,(char *)"(work_completion)",& __key_0,0);
    #line 963 
    INIT_LIST_HEAD_0(& priv->mcast_work.entry);
    #line 963 
    priv->mcast_work.func = & lbs_set_mcast_worker;
  }
  #line 965 
  priv->wol_criteria = 4294967295U;
  #line 966 
  priv->wol_gpio = (unsigned char)255U;
  #line 967 
  priv->wol_gap = (unsigned char)20U;
  #line 968 
  priv->ehs_remove_supported = (_Bool)1;
  #line 970 
  return priv;
  #line 972 
  err_ndev: 
            #line 972 
  ;
  #line 973 
  cif_free_netdev_0(dev);
  #line 975 
  err_adapter: 
               #line 975 
  ;
  #line 976 
  lbs_free_adapter(priv);
  #line 978 
  err_wdev: 
            #line 978 
  ;
  #line 979 
  lbs_cfg_free(priv);
  #line 981 
  err_cfg: 
           #line 981 
  ;
  #line 982 
  return (struct lbs_private *)ERR_PTR_0((long)err);
}

#line 987  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
void lbs_remove_card(struct lbs_private *priv)
{
  #line 989 
  struct net_device *dev = priv->dev;
  #line 991 
  lbs_remove_mesh(priv);
  #line 993 
  if ((int)priv->wiphy_registered != 0) 
                                        #line 994 
                                        lbs_scan_deinit(priv);
  #line 996 
  lbs_wait_for_firmware_load(priv);
  #line 1001 
  if ((lbs_debug & 4U) != 0U) {
    #line 1001 
    char *tmp_0;
    #line 1001 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1001 
                                                             tmp_0 = (char *)" (INT)"; else 
                                                                    #line 1001 
                                                                    tmp_0 = (char *)"";
    #line 1001 
    printk((char *)"\001",tmp_0);
  }
  #line 1002 
  destroy_workqueue(priv->work_thread);
  #line 1003 
  if ((lbs_debug & 4U) != 0U) {
    #line 1003 
    char *tmp_2;
    #line 1003 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1003 
                                                             tmp_2 = (char *)" (INT)"; else 
                                                                    #line 1003 
                                                                    tmp_2 = (char *)"";
    #line 1003 
    printk((char *)"\001",tmp_2);
  }
  #line 1005 
  if ((unsigned int)priv->psmode == 1U) {
    #line 1006 
    priv->psmode = (unsigned short)0U;
    #line 1011 
    if (priv->psstate != 0U) 
                             #line 1012 
                             lbs_set_ps_mode(priv,(unsigned short)49,(_Bool)1);
  }
  #line 1015 
  if (priv->is_deep_sleep != 0) {
    #line 1016 
    priv->is_deep_sleep = 0;
    #line 1017 
    __wake_up(& priv->ds_awake_q,1U,1,(void *)0);
  }
  #line 1020 
  priv->is_host_sleep_configured = 0;
  #line 1021 
  priv->is_host_sleep_activated = 0;
  #line 1022 
  __wake_up(& priv->host_sleep_q,1U,1,(void *)0);
  #line 1025 
  priv->surpriseremoved = (unsigned char)1U;
  #line 1026 
  kthread_stop(priv->main_thread);
  #line 1028 
  lbs_free_adapter(priv);
  #line 1029 
  lbs_cfg_free(priv);
  #line 1030 
  cif_free_netdev_0(dev);
  #line 1031 
  return;
}

#line 1035  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
int lbs_rtap_supported(struct lbs_private *priv)
{
  #line 1037 
  if (priv->fwrelease >> 24 == 5U) 
                                   #line 1038 
                                   return 1;
  #line 1041 
  return (priv->fwrelease >> 24 > 9U && (priv->fwcapinfo & 65536U) != 0U) != 0;
}

#line 1046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
int lbs_start_card(struct lbs_private *priv)
{
  #line 1049 
  int ret;
  #line 1048 
  struct net_device *dev = priv->dev;
  #line 1052 
  ret = lbs_setup_firmware(priv);
  #line 1053 
  if (ret != 0) 
                #line 1054 
                goto done;
  #line 1056 
  if (lbs_disablemesh == 0U) 
                             #line 1057 
                             lbs_init_mesh(priv); else 
                                                       #line 1059 
                                                       printk((char *)"\001",(char *)(& dev->name));
  #line 1061 
  ret = lbs_cfg_register(priv);
  #line 1062 
  if (ret != 0) {
    #line 1063 
    printk((char *)"\001");
    #line 1064 
    goto done;
  }
  #line 1067 
  if ((int)lbs_mesh_activated(priv) != 0) 
                                          #line 1068 
                                          lbs_start_mesh(priv);
  #line 1070 
  lbs_debugfs_init_one(priv,dev);
  #line 1072 
  netdev_info(dev,(char *)"Marvell WLAN 802.11 adapter\n");
  #line 1074 
  ret = 0;
  #line 1076 
  done: 
        #line 1076 
  ;
  #line 1077 
  return ret;
}

#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
void lbs_stop_card(struct lbs_private *priv)
{
  #line 1084 
  struct net_device *dev;
  #line 1086 
  if (priv == (struct lbs_private *)0) 
                                       #line 1087 
                                       return;
  #line 1088 
  dev = priv->dev;
  #line 1092 
  if ((unsigned int)dev->reg_state != 1U) 
                                          #line 1093 
                                          return;
  #line 1095 
  netif_stop_queue_2(dev);
  #line 1096 
  netif_carrier_off(dev);
  #line 1098 
  lbs_debugfs_remove_one(priv);
  #line 1099 
  lbs_deinit_mesh(priv);
  #line 1100 
  cif_unregister_netdev_0(dev);
  #line 1101 
  return;
}

#line 1105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
void lbs_queue_event(struct lbs_private *priv, u32 event)
{
  #line 1107 
  unsigned long flags;
  #line 1109 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_0(& priv->driver_lock);
  #line 1111 
  if (priv->psstate == 3U) 
                           #line 1112 
                           priv->psstate = 1U;
  {
    #line 1114 
    struct kfifo *__tmp = & priv->event_fifo;
    #line 1114 
    void *__buf = (void *)(& event);
    #line 1114 
    unsigned long __n = 4UL;
    #line 1114 
    size_t __recsize = 0UL;
    #line 1114 
    struct __kfifo *__kfifo = & __tmp->__anonCompField_kfifo_165.kfifo;
    #line 1114 
    __kfifo_in(__kfifo,__buf,(unsigned int)__n);
  }
  #line 1116 
  __wake_up(& priv->waitq,3U,1,(void *)0);
  #line 1118 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_0(& priv->driver_lock,flags);
  #line 1119 
  return;
}

#line 1122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
void lbs_notify_command_response(struct lbs_private *priv, u8 resp_idx)
{
  #line 1124 
  if (priv->psstate == 3U) 
                           #line 1125 
                           priv->psstate = 1U;
  #line 1128 
  if ((long)((unsigned int)resp_idx > 1U) != 0L) {
    #line 1129 
    ldv_inline_asm();
    #line 1130 
    ldv_inline_asm();
    #line 1131 
    ldv_inline_asm();
    #line 1128 
    ;
  }
  #line 1129 
  priv->resp_idx = resp_idx;
  #line 1131 
  __wake_up(& priv->waitq,3U,1,(void *)0);
  #line 1132 
  return;
}

#line 1135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
static int lbs_init_module(void)
{
  #line 1137 
  memset((void *)(& confirm_sleep),0,18UL);
  #line 1138 
  confirm_sleep.hdr.command = (unsigned short)33U;
  #line 1139 
  confirm_sleep.hdr.size = (unsigned short)18U;
  #line 1140 
  confirm_sleep.action = (unsigned short)52U;
  #line 1141 
  lbs_debugfs_init();
  #line 1143 
  return 0;
}

#line 1146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/main.c"
static void lbs_exit_module(void)
{
  #line 1148 
  lbs_debugfs_remove();
  #line 1149 
  return;
}

#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
#line 98 
int emg_del_timer_sync(struct timer_list *arg0);
#line 102 
#line 102 
struct task_struct *emg_kthread_create_on_node(int (*arg0)(void *), void *arg1, int arg2, char *arg3 , ...);
#line 103 
#line 103 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 106 
#line 106 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_lbs_dev_open(struct net_device *arg0)
{
  #line 112 
  return lbs_dev_open(arg0);
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_lbs_eth_stop(struct net_device *arg0)
{
  #line 117 
  return lbs_eth_stop(arg0);
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_lbs_thread(void *arg0)
{
  #line 122 
  return lbs_thread(arg0);
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_lbs_exit_module(void)
{
  #line 127 
  lbs_exit_module();
  #line 128 
  return;
}

#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_lbs_init_module(void)
{
  #line 131 
  return lbs_init_module();
}

#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_set_bit_2(long nr, unsigned long *addr)
{
  #line 152 
  ldv_set_bit(nr,addr);
  #line 153 
  return;
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 166 
  ldv_init_list_head(list);
  #line 167 
  return;
}

#line 233  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void *ERR_PTR_0(long error)
{
  #line 236 
  return ldv_err_ptr(error);
}

#line 240  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static long PTR_ERR_0(void *ptr)
{
  #line 243 
  return ldv_ptr_err(ptr);
}

#line 247  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static bool IS_ERR_0(void *ptr)
{
  #line 250 
  return ldv_is_err(ptr);
}

#line 660  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device(spinlock_t *lock)
{
  #line 663 
  ldv_spin_model_lock((char *)"addr_list_lock_of_net_device");
  #line 665 
  spin_lock_bh(lock);
  #line 666 
  return;
}

#line 678  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device(spinlock_t *lock)
{
  #line 681 
  ldv_spin_model_unlock((char *)"addr_list_lock_of_net_device");
  #line 683 
  spin_unlock_bh(lock);
  #line 684 
  return;
}

#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_irq_driver_lock_of_lbs_private_0(spinlock_t *lock)
{
  #line 690 
  ldv_spin_model_lock((char *)"driver_lock_of_lbs_private");
  #line 692 
  spin_lock_irq_0(lock);
  #line 693 
  return;
}

#line 696  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_irq_driver_lock_of_lbs_private_0(spinlock_t *lock)
{
  #line 699 
  ldv_spin_model_unlock((char *)"driver_lock_of_lbs_private");
  #line 701 
  spin_unlock_irq_0(lock);
  #line 702 
  return;
}

#line 705  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif___ldv_spin_lock_driver_lock_of_lbs_private_0(spinlock_t *lock)
{
  #line 708 
  ldv_spin_model_lock((char *)"driver_lock_of_lbs_private");
  #line 710 
  __ldv_spin_lock(lock);
  #line 711 
  return;
}

#line 714  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_0(spinlock_t *lock, unsigned long flags)
{
  #line 717 
  ldv_spin_model_unlock((char *)"driver_lock_of_lbs_private");
  #line 719 
  spin_unlock_irqrestore_0(lock,flags);
  #line 720 
  return;
}

#line 723  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 727 
  return emg_del_timer_sync(timer);
}

#line 731  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif_del_timer_0(struct timer_list *timer)
{
  #line 735 
  return emg_del_timer(timer);
}

#line 739  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 743 
  return emg_schedule_work(work);
}

#line 747  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 751 
  return emg_mod_timer(timer,expires);
}

#line 755  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static struct net_device *cif_alloc_netdev_mqs_0(int sizeof_priv, char *name, unsigned char name_assign_type, void (*setup)(struct net_device *), unsigned int txqs, unsigned int rxqs)
{
  #line 759 
  return emg_alloc_netdev_mqs(sizeof_priv,name,
                           (unsigned char)((int)name_assign_type),setup,txqs,
                           rxqs);
}

#line 763  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static struct task_struct *cif_kthread_create_on_node(int (*threadfn)(void *), void *data, int node, char *namefmt , ...)
{
  #line 766 
  __builtin_va_list ldv_func_arg5;
  #line 767 
  #line 767 
  __builtin_va_start(ldv_func_arg5,namefmt);
  #line 770 
  return emg_kthread_create_on_node(threadfn,data,node,namefmt);
}

#line 774  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_free_netdev_0(struct net_device *dev)
{
  #line 778 
  emg_free_netdev(dev);
  #line 779 
  return;
}

#line 782  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_unregister_netdev_0(struct net_device *dev)
{
  #line 786 
  emg_unregister_netdev(dev);
  #line 787 
  return;
}

#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_1(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 668  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/firmware.i.aux"
static void cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_1(spinlock_t *lock, unsigned long flags);
#line 35 
#line 659 
static void cif___ldv_spin_lock_driver_lock_of_lbs_private_1(spinlock_t *lock);
#line 51 
#line 51 
int ldv_request_firmware(struct firmware **fw);
#line 52 
#line 52 
void ldv_release_firmware(struct firmware *fw);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 684  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/firmware.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device);
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 46 
int request_firmware_nowait(struct module *, bool, char *, struct device *, gfp_t, void *, void (*)(struct firmware *, void *));
#line 57 
#line 677  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/firmware.i.aux"
static void cif_release_firmware(struct firmware *fw);
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/firmware.c"
int lbs_get_firmware(struct device *dev, u32 card_model, struct lbs_fw_table *fw_table, struct firmware **helper, struct firmware **mainfw);
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/firmware.c"
int lbs_get_firmware_async(struct lbs_private *priv, struct device *device, u32 card_model, struct lbs_fw_table *fw_table, void (*callback)(struct lbs_private *, int , struct firmware *, struct firmware *));
#line 13 
#line 84 
static void load_next_firmware_from_table(struct lbs_private *priv);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/firmware.c"
static void lbs_fw_loaded(struct lbs_private *priv, int ret, struct firmware *helper, struct firmware *mainfw)
{
  #line 18 
  unsigned long flags;
  #line 20 
  if ((lbs_debug & 524288U) != 0U) {
    #line 20 
    char *tmp_0;
    #line 20 
    ;
    #line 20 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 20 
                                                             tmp_0 = (char *)" (INT)"; else 
                                                                    #line 20 
                                                                    tmp_0 = (char *)"";
    #line 20 
    printk((char *)"\001",tmp_0,ret);
  }
  #line 23 
  (*(priv->fw_callback))(priv,ret,helper,mainfw);
  #line 25 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_1(& priv->driver_lock);
  #line 26 
  priv->fw_callback = (void (*)(struct lbs_private *, int , struct firmware *, struct firmware *))0;
  #line 27 
  __wake_up(& priv->fw_waitq,3U,1,(void *)0);
  #line 28 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_1(& priv->driver_lock,flags);
  #line 29 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/firmware.c"
static void do_load_firmware(struct lbs_private *priv, char *name, void (*cb)(struct firmware *, void *))
{
  #line 34 
  int ret;
  #line 36 
  if ((lbs_debug & 524288U) != 0U) {
    #line 36 
    char *tmp_0;
    #line 36 
    ;
    #line 36 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 36 
                                                             tmp_0 = (char *)" (INT)"; else 
                                                                    #line 36 
                                                                    tmp_0 = (char *)"";
    #line 36 
    printk((char *)"\001",tmp_0,name);
  }
  #line 37 
  ret = request_firmware_nowait(& __this_module,(_Bool)1,name,priv->fw_device,3264U,(void *)priv,cb);
  #line 39 
  if (ret != 0) {
    #line 40 
    if ((lbs_debug & 524288U) != 0U) {
      #line 40 
      char *tmp_2;
      #line 40 
      ;
      #line 40 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 40 
                                                               tmp_2 = (char *)" (INT)"; else 
                                                                    #line 40 
                                                                    tmp_2 = (char *)"";
      #line 40 
      printk((char *)"\001",tmp_2,ret);
    }
    #line 41 
    lbs_fw_loaded(priv,ret,(struct firmware *)0,(struct firmware *)0);
  }
  #line 43 
  return;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/firmware.c"
static void main_firmware_cb(struct firmware *firmware, void *context)
{
  #line 47 
  struct lbs_private *priv = (struct lbs_private *)context;
  #line 49 
  if (firmware == (struct firmware *)0) {
    #line 51 
    load_next_firmware_from_table(priv);
    #line 52 
    return;
  }
  #line 56 
  lbs_fw_loaded(priv,0,priv->helper_fw,firmware);
  #line 57 
  if (priv->helper_fw != (struct firmware *)0) {
    #line 58 
    cif_release_firmware(priv->helper_fw);
    #line 59 
    priv->helper_fw = (struct firmware *)0;
  }
  #line 61 
  cif_release_firmware(firmware);
  #line 62 
  return;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/firmware.c"
static void helper_firmware_cb(struct firmware *firmware, void *context)
{
  #line 66 
  struct lbs_private *priv = (struct lbs_private *)context;
  #line 68 
  if (firmware == (struct firmware *)0) {
    #line 70 
    load_next_firmware_from_table(priv);
    #line 71 
    return;
  }
  #line 75 
  if ((priv->fw_iter)->fwname != (char *)0) {
    #line 76 
    priv->helper_fw = firmware;
    #line 77 
    do_load_firmware(priv,(priv->fw_iter)->fwname,& main_firmware_cb);
  }
  else 
       #line 80 
       lbs_fw_loaded(priv,0,firmware,(struct firmware *)0);
  #line 81 
  return;
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/firmware.c"
static void load_next_firmware_from_table(struct lbs_private *priv)
{
  #line 86 
  struct lbs_fw_table *iter;
  #line 88 
  if (priv->fw_iter == (struct lbs_fw_table *)0) 
                                                 #line 89 
                                                 iter = priv->fw_table;
  else {
    #line 91 
    (priv->fw_iter) ++;
    #line 91 
    iter = priv->fw_iter;
  }
  #line 93 
  if (priv->helper_fw != (struct firmware *)0) {
    #line 94 
    cif_release_firmware(priv->helper_fw);
    #line 95 
    priv->helper_fw = (struct firmware *)0;
  }
  #line 98 
  next: 
        #line 98 
  ;
  #line 99 
  if (iter->helper == (char *)0) {
    #line 101 
    lbs_fw_loaded(priv,-2,(struct firmware *)0,(struct firmware *)0);
    #line 102 
    return;
  }
  #line 105 
  if ((unsigned int)iter->model != priv->fw_model) {
    #line 106 
    iter ++;
    #line 107 
    goto next;
  }
  #line 110 
  priv->fw_iter = iter;
  #line 111 
  do_load_firmware(priv,iter->helper,& helper_firmware_cb);
  #line 112 
  return;
}

#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/firmware.c"
void lbs_wait_for_firmware_load(struct lbs_private *priv)
{
  #line 116 
  while (1) {
    #line 116 
    __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/firmware.c",116,0);
    #line 116 
    if (priv->fw_callback == (void (*)(struct lbs_private *, int , struct firmware *, struct firmware *))0) 
      #line 116 
      break;
    {
      #line 116 
      struct wait_queue_entry __wq_entry;
      #line 116 
      long __ret = 0L;
      #line 116 
      init_wait_entry(& __wq_entry,0);
      #line 116 
      while (1) {
        #line 116 
        long __int = prepare_to_wait_event(& priv->fw_waitq,& __wq_entry,2);
        #line 116 
        if (priv->fw_callback == (void (*)(struct lbs_private *, int , struct firmware *, struct firmware *))0) 
          #line 116 
          break;
        #line 116 
        schedule();
      }
      #line 116 
      finish_wait(& priv->fw_waitq,& __wq_entry);
      #line 116 
      __out_0: 
               #line 116 
      ;
      #line 116 
      long tmp_2 = __ret;
    }
    #line 116 
    break;
  }
  #line 119 
  return;
}

#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/firmware.c"
int lbs_get_firmware_async(struct lbs_private *priv, struct device *device, u32 card_model, struct lbs_fw_table *fw_table, void (*callback)(struct lbs_private *, int , struct firmware *, struct firmware *))
{
  #line 135 
  unsigned long flags;
  #line 137 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_1(& priv->driver_lock);
  #line 138 
  if (priv->fw_callback != (void (*)(struct lbs_private *, int , struct firmware *, struct firmware *))0) {
    #line 139 
    if ((lbs_debug & 524288U) != 0U) {
      #line 139 
      char *tmp_0;
      #line 139 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 139 
                                                               tmp_0 = (char *)" (INT)"; else 
                                                                    #line 139 
                                                                    tmp_0 = (char *)"";
      #line 139 
      printk((char *)"\001",tmp_0);
    }
    #line 140 
    cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_1(& priv->driver_lock,flags);
    #line 141 
    return -16;
  }
  #line 144 
  priv->fw_device = device;
  #line 145 
  priv->fw_callback = callback;
  #line 146 
  priv->fw_table = fw_table;
  #line 147 
  priv->fw_iter = (struct lbs_fw_table *)0;
  #line 148 
  priv->fw_model = card_model;
  #line 149 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_1(& priv->driver_lock,flags);
  #line 151 
  if ((lbs_debug & 524288U) != 0U) {
    #line 151 
    char *tmp_2;
    #line 151 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 151 
                                                             tmp_2 = (char *)" (INT)"; else 
                                                                    #line 151 
                                                                    tmp_2 = (char *)"";
    #line 151 
    printk((char *)"\001",tmp_2);
  }
  #line 152 
  load_next_firmware_from_table(priv);
  #line 153 
  return 0;
}

#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/firmware.c"
int lbs_get_firmware(struct device *dev, u32 card_model, struct lbs_fw_table *fw_table, struct firmware **helper, struct firmware **mainfw)
{
  #line 177 
  struct lbs_fw_table *iter;
  #line 178 
  int ret;
  #line 180 
  if ((long)(helper == (struct firmware **)0) != 0L) {
    #line 181 
    ldv_inline_asm();
    #line 182 
    ldv_inline_asm();
    #line 183 
    ldv_inline_asm();
    #line 180 
    ;
  }
  #line 181 
  if ((long)(mainfw == (struct firmware **)0) != 0L) {
    #line 182 
    ldv_inline_asm();
    #line 183 
    ldv_inline_asm();
    #line 184 
    ldv_inline_asm();
    #line 181 
    ;
  }
  #line 184 
  iter = fw_table;
  #line 185 
  while (iter != (struct lbs_fw_table *)0 && iter->helper != (char *)0) {
    #line 186 
    if ((unsigned int)iter->model != card_model) 
                                                 #line 187 
                                                 goto next;
    #line 189 
    if (*helper == (struct firmware *)0) {
      #line 190 
      ret = cif_request_firmware(helper,iter->helper,dev);
      #line 191 
      if (ret != 0) 
                    #line 192 
                    goto next;
      #line 198 
      if (iter->fwname == (char *)0) 
                                     #line 199 
                                     return 0;
    }
    #line 202 
    if (*mainfw == (struct firmware *)0) {
      #line 203 
      ret = cif_request_firmware(mainfw,iter->fwname,dev);
      #line 204 
      if (ret != 0) {
        #line 208 
        cif_release_firmware(*helper);
        #line 209 
        *helper = (struct firmware *)0;
      }
    }
    #line 213 
    if (*helper != (struct firmware *)0 && *mainfw != (struct firmware *)0) 
      #line 214 
      return 0;
    #line 216 
    next: 
          #line 216 
    ;
    #line 217 
    iter ++;
  }
  #line 221 
  cif_release_firmware(*helper);
  #line 222 
  *helper = (struct firmware *)0;
  #line 223 
  cif_release_firmware(*mainfw);
  #line 224 
  *mainfw = (struct firmware *)0;
  #line 226 
  return -2;
}

#line 659  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/firmware.i.aux"
static void cif___ldv_spin_lock_driver_lock_of_lbs_private_1(spinlock_t *lock)
{
  #line 662 
  ldv_spin_model_lock((char *)"driver_lock_of_lbs_private");
  #line 664 
  __ldv_spin_lock(lock);
  #line 665 
  return;
}

#line 668  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/firmware.i.aux"
static void cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_1(spinlock_t *lock, unsigned long flags)
{
  #line 671 
  ldv_spin_model_unlock((char *)"driver_lock_of_lbs_private");
  #line 673 
  spin_unlock_irqrestore_1(lock,flags);
  #line 674 
  return;
}

#line 677  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/firmware.i.aux"
static void cif_release_firmware(struct firmware *fw)
{
  #line 680 
  ldv_release_firmware(fw);
  #line 681 
  return;
}

#line 684  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/firmware.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device)
{
  #line 687 
  return ldv_request_firmware(fw);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif_set_bit_3(long nr, unsigned long *addr);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_2(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 678  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_2(spinlock_t *lock, unsigned long flags);
#line 35 
#line 669 
static void cif___ldv_spin_lock_driver_lock_of_lbs_private_2(spinlock_t *lock);
#line 2704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_orphan(struct sk_buff *skb)
{
  #line 2706 
  if (skb->__anonCompField_sk_buff_92.__anonCompField___anonunion_524_91.destructor != (void (*)(struct sk_buff *))0) {
    #line 2707 
    (*(skb->__anonCompField_sk_buff_92.__anonCompField___anonunion_524_91.destructor))(skb);
    #line 2708 
    skb->__anonCompField_sk_buff_92.__anonCompField___anonunion_524_91.destructor = (void (*)(struct sk_buff *))0;
    #line 2709 
    skb->__anonCompField_sk_buff_89.sk = (struct sock *)0;
  }
  else 
    #line 2711 
    if ((long)(skb->__anonCompField_sk_buff_89.sk != (struct sock *)0) != 0L) {
      #line 2712 
      ldv_inline_asm();
      #line 2713 
      ldv_inline_asm();
      #line 2714 
      ldv_inline_asm();
      #line 2711 
      ;
    }
  #line 2714 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue_3(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_3(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_queue_3(struct net_device *dev)
{
  #line 3168 
  netif_tx_stop_queue_3(netdev_get_tx_queue(dev,0U));
  #line 3169 
  return;
}

#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/decl.h"
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/tx.c"
void lbs_send_tx_feedback(struct lbs_private *priv, u32 try_count);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/tx.c"
static u32 convert_radiotap_rate_to_mv(u8 rate)
{
  #line 28 
  switch ((int)rate) {
    #line 29 
    case 2: 
            #line 29 
    ;
    #line 30 
    return 16U;
    #line 31 
    case 4: 
            #line 31 
    ;
    #line 32 
    return 17U;
    #line 33 
    case 11: 
             #line 33 
    ;
    #line 34 
    return 18U;
    #line 35 
    case 22: 
             #line 35 
    ;
    #line 36 
    return 19U;
    #line 37 
    case 12: 
             #line 37 
    ;
    #line 38 
    return 20U;
    #line 39 
    case 18: 
             #line 39 
    ;
    #line 40 
    return 21U;
    #line 41 
    case 24: 
             #line 41 
    ;
    #line 42 
    return 22U;
    #line 43 
    case 36: 
             #line 43 
    ;
    #line 44 
    return 23U;
    #line 45 
    case 48: 
             #line 45 
    ;
    #line 46 
    return 24U;
    #line 47 
    case 72: 
             #line 47 
    ;
    #line 48 
    return 25U;
    #line 49 
    case 96: 
             #line 49 
    ;
    #line 50 
    return 26U;
    #line 51 
    case 108: 
              #line 51 
    ;
    #line 52 
    return 27U;
  }
  #line 54 
  return 0U;
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/tx.c"
netdev_tx_t lbs_hard_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 108 
  unsigned int __UNIQUE_ID___x446;
  #line 108 
  unsigned int tmp_3;
  #line 67 
  unsigned long flags;
  #line 69 
  struct txpd *txpd;
  #line 70 
  char *p802x_hdr;
  #line 71 
  uint16_t pkt_len;
  #line 68 
  struct lbs_private *priv = (struct lbs_private *)dev->__anonCompField_net_device_159.ml_priv;
  #line 72 
  netdev_tx_t ret = (enum netdev_tx)0;
  #line 76 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_2(& priv->driver_lock);
  #line 78 
  if ((unsigned int)priv->surpriseremoved != 0U) 
                                                 #line 79 
                                                 goto free;
  #line 81 
  if (skb->len + 4294967295U > 1573U) {
    #line 82 
    if ((lbs_debug & 65536U) != 0U) {
      #line 82 
      char *tmp_0;
      #line 82 
      ;
      #line 82 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 82 
                                                               tmp_0 = (char *)" (INT)"; else 
                                                                    #line 82 
                                                                    tmp_0 = (char *)"";
      #line 82 
      printk((char *)"\001",tmp_0,skb->len,1574UL);
    }
    #line 86 
    (dev->stats.tx_dropped) ++;
    #line 87 
    (dev->stats.tx_errors) ++;
    #line 88 
    goto free;
  }
  #line 92 
  netif_stop_queue_3(priv->dev);
  #line 93 
  if (priv->mesh_dev != (struct net_device *)0) 
                                                #line 94 
                                                netif_stop_queue_3(priv->mesh_dev);
  #line 96 
  if (priv->tx_pending_len != 0) {
    #line 100 
    if ((lbs_debug & 65536U) != 0U) {
      #line 100 
      char *tmp_2;
      #line 100 
      ;
      #line 100 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 100 
                                                               tmp_2 = (char *)" (INT)"; else 
                                                                    #line 100 
                                                                    tmp_2 = (char *)"";
      #line 100 
      printk((char *)"\001",tmp_2,(char *)(& dev->name));
    }
    #line 101 
    ret = NETDEV_TX_BUSY;
    #line 102 
    goto unlock;
  }
  #line 105 
  priv->tx_pending_len = -1;
  #line 106 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_2(& priv->driver_lock,flags);
  {
    #line 108 
    __UNIQUE_ID___x446 = skb->len;
    #line 108 
    unsigned int __UNIQUE_ID___y447 = 100U;
    #line 108 
    if (__UNIQUE_ID___x446 < __UNIQUE_ID___y447) 
                                                 #line 108 
                                                 tmp_3 = __UNIQUE_ID___x446; else 
                                                                    #line 108 
                                                                    tmp_3 = __UNIQUE_ID___y447;
    }
  #line 108 
  ;
  #line 108 
  lbs_deb_hex(65536U,(char *)"TX Data",skb->data,(int)tmp_3);
  #line 110 
  txpd = (struct txpd *)(& priv->tx_pending_buf);
  #line 111 
  memset((void *)txpd,0,24UL);
  #line 113 
  p802x_hdr = (char *)skb->data;
  #line 114 
  pkt_len = (unsigned short)skb->len;
  #line 116 
  if ((priv->wdev)->iftype == (unsigned int)NL80211_IFTYPE_MONITOR) {
    #line 117 
    struct tx_radiotap_hdr *rtap_hdr = (struct tx_radiotap_hdr *)skb->data;
    #line 120 
    txpd->tx_control = convert_radiotap_rate_to_mv((unsigned char)((int)rtap_hdr->rate));
    #line 123 
    p802x_hdr += 12UL;
    #line 124 
    pkt_len = (unsigned short)((unsigned int)pkt_len + 65524U);
    #line 127 
    memcpy((void *)(& txpd->tx_dest_addr_high),(void *)(p802x_hdr + 4U),6UL);
  }
  else 
       #line 130 
       memcpy((void *)(& txpd->tx_dest_addr_high),(void *)p802x_hdr,6UL);
  #line 133 
  txpd->tx_packet_length = pkt_len;
  #line 134 
  txpd->tx_packet_location = 24U;
  #line 136 
  lbs_mesh_set_txpd(priv,dev,txpd);
  #line 138 
  lbs_deb_hex(65536U,(char *)"txpd",(u8 *)(& txpd),24);
  #line 140 
  lbs_deb_hex(65536U,(char *)"Tx Data",(u8 *)p802x_hdr,(int)txpd->tx_packet_length);
  #line 142 
  memcpy((void *)(txpd + 1U),(void *)p802x_hdr,(unsigned long)txpd->tx_packet_length);
  #line 144 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_2(& priv->driver_lock);
  #line 145 
  priv->tx_pending_len = (int)((unsigned int)pkt_len + 24U);
  #line 147 
  if ((lbs_debug & 65536U) != 0U) {
    #line 147 
    char *tmp_7;
    #line 147 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 147 
                                                             tmp_7 = (char *)" (INT)"; else 
                                                                    #line 147 
                                                                    tmp_7 = (char *)"";
    #line 147 
    printk((char *)"\001",tmp_7,(char *)"lbs_hard_start_xmit");
  }
  #line 149 
  (dev->stats.tx_packets) ++;
  #line 150 
  dev->stats.tx_bytes += (unsigned long)skb->len;
  #line 152 
  if ((priv->wdev)->iftype == (unsigned int)NL80211_IFTYPE_MONITOR) {
    #line 155 
    skb_orphan(skb);
    #line 158 
    priv->currenttxskb = skb;
  }
  else {
    #line 160 
    free: 
          #line 160 
    ;
    #line 161 
    dev_kfree_skb_any(skb);
  }
  #line 164 
  unlock: 
          #line 164 
  ;
  #line 165 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_2(& priv->driver_lock,flags);
  #line 166 
  __wake_up(& priv->waitq,3U,1,(void *)0);
  #line 168 
  return ret;
}

#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/tx.c"
void lbs_send_tx_feedback(struct lbs_private *priv, u32 try_count)
{
  #line 182 
  struct tx_radiotap_hdr *radiotap_hdr;
  #line 184 
  if ((priv->wdev)->iftype != (unsigned int)NL80211_IFTYPE_MONITOR || priv->currenttxskb == (struct sk_buff *)0) 
    #line 186 
    return;
  #line 188 
  radiotap_hdr = (struct tx_radiotap_hdr *)(priv->currenttxskb)->data;
  #line 190 
  if (try_count != 0U) 
                       #line 190 
                       radiotap_hdr->data_retries = (unsigned char)((unsigned int)((int)priv->txretrycount - (int)((unsigned char)try_count)) + 1U); else 
                                                                    #line 190 
                                                                    radiotap_hdr->data_retries = (unsigned char)0U;
  #line 193 
  (priv->currenttxskb)->protocol = eth_type_trans(priv->currenttxskb,priv->dev);
  #line 195 
  netif_rx(priv->currenttxskb);
  #line 197 
  priv->currenttxskb = (struct sk_buff *)0;
  #line 199 
  if (priv->connect_status == 0U) 
                                  #line 200 
                                  netif_wake_queue(priv->dev);
  #line 202 
  if (priv->mesh_dev != (struct net_device *)0) {
    #line 202 
    if ((int)netif_running(priv->mesh_dev) != 0) 
                                                 #line 203 
                                                 netif_wake_queue(priv->mesh_dev);
  }
  #line 204 
  return;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
void emg_wrapper_ether_setup(struct net_device *arg0)
{
  #line 112 
  ether_setup(arg0);
  #line 113 
  return;
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif_set_bit_3(long nr, unsigned long *addr)
{
  #line 134 
  ldv_set_bit(nr,addr);
  #line 135 
  return;
}

#line 669  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif___ldv_spin_lock_driver_lock_of_lbs_private_2(spinlock_t *lock)
{
  #line 672 
  ldv_spin_model_lock((char *)"driver_lock_of_lbs_private");
  #line 674 
  __ldv_spin_lock(lock);
  #line 675 
  return;
}

#line 678  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_2(spinlock_t *lock, unsigned long flags)
{
  #line 681 
  ldv_spin_model_unlock((char *)"driver_lock_of_lbs_private");
  #line 683 
  spin_unlock_irqrestore_2(lock,flags);
  #line 684 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static void cif_set_bit_4(long nr, unsigned long *addr);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_6765 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add(new,head,head->next);
  #line 80 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_6767 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_init(struct list_head *entry)
{
  #line 190 
  __list_del_entry(entry);
  #line 191 
  INIT_LIST_HEAD_1(entry);
  #line 192 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_1(struct list_head *head)
{
  #line 269 
  union __anonunion___u_6769 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 59 
void *__memmove(void *, void *, size_t);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static void *ERR_PTR_1(long error);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 215  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static long PTR_ERR_1(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static bool IS_ERR_1(void *ptr);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_3(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 671  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static void cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_3(spinlock_t *lock, unsigned long flags);
#line 35 
#line 662 
static void cif___ldv_spin_lock_driver_lock_of_lbs_private_3(spinlock_t *lock);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 680  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static int cif_mod_timer_0(struct timer_list *timer, unsigned long expires);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 432  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static void *kzalloc_2(size_t size, gfp_t flags);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue_4(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_4(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_queue_4(struct net_device *dev)
{
  #line 3168 
  netif_tx_stop_queue_4(netdev_get_tx_queue(dev,0U));
  #line 3169 
  return;
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.h"
#line 1499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
struct cmd_ctrl_node *__lbs_cmd_async(struct lbs_private *priv, uint16_t command, struct cmd_header *in_cmd, int in_cmd_size, int (*callback)(struct lbs_private *, unsigned long , struct cmd_header *), unsigned long callback_arg);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.h"
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_host_sleep_cfg(struct lbs_private *priv, uint32_t criteria, struct wol_config *p_wol_config);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.h"
#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_get_snmp_mib(struct lbs_private *priv, u32 oid, u16 *out_val);
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.h"
#line 1479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_set_power_adapt_cfg(struct lbs_private *priv, int enable, int8_t p0, int8_t p1, int8_t p2);
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.h"
#line 1447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_set_tpc_cfg(struct lbs_private *priv, int enable, int8_t p0, int8_t p1, int8_t p2, int usesnr);
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.h"
#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_set_tx_power(struct lbs_private *priv, s16 dbm);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_cmd_copyback(struct lbs_private *priv, unsigned long extra, struct cmd_header *resp)
{
  #line 37 
  unsigned short __UNIQUE_ID___x446;
  #line 37 
  int tmp;
  #line 35 
  uint16_t copy_len;
  #line 34 
  struct cmd_header *buf = (struct cmd_header *)extra;
  {
    #line 37 
    __UNIQUE_ID___x446 = buf->size;
    #line 37 
    unsigned short __UNIQUE_ID___y447 = resp->size;
    #line 37 
    if ((int)__UNIQUE_ID___x446 < (int)__UNIQUE_ID___y447) 
                                                           #line 37 
                                                           tmp = (int)__UNIQUE_ID___x446; else 
                                                                    #line 37 
                                                                    tmp = (int)__UNIQUE_ID___y447;
    }
  #line 37 
  copy_len = (unsigned short)tmp;
  #line 38 
  memcpy((void *)buf,(void *)resp,(unsigned long)copy_len);
  #line 39 
  return 0;
}

#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
static int lbs_cmd_async_callback(struct lbs_private *priv, unsigned long extra, struct cmd_header *resp)
{
  #line 57 
  return 0;
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
static u8 is_command_allowed_in_ps(u16 cmd)
{
  #line 70 
  switch ((int)cmd) {
    #line 71 
    case 31: 
             #line 71 
    ;
    #line 72 
    return (unsigned char)1U;
    #line 73 
    case 67: 
             #line 73 
    ;
    #line 74 
    return (unsigned char)1U;
    #line 75 
    default: 
             #line 75 
    ;
    #line 76 
    break;
  }
  #line 78 
  return (unsigned char)0U;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_update_hw_spec(struct lbs_private *priv)
{
  #line 98 
  uint16_t __sz;
  #line 91 
  struct cmd_ds_get_hw_spec cmd;
  #line 93 
  u32 i;
  #line 92 
  int ret = -1;
  #line 95 
  memset((void *)(& cmd),0,46UL);
  #line 96 
  cmd.hdr.size = (unsigned short)46U;
  #line 97 
  memcpy((void *)(& cmd.permanentaddr),(void *)(& priv->current_addr),6UL);
  #line 98 
  __sz = cmd.hdr.size;
  #line 98 
  cmd.hdr.size = (unsigned short)46U;
  #line 98 
  ret = __lbs_cmd(priv,(unsigned short)3,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 99 
  if (ret != 0) 
                #line 100 
                goto out;
  #line 102 
  priv->fwcapinfo = cmd.fwcapinfo;
  #line 106 
  priv->fwrelease = cmd.fwrelease;
  #line 107 
  priv->fwrelease = (priv->fwrelease << 8) | (priv->fwrelease << ((unsigned long)8 * sizeof(priv->fwrelease) - (unsigned long)8));
  #line 114 
  netdev_info(priv->dev,(char *)"%pM, fw %u.%u.%up%u, cap 0x%08x\n",(u8 *)(& cmd.permanentaddr),priv->fwrelease >> 24,(priv->fwrelease >> 16) & 255U,(priv->fwrelease >> 8) & 255U,priv->fwrelease & 255U,priv->fwcapinfo);
  #line 121 
  if ((lbs_debug & 16384U) != 0U) {
    #line 121 
    char *tmp_2;
    #line 121 
    ;
    #line 121 
    ;
    #line 121 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 121 
                                                             tmp_2 = (char *)" (INT)"; else 
                                                                    #line 121 
                                                                    tmp_2 = (char *)"";
    #line 121 
    printk((char *)"\001",tmp_2,(int)cmd.hwifversion,(int)cmd.version);
  }
  #line 131 
  if (priv->fwrelease >> 24 == 4U) 
                                   #line 132 
                                   priv->regioncode = (unsigned short)((int)cmd.regioncode >> 8); else 
                                                                    #line 134 
                                                                    priv->regioncode = (unsigned short)((unsigned int)cmd.regioncode & 255U);
  #line 136 
  i = 0U;
  #line 136 
  while (i <= 5U) {
    #line 138 
    if ((int)priv->regioncode == (int)lbs_region_code_to_index[i]) 
                                                                   #line 139 
                                                                   break;
    #line 136 
    i ++;
  }
  #line 143 
  if (i > 5U) {
    #line 144 
    priv->regioncode = (unsigned short)16U;
    #line 145 
    netdev_info(priv->dev,(char *)"unidentified region code; using the default (USA)\n");
  }
  #line 149 
  if ((unsigned int)priv->current_addr[0] == 255U) 
                                                   #line 150 
                                                   __memmove((void *)(& priv->current_addr),(void *)(& cmd.permanentaddr),6UL);
  #line 152 
  if ((unsigned int)priv->copied_hwaddr == 0U) {
    #line 153 
    memcpy((void *)(priv->dev)->dev_addr,(void *)(& priv->current_addr),6UL);
    #line 154 
    if (priv->mesh_dev != (struct net_device *)0) 
                                                  #line 155 
                                                  memcpy((void *)(priv->mesh_dev)->dev_addr,(void *)(& priv->current_addr),6UL);
    #line 157 
    priv->copied_hwaddr = (unsigned char)1U;
  }
  #line 160 
  out: 
       #line 160 
  ;
  #line 161 
  return ret;
}

#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
static int lbs_ret_host_sleep_cfg(struct lbs_private *priv, unsigned long dummy, struct cmd_header *resp)
{
  #line 167 
  if (priv->is_host_sleep_activated != 0) {
    #line 168 
    priv->is_host_sleep_configured = 0;
    #line 169 
    if (priv->psstate == 0U) {
      #line 170 
      priv->is_host_sleep_activated = 0;
      #line 171 
      __wake_up(& priv->host_sleep_q,1U,1,(void *)0);
    }
  }
  else 
       #line 174 
       priv->is_host_sleep_configured = 1;
  #line 177 
  return 0;
}

#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_host_sleep_cfg(struct lbs_private *priv, uint32_t criteria, struct wol_config *p_wol_config)
{
  #line 183 
  struct cmd_ds_host_sleep cmd_config;
  #line 184 
  int ret;
  #line 191 
  if (criteria == 4294967295U && ! priv->ehs_remove_supported) 
                                                               #line 192 
                                                               criteria = 0U;
  #line 194 
  cmd_config.hdr.size = (unsigned short)275U;
  #line 195 
  cmd_config.criteria = criteria;
  #line 196 
  cmd_config.gpio = priv->wol_gpio;
  #line 197 
  cmd_config.gap = (unsigned short)priv->wol_gap;
  #line 199 
  if (p_wol_config != (struct wol_config *)0) 
                                              #line 200 
                                              memcpy((void *)(& cmd_config.wol_conf),(void *)p_wol_config,260UL); else 
                                                                    #line 203 
                                                                    cmd_config.wol_conf.action = (unsigned char)0U;
  #line 205 
  ret = __lbs_cmd(priv,(unsigned short)67,& cmd_config.hdr,(int)cmd_config.hdr.size,& lbs_ret_host_sleep_cfg,0UL);
  #line 208 
  if (ret == 0) {
    #line 209 
    if (p_wol_config != (struct wol_config *)0) 
                                                #line 210 
                                                memcpy((void *)p_wol_config,(void *)(& cmd_config.wol_conf),260UL);
  }
  else 
       #line 214 
       netdev_info(priv->dev,(char *)"HOST_SLEEP_CFG failed %d\n",ret);
  #line 217 
  return ret;
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_set_ps_mode(struct lbs_private *priv, u16 cmd_action, bool block)
{
  #line 233 
  struct cmd_ds_802_11_ps_mode cmd;
  #line 234 
  int ret = 0;
  #line 236 
  memset((void *)(& cmd),0,20UL);
  #line 237 
  cmd.hdr.size = (unsigned short)20U;
  #line 238 
  cmd.action = cmd_action;
  #line 240 
  if ((unsigned int)cmd_action == 48U) {
    #line 241 
    if ((lbs_debug & 16384U) != 0U) {
      #line 241 
      char *tmp_0;
      #line 241 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 241 
                                                               tmp_0 = (char *)" (INT)"; else 
                                                                    #line 241 
                                                                    tmp_0 = (char *)"";
      #line 241 
      printk((char *)"\001",tmp_0);
    }
    #line 242 
    cmd.multipledtim = (unsigned short)1U;
  }
  else 
    #line 243 
    if ((unsigned int)cmd_action == 49U) {
      #line 244 
      if ((lbs_debug & 16384U) != 0U) {
        #line 244 
        char *tmp_2;
        #line 244 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 244 
                                                                 tmp_2 = (char *)" (INT)"; else 
                                                                    #line 244 
                                                                    tmp_2 = (char *)"";
        #line 244 
        printk((char *)"\001",tmp_2);
      }
    }
    else {
      #line 249 
      if ((lbs_debug & 16384U) != 0U) {
        #line 249 
        char *tmp_4;
        #line 249 
        ;
        #line 249 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 249 
                                                                 tmp_4 = (char *)" (INT)"; else 
                                                                    #line 249 
                                                                    tmp_4 = (char *)"";
        #line 249 
        printk((char *)"\001",tmp_4,(int)cmd_action);
      }
      #line 250 
      ret = -95;
      #line 251 
      goto out;
    }
  #line 254 
  if ((int)block != 0) {
    #line 255 
    uint16_t __sz;
    #line 255 
    __sz = cmd.hdr.size;
    #line 255 
    cmd.hdr.size = (unsigned short)20U;
    #line 255 
    ret = __lbs_cmd(priv,(unsigned short)33,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  }
  else 
       #line 257 
       lbs_cmd_async(priv,(unsigned short)33,& cmd.hdr,20);
  #line 259 
  out: 
       #line 259 
  ;
  #line 260 
  return ret;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_cmd_802_11_sleep_params(struct lbs_private *priv, uint16_t cmd_action, struct sleep_params *sp)
{
  #line 282 
  uint16_t __sz;
  #line 266 
  struct cmd_ds_802_11_sleep_params cmd;
  #line 267 
  int ret;
  #line 269 
  if ((unsigned int)cmd_action == 0U) 
                                      #line 270 
                                      memset((void *)(& cmd),0,20UL);
  else {
    #line 272 
    cmd.error = sp->sp_error;
    #line 273 
    cmd.offset = sp->sp_offset;
    #line 274 
    cmd.stabletime = sp->sp_stabletime;
    #line 275 
    cmd.calcontrol = sp->sp_calcontrol;
    #line 276 
    cmd.externalsleepclk = sp->sp_extsleepclk;
    #line 277 
    cmd.reserved = sp->sp_reserved;
  }
  #line 279 
  cmd.hdr.size = (unsigned short)20U;
  #line 280 
  cmd.action = cmd_action;
  #line 282 
  __sz = cmd.hdr.size;
  #line 282 
  cmd.hdr.size = (unsigned short)20U;
  #line 282 
  ret = __lbs_cmd(priv,(unsigned short)102,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 284 
  if (ret == 0) {
    #line 285 
    if ((lbs_debug & 16384U) != 0U) {
      #line 285 
      char *tmp_2;
      #line 285 
      ;
      #line 285 
      ;
      #line 285 
      ;
      #line 285 
      ;
      #line 285 
      ;
      #line 285 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 285 
                                                               tmp_2 = (char *)" (INT)"; else 
                                                                    #line 285 
                                                                    tmp_2 = (char *)"";
      #line 285 
      printk((char *)"\001",tmp_2,(int)cmd.error,(int)cmd.offset,(int)cmd.stabletime,(int)cmd.calcontrol,(int)cmd.externalsleepclk);
    }
    #line 291 
    sp->sp_error = cmd.error;
    #line 292 
    sp->sp_offset = cmd.offset;
    #line 293 
    sp->sp_stabletime = cmd.stabletime;
    #line 294 
    sp->sp_calcontrol = cmd.calcontrol;
    #line 295 
    sp->sp_extsleepclk = cmd.externalsleepclk;
    #line 296 
    sp->sp_reserved = cmd.reserved;
  }
  #line 299 
  return ret;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
static int lbs_wait_for_ds_awake(struct lbs_private *priv)
{
  #line 304 
  int ret = 0;
  #line 306 
  if (priv->is_deep_sleep != 0) {
    #line 307 
    long __ret;
    #line 307 
    __ret = 2500L;
    #line 307 
    __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c",307,0);
    {
      #line 307 
      bool __cond_0;
      #line 307 
      __cond_0 = (_Bool)(priv->is_deep_sleep == 0);
      #line 307 
      if ((int)__cond_0 != 0 && __ret == 0L) 
                                             #line 307 
                                             __ret = 1L;
      #line 307 
      if ((((int)__cond_0 != 0 || __ret == 0L) != 0) == 0) {
        #line 307 
        long __ret_0;
        {
          #line 307 
          struct wait_queue_entry __wq_entry;
          #line 307 
          __ret_0 = 2500L;
          #line 307 
          init_wait_entry(& __wq_entry,0);
          #line 307 
          while (1) {
            #line 307 
            bool __cond;
            #line 307 
            long __int = prepare_to_wait_event(& priv->ds_awake_q,& __wq_entry,1);
            #line 307 
            __cond = (_Bool)(priv->is_deep_sleep == 0);
            #line 307 
            if ((int)__cond != 0 && __ret_0 == 0L) 
                                                   #line 307 
                                                   __ret_0 = 1L;
            #line 307 
            if ((((int)__cond != 0 || __ret_0 == 0L) != 0) != 0) 
                                                                 #line 307 
                                                                 break;
            #line 307 
            if (__int != 0L) {
              #line 307 
              __ret_0 = __int;
              #line 307 
              goto __out_0;
            }
            #line 307 
            __ret_0 = schedule_timeout(__ret_0);
          }
          #line 307 
          finish_wait(& priv->ds_awake_q,& __wq_entry);
          #line 307 
          __out_0: 
                   #line 307 
          ;
          }
        #line 307 
        __ret = __ret_0;
      }
    }
    #line 307 
    if (__ret == 0L) {
      #line 309 
      netdev_err(priv->dev,(char *)"ds_awake_q: timer expired\n");
      #line 310 
      ret = -1;
    }
  }
  #line 314 
  return ret;
}

#line 317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_set_deep_sleep(struct lbs_private *priv, int deep_sleep)
{
  #line 319 
  int ret = 0;
  #line 321 
  if (deep_sleep != 0) 
    #line 322 
    if (priv->is_deep_sleep != 1) {
      #line 323 
      if ((lbs_debug & 16384U) != 0U) {
        #line 323 
        char *tmp_0;
        #line 323 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 323 
                                                                 tmp_0 = (char *)" (INT)"; else 
                                                                    #line 323 
                                                                    tmp_0 = (char *)"";
        #line 323 
        printk((char *)"\001",tmp_0);
      }
      #line 324 
      if ((long)(priv->enter_deep_sleep == (int (*)(struct lbs_private *))0) != 0L) {
        #line 325 
        ldv_inline_asm();
        #line 326 
        ldv_inline_asm();
        #line 327 
        ldv_inline_asm();
        #line 324 
        ;
      }
      #line 325 
      ret = (*(priv->enter_deep_sleep))(priv);
      #line 326 
      if (ret == 0) {
        #line 327 
        netif_stop_queue_4(priv->dev);
        #line 328 
        netif_carrier_off(priv->dev);
      }
    }
    else 
         #line 331 
         netdev_err(priv->dev,(char *)"deep sleep: already enabled\n");
  else 
    #line 334 
    if (priv->is_deep_sleep != 0) {
      #line 335 
      if ((lbs_debug & 16384U) != 0U) {
        #line 335 
        char *tmp_2;
        #line 335 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 335 
                                                                 tmp_2 = (char *)" (INT)"; else 
                                                                    #line 335 
                                                                    tmp_2 = (char *)"";
        #line 335 
        printk((char *)"\001",tmp_2);
      }
      #line 336 
      if ((long)(priv->exit_deep_sleep == (int (*)(struct lbs_private *))0) != 0L) {
        #line 337 
        ldv_inline_asm();
        #line 338 
        ldv_inline_asm();
        #line 339 
        ldv_inline_asm();
        #line 336 
        ;
      }
      #line 337 
      ret = (*(priv->exit_deep_sleep))(priv);
      #line 338 
      if (ret == 0) {
        #line 339 
        ret = lbs_wait_for_ds_awake(priv);
        #line 340 
        if (ret != 0) 
                      #line 341 
                      netdev_err(priv->dev,(char *)"deep sleep: wakeup failed\n");
      }
    }
  #line 347 
  return ret;
}

#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
static int lbs_ret_host_sleep_activate(struct lbs_private *priv, unsigned long dummy, struct cmd_header *cmd)
{
  #line 354 
  priv->is_host_sleep_activated = 1;
  #line 355 
  __wake_up(& priv->host_sleep_q,1U,1,(void *)0);
  #line 357 
  return 0;
}

#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_set_host_sleep(struct lbs_private *priv, int host_sleep)
{
  #line 362 
  struct cmd_header cmd;
  #line 363 
  int ret = 0;
  #line 364 
  uint32_t criteria = 4294967295U;
  #line 366 
  if (host_sleep != 0) 
    #line 367 
    if (priv->is_host_sleep_activated != 1) {
      #line 389 
      long __ret;
      #line 368 
      memset((void *)(& cmd),0,8UL);
      #line 369 
      ret = lbs_host_sleep_cfg(priv,priv->wol_criteria,(struct wol_config *)0);
      #line 371 
      if (ret != 0) {
        #line 372 
        netdev_info(priv->dev,(char *)"Host sleep configuration failed: %d\n",ret);
        #line 375 
        return ret;
      }
      #line 377 
      if (priv->psstate == 0U) {
        #line 378 
        ret = __lbs_cmd(priv,(unsigned short)69,& cmd,8,& lbs_ret_host_sleep_activate,0UL);
        #line 383 
        if (ret != 0) 
                      #line 384 
                      netdev_info(priv->dev,(char *)"HOST_SLEEP_ACTIVATE failed: %d\n",ret);
      }
      #line 389 
      __ret = 2500L;
      #line 389 
      __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c",389,0);
      {
        #line 389 
        bool __cond_0;
        #line 389 
        __cond_0 = (_Bool)(priv->is_host_sleep_activated != 0);
        #line 389 
        if ((int)__cond_0 != 0 && __ret == 0L) 
                                               #line 389 
                                               __ret = 1L;
        #line 389 
        if ((((int)__cond_0 != 0 || __ret == 0L) != 0) == 0) {
          #line 389 
          long __ret_0;
          {
            #line 389 
            struct wait_queue_entry __wq_entry;
            #line 389 
            __ret_0 = 2500L;
            #line 389 
            init_wait_entry(& __wq_entry,0);
            #line 389 
            while (1) {
              #line 389 
              bool __cond;
              #line 389 
              long __int = prepare_to_wait_event(& priv->host_sleep_q,& __wq_entry,1);
              #line 389 
              __cond = (_Bool)(priv->is_host_sleep_activated != 0);
              #line 389 
              if ((int)__cond != 0 && __ret_0 == 0L) 
                                                     #line 389 
                                                     __ret_0 = 1L;
              #line 389 
              if ((((int)__cond != 0 || __ret_0 == 0L) != 0) != 0) 
                                                                   #line 389 
                                                                   break;
              #line 389 
              if (__int != 0L) {
                #line 389 
                __ret_0 = __int;
                #line 389 
                goto __out_0;
              }
              #line 389 
              __ret_0 = schedule_timeout(__ret_0);
            }
            #line 389 
            finish_wait(& priv->host_sleep_q,& __wq_entry);
            #line 389 
            __out_0: 
                     #line 389 
            ;
            }
          #line 389 
          __ret = __ret_0;
        }
      }
      #line 389 
      if (__ret == 0L) {
        #line 393 
        netdev_err(priv->dev,(char *)"host_sleep_q: timer expired\n");
        #line 395 
        ret = -1;
      }
    }
    else 
         #line 398 
         netdev_err(priv->dev,(char *)"host sleep: already enabled\n");
  else 
    #line 401 
    if (priv->is_host_sleep_activated != 0) 
                                            #line 402 
                                            ret = lbs_host_sleep_cfg(priv,criteria,(struct wol_config *)0);
  #line 406 
  return ret;
}

#line 418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_set_snmp_mib(struct lbs_private *priv, u32 oid, u16 val)
{
  #line 450 
  uint16_t __sz;
  #line 420 
  struct cmd_ds_802_11_snmp_mib cmd;
  #line 421 
  int ret;
  #line 423 
  memset((void *)(& cmd),0,142UL);
  #line 424 
  cmd.hdr.size = (unsigned short)142U;
  #line 425 
  cmd.action = (unsigned short)1U;
  #line 426 
  cmd.oid = (unsigned short)oid;
  #line 428 
  switch (oid) {
    #line 429 
    case (u32)0: 
                 #line 429 
    ;
    #line 430 
    cmd.bufsize = (unsigned short)1U;
    #line 431 
    cmd.value[0] = (unsigned char)val;
    #line 432 
    break;
    #line 433 
    case (u32)9: 
                 #line 433 
    ;
    #line 434 
    case (u32)8: 
                 #line 434 
    ;
    #line 435 
    case (u32)5: 
                 #line 435 
    ;
    #line 436 
    case (u32)6: 
                 #line 436 
    ;
    #line 437 
    case (u32)7: 
                 #line 437 
    ;
    #line 438 
    cmd.bufsize = (unsigned short)2U;
    #line 439 
    *((__le16 *)(& cmd.value)) = val;
    #line 440 
    break;
    #line 441 
    default: 
             #line 441 
    ;
    #line 442 
    if ((lbs_debug & 16384U) != 0U) {
      #line 442 
      char *tmp_0;
      #line 442 
      ;
      #line 442 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 442 
                                                               tmp_0 = (char *)" (INT)"; else 
                                                                    #line 442 
                                                                    tmp_0 = (char *)"";
      #line 442 
      printk((char *)"\001",tmp_0,oid);
    }
    #line 443 
    ret = -22;
    #line 444 
    goto out;
  }
  #line 447 
  if ((lbs_debug & 16384U) != 0U) {
    #line 447 
    char *tmp_2;
    #line 447 
    ;
    #line 447 
    ;
    #line 447 
    ;
    #line 447 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 447 
                                                             tmp_2 = (char *)" (INT)"; else 
                                                                    #line 447 
                                                                    tmp_2 = (char *)"";
    #line 447 
    printk((char *)"\001",tmp_2,(int)cmd.oid,(int)cmd.bufsize,(int)val);
  }
  #line 450 
  __sz = cmd.hdr.size;
  #line 450 
  cmd.hdr.size = (unsigned short)142U;
  #line 450 
  ret = __lbs_cmd(priv,(unsigned short)22,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 452 
  out: 
       #line 452 
  ;
  #line 453 
  return ret;
}

#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_get_snmp_mib(struct lbs_private *priv, u32 oid, u16 *out_val)
{
  #line 475 
  uint16_t __sz;
  #line 467 
  struct cmd_ds_802_11_snmp_mib cmd;
  #line 468 
  int ret;
  #line 470 
  memset((void *)(& cmd),0,142UL);
  #line 471 
  cmd.hdr.size = (unsigned short)142U;
  #line 472 
  cmd.action = (unsigned short)0U;
  #line 473 
  cmd.oid = (unsigned short)oid;
  #line 475 
  __sz = cmd.hdr.size;
  #line 475 
  cmd.hdr.size = (unsigned short)142U;
  #line 475 
  ret = __lbs_cmd(priv,(unsigned short)22,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 476 
  if (ret != 0) 
                #line 477 
                goto out;
  #line 479 
  switch ((int)cmd.bufsize) {
    #line 480 
    case 1: 
            #line 480 
    ;
    #line 481 
    *out_val = (unsigned short)cmd.value[0];
    #line 482 
    break;
    #line 483 
    case 2: 
            #line 483 
    ;
    #line 484 
    *out_val = *((__le16 *)(& cmd.value));
    #line 485 
    break;
    #line 486 
    default: 
             #line 486 
    ;
    #line 487 
    if ((lbs_debug & 16384U) != 0U) {
      #line 487 
      char *tmp_2;
      #line 487 
      ;
      #line 487 
      ;
      #line 487 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 487 
                                                               tmp_2 = (char *)" (INT)"; else 
                                                                    #line 487 
                                                                    tmp_2 = (char *)"";
      #line 487 
      printk((char *)"\001",tmp_2,oid,(int)cmd.bufsize);
    }
    #line 489 
    break;
  }
  #line 492 
  out: 
       #line 492 
  ;
  #line 493 
  return ret;
}

#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_get_tx_power(struct lbs_private *priv, s16 *curlevel, s16 *minlevel, s16 *maxlevel)
{
  #line 516 
  uint16_t __sz;
  #line 509 
  struct cmd_ds_802_11_rf_tx_power cmd;
  #line 510 
  int ret;
  #line 512 
  memset((void *)(& cmd),0,14UL);
  #line 513 
  cmd.hdr.size = (unsigned short)14U;
  #line 514 
  cmd.action = (unsigned short)0U;
  #line 516 
  __sz = cmd.hdr.size;
  #line 516 
  cmd.hdr.size = (unsigned short)14U;
  #line 516 
  ret = __lbs_cmd(priv,(unsigned short)30,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 517 
  if (ret == 0) {
    #line 518 
    *curlevel = (short)cmd.curlevel;
    #line 519 
    if (minlevel != (s16 *)0) 
                              #line 520 
                              *minlevel = (short)cmd.minlevel;
    #line 521 
    if (maxlevel != (s16 *)0) 
                              #line 522 
                              *maxlevel = (short)cmd.maxlevel;
  }
  #line 525 
  return ret;
}

#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_set_tx_power(struct lbs_private *priv, s16 dbm)
{
  #line 548 
  uint16_t __sz;
  #line 538 
  struct cmd_ds_802_11_rf_tx_power cmd;
  #line 539 
  int ret;
  #line 541 
  memset((void *)(& cmd),0,14UL);
  #line 542 
  cmd.hdr.size = (unsigned short)14U;
  #line 543 
  cmd.action = (unsigned short)1U;
  #line 544 
  cmd.curlevel = (unsigned short)dbm;
  #line 546 
  if ((lbs_debug & 16384U) != 0U) {
    #line 546 
    char *tmp_0;
    #line 546 
    ;
    #line 546 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 546 
                                                             tmp_0 = (char *)" (INT)"; else 
                                                                    #line 546 
                                                                    tmp_0 = (char *)"";
    #line 546 
    printk((char *)"\001",tmp_0,(int)dbm);
  }
  #line 548 
  __sz = cmd.hdr.size;
  #line 548 
  cmd.hdr.size = (unsigned short)14U;
  #line 548 
  ret = __lbs_cmd(priv,(unsigned short)30,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 550 
  return ret;
}

#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_set_monitor_mode(struct lbs_private *priv, int enable)
{
  #line 575 
  uint16_t __sz;
  #line 564 
  struct cmd_ds_802_11_monitor_mode cmd;
  #line 565 
  int ret;
  #line 567 
  memset((void *)(& cmd),0,12UL);
  #line 568 
  cmd.hdr.size = (unsigned short)12U;
  #line 569 
  cmd.action = (unsigned short)1U;
  #line 570 
  if (enable != 0) 
                   #line 571 
                   cmd.mode = (unsigned short)1U;
  #line 573 
  if ((lbs_debug & 16384U) != 0U) {
    #line 573 
    char *tmp_0;
    #line 573 
    ;
    #line 573 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 573 
                                                             tmp_0 = (char *)" (INT)"; else 
                                                                    #line 573 
                                                                    tmp_0 = (char *)"";
    #line 573 
    printk((char *)"\001",tmp_0,enable);
  }
  #line 575 
  __sz = cmd.hdr.size;
  #line 575 
  cmd.hdr.size = (unsigned short)12U;
  #line 575 
  ret = __lbs_cmd(priv,(unsigned short)152,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 576 
  if (ret == 0) 
    #line 577 
    if (enable != 0) 
                     #line 577 
                     (priv->dev)->type = (unsigned short)803U; else 
                                                                    #line 577 
                                                                    (priv->dev)->type = (unsigned short)1U;
  #line 581 
  return ret;
}

#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
static int lbs_get_channel(struct lbs_private *priv)
{
  #line 600 
  uint16_t __sz;
  #line 593 
  struct cmd_ds_802_11_rf_channel cmd;
  #line 594 
  int ret = 0;
  #line 596 
  memset((void *)(& cmd),0,48UL);
  #line 597 
  cmd.hdr.size = (unsigned short)48U;
  #line 598 
  cmd.action = (unsigned short)0U;
  #line 600 
  __sz = cmd.hdr.size;
  #line 600 
  cmd.hdr.size = (unsigned short)48U;
  #line 600 
  ret = __lbs_cmd(priv,(unsigned short)29,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 601 
  if (ret != 0) 
                #line 602 
                goto out;
  #line 604 
  ret = (int)cmd.channel;
  #line 605 
  if ((lbs_debug & 16384U) != 0U) {
    #line 605 
    char *tmp_2;
    #line 605 
    ;
    #line 605 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 605 
                                                             tmp_2 = (char *)" (INT)"; else 
                                                                    #line 605 
                                                                    tmp_2 = (char *)"";
    #line 605 
    printk((char *)"\001",tmp_2,ret);
  }
  #line 607 
  out: 
       #line 607 
  ;
  #line 608 
  return ret;
}

#line 611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_update_channel(struct lbs_private *priv)
{
  #line 613 
  int ret;
  #line 616 
  ret = lbs_get_channel(priv);
  #line 617 
  if (ret > 0) {
    #line 618 
    priv->channel = (unsigned char)ret;
    #line 619 
    ret = 0;
  }
  #line 622 
  return ret;
}

#line 633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_set_channel(struct lbs_private *priv, u8 channel)
{
  #line 646 
  uint16_t __sz;
  #line 635 
  struct cmd_ds_802_11_rf_channel cmd;
  #line 637 
  u8 old_channel = priv->channel;
  #line 639 
  int ret = 0;
  #line 641 
  memset((void *)(& cmd),0,48UL);
  #line 642 
  cmd.hdr.size = (unsigned short)48U;
  #line 643 
  cmd.action = (unsigned short)1U;
  #line 644 
  cmd.channel = (unsigned short)channel;
  #line 646 
  __sz = cmd.hdr.size;
  #line 646 
  cmd.hdr.size = (unsigned short)48U;
  #line 646 
  ret = __lbs_cmd(priv,(unsigned short)29,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 647 
  if (ret != 0) 
                #line 648 
                goto out;
  #line 650 
  priv->channel = (unsigned char)cmd.channel;
  #line 651 
  if ((lbs_debug & 16384U) != 0U) {
    #line 651 
    char *tmp_2;
    #line 651 
    ;
    #line 651 
    ;
    #line 651 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 651 
                                                             tmp_2 = (char *)" (INT)"; else 
                                                                    #line 651 
                                                                    tmp_2 = (char *)"";
    #line 651 
    printk((char *)"\001",tmp_2,(int)old_channel,(int)priv->channel);
  }
  #line 654 
  out: 
       #line 654 
  ;
  #line 655 
  return ret;
}

#line 667  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_get_rssi(struct lbs_private *priv, s8 *rssi, s8 *nf)
{
  #line 680 
  uint16_t __sz;
  #line 669 
  struct cmd_ds_802_11_rssi cmd;
  #line 670 
  int ret = 0;
  #line 672 
  if ((long)(rssi == (s8 *)0) != 0L) {
    #line 673 
    ldv_inline_asm();
    #line 674 
    ldv_inline_asm();
    #line 675 
    ldv_inline_asm();
    #line 672 
    ;
  }
  #line 673 
  if ((long)(nf == (s8 *)0) != 0L) {
    #line 674 
    ldv_inline_asm();
    #line 675 
    ldv_inline_asm();
    #line 676 
    ldv_inline_asm();
    #line 673 
    ;
  }
  #line 675 
  memset((void *)(& cmd),0,16UL);
  #line 676 
  cmd.hdr.size = (unsigned short)16U;
  #line 678 
  cmd.n_or_snr = (unsigned short)8U;
  #line 680 
  __sz = cmd.hdr.size;
  #line 680 
  cmd.hdr.size = (unsigned short)16U;
  #line 680 
  ret = __lbs_cmd(priv,(unsigned short)31,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 681 
  if (ret == 0) {
    #line 682 
    *nf = (signed char)(- ((int)cmd.nf));
    #line 683 
    *rssi = (signed char)((int)cmd.n_or_snr - (int)cmd.nf);
  }
  #line 686 
  return ret;
}

#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_set_11d_domain_info(struct lbs_private *priv)
{
  #line 806 
  uint16_t __sz;
  #line 701 
  struct cmd_ds_802_11d_domain_info cmd;
  #line 703 
  struct ieee80211_country_ie_triplet *t;
  #line 704 
  enum nl80211_band band;
  #line 705 
  struct ieee80211_channel *ch;
  #line 709 
  u8 i;
  #line 710 
  size_t triplet_size;
  #line 699 
  struct wiphy *wiphy = (priv->wdev)->wiphy;
  #line 700 
  struct ieee80211_supported_band **bands = (struct ieee80211_supported_band **)(& wiphy->bands);
  #line 702 
  struct mrvl_ie_domain_param_set *domain = & cmd.domain;
  #line 706 
  u8 num_triplet = (unsigned char)0U;
  #line 707 
  u8 num_parsed_chan = (unsigned char)0U;
  #line 708 
  u8 first_channel = (unsigned char)0U;
  #line 708 
  u8 next_chan = (unsigned char)0U;
  #line 708 
  u8 max_pwr = (unsigned char)0U;
  #line 709 
  u8 flag = (unsigned char)0U;
  #line 711 
  int ret = 0;
  #line 713 
  if ((unsigned int)priv->country_code[0] == 0U) 
                                                 #line 714 
                                                 goto out;
  #line 716 
  memset((void *)(& cmd),0,266UL);
  #line 717 
  cmd.action = (unsigned short)1U;
  #line 719 
  if ((lbs_debug & 1024U) != 0U) {
    #line 719 
    char *tmp_0;
    #line 719 
    ;
    #line 719 
    ;
    #line 719 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 719 
                                                             tmp_0 = (char *)" (INT)"; else 
                                                                    #line 719 
                                                                    tmp_0 = (char *)"";
    #line 719 
    printk((char *)"\001",tmp_0,(int)priv->country_code[0],(int)priv->country_code[1]);
  }
  #line 722 
  domain->header.type = (unsigned short)7U;
  #line 725 
  domain->country_code[0] = priv->country_code[0];
  #line 726 
  domain->country_code[1] = priv->country_code[1];
  #line 727 
  domain->country_code[2] = (unsigned char)32U;
  #line 736 
  band = NL80211_BAND_2GHZ;
  #line 736 
  while (band <= (unsigned int)NL80211_BAND_6GHZ && (unsigned int)num_triplet <= 82U) {
    #line 740 
    if (*(bands + (unsigned long)band) == (struct ieee80211_supported_band *)0) 
      #line 741 
      goto __Cont;
    #line 743 
    i = (unsigned char)0U;
    #line 743 
    while ((int)i < (*(bands + (unsigned long)band))->n_channels && (unsigned int)num_triplet <= 82U) {
      #line 746 
      ch = (*(bands + (unsigned long)band))->channels + (unsigned long)i;
      #line 747 
      if ((ch->flags & 1U) != 0U) 
                                  #line 748 
                                  goto __Cont_0;
      #line 750 
      if ((unsigned int)flag == 0U) {
        #line 751 
        flag = (unsigned char)1U;
        #line 752 
        first_channel = (unsigned char)ch->hw_value;
        #line 752 
        next_chan = first_channel;
        #line 753 
        max_pwr = (unsigned char)ch->max_power;
        #line 754 
        num_parsed_chan = (unsigned char)1U;
        #line 755 
        goto __Cont_0;
      }
      #line 758 
      if ((int)ch->hw_value == (int)next_chan + 1 && ch->max_power == (int)max_pwr) {
        #line 761 
        next_chan = (u8)((int)next_chan + 1);
        #line 762 
        num_parsed_chan = (u8)((int)num_parsed_chan + 1);
      }
      else {
        #line 765 
        if ((lbs_debug & 1024U) != 0U) {
          #line 765 
          char *tmp_2;
          #line 765 
          ;
          #line 765 
          ;
          #line 765 
          ;
          #line 765 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 765 
                                                                   tmp_2 = (char *)" (INT)"; else 
                                                                    #line 765 
                                                                    tmp_2 = (char *)"";
          #line 765 
          printk((char *)"\001",tmp_2,(int)first_channel,(int)num_parsed_chan,(int)max_pwr);
        }
        #line 768 
        t = & domain->triplet[(int)num_triplet];
        #line 769 
        t->__anonCompField_ieee80211_country_ie_triplet_163.chans.first_channel = first_channel;
        #line 770 
        t->__anonCompField_ieee80211_country_ie_triplet_163.chans.num_channels = num_parsed_chan;
        #line 771 
        t->__anonCompField_ieee80211_country_ie_triplet_163.chans.max_power = (signed char)max_pwr;
        #line 772 
        num_triplet = (u8)((int)num_triplet + 1);
        #line 773 
        flag = (unsigned char)0U;
      }
      #line 743 
      __Cont_0: 
                #line 744 
      i = (u8)((int)i + 1);
    }
    #line 777 
    if ((unsigned int)flag != 0U) {
      #line 779 
      if ((lbs_debug & 1024U) != 0U) {
        #line 779 
        char *tmp_4;
        #line 779 
        ;
        #line 779 
        ;
        #line 779 
        ;
        #line 779 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 779 
                                                                 tmp_4 = (char *)" (INT)"; else 
                                                                    #line 779 
                                                                    tmp_4 = (char *)"";
        #line 779 
        printk((char *)"\001",tmp_4,(int)first_channel,(int)num_parsed_chan,(int)max_pwr);
      }
      #line 781 
      t = & domain->triplet[(int)num_triplet];
      #line 782 
      t->__anonCompField_ieee80211_country_ie_triplet_163.chans.first_channel = first_channel;
      #line 783 
      t->__anonCompField_ieee80211_country_ie_triplet_163.chans.num_channels = num_parsed_chan;
      #line 784 
      t->__anonCompField_ieee80211_country_ie_triplet_163.chans.max_power = (signed char)max_pwr;
      #line 785 
      num_triplet = (u8)((int)num_triplet + 1);
    }
    #line 736 
    __Cont: 
            #line 737 
    band ++;
  }
  #line 789 
  if ((lbs_debug & 1024U) != 0U) {
    #line 789 
    char *tmp_6;
    #line 789 
    ;
    #line 789 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 789 
                                                             tmp_6 = (char *)" (INT)"; else 
                                                                    #line 789 
                                                                    tmp_6 = (char *)"";
    #line 789 
    printk((char *)"\001",tmp_6,(int)num_triplet);
  }
  #line 792 
  triplet_size = (unsigned long)num_triplet * 3UL;
  #line 793 
  domain->header.len = (unsigned short)((unsigned int)((unsigned short)triplet_size) + 3U);
  #line 796 
  lbs_deb_hex(1024U,(char *)"802.11D domain param set",(u8 *)(& cmd.domain.country_code),(int)domain->header.len);
  #line 800 
  cmd.hdr.size = (unsigned short)((unsigned int)((unsigned short)triplet_size) + 17U);
  #line 806 
  __sz = cmd.hdr.size;
  #line 806 
  cmd.hdr.size = (unsigned short)266U;
  #line 806 
  ret = __lbs_cmd(priv,(unsigned short)91,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 808 
  out: 
       #line 808 
  ;
  #line 809 
  return ret;
}

#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_get_reg(struct lbs_private *priv, u16 reg, u16 offset, u32 *value)
{
  #line 842 
  uint16_t __sz;
  #line 825 
  struct cmd_ds_reg_access cmd;
  #line 826 
  int ret = 0;
  #line 828 
  if ((long)(value == (u32 *)0U) != 0L) {
    #line 829 
    ldv_inline_asm();
    #line 830 
    ldv_inline_asm();
    #line 831 
    ldv_inline_asm();
    #line 828 
    ;
  }
  #line 830 
  memset((void *)(& cmd),0,16UL);
  #line 831 
  cmd.hdr.size = (unsigned short)16U;
  #line 832 
  cmd.action = (unsigned short)0U;
  #line 833 
  cmd.offset = offset;
  #line 835 
  if ((unsigned int)reg + 65511U > 2U) {
    #line 838 
    ret = -22;
    #line 839 
    goto out;
  }
  #line 842 
  __sz = cmd.hdr.size;
  #line 842 
  cmd.hdr.size = (unsigned short)16U;
  #line 842 
  ret = __lbs_cmd(priv,(unsigned short)((int)reg),& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 843 
  if (ret == 0) 
    #line 844 
    if ((unsigned int)reg + 65510U <= 1U) 
                                          #line 845 
                                          *value = (unsigned int)cmd.value.bbp_rf;
    else 
      #line 846 
      if ((unsigned int)reg == 25U) 
                                    #line 847 
                                    *value = cmd.value.mac;
  #line 850 
  out: 
       #line 850 
  ;
  #line 851 
  return ret;
}

#line 865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_set_reg(struct lbs_private *priv, u16 reg, u16 offset, u32 value)
{
  #line 884 
  uint16_t __sz;
  #line 867 
  struct cmd_ds_reg_access cmd;
  #line 868 
  int ret = 0;
  #line 870 
  memset((void *)(& cmd),0,16UL);
  #line 871 
  cmd.hdr.size = (unsigned short)16U;
  #line 872 
  cmd.action = (unsigned short)1U;
  #line 873 
  cmd.offset = offset;
  #line 875 
  if ((unsigned int)reg + 65510U <= 1U) 
                                        #line 876 
                                        cmd.value.bbp_rf = (unsigned char)value;
  else 
    #line 877 
    if ((unsigned int)reg == 25U) 
                                  #line 878 
                                  cmd.value.mac = value;
    else {
      #line 880 
      ret = -22;
      #line 881 
      goto out;
    }
  #line 884 
  __sz = cmd.hdr.size;
  #line 884 
  cmd.hdr.size = (unsigned short)16U;
  #line 884 
  ret = __lbs_cmd(priv,(unsigned short)((int)reg),& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 886 
  out: 
       #line 886 
  ;
  #line 887 
  return ret;
}

#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
static void lbs_queue_cmd(struct lbs_private *priv, struct cmd_ctrl_node *cmdnode)
{
  #line 893 
  unsigned long flags;
  #line 894 
  int addtail = 1;
  #line 896 
  if (cmdnode == (struct cmd_ctrl_node *)0) {
    #line 897 
    if ((lbs_debug & 8192U) != 0U) {
      #line 897 
      char *tmp_0;
      #line 897 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 897 
                                                               tmp_0 = (char *)" (INT)"; else 
                                                                    #line 897 
                                                                    tmp_0 = (char *)"";
      #line 897 
      printk((char *)"\001",tmp_0);
    }
    #line 898 
    return;
  }
  #line 900 
  if ((unsigned int)(cmdnode->cmdbuf)->size == 0U) {
    #line 901 
    if ((lbs_debug & 8192U) != 0U) {
      #line 901 
      char *tmp_2;
      #line 901 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 901 
                                                               tmp_2 = (char *)" (INT)"; else 
                                                                    #line 901 
                                                                    tmp_2 = (char *)"";
      #line 901 
      printk((char *)"\001",tmp_2);
    }
    #line 902 
    return;
  }
  #line 904 
  cmdnode->result = 0;
  #line 907 
  if ((unsigned int)(cmdnode->cmdbuf)->command == 33U) {
    #line 908 
    struct cmd_ds_802_11_ps_mode *psm = (struct cmd_ds_802_11_ps_mode *)cmdnode->cmdbuf;
    #line 910 
    if ((unsigned int)psm->action == 49U) 
      #line 911 
      if (priv->psstate != 0U) 
                               #line 912 
                               addtail = 0;
  }
  #line 916 
  if ((unsigned int)(cmdnode->cmdbuf)->command == 68U) 
                                                       #line 917 
                                                       addtail = 0;
  #line 919 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_3(& priv->driver_lock);
  #line 921 
  if (addtail != 0) 
                    #line 922 
                    list_add_tail(& cmdnode->list,& priv->cmdpendingq); else 
                                                                    #line 924 
                                                                    list_add(& cmdnode->list,& priv->cmdpendingq);
  #line 926 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_3(& priv->driver_lock,flags);
  #line 928 
  if ((lbs_debug & 8192U) != 0U) {
    #line 928 
    char *tmp_4;
    #line 928 
    ;
    #line 928 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 928 
                                                             tmp_4 = (char *)" (INT)"; else 
                                                                    #line 928 
                                                                    tmp_4 = (char *)"";
    #line 928 
    printk((char *)"\001",tmp_4,(int)(cmdnode->cmdbuf)->command);
  }
  #line 929 
  return;
}

#line 932  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
static void lbs_submit_command(struct lbs_private *priv, struct cmd_ctrl_node *cmdnode)
{
  #line 935 
  unsigned long flags;
  #line 936 
  struct cmd_header *cmd;
  #line 937 
  uint16_t cmdsize;
  #line 938 
  uint16_t command;
  #line 940 
  int ret;
  #line 939 
  int timeo = 750;
  #line 942 
  cmd = cmdnode->cmdbuf;
  #line 944 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_3(& priv->driver_lock);
  #line 945 
  priv->seqnum = (u16)((int)priv->seqnum + 1);
  #line 946 
  cmd->seqnum = priv->seqnum;
  #line 947 
  priv->cur_cmd = cmdnode;
  #line 948 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_3(& priv->driver_lock,flags);
  #line 950 
  cmdsize = cmd->size;
  #line 951 
  command = cmd->command;
  #line 954 
  if ((unsigned int)command == 6U || (unsigned int)command == 80U) 
                                                                   #line 955 
                                                                   timeo = 1250;
  #line 957 
  if ((lbs_debug & 16384U) != 0U) {
    #line 957 
    char *tmp_0;
    #line 957 
    ;
    #line 957 
    ;
    #line 957 
    ;
    #line 957 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 957 
                                                             tmp_0 = (char *)" (INT)"; else 
                                                                    #line 957 
                                                                    tmp_0 = (char *)"";
    #line 957 
    printk((char *)"\001",tmp_0,(int)command,(int)cmd->seqnum,(int)cmdsize);
  }
  #line 959 
  lbs_deb_hex(16384U,(char *)"DNLD_CMD",(u8 *)cmdnode->cmdbuf,(int)cmdsize);
  #line 961 
  ret = (*(priv->hw_host_to_card))(priv,(unsigned char)1,(u8 *)cmd,(unsigned short)((int)cmdsize));
  #line 963 
  if (ret != 0) {
    #line 964 
    netdev_info(priv->dev,(char *)"DNLD_CMD: hw_host_to_card failed: %d\n",ret);
    #line 967 
    priv->dnld_sent = (unsigned char)0U;
    #line 968 
    lbs_complete_command(priv,cmdnode,ret);
  }
  #line 971 
  if ((unsigned int)command == 62U) {
    #line 972 
    if (priv->is_auto_deep_sleep_enabled != 0) {
      #line 973 
      priv->wakeup_dev_required = 1;
      #line 974 
      priv->dnld_sent = (unsigned char)0U;
    }
    #line 976 
    priv->is_deep_sleep = 1;
    #line 977 
    lbs_complete_command(priv,cmdnode,0);
  }
  else 
       #line 980 
       cif_mod_timer_0(& priv->command_timer,(unsigned long)timeo + jiffies);
  #line 981 
  return;
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
static void __lbs_cleanup_and_insert_cmd(struct lbs_private *priv, struct cmd_ctrl_node *cmdnode)
{
  #line 991 
  if (cmdnode == (struct cmd_ctrl_node *)0) 
                                            #line 992 
                                            return;
  #line 994 
  cmdnode->callback = (int (*)(struct lbs_private *, unsigned long , struct cmd_header *))0;
  #line 995 
  cmdnode->callback_arg = 0UL;
  #line 997 
  memset((void *)cmdnode->cmdbuf,0,2048UL);
  #line 999 
  list_add_tail(& cmdnode->list,& priv->cmdfreeq);
  #line 1000 
  return;
}

#line 1002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
static void lbs_cleanup_and_insert_cmd(struct lbs_private *priv, struct cmd_ctrl_node *ptempcmd)
{
  #line 1005 
  unsigned long flags;
  #line 1007 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_3(& priv->driver_lock);
  #line 1008 
  __lbs_cleanup_and_insert_cmd(priv,ptempcmd);
  #line 1009 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_3(& priv->driver_lock,flags);
  #line 1010 
  return;
}

#line 1012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
void __lbs_complete_command(struct lbs_private *priv, struct cmd_ctrl_node *cmd, int result)
{
  #line 1021 
  list_del_init(& cmd->list);
  #line 1023 
  cmd->result = result;
  #line 1024 
  cmd->cmdwaitqwoken = (unsigned short)1U;
  #line 1025 
  __wake_up(& cmd->cmdwait_q,3U,1,(void *)0);
  #line 1027 
  if (cmd->callback == (int (*)(struct lbs_private *, unsigned long , struct cmd_header *))0 || cmd->callback == & lbs_cmd_async_callback) 
    #line 1028 
    __lbs_cleanup_and_insert_cmd(priv,cmd);
  #line 1029 
  priv->cur_cmd = (struct cmd_ctrl_node *)0;
  #line 1030 
  __wake_up(& priv->waitq,3U,1,(void *)0);
  #line 1031 
  return;
}

#line 1033  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
void lbs_complete_command(struct lbs_private *priv, struct cmd_ctrl_node *cmd, int result)
{
  #line 1036 
  unsigned long flags;
  #line 1037 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_3(& priv->driver_lock);
  #line 1038 
  __lbs_complete_command(priv,cmd,result);
  #line 1039 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_3(& priv->driver_lock,flags);
  #line 1040 
  return;
}

#line 1042  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_set_radio(struct lbs_private *priv, u8 preamble, u8 radio_on)
{
  #line 1076 
  uint16_t __sz;
  #line 1044 
  struct cmd_ds_802_11_radio_control cmd;
  #line 1045 
  int ret = -22;
  #line 1047 
  cmd.hdr.size = (unsigned short)12U;
  #line 1048 
  cmd.action = (unsigned short)1U;
  #line 1049 
  cmd.control = (unsigned short)0U;
  #line 1052 
  if (priv->fwrelease <= 150994943U) 
    #line 1053 
    switch ((int)preamble) {
      #line 1054 
      case 2: 
              #line 1054 
      ;
      #line 1055 
      case 4: 
              #line 1055 
      ;
      #line 1056 
      case 0: 
              #line 1056 
      ;
      #line 1057 
      cmd.control = (unsigned short)preamble;
      #line 1058 
      break;
      #line 1059 
      default: 
               #line 1059 
      ;
      #line 1060 
      goto out;
    }
  #line 1064 
  if ((unsigned int)radio_on != 0U) 
                                    #line 1065 
                                    cmd.control = (unsigned short)((unsigned int)cmd.control | 1U);
  else {
    #line 1067 
    cmd.control = (unsigned short)((unsigned int)cmd.control & 65534U);
    #line 1068 
    priv->txpower_cur = (short)0;
  }
  #line 1071 
  if ((lbs_debug & 16384U) != 0U) {
    #line 1071 
    char *tmp;
    #line 1071 
    char *tmp_1;
    #line 1071 
    ;
    #line 1071 
    if ((unsigned int)radio_on != 0U) 
                                      #line 1071 
                                      tmp = (char *)"ON"; else 
                                                               #line 1071 
                                                               tmp = (char *)"OFF";
    #line 1071 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1071 
                                                             tmp_1 = (char *)" (INT)"; else 
                                                                    #line 1071 
                                                                    tmp_1 = (char *)"";
    #line 1071 
    printk((char *)"\001",tmp_1,tmp,(int)preamble);
  }
  #line 1074 
  priv->radio_on = radio_on;
  #line 1076 
  __sz = cmd.hdr.size;
  #line 1076 
  cmd.hdr.size = (unsigned short)12U;
  #line 1076 
  ret = __lbs_cmd(priv,(unsigned short)28,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 1078 
  out: 
       #line 1078 
  ;
  #line 1079 
  return ret;
}

#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
void lbs_set_mac_control(struct lbs_private *priv)
{
  #line 1084 
  struct cmd_ds_mac_control cmd;
  #line 1086 
  cmd.hdr.size = (unsigned short)12U;
  #line 1087 
  cmd.action = priv->mac_control;
  #line 1088 
  cmd.reserved = (unsigned short)0U;
  #line 1090 
  lbs_cmd_async(priv,(unsigned short)40,& cmd.hdr,12);
  #line 1091 
  return;
}

#line 1093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_set_mac_control_sync(struct lbs_private *priv)
{
  #line 1101 
  uint16_t __sz;
  #line 1095 
  struct cmd_ds_mac_control cmd;
  #line 1096 
  int ret = 0;
  #line 1098 
  cmd.hdr.size = (unsigned short)12U;
  #line 1099 
  cmd.action = priv->mac_control;
  #line 1100 
  cmd.reserved = (unsigned short)0U;
  #line 1101 
  __sz = cmd.hdr.size;
  #line 1101 
  cmd.hdr.size = (unsigned short)12U;
  #line 1101 
  ret = __lbs_cmd(priv,(unsigned short)40,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 1103 
  return ret;
}

#line 1114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_allocate_cmd_buffer(struct lbs_private *priv)
{
  #line 1117 
  u32 bufsize;
  #line 1118 
  u32 i;
  #line 1119 
  struct cmd_ctrl_node *cmdarray;
  #line 1116 
  int ret = 0;
  #line 1122 
  bufsize = 1440U;
  #line 1123 
  cmdarray = (struct cmd_ctrl_node *)kzalloc_2((unsigned long)bufsize,3264U);
  #line 1123 
  if (cmdarray == (struct cmd_ctrl_node *)0) {
    #line 1124 
    if ((lbs_debug & 8192U) != 0U) {
      #line 1124 
      char *tmp_0;
      #line 1124 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1124 
                                                               tmp_0 = (char *)" (INT)"; else 
                                                                    #line 1124 
                                                                    tmp_0 = (char *)"";
      #line 1124 
      printk((char *)"\001",tmp_0);
    }
    #line 1125 
    ret = -1;
    #line 1126 
    goto done;
  }
  #line 1128 
  priv->cmd_array = cmdarray;
  #line 1131 
  i = 0U;
  #line 1131 
  while (i <= 9U) {
    #line 1132 
    (cmdarray + (unsigned long)i)->cmdbuf = (struct cmd_header *)kzalloc_2(2048UL,3264U);
    #line 1133 
    if ((cmdarray + (unsigned long)i)->cmdbuf == (struct cmd_header *)0) {
      #line 1134 
      if ((lbs_debug & 8192U) != 0U) {
        #line 1134 
        char *tmp_4;
        #line 1134 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 1134 
                                                                 tmp_4 = (char *)" (INT)"; else 
                                                                    #line 1134 
                                                                    tmp_4 = (char *)"";
        #line 1134 
        printk((char *)"\001",tmp_4);
      }
      #line 1135 
      ret = -1;
      #line 1136 
      goto done;
    }
    #line 1131 
    i ++;
  }
  #line 1140 
  i = 0U;
  #line 1140 
  while (i <= 9U) {
    {
      #line 1141 
      struct lock_class_key __key;
      #line 1141 
      __init_waitqueue_head(& (cmdarray + (unsigned long)i)->cmdwait_q,(char *)"&cmdarray[i].cmdwait_q",& __key);
    }
    #line 1142 
    lbs_cleanup_and_insert_cmd(priv,cmdarray + (unsigned long)i);
    #line 1140 
    i ++;
  }
  #line 1144 
  ret = 0;
  #line 1146 
  done: 
        #line 1146 
  ;
  #line 1147 
  return ret;
}

#line 1157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_free_cmd_buffer(struct lbs_private *priv)
{
  #line 1159 
  struct cmd_ctrl_node *cmdarray;
  #line 1160 
  unsigned int i;
  #line 1163 
  if (priv->cmd_array == (struct cmd_ctrl_node *)0) {
    #line 1164 
    if ((lbs_debug & 8192U) != 0U) {
      #line 1164 
      char *tmp_0;
      #line 1164 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1164 
                                                               tmp_0 = (char *)" (INT)"; else 
                                                                    #line 1164 
                                                                    tmp_0 = (char *)"";
      #line 1164 
      printk((char *)"\001",tmp_0);
    }
    #line 1165 
    goto done;
  }
  #line 1168 
  cmdarray = priv->cmd_array;
  #line 1171 
  i = 0U;
  #line 1171 
  while (i <= 9U) {
    #line 1172 
    if ((cmdarray + (unsigned long)i)->cmdbuf != (struct cmd_header *)0) {
      #line 1173 
      kfree((void *)(cmdarray + (unsigned long)i)->cmdbuf);
      #line 1174 
      (cmdarray + (unsigned long)i)->cmdbuf = (struct cmd_header *)0;
    }
    #line 1171 
    i ++;
  }
  #line 1179 
  if (priv->cmd_array != (struct cmd_ctrl_node *)0) {
    #line 1180 
    kfree((void *)priv->cmd_array);
    #line 1181 
    priv->cmd_array = (struct cmd_ctrl_node *)0;
  }
  #line 1184 
  done: 
        #line 1184 
  ;
  #line 1185 
  return 0;
}

#line 1197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
static struct cmd_ctrl_node *lbs_get_free_cmd_node(struct lbs_private *priv)
{
  #line 1199 
  struct cmd_ctrl_node *tempnode;
  #line 1200 
  unsigned long flags;
  #line 1202 
  if (priv == (struct lbs_private *)0) 
                                       #line 1203 
                                       return (struct cmd_ctrl_node *)0;
  #line 1205 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_3(& priv->driver_lock);
  #line 1207 
  if (list_empty_1(& priv->cmdfreeq) == 0) {
    #line 1208 
    void *__mptr;
    #line 1208 
    __mptr = (void *)priv->cmdfreeq.next;
    #line 1208 
    tempnode = ((struct cmd_ctrl_node *)__mptr);
    #line 1210 
    list_del_init(& tempnode->list);
  }
  else {
    #line 1212 
    if ((lbs_debug & 8192U) != 0U) {
      #line 1212 
      char *tmp_1;
      #line 1212 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1212 
                                                               tmp_1 = (char *)" (INT)"; else 
                                                                    #line 1212 
                                                                    tmp_1 = (char *)"";
      #line 1212 
      printk((char *)"\001",tmp_1);
    }
    #line 1213 
    tempnode = (struct cmd_ctrl_node *)0;
  }
  #line 1216 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_3(& priv->driver_lock,flags);
  #line 1218 
  return tempnode;
}

#line 1229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_execute_next_command(struct lbs_private *priv)
{
  #line 1232 
  struct cmd_header *cmd;
  #line 1233 
  unsigned long flags;
  #line 1231 
  struct cmd_ctrl_node *cmdnode = (struct cmd_ctrl_node *)0;
  #line 1234 
  int ret = 0;
  #line 1239 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_3(& priv->driver_lock);
  #line 1241 
  if (priv->cur_cmd != (struct cmd_ctrl_node *)0) {
    #line 1242 
    netdev_alert(priv->dev,(char *)"EXEC_NEXT_CMD: already processing command!\n");
    #line 1244 
    cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_3(& priv->driver_lock,flags);
    #line 1245 
    ret = -1;
    #line 1246 
    goto done;
  }
  #line 1249 
  if (list_empty_1(& priv->cmdpendingq) == 0) {
    #line 1250 
    void *__mptr;
    #line 1250 
    __mptr = (void *)priv->cmdpendingq.next;
    #line 1250 
    cmdnode = ((struct cmd_ctrl_node *)__mptr);
  }
  #line 1254 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_3(& priv->driver_lock,flags);
  #line 1256 
  if (cmdnode != (struct cmd_ctrl_node *)0) {
    #line 1257 
    cmd = cmdnode->cmdbuf;
    #line 1259 
    if ((unsigned int)is_command_allowed_in_ps((unsigned short)((int)cmd->command)) != 0U) {
      #line 1260 
      if (priv->psstate + 4294967294U <= 1U) {
        #line 1262 
        if ((lbs_debug & 8192U) != 0U) {
          #line 1262 
          char *tmp_2;
          #line 1262 
          ;
          #line 1262 
          ;
          #line 1262 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 1262 
                                                                   tmp_2 = (char *)" (INT)"; else 
                                                                    #line 1262 
                                                                    tmp_2 = (char *)"";
          #line 1262 
          printk((char *)"\001",tmp_2,(int)cmd->command,priv->psstate);
        }
        #line 1266 
        ret = -1;
        #line 1267 
        goto done;
      }
      #line 1269 
      if ((lbs_debug & 8192U) != 0U) {
        #line 1269 
        char *tmp_4;
        #line 1269 
        ;
        #line 1269 
        ;
        #line 1269 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 1269 
                                                                 tmp_4 = (char *)" (INT)"; else 
                                                                    #line 1269 
                                                                    tmp_4 = (char *)"";
        #line 1269 
        printk((char *)"\001",tmp_4,(int)cmd->command,priv->psstate);
      }
    }
    else 
      #line 1272 
      if (priv->psstate != 0U) 
        #line 1284 
        if ((unsigned int)cmd->command != 33U) {
          #line 1287 
          if (priv->psstate + 4294967294U <= 1U) 
                                                 #line 1292 
                                                 priv->needtowakeup = (unsigned char)1U; else 
                                                                    #line 1294 
                                                                    lbs_set_ps_mode(priv,(unsigned short)49,(_Bool)0);
          #line 1299 
          ret = 0;
          #line 1300 
          goto done;
        }
        else {
          #line 1306 
          struct cmd_ds_802_11_ps_mode *psm = (struct cmd_ds_802_11_ps_mode *)cmd;
          #line 1308 
          if ((lbs_debug & 8192U) != 0U) {
            #line 1308 
            char *tmp_6;
            #line 1308 
            ;
            #line 1308 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 1308 
              tmp_6 = (char *)" (INT)"; else 
                                             #line 1308 
                                             tmp_6 = (char *)"";
            #line 1308 
            printk((char *)"\001",tmp_6,(int)psm->action);
          }
          #line 1311 
          if ((unsigned int)psm->action != 49U) {
            #line 1313 
            if ((lbs_debug & 8192U) != 0U) {
              #line 1313 
              char *tmp_8;
              #line 1313 
              if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                #line 1313 
                tmp_8 = (char *)" (INT)"; else 
                                               #line 1313 
                                               tmp_8 = (char *)"";
              #line 1313 
              printk((char *)"\001",tmp_8);
            }
            #line 1315 
            lbs_complete_command(priv,cmdnode,0);
            #line 1317 
            ret = 0;
            #line 1318 
            goto done;
          }
          #line 1321 
          if (priv->psstate + 4294967294U <= 1U) {
            #line 1323 
            if ((lbs_debug & 8192U) != 0U) {
              #line 1323 
              char *tmp_10;
              #line 1323 
              if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                #line 1323 
                tmp_10 = (char *)" (INT)"; else 
                                                #line 1323 
                                                tmp_10 = (char *)"";
              #line 1323 
              printk((char *)"\001",tmp_10);
            }
            #line 1325 
            lbs_complete_command(priv,cmdnode,0);
            #line 1326 
            priv->needtowakeup = (unsigned char)1U;
            #line 1328 
            ret = 0;
            #line 1329 
            goto done;
          }
          #line 1332 
          if ((lbs_debug & 8192U) != 0U) {
            #line 1332 
            char *tmp_12;
            #line 1332 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 1332 
              tmp_12 = (char *)" (INT)"; else 
                                              #line 1332 
                                              tmp_12 = (char *)"";
            #line 1332 
            printk((char *)"\001",tmp_12);
          }
        }
    #line 1336 
    cif___ldv_spin_lock_driver_lock_of_lbs_private_3(& priv->driver_lock);
    #line 1337 
    list_del_init(& cmdnode->list);
    #line 1338 
    cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_3(& priv->driver_lock,flags);
    #line 1339 
    if ((lbs_debug & 8192U) != 0U) {
      #line 1339 
      char *tmp_15;
      #line 1339 
      ;
      #line 1339 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1339 
                                                               tmp_15 = (char *)" (INT)"; else 
                                                                    #line 1339 
                                                                    tmp_15 = (char *)"";
      #line 1339 
      printk((char *)"\001",tmp_15,(int)cmd->command);
    }
    #line 1341 
    lbs_submit_command(priv,cmdnode);
  }
  else 
    #line 1347 
    if (((unsigned int)priv->psmode != 0U && priv->psstate == 0U) && priv->connect_status == 0U) {
      #line 1350 
      if ((lbs_debug & 8192U) != 0U) {
        #line 1350 
        char *tmp_17;
        #line 1350 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 1350 
                                                                 tmp_17 = (char *)" (INT)"; else 
                                                                    #line 1350 
                                                                    tmp_17 = (char *)"";
        #line 1350 
        printk((char *)"\001",tmp_17);
      }
      #line 1352 
      lbs_set_ps_mode(priv,(unsigned short)48,(_Bool)0);
    }
  #line 1357 
  ret = 0;
  #line 1358 
  done: 
        #line 1358 
  ;
  #line 1359 
  return ret;
}

#line 1362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
static void lbs_send_confirmsleep(struct lbs_private *priv)
{
  #line 1388 
  struct kfifo *__tmpl;
  #line 1364 
  unsigned long flags;
  #line 1365 
  int ret;
  #line 1367 
  lbs_deb_hex(8192U,(char *)"sleep confirm",(u8 *)(& confirm_sleep),18);
  #line 1370 
  ret = (*(priv->hw_host_to_card))(priv,(unsigned char)1,(u8 *)(& confirm_sleep),(unsigned short)18);
  #line 1372 
  if (ret != 0) {
    #line 1373 
    netdev_alert(priv->dev,(char *)"confirm_sleep failed\n");
    #line 1374 
    return;
  }
  #line 1377 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_3(& priv->driver_lock);
  #line 1380 
  priv->dnld_sent = (unsigned char)0U;
  #line 1382 
  if (priv->is_host_sleep_configured != 0) {
    #line 1383 
    priv->is_host_sleep_activated = 1;
    #line 1384 
    __wake_up(& priv->host_sleep_q,1U,1,(void *)0);
  }
  #line 1388 
  __tmpl = & priv->event_fifo;
  #line 1388 
  if ((__tmpl->__anonCompField_kfifo_165.kfifo.in - __tmpl->__anonCompField_kfifo_165.kfifo.out) == 0U) 
    #line 1388 
    if (priv->resp_len[(int)priv->resp_idx] == 0U) 
                                                   #line 1389 
                                                   priv->psstate = 3U;
  #line 1391 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_3(& priv->driver_lock,flags);
  #line 1392 
  return;
}

#line 1402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
void lbs_ps_confirm_sleep(struct lbs_private *priv)
{
  #line 1420 
  struct kfifo *__tmpl;
  #line 1404 
  unsigned long flags = 0UL;
  #line 1405 
  int allowed = 1;
  #line 1407 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_3(& priv->driver_lock);
  #line 1408 
  if ((unsigned int)priv->dnld_sent != 0U) {
    #line 1409 
    allowed = 0;
    #line 1410 
    if ((lbs_debug & 8192U) != 0U) {
      #line 1410 
      char *tmp_0;
      #line 1410 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1410 
                                                               tmp_0 = (char *)" (INT)"; else 
                                                                    #line 1410 
                                                                    tmp_0 = (char *)"";
      #line 1410 
      printk((char *)"\001",tmp_0);
    }
  }
  #line 1414 
  if (priv->cur_cmd != (struct cmd_ctrl_node *)0) {
    #line 1415 
    allowed = 0;
    #line 1416 
    if ((lbs_debug & 8192U) != 0U) {
      #line 1416 
      char *tmp_2;
      #line 1416 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1416 
                                                               tmp_2 = (char *)" (INT)"; else 
                                                                    #line 1416 
                                                                    tmp_2 = (char *)"";
      #line 1416 
      printk((char *)"\001",tmp_2);
    }
  }
  #line 1420 
  __tmpl = & priv->event_fifo;
  #line 1420 
  if ((__tmpl->__anonCompField_kfifo_165.kfifo.in - __tmpl->__anonCompField_kfifo_165.kfifo.out) != 0U) 
    #line 1420 
    goto _LOR;
  else 
    #line 1420 
    if (priv->resp_len[(int)priv->resp_idx] != 0U) {
      #line 1420 
      _LOR: {
              #line 1421 
              allowed = 0;
              #line 1422 
              if ((lbs_debug & 8192U) != 0U) {
                #line 1422 
                char *tmp_4;
                #line 1422 
                if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                  #line 1422 
                  tmp_4 = (char *)" (INT)"; else 
                                                 #line 1422 
                                                 tmp_4 = (char *)"";
                #line 1422 
                printk((char *)"\001",tmp_4);
              }
            }
    }
  #line 1424 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_3(& priv->driver_lock,flags);
  #line 1426 
  if (allowed != 0) {
    #line 1427 
    if ((lbs_debug & 8192U) != 0U) {
      #line 1427 
      char *tmp_7;
      #line 1427 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1427 
                                                               tmp_7 = (char *)" (INT)"; else 
                                                                    #line 1427 
                                                                    tmp_7 = (char *)"";
      #line 1427 
      printk((char *)"\001",tmp_7);
    }
    #line 1428 
    lbs_send_confirmsleep(priv);
  }
  else 
    #line 1430 
    if ((lbs_debug & 8192U) != 0U) {
      #line 1430 
      char *tmp_9;
      #line 1430 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1430 
                                                               tmp_9 = (char *)" (INT)"; else 
                                                                    #line 1430 
                                                                    tmp_9 = (char *)"";
      #line 1430 
      printk((char *)"\001",tmp_9);
    }
  #line 1431 
  return;
}

#line 1447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_set_tpc_cfg(struct lbs_private *priv, int enable, int8_t p0, int8_t p1, int8_t p2, int usesnr)
{
  #line 1462 
  uint16_t __sz;
  #line 1450 
  struct cmd_ds_802_11_tpc_cfg cmd;
  #line 1451 
  int ret;
  #line 1453 
  memset((void *)(& cmd),0,15UL);
  #line 1454 
  cmd.hdr.size = (unsigned short)15U;
  #line 1455 
  cmd.action = (unsigned short)1U;
  #line 1456 
  cmd.enable = (unsigned char)(enable != 0);
  #line 1457 
  cmd.usesnr = (unsigned char)(usesnr != 0);
  #line 1458 
  cmd.P0 = p0;
  #line 1459 
  cmd.P1 = p1;
  #line 1460 
  cmd.P2 = p2;
  #line 1462 
  __sz = cmd.hdr.size;
  #line 1462 
  cmd.hdr.size = (unsigned short)15U;
  #line 1462 
  ret = __lbs_cmd(priv,(unsigned short)114,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 1464 
  return ret;
}

#line 1479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int lbs_set_power_adapt_cfg(struct lbs_private *priv, int enable, int8_t p0, int8_t p1, int8_t p2)
{
  #line 1493 
  uint16_t __sz;
  #line 1482 
  struct cmd_ds_802_11_pa_cfg cmd;
  #line 1483 
  int ret;
  #line 1485 
  memset((void *)(& cmd),0,14UL);
  #line 1486 
  cmd.hdr.size = (unsigned short)14U;
  #line 1487 
  cmd.action = (unsigned short)1U;
  #line 1488 
  cmd.enable = (unsigned char)(enable != 0);
  #line 1489 
  cmd.P0 = p0;
  #line 1490 
  cmd.P1 = p1;
  #line 1491 
  cmd.P2 = p2;
  #line 1493 
  __sz = cmd.hdr.size;
  #line 1493 
  cmd.hdr.size = (unsigned short)14U;
  #line 1493 
  ret = __lbs_cmd(priv,(unsigned short)115,& cmd.hdr,(int)__sz,
                  & lbs_cmd_copyback,(unsigned long)(& cmd));
  #line 1495 
  return ret;
}

#line 1499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
struct cmd_ctrl_node *__lbs_cmd_async(struct lbs_private *priv, uint16_t command, struct cmd_header *in_cmd, int in_cmd_size, int (*callback)(struct lbs_private *, unsigned long , struct cmd_header *), unsigned long callback_arg)
{
  #line 1504 
  struct cmd_ctrl_node *cmdnode;
  #line 1506 
  if ((unsigned int)priv->surpriseremoved != 0U) {
    #line 1507 
    if ((lbs_debug & 8192U) != 0U) {
      #line 1507 
      char *tmp_0;
      #line 1507 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1507 
                                                               tmp_0 = (char *)" (INT)"; else 
                                                                    #line 1507 
                                                                    tmp_0 = (char *)"";
      #line 1507 
      printk((char *)"\001",tmp_0);
    }
    #line 1508 
    cmdnode = (struct cmd_ctrl_node *)ERR_PTR_1(-2L);
    #line 1509 
    goto done;
  }
  #line 1515 
  if (priv->is_auto_deep_sleep_enabled == 0) 
    #line 1516 
    if (priv->is_deep_sleep != 0) {
      #line 1517 
      if ((lbs_debug & 16384U) != 0U) {
        #line 1517 
        char *tmp_3;
        #line 1517 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 1517 
                                                                 tmp_3 = (char *)" (INT)"; else 
                                                                    #line 1517 
                                                                    tmp_3 = (char *)"";
        #line 1517 
        printk((char *)"\001",tmp_3);
      }
      #line 1518 
      cmdnode = (struct cmd_ctrl_node *)ERR_PTR_1(-16L);
      #line 1519 
      goto done;
    }
  #line 1523 
  cmdnode = lbs_get_free_cmd_node(priv);
  #line 1524 
  if (cmdnode == (struct cmd_ctrl_node *)0) {
    #line 1525 
    if ((lbs_debug & 8192U) != 0U) {
      #line 1525 
      char *tmp_6;
      #line 1525 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1525 
                                                               tmp_6 = (char *)" (INT)"; else 
                                                                    #line 1525 
                                                                    tmp_6 = (char *)"";
      #line 1525 
      printk((char *)"\001",tmp_6);
    }
    #line 1528 
    __wake_up(& priv->waitq,3U,1,(void *)0);
    #line 1529 
    cmdnode = (struct cmd_ctrl_node *)ERR_PTR_1(-105L);
    #line 1530 
    goto done;
  }
  #line 1533 
  cmdnode->callback = callback;
  #line 1534 
  cmdnode->callback_arg = callback_arg;
  #line 1537 
  memcpy((void *)cmdnode->cmdbuf,(void *)in_cmd,(unsigned long)in_cmd_size);
  #line 1540 
  (cmdnode->cmdbuf)->command = command;
  #line 1541 
  (cmdnode->cmdbuf)->size = (unsigned short)in_cmd_size;
  #line 1542 
  (cmdnode->cmdbuf)->result = (unsigned short)0U;
  #line 1544 
  if ((lbs_debug & 8192U) != 0U) {
    #line 1544 
    char *tmp_9;
    #line 1544 
    ;
    #line 1544 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1544 
                                                             tmp_9 = (char *)" (INT)"; else 
                                                                    #line 1544 
                                                                    tmp_9 = (char *)"";
    #line 1544 
    printk((char *)"\001",tmp_9,(int)command);
  }
  #line 1546 
  cmdnode->cmdwaitqwoken = (unsigned short)0U;
  #line 1547 
  lbs_queue_cmd(priv,cmdnode);
  #line 1548 
  __wake_up(& priv->waitq,3U,1,(void *)0);
  #line 1550 
  done: 
        #line 1550 
  ;
  #line 1551 
  return cmdnode;
}

#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
void lbs_cmd_async(struct lbs_private *priv, uint16_t command, struct cmd_header *in_cmd, int in_cmd_size)
{
  #line 1557 
  __lbs_cmd_async(priv,(unsigned short)((int)command),in_cmd,in_cmd_size,& lbs_cmd_async_callback,0UL);
  #line 1559 
  return;
}

#line 1561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c"
int __lbs_cmd(struct lbs_private *priv, uint16_t command, struct cmd_header *in_cmd, int in_cmd_size, int (*callback)(struct lbs_private *, unsigned long , struct cmd_header *), unsigned long callback_arg)
{
  #line 1566 
  struct cmd_ctrl_node *cmdnode;
  #line 1567 
  unsigned long flags;
  #line 1568 
  int ret = 0;
  #line 1570 
  cmdnode = __lbs_cmd_async(priv,(unsigned short)((int)command),in_cmd,in_cmd_size,callback,callback_arg);
  #line 1572 
  if ((int)IS_ERR_1((void *)cmdnode) != 0) {
    #line 1573 
    ret = (int)PTR_ERR_1((void *)cmdnode);
    #line 1574 
    goto done;
  }
  #line 1577 
  __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c",1577,0);
  #line 1584 
  while (1) {
    #line 1584 
    __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/marvell/libertas/cmd.c",1584,0);
    #line 1584 
    if ((unsigned int)cmdnode->cmdwaitqwoken != 0U) 
                                                    #line 1584 
                                                    break;
    {
      #line 1584 
      struct wait_queue_entry __wq_entry;
      #line 1584 
      long __ret = 0L;
      #line 1584 
      init_wait_entry(& __wq_entry,0);
      #line 1584 
      while (1) {
        #line 1584 
        long __int = prepare_to_wait_event(& cmdnode->cmdwait_q,& __wq_entry,2);
        #line 1584 
        if ((unsigned int)cmdnode->cmdwaitqwoken != 0U) 
                                                        #line 1584 
                                                        break;
        #line 1584 
        schedule();
      }
      #line 1584 
      finish_wait(& cmdnode->cmdwait_q,& __wq_entry);
      #line 1584 
      __out_0: 
               #line 1584 
      ;
      #line 1584 
      long tmp_2 = __ret;
    }
    #line 1584 
    break;
  }
  #line 1586 
  cif___ldv_spin_lock_driver_lock_of_lbs_private_3(& priv->driver_lock);
  #line 1587 
  ret = cmdnode->result;
  #line 1588 
  if (ret != 0) 
                #line 1589 
                netdev_info(priv->dev,(char *)"PREP_CMD: command 0x%04x failed: %d\n",(int)command,ret);
  #line 1592 
  __lbs_cleanup_and_insert_cmd(priv,cmdnode);
  #line 1593 
  cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_3(& priv->driver_lock,flags);
  #line 1595 
  done: 
        #line 1595 
  ;
  #line 1596 
  return ret;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static void cif_set_bit_4(long nr, unsigned long *addr)
{
  #line 127 
  ldv_set_bit(nr,addr);
  #line 128 
  return;
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list)
{
  #line 141 
  ldv_init_list_head(list);
  #line 142 
  return;
}

#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static void *ERR_PTR_1(long error)
{
  #line 211 
  return ldv_err_ptr(error);
}

#line 215  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static long PTR_ERR_1(void *ptr)
{
  #line 218 
  return ldv_ptr_err(ptr);
}

#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static bool IS_ERR_1(void *ptr)
{
  #line 225 
  return ldv_is_err(ptr);
}

#line 432  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static void *kzalloc_2(size_t size, gfp_t flags)
{
  #line 435 
  return ldv_kzalloc(size,flags);
}

#line 662  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static void cif___ldv_spin_lock_driver_lock_of_lbs_private_3(spinlock_t *lock)
{
  #line 665 
  ldv_spin_model_lock((char *)"driver_lock_of_lbs_private");
  #line 667 
  __ldv_spin_lock(lock);
  #line 668 
  return;
}

#line 671  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static void cif_spin_unlock_irqrestore_driver_lock_of_lbs_private_3(spinlock_t *lock, unsigned long flags)
{
  #line 674 
  ldv_spin_model_unlock((char *)"driver_lock_of_lbs_private");
  #line 676 
  spin_unlock_irqrestore_3(lock,flags);
  #line 677 
  return;
}

#line 680  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static int cif_mod_timer_0(struct timer_list *timer, unsigned long expires)
{
  #line 684 
  return emg_mod_timer(timer,expires);
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static void *ERR_PTR_2(long error)
{
  #line 26 
  return (void *)error;
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static bool IS_ERR_OR_NULL(void *ptr)
{
  #line 41 
  return (_Bool)(((long)(ptr == (void *)0) != 0L || (long)((unsigned long)ptr > 18446744073709547520UL) != 0L) != 0);
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
#line 652 
void *emg_devattr_devattr_instance_dev_attr_anycast_mask(void *arg0);
#line 129 
#line 732 
void *emg_devattr_devattr_instance_dev_attr_bootflag(void *arg0);
#line 130 
#line 812 
void *emg_devattr_devattr_instance_dev_attr_boottime(void *arg0);
#line 131 
#line 892 
void *emg_devattr_devattr_instance_dev_attr_capability(void *arg0);
#line 132 
#line 972 
void *emg_devattr_devattr_instance_dev_attr_channel(void *arg0);
#line 133 
#line 1052 
void *emg_devattr_devattr_instance_dev_attr_lbs_mesh(void *arg0);
#line 134 
#line 1132 
void *emg_devattr_devattr_instance_dev_attr_mesh_id(void *arg0);
#line 135 
#line 1212 
void *emg_devattr_devattr_instance_dev_attr_metric_id(void *arg0);
#line 136 
#line 1292 
void *emg_devattr_devattr_instance_dev_attr_prb_rsp_limit(void *arg0);
#line 137 
#line 1372 
void *emg_devattr_devattr_instance_dev_attr_protocol_id(void *arg0);
#line 140 
#line 643 
void emg_dispatch_deregister_16(struct net_device *arg0);
#line 141 
#line 336 
void emg_dispatch_deregister_5(struct file_operations *arg0);
#line 142 
#line 552 
void emg_dispatch_deregister_9(struct device *arg0, struct device_attribute *arg1);
#line 143 
#line 435 
void emg_dispatch_instance_deregister_6(struct timer_list *arg0);
#line 144 
#line 444 
void emg_dispatch_instance_deregister_7(struct timer_list *arg0);
#line 145 
#line 621 
void emg_dispatch_instance_register_12(struct timer_list *arg0);
#line 146 
#line 632 
void emg_dispatch_register_14(struct net_device *arg0);
#line 147 
#line 207 
void emg_dispatch_register_4(struct file_operations *arg0);
#line 148 
#line 453 
void emg_dispatch_register_8(struct device *arg0, struct device_attribute *arg1);
#line 149 
#line 6603 
void *emg_entry_point_insmod(void *arg0);
#line 150 
#line 1452 
void *emg_file_operations_character_driver_scenario_11(void *arg0);
#line 151 
#line 1749 
void *emg_file_operations_character_driver_scenario_12(void *arg0);
#line 152 
#line 2046 
void *emg_file_operations_character_driver_scenario_13(void *arg0);
#line 153 
#line 2343 
void *emg_file_operations_character_driver_scenario_14(void *arg0);
#line 154 
#line 2640 
void *emg_file_operations_character_driver_scenario_15(void *arg0);
#line 155 
#line 2937 
void *emg_file_operations_character_driver_scenario_16(void *arg0);
#line 156 
#line 3234 
void *emg_file_operations_character_driver_scenario_17(void *arg0);
#line 157 
#line 3531 
void *emg_file_operations_character_driver_scenario_18(void *arg0);
#line 158 
#line 3828 
void *emg_file_operations_character_driver_scenario_19(void *arg0);
#line 159 
#line 4125 
void *emg_file_operations_character_driver_scenario_20(void *arg0);
#line 160 
#line 4422 
void *emg_file_operations_character_driver_scenario_21(void *arg0);
#line 161 
#line 4719 
void *emg_file_operations_character_driver_scenario_22(void *arg0);
#line 162 
#line 5016 
void *emg_file_operations_character_driver_scenario_23(void *arg0);
#line 163 
#line 5313 
void *emg_file_operations_character_driver_scenario_24(void *arg0);
#line 164 
#line 5610 
void *emg_file_operations_character_driver_scenario_lbs_debug_fops(void *arg0);
#line 168 
#line 5907 
void *emg_net_random_allocationless_scenario_lbs_set_mac_address(void *arg0);
#line 172 
#line 6146 
void *emg_timer_timer_scenario_26(void *arg0);
#line 174 
#line 6632 
int main(void);
#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_21;
#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_22;
#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_23;
#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_24;
#line 185  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_25;
#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_26;
#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_27;
#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_28;
#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_29;
#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_30;
#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_31;
#line 192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_32;
#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_33;
#line 194  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_34;
#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_35;
#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_36;
#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_37;
#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_38;
#line 199  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_39;
#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_40;
#line 201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_41;
#line 202  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_42;
#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_43;
#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_4(struct file_operations *arg0)
{
  #line 208 
  int ret;
  #line 209 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_27;
  #line 210 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_28;
  #line 211 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_29;
  #line 212 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_30;
  #line 213 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_31;
  #line 214 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_32;
  #line 215 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_33;
  #line 216 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_34;
  #line 217 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_35;
  #line 218 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_36;
  #line 219 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_37;
  #line 220 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_38;
  #line 221 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_39;
  #line 222 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_40;
  #line 223 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_41;
  #line 224 
  switch (ldv_undef_int()) {
    #line 225 
    case 0: 
            #line 225 
    ;
    #line 226 
    cf_arg_27 = (struct emg_struct_character_driver_scenario_11_27 *)ldv_xmalloc(16UL);
    #line 227 
    cf_arg_27->arg0 = arg0;
    #line 228 
    ret = pthread_create(& emg_thread_27,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_11,(void *)cf_arg_27);
    #line 229 
    __VERIFIER_assume(ret == 0);
    #line 230 
    break;
    #line 232 
    case 1: 
            #line 232 
    ;
    #line 233 
    cf_arg_28 = (struct emg_struct_character_driver_scenario_11_27 *)ldv_xmalloc(16UL);
    #line 234 
    cf_arg_28->arg0 = arg0;
    #line 235 
    ret = pthread_create(& emg_thread_28,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_12,(void *)cf_arg_28);
    #line 236 
    __VERIFIER_assume(ret == 0);
    #line 237 
    break;
    #line 239 
    case 2: 
            #line 239 
    ;
    #line 240 
    cf_arg_29 = (struct emg_struct_character_driver_scenario_11_27 *)ldv_xmalloc(16UL);
    #line 241 
    cf_arg_29->arg0 = arg0;
    #line 242 
    ret = pthread_create(& emg_thread_29,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_13,(void *)cf_arg_29);
    #line 243 
    __VERIFIER_assume(ret == 0);
    #line 244 
    break;
    #line 246 
    case 3: 
            #line 246 
    ;
    #line 247 
    cf_arg_30 = (struct emg_struct_character_driver_scenario_11_27 *)ldv_xmalloc(16UL);
    #line 248 
    cf_arg_30->arg0 = arg0;
    #line 249 
    ret = pthread_create(& emg_thread_30,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_14,(void *)cf_arg_30);
    #line 250 
    __VERIFIER_assume(ret == 0);
    #line 251 
    break;
    #line 253 
    case 4: 
            #line 253 
    ;
    #line 254 
    cf_arg_31 = (struct emg_struct_character_driver_scenario_11_27 *)ldv_xmalloc(16UL);
    #line 255 
    cf_arg_31->arg0 = arg0;
    #line 256 
    ret = pthread_create(& emg_thread_31,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_15,(void *)cf_arg_31);
    #line 257 
    __VERIFIER_assume(ret == 0);
    #line 258 
    break;
    #line 260 
    case 5: 
            #line 260 
    ;
    #line 261 
    cf_arg_32 = (struct emg_struct_character_driver_scenario_11_27 *)ldv_xmalloc(16UL);
    #line 262 
    cf_arg_32->arg0 = arg0;
    #line 263 
    ret = pthread_create(& emg_thread_32,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_16,(void *)cf_arg_32);
    #line 264 
    __VERIFIER_assume(ret == 0);
    #line 265 
    break;
    #line 267 
    case 6: 
            #line 267 
    ;
    #line 268 
    cf_arg_33 = (struct emg_struct_character_driver_scenario_11_27 *)ldv_xmalloc(16UL);
    #line 269 
    cf_arg_33->arg0 = arg0;
    #line 270 
    ret = pthread_create(& emg_thread_33,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_17,(void *)cf_arg_33);
    #line 271 
    __VERIFIER_assume(ret == 0);
    #line 272 
    break;
    #line 274 
    case 7: 
            #line 274 
    ;
    #line 275 
    cf_arg_34 = (struct emg_struct_character_driver_scenario_11_27 *)ldv_xmalloc(16UL);
    #line 276 
    cf_arg_34->arg0 = arg0;
    #line 277 
    ret = pthread_create(& emg_thread_34,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_18,(void *)cf_arg_34);
    #line 278 
    __VERIFIER_assume(ret == 0);
    #line 279 
    break;
    #line 281 
    case 8: 
            #line 281 
    ;
    #line 282 
    cf_arg_35 = (struct emg_struct_character_driver_scenario_11_27 *)ldv_xmalloc(16UL);
    #line 283 
    cf_arg_35->arg0 = arg0;
    #line 284 
    ret = pthread_create(& emg_thread_35,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_19,(void *)cf_arg_35);
    #line 285 
    __VERIFIER_assume(ret == 0);
    #line 286 
    break;
    #line 288 
    case 9: 
            #line 288 
    ;
    #line 289 
    cf_arg_36 = (struct emg_struct_character_driver_scenario_11_27 *)ldv_xmalloc(16UL);
    #line 290 
    cf_arg_36->arg0 = arg0;
    #line 291 
    ret = pthread_create(& emg_thread_36,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_20,(void *)cf_arg_36);
    #line 292 
    __VERIFIER_assume(ret == 0);
    #line 293 
    break;
    #line 295 
    case 10: 
             #line 295 
    ;
    #line 296 
    cf_arg_37 = (struct emg_struct_character_driver_scenario_11_27 *)ldv_xmalloc(16UL);
    #line 297 
    cf_arg_37->arg0 = arg0;
    #line 298 
    ret = pthread_create(& emg_thread_37,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_21,(void *)cf_arg_37);
    #line 299 
    __VERIFIER_assume(ret == 0);
    #line 300 
    break;
    #line 302 
    case 11: 
             #line 302 
    ;
    #line 303 
    cf_arg_38 = (struct emg_struct_character_driver_scenario_11_27 *)ldv_xmalloc(16UL);
    #line 304 
    cf_arg_38->arg0 = arg0;
    #line 305 
    ret = pthread_create(& emg_thread_38,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_22,(void *)cf_arg_38);
    #line 306 
    __VERIFIER_assume(ret == 0);
    #line 307 
    break;
    #line 309 
    case 12: 
             #line 309 
    ;
    #line 310 
    cf_arg_39 = (struct emg_struct_character_driver_scenario_11_27 *)ldv_xmalloc(16UL);
    #line 311 
    cf_arg_39->arg0 = arg0;
    #line 312 
    ret = pthread_create(& emg_thread_39,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_23,(void *)cf_arg_39);
    #line 313 
    __VERIFIER_assume(ret == 0);
    #line 314 
    break;
    #line 316 
    case 13: 
             #line 316 
    ;
    #line 317 
    cf_arg_40 = (struct emg_struct_character_driver_scenario_11_27 *)ldv_xmalloc(16UL);
    #line 318 
    cf_arg_40->arg0 = arg0;
    #line 319 
    ret = pthread_create(& emg_thread_40,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_24,(void *)cf_arg_40);
    #line 320 
    __VERIFIER_assume(ret == 0);
    #line 321 
    break;
    #line 323 
    case 14: 
             #line 323 
    ;
    #line 324 
    cf_arg_41 = (struct emg_struct_character_driver_scenario_11_27 *)ldv_xmalloc(16UL);
    #line 325 
    cf_arg_41->arg0 = arg0;
    #line 326 
    ret = pthread_create(& emg_thread_41,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_lbs_debug_fops,(void *)cf_arg_41);
    #line 327 
    __VERIFIER_assume(ret == 0);
    #line 328 
    break;
    #line 330 
    default: 
             #line 330 
    ;
    #line 330 
    __VERIFIER_assume(0);
  }
  #line 332 
  return;
}

#line 336  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_5(struct file_operations *arg0)
{
  #line 337 
  int ret;
  #line 338 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_27;
  #line 339 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_28;
  #line 340 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_29;
  #line 341 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_30;
  #line 342 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_31;
  #line 343 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_32;
  #line 344 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_33;
  #line 345 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_34;
  #line 346 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_35;
  #line 347 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_36;
  #line 348 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_37;
  #line 349 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_38;
  #line 350 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_39;
  #line 351 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_40;
  #line 352 
  struct emg_struct_character_driver_scenario_11_27 *cf_arg_41;
  #line 353 
  switch (ldv_undef_int()) {
    #line 354 
    case 0: 
            #line 354 
    ;
    #line 355 
    ret = pthread_join(emg_thread_27,(void **)0);
    #line 356 
    __VERIFIER_assume(ret == 0);
    #line 357 
    break;
    #line 359 
    case 1: 
            #line 359 
    ;
    #line 360 
    ret = pthread_join(emg_thread_28,(void **)0);
    #line 361 
    __VERIFIER_assume(ret == 0);
    #line 362 
    break;
    #line 364 
    case 2: 
            #line 364 
    ;
    #line 365 
    ret = pthread_join(emg_thread_29,(void **)0);
    #line 366 
    __VERIFIER_assume(ret == 0);
    #line 367 
    break;
    #line 369 
    case 3: 
            #line 369 
    ;
    #line 370 
    ret = pthread_join(emg_thread_30,(void **)0);
    #line 371 
    __VERIFIER_assume(ret == 0);
    #line 372 
    break;
    #line 374 
    case 4: 
            #line 374 
    ;
    #line 375 
    ret = pthread_join(emg_thread_31,(void **)0);
    #line 376 
    __VERIFIER_assume(ret == 0);
    #line 377 
    break;
    #line 379 
    case 5: 
            #line 379 
    ;
    #line 380 
    ret = pthread_join(emg_thread_32,(void **)0);
    #line 381 
    __VERIFIER_assume(ret == 0);
    #line 382 
    break;
    #line 384 
    case 6: 
            #line 384 
    ;
    #line 385 
    ret = pthread_join(emg_thread_33,(void **)0);
    #line 386 
    __VERIFIER_assume(ret == 0);
    #line 387 
    break;
    #line 389 
    case 7: 
            #line 389 
    ;
    #line 390 
    ret = pthread_join(emg_thread_34,(void **)0);
    #line 391 
    __VERIFIER_assume(ret == 0);
    #line 392 
    break;
    #line 394 
    case 8: 
            #line 394 
    ;
    #line 395 
    ret = pthread_join(emg_thread_35,(void **)0);
    #line 396 
    __VERIFIER_assume(ret == 0);
    #line 397 
    break;
    #line 399 
    case 9: 
            #line 399 
    ;
    #line 400 
    ret = pthread_join(emg_thread_36,(void **)0);
    #line 401 
    __VERIFIER_assume(ret == 0);
    #line 402 
    break;
    #line 404 
    case 10: 
             #line 404 
    ;
    #line 405 
    ret = pthread_join(emg_thread_37,(void **)0);
    #line 406 
    __VERIFIER_assume(ret == 0);
    #line 407 
    break;
    #line 409 
    case 11: 
             #line 409 
    ;
    #line 410 
    ret = pthread_join(emg_thread_38,(void **)0);
    #line 411 
    __VERIFIER_assume(ret == 0);
    #line 412 
    break;
    #line 414 
    case 12: 
             #line 414 
    ;
    #line 415 
    ret = pthread_join(emg_thread_39,(void **)0);
    #line 416 
    __VERIFIER_assume(ret == 0);
    #line 417 
    break;
    #line 419 
    case 13: 
             #line 419 
    ;
    #line 420 
    ret = pthread_join(emg_thread_40,(void **)0);
    #line 421 
    __VERIFIER_assume(ret == 0);
    #line 422 
    break;
    #line 424 
    case 14: 
             #line 424 
    ;
    #line 425 
    ret = pthread_join(emg_thread_41,(void **)0);
    #line 426 
    __VERIFIER_assume(ret == 0);
    #line 427 
    break;
    #line 429 
    default: 
             #line 429 
    ;
    #line 429 
    __VERIFIER_assume(0);
  }
  #line 431 
  return;
}

#line 435  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_6(struct timer_list *arg0)
{
  #line 436 
  int ret;
  #line 437 
  struct emg_struct_timer_scenario_26_43 *cf_arg_43;
  #line 438 
  ret = pthread_join(emg_thread_43,(void **)0);
  #line 439 
  __VERIFIER_assume(ret == 0);
  #line 440 
  return;
}

#line 444  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_7(struct timer_list *arg0)
{
  #line 445 
  int ret;
  #line 446 
  struct emg_struct_timer_scenario_26_43 *cf_arg_43;
  #line 447 
  ret = pthread_join(emg_thread_43,(void **)0);
  #line 448 
  __VERIFIER_assume(ret == 0);
  #line 449 
  return;
}

#line 453  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_8(struct device *arg0, struct device_attribute *arg1)
{
  #line 454 
  int ret;
  #line 455 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_17;
  #line 456 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_18;
  #line 457 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_19;
  #line 458 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_20;
  #line 459 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_21;
  #line 460 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_22;
  #line 461 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_23;
  #line 462 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_24;
  #line 463 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_25;
  #line 464 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_26;
  #line 465 
  switch (ldv_undef_int()) {
    #line 466 
    case 0: 
            #line 466 
    ;
    #line 467 
    cf_arg_17 = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)ldv_xmalloc(24UL);
    #line 468 
    cf_arg_17->arg0 = arg0;
    #line 469 
    cf_arg_17->arg1 = arg1;
    #line 470 
    ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_devattr_devattr_instance_dev_attr_anycast_mask,(void *)cf_arg_17);
    #line 471 
    __VERIFIER_assume(ret == 0);
    #line 472 
    break;
    #line 474 
    case 1: 
            #line 474 
    ;
    #line 475 
    cf_arg_18 = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)ldv_xmalloc(24UL);
    #line 476 
    cf_arg_18->arg0 = arg0;
    #line 477 
    cf_arg_18->arg1 = arg1;
    #line 478 
    ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_devattr_devattr_instance_dev_attr_bootflag,(void *)cf_arg_18);
    #line 479 
    __VERIFIER_assume(ret == 0);
    #line 480 
    break;
    #line 482 
    case 2: 
            #line 482 
    ;
    #line 483 
    cf_arg_19 = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)ldv_xmalloc(24UL);
    #line 484 
    cf_arg_19->arg0 = arg0;
    #line 485 
    cf_arg_19->arg1 = arg1;
    #line 486 
    ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_devattr_devattr_instance_dev_attr_boottime,(void *)cf_arg_19);
    #line 487 
    __VERIFIER_assume(ret == 0);
    #line 488 
    break;
    #line 490 
    case 3: 
            #line 490 
    ;
    #line 491 
    cf_arg_20 = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)ldv_xmalloc(24UL);
    #line 492 
    cf_arg_20->arg0 = arg0;
    #line 493 
    cf_arg_20->arg1 = arg1;
    #line 494 
    ret = pthread_create(& emg_thread_20,(pthread_attr_t *)0,& emg_devattr_devattr_instance_dev_attr_capability,(void *)cf_arg_20);
    #line 495 
    __VERIFIER_assume(ret == 0);
    #line 496 
    break;
    #line 498 
    case 4: 
            #line 498 
    ;
    #line 499 
    cf_arg_21 = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)ldv_xmalloc(24UL);
    #line 500 
    cf_arg_21->arg0 = arg0;
    #line 501 
    cf_arg_21->arg1 = arg1;
    #line 502 
    ret = pthread_create(& emg_thread_21,(pthread_attr_t *)0,& emg_devattr_devattr_instance_dev_attr_channel,(void *)cf_arg_21);
    #line 503 
    __VERIFIER_assume(ret == 0);
    #line 504 
    break;
    #line 506 
    case 5: 
            #line 506 
    ;
    #line 507 
    cf_arg_22 = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)ldv_xmalloc(24UL);
    #line 508 
    cf_arg_22->arg0 = arg0;
    #line 509 
    cf_arg_22->arg1 = arg1;
    #line 510 
    ret = pthread_create(& emg_thread_22,(pthread_attr_t *)0,& emg_devattr_devattr_instance_dev_attr_lbs_mesh,(void *)cf_arg_22);
    #line 511 
    __VERIFIER_assume(ret == 0);
    #line 512 
    break;
    #line 514 
    case 6: 
            #line 514 
    ;
    #line 515 
    cf_arg_23 = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)ldv_xmalloc(24UL);
    #line 516 
    cf_arg_23->arg0 = arg0;
    #line 517 
    cf_arg_23->arg1 = arg1;
    #line 518 
    ret = pthread_create(& emg_thread_23,(pthread_attr_t *)0,& emg_devattr_devattr_instance_dev_attr_mesh_id,(void *)cf_arg_23);
    #line 519 
    __VERIFIER_assume(ret == 0);
    #line 520 
    break;
    #line 522 
    case 7: 
            #line 522 
    ;
    #line 523 
    cf_arg_24 = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)ldv_xmalloc(24UL);
    #line 524 
    cf_arg_24->arg0 = arg0;
    #line 525 
    cf_arg_24->arg1 = arg1;
    #line 526 
    ret = pthread_create(& emg_thread_24,(pthread_attr_t *)0,& emg_devattr_devattr_instance_dev_attr_metric_id,(void *)cf_arg_24);
    #line 527 
    __VERIFIER_assume(ret == 0);
    #line 528 
    break;
    #line 530 
    case 8: 
            #line 530 
    ;
    #line 531 
    cf_arg_25 = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)ldv_xmalloc(24UL);
    #line 532 
    cf_arg_25->arg0 = arg0;
    #line 533 
    cf_arg_25->arg1 = arg1;
    #line 534 
    ret = pthread_create(& emg_thread_25,(pthread_attr_t *)0,& emg_devattr_devattr_instance_dev_attr_prb_rsp_limit,(void *)cf_arg_25);
    #line 535 
    __VERIFIER_assume(ret == 0);
    #line 536 
    break;
    #line 538 
    case 9: 
            #line 538 
    ;
    #line 539 
    cf_arg_26 = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)ldv_xmalloc(24UL);
    #line 540 
    cf_arg_26->arg0 = arg0;
    #line 541 
    cf_arg_26->arg1 = arg1;
    #line 542 
    ret = pthread_create(& emg_thread_26,(pthread_attr_t *)0,& emg_devattr_devattr_instance_dev_attr_protocol_id,(void *)cf_arg_26);
    #line 543 
    __VERIFIER_assume(ret == 0);
    #line 544 
    break;
    #line 546 
    default: 
             #line 546 
    ;
    #line 546 
    __VERIFIER_assume(0);
  }
  #line 548 
  return;
}

#line 552  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_9(struct device *arg0, struct device_attribute *arg1)
{
  #line 553 
  int ret;
  #line 554 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_17;
  #line 555 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_18;
  #line 556 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_19;
  #line 557 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_20;
  #line 558 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_21;
  #line 559 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_22;
  #line 560 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_23;
  #line 561 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_24;
  #line 562 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_25;
  #line 563 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *cf_arg_26;
  #line 564 
  switch (ldv_undef_int()) {
    #line 565 
    case 0: 
            #line 565 
    ;
    #line 566 
    ret = pthread_join(emg_thread_17,(void **)0);
    #line 567 
    __VERIFIER_assume(ret == 0);
    #line 568 
    break;
    #line 570 
    case 1: 
            #line 570 
    ;
    #line 571 
    ret = pthread_join(emg_thread_18,(void **)0);
    #line 572 
    __VERIFIER_assume(ret == 0);
    #line 573 
    break;
    #line 575 
    case 2: 
            #line 575 
    ;
    #line 576 
    ret = pthread_join(emg_thread_19,(void **)0);
    #line 577 
    __VERIFIER_assume(ret == 0);
    #line 578 
    break;
    #line 580 
    case 3: 
            #line 580 
    ;
    #line 581 
    ret = pthread_join(emg_thread_20,(void **)0);
    #line 582 
    __VERIFIER_assume(ret == 0);
    #line 583 
    break;
    #line 585 
    case 4: 
            #line 585 
    ;
    #line 586 
    ret = pthread_join(emg_thread_21,(void **)0);
    #line 587 
    __VERIFIER_assume(ret == 0);
    #line 588 
    break;
    #line 590 
    case 5: 
            #line 590 
    ;
    #line 591 
    ret = pthread_join(emg_thread_22,(void **)0);
    #line 592 
    __VERIFIER_assume(ret == 0);
    #line 593 
    break;
    #line 595 
    case 6: 
            #line 595 
    ;
    #line 596 
    ret = pthread_join(emg_thread_23,(void **)0);
    #line 597 
    __VERIFIER_assume(ret == 0);
    #line 598 
    break;
    #line 600 
    case 7: 
            #line 600 
    ;
    #line 601 
    ret = pthread_join(emg_thread_24,(void **)0);
    #line 602 
    __VERIFIER_assume(ret == 0);
    #line 603 
    break;
    #line 605 
    case 8: 
            #line 605 
    ;
    #line 606 
    ret = pthread_join(emg_thread_25,(void **)0);
    #line 607 
    __VERIFIER_assume(ret == 0);
    #line 608 
    break;
    #line 610 
    case 9: 
            #line 610 
    ;
    #line 611 
    ret = pthread_join(emg_thread_26,(void **)0);
    #line 612 
    __VERIFIER_assume(ret == 0);
    #line 613 
    break;
    #line 615 
    default: 
             #line 615 
    ;
    #line 615 
    __VERIFIER_assume(0);
  }
  #line 617 
  return;
}

#line 621  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_12(struct timer_list *arg0)
{
  #line 622 
  int ret;
  #line 623 
  struct emg_struct_timer_scenario_26_43 *cf_arg_43;
  #line 624 
  cf_arg_43 = (struct emg_struct_timer_scenario_26_43 *)ldv_xmalloc(16UL);
  #line 625 
  cf_arg_43->arg0 = arg0;
  #line 626 
  ret = pthread_create(& emg_thread_43,(pthread_attr_t *)0,& emg_timer_timer_scenario_26,(void *)cf_arg_43);
  #line 627 
  __VERIFIER_assume(ret == 0);
  #line 628 
  return;
}

#line 632  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_14(struct net_device *arg0)
{
  #line 633 
  int ret;
  #line 634 
  struct emg_struct_random_allocationless_scenario_lbs_set_mac_address_42 *cf_arg_42;
  #line 635 
  cf_arg_42 = (struct emg_struct_random_allocationless_scenario_lbs_set_mac_address_42 *)ldv_xmalloc(16UL);
  #line 636 
  cf_arg_42->arg0 = arg0;
  #line 637 
  ret = pthread_create(& emg_thread_42,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_lbs_set_mac_address,(void *)cf_arg_42);
  #line 638 
  __VERIFIER_assume(ret == 0);
  #line 639 
  return;
}

#line 643  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_16(struct net_device *arg0)
{
  #line 644 
  int ret;
  #line 645 
  struct emg_struct_random_allocationless_scenario_lbs_set_mac_address_42 *cf_arg_42;
  #line 646 
  ret = pthread_join(emg_thread_42,(void **)0);
  #line 647 
  __VERIFIER_assume(ret == 0);
  #line 648 
  return;
}

#line 652  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_dev_attr_anycast_mask(void *arg0)
{
  #line 655 
  struct device_attribute *emg_17_devattr;
  #line 656 
  struct device *emg_17_device;
  #line 657 
  char *emg_17_emg_param_2_0;
  #line 658 
  char *emg_17_emg_param_2_1;
  #line 659 
  unsigned long emg_17_emg_param_3_2;
  #line 660 
  int emg_repeat_cnt_main_17 = 1;
  #line 662 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *data = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)arg0;
  #line 665 
  emg_17_devattr = emg_alias_dev_attr_anycast_mask;
  #line 667 
  __VERIFIER_assume(data->arg1 == emg_alias_dev_attr_anycast_mask);
  #line 669 
  if (data != (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)0) {
    #line 670 
    emg_17_device = data->arg0;
    #line 671 
    emg_17_devattr = data->arg1;
    #line 672 
    ldv_free((void *)data);
  }
  #line 677 
  goto emg_main_17;
  #line 681 
  return (void *)0;
  #line 684 
  emg_main_17: 
               #line 684 
  ;
  #line 685 
  if (ldv_undef_int() != 0) {
    #line 686 
    if (ldv_undef_int() != 0) {
      #line 688 
      emg_17_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 688 
      emg_17_emg_param_2_0 = emg_17_emg_param_2_0;
      #line 692 
      emg_wrapper_lbs_anycast_get(emg_17_device,emg_17_devattr,emg_17_emg_param_2_0);
      #line 696 
      ldv_free((void *)emg_17_emg_param_2_0);
    }
    else {
      #line 700 
      emg_17_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 700 
      emg_17_emg_param_2_1 = emg_17_emg_param_2_1;
      #line 704 
      emg_wrapper_lbs_anycast_set(emg_17_device,emg_17_devattr,emg_17_emg_param_2_1,emg_17_emg_param_3_2);
      #line 708 
      ldv_free((void *)emg_17_emg_param_2_1);
    }
    #line 712 
    if (emg_repeat_cnt_main_17 > 0) {
      #line 713 
      emg_repeat_cnt_main_17 --;
      #line 715 
      goto emg_main_17;
    }
    else 
         #line 717 
         __VERIFIER_assume(0);
  }
  #line 727 
  return (void *)0;
}

#line 732  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_dev_attr_bootflag(void *arg0)
{
  #line 735 
  struct device_attribute *emg_18_devattr;
  #line 736 
  struct device *emg_18_device;
  #line 737 
  char *emg_18_emg_param_2_0;
  #line 738 
  char *emg_18_emg_param_2_1;
  #line 739 
  unsigned long emg_18_emg_param_3_2;
  #line 740 
  int emg_repeat_cnt_main_18 = 1;
  #line 742 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *data = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)arg0;
  #line 745 
  emg_18_devattr = emg_alias_dev_attr_bootflag;
  #line 747 
  __VERIFIER_assume(data->arg1 == emg_alias_dev_attr_bootflag);
  #line 749 
  if (data != (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)0) {
    #line 750 
    emg_18_device = data->arg0;
    #line 751 
    emg_18_devattr = data->arg1;
    #line 752 
    ldv_free((void *)data);
  }
  #line 757 
  goto emg_main_18;
  #line 761 
  return (void *)0;
  #line 764 
  emg_main_18: 
               #line 764 
  ;
  #line 765 
  if (ldv_undef_int() != 0) {
    #line 766 
    if (ldv_undef_int() != 0) {
      #line 768 
      emg_18_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 768 
      emg_18_emg_param_2_0 = emg_18_emg_param_2_0;
      #line 772 
      emg_wrapper_bootflag_get(emg_18_device,emg_18_devattr,emg_18_emg_param_2_0);
      #line 776 
      ldv_free((void *)emg_18_emg_param_2_0);
    }
    else {
      #line 780 
      emg_18_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 780 
      emg_18_emg_param_2_1 = emg_18_emg_param_2_1;
      #line 784 
      emg_wrapper_bootflag_set(emg_18_device,emg_18_devattr,emg_18_emg_param_2_1,emg_18_emg_param_3_2);
      #line 788 
      ldv_free((void *)emg_18_emg_param_2_1);
    }
    #line 792 
    if (emg_repeat_cnt_main_18 > 0) {
      #line 793 
      emg_repeat_cnt_main_18 --;
      #line 795 
      goto emg_main_18;
    }
    else 
         #line 797 
         __VERIFIER_assume(0);
  }
  #line 807 
  return (void *)0;
}

#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_dev_attr_boottime(void *arg0)
{
  #line 815 
  struct device_attribute *emg_19_devattr;
  #line 816 
  struct device *emg_19_device;
  #line 817 
  char *emg_19_emg_param_2_0;
  #line 818 
  char *emg_19_emg_param_2_1;
  #line 819 
  unsigned long emg_19_emg_param_3_2;
  #line 820 
  int emg_repeat_cnt_main_19 = 1;
  #line 822 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *data = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)arg0;
  #line 825 
  emg_19_devattr = emg_alias_dev_attr_boottime;
  #line 827 
  __VERIFIER_assume(data->arg1 == emg_alias_dev_attr_boottime);
  #line 829 
  if (data != (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)0) {
    #line 830 
    emg_19_device = data->arg0;
    #line 831 
    emg_19_devattr = data->arg1;
    #line 832 
    ldv_free((void *)data);
  }
  #line 837 
  goto emg_main_19;
  #line 841 
  return (void *)0;
  #line 844 
  emg_main_19: 
               #line 844 
  ;
  #line 845 
  if (ldv_undef_int() != 0) {
    #line 846 
    if (ldv_undef_int() != 0) {
      #line 848 
      emg_19_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 848 
      emg_19_emg_param_2_0 = emg_19_emg_param_2_0;
      #line 852 
      emg_wrapper_boottime_get(emg_19_device,emg_19_devattr,emg_19_emg_param_2_0);
      #line 856 
      ldv_free((void *)emg_19_emg_param_2_0);
    }
    else {
      #line 860 
      emg_19_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 860 
      emg_19_emg_param_2_1 = emg_19_emg_param_2_1;
      #line 864 
      emg_wrapper_boottime_set(emg_19_device,emg_19_devattr,emg_19_emg_param_2_1,emg_19_emg_param_3_2);
      #line 868 
      ldv_free((void *)emg_19_emg_param_2_1);
    }
    #line 872 
    if (emg_repeat_cnt_main_19 > 0) {
      #line 873 
      emg_repeat_cnt_main_19 --;
      #line 875 
      goto emg_main_19;
    }
    else 
         #line 877 
         __VERIFIER_assume(0);
  }
  #line 887 
  return (void *)0;
}

#line 892  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_dev_attr_capability(void *arg0)
{
  #line 895 
  struct device_attribute *emg_20_devattr;
  #line 896 
  struct device *emg_20_device;
  #line 897 
  char *emg_20_emg_param_2_0;
  #line 898 
  char *emg_20_emg_param_2_1;
  #line 899 
  unsigned long emg_20_emg_param_3_2;
  #line 900 
  int emg_repeat_cnt_main_20 = 1;
  #line 902 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *data = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)arg0;
  #line 905 
  emg_20_devattr = emg_alias_dev_attr_capability;
  #line 907 
  __VERIFIER_assume(data->arg1 == emg_alias_dev_attr_capability);
  #line 909 
  if (data != (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)0) {
    #line 910 
    emg_20_device = data->arg0;
    #line 911 
    emg_20_devattr = data->arg1;
    #line 912 
    ldv_free((void *)data);
  }
  #line 917 
  goto emg_main_20;
  #line 921 
  return (void *)0;
  #line 924 
  emg_main_20: 
               #line 924 
  ;
  #line 925 
  if (ldv_undef_int() != 0) {
    #line 926 
    if (ldv_undef_int() != 0) {
      #line 928 
      emg_20_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 928 
      emg_20_emg_param_2_0 = emg_20_emg_param_2_0;
      #line 932 
      emg_wrapper_capability_get(emg_20_device,emg_20_devattr,emg_20_emg_param_2_0);
      #line 936 
      ldv_free((void *)emg_20_emg_param_2_0);
    }
    else {
      #line 940 
      emg_20_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 940 
      emg_20_emg_param_2_1 = emg_20_emg_param_2_1;
      #line 944 
      emg_wrapper_capability_set(emg_20_device,emg_20_devattr,emg_20_emg_param_2_1,emg_20_emg_param_3_2);
      #line 948 
      ldv_free((void *)emg_20_emg_param_2_1);
    }
    #line 952 
    if (emg_repeat_cnt_main_20 > 0) {
      #line 953 
      emg_repeat_cnt_main_20 --;
      #line 955 
      goto emg_main_20;
    }
    else 
         #line 957 
         __VERIFIER_assume(0);
  }
  #line 967 
  return (void *)0;
}

#line 972  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_dev_attr_channel(void *arg0)
{
  #line 975 
  struct device_attribute *emg_21_devattr;
  #line 976 
  struct device *emg_21_device;
  #line 977 
  char *emg_21_emg_param_2_0;
  #line 978 
  char *emg_21_emg_param_2_1;
  #line 979 
  unsigned long emg_21_emg_param_3_2;
  #line 980 
  int emg_repeat_cnt_main_21 = 1;
  #line 982 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *data = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)arg0;
  #line 985 
  emg_21_devattr = emg_alias_dev_attr_channel;
  #line 987 
  __VERIFIER_assume(data->arg1 == emg_alias_dev_attr_channel);
  #line 989 
  if (data != (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)0) {
    #line 990 
    emg_21_device = data->arg0;
    #line 991 
    emg_21_devattr = data->arg1;
    #line 992 
    ldv_free((void *)data);
  }
  #line 997 
  goto emg_main_21;
  #line 1001 
  return (void *)0;
  #line 1004 
  emg_main_21: 
               #line 1004 
  ;
  #line 1005 
  if (ldv_undef_int() != 0) {
    #line 1006 
    if (ldv_undef_int() != 0) {
      #line 1008 
      emg_21_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1008 
      emg_21_emg_param_2_0 = emg_21_emg_param_2_0;
      #line 1012 
      emg_wrapper_channel_get(emg_21_device,emg_21_devattr,emg_21_emg_param_2_0);
      #line 1016 
      ldv_free((void *)emg_21_emg_param_2_0);
    }
    else {
      #line 1020 
      emg_21_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1020 
      emg_21_emg_param_2_1 = emg_21_emg_param_2_1;
      #line 1024 
      emg_wrapper_channel_set(emg_21_device,emg_21_devattr,emg_21_emg_param_2_1,emg_21_emg_param_3_2);
      #line 1028 
      ldv_free((void *)emg_21_emg_param_2_1);
    }
    #line 1032 
    if (emg_repeat_cnt_main_21 > 0) {
      #line 1033 
      emg_repeat_cnt_main_21 --;
      #line 1035 
      goto emg_main_21;
    }
    else 
         #line 1037 
         __VERIFIER_assume(0);
  }
  #line 1047 
  return (void *)0;
}

#line 1052  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_dev_attr_lbs_mesh(void *arg0)
{
  #line 1055 
  struct device_attribute *emg_22_devattr;
  #line 1056 
  struct device *emg_22_device;
  #line 1057 
  char *emg_22_emg_param_2_0;
  #line 1058 
  char *emg_22_emg_param_2_1;
  #line 1059 
  unsigned long emg_22_emg_param_3_2;
  #line 1060 
  int emg_repeat_cnt_main_22 = 1;
  #line 1062 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *data = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)arg0;
  #line 1065 
  emg_22_devattr = emg_alias_dev_attr_lbs_mesh;
  #line 1067 
  __VERIFIER_assume(data->arg1 == emg_alias_dev_attr_lbs_mesh);
  #line 1069 
  if (data != (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)0) {
    #line 1070 
    emg_22_device = data->arg0;
    #line 1071 
    emg_22_devattr = data->arg1;
    #line 1072 
    ldv_free((void *)data);
  }
  #line 1077 
  goto emg_main_22;
  #line 1081 
  return (void *)0;
  #line 1084 
  emg_main_22: 
               #line 1084 
  ;
  #line 1085 
  if (ldv_undef_int() != 0) {
    #line 1086 
    if (ldv_undef_int() != 0) {
      #line 1088 
      emg_22_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1088 
      emg_22_emg_param_2_0 = emg_22_emg_param_2_0;
      #line 1092 
      emg_wrapper_lbs_mesh_get(emg_22_device,emg_22_devattr,emg_22_emg_param_2_0);
      #line 1096 
      ldv_free((void *)emg_22_emg_param_2_0);
    }
    else {
      #line 1100 
      emg_22_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1100 
      emg_22_emg_param_2_1 = emg_22_emg_param_2_1;
      #line 1104 
      emg_wrapper_lbs_mesh_set(emg_22_device,emg_22_devattr,emg_22_emg_param_2_1,emg_22_emg_param_3_2);
      #line 1108 
      ldv_free((void *)emg_22_emg_param_2_1);
    }
    #line 1112 
    if (emg_repeat_cnt_main_22 > 0) {
      #line 1113 
      emg_repeat_cnt_main_22 --;
      #line 1115 
      goto emg_main_22;
    }
    else 
         #line 1117 
         __VERIFIER_assume(0);
  }
  #line 1127 
  return (void *)0;
}

#line 1132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_dev_attr_mesh_id(void *arg0)
{
  #line 1135 
  struct device_attribute *emg_23_devattr;
  #line 1136 
  struct device *emg_23_device;
  #line 1137 
  char *emg_23_emg_param_2_0;
  #line 1138 
  char *emg_23_emg_param_2_1;
  #line 1139 
  unsigned long emg_23_emg_param_3_2;
  #line 1140 
  int emg_repeat_cnt_main_23 = 1;
  #line 1142 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *data = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)arg0;
  #line 1145 
  emg_23_devattr = emg_alias_dev_attr_mesh_id;
  #line 1147 
  __VERIFIER_assume(data->arg1 == emg_alias_dev_attr_mesh_id);
  #line 1149 
  if (data != (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)0) {
    #line 1150 
    emg_23_device = data->arg0;
    #line 1151 
    emg_23_devattr = data->arg1;
    #line 1152 
    ldv_free((void *)data);
  }
  #line 1157 
  goto emg_main_23;
  #line 1161 
  return (void *)0;
  #line 1164 
  emg_main_23: 
               #line 1164 
  ;
  #line 1165 
  if (ldv_undef_int() != 0) {
    #line 1166 
    if (ldv_undef_int() != 0) {
      #line 1168 
      emg_23_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1168 
      emg_23_emg_param_2_0 = emg_23_emg_param_2_0;
      #line 1172 
      emg_wrapper_mesh_id_get(emg_23_device,emg_23_devattr,emg_23_emg_param_2_0);
      #line 1176 
      ldv_free((void *)emg_23_emg_param_2_0);
    }
    else {
      #line 1180 
      emg_23_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1180 
      emg_23_emg_param_2_1 = emg_23_emg_param_2_1;
      #line 1184 
      emg_wrapper_mesh_id_set(emg_23_device,emg_23_devattr,emg_23_emg_param_2_1,emg_23_emg_param_3_2);
      #line 1188 
      ldv_free((void *)emg_23_emg_param_2_1);
    }
    #line 1192 
    if (emg_repeat_cnt_main_23 > 0) {
      #line 1193 
      emg_repeat_cnt_main_23 --;
      #line 1195 
      goto emg_main_23;
    }
    else 
         #line 1197 
         __VERIFIER_assume(0);
  }
  #line 1207 
  return (void *)0;
}

#line 1212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_dev_attr_metric_id(void *arg0)
{
  #line 1215 
  struct device_attribute *emg_24_devattr;
  #line 1216 
  struct device *emg_24_device;
  #line 1217 
  char *emg_24_emg_param_2_0;
  #line 1218 
  char *emg_24_emg_param_2_1;
  #line 1219 
  unsigned long emg_24_emg_param_3_2;
  #line 1220 
  int emg_repeat_cnt_main_24 = 1;
  #line 1222 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *data = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)arg0;
  #line 1225 
  emg_24_devattr = emg_alias_dev_attr_metric_id;
  #line 1227 
  __VERIFIER_assume(data->arg1 == emg_alias_dev_attr_metric_id);
  #line 1229 
  if (data != (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)0) {
    #line 1230 
    emg_24_device = data->arg0;
    #line 1231 
    emg_24_devattr = data->arg1;
    #line 1232 
    ldv_free((void *)data);
  }
  #line 1237 
  goto emg_main_24;
  #line 1241 
  return (void *)0;
  #line 1244 
  emg_main_24: 
               #line 1244 
  ;
  #line 1245 
  if (ldv_undef_int() != 0) {
    #line 1246 
    if (ldv_undef_int() != 0) {
      #line 1248 
      emg_24_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1248 
      emg_24_emg_param_2_0 = emg_24_emg_param_2_0;
      #line 1252 
      emg_wrapper_metric_id_get(emg_24_device,emg_24_devattr,emg_24_emg_param_2_0);
      #line 1256 
      ldv_free((void *)emg_24_emg_param_2_0);
    }
    else {
      #line 1260 
      emg_24_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1260 
      emg_24_emg_param_2_1 = emg_24_emg_param_2_1;
      #line 1264 
      emg_wrapper_metric_id_set(emg_24_device,emg_24_devattr,emg_24_emg_param_2_1,emg_24_emg_param_3_2);
      #line 1268 
      ldv_free((void *)emg_24_emg_param_2_1);
    }
    #line 1272 
    if (emg_repeat_cnt_main_24 > 0) {
      #line 1273 
      emg_repeat_cnt_main_24 --;
      #line 1275 
      goto emg_main_24;
    }
    else 
         #line 1277 
         __VERIFIER_assume(0);
  }
  #line 1287 
  return (void *)0;
}

#line 1292  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_dev_attr_prb_rsp_limit(void *arg0)
{
  #line 1295 
  struct device_attribute *emg_25_devattr;
  #line 1296 
  struct device *emg_25_device;
  #line 1297 
  char *emg_25_emg_param_2_0;
  #line 1298 
  char *emg_25_emg_param_2_1;
  #line 1299 
  unsigned long emg_25_emg_param_3_2;
  #line 1300 
  int emg_repeat_cnt_main_25 = 1;
  #line 1302 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *data = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)arg0;
  #line 1305 
  emg_25_devattr = emg_alias_dev_attr_prb_rsp_limit;
  #line 1307 
  __VERIFIER_assume(data->arg1 == emg_alias_dev_attr_prb_rsp_limit);
  #line 1309 
  if (data != (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)0) {
    #line 1310 
    emg_25_device = data->arg0;
    #line 1311 
    emg_25_devattr = data->arg1;
    #line 1312 
    ldv_free((void *)data);
  }
  #line 1317 
  goto emg_main_25;
  #line 1321 
  return (void *)0;
  #line 1324 
  emg_main_25: 
               #line 1324 
  ;
  #line 1325 
  if (ldv_undef_int() != 0) {
    #line 1326 
    if (ldv_undef_int() != 0) {
      #line 1328 
      emg_25_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1328 
      emg_25_emg_param_2_0 = emg_25_emg_param_2_0;
      #line 1332 
      emg_wrapper_lbs_prb_rsp_limit_get(emg_25_device,emg_25_devattr,emg_25_emg_param_2_0);
      #line 1336 
      ldv_free((void *)emg_25_emg_param_2_0);
    }
    else {
      #line 1340 
      emg_25_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1340 
      emg_25_emg_param_2_1 = emg_25_emg_param_2_1;
      #line 1344 
      emg_wrapper_lbs_prb_rsp_limit_set(emg_25_device,emg_25_devattr,emg_25_emg_param_2_1,emg_25_emg_param_3_2);
      #line 1348 
      ldv_free((void *)emg_25_emg_param_2_1);
    }
    #line 1352 
    if (emg_repeat_cnt_main_25 > 0) {
      #line 1353 
      emg_repeat_cnt_main_25 --;
      #line 1355 
      goto emg_main_25;
    }
    else 
         #line 1357 
         __VERIFIER_assume(0);
  }
  #line 1367 
  return (void *)0;
}

#line 1372  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_dev_attr_protocol_id(void *arg0)
{
  #line 1375 
  struct device_attribute *emg_26_devattr;
  #line 1376 
  struct device *emg_26_device;
  #line 1377 
  char *emg_26_emg_param_2_0;
  #line 1378 
  char *emg_26_emg_param_2_1;
  #line 1379 
  unsigned long emg_26_emg_param_3_2;
  #line 1380 
  int emg_repeat_cnt_main_26 = 1;
  #line 1382 
  struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *data = (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)arg0;
  #line 1385 
  emg_26_devattr = emg_alias_dev_attr_protocol_id;
  #line 1387 
  __VERIFIER_assume(data->arg1 == emg_alias_dev_attr_protocol_id);
  #line 1389 
  if (data != (struct emg_struct_devattr_instance_dev_attr_anycast_mask_17 *)0) {
    #line 1390 
    emg_26_device = data->arg0;
    #line 1391 
    emg_26_devattr = data->arg1;
    #line 1392 
    ldv_free((void *)data);
  }
  #line 1397 
  goto emg_main_26;
  #line 1401 
  return (void *)0;
  #line 1404 
  emg_main_26: 
               #line 1404 
  ;
  #line 1405 
  if (ldv_undef_int() != 0) {
    #line 1406 
    if (ldv_undef_int() != 0) {
      #line 1408 
      emg_26_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1408 
      emg_26_emg_param_2_0 = emg_26_emg_param_2_0;
      #line 1412 
      emg_wrapper_protocol_id_get(emg_26_device,emg_26_devattr,emg_26_emg_param_2_0);
      #line 1416 
      ldv_free((void *)emg_26_emg_param_2_0);
    }
    else {
      #line 1420 
      emg_26_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1420 
      emg_26_emg_param_2_1 = emg_26_emg_param_2_1;
      #line 1424 
      emg_wrapper_protocol_id_set(emg_26_device,emg_26_devattr,emg_26_emg_param_2_1,emg_26_emg_param_3_2);
      #line 1428 
      ldv_free((void *)emg_26_emg_param_2_1);
    }
    #line 1432 
    if (emg_repeat_cnt_main_26 > 0) {
      #line 1433 
      emg_repeat_cnt_main_26 --;
      #line 1435 
      goto emg_main_26;
    }
    else 
         #line 1437 
         __VERIFIER_assume(0);
  }
  #line 1447 
  return (void *)0;
}

#line 1452  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_11(void *arg0)
{
  #line 1455 
  struct file_operations *emg_27_container;
  #line 1456 
  long long emg_27_emg_param_1_0;
  #line 1457 
  long long emg_27_emg_param_1_10;
  #line 1458 
  long long emg_27_emg_param_1_12;
  #line 1459 
  long long emg_27_emg_param_1_14;
  #line 1460 
  long long emg_27_emg_param_1_16;
  #line 1461 
  long long emg_27_emg_param_1_18;
  #line 1462 
  long long emg_27_emg_param_1_2;
  #line 1463 
  long long emg_27_emg_param_1_20;
  #line 1464 
  long long emg_27_emg_param_1_22;
  #line 1465 
  long long emg_27_emg_param_1_24;
  #line 1466 
  long long emg_27_emg_param_1_26;
  #line 1467 
  long long emg_27_emg_param_1_28;
  #line 1468 
  long long emg_27_emg_param_1_30;
  #line 1469 
  char *emg_27_emg_param_1_32;
  #line 1470 
  char *emg_27_emg_param_1_34;
  #line 1471 
  long long emg_27_emg_param_1_4;
  #line 1472 
  long long emg_27_emg_param_1_6;
  #line 1473 
  long long emg_27_emg_param_1_8;
  #line 1474 
  int emg_27_emg_param_2_1;
  #line 1475 
  int emg_27_emg_param_2_11;
  #line 1476 
  int emg_27_emg_param_2_13;
  #line 1477 
  int emg_27_emg_param_2_15;
  #line 1478 
  int emg_27_emg_param_2_17;
  #line 1479 
  int emg_27_emg_param_2_19;
  #line 1480 
  int emg_27_emg_param_2_21;
  #line 1481 
  int emg_27_emg_param_2_23;
  #line 1482 
  int emg_27_emg_param_2_25;
  #line 1483 
  int emg_27_emg_param_2_27;
  #line 1484 
  int emg_27_emg_param_2_29;
  #line 1485 
  int emg_27_emg_param_2_3;
  #line 1486 
  int emg_27_emg_param_2_31;
  #line 1487 
  int emg_27_emg_param_2_5;
  #line 1488 
  int emg_27_emg_param_2_7;
  #line 1489 
  int emg_27_emg_param_2_9;
  #line 1490 
  long long *emg_27_emg_param_3_33;
  #line 1491 
  long long *emg_27_emg_param_3_35;
  #line 1492 
  struct file *emg_27_resource_0;
  #line 1493 
  struct inode *emg_27_resource_1;
  #line 1494 
  int emg_27_ret;
  #line 1495 
  unsigned long emg_27_size_cnt;
  #line 1496 
  int emg_repeat_cnt_main_27_0 = 1;
  #line 1497 
  int emg_repeat_cnt_call_27 = 1;
  #line 1498 
  int emg_repeat_cnt_main_27_1 = 1;
  #line 1500 
  struct emg_struct_character_driver_scenario_11_27 *data = (struct emg_struct_character_driver_scenario_11_27 *)arg0;
  #line 1504 
  emg_27_ret = ldv_undef_int();
  #line 1505 
  emg_27_container = emg_alias_lbs_debug_fops;
  #line 1506 
  emg_27_ret = ldv_undef_int();
  #line 1508 
  __VERIFIER_assume(data->arg0 == emg_alias_lbs_debug_fops);
  #line 1510 
  if (data != (struct emg_struct_character_driver_scenario_11_27 *)0) {
    #line 1511 
    emg_27_container = data->arg0;
    #line 1512 
    ldv_free((void *)data);
  }
  #line 1517 
  emg_27_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1518 
  emg_27_size_cnt = (unsigned long)ldv_undef_int();
  #line 1522 
  goto emg_main_27;
  #line 1526 
  return (void *)0;
  #line 1529 
  emg_call_27: 
               #line 1529 
  ;
  #line 1530 
  if (ldv_undef_int() != 0) {
    #line 1531 
    switch (ldv_undef_int()) {
      #line 1532 
      case 0: 
              #line 1532 
      ;
      #line 1534 
      emg_27_emg_param_1_32 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1534 
      emg_27_emg_param_1_32 = emg_27_emg_param_1_32;
      #line 1535 
      emg_27_emg_param_3_33 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1535 
      emg_27_emg_param_3_33 = emg_27_emg_param_3_33;
      #line 1539 
      emg_wrapper_lbs_dev_info(emg_27_resource_0,emg_27_emg_param_1_32,emg_27_size_cnt,emg_27_emg_param_3_33);
      #line 1543 
      ldv_free((void *)emg_27_emg_param_1_32);
      #line 1544 
      ldv_free((void *)emg_27_emg_param_3_33);
      #line 1546 
      break;
      #line 1548 
      case 1: 
              #line 1548 
      ;
      #line 1550 
      default_llseek(emg_27_resource_0,emg_27_emg_param_1_30,emg_27_emg_param_2_31);
      #line 1552 
      break;
      #line 1554 
      case 2: 
              #line 1554 
      ;
      #line 1556 
      generic_file_llseek(emg_27_resource_0,emg_27_emg_param_1_28,emg_27_emg_param_2_29);
      #line 1558 
      break;
      #line 1560 
      case 3: 
              #line 1560 
      ;
      #line 1562 
      generic_file_llseek(emg_27_resource_0,emg_27_emg_param_1_26,emg_27_emg_param_2_27);
      #line 1564 
      break;
      #line 1566 
      case 4: 
              #line 1566 
      ;
      #line 1568 
      generic_file_llseek(emg_27_resource_0,emg_27_emg_param_1_24,emg_27_emg_param_2_25);
      #line 1570 
      break;
      #line 1572 
      case 5: 
              #line 1572 
      ;
      #line 1574 
      generic_file_llseek(emg_27_resource_0,emg_27_emg_param_1_22,emg_27_emg_param_2_23);
      #line 1576 
      break;
      #line 1578 
      case 6: 
              #line 1578 
      ;
      #line 1580 
      generic_file_llseek(emg_27_resource_0,emg_27_emg_param_1_20,emg_27_emg_param_2_21);
      #line 1582 
      break;
      #line 1584 
      case 7: 
              #line 1584 
      ;
      #line 1586 
      generic_file_llseek(emg_27_resource_0,emg_27_emg_param_1_18,emg_27_emg_param_2_19);
      #line 1588 
      break;
      #line 1590 
      case 8: 
              #line 1590 
      ;
      #line 1592 
      generic_file_llseek(emg_27_resource_0,emg_27_emg_param_1_16,emg_27_emg_param_2_17);
      #line 1594 
      break;
      #line 1596 
      case 9: 
              #line 1596 
      ;
      #line 1598 
      generic_file_llseek(emg_27_resource_0,emg_27_emg_param_1_14,emg_27_emg_param_2_15);
      #line 1600 
      break;
      #line 1602 
      case 10: 
               #line 1602 
      ;
      #line 1604 
      generic_file_llseek(emg_27_resource_0,emg_27_emg_param_1_12,emg_27_emg_param_2_13);
      #line 1606 
      break;
      #line 1608 
      case 11: 
               #line 1608 
      ;
      #line 1610 
      generic_file_llseek(emg_27_resource_0,emg_27_emg_param_1_10,emg_27_emg_param_2_11);
      #line 1612 
      break;
      #line 1614 
      case 12: 
               #line 1614 
      ;
      #line 1616 
      generic_file_llseek(emg_27_resource_0,emg_27_emg_param_1_8,emg_27_emg_param_2_9);
      #line 1618 
      break;
      #line 1620 
      case 13: 
               #line 1620 
      ;
      #line 1622 
      generic_file_llseek(emg_27_resource_0,emg_27_emg_param_1_6,emg_27_emg_param_2_7);
      #line 1624 
      break;
      #line 1626 
      case 14: 
               #line 1626 
      ;
      #line 1628 
      generic_file_llseek(emg_27_resource_0,emg_27_emg_param_1_4,emg_27_emg_param_2_5);
      #line 1630 
      break;
      #line 1632 
      case 15: 
               #line 1632 
      ;
      #line 1634 
      generic_file_llseek(emg_27_resource_0,emg_27_emg_param_1_2,emg_27_emg_param_2_3);
      #line 1636 
      break;
      #line 1638 
      case 16: 
               #line 1638 
      ;
      #line 1640 
      generic_file_llseek(emg_27_resource_0,emg_27_emg_param_1_0,emg_27_emg_param_2_1);
      #line 1642 
      break;
      #line 1644 
      case 17: 
               #line 1644 
      ;
      #line 1651 
      __VERIFIER_assume(emg_27_size_cnt <= 2147479552UL);
      #line 1652 
      emg_27_emg_param_1_34 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1652 
      emg_27_emg_param_1_34 = emg_27_emg_param_1_34;
      #line 1653 
      emg_27_emg_param_3_35 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1653 
      emg_27_emg_param_3_35 = emg_27_emg_param_3_35;
      #line 1657 
      emg_wrapper_lbs_lowrssi_write(emg_27_resource_0,emg_27_emg_param_1_34,emg_27_size_cnt,emg_27_emg_param_3_35);
      #line 1661 
      ldv_free((void *)emg_27_emg_param_1_34);
      #line 1662 
      ldv_free((void *)emg_27_emg_param_3_35);
      #line 1664 
      break;
      #line 1666 
      default: 
               #line 1666 
      ;
      #line 1666 
      __VERIFIER_assume(0);
    }
    #line 1669 
    if (emg_repeat_cnt_call_27 > 0) {
      #line 1670 
      emg_repeat_cnt_call_27 --;
      #line 1672 
      goto emg_call_27;
    }
    else 
         #line 1674 
         __VERIFIER_assume(0);
  }
  else {
    #line 1680 
    if (emg_27_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1681 
      (*(emg_27_container->release))(emg_27_resource_1,emg_27_resource_0);
    #line 1685 
    if (emg_repeat_cnt_main_27_0 > 0) {
      #line 1686 
      emg_repeat_cnt_main_27_0 --;
      #line 1688 
      goto emg_main_27;
    }
    else 
         #line 1690 
         __VERIFIER_assume(0);
  }
  #line 1696 
  return (void *)0;
  #line 1699 
  emg_main_27: 
               #line 1699 
  ;
  #line 1700 
  if (ldv_undef_int() != 0) {
    #line 1702 
    emg_27_ret = simple_open(emg_27_resource_1,emg_27_resource_0);
    #line 1707 
    emg_27_ret = ldv_filter_err_code(emg_27_ret);
    #line 1710 
    if (ldv_undef_int() != 0) {
      #line 1712 
      __VERIFIER_assume(emg_27_ret == 0);
      #line 1716 
      goto emg_call_27;
    }
    else {
      #line 1721 
      __VERIFIER_assume(emg_27_ret != 0);
      #line 1724 
      if (emg_repeat_cnt_main_27_1 > 0) {
        #line 1725 
        emg_repeat_cnt_main_27_1 --;
        #line 1727 
        goto emg_main_27;
      }
      else 
           #line 1729 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1736 
       ldv_free((void *)emg_27_resource_0);
  #line 1744 
  return (void *)0;
}

#line 1749  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_12(void *arg0)
{
  #line 1752 
  struct file_operations *emg_28_container;
  #line 1753 
  long long emg_28_emg_param_1_0;
  #line 1754 
  long long emg_28_emg_param_1_10;
  #line 1755 
  long long emg_28_emg_param_1_12;
  #line 1756 
  long long emg_28_emg_param_1_14;
  #line 1757 
  long long emg_28_emg_param_1_16;
  #line 1758 
  long long emg_28_emg_param_1_18;
  #line 1759 
  long long emg_28_emg_param_1_2;
  #line 1760 
  long long emg_28_emg_param_1_20;
  #line 1761 
  long long emg_28_emg_param_1_22;
  #line 1762 
  long long emg_28_emg_param_1_24;
  #line 1763 
  long long emg_28_emg_param_1_26;
  #line 1764 
  long long emg_28_emg_param_1_28;
  #line 1765 
  long long emg_28_emg_param_1_30;
  #line 1766 
  char *emg_28_emg_param_1_32;
  #line 1767 
  char *emg_28_emg_param_1_34;
  #line 1768 
  long long emg_28_emg_param_1_4;
  #line 1769 
  long long emg_28_emg_param_1_6;
  #line 1770 
  long long emg_28_emg_param_1_8;
  #line 1771 
  int emg_28_emg_param_2_1;
  #line 1772 
  int emg_28_emg_param_2_11;
  #line 1773 
  int emg_28_emg_param_2_13;
  #line 1774 
  int emg_28_emg_param_2_15;
  #line 1775 
  int emg_28_emg_param_2_17;
  #line 1776 
  int emg_28_emg_param_2_19;
  #line 1777 
  int emg_28_emg_param_2_21;
  #line 1778 
  int emg_28_emg_param_2_23;
  #line 1779 
  int emg_28_emg_param_2_25;
  #line 1780 
  int emg_28_emg_param_2_27;
  #line 1781 
  int emg_28_emg_param_2_29;
  #line 1782 
  int emg_28_emg_param_2_3;
  #line 1783 
  int emg_28_emg_param_2_31;
  #line 1784 
  int emg_28_emg_param_2_5;
  #line 1785 
  int emg_28_emg_param_2_7;
  #line 1786 
  int emg_28_emg_param_2_9;
  #line 1787 
  long long *emg_28_emg_param_3_33;
  #line 1788 
  long long *emg_28_emg_param_3_35;
  #line 1789 
  struct file *emg_28_resource_0;
  #line 1790 
  struct inode *emg_28_resource_1;
  #line 1791 
  int emg_28_ret;
  #line 1792 
  unsigned long emg_28_size_cnt;
  #line 1793 
  int emg_repeat_cnt_main_28_1 = 1;
  #line 1794 
  int emg_repeat_cnt_call_28 = 1;
  #line 1795 
  int emg_repeat_cnt_main_28_0 = 1;
  #line 1797 
  struct emg_struct_character_driver_scenario_11_27 *data = (struct emg_struct_character_driver_scenario_11_27 *)arg0;
  #line 1801 
  emg_28_ret = ldv_undef_int();
  #line 1802 
  emg_28_container = emg_alias_lbs_debug_fops;
  #line 1803 
  emg_28_ret = ldv_undef_int();
  #line 1805 
  __VERIFIER_assume(data->arg0 == emg_alias_lbs_debug_fops);
  #line 1807 
  if (data != (struct emg_struct_character_driver_scenario_11_27 *)0) {
    #line 1808 
    emg_28_container = data->arg0;
    #line 1809 
    ldv_free((void *)data);
  }
  #line 1814 
  emg_28_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1815 
  emg_28_size_cnt = (unsigned long)ldv_undef_int();
  #line 1819 
  goto emg_main_28;
  #line 1823 
  return (void *)0;
  #line 1826 
  emg_call_28: 
               #line 1826 
  ;
  #line 1827 
  if (ldv_undef_int() != 0) {
    #line 1828 
    switch (ldv_undef_int()) {
      #line 1829 
      case 0: 
              #line 1829 
      ;
      #line 1831 
      emg_28_emg_param_1_32 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1831 
      emg_28_emg_param_1_32 = emg_28_emg_param_1_32;
      #line 1832 
      emg_28_emg_param_3_33 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1832 
      emg_28_emg_param_3_33 = emg_28_emg_param_3_33;
      #line 1836 
      emg_wrapper_lbs_failcount_read(emg_28_resource_0,emg_28_emg_param_1_32,emg_28_size_cnt,emg_28_emg_param_3_33);
      #line 1840 
      ldv_free((void *)emg_28_emg_param_1_32);
      #line 1841 
      ldv_free((void *)emg_28_emg_param_3_33);
      #line 1843 
      break;
      #line 1845 
      case 1: 
              #line 1845 
      ;
      #line 1847 
      default_llseek(emg_28_resource_0,emg_28_emg_param_1_30,emg_28_emg_param_2_31);
      #line 1849 
      break;
      #line 1851 
      case 2: 
              #line 1851 
      ;
      #line 1853 
      generic_file_llseek(emg_28_resource_0,emg_28_emg_param_1_28,emg_28_emg_param_2_29);
      #line 1855 
      break;
      #line 1857 
      case 3: 
              #line 1857 
      ;
      #line 1859 
      generic_file_llseek(emg_28_resource_0,emg_28_emg_param_1_26,emg_28_emg_param_2_27);
      #line 1861 
      break;
      #line 1863 
      case 4: 
              #line 1863 
      ;
      #line 1865 
      generic_file_llseek(emg_28_resource_0,emg_28_emg_param_1_24,emg_28_emg_param_2_25);
      #line 1867 
      break;
      #line 1869 
      case 5: 
              #line 1869 
      ;
      #line 1871 
      generic_file_llseek(emg_28_resource_0,emg_28_emg_param_1_22,emg_28_emg_param_2_23);
      #line 1873 
      break;
      #line 1875 
      case 6: 
              #line 1875 
      ;
      #line 1877 
      generic_file_llseek(emg_28_resource_0,emg_28_emg_param_1_20,emg_28_emg_param_2_21);
      #line 1879 
      break;
      #line 1881 
      case 7: 
              #line 1881 
      ;
      #line 1883 
      generic_file_llseek(emg_28_resource_0,emg_28_emg_param_1_18,emg_28_emg_param_2_19);
      #line 1885 
      break;
      #line 1887 
      case 8: 
              #line 1887 
      ;
      #line 1889 
      generic_file_llseek(emg_28_resource_0,emg_28_emg_param_1_16,emg_28_emg_param_2_17);
      #line 1891 
      break;
      #line 1893 
      case 9: 
              #line 1893 
      ;
      #line 1895 
      generic_file_llseek(emg_28_resource_0,emg_28_emg_param_1_14,emg_28_emg_param_2_15);
      #line 1897 
      break;
      #line 1899 
      case 10: 
               #line 1899 
      ;
      #line 1901 
      generic_file_llseek(emg_28_resource_0,emg_28_emg_param_1_12,emg_28_emg_param_2_13);
      #line 1903 
      break;
      #line 1905 
      case 11: 
               #line 1905 
      ;
      #line 1907 
      generic_file_llseek(emg_28_resource_0,emg_28_emg_param_1_10,emg_28_emg_param_2_11);
      #line 1909 
      break;
      #line 1911 
      case 12: 
               #line 1911 
      ;
      #line 1913 
      generic_file_llseek(emg_28_resource_0,emg_28_emg_param_1_8,emg_28_emg_param_2_9);
      #line 1915 
      break;
      #line 1917 
      case 13: 
               #line 1917 
      ;
      #line 1919 
      generic_file_llseek(emg_28_resource_0,emg_28_emg_param_1_6,emg_28_emg_param_2_7);
      #line 1921 
      break;
      #line 1923 
      case 14: 
               #line 1923 
      ;
      #line 1925 
      generic_file_llseek(emg_28_resource_0,emg_28_emg_param_1_4,emg_28_emg_param_2_5);
      #line 1927 
      break;
      #line 1929 
      case 15: 
               #line 1929 
      ;
      #line 1931 
      generic_file_llseek(emg_28_resource_0,emg_28_emg_param_1_2,emg_28_emg_param_2_3);
      #line 1933 
      break;
      #line 1935 
      case 16: 
               #line 1935 
      ;
      #line 1937 
      generic_file_llseek(emg_28_resource_0,emg_28_emg_param_1_0,emg_28_emg_param_2_1);
      #line 1939 
      break;
      #line 1941 
      case 17: 
               #line 1941 
      ;
      #line 1948 
      __VERIFIER_assume(emg_28_size_cnt <= 2147479552UL);
      #line 1949 
      emg_28_emg_param_1_34 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1949 
      emg_28_emg_param_1_34 = emg_28_emg_param_1_34;
      #line 1950 
      emg_28_emg_param_3_35 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1950 
      emg_28_emg_param_3_35 = emg_28_emg_param_3_35;
      #line 1954 
      emg_wrapper_lbs_failcount_write(emg_28_resource_0,emg_28_emg_param_1_34,emg_28_size_cnt,emg_28_emg_param_3_35);
      #line 1958 
      ldv_free((void *)emg_28_emg_param_1_34);
      #line 1959 
      ldv_free((void *)emg_28_emg_param_3_35);
      #line 1961 
      break;
      #line 1963 
      default: 
               #line 1963 
      ;
      #line 1963 
      __VERIFIER_assume(0);
    }
    #line 1966 
    if (emg_repeat_cnt_call_28 > 0) {
      #line 1967 
      emg_repeat_cnt_call_28 --;
      #line 1969 
      goto emg_call_28;
    }
    else 
         #line 1971 
         __VERIFIER_assume(0);
  }
  else {
    #line 1977 
    if (emg_28_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1978 
      (*(emg_28_container->release))(emg_28_resource_1,emg_28_resource_0);
    #line 1982 
    if (emg_repeat_cnt_main_28_1 > 0) {
      #line 1983 
      emg_repeat_cnt_main_28_1 --;
      #line 1985 
      goto emg_main_28;
    }
    else 
         #line 1987 
         __VERIFIER_assume(0);
  }
  #line 1993 
  return (void *)0;
  #line 1996 
  emg_main_28: 
               #line 1996 
  ;
  #line 1997 
  if (ldv_undef_int() != 0) {
    #line 1999 
    emg_28_ret = simple_open(emg_28_resource_1,emg_28_resource_0);
    #line 2004 
    emg_28_ret = ldv_filter_err_code(emg_28_ret);
    #line 2007 
    if (ldv_undef_int() != 0) {
      #line 2009 
      __VERIFIER_assume(emg_28_ret == 0);
      #line 2013 
      goto emg_call_28;
    }
    else {
      #line 2018 
      __VERIFIER_assume(emg_28_ret != 0);
      #line 2021 
      if (emg_repeat_cnt_main_28_0 > 0) {
        #line 2022 
        emg_repeat_cnt_main_28_0 --;
        #line 2024 
        goto emg_main_28;
      }
      else 
           #line 2026 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2033 
       ldv_free((void *)emg_28_resource_0);
  #line 2041 
  return (void *)0;
}

#line 2046  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_13(void *arg0)
{
  #line 2049 
  struct file_operations *emg_29_container;
  #line 2050 
  long long emg_29_emg_param_1_0;
  #line 2051 
  long long emg_29_emg_param_1_10;
  #line 2052 
  long long emg_29_emg_param_1_12;
  #line 2053 
  long long emg_29_emg_param_1_14;
  #line 2054 
  long long emg_29_emg_param_1_16;
  #line 2055 
  long long emg_29_emg_param_1_18;
  #line 2056 
  long long emg_29_emg_param_1_2;
  #line 2057 
  long long emg_29_emg_param_1_20;
  #line 2058 
  long long emg_29_emg_param_1_22;
  #line 2059 
  long long emg_29_emg_param_1_24;
  #line 2060 
  long long emg_29_emg_param_1_26;
  #line 2061 
  long long emg_29_emg_param_1_28;
  #line 2062 
  long long emg_29_emg_param_1_30;
  #line 2063 
  char *emg_29_emg_param_1_32;
  #line 2064 
  char *emg_29_emg_param_1_34;
  #line 2065 
  long long emg_29_emg_param_1_4;
  #line 2066 
  long long emg_29_emg_param_1_6;
  #line 2067 
  long long emg_29_emg_param_1_8;
  #line 2068 
  int emg_29_emg_param_2_1;
  #line 2069 
  int emg_29_emg_param_2_11;
  #line 2070 
  int emg_29_emg_param_2_13;
  #line 2071 
  int emg_29_emg_param_2_15;
  #line 2072 
  int emg_29_emg_param_2_17;
  #line 2073 
  int emg_29_emg_param_2_19;
  #line 2074 
  int emg_29_emg_param_2_21;
  #line 2075 
  int emg_29_emg_param_2_23;
  #line 2076 
  int emg_29_emg_param_2_25;
  #line 2077 
  int emg_29_emg_param_2_27;
  #line 2078 
  int emg_29_emg_param_2_29;
  #line 2079 
  int emg_29_emg_param_2_3;
  #line 2080 
  int emg_29_emg_param_2_31;
  #line 2081 
  int emg_29_emg_param_2_5;
  #line 2082 
  int emg_29_emg_param_2_7;
  #line 2083 
  int emg_29_emg_param_2_9;
  #line 2084 
  long long *emg_29_emg_param_3_33;
  #line 2085 
  long long *emg_29_emg_param_3_35;
  #line 2086 
  struct file *emg_29_resource_0;
  #line 2087 
  struct inode *emg_29_resource_1;
  #line 2088 
  int emg_29_ret;
  #line 2089 
  unsigned long emg_29_size_cnt;
  #line 2090 
  int emg_repeat_cnt_call_29 = 1;
  #line 2091 
  int emg_repeat_cnt_main_29_1 = 1;
  #line 2092 
  int emg_repeat_cnt_main_29_0 = 1;
  #line 2094 
  struct emg_struct_character_driver_scenario_11_27 *data = (struct emg_struct_character_driver_scenario_11_27 *)arg0;
  #line 2098 
  emg_29_ret = ldv_undef_int();
  #line 2099 
  emg_29_container = emg_alias_lbs_debug_fops;
  #line 2100 
  emg_29_ret = ldv_undef_int();
  #line 2102 
  __VERIFIER_assume(data->arg0 == emg_alias_lbs_debug_fops);
  #line 2104 
  if (data != (struct emg_struct_character_driver_scenario_11_27 *)0) {
    #line 2105 
    emg_29_container = data->arg0;
    #line 2106 
    ldv_free((void *)data);
  }
  #line 2111 
  emg_29_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2112 
  emg_29_size_cnt = (unsigned long)ldv_undef_int();
  #line 2116 
  goto emg_main_29;
  #line 2120 
  return (void *)0;
  #line 2123 
  emg_call_29: 
               #line 2123 
  ;
  #line 2124 
  if (ldv_undef_int() != 0) {
    #line 2125 
    switch (ldv_undef_int()) {
      #line 2126 
      case 0: 
              #line 2126 
      ;
      #line 2128 
      emg_29_emg_param_1_32 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2128 
      emg_29_emg_param_1_32 = emg_29_emg_param_1_32;
      #line 2129 
      emg_29_emg_param_3_33 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2129 
      emg_29_emg_param_3_33 = emg_29_emg_param_3_33;
      #line 2133 
      emg_wrapper_lbs_highrssi_read(emg_29_resource_0,emg_29_emg_param_1_32,emg_29_size_cnt,emg_29_emg_param_3_33);
      #line 2137 
      ldv_free((void *)emg_29_emg_param_1_32);
      #line 2138 
      ldv_free((void *)emg_29_emg_param_3_33);
      #line 2140 
      break;
      #line 2142 
      case 1: 
              #line 2142 
      ;
      #line 2144 
      default_llseek(emg_29_resource_0,emg_29_emg_param_1_30,emg_29_emg_param_2_31);
      #line 2146 
      break;
      #line 2148 
      case 2: 
              #line 2148 
      ;
      #line 2150 
      generic_file_llseek(emg_29_resource_0,emg_29_emg_param_1_28,emg_29_emg_param_2_29);
      #line 2152 
      break;
      #line 2154 
      case 3: 
              #line 2154 
      ;
      #line 2156 
      generic_file_llseek(emg_29_resource_0,emg_29_emg_param_1_26,emg_29_emg_param_2_27);
      #line 2158 
      break;
      #line 2160 
      case 4: 
              #line 2160 
      ;
      #line 2162 
      generic_file_llseek(emg_29_resource_0,emg_29_emg_param_1_24,emg_29_emg_param_2_25);
      #line 2164 
      break;
      #line 2166 
      case 5: 
              #line 2166 
      ;
      #line 2168 
      generic_file_llseek(emg_29_resource_0,emg_29_emg_param_1_22,emg_29_emg_param_2_23);
      #line 2170 
      break;
      #line 2172 
      case 6: 
              #line 2172 
      ;
      #line 2174 
      generic_file_llseek(emg_29_resource_0,emg_29_emg_param_1_20,emg_29_emg_param_2_21);
      #line 2176 
      break;
      #line 2178 
      case 7: 
              #line 2178 
      ;
      #line 2180 
      generic_file_llseek(emg_29_resource_0,emg_29_emg_param_1_18,emg_29_emg_param_2_19);
      #line 2182 
      break;
      #line 2184 
      case 8: 
              #line 2184 
      ;
      #line 2186 
      generic_file_llseek(emg_29_resource_0,emg_29_emg_param_1_16,emg_29_emg_param_2_17);
      #line 2188 
      break;
      #line 2190 
      case 9: 
              #line 2190 
      ;
      #line 2192 
      generic_file_llseek(emg_29_resource_0,emg_29_emg_param_1_14,emg_29_emg_param_2_15);
      #line 2194 
      break;
      #line 2196 
      case 10: 
               #line 2196 
      ;
      #line 2198 
      generic_file_llseek(emg_29_resource_0,emg_29_emg_param_1_12,emg_29_emg_param_2_13);
      #line 2200 
      break;
      #line 2202 
      case 11: 
               #line 2202 
      ;
      #line 2204 
      generic_file_llseek(emg_29_resource_0,emg_29_emg_param_1_10,emg_29_emg_param_2_11);
      #line 2206 
      break;
      #line 2208 
      case 12: 
               #line 2208 
      ;
      #line 2210 
      generic_file_llseek(emg_29_resource_0,emg_29_emg_param_1_8,emg_29_emg_param_2_9);
      #line 2212 
      break;
      #line 2214 
      case 13: 
               #line 2214 
      ;
      #line 2216 
      generic_file_llseek(emg_29_resource_0,emg_29_emg_param_1_6,emg_29_emg_param_2_7);
      #line 2218 
      break;
      #line 2220 
      case 14: 
               #line 2220 
      ;
      #line 2222 
      generic_file_llseek(emg_29_resource_0,emg_29_emg_param_1_4,emg_29_emg_param_2_5);
      #line 2224 
      break;
      #line 2226 
      case 15: 
               #line 2226 
      ;
      #line 2228 
      generic_file_llseek(emg_29_resource_0,emg_29_emg_param_1_2,emg_29_emg_param_2_3);
      #line 2230 
      break;
      #line 2232 
      case 16: 
               #line 2232 
      ;
      #line 2234 
      generic_file_llseek(emg_29_resource_0,emg_29_emg_param_1_0,emg_29_emg_param_2_1);
      #line 2236 
      break;
      #line 2238 
      case 17: 
               #line 2238 
      ;
      #line 2245 
      __VERIFIER_assume(emg_29_size_cnt <= 2147479552UL);
      #line 2246 
      emg_29_emg_param_1_34 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2246 
      emg_29_emg_param_1_34 = emg_29_emg_param_1_34;
      #line 2247 
      emg_29_emg_param_3_35 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2247 
      emg_29_emg_param_3_35 = emg_29_emg_param_3_35;
      #line 2251 
      emg_wrapper_lbs_highrssi_write(emg_29_resource_0,emg_29_emg_param_1_34,emg_29_size_cnt,emg_29_emg_param_3_35);
      #line 2255 
      ldv_free((void *)emg_29_emg_param_1_34);
      #line 2256 
      ldv_free((void *)emg_29_emg_param_3_35);
      #line 2258 
      break;
      #line 2260 
      default: 
               #line 2260 
      ;
      #line 2260 
      __VERIFIER_assume(0);
    }
    #line 2263 
    if (emg_repeat_cnt_call_29 > 0) {
      #line 2264 
      emg_repeat_cnt_call_29 --;
      #line 2266 
      goto emg_call_29;
    }
    else 
         #line 2268 
         __VERIFIER_assume(0);
  }
  else {
    #line 2274 
    if (emg_29_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2275 
      (*(emg_29_container->release))(emg_29_resource_1,emg_29_resource_0);
    #line 2279 
    if (emg_repeat_cnt_main_29_0 > 0) {
      #line 2280 
      emg_repeat_cnt_main_29_0 --;
      #line 2282 
      goto emg_main_29;
    }
    else 
         #line 2284 
         __VERIFIER_assume(0);
  }
  #line 2290 
  return (void *)0;
  #line 2293 
  emg_main_29: 
               #line 2293 
  ;
  #line 2294 
  if (ldv_undef_int() != 0) {
    #line 2296 
    emg_29_ret = simple_open(emg_29_resource_1,emg_29_resource_0);
    #line 2301 
    emg_29_ret = ldv_filter_err_code(emg_29_ret);
    #line 2304 
    if (ldv_undef_int() != 0) {
      #line 2306 
      __VERIFIER_assume(emg_29_ret == 0);
      #line 2310 
      goto emg_call_29;
    }
    else {
      #line 2315 
      __VERIFIER_assume(emg_29_ret != 0);
      #line 2318 
      if (emg_repeat_cnt_main_29_1 > 0) {
        #line 2319 
        emg_repeat_cnt_main_29_1 --;
        #line 2321 
        goto emg_main_29;
      }
      else 
           #line 2323 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2330 
       ldv_free((void *)emg_29_resource_0);
  #line 2338 
  return (void *)0;
}

#line 2343  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_14(void *arg0)
{
  #line 2346 
  struct file_operations *emg_30_container;
  #line 2347 
  long long emg_30_emg_param_1_0;
  #line 2348 
  long long emg_30_emg_param_1_10;
  #line 2349 
  long long emg_30_emg_param_1_12;
  #line 2350 
  long long emg_30_emg_param_1_14;
  #line 2351 
  long long emg_30_emg_param_1_16;
  #line 2352 
  long long emg_30_emg_param_1_18;
  #line 2353 
  long long emg_30_emg_param_1_2;
  #line 2354 
  long long emg_30_emg_param_1_20;
  #line 2355 
  long long emg_30_emg_param_1_22;
  #line 2356 
  long long emg_30_emg_param_1_24;
  #line 2357 
  long long emg_30_emg_param_1_26;
  #line 2358 
  long long emg_30_emg_param_1_28;
  #line 2359 
  long long emg_30_emg_param_1_30;
  #line 2360 
  char *emg_30_emg_param_1_32;
  #line 2361 
  char *emg_30_emg_param_1_34;
  #line 2362 
  long long emg_30_emg_param_1_4;
  #line 2363 
  long long emg_30_emg_param_1_6;
  #line 2364 
  long long emg_30_emg_param_1_8;
  #line 2365 
  int emg_30_emg_param_2_1;
  #line 2366 
  int emg_30_emg_param_2_11;
  #line 2367 
  int emg_30_emg_param_2_13;
  #line 2368 
  int emg_30_emg_param_2_15;
  #line 2369 
  int emg_30_emg_param_2_17;
  #line 2370 
  int emg_30_emg_param_2_19;
  #line 2371 
  int emg_30_emg_param_2_21;
  #line 2372 
  int emg_30_emg_param_2_23;
  #line 2373 
  int emg_30_emg_param_2_25;
  #line 2374 
  int emg_30_emg_param_2_27;
  #line 2375 
  int emg_30_emg_param_2_29;
  #line 2376 
  int emg_30_emg_param_2_3;
  #line 2377 
  int emg_30_emg_param_2_31;
  #line 2378 
  int emg_30_emg_param_2_5;
  #line 2379 
  int emg_30_emg_param_2_7;
  #line 2380 
  int emg_30_emg_param_2_9;
  #line 2381 
  long long *emg_30_emg_param_3_33;
  #line 2382 
  long long *emg_30_emg_param_3_35;
  #line 2383 
  struct file *emg_30_resource_0;
  #line 2384 
  struct inode *emg_30_resource_1;
  #line 2385 
  int emg_30_ret;
  #line 2386 
  unsigned long emg_30_size_cnt;
  #line 2387 
  int emg_repeat_cnt_main_30_1 = 1;
  #line 2388 
  int emg_repeat_cnt_call_30 = 1;
  #line 2389 
  int emg_repeat_cnt_main_30_0 = 1;
  #line 2391 
  struct emg_struct_character_driver_scenario_11_27 *data = (struct emg_struct_character_driver_scenario_11_27 *)arg0;
  #line 2395 
  emg_30_ret = ldv_undef_int();
  #line 2396 
  emg_30_container = emg_alias_lbs_debug_fops;
  #line 2397 
  emg_30_ret = ldv_undef_int();
  #line 2399 
  __VERIFIER_assume(data->arg0 == emg_alias_lbs_debug_fops);
  #line 2401 
  if (data != (struct emg_struct_character_driver_scenario_11_27 *)0) {
    #line 2402 
    emg_30_container = data->arg0;
    #line 2403 
    ldv_free((void *)data);
  }
  #line 2408 
  emg_30_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2409 
  emg_30_size_cnt = (unsigned long)ldv_undef_int();
  #line 2413 
  goto emg_main_30;
  #line 2417 
  return (void *)0;
  #line 2420 
  emg_call_30: 
               #line 2420 
  ;
  #line 2421 
  if (ldv_undef_int() != 0) {
    #line 2422 
    switch (ldv_undef_int()) {
      #line 2423 
      case 0: 
              #line 2423 
      ;
      #line 2425 
      emg_30_emg_param_1_32 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2425 
      emg_30_emg_param_1_32 = emg_30_emg_param_1_32;
      #line 2426 
      emg_30_emg_param_3_33 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2426 
      emg_30_emg_param_3_33 = emg_30_emg_param_3_33;
      #line 2430 
      emg_wrapper_lbs_highsnr_read(emg_30_resource_0,emg_30_emg_param_1_32,emg_30_size_cnt,emg_30_emg_param_3_33);
      #line 2434 
      ldv_free((void *)emg_30_emg_param_1_32);
      #line 2435 
      ldv_free((void *)emg_30_emg_param_3_33);
      #line 2437 
      break;
      #line 2439 
      case 1: 
              #line 2439 
      ;
      #line 2441 
      default_llseek(emg_30_resource_0,emg_30_emg_param_1_30,emg_30_emg_param_2_31);
      #line 2443 
      break;
      #line 2445 
      case 2: 
              #line 2445 
      ;
      #line 2447 
      generic_file_llseek(emg_30_resource_0,emg_30_emg_param_1_28,emg_30_emg_param_2_29);
      #line 2449 
      break;
      #line 2451 
      case 3: 
              #line 2451 
      ;
      #line 2453 
      generic_file_llseek(emg_30_resource_0,emg_30_emg_param_1_26,emg_30_emg_param_2_27);
      #line 2455 
      break;
      #line 2457 
      case 4: 
              #line 2457 
      ;
      #line 2459 
      generic_file_llseek(emg_30_resource_0,emg_30_emg_param_1_24,emg_30_emg_param_2_25);
      #line 2461 
      break;
      #line 2463 
      case 5: 
              #line 2463 
      ;
      #line 2465 
      generic_file_llseek(emg_30_resource_0,emg_30_emg_param_1_22,emg_30_emg_param_2_23);
      #line 2467 
      break;
      #line 2469 
      case 6: 
              #line 2469 
      ;
      #line 2471 
      generic_file_llseek(emg_30_resource_0,emg_30_emg_param_1_20,emg_30_emg_param_2_21);
      #line 2473 
      break;
      #line 2475 
      case 7: 
              #line 2475 
      ;
      #line 2477 
      generic_file_llseek(emg_30_resource_0,emg_30_emg_param_1_18,emg_30_emg_param_2_19);
      #line 2479 
      break;
      #line 2481 
      case 8: 
              #line 2481 
      ;
      #line 2483 
      generic_file_llseek(emg_30_resource_0,emg_30_emg_param_1_16,emg_30_emg_param_2_17);
      #line 2485 
      break;
      #line 2487 
      case 9: 
              #line 2487 
      ;
      #line 2489 
      generic_file_llseek(emg_30_resource_0,emg_30_emg_param_1_14,emg_30_emg_param_2_15);
      #line 2491 
      break;
      #line 2493 
      case 10: 
               #line 2493 
      ;
      #line 2495 
      generic_file_llseek(emg_30_resource_0,emg_30_emg_param_1_12,emg_30_emg_param_2_13);
      #line 2497 
      break;
      #line 2499 
      case 11: 
               #line 2499 
      ;
      #line 2501 
      generic_file_llseek(emg_30_resource_0,emg_30_emg_param_1_10,emg_30_emg_param_2_11);
      #line 2503 
      break;
      #line 2505 
      case 12: 
               #line 2505 
      ;
      #line 2507 
      generic_file_llseek(emg_30_resource_0,emg_30_emg_param_1_8,emg_30_emg_param_2_9);
      #line 2509 
      break;
      #line 2511 
      case 13: 
               #line 2511 
      ;
      #line 2513 
      generic_file_llseek(emg_30_resource_0,emg_30_emg_param_1_6,emg_30_emg_param_2_7);
      #line 2515 
      break;
      #line 2517 
      case 14: 
               #line 2517 
      ;
      #line 2519 
      generic_file_llseek(emg_30_resource_0,emg_30_emg_param_1_4,emg_30_emg_param_2_5);
      #line 2521 
      break;
      #line 2523 
      case 15: 
               #line 2523 
      ;
      #line 2525 
      generic_file_llseek(emg_30_resource_0,emg_30_emg_param_1_2,emg_30_emg_param_2_3);
      #line 2527 
      break;
      #line 2529 
      case 16: 
               #line 2529 
      ;
      #line 2531 
      generic_file_llseek(emg_30_resource_0,emg_30_emg_param_1_0,emg_30_emg_param_2_1);
      #line 2533 
      break;
      #line 2535 
      case 17: 
               #line 2535 
      ;
      #line 2542 
      __VERIFIER_assume(emg_30_size_cnt <= 2147479552UL);
      #line 2543 
      emg_30_emg_param_1_34 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2543 
      emg_30_emg_param_1_34 = emg_30_emg_param_1_34;
      #line 2544 
      emg_30_emg_param_3_35 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2544 
      emg_30_emg_param_3_35 = emg_30_emg_param_3_35;
      #line 2548 
      emg_wrapper_lbs_highsnr_write(emg_30_resource_0,emg_30_emg_param_1_34,emg_30_size_cnt,emg_30_emg_param_3_35);
      #line 2552 
      ldv_free((void *)emg_30_emg_param_1_34);
      #line 2553 
      ldv_free((void *)emg_30_emg_param_3_35);
      #line 2555 
      break;
      #line 2557 
      default: 
               #line 2557 
      ;
      #line 2557 
      __VERIFIER_assume(0);
    }
    #line 2560 
    if (emg_repeat_cnt_call_30 > 0) {
      #line 2561 
      emg_repeat_cnt_call_30 --;
      #line 2563 
      goto emg_call_30;
    }
    else 
         #line 2565 
         __VERIFIER_assume(0);
  }
  else {
    #line 2571 
    if (emg_30_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2572 
      (*(emg_30_container->release))(emg_30_resource_1,emg_30_resource_0);
    #line 2576 
    if (emg_repeat_cnt_main_30_1 > 0) {
      #line 2577 
      emg_repeat_cnt_main_30_1 --;
      #line 2579 
      goto emg_main_30;
    }
    else 
         #line 2581 
         __VERIFIER_assume(0);
  }
  #line 2587 
  return (void *)0;
  #line 2590 
  emg_main_30: 
               #line 2590 
  ;
  #line 2591 
  if (ldv_undef_int() != 0) {
    #line 2593 
    emg_30_ret = simple_open(emg_30_resource_1,emg_30_resource_0);
    #line 2598 
    emg_30_ret = ldv_filter_err_code(emg_30_ret);
    #line 2601 
    if (ldv_undef_int() != 0) {
      #line 2603 
      __VERIFIER_assume(emg_30_ret == 0);
      #line 2607 
      goto emg_call_30;
    }
    else {
      #line 2612 
      __VERIFIER_assume(emg_30_ret != 0);
      #line 2615 
      if (emg_repeat_cnt_main_30_0 > 0) {
        #line 2616 
        emg_repeat_cnt_main_30_0 --;
        #line 2618 
        goto emg_main_30;
      }
      else 
           #line 2620 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2627 
       ldv_free((void *)emg_30_resource_0);
  #line 2635 
  return (void *)0;
}

#line 2640  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_15(void *arg0)
{
  #line 2643 
  struct file_operations *emg_31_container;
  #line 2644 
  long long emg_31_emg_param_1_0;
  #line 2645 
  long long emg_31_emg_param_1_10;
  #line 2646 
  long long emg_31_emg_param_1_12;
  #line 2647 
  long long emg_31_emg_param_1_14;
  #line 2648 
  long long emg_31_emg_param_1_16;
  #line 2649 
  long long emg_31_emg_param_1_18;
  #line 2650 
  long long emg_31_emg_param_1_2;
  #line 2651 
  long long emg_31_emg_param_1_20;
  #line 2652 
  long long emg_31_emg_param_1_22;
  #line 2653 
  long long emg_31_emg_param_1_24;
  #line 2654 
  long long emg_31_emg_param_1_26;
  #line 2655 
  long long emg_31_emg_param_1_28;
  #line 2656 
  long long emg_31_emg_param_1_30;
  #line 2657 
  char *emg_31_emg_param_1_32;
  #line 2658 
  char *emg_31_emg_param_1_34;
  #line 2659 
  long long emg_31_emg_param_1_4;
  #line 2660 
  long long emg_31_emg_param_1_6;
  #line 2661 
  long long emg_31_emg_param_1_8;
  #line 2662 
  int emg_31_emg_param_2_1;
  #line 2663 
  int emg_31_emg_param_2_11;
  #line 2664 
  int emg_31_emg_param_2_13;
  #line 2665 
  int emg_31_emg_param_2_15;
  #line 2666 
  int emg_31_emg_param_2_17;
  #line 2667 
  int emg_31_emg_param_2_19;
  #line 2668 
  int emg_31_emg_param_2_21;
  #line 2669 
  int emg_31_emg_param_2_23;
  #line 2670 
  int emg_31_emg_param_2_25;
  #line 2671 
  int emg_31_emg_param_2_27;
  #line 2672 
  int emg_31_emg_param_2_29;
  #line 2673 
  int emg_31_emg_param_2_3;
  #line 2674 
  int emg_31_emg_param_2_31;
  #line 2675 
  int emg_31_emg_param_2_5;
  #line 2676 
  int emg_31_emg_param_2_7;
  #line 2677 
  int emg_31_emg_param_2_9;
  #line 2678 
  long long *emg_31_emg_param_3_33;
  #line 2679 
  long long *emg_31_emg_param_3_35;
  #line 2680 
  struct file *emg_31_resource_0;
  #line 2681 
  struct inode *emg_31_resource_1;
  #line 2682 
  int emg_31_ret;
  #line 2683 
  unsigned long emg_31_size_cnt;
  #line 2684 
  int emg_repeat_cnt_main_31_1 = 1;
  #line 2685 
  int emg_repeat_cnt_main_31_0 = 1;
  #line 2686 
  int emg_repeat_cnt_call_31 = 1;
  #line 2688 
  struct emg_struct_character_driver_scenario_11_27 *data = (struct emg_struct_character_driver_scenario_11_27 *)arg0;
  #line 2692 
  emg_31_ret = ldv_undef_int();
  #line 2693 
  emg_31_container = emg_alias_lbs_debug_fops;
  #line 2694 
  emg_31_ret = ldv_undef_int();
  #line 2696 
  __VERIFIER_assume(data->arg0 == emg_alias_lbs_debug_fops);
  #line 2698 
  if (data != (struct emg_struct_character_driver_scenario_11_27 *)0) {
    #line 2699 
    emg_31_container = data->arg0;
    #line 2700 
    ldv_free((void *)data);
  }
  #line 2705 
  emg_31_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2706 
  emg_31_size_cnt = (unsigned long)ldv_undef_int();
  #line 2710 
  goto emg_main_31;
  #line 2714 
  return (void *)0;
  #line 2717 
  emg_call_31: 
               #line 2717 
  ;
  #line 2718 
  if (ldv_undef_int() != 0) {
    #line 2719 
    switch (ldv_undef_int()) {
      #line 2720 
      case 0: 
              #line 2720 
      ;
      #line 2722 
      emg_31_emg_param_1_32 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2722 
      emg_31_emg_param_1_32 = emg_31_emg_param_1_32;
      #line 2723 
      emg_31_emg_param_3_33 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2723 
      emg_31_emg_param_3_33 = emg_31_emg_param_3_33;
      #line 2727 
      emg_wrapper_lbs_host_sleep_read(emg_31_resource_0,emg_31_emg_param_1_32,emg_31_size_cnt,emg_31_emg_param_3_33);
      #line 2731 
      ldv_free((void *)emg_31_emg_param_1_32);
      #line 2732 
      ldv_free((void *)emg_31_emg_param_3_33);
      #line 2734 
      break;
      #line 2736 
      case 1: 
              #line 2736 
      ;
      #line 2738 
      default_llseek(emg_31_resource_0,emg_31_emg_param_1_30,emg_31_emg_param_2_31);
      #line 2740 
      break;
      #line 2742 
      case 2: 
              #line 2742 
      ;
      #line 2744 
      generic_file_llseek(emg_31_resource_0,emg_31_emg_param_1_28,emg_31_emg_param_2_29);
      #line 2746 
      break;
      #line 2748 
      case 3: 
              #line 2748 
      ;
      #line 2750 
      generic_file_llseek(emg_31_resource_0,emg_31_emg_param_1_26,emg_31_emg_param_2_27);
      #line 2752 
      break;
      #line 2754 
      case 4: 
              #line 2754 
      ;
      #line 2756 
      generic_file_llseek(emg_31_resource_0,emg_31_emg_param_1_24,emg_31_emg_param_2_25);
      #line 2758 
      break;
      #line 2760 
      case 5: 
              #line 2760 
      ;
      #line 2762 
      generic_file_llseek(emg_31_resource_0,emg_31_emg_param_1_22,emg_31_emg_param_2_23);
      #line 2764 
      break;
      #line 2766 
      case 6: 
              #line 2766 
      ;
      #line 2768 
      generic_file_llseek(emg_31_resource_0,emg_31_emg_param_1_20,emg_31_emg_param_2_21);
      #line 2770 
      break;
      #line 2772 
      case 7: 
              #line 2772 
      ;
      #line 2774 
      generic_file_llseek(emg_31_resource_0,emg_31_emg_param_1_18,emg_31_emg_param_2_19);
      #line 2776 
      break;
      #line 2778 
      case 8: 
              #line 2778 
      ;
      #line 2780 
      generic_file_llseek(emg_31_resource_0,emg_31_emg_param_1_16,emg_31_emg_param_2_17);
      #line 2782 
      break;
      #line 2784 
      case 9: 
              #line 2784 
      ;
      #line 2786 
      generic_file_llseek(emg_31_resource_0,emg_31_emg_param_1_14,emg_31_emg_param_2_15);
      #line 2788 
      break;
      #line 2790 
      case 10: 
               #line 2790 
      ;
      #line 2792 
      generic_file_llseek(emg_31_resource_0,emg_31_emg_param_1_12,emg_31_emg_param_2_13);
      #line 2794 
      break;
      #line 2796 
      case 11: 
               #line 2796 
      ;
      #line 2798 
      generic_file_llseek(emg_31_resource_0,emg_31_emg_param_1_10,emg_31_emg_param_2_11);
      #line 2800 
      break;
      #line 2802 
      case 12: 
               #line 2802 
      ;
      #line 2804 
      generic_file_llseek(emg_31_resource_0,emg_31_emg_param_1_8,emg_31_emg_param_2_9);
      #line 2806 
      break;
      #line 2808 
      case 13: 
               #line 2808 
      ;
      #line 2810 
      generic_file_llseek(emg_31_resource_0,emg_31_emg_param_1_6,emg_31_emg_param_2_7);
      #line 2812 
      break;
      #line 2814 
      case 14: 
               #line 2814 
      ;
      #line 2816 
      generic_file_llseek(emg_31_resource_0,emg_31_emg_param_1_4,emg_31_emg_param_2_5);
      #line 2818 
      break;
      #line 2820 
      case 15: 
               #line 2820 
      ;
      #line 2822 
      generic_file_llseek(emg_31_resource_0,emg_31_emg_param_1_2,emg_31_emg_param_2_3);
      #line 2824 
      break;
      #line 2826 
      case 16: 
               #line 2826 
      ;
      #line 2828 
      generic_file_llseek(emg_31_resource_0,emg_31_emg_param_1_0,emg_31_emg_param_2_1);
      #line 2830 
      break;
      #line 2832 
      case 17: 
               #line 2832 
      ;
      #line 2839 
      __VERIFIER_assume(emg_31_size_cnt <= 2147479552UL);
      #line 2840 
      emg_31_emg_param_1_34 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2840 
      emg_31_emg_param_1_34 = emg_31_emg_param_1_34;
      #line 2841 
      emg_31_emg_param_3_35 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2841 
      emg_31_emg_param_3_35 = emg_31_emg_param_3_35;
      #line 2845 
      emg_wrapper_lbs_host_sleep_write(emg_31_resource_0,emg_31_emg_param_1_34,emg_31_size_cnt,emg_31_emg_param_3_35);
      #line 2849 
      ldv_free((void *)emg_31_emg_param_1_34);
      #line 2850 
      ldv_free((void *)emg_31_emg_param_3_35);
      #line 2852 
      break;
      #line 2854 
      default: 
               #line 2854 
      ;
      #line 2854 
      __VERIFIER_assume(0);
    }
    #line 2857 
    if (emg_repeat_cnt_call_31 > 0) {
      #line 2858 
      emg_repeat_cnt_call_31 --;
      #line 2860 
      goto emg_call_31;
    }
    else 
         #line 2862 
         __VERIFIER_assume(0);
  }
  else {
    #line 2868 
    if (emg_31_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2869 
      (*(emg_31_container->release))(emg_31_resource_1,emg_31_resource_0);
    #line 2873 
    if (emg_repeat_cnt_main_31_1 > 0) {
      #line 2874 
      emg_repeat_cnt_main_31_1 --;
      #line 2876 
      goto emg_main_31;
    }
    else 
         #line 2878 
         __VERIFIER_assume(0);
  }
  #line 2884 
  return (void *)0;
  #line 2887 
  emg_main_31: 
               #line 2887 
  ;
  #line 2888 
  if (ldv_undef_int() != 0) {
    #line 2890 
    emg_31_ret = simple_open(emg_31_resource_1,emg_31_resource_0);
    #line 2895 
    emg_31_ret = ldv_filter_err_code(emg_31_ret);
    #line 2898 
    if (ldv_undef_int() != 0) {
      #line 2900 
      __VERIFIER_assume(emg_31_ret == 0);
      #line 2904 
      goto emg_call_31;
    }
    else {
      #line 2909 
      __VERIFIER_assume(emg_31_ret != 0);
      #line 2912 
      if (emg_repeat_cnt_main_31_0 > 0) {
        #line 2913 
        emg_repeat_cnt_main_31_0 --;
        #line 2915 
        goto emg_main_31;
      }
      else 
           #line 2917 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2924 
       ldv_free((void *)emg_31_resource_0);
  #line 2932 
  return (void *)0;
}

#line 2937  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_16(void *arg0)
{
  #line 2940 
  struct file_operations *emg_32_container;
  #line 2941 
  long long emg_32_emg_param_1_0;
  #line 2942 
  long long emg_32_emg_param_1_10;
  #line 2943 
  long long emg_32_emg_param_1_12;
  #line 2944 
  long long emg_32_emg_param_1_14;
  #line 2945 
  long long emg_32_emg_param_1_16;
  #line 2946 
  long long emg_32_emg_param_1_18;
  #line 2947 
  long long emg_32_emg_param_1_2;
  #line 2948 
  long long emg_32_emg_param_1_20;
  #line 2949 
  long long emg_32_emg_param_1_22;
  #line 2950 
  long long emg_32_emg_param_1_24;
  #line 2951 
  long long emg_32_emg_param_1_26;
  #line 2952 
  long long emg_32_emg_param_1_28;
  #line 2953 
  long long emg_32_emg_param_1_30;
  #line 2954 
  char *emg_32_emg_param_1_32;
  #line 2955 
  char *emg_32_emg_param_1_34;
  #line 2956 
  long long emg_32_emg_param_1_4;
  #line 2957 
  long long emg_32_emg_param_1_6;
  #line 2958 
  long long emg_32_emg_param_1_8;
  #line 2959 
  int emg_32_emg_param_2_1;
  #line 2960 
  int emg_32_emg_param_2_11;
  #line 2961 
  int emg_32_emg_param_2_13;
  #line 2962 
  int emg_32_emg_param_2_15;
  #line 2963 
  int emg_32_emg_param_2_17;
  #line 2964 
  int emg_32_emg_param_2_19;
  #line 2965 
  int emg_32_emg_param_2_21;
  #line 2966 
  int emg_32_emg_param_2_23;
  #line 2967 
  int emg_32_emg_param_2_25;
  #line 2968 
  int emg_32_emg_param_2_27;
  #line 2969 
  int emg_32_emg_param_2_29;
  #line 2970 
  int emg_32_emg_param_2_3;
  #line 2971 
  int emg_32_emg_param_2_31;
  #line 2972 
  int emg_32_emg_param_2_5;
  #line 2973 
  int emg_32_emg_param_2_7;
  #line 2974 
  int emg_32_emg_param_2_9;
  #line 2975 
  long long *emg_32_emg_param_3_33;
  #line 2976 
  long long *emg_32_emg_param_3_35;
  #line 2977 
  struct file *emg_32_resource_0;
  #line 2978 
  struct inode *emg_32_resource_1;
  #line 2979 
  int emg_32_ret;
  #line 2980 
  unsigned long emg_32_size_cnt;
  #line 2981 
  int emg_repeat_cnt_main_32_0 = 1;
  #line 2982 
  int emg_repeat_cnt_main_32_1 = 1;
  #line 2983 
  int emg_repeat_cnt_call_32 = 1;
  #line 2985 
  struct emg_struct_character_driver_scenario_11_27 *data = (struct emg_struct_character_driver_scenario_11_27 *)arg0;
  #line 2989 
  emg_32_ret = ldv_undef_int();
  #line 2990 
  emg_32_container = emg_alias_lbs_debug_fops;
  #line 2991 
  emg_32_ret = ldv_undef_int();
  #line 2993 
  __VERIFIER_assume(data->arg0 == emg_alias_lbs_debug_fops);
  #line 2995 
  if (data != (struct emg_struct_character_driver_scenario_11_27 *)0) {
    #line 2996 
    emg_32_container = data->arg0;
    #line 2997 
    ldv_free((void *)data);
  }
  #line 3002 
  emg_32_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3003 
  emg_32_size_cnt = (unsigned long)ldv_undef_int();
  #line 3007 
  goto emg_main_32;
  #line 3011 
  return (void *)0;
  #line 3014 
  emg_call_32: 
               #line 3014 
  ;
  #line 3015 
  if (ldv_undef_int() != 0) {
    #line 3016 
    switch (ldv_undef_int()) {
      #line 3017 
      case 0: 
              #line 3017 
      ;
      #line 3019 
      emg_32_emg_param_1_32 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3019 
      emg_32_emg_param_1_32 = emg_32_emg_param_1_32;
      #line 3020 
      emg_32_emg_param_3_33 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3020 
      emg_32_emg_param_3_33 = emg_32_emg_param_3_33;
      #line 3024 
      emg_wrapper_lbs_lowrssi_read(emg_32_resource_0,emg_32_emg_param_1_32,emg_32_size_cnt,emg_32_emg_param_3_33);
      #line 3028 
      ldv_free((void *)emg_32_emg_param_1_32);
      #line 3029 
      ldv_free((void *)emg_32_emg_param_3_33);
      #line 3031 
      break;
      #line 3033 
      case 1: 
              #line 3033 
      ;
      #line 3035 
      default_llseek(emg_32_resource_0,emg_32_emg_param_1_30,emg_32_emg_param_2_31);
      #line 3037 
      break;
      #line 3039 
      case 2: 
              #line 3039 
      ;
      #line 3041 
      generic_file_llseek(emg_32_resource_0,emg_32_emg_param_1_28,emg_32_emg_param_2_29);
      #line 3043 
      break;
      #line 3045 
      case 3: 
              #line 3045 
      ;
      #line 3047 
      generic_file_llseek(emg_32_resource_0,emg_32_emg_param_1_26,emg_32_emg_param_2_27);
      #line 3049 
      break;
      #line 3051 
      case 4: 
              #line 3051 
      ;
      #line 3053 
      generic_file_llseek(emg_32_resource_0,emg_32_emg_param_1_24,emg_32_emg_param_2_25);
      #line 3055 
      break;
      #line 3057 
      case 5: 
              #line 3057 
      ;
      #line 3059 
      generic_file_llseek(emg_32_resource_0,emg_32_emg_param_1_22,emg_32_emg_param_2_23);
      #line 3061 
      break;
      #line 3063 
      case 6: 
              #line 3063 
      ;
      #line 3065 
      generic_file_llseek(emg_32_resource_0,emg_32_emg_param_1_20,emg_32_emg_param_2_21);
      #line 3067 
      break;
      #line 3069 
      case 7: 
              #line 3069 
      ;
      #line 3071 
      generic_file_llseek(emg_32_resource_0,emg_32_emg_param_1_18,emg_32_emg_param_2_19);
      #line 3073 
      break;
      #line 3075 
      case 8: 
              #line 3075 
      ;
      #line 3077 
      generic_file_llseek(emg_32_resource_0,emg_32_emg_param_1_16,emg_32_emg_param_2_17);
      #line 3079 
      break;
      #line 3081 
      case 9: 
              #line 3081 
      ;
      #line 3083 
      generic_file_llseek(emg_32_resource_0,emg_32_emg_param_1_14,emg_32_emg_param_2_15);
      #line 3085 
      break;
      #line 3087 
      case 10: 
               #line 3087 
      ;
      #line 3089 
      generic_file_llseek(emg_32_resource_0,emg_32_emg_param_1_12,emg_32_emg_param_2_13);
      #line 3091 
      break;
      #line 3093 
      case 11: 
               #line 3093 
      ;
      #line 3095 
      generic_file_llseek(emg_32_resource_0,emg_32_emg_param_1_10,emg_32_emg_param_2_11);
      #line 3097 
      break;
      #line 3099 
      case 12: 
               #line 3099 
      ;
      #line 3101 
      generic_file_llseek(emg_32_resource_0,emg_32_emg_param_1_8,emg_32_emg_param_2_9);
      #line 3103 
      break;
      #line 3105 
      case 13: 
               #line 3105 
      ;
      #line 3107 
      generic_file_llseek(emg_32_resource_0,emg_32_emg_param_1_6,emg_32_emg_param_2_7);
      #line 3109 
      break;
      #line 3111 
      case 14: 
               #line 3111 
      ;
      #line 3113 
      generic_file_llseek(emg_32_resource_0,emg_32_emg_param_1_4,emg_32_emg_param_2_5);
      #line 3115 
      break;
      #line 3117 
      case 15: 
               #line 3117 
      ;
      #line 3119 
      generic_file_llseek(emg_32_resource_0,emg_32_emg_param_1_2,emg_32_emg_param_2_3);
      #line 3121 
      break;
      #line 3123 
      case 16: 
               #line 3123 
      ;
      #line 3125 
      generic_file_llseek(emg_32_resource_0,emg_32_emg_param_1_0,emg_32_emg_param_2_1);
      #line 3127 
      break;
      #line 3129 
      case 17: 
               #line 3129 
      ;
      #line 3136 
      __VERIFIER_assume(emg_32_size_cnt <= 2147479552UL);
      #line 3137 
      emg_32_emg_param_1_34 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3137 
      emg_32_emg_param_1_34 = emg_32_emg_param_1_34;
      #line 3138 
      emg_32_emg_param_3_35 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3138 
      emg_32_emg_param_3_35 = emg_32_emg_param_3_35;
      #line 3142 
      emg_wrapper_lbs_wrrf_write(emg_32_resource_0,emg_32_emg_param_1_34,emg_32_size_cnt,emg_32_emg_param_3_35);
      #line 3146 
      ldv_free((void *)emg_32_emg_param_1_34);
      #line 3147 
      ldv_free((void *)emg_32_emg_param_3_35);
      #line 3149 
      break;
      #line 3151 
      default: 
               #line 3151 
      ;
      #line 3151 
      __VERIFIER_assume(0);
    }
    #line 3154 
    if (emg_repeat_cnt_call_32 > 0) {
      #line 3155 
      emg_repeat_cnt_call_32 --;
      #line 3157 
      goto emg_call_32;
    }
    else 
         #line 3159 
         __VERIFIER_assume(0);
  }
  else {
    #line 3165 
    if (emg_32_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3166 
      (*(emg_32_container->release))(emg_32_resource_1,emg_32_resource_0);
    #line 3170 
    if (emg_repeat_cnt_main_32_0 > 0) {
      #line 3171 
      emg_repeat_cnt_main_32_0 --;
      #line 3173 
      goto emg_main_32;
    }
    else 
         #line 3175 
         __VERIFIER_assume(0);
  }
  #line 3181 
  return (void *)0;
  #line 3184 
  emg_main_32: 
               #line 3184 
  ;
  #line 3185 
  if (ldv_undef_int() != 0) {
    #line 3187 
    emg_32_ret = simple_open(emg_32_resource_1,emg_32_resource_0);
    #line 3192 
    emg_32_ret = ldv_filter_err_code(emg_32_ret);
    #line 3195 
    if (ldv_undef_int() != 0) {
      #line 3197 
      __VERIFIER_assume(emg_32_ret == 0);
      #line 3201 
      goto emg_call_32;
    }
    else {
      #line 3206 
      __VERIFIER_assume(emg_32_ret != 0);
      #line 3209 
      if (emg_repeat_cnt_main_32_1 > 0) {
        #line 3210 
        emg_repeat_cnt_main_32_1 --;
        #line 3212 
        goto emg_main_32;
      }
      else 
           #line 3214 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3221 
       ldv_free((void *)emg_32_resource_0);
  #line 3229 
  return (void *)0;
}

#line 3234  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_17(void *arg0)
{
  #line 3237 
  struct file_operations *emg_33_container;
  #line 3238 
  long long emg_33_emg_param_1_0;
  #line 3239 
  long long emg_33_emg_param_1_10;
  #line 3240 
  long long emg_33_emg_param_1_12;
  #line 3241 
  long long emg_33_emg_param_1_14;
  #line 3242 
  long long emg_33_emg_param_1_16;
  #line 3243 
  long long emg_33_emg_param_1_18;
  #line 3244 
  long long emg_33_emg_param_1_2;
  #line 3245 
  long long emg_33_emg_param_1_20;
  #line 3246 
  long long emg_33_emg_param_1_22;
  #line 3247 
  long long emg_33_emg_param_1_24;
  #line 3248 
  long long emg_33_emg_param_1_26;
  #line 3249 
  long long emg_33_emg_param_1_28;
  #line 3250 
  long long emg_33_emg_param_1_30;
  #line 3251 
  char *emg_33_emg_param_1_32;
  #line 3252 
  char *emg_33_emg_param_1_34;
  #line 3253 
  long long emg_33_emg_param_1_4;
  #line 3254 
  long long emg_33_emg_param_1_6;
  #line 3255 
  long long emg_33_emg_param_1_8;
  #line 3256 
  int emg_33_emg_param_2_1;
  #line 3257 
  int emg_33_emg_param_2_11;
  #line 3258 
  int emg_33_emg_param_2_13;
  #line 3259 
  int emg_33_emg_param_2_15;
  #line 3260 
  int emg_33_emg_param_2_17;
  #line 3261 
  int emg_33_emg_param_2_19;
  #line 3262 
  int emg_33_emg_param_2_21;
  #line 3263 
  int emg_33_emg_param_2_23;
  #line 3264 
  int emg_33_emg_param_2_25;
  #line 3265 
  int emg_33_emg_param_2_27;
  #line 3266 
  int emg_33_emg_param_2_29;
  #line 3267 
  int emg_33_emg_param_2_3;
  #line 3268 
  int emg_33_emg_param_2_31;
  #line 3269 
  int emg_33_emg_param_2_5;
  #line 3270 
  int emg_33_emg_param_2_7;
  #line 3271 
  int emg_33_emg_param_2_9;
  #line 3272 
  long long *emg_33_emg_param_3_33;
  #line 3273 
  long long *emg_33_emg_param_3_35;
  #line 3274 
  struct file *emg_33_resource_0;
  #line 3275 
  struct inode *emg_33_resource_1;
  #line 3276 
  int emg_33_ret;
  #line 3277 
  unsigned long emg_33_size_cnt;
  #line 3278 
  int emg_repeat_cnt_main_33_0 = 1;
  #line 3279 
  int emg_repeat_cnt_call_33 = 1;
  #line 3280 
  int emg_repeat_cnt_main_33_1 = 1;
  #line 3282 
  struct emg_struct_character_driver_scenario_11_27 *data = (struct emg_struct_character_driver_scenario_11_27 *)arg0;
  #line 3286 
  emg_33_ret = ldv_undef_int();
  #line 3287 
  emg_33_container = emg_alias_lbs_debug_fops;
  #line 3288 
  emg_33_ret = ldv_undef_int();
  #line 3290 
  __VERIFIER_assume(data->arg0 == emg_alias_lbs_debug_fops);
  #line 3292 
  if (data != (struct emg_struct_character_driver_scenario_11_27 *)0) {
    #line 3293 
    emg_33_container = data->arg0;
    #line 3294 
    ldv_free((void *)data);
  }
  #line 3299 
  emg_33_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3300 
  emg_33_size_cnt = (unsigned long)ldv_undef_int();
  #line 3304 
  goto emg_main_33;
  #line 3308 
  return (void *)0;
  #line 3311 
  emg_call_33: 
               #line 3311 
  ;
  #line 3312 
  if (ldv_undef_int() != 0) {
    #line 3313 
    switch (ldv_undef_int()) {
      #line 3314 
      case 0: 
              #line 3314 
      ;
      #line 3316 
      emg_33_emg_param_1_32 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3316 
      emg_33_emg_param_1_32 = emg_33_emg_param_1_32;
      #line 3317 
      emg_33_emg_param_3_33 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3317 
      emg_33_emg_param_3_33 = emg_33_emg_param_3_33;
      #line 3321 
      emg_wrapper_lbs_lowsnr_read(emg_33_resource_0,emg_33_emg_param_1_32,emg_33_size_cnt,emg_33_emg_param_3_33);
      #line 3325 
      ldv_free((void *)emg_33_emg_param_1_32);
      #line 3326 
      ldv_free((void *)emg_33_emg_param_3_33);
      #line 3328 
      break;
      #line 3330 
      case 1: 
              #line 3330 
      ;
      #line 3332 
      default_llseek(emg_33_resource_0,emg_33_emg_param_1_30,emg_33_emg_param_2_31);
      #line 3334 
      break;
      #line 3336 
      case 2: 
              #line 3336 
      ;
      #line 3338 
      generic_file_llseek(emg_33_resource_0,emg_33_emg_param_1_28,emg_33_emg_param_2_29);
      #line 3340 
      break;
      #line 3342 
      case 3: 
              #line 3342 
      ;
      #line 3344 
      generic_file_llseek(emg_33_resource_0,emg_33_emg_param_1_26,emg_33_emg_param_2_27);
      #line 3346 
      break;
      #line 3348 
      case 4: 
              #line 3348 
      ;
      #line 3350 
      generic_file_llseek(emg_33_resource_0,emg_33_emg_param_1_24,emg_33_emg_param_2_25);
      #line 3352 
      break;
      #line 3354 
      case 5: 
              #line 3354 
      ;
      #line 3356 
      generic_file_llseek(emg_33_resource_0,emg_33_emg_param_1_22,emg_33_emg_param_2_23);
      #line 3358 
      break;
      #line 3360 
      case 6: 
              #line 3360 
      ;
      #line 3362 
      generic_file_llseek(emg_33_resource_0,emg_33_emg_param_1_20,emg_33_emg_param_2_21);
      #line 3364 
      break;
      #line 3366 
      case 7: 
              #line 3366 
      ;
      #line 3368 
      generic_file_llseek(emg_33_resource_0,emg_33_emg_param_1_18,emg_33_emg_param_2_19);
      #line 3370 
      break;
      #line 3372 
      case 8: 
              #line 3372 
      ;
      #line 3374 
      generic_file_llseek(emg_33_resource_0,emg_33_emg_param_1_16,emg_33_emg_param_2_17);
      #line 3376 
      break;
      #line 3378 
      case 9: 
              #line 3378 
      ;
      #line 3380 
      generic_file_llseek(emg_33_resource_0,emg_33_emg_param_1_14,emg_33_emg_param_2_15);
      #line 3382 
      break;
      #line 3384 
      case 10: 
               #line 3384 
      ;
      #line 3386 
      generic_file_llseek(emg_33_resource_0,emg_33_emg_param_1_12,emg_33_emg_param_2_13);
      #line 3388 
      break;
      #line 3390 
      case 11: 
               #line 3390 
      ;
      #line 3392 
      generic_file_llseek(emg_33_resource_0,emg_33_emg_param_1_10,emg_33_emg_param_2_11);
      #line 3394 
      break;
      #line 3396 
      case 12: 
               #line 3396 
      ;
      #line 3398 
      generic_file_llseek(emg_33_resource_0,emg_33_emg_param_1_8,emg_33_emg_param_2_9);
      #line 3400 
      break;
      #line 3402 
      case 13: 
               #line 3402 
      ;
      #line 3404 
      generic_file_llseek(emg_33_resource_0,emg_33_emg_param_1_6,emg_33_emg_param_2_7);
      #line 3406 
      break;
      #line 3408 
      case 14: 
               #line 3408 
      ;
      #line 3410 
      generic_file_llseek(emg_33_resource_0,emg_33_emg_param_1_4,emg_33_emg_param_2_5);
      #line 3412 
      break;
      #line 3414 
      case 15: 
               #line 3414 
      ;
      #line 3416 
      generic_file_llseek(emg_33_resource_0,emg_33_emg_param_1_2,emg_33_emg_param_2_3);
      #line 3418 
      break;
      #line 3420 
      case 16: 
               #line 3420 
      ;
      #line 3422 
      generic_file_llseek(emg_33_resource_0,emg_33_emg_param_1_0,emg_33_emg_param_2_1);
      #line 3424 
      break;
      #line 3426 
      case 17: 
               #line 3426 
      ;
      #line 3433 
      __VERIFIER_assume(emg_33_size_cnt <= 2147479552UL);
      #line 3434 
      emg_33_emg_param_1_34 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3434 
      emg_33_emg_param_1_34 = emg_33_emg_param_1_34;
      #line 3435 
      emg_33_emg_param_3_35 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3435 
      emg_33_emg_param_3_35 = emg_33_emg_param_3_35;
      #line 3439 
      emg_wrapper_lbs_lowsnr_write(emg_33_resource_0,emg_33_emg_param_1_34,emg_33_size_cnt,emg_33_emg_param_3_35);
      #line 3443 
      ldv_free((void *)emg_33_emg_param_1_34);
      #line 3444 
      ldv_free((void *)emg_33_emg_param_3_35);
      #line 3446 
      break;
      #line 3448 
      default: 
               #line 3448 
      ;
      #line 3448 
      __VERIFIER_assume(0);
    }
    #line 3451 
    if (emg_repeat_cnt_call_33 > 0) {
      #line 3452 
      emg_repeat_cnt_call_33 --;
      #line 3454 
      goto emg_call_33;
    }
    else 
         #line 3456 
         __VERIFIER_assume(0);
  }
  else {
    #line 3462 
    if (emg_33_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3463 
      (*(emg_33_container->release))(emg_33_resource_1,emg_33_resource_0);
    #line 3467 
    if (emg_repeat_cnt_main_33_1 > 0) {
      #line 3468 
      emg_repeat_cnt_main_33_1 --;
      #line 3470 
      goto emg_main_33;
    }
    else 
         #line 3472 
         __VERIFIER_assume(0);
  }
  #line 3478 
  return (void *)0;
  #line 3481 
  emg_main_33: 
               #line 3481 
  ;
  #line 3482 
  if (ldv_undef_int() != 0) {
    #line 3484 
    emg_33_ret = simple_open(emg_33_resource_1,emg_33_resource_0);
    #line 3489 
    emg_33_ret = ldv_filter_err_code(emg_33_ret);
    #line 3492 
    if (ldv_undef_int() != 0) {
      #line 3494 
      __VERIFIER_assume(emg_33_ret == 0);
      #line 3498 
      goto emg_call_33;
    }
    else {
      #line 3503 
      __VERIFIER_assume(emg_33_ret != 0);
      #line 3506 
      if (emg_repeat_cnt_main_33_0 > 0) {
        #line 3507 
        emg_repeat_cnt_main_33_0 --;
        #line 3509 
        goto emg_main_33;
      }
      else 
           #line 3511 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3518 
       ldv_free((void *)emg_33_resource_0);
  #line 3526 
  return (void *)0;
}

#line 3531  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_18(void *arg0)
{
  #line 3534 
  struct file_operations *emg_34_container;
  #line 3535 
  long long emg_34_emg_param_1_0;
  #line 3536 
  long long emg_34_emg_param_1_10;
  #line 3537 
  long long emg_34_emg_param_1_12;
  #line 3538 
  long long emg_34_emg_param_1_14;
  #line 3539 
  long long emg_34_emg_param_1_16;
  #line 3540 
  long long emg_34_emg_param_1_18;
  #line 3541 
  long long emg_34_emg_param_1_2;
  #line 3542 
  long long emg_34_emg_param_1_20;
  #line 3543 
  long long emg_34_emg_param_1_22;
  #line 3544 
  long long emg_34_emg_param_1_24;
  #line 3545 
  long long emg_34_emg_param_1_26;
  #line 3546 
  long long emg_34_emg_param_1_28;
  #line 3547 
  long long emg_34_emg_param_1_30;
  #line 3548 
  char *emg_34_emg_param_1_32;
  #line 3549 
  char *emg_34_emg_param_1_34;
  #line 3550 
  long long emg_34_emg_param_1_4;
  #line 3551 
  long long emg_34_emg_param_1_6;
  #line 3552 
  long long emg_34_emg_param_1_8;
  #line 3553 
  int emg_34_emg_param_2_1;
  #line 3554 
  int emg_34_emg_param_2_11;
  #line 3555 
  int emg_34_emg_param_2_13;
  #line 3556 
  int emg_34_emg_param_2_15;
  #line 3557 
  int emg_34_emg_param_2_17;
  #line 3558 
  int emg_34_emg_param_2_19;
  #line 3559 
  int emg_34_emg_param_2_21;
  #line 3560 
  int emg_34_emg_param_2_23;
  #line 3561 
  int emg_34_emg_param_2_25;
  #line 3562 
  int emg_34_emg_param_2_27;
  #line 3563 
  int emg_34_emg_param_2_29;
  #line 3564 
  int emg_34_emg_param_2_3;
  #line 3565 
  int emg_34_emg_param_2_31;
  #line 3566 
  int emg_34_emg_param_2_5;
  #line 3567 
  int emg_34_emg_param_2_7;
  #line 3568 
  int emg_34_emg_param_2_9;
  #line 3569 
  long long *emg_34_emg_param_3_33;
  #line 3570 
  long long *emg_34_emg_param_3_35;
  #line 3571 
  struct file *emg_34_resource_0;
  #line 3572 
  struct inode *emg_34_resource_1;
  #line 3573 
  int emg_34_ret;
  #line 3574 
  unsigned long emg_34_size_cnt;
  #line 3575 
  int emg_repeat_cnt_call_34 = 1;
  #line 3576 
  int emg_repeat_cnt_main_34_0 = 1;
  #line 3577 
  int emg_repeat_cnt_main_34_1 = 1;
  #line 3579 
  struct emg_struct_character_driver_scenario_11_27 *data = (struct emg_struct_character_driver_scenario_11_27 *)arg0;
  #line 3583 
  emg_34_ret = ldv_undef_int();
  #line 3584 
  emg_34_container = emg_alias_lbs_debug_fops;
  #line 3585 
  emg_34_ret = ldv_undef_int();
  #line 3587 
  __VERIFIER_assume(data->arg0 == emg_alias_lbs_debug_fops);
  #line 3589 
  if (data != (struct emg_struct_character_driver_scenario_11_27 *)0) {
    #line 3590 
    emg_34_container = data->arg0;
    #line 3591 
    ldv_free((void *)data);
  }
  #line 3596 
  emg_34_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3597 
  emg_34_size_cnt = (unsigned long)ldv_undef_int();
  #line 3601 
  goto emg_main_34;
  #line 3605 
  return (void *)0;
  #line 3608 
  emg_call_34: 
               #line 3608 
  ;
  #line 3609 
  if (ldv_undef_int() != 0) {
    #line 3610 
    switch (ldv_undef_int()) {
      #line 3611 
      case 0: 
              #line 3611 
      ;
      #line 3613 
      emg_34_emg_param_1_32 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3613 
      emg_34_emg_param_1_32 = emg_34_emg_param_1_32;
      #line 3614 
      emg_34_emg_param_3_33 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3614 
      emg_34_emg_param_3_33 = emg_34_emg_param_3_33;
      #line 3618 
      emg_wrapper_lbs_rdbbp_read(emg_34_resource_0,emg_34_emg_param_1_32,emg_34_size_cnt,emg_34_emg_param_3_33);
      #line 3622 
      ldv_free((void *)emg_34_emg_param_1_32);
      #line 3623 
      ldv_free((void *)emg_34_emg_param_3_33);
      #line 3625 
      break;
      #line 3627 
      case 1: 
              #line 3627 
      ;
      #line 3629 
      default_llseek(emg_34_resource_0,emg_34_emg_param_1_30,emg_34_emg_param_2_31);
      #line 3631 
      break;
      #line 3633 
      case 2: 
              #line 3633 
      ;
      #line 3635 
      generic_file_llseek(emg_34_resource_0,emg_34_emg_param_1_28,emg_34_emg_param_2_29);
      #line 3637 
      break;
      #line 3639 
      case 3: 
              #line 3639 
      ;
      #line 3641 
      generic_file_llseek(emg_34_resource_0,emg_34_emg_param_1_26,emg_34_emg_param_2_27);
      #line 3643 
      break;
      #line 3645 
      case 4: 
              #line 3645 
      ;
      #line 3647 
      generic_file_llseek(emg_34_resource_0,emg_34_emg_param_1_24,emg_34_emg_param_2_25);
      #line 3649 
      break;
      #line 3651 
      case 5: 
              #line 3651 
      ;
      #line 3653 
      generic_file_llseek(emg_34_resource_0,emg_34_emg_param_1_22,emg_34_emg_param_2_23);
      #line 3655 
      break;
      #line 3657 
      case 6: 
              #line 3657 
      ;
      #line 3659 
      generic_file_llseek(emg_34_resource_0,emg_34_emg_param_1_20,emg_34_emg_param_2_21);
      #line 3661 
      break;
      #line 3663 
      case 7: 
              #line 3663 
      ;
      #line 3665 
      generic_file_llseek(emg_34_resource_0,emg_34_emg_param_1_18,emg_34_emg_param_2_19);
      #line 3667 
      break;
      #line 3669 
      case 8: 
              #line 3669 
      ;
      #line 3671 
      generic_file_llseek(emg_34_resource_0,emg_34_emg_param_1_16,emg_34_emg_param_2_17);
      #line 3673 
      break;
      #line 3675 
      case 9: 
              #line 3675 
      ;
      #line 3677 
      generic_file_llseek(emg_34_resource_0,emg_34_emg_param_1_14,emg_34_emg_param_2_15);
      #line 3679 
      break;
      #line 3681 
      case 10: 
               #line 3681 
      ;
      #line 3683 
      generic_file_llseek(emg_34_resource_0,emg_34_emg_param_1_12,emg_34_emg_param_2_13);
      #line 3685 
      break;
      #line 3687 
      case 11: 
               #line 3687 
      ;
      #line 3689 
      generic_file_llseek(emg_34_resource_0,emg_34_emg_param_1_10,emg_34_emg_param_2_11);
      #line 3691 
      break;
      #line 3693 
      case 12: 
               #line 3693 
      ;
      #line 3695 
      generic_file_llseek(emg_34_resource_0,emg_34_emg_param_1_8,emg_34_emg_param_2_9);
      #line 3697 
      break;
      #line 3699 
      case 13: 
               #line 3699 
      ;
      #line 3701 
      generic_file_llseek(emg_34_resource_0,emg_34_emg_param_1_6,emg_34_emg_param_2_7);
      #line 3703 
      break;
      #line 3705 
      case 14: 
               #line 3705 
      ;
      #line 3707 
      generic_file_llseek(emg_34_resource_0,emg_34_emg_param_1_4,emg_34_emg_param_2_5);
      #line 3709 
      break;
      #line 3711 
      case 15: 
               #line 3711 
      ;
      #line 3713 
      generic_file_llseek(emg_34_resource_0,emg_34_emg_param_1_2,emg_34_emg_param_2_3);
      #line 3715 
      break;
      #line 3717 
      case 16: 
               #line 3717 
      ;
      #line 3719 
      generic_file_llseek(emg_34_resource_0,emg_34_emg_param_1_0,emg_34_emg_param_2_1);
      #line 3721 
      break;
      #line 3723 
      case 17: 
               #line 3723 
      ;
      #line 3730 
      __VERIFIER_assume(emg_34_size_cnt <= 2147479552UL);
      #line 3731 
      emg_34_emg_param_1_34 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3731 
      emg_34_emg_param_1_34 = emg_34_emg_param_1_34;
      #line 3732 
      emg_34_emg_param_3_35 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3732 
      emg_34_emg_param_3_35 = emg_34_emg_param_3_35;
      #line 3736 
      emg_wrapper_lbs_rdbbp_write(emg_34_resource_0,emg_34_emg_param_1_34,emg_34_size_cnt,emg_34_emg_param_3_35);
      #line 3740 
      ldv_free((void *)emg_34_emg_param_1_34);
      #line 3741 
      ldv_free((void *)emg_34_emg_param_3_35);
      #line 3743 
      break;
      #line 3745 
      default: 
               #line 3745 
      ;
      #line 3745 
      __VERIFIER_assume(0);
    }
    #line 3748 
    if (emg_repeat_cnt_call_34 > 0) {
      #line 3749 
      emg_repeat_cnt_call_34 --;
      #line 3751 
      goto emg_call_34;
    }
    else 
         #line 3753 
         __VERIFIER_assume(0);
  }
  else {
    #line 3759 
    if (emg_34_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3760 
      (*(emg_34_container->release))(emg_34_resource_1,emg_34_resource_0);
    #line 3764 
    if (emg_repeat_cnt_main_34_0 > 0) {
      #line 3765 
      emg_repeat_cnt_main_34_0 --;
      #line 3767 
      goto emg_main_34;
    }
    else 
         #line 3769 
         __VERIFIER_assume(0);
  }
  #line 3775 
  return (void *)0;
  #line 3778 
  emg_main_34: 
               #line 3778 
  ;
  #line 3779 
  if (ldv_undef_int() != 0) {
    #line 3781 
    emg_34_ret = simple_open(emg_34_resource_1,emg_34_resource_0);
    #line 3786 
    emg_34_ret = ldv_filter_err_code(emg_34_ret);
    #line 3789 
    if (ldv_undef_int() != 0) {
      #line 3791 
      __VERIFIER_assume(emg_34_ret == 0);
      #line 3795 
      goto emg_call_34;
    }
    else {
      #line 3800 
      __VERIFIER_assume(emg_34_ret != 0);
      #line 3803 
      if (emg_repeat_cnt_main_34_1 > 0) {
        #line 3804 
        emg_repeat_cnt_main_34_1 --;
        #line 3806 
        goto emg_main_34;
      }
      else 
           #line 3808 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3815 
       ldv_free((void *)emg_34_resource_0);
  #line 3823 
  return (void *)0;
}

#line 3828  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_19(void *arg0)
{
  #line 3831 
  struct file_operations *emg_35_container;
  #line 3832 
  long long emg_35_emg_param_1_0;
  #line 3833 
  long long emg_35_emg_param_1_10;
  #line 3834 
  long long emg_35_emg_param_1_12;
  #line 3835 
  long long emg_35_emg_param_1_14;
  #line 3836 
  long long emg_35_emg_param_1_16;
  #line 3837 
  long long emg_35_emg_param_1_18;
  #line 3838 
  long long emg_35_emg_param_1_2;
  #line 3839 
  long long emg_35_emg_param_1_20;
  #line 3840 
  long long emg_35_emg_param_1_22;
  #line 3841 
  long long emg_35_emg_param_1_24;
  #line 3842 
  long long emg_35_emg_param_1_26;
  #line 3843 
  long long emg_35_emg_param_1_28;
  #line 3844 
  long long emg_35_emg_param_1_30;
  #line 3845 
  char *emg_35_emg_param_1_32;
  #line 3846 
  char *emg_35_emg_param_1_34;
  #line 3847 
  long long emg_35_emg_param_1_4;
  #line 3848 
  long long emg_35_emg_param_1_6;
  #line 3849 
  long long emg_35_emg_param_1_8;
  #line 3850 
  int emg_35_emg_param_2_1;
  #line 3851 
  int emg_35_emg_param_2_11;
  #line 3852 
  int emg_35_emg_param_2_13;
  #line 3853 
  int emg_35_emg_param_2_15;
  #line 3854 
  int emg_35_emg_param_2_17;
  #line 3855 
  int emg_35_emg_param_2_19;
  #line 3856 
  int emg_35_emg_param_2_21;
  #line 3857 
  int emg_35_emg_param_2_23;
  #line 3858 
  int emg_35_emg_param_2_25;
  #line 3859 
  int emg_35_emg_param_2_27;
  #line 3860 
  int emg_35_emg_param_2_29;
  #line 3861 
  int emg_35_emg_param_2_3;
  #line 3862 
  int emg_35_emg_param_2_31;
  #line 3863 
  int emg_35_emg_param_2_5;
  #line 3864 
  int emg_35_emg_param_2_7;
  #line 3865 
  int emg_35_emg_param_2_9;
  #line 3866 
  long long *emg_35_emg_param_3_33;
  #line 3867 
  long long *emg_35_emg_param_3_35;
  #line 3868 
  struct file *emg_35_resource_0;
  #line 3869 
  struct inode *emg_35_resource_1;
  #line 3870 
  int emg_35_ret;
  #line 3871 
  unsigned long emg_35_size_cnt;
  #line 3872 
  int emg_repeat_cnt_main_35_0 = 1;
  #line 3873 
  int emg_repeat_cnt_main_35_1 = 1;
  #line 3874 
  int emg_repeat_cnt_call_35 = 1;
  #line 3876 
  struct emg_struct_character_driver_scenario_11_27 *data = (struct emg_struct_character_driver_scenario_11_27 *)arg0;
  #line 3880 
  emg_35_ret = ldv_undef_int();
  #line 3881 
  emg_35_container = emg_alias_lbs_debug_fops;
  #line 3882 
  emg_35_ret = ldv_undef_int();
  #line 3884 
  __VERIFIER_assume(data->arg0 == emg_alias_lbs_debug_fops);
  #line 3886 
  if (data != (struct emg_struct_character_driver_scenario_11_27 *)0) {
    #line 3887 
    emg_35_container = data->arg0;
    #line 3888 
    ldv_free((void *)data);
  }
  #line 3893 
  emg_35_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3894 
  emg_35_size_cnt = (unsigned long)ldv_undef_int();
  #line 3898 
  goto emg_main_35;
  #line 3902 
  return (void *)0;
  #line 3905 
  emg_call_35: 
               #line 3905 
  ;
  #line 3906 
  if (ldv_undef_int() != 0) {
    #line 3907 
    switch (ldv_undef_int()) {
      #line 3908 
      case 0: 
              #line 3908 
      ;
      #line 3910 
      emg_35_emg_param_1_32 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3910 
      emg_35_emg_param_1_32 = emg_35_emg_param_1_32;
      #line 3911 
      emg_35_emg_param_3_33 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3911 
      emg_35_emg_param_3_33 = emg_35_emg_param_3_33;
      #line 3915 
      emg_wrapper_lbs_rdmac_read(emg_35_resource_0,emg_35_emg_param_1_32,emg_35_size_cnt,emg_35_emg_param_3_33);
      #line 3919 
      ldv_free((void *)emg_35_emg_param_1_32);
      #line 3920 
      ldv_free((void *)emg_35_emg_param_3_33);
      #line 3922 
      break;
      #line 3924 
      case 1: 
              #line 3924 
      ;
      #line 3926 
      default_llseek(emg_35_resource_0,emg_35_emg_param_1_30,emg_35_emg_param_2_31);
      #line 3928 
      break;
      #line 3930 
      case 2: 
              #line 3930 
      ;
      #line 3932 
      generic_file_llseek(emg_35_resource_0,emg_35_emg_param_1_28,emg_35_emg_param_2_29);
      #line 3934 
      break;
      #line 3936 
      case 3: 
              #line 3936 
      ;
      #line 3938 
      generic_file_llseek(emg_35_resource_0,emg_35_emg_param_1_26,emg_35_emg_param_2_27);
      #line 3940 
      break;
      #line 3942 
      case 4: 
              #line 3942 
      ;
      #line 3944 
      generic_file_llseek(emg_35_resource_0,emg_35_emg_param_1_24,emg_35_emg_param_2_25);
      #line 3946 
      break;
      #line 3948 
      case 5: 
              #line 3948 
      ;
      #line 3950 
      generic_file_llseek(emg_35_resource_0,emg_35_emg_param_1_22,emg_35_emg_param_2_23);
      #line 3952 
      break;
      #line 3954 
      case 6: 
              #line 3954 
      ;
      #line 3956 
      generic_file_llseek(emg_35_resource_0,emg_35_emg_param_1_20,emg_35_emg_param_2_21);
      #line 3958 
      break;
      #line 3960 
      case 7: 
              #line 3960 
      ;
      #line 3962 
      generic_file_llseek(emg_35_resource_0,emg_35_emg_param_1_18,emg_35_emg_param_2_19);
      #line 3964 
      break;
      #line 3966 
      case 8: 
              #line 3966 
      ;
      #line 3968 
      generic_file_llseek(emg_35_resource_0,emg_35_emg_param_1_16,emg_35_emg_param_2_17);
      #line 3970 
      break;
      #line 3972 
      case 9: 
              #line 3972 
      ;
      #line 3974 
      generic_file_llseek(emg_35_resource_0,emg_35_emg_param_1_14,emg_35_emg_param_2_15);
      #line 3976 
      break;
      #line 3978 
      case 10: 
               #line 3978 
      ;
      #line 3980 
      generic_file_llseek(emg_35_resource_0,emg_35_emg_param_1_12,emg_35_emg_param_2_13);
      #line 3982 
      break;
      #line 3984 
      case 11: 
               #line 3984 
      ;
      #line 3986 
      generic_file_llseek(emg_35_resource_0,emg_35_emg_param_1_10,emg_35_emg_param_2_11);
      #line 3988 
      break;
      #line 3990 
      case 12: 
               #line 3990 
      ;
      #line 3992 
      generic_file_llseek(emg_35_resource_0,emg_35_emg_param_1_8,emg_35_emg_param_2_9);
      #line 3994 
      break;
      #line 3996 
      case 13: 
               #line 3996 
      ;
      #line 3998 
      generic_file_llseek(emg_35_resource_0,emg_35_emg_param_1_6,emg_35_emg_param_2_7);
      #line 4000 
      break;
      #line 4002 
      case 14: 
               #line 4002 
      ;
      #line 4004 
      generic_file_llseek(emg_35_resource_0,emg_35_emg_param_1_4,emg_35_emg_param_2_5);
      #line 4006 
      break;
      #line 4008 
      case 15: 
               #line 4008 
      ;
      #line 4010 
      generic_file_llseek(emg_35_resource_0,emg_35_emg_param_1_2,emg_35_emg_param_2_3);
      #line 4012 
      break;
      #line 4014 
      case 16: 
               #line 4014 
      ;
      #line 4016 
      generic_file_llseek(emg_35_resource_0,emg_35_emg_param_1_0,emg_35_emg_param_2_1);
      #line 4018 
      break;
      #line 4020 
      case 17: 
               #line 4020 
      ;
      #line 4027 
      __VERIFIER_assume(emg_35_size_cnt <= 2147479552UL);
      #line 4028 
      emg_35_emg_param_1_34 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4028 
      emg_35_emg_param_1_34 = emg_35_emg_param_1_34;
      #line 4029 
      emg_35_emg_param_3_35 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4029 
      emg_35_emg_param_3_35 = emg_35_emg_param_3_35;
      #line 4033 
      emg_wrapper_lbs_rdmac_write(emg_35_resource_0,emg_35_emg_param_1_34,emg_35_size_cnt,emg_35_emg_param_3_35);
      #line 4037 
      ldv_free((void *)emg_35_emg_param_1_34);
      #line 4038 
      ldv_free((void *)emg_35_emg_param_3_35);
      #line 4040 
      break;
      #line 4042 
      default: 
               #line 4042 
      ;
      #line 4042 
      __VERIFIER_assume(0);
    }
    #line 4045 
    if (emg_repeat_cnt_call_35 > 0) {
      #line 4046 
      emg_repeat_cnt_call_35 --;
      #line 4048 
      goto emg_call_35;
    }
    else 
         #line 4050 
         __VERIFIER_assume(0);
  }
  else {
    #line 4056 
    if (emg_35_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 4057 
      (*(emg_35_container->release))(emg_35_resource_1,emg_35_resource_0);
    #line 4061 
    if (emg_repeat_cnt_main_35_0 > 0) {
      #line 4062 
      emg_repeat_cnt_main_35_0 --;
      #line 4064 
      goto emg_main_35;
    }
    else 
         #line 4066 
         __VERIFIER_assume(0);
  }
  #line 4072 
  return (void *)0;
  #line 4075 
  emg_main_35: 
               #line 4075 
  ;
  #line 4076 
  if (ldv_undef_int() != 0) {
    #line 4078 
    emg_35_ret = simple_open(emg_35_resource_1,emg_35_resource_0);
    #line 4083 
    emg_35_ret = ldv_filter_err_code(emg_35_ret);
    #line 4086 
    if (ldv_undef_int() != 0) {
      #line 4088 
      __VERIFIER_assume(emg_35_ret == 0);
      #line 4092 
      goto emg_call_35;
    }
    else {
      #line 4097 
      __VERIFIER_assume(emg_35_ret != 0);
      #line 4100 
      if (emg_repeat_cnt_main_35_1 > 0) {
        #line 4101 
        emg_repeat_cnt_main_35_1 --;
        #line 4103 
        goto emg_main_35;
      }
      else 
           #line 4105 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 4112 
       ldv_free((void *)emg_35_resource_0);
  #line 4120 
  return (void *)0;
}

#line 4125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_20(void *arg0)
{
  #line 4128 
  struct file_operations *emg_36_container;
  #line 4129 
  long long emg_36_emg_param_1_0;
  #line 4130 
  long long emg_36_emg_param_1_10;
  #line 4131 
  long long emg_36_emg_param_1_12;
  #line 4132 
  long long emg_36_emg_param_1_14;
  #line 4133 
  long long emg_36_emg_param_1_16;
  #line 4134 
  long long emg_36_emg_param_1_18;
  #line 4135 
  long long emg_36_emg_param_1_2;
  #line 4136 
  long long emg_36_emg_param_1_20;
  #line 4137 
  long long emg_36_emg_param_1_22;
  #line 4138 
  long long emg_36_emg_param_1_24;
  #line 4139 
  long long emg_36_emg_param_1_26;
  #line 4140 
  long long emg_36_emg_param_1_28;
  #line 4141 
  long long emg_36_emg_param_1_30;
  #line 4142 
  char *emg_36_emg_param_1_32;
  #line 4143 
  char *emg_36_emg_param_1_34;
  #line 4144 
  long long emg_36_emg_param_1_4;
  #line 4145 
  long long emg_36_emg_param_1_6;
  #line 4146 
  long long emg_36_emg_param_1_8;
  #line 4147 
  int emg_36_emg_param_2_1;
  #line 4148 
  int emg_36_emg_param_2_11;
  #line 4149 
  int emg_36_emg_param_2_13;
  #line 4150 
  int emg_36_emg_param_2_15;
  #line 4151 
  int emg_36_emg_param_2_17;
  #line 4152 
  int emg_36_emg_param_2_19;
  #line 4153 
  int emg_36_emg_param_2_21;
  #line 4154 
  int emg_36_emg_param_2_23;
  #line 4155 
  int emg_36_emg_param_2_25;
  #line 4156 
  int emg_36_emg_param_2_27;
  #line 4157 
  int emg_36_emg_param_2_29;
  #line 4158 
  int emg_36_emg_param_2_3;
  #line 4159 
  int emg_36_emg_param_2_31;
  #line 4160 
  int emg_36_emg_param_2_5;
  #line 4161 
  int emg_36_emg_param_2_7;
  #line 4162 
  int emg_36_emg_param_2_9;
  #line 4163 
  long long *emg_36_emg_param_3_33;
  #line 4164 
  long long *emg_36_emg_param_3_35;
  #line 4165 
  struct file *emg_36_resource_0;
  #line 4166 
  struct inode *emg_36_resource_1;
  #line 4167 
  int emg_36_ret;
  #line 4168 
  unsigned long emg_36_size_cnt;
  #line 4169 
  int emg_repeat_cnt_main_36_1 = 1;
  #line 4170 
  int emg_repeat_cnt_call_36 = 1;
  #line 4171 
  int emg_repeat_cnt_main_36_0 = 1;
  #line 4173 
  struct emg_struct_character_driver_scenario_11_27 *data = (struct emg_struct_character_driver_scenario_11_27 *)arg0;
  #line 4177 
  emg_36_ret = ldv_undef_int();
  #line 4178 
  emg_36_container = emg_alias_lbs_debug_fops;
  #line 4179 
  emg_36_ret = ldv_undef_int();
  #line 4181 
  __VERIFIER_assume(data->arg0 == emg_alias_lbs_debug_fops);
  #line 4183 
  if (data != (struct emg_struct_character_driver_scenario_11_27 *)0) {
    #line 4184 
    emg_36_container = data->arg0;
    #line 4185 
    ldv_free((void *)data);
  }
  #line 4190 
  emg_36_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 4191 
  emg_36_size_cnt = (unsigned long)ldv_undef_int();
  #line 4195 
  goto emg_main_36;
  #line 4199 
  return (void *)0;
  #line 4202 
  emg_call_36: 
               #line 4202 
  ;
  #line 4203 
  if (ldv_undef_int() != 0) {
    #line 4204 
    switch (ldv_undef_int()) {
      #line 4205 
      case 0: 
              #line 4205 
      ;
      #line 4207 
      emg_36_emg_param_1_32 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4207 
      emg_36_emg_param_1_32 = emg_36_emg_param_1_32;
      #line 4208 
      emg_36_emg_param_3_33 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4208 
      emg_36_emg_param_3_33 = emg_36_emg_param_3_33;
      #line 4212 
      emg_wrapper_lbs_rdrf_read(emg_36_resource_0,emg_36_emg_param_1_32,emg_36_size_cnt,emg_36_emg_param_3_33);
      #line 4216 
      ldv_free((void *)emg_36_emg_param_1_32);
      #line 4217 
      ldv_free((void *)emg_36_emg_param_3_33);
      #line 4219 
      break;
      #line 4221 
      case 1: 
              #line 4221 
      ;
      #line 4223 
      default_llseek(emg_36_resource_0,emg_36_emg_param_1_30,emg_36_emg_param_2_31);
      #line 4225 
      break;
      #line 4227 
      case 2: 
              #line 4227 
      ;
      #line 4229 
      generic_file_llseek(emg_36_resource_0,emg_36_emg_param_1_28,emg_36_emg_param_2_29);
      #line 4231 
      break;
      #line 4233 
      case 3: 
              #line 4233 
      ;
      #line 4235 
      generic_file_llseek(emg_36_resource_0,emg_36_emg_param_1_26,emg_36_emg_param_2_27);
      #line 4237 
      break;
      #line 4239 
      case 4: 
              #line 4239 
      ;
      #line 4241 
      generic_file_llseek(emg_36_resource_0,emg_36_emg_param_1_24,emg_36_emg_param_2_25);
      #line 4243 
      break;
      #line 4245 
      case 5: 
              #line 4245 
      ;
      #line 4247 
      generic_file_llseek(emg_36_resource_0,emg_36_emg_param_1_22,emg_36_emg_param_2_23);
      #line 4249 
      break;
      #line 4251 
      case 6: 
              #line 4251 
      ;
      #line 4253 
      generic_file_llseek(emg_36_resource_0,emg_36_emg_param_1_20,emg_36_emg_param_2_21);
      #line 4255 
      break;
      #line 4257 
      case 7: 
              #line 4257 
      ;
      #line 4259 
      generic_file_llseek(emg_36_resource_0,emg_36_emg_param_1_18,emg_36_emg_param_2_19);
      #line 4261 
      break;
      #line 4263 
      case 8: 
              #line 4263 
      ;
      #line 4265 
      generic_file_llseek(emg_36_resource_0,emg_36_emg_param_1_16,emg_36_emg_param_2_17);
      #line 4267 
      break;
      #line 4269 
      case 9: 
              #line 4269 
      ;
      #line 4271 
      generic_file_llseek(emg_36_resource_0,emg_36_emg_param_1_14,emg_36_emg_param_2_15);
      #line 4273 
      break;
      #line 4275 
      case 10: 
               #line 4275 
      ;
      #line 4277 
      generic_file_llseek(emg_36_resource_0,emg_36_emg_param_1_12,emg_36_emg_param_2_13);
      #line 4279 
      break;
      #line 4281 
      case 11: 
               #line 4281 
      ;
      #line 4283 
      generic_file_llseek(emg_36_resource_0,emg_36_emg_param_1_10,emg_36_emg_param_2_11);
      #line 4285 
      break;
      #line 4287 
      case 12: 
               #line 4287 
      ;
      #line 4289 
      generic_file_llseek(emg_36_resource_0,emg_36_emg_param_1_8,emg_36_emg_param_2_9);
      #line 4291 
      break;
      #line 4293 
      case 13: 
               #line 4293 
      ;
      #line 4295 
      generic_file_llseek(emg_36_resource_0,emg_36_emg_param_1_6,emg_36_emg_param_2_7);
      #line 4297 
      break;
      #line 4299 
      case 14: 
               #line 4299 
      ;
      #line 4301 
      generic_file_llseek(emg_36_resource_0,emg_36_emg_param_1_4,emg_36_emg_param_2_5);
      #line 4303 
      break;
      #line 4305 
      case 15: 
               #line 4305 
      ;
      #line 4307 
      generic_file_llseek(emg_36_resource_0,emg_36_emg_param_1_2,emg_36_emg_param_2_3);
      #line 4309 
      break;
      #line 4311 
      case 16: 
               #line 4311 
      ;
      #line 4313 
      generic_file_llseek(emg_36_resource_0,emg_36_emg_param_1_0,emg_36_emg_param_2_1);
      #line 4315 
      break;
      #line 4317 
      case 17: 
               #line 4317 
      ;
      #line 4324 
      __VERIFIER_assume(emg_36_size_cnt <= 2147479552UL);
      #line 4325 
      emg_36_emg_param_1_34 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4325 
      emg_36_emg_param_1_34 = emg_36_emg_param_1_34;
      #line 4326 
      emg_36_emg_param_3_35 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4326 
      emg_36_emg_param_3_35 = emg_36_emg_param_3_35;
      #line 4330 
      emg_wrapper_lbs_rdrf_write(emg_36_resource_0,emg_36_emg_param_1_34,emg_36_size_cnt,emg_36_emg_param_3_35);
      #line 4334 
      ldv_free((void *)emg_36_emg_param_1_34);
      #line 4335 
      ldv_free((void *)emg_36_emg_param_3_35);
      #line 4337 
      break;
      #line 4339 
      default: 
               #line 4339 
      ;
      #line 4339 
      __VERIFIER_assume(0);
    }
    #line 4342 
    if (emg_repeat_cnt_call_36 > 0) {
      #line 4343 
      emg_repeat_cnt_call_36 --;
      #line 4345 
      goto emg_call_36;
    }
    else 
         #line 4347 
         __VERIFIER_assume(0);
  }
  else {
    #line 4353 
    if (emg_36_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 4354 
      (*(emg_36_container->release))(emg_36_resource_1,emg_36_resource_0);
    #line 4358 
    if (emg_repeat_cnt_main_36_1 > 0) {
      #line 4359 
      emg_repeat_cnt_main_36_1 --;
      #line 4361 
      goto emg_main_36;
    }
    else 
         #line 4363 
         __VERIFIER_assume(0);
  }
  #line 4369 
  return (void *)0;
  #line 4372 
  emg_main_36: 
               #line 4372 
  ;
  #line 4373 
  if (ldv_undef_int() != 0) {
    #line 4375 
    emg_36_ret = simple_open(emg_36_resource_1,emg_36_resource_0);
    #line 4380 
    emg_36_ret = ldv_filter_err_code(emg_36_ret);
    #line 4383 
    if (ldv_undef_int() != 0) {
      #line 4385 
      __VERIFIER_assume(emg_36_ret == 0);
      #line 4389 
      goto emg_call_36;
    }
    else {
      #line 4394 
      __VERIFIER_assume(emg_36_ret != 0);
      #line 4397 
      if (emg_repeat_cnt_main_36_0 > 0) {
        #line 4398 
        emg_repeat_cnt_main_36_0 --;
        #line 4400 
        goto emg_main_36;
      }
      else 
           #line 4402 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 4409 
       ldv_free((void *)emg_36_resource_0);
  #line 4417 
  return (void *)0;
}

#line 4422  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_21(void *arg0)
{
  #line 4425 
  struct file_operations *emg_37_container;
  #line 4426 
  long long emg_37_emg_param_1_0;
  #line 4427 
  long long emg_37_emg_param_1_10;
  #line 4428 
  long long emg_37_emg_param_1_12;
  #line 4429 
  long long emg_37_emg_param_1_14;
  #line 4430 
  long long emg_37_emg_param_1_16;
  #line 4431 
  long long emg_37_emg_param_1_18;
  #line 4432 
  long long emg_37_emg_param_1_2;
  #line 4433 
  long long emg_37_emg_param_1_20;
  #line 4434 
  long long emg_37_emg_param_1_22;
  #line 4435 
  long long emg_37_emg_param_1_24;
  #line 4436 
  long long emg_37_emg_param_1_26;
  #line 4437 
  long long emg_37_emg_param_1_28;
  #line 4438 
  long long emg_37_emg_param_1_30;
  #line 4439 
  char *emg_37_emg_param_1_32;
  #line 4440 
  char *emg_37_emg_param_1_34;
  #line 4441 
  long long emg_37_emg_param_1_4;
  #line 4442 
  long long emg_37_emg_param_1_6;
  #line 4443 
  long long emg_37_emg_param_1_8;
  #line 4444 
  int emg_37_emg_param_2_1;
  #line 4445 
  int emg_37_emg_param_2_11;
  #line 4446 
  int emg_37_emg_param_2_13;
  #line 4447 
  int emg_37_emg_param_2_15;
  #line 4448 
  int emg_37_emg_param_2_17;
  #line 4449 
  int emg_37_emg_param_2_19;
  #line 4450 
  int emg_37_emg_param_2_21;
  #line 4451 
  int emg_37_emg_param_2_23;
  #line 4452 
  int emg_37_emg_param_2_25;
  #line 4453 
  int emg_37_emg_param_2_27;
  #line 4454 
  int emg_37_emg_param_2_29;
  #line 4455 
  int emg_37_emg_param_2_3;
  #line 4456 
  int emg_37_emg_param_2_31;
  #line 4457 
  int emg_37_emg_param_2_5;
  #line 4458 
  int emg_37_emg_param_2_7;
  #line 4459 
  int emg_37_emg_param_2_9;
  #line 4460 
  long long *emg_37_emg_param_3_33;
  #line 4461 
  long long *emg_37_emg_param_3_35;
  #line 4462 
  struct file *emg_37_resource_0;
  #line 4463 
  struct inode *emg_37_resource_1;
  #line 4464 
  int emg_37_ret;
  #line 4465 
  unsigned long emg_37_size_cnt;
  #line 4466 
  int emg_repeat_cnt_call_37 = 1;
  #line 4467 
  int emg_repeat_cnt_main_37_0 = 1;
  #line 4468 
  int emg_repeat_cnt_main_37_1 = 1;
  #line 4470 
  struct emg_struct_character_driver_scenario_11_27 *data = (struct emg_struct_character_driver_scenario_11_27 *)arg0;
  #line 4474 
  emg_37_ret = ldv_undef_int();
  #line 4475 
  emg_37_container = emg_alias_lbs_debug_fops;
  #line 4476 
  emg_37_ret = ldv_undef_int();
  #line 4478 
  __VERIFIER_assume(data->arg0 == emg_alias_lbs_debug_fops);
  #line 4480 
  if (data != (struct emg_struct_character_driver_scenario_11_27 *)0) {
    #line 4481 
    emg_37_container = data->arg0;
    #line 4482 
    ldv_free((void *)data);
  }
  #line 4487 
  emg_37_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 4488 
  emg_37_size_cnt = (unsigned long)ldv_undef_int();
  #line 4492 
  goto emg_main_37;
  #line 4496 
  return (void *)0;
  #line 4499 
  emg_call_37: 
               #line 4499 
  ;
  #line 4500 
  if (ldv_undef_int() != 0) {
    #line 4501 
    switch (ldv_undef_int()) {
      #line 4502 
      case 0: 
              #line 4502 
      ;
      #line 4504 
      emg_37_emg_param_1_32 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4504 
      emg_37_emg_param_1_32 = emg_37_emg_param_1_32;
      #line 4505 
      emg_37_emg_param_3_33 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4505 
      emg_37_emg_param_3_33 = emg_37_emg_param_3_33;
      #line 4509 
      emg_wrapper_lbs_sleepparams_read(emg_37_resource_0,emg_37_emg_param_1_32,emg_37_size_cnt,emg_37_emg_param_3_33);
      #line 4513 
      ldv_free((void *)emg_37_emg_param_1_32);
      #line 4514 
      ldv_free((void *)emg_37_emg_param_3_33);
      #line 4516 
      break;
      #line 4518 
      case 1: 
              #line 4518 
      ;
      #line 4520 
      default_llseek(emg_37_resource_0,emg_37_emg_param_1_30,emg_37_emg_param_2_31);
      #line 4522 
      break;
      #line 4524 
      case 2: 
              #line 4524 
      ;
      #line 4526 
      generic_file_llseek(emg_37_resource_0,emg_37_emg_param_1_28,emg_37_emg_param_2_29);
      #line 4528 
      break;
      #line 4530 
      case 3: 
              #line 4530 
      ;
      #line 4532 
      generic_file_llseek(emg_37_resource_0,emg_37_emg_param_1_26,emg_37_emg_param_2_27);
      #line 4534 
      break;
      #line 4536 
      case 4: 
              #line 4536 
      ;
      #line 4538 
      generic_file_llseek(emg_37_resource_0,emg_37_emg_param_1_24,emg_37_emg_param_2_25);
      #line 4540 
      break;
      #line 4542 
      case 5: 
              #line 4542 
      ;
      #line 4544 
      generic_file_llseek(emg_37_resource_0,emg_37_emg_param_1_22,emg_37_emg_param_2_23);
      #line 4546 
      break;
      #line 4548 
      case 6: 
              #line 4548 
      ;
      #line 4550 
      generic_file_llseek(emg_37_resource_0,emg_37_emg_param_1_20,emg_37_emg_param_2_21);
      #line 4552 
      break;
      #line 4554 
      case 7: 
              #line 4554 
      ;
      #line 4556 
      generic_file_llseek(emg_37_resource_0,emg_37_emg_param_1_18,emg_37_emg_param_2_19);
      #line 4558 
      break;
      #line 4560 
      case 8: 
              #line 4560 
      ;
      #line 4562 
      generic_file_llseek(emg_37_resource_0,emg_37_emg_param_1_16,emg_37_emg_param_2_17);
      #line 4564 
      break;
      #line 4566 
      case 9: 
              #line 4566 
      ;
      #line 4568 
      generic_file_llseek(emg_37_resource_0,emg_37_emg_param_1_14,emg_37_emg_param_2_15);
      #line 4570 
      break;
      #line 4572 
      case 10: 
               #line 4572 
      ;
      #line 4574 
      generic_file_llseek(emg_37_resource_0,emg_37_emg_param_1_12,emg_37_emg_param_2_13);
      #line 4576 
      break;
      #line 4578 
      case 11: 
               #line 4578 
      ;
      #line 4580 
      generic_file_llseek(emg_37_resource_0,emg_37_emg_param_1_10,emg_37_emg_param_2_11);
      #line 4582 
      break;
      #line 4584 
      case 12: 
               #line 4584 
      ;
      #line 4586 
      generic_file_llseek(emg_37_resource_0,emg_37_emg_param_1_8,emg_37_emg_param_2_9);
      #line 4588 
      break;
      #line 4590 
      case 13: 
               #line 4590 
      ;
      #line 4592 
      generic_file_llseek(emg_37_resource_0,emg_37_emg_param_1_6,emg_37_emg_param_2_7);
      #line 4594 
      break;
      #line 4596 
      case 14: 
               #line 4596 
      ;
      #line 4598 
      generic_file_llseek(emg_37_resource_0,emg_37_emg_param_1_4,emg_37_emg_param_2_5);
      #line 4600 
      break;
      #line 4602 
      case 15: 
               #line 4602 
      ;
      #line 4604 
      generic_file_llseek(emg_37_resource_0,emg_37_emg_param_1_2,emg_37_emg_param_2_3);
      #line 4606 
      break;
      #line 4608 
      case 16: 
               #line 4608 
      ;
      #line 4610 
      generic_file_llseek(emg_37_resource_0,emg_37_emg_param_1_0,emg_37_emg_param_2_1);
      #line 4612 
      break;
      #line 4614 
      case 17: 
               #line 4614 
      ;
      #line 4621 
      __VERIFIER_assume(emg_37_size_cnt <= 2147479552UL);
      #line 4622 
      emg_37_emg_param_1_34 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4622 
      emg_37_emg_param_1_34 = emg_37_emg_param_1_34;
      #line 4623 
      emg_37_emg_param_3_35 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4623 
      emg_37_emg_param_3_35 = emg_37_emg_param_3_35;
      #line 4627 
      emg_wrapper_lbs_sleepparams_write(emg_37_resource_0,emg_37_emg_param_1_34,emg_37_size_cnt,emg_37_emg_param_3_35);
      #line 4631 
      ldv_free((void *)emg_37_emg_param_1_34);
      #line 4632 
      ldv_free((void *)emg_37_emg_param_3_35);
      #line 4634 
      break;
      #line 4636 
      default: 
               #line 4636 
      ;
      #line 4636 
      __VERIFIER_assume(0);
    }
    #line 4639 
    if (emg_repeat_cnt_call_37 > 0) {
      #line 4640 
      emg_repeat_cnt_call_37 --;
      #line 4642 
      goto emg_call_37;
    }
    else 
         #line 4644 
         __VERIFIER_assume(0);
  }
  else {
    #line 4650 
    if (emg_37_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 4651 
      (*(emg_37_container->release))(emg_37_resource_1,emg_37_resource_0);
    #line 4655 
    if (emg_repeat_cnt_main_37_0 > 0) {
      #line 4656 
      emg_repeat_cnt_main_37_0 --;
      #line 4658 
      goto emg_main_37;
    }
    else 
         #line 4660 
         __VERIFIER_assume(0);
  }
  #line 4666 
  return (void *)0;
  #line 4669 
  emg_main_37: 
               #line 4669 
  ;
  #line 4670 
  if (ldv_undef_int() != 0) {
    #line 4672 
    emg_37_ret = simple_open(emg_37_resource_1,emg_37_resource_0);
    #line 4677 
    emg_37_ret = ldv_filter_err_code(emg_37_ret);
    #line 4680 
    if (ldv_undef_int() != 0) {
      #line 4682 
      __VERIFIER_assume(emg_37_ret == 0);
      #line 4686 
      goto emg_call_37;
    }
    else {
      #line 4691 
      __VERIFIER_assume(emg_37_ret != 0);
      #line 4694 
      if (emg_repeat_cnt_main_37_1 > 0) {
        #line 4695 
        emg_repeat_cnt_main_37_1 --;
        #line 4697 
        goto emg_main_37;
      }
      else 
           #line 4699 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 4706 
       ldv_free((void *)emg_37_resource_0);
  #line 4714 
  return (void *)0;
}

#line 4719  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_22(void *arg0)
{
  #line 4722 
  struct file_operations *emg_38_container;
  #line 4723 
  long long emg_38_emg_param_1_0;
  #line 4724 
  long long emg_38_emg_param_1_10;
  #line 4725 
  long long emg_38_emg_param_1_12;
  #line 4726 
  long long emg_38_emg_param_1_14;
  #line 4727 
  long long emg_38_emg_param_1_16;
  #line 4728 
  long long emg_38_emg_param_1_18;
  #line 4729 
  long long emg_38_emg_param_1_2;
  #line 4730 
  long long emg_38_emg_param_1_20;
  #line 4731 
  long long emg_38_emg_param_1_22;
  #line 4732 
  long long emg_38_emg_param_1_24;
  #line 4733 
  long long emg_38_emg_param_1_26;
  #line 4734 
  long long emg_38_emg_param_1_28;
  #line 4735 
  long long emg_38_emg_param_1_30;
  #line 4736 
  char *emg_38_emg_param_1_32;
  #line 4737 
  char *emg_38_emg_param_1_34;
  #line 4738 
  long long emg_38_emg_param_1_4;
  #line 4739 
  long long emg_38_emg_param_1_6;
  #line 4740 
  long long emg_38_emg_param_1_8;
  #line 4741 
  int emg_38_emg_param_2_1;
  #line 4742 
  int emg_38_emg_param_2_11;
  #line 4743 
  int emg_38_emg_param_2_13;
  #line 4744 
  int emg_38_emg_param_2_15;
  #line 4745 
  int emg_38_emg_param_2_17;
  #line 4746 
  int emg_38_emg_param_2_19;
  #line 4747 
  int emg_38_emg_param_2_21;
  #line 4748 
  int emg_38_emg_param_2_23;
  #line 4749 
  int emg_38_emg_param_2_25;
  #line 4750 
  int emg_38_emg_param_2_27;
  #line 4751 
  int emg_38_emg_param_2_29;
  #line 4752 
  int emg_38_emg_param_2_3;
  #line 4753 
  int emg_38_emg_param_2_31;
  #line 4754 
  int emg_38_emg_param_2_5;
  #line 4755 
  int emg_38_emg_param_2_7;
  #line 4756 
  int emg_38_emg_param_2_9;
  #line 4757 
  long long *emg_38_emg_param_3_33;
  #line 4758 
  long long *emg_38_emg_param_3_35;
  #line 4759 
  struct file *emg_38_resource_0;
  #line 4760 
  struct inode *emg_38_resource_1;
  #line 4761 
  int emg_38_ret;
  #line 4762 
  unsigned long emg_38_size_cnt;
  #line 4763 
  int emg_repeat_cnt_main_38_1 = 1;
  #line 4764 
  int emg_repeat_cnt_call_38 = 1;
  #line 4765 
  int emg_repeat_cnt_main_38_0 = 1;
  #line 4767 
  struct emg_struct_character_driver_scenario_11_27 *data = (struct emg_struct_character_driver_scenario_11_27 *)arg0;
  #line 4771 
  emg_38_ret = ldv_undef_int();
  #line 4772 
  emg_38_container = emg_alias_lbs_debug_fops;
  #line 4773 
  emg_38_ret = ldv_undef_int();
  #line 4775 
  __VERIFIER_assume(data->arg0 == emg_alias_lbs_debug_fops);
  #line 4777 
  if (data != (struct emg_struct_character_driver_scenario_11_27 *)0) {
    #line 4778 
    emg_38_container = data->arg0;
    #line 4779 
    ldv_free((void *)data);
  }
  #line 4784 
  emg_38_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 4785 
  emg_38_size_cnt = (unsigned long)ldv_undef_int();
  #line 4789 
  goto emg_main_38;
  #line 4793 
  return (void *)0;
  #line 4796 
  emg_call_38: 
               #line 4796 
  ;
  #line 4797 
  if (ldv_undef_int() != 0) {
    #line 4798 
    switch (ldv_undef_int()) {
      #line 4799 
      case 0: 
              #line 4799 
      ;
      #line 4801 
      emg_38_emg_param_1_32 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4801 
      emg_38_emg_param_1_32 = emg_38_emg_param_1_32;
      #line 4802 
      emg_38_emg_param_3_33 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4802 
      emg_38_emg_param_3_33 = emg_38_emg_param_3_33;
      #line 4806 
      emg_wrapper_lbs_debugfs_read(emg_38_resource_0,emg_38_emg_param_1_32,emg_38_size_cnt,emg_38_emg_param_3_33);
      #line 4810 
      ldv_free((void *)emg_38_emg_param_1_32);
      #line 4811 
      ldv_free((void *)emg_38_emg_param_3_33);
      #line 4813 
      break;
      #line 4815 
      case 1: 
              #line 4815 
      ;
      #line 4817 
      default_llseek(emg_38_resource_0,emg_38_emg_param_1_30,emg_38_emg_param_2_31);
      #line 4819 
      break;
      #line 4821 
      case 2: 
              #line 4821 
      ;
      #line 4823 
      generic_file_llseek(emg_38_resource_0,emg_38_emg_param_1_28,emg_38_emg_param_2_29);
      #line 4825 
      break;
      #line 4827 
      case 3: 
              #line 4827 
      ;
      #line 4829 
      generic_file_llseek(emg_38_resource_0,emg_38_emg_param_1_26,emg_38_emg_param_2_27);
      #line 4831 
      break;
      #line 4833 
      case 4: 
              #line 4833 
      ;
      #line 4835 
      generic_file_llseek(emg_38_resource_0,emg_38_emg_param_1_24,emg_38_emg_param_2_25);
      #line 4837 
      break;
      #line 4839 
      case 5: 
              #line 4839 
      ;
      #line 4841 
      generic_file_llseek(emg_38_resource_0,emg_38_emg_param_1_22,emg_38_emg_param_2_23);
      #line 4843 
      break;
      #line 4845 
      case 6: 
              #line 4845 
      ;
      #line 4847 
      generic_file_llseek(emg_38_resource_0,emg_38_emg_param_1_20,emg_38_emg_param_2_21);
      #line 4849 
      break;
      #line 4851 
      case 7: 
              #line 4851 
      ;
      #line 4853 
      generic_file_llseek(emg_38_resource_0,emg_38_emg_param_1_18,emg_38_emg_param_2_19);
      #line 4855 
      break;
      #line 4857 
      case 8: 
              #line 4857 
      ;
      #line 4859 
      generic_file_llseek(emg_38_resource_0,emg_38_emg_param_1_16,emg_38_emg_param_2_17);
      #line 4861 
      break;
      #line 4863 
      case 9: 
              #line 4863 
      ;
      #line 4865 
      generic_file_llseek(emg_38_resource_0,emg_38_emg_param_1_14,emg_38_emg_param_2_15);
      #line 4867 
      break;
      #line 4869 
      case 10: 
               #line 4869 
      ;
      #line 4871 
      generic_file_llseek(emg_38_resource_0,emg_38_emg_param_1_12,emg_38_emg_param_2_13);
      #line 4873 
      break;
      #line 4875 
      case 11: 
               #line 4875 
      ;
      #line 4877 
      generic_file_llseek(emg_38_resource_0,emg_38_emg_param_1_10,emg_38_emg_param_2_11);
      #line 4879 
      break;
      #line 4881 
      case 12: 
               #line 4881 
      ;
      #line 4883 
      generic_file_llseek(emg_38_resource_0,emg_38_emg_param_1_8,emg_38_emg_param_2_9);
      #line 4885 
      break;
      #line 4887 
      case 13: 
               #line 4887 
      ;
      #line 4889 
      generic_file_llseek(emg_38_resource_0,emg_38_emg_param_1_6,emg_38_emg_param_2_7);
      #line 4891 
      break;
      #line 4893 
      case 14: 
               #line 4893 
      ;
      #line 4895 
      generic_file_llseek(emg_38_resource_0,emg_38_emg_param_1_4,emg_38_emg_param_2_5);
      #line 4897 
      break;
      #line 4899 
      case 15: 
               #line 4899 
      ;
      #line 4901 
      generic_file_llseek(emg_38_resource_0,emg_38_emg_param_1_2,emg_38_emg_param_2_3);
      #line 4903 
      break;
      #line 4905 
      case 16: 
               #line 4905 
      ;
      #line 4907 
      generic_file_llseek(emg_38_resource_0,emg_38_emg_param_1_0,emg_38_emg_param_2_1);
      #line 4909 
      break;
      #line 4911 
      case 17: 
               #line 4911 
      ;
      #line 4918 
      __VERIFIER_assume(emg_38_size_cnt <= 2147479552UL);
      #line 4919 
      emg_38_emg_param_1_34 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4919 
      emg_38_emg_param_1_34 = emg_38_emg_param_1_34;
      #line 4920 
      emg_38_emg_param_3_35 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4920 
      emg_38_emg_param_3_35 = emg_38_emg_param_3_35;
      #line 4924 
      emg_wrapper_lbs_wrbbp_write(emg_38_resource_0,emg_38_emg_param_1_34,emg_38_size_cnt,emg_38_emg_param_3_35);
      #line 4928 
      ldv_free((void *)emg_38_emg_param_1_34);
      #line 4929 
      ldv_free((void *)emg_38_emg_param_3_35);
      #line 4931 
      break;
      #line 4933 
      default: 
               #line 4933 
      ;
      #line 4933 
      __VERIFIER_assume(0);
    }
    #line 4936 
    if (emg_repeat_cnt_call_38 > 0) {
      #line 4937 
      emg_repeat_cnt_call_38 --;
      #line 4939 
      goto emg_call_38;
    }
    else 
         #line 4941 
         __VERIFIER_assume(0);
  }
  else {
    #line 4947 
    if (emg_38_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 4948 
      (*(emg_38_container->release))(emg_38_resource_1,emg_38_resource_0);
    #line 4952 
    if (emg_repeat_cnt_main_38_0 > 0) {
      #line 4953 
      emg_repeat_cnt_main_38_0 --;
      #line 4955 
      goto emg_main_38;
    }
    else 
         #line 4957 
         __VERIFIER_assume(0);
  }
  #line 4963 
  return (void *)0;
  #line 4966 
  emg_main_38: 
               #line 4966 
  ;
  #line 4967 
  if (ldv_undef_int() != 0) {
    #line 4969 
    emg_38_ret = simple_open(emg_38_resource_1,emg_38_resource_0);
    #line 4974 
    emg_38_ret = ldv_filter_err_code(emg_38_ret);
    #line 4977 
    if (ldv_undef_int() != 0) {
      #line 4979 
      __VERIFIER_assume(emg_38_ret == 0);
      #line 4983 
      goto emg_call_38;
    }
    else {
      #line 4988 
      __VERIFIER_assume(emg_38_ret != 0);
      #line 4991 
      if (emg_repeat_cnt_main_38_1 > 0) {
        #line 4992 
        emg_repeat_cnt_main_38_1 --;
        #line 4994 
        goto emg_main_38;
      }
      else 
           #line 4996 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 5003 
       ldv_free((void *)emg_38_resource_0);
  #line 5011 
  return (void *)0;
}

#line 5016  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_23(void *arg0)
{
  #line 5019 
  struct file_operations *emg_39_container;
  #line 5020 
  long long emg_39_emg_param_1_0;
  #line 5021 
  long long emg_39_emg_param_1_10;
  #line 5022 
  long long emg_39_emg_param_1_12;
  #line 5023 
  long long emg_39_emg_param_1_14;
  #line 5024 
  long long emg_39_emg_param_1_16;
  #line 5025 
  long long emg_39_emg_param_1_18;
  #line 5026 
  long long emg_39_emg_param_1_2;
  #line 5027 
  long long emg_39_emg_param_1_20;
  #line 5028 
  long long emg_39_emg_param_1_22;
  #line 5029 
  long long emg_39_emg_param_1_24;
  #line 5030 
  long long emg_39_emg_param_1_26;
  #line 5031 
  long long emg_39_emg_param_1_28;
  #line 5032 
  long long emg_39_emg_param_1_30;
  #line 5033 
  char *emg_39_emg_param_1_32;
  #line 5034 
  char *emg_39_emg_param_1_34;
  #line 5035 
  long long emg_39_emg_param_1_4;
  #line 5036 
  long long emg_39_emg_param_1_6;
  #line 5037 
  long long emg_39_emg_param_1_8;
  #line 5038 
  int emg_39_emg_param_2_1;
  #line 5039 
  int emg_39_emg_param_2_11;
  #line 5040 
  int emg_39_emg_param_2_13;
  #line 5041 
  int emg_39_emg_param_2_15;
  #line 5042 
  int emg_39_emg_param_2_17;
  #line 5043 
  int emg_39_emg_param_2_19;
  #line 5044 
  int emg_39_emg_param_2_21;
  #line 5045 
  int emg_39_emg_param_2_23;
  #line 5046 
  int emg_39_emg_param_2_25;
  #line 5047 
  int emg_39_emg_param_2_27;
  #line 5048 
  int emg_39_emg_param_2_29;
  #line 5049 
  int emg_39_emg_param_2_3;
  #line 5050 
  int emg_39_emg_param_2_31;
  #line 5051 
  int emg_39_emg_param_2_5;
  #line 5052 
  int emg_39_emg_param_2_7;
  #line 5053 
  int emg_39_emg_param_2_9;
  #line 5054 
  long long *emg_39_emg_param_3_33;
  #line 5055 
  long long *emg_39_emg_param_3_35;
  #line 5056 
  struct file *emg_39_resource_0;
  #line 5057 
  struct inode *emg_39_resource_1;
  #line 5058 
  int emg_39_ret;
  #line 5059 
  unsigned long emg_39_size_cnt;
  #line 5060 
  int emg_repeat_cnt_main_39_1 = 1;
  #line 5061 
  int emg_repeat_cnt_main_39_0 = 1;
  #line 5062 
  int emg_repeat_cnt_call_39 = 1;
  #line 5064 
  struct emg_struct_character_driver_scenario_11_27 *data = (struct emg_struct_character_driver_scenario_11_27 *)arg0;
  #line 5068 
  emg_39_ret = ldv_undef_int();
  #line 5069 
  emg_39_container = emg_alias_lbs_debug_fops;
  #line 5070 
  emg_39_ret = ldv_undef_int();
  #line 5072 
  __VERIFIER_assume(data->arg0 == emg_alias_lbs_debug_fops);
  #line 5074 
  if (data != (struct emg_struct_character_driver_scenario_11_27 *)0) {
    #line 5075 
    emg_39_container = data->arg0;
    #line 5076 
    ldv_free((void *)data);
  }
  #line 5081 
  emg_39_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 5082 
  emg_39_size_cnt = (unsigned long)ldv_undef_int();
  #line 5086 
  goto emg_main_39;
  #line 5090 
  return (void *)0;
  #line 5093 
  emg_call_39: 
               #line 5093 
  ;
  #line 5094 
  if (ldv_undef_int() != 0) {
    #line 5095 
    switch (ldv_undef_int()) {
      #line 5096 
      case 0: 
              #line 5096 
      ;
      #line 5098 
      emg_39_emg_param_1_32 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5098 
      emg_39_emg_param_1_32 = emg_39_emg_param_1_32;
      #line 5099 
      emg_39_emg_param_3_33 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5099 
      emg_39_emg_param_3_33 = emg_39_emg_param_3_33;
      #line 5103 
      emg_wrapper_lbs_debugfs_read(emg_39_resource_0,emg_39_emg_param_1_32,emg_39_size_cnt,emg_39_emg_param_3_33);
      #line 5107 
      ldv_free((void *)emg_39_emg_param_1_32);
      #line 5108 
      ldv_free((void *)emg_39_emg_param_3_33);
      #line 5110 
      break;
      #line 5112 
      case 1: 
              #line 5112 
      ;
      #line 5114 
      default_llseek(emg_39_resource_0,emg_39_emg_param_1_30,emg_39_emg_param_2_31);
      #line 5116 
      break;
      #line 5118 
      case 2: 
              #line 5118 
      ;
      #line 5120 
      generic_file_llseek(emg_39_resource_0,emg_39_emg_param_1_28,emg_39_emg_param_2_29);
      #line 5122 
      break;
      #line 5124 
      case 3: 
              #line 5124 
      ;
      #line 5126 
      generic_file_llseek(emg_39_resource_0,emg_39_emg_param_1_26,emg_39_emg_param_2_27);
      #line 5128 
      break;
      #line 5130 
      case 4: 
              #line 5130 
      ;
      #line 5132 
      generic_file_llseek(emg_39_resource_0,emg_39_emg_param_1_24,emg_39_emg_param_2_25);
      #line 5134 
      break;
      #line 5136 
      case 5: 
              #line 5136 
      ;
      #line 5138 
      generic_file_llseek(emg_39_resource_0,emg_39_emg_param_1_22,emg_39_emg_param_2_23);
      #line 5140 
      break;
      #line 5142 
      case 6: 
              #line 5142 
      ;
      #line 5144 
      generic_file_llseek(emg_39_resource_0,emg_39_emg_param_1_20,emg_39_emg_param_2_21);
      #line 5146 
      break;
      #line 5148 
      case 7: 
              #line 5148 
      ;
      #line 5150 
      generic_file_llseek(emg_39_resource_0,emg_39_emg_param_1_18,emg_39_emg_param_2_19);
      #line 5152 
      break;
      #line 5154 
      case 8: 
              #line 5154 
      ;
      #line 5156 
      generic_file_llseek(emg_39_resource_0,emg_39_emg_param_1_16,emg_39_emg_param_2_17);
      #line 5158 
      break;
      #line 5160 
      case 9: 
              #line 5160 
      ;
      #line 5162 
      generic_file_llseek(emg_39_resource_0,emg_39_emg_param_1_14,emg_39_emg_param_2_15);
      #line 5164 
      break;
      #line 5166 
      case 10: 
               #line 5166 
      ;
      #line 5168 
      generic_file_llseek(emg_39_resource_0,emg_39_emg_param_1_12,emg_39_emg_param_2_13);
      #line 5170 
      break;
      #line 5172 
      case 11: 
               #line 5172 
      ;
      #line 5174 
      generic_file_llseek(emg_39_resource_0,emg_39_emg_param_1_10,emg_39_emg_param_2_11);
      #line 5176 
      break;
      #line 5178 
      case 12: 
               #line 5178 
      ;
      #line 5180 
      generic_file_llseek(emg_39_resource_0,emg_39_emg_param_1_8,emg_39_emg_param_2_9);
      #line 5182 
      break;
      #line 5184 
      case 13: 
               #line 5184 
      ;
      #line 5186 
      generic_file_llseek(emg_39_resource_0,emg_39_emg_param_1_6,emg_39_emg_param_2_7);
      #line 5188 
      break;
      #line 5190 
      case 14: 
               #line 5190 
      ;
      #line 5192 
      generic_file_llseek(emg_39_resource_0,emg_39_emg_param_1_4,emg_39_emg_param_2_5);
      #line 5194 
      break;
      #line 5196 
      case 15: 
               #line 5196 
      ;
      #line 5198 
      generic_file_llseek(emg_39_resource_0,emg_39_emg_param_1_2,emg_39_emg_param_2_3);
      #line 5200 
      break;
      #line 5202 
      case 16: 
               #line 5202 
      ;
      #line 5204 
      generic_file_llseek(emg_39_resource_0,emg_39_emg_param_1_0,emg_39_emg_param_2_1);
      #line 5206 
      break;
      #line 5208 
      case 17: 
               #line 5208 
      ;
      #line 5215 
      __VERIFIER_assume(emg_39_size_cnt <= 2147479552UL);
      #line 5216 
      emg_39_emg_param_1_34 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5216 
      emg_39_emg_param_1_34 = emg_39_emg_param_1_34;
      #line 5217 
      emg_39_emg_param_3_35 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5217 
      emg_39_emg_param_3_35 = emg_39_emg_param_3_35;
      #line 5221 
      emg_wrapper_lbs_wrmac_write(emg_39_resource_0,emg_39_emg_param_1_34,emg_39_size_cnt,emg_39_emg_param_3_35);
      #line 5225 
      ldv_free((void *)emg_39_emg_param_1_34);
      #line 5226 
      ldv_free((void *)emg_39_emg_param_3_35);
      #line 5228 
      break;
      #line 5230 
      default: 
               #line 5230 
      ;
      #line 5230 
      __VERIFIER_assume(0);
    }
    #line 5233 
    if (emg_repeat_cnt_call_39 > 0) {
      #line 5234 
      emg_repeat_cnt_call_39 --;
      #line 5236 
      goto emg_call_39;
    }
    else 
         #line 5238 
         __VERIFIER_assume(0);
  }
  else {
    #line 5244 
    if (emg_39_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 5245 
      (*(emg_39_container->release))(emg_39_resource_1,emg_39_resource_0);
    #line 5249 
    if (emg_repeat_cnt_main_39_1 > 0) {
      #line 5250 
      emg_repeat_cnt_main_39_1 --;
      #line 5252 
      goto emg_main_39;
    }
    else 
         #line 5254 
         __VERIFIER_assume(0);
  }
  #line 5260 
  return (void *)0;
  #line 5263 
  emg_main_39: 
               #line 5263 
  ;
  #line 5264 
  if (ldv_undef_int() != 0) {
    #line 5266 
    emg_39_ret = simple_open(emg_39_resource_1,emg_39_resource_0);
    #line 5271 
    emg_39_ret = ldv_filter_err_code(emg_39_ret);
    #line 5274 
    if (ldv_undef_int() != 0) {
      #line 5276 
      __VERIFIER_assume(emg_39_ret == 0);
      #line 5280 
      goto emg_call_39;
    }
    else {
      #line 5285 
      __VERIFIER_assume(emg_39_ret != 0);
      #line 5288 
      if (emg_repeat_cnt_main_39_0 > 0) {
        #line 5289 
        emg_repeat_cnt_main_39_0 --;
        #line 5291 
        goto emg_main_39;
      }
      else 
           #line 5293 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 5300 
       ldv_free((void *)emg_39_resource_0);
  #line 5308 
  return (void *)0;
}

#line 5313  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_24(void *arg0)
{
  #line 5316 
  struct file_operations *emg_40_container;
  #line 5317 
  long long emg_40_emg_param_1_0;
  #line 5318 
  long long emg_40_emg_param_1_10;
  #line 5319 
  long long emg_40_emg_param_1_12;
  #line 5320 
  long long emg_40_emg_param_1_14;
  #line 5321 
  long long emg_40_emg_param_1_16;
  #line 5322 
  long long emg_40_emg_param_1_18;
  #line 5323 
  long long emg_40_emg_param_1_2;
  #line 5324 
  long long emg_40_emg_param_1_20;
  #line 5325 
  long long emg_40_emg_param_1_22;
  #line 5326 
  long long emg_40_emg_param_1_24;
  #line 5327 
  long long emg_40_emg_param_1_26;
  #line 5328 
  long long emg_40_emg_param_1_28;
  #line 5329 
  long long emg_40_emg_param_1_30;
  #line 5330 
  char *emg_40_emg_param_1_32;
  #line 5331 
  char *emg_40_emg_param_1_34;
  #line 5332 
  long long emg_40_emg_param_1_4;
  #line 5333 
  long long emg_40_emg_param_1_6;
  #line 5334 
  long long emg_40_emg_param_1_8;
  #line 5335 
  int emg_40_emg_param_2_1;
  #line 5336 
  int emg_40_emg_param_2_11;
  #line 5337 
  int emg_40_emg_param_2_13;
  #line 5338 
  int emg_40_emg_param_2_15;
  #line 5339 
  int emg_40_emg_param_2_17;
  #line 5340 
  int emg_40_emg_param_2_19;
  #line 5341 
  int emg_40_emg_param_2_21;
  #line 5342 
  int emg_40_emg_param_2_23;
  #line 5343 
  int emg_40_emg_param_2_25;
  #line 5344 
  int emg_40_emg_param_2_27;
  #line 5345 
  int emg_40_emg_param_2_29;
  #line 5346 
  int emg_40_emg_param_2_3;
  #line 5347 
  int emg_40_emg_param_2_31;
  #line 5348 
  int emg_40_emg_param_2_5;
  #line 5349 
  int emg_40_emg_param_2_7;
  #line 5350 
  int emg_40_emg_param_2_9;
  #line 5351 
  long long *emg_40_emg_param_3_33;
  #line 5352 
  long long *emg_40_emg_param_3_35;
  #line 5353 
  struct file *emg_40_resource_0;
  #line 5354 
  struct inode *emg_40_resource_1;
  #line 5355 
  int emg_40_ret;
  #line 5356 
  unsigned long emg_40_size_cnt;
  #line 5357 
  int emg_repeat_cnt_call_40 = 1;
  #line 5358 
  int emg_repeat_cnt_main_40_0 = 1;
  #line 5359 
  int emg_repeat_cnt_main_40_1 = 1;
  #line 5361 
  struct emg_struct_character_driver_scenario_11_27 *data = (struct emg_struct_character_driver_scenario_11_27 *)arg0;
  #line 5365 
  emg_40_ret = ldv_undef_int();
  #line 5366 
  emg_40_container = emg_alias_lbs_debug_fops;
  #line 5367 
  emg_40_ret = ldv_undef_int();
  #line 5369 
  __VERIFIER_assume(data->arg0 == emg_alias_lbs_debug_fops);
  #line 5371 
  if (data != (struct emg_struct_character_driver_scenario_11_27 *)0) {
    #line 5372 
    emg_40_container = data->arg0;
    #line 5373 
    ldv_free((void *)data);
  }
  #line 5378 
  emg_40_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 5379 
  emg_40_size_cnt = (unsigned long)ldv_undef_int();
  #line 5383 
  goto emg_main_40;
  #line 5387 
  return (void *)0;
  #line 5390 
  emg_call_40: 
               #line 5390 
  ;
  #line 5391 
  if (ldv_undef_int() != 0) {
    #line 5392 
    switch (ldv_undef_int()) {
      #line 5393 
      case 0: 
              #line 5393 
      ;
      #line 5395 
      emg_40_emg_param_1_32 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5395 
      emg_40_emg_param_1_32 = emg_40_emg_param_1_32;
      #line 5396 
      emg_40_emg_param_3_33 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5396 
      emg_40_emg_param_3_33 = emg_40_emg_param_3_33;
      #line 5400 
      emg_wrapper_lbs_debugfs_read(emg_40_resource_0,emg_40_emg_param_1_32,emg_40_size_cnt,emg_40_emg_param_3_33);
      #line 5404 
      ldv_free((void *)emg_40_emg_param_1_32);
      #line 5405 
      ldv_free((void *)emg_40_emg_param_3_33);
      #line 5407 
      break;
      #line 5409 
      case 1: 
              #line 5409 
      ;
      #line 5411 
      default_llseek(emg_40_resource_0,emg_40_emg_param_1_30,emg_40_emg_param_2_31);
      #line 5413 
      break;
      #line 5415 
      case 2: 
              #line 5415 
      ;
      #line 5417 
      generic_file_llseek(emg_40_resource_0,emg_40_emg_param_1_28,emg_40_emg_param_2_29);
      #line 5419 
      break;
      #line 5421 
      case 3: 
              #line 5421 
      ;
      #line 5423 
      generic_file_llseek(emg_40_resource_0,emg_40_emg_param_1_26,emg_40_emg_param_2_27);
      #line 5425 
      break;
      #line 5427 
      case 4: 
              #line 5427 
      ;
      #line 5429 
      generic_file_llseek(emg_40_resource_0,emg_40_emg_param_1_24,emg_40_emg_param_2_25);
      #line 5431 
      break;
      #line 5433 
      case 5: 
              #line 5433 
      ;
      #line 5435 
      generic_file_llseek(emg_40_resource_0,emg_40_emg_param_1_22,emg_40_emg_param_2_23);
      #line 5437 
      break;
      #line 5439 
      case 6: 
              #line 5439 
      ;
      #line 5441 
      generic_file_llseek(emg_40_resource_0,emg_40_emg_param_1_20,emg_40_emg_param_2_21);
      #line 5443 
      break;
      #line 5445 
      case 7: 
              #line 5445 
      ;
      #line 5447 
      generic_file_llseek(emg_40_resource_0,emg_40_emg_param_1_18,emg_40_emg_param_2_19);
      #line 5449 
      break;
      #line 5451 
      case 8: 
              #line 5451 
      ;
      #line 5453 
      generic_file_llseek(emg_40_resource_0,emg_40_emg_param_1_16,emg_40_emg_param_2_17);
      #line 5455 
      break;
      #line 5457 
      case 9: 
              #line 5457 
      ;
      #line 5459 
      generic_file_llseek(emg_40_resource_0,emg_40_emg_param_1_14,emg_40_emg_param_2_15);
      #line 5461 
      break;
      #line 5463 
      case 10: 
               #line 5463 
      ;
      #line 5465 
      generic_file_llseek(emg_40_resource_0,emg_40_emg_param_1_12,emg_40_emg_param_2_13);
      #line 5467 
      break;
      #line 5469 
      case 11: 
               #line 5469 
      ;
      #line 5471 
      generic_file_llseek(emg_40_resource_0,emg_40_emg_param_1_10,emg_40_emg_param_2_11);
      #line 5473 
      break;
      #line 5475 
      case 12: 
               #line 5475 
      ;
      #line 5477 
      generic_file_llseek(emg_40_resource_0,emg_40_emg_param_1_8,emg_40_emg_param_2_9);
      #line 5479 
      break;
      #line 5481 
      case 13: 
               #line 5481 
      ;
      #line 5483 
      generic_file_llseek(emg_40_resource_0,emg_40_emg_param_1_6,emg_40_emg_param_2_7);
      #line 5485 
      break;
      #line 5487 
      case 14: 
               #line 5487 
      ;
      #line 5489 
      generic_file_llseek(emg_40_resource_0,emg_40_emg_param_1_4,emg_40_emg_param_2_5);
      #line 5491 
      break;
      #line 5493 
      case 15: 
               #line 5493 
      ;
      #line 5495 
      generic_file_llseek(emg_40_resource_0,emg_40_emg_param_1_2,emg_40_emg_param_2_3);
      #line 5497 
      break;
      #line 5499 
      case 16: 
               #line 5499 
      ;
      #line 5501 
      generic_file_llseek(emg_40_resource_0,emg_40_emg_param_1_0,emg_40_emg_param_2_1);
      #line 5503 
      break;
      #line 5505 
      case 17: 
               #line 5505 
      ;
      #line 5512 
      __VERIFIER_assume(emg_40_size_cnt <= 2147479552UL);
      #line 5513 
      emg_40_emg_param_1_34 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5513 
      emg_40_emg_param_1_34 = emg_40_emg_param_1_34;
      #line 5514 
      emg_40_emg_param_3_35 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5514 
      emg_40_emg_param_3_35 = emg_40_emg_param_3_35;
      #line 5518 
      emg_wrapper_write_file_dummy(emg_40_resource_0,emg_40_emg_param_1_34,emg_40_size_cnt,emg_40_emg_param_3_35);
      #line 5522 
      ldv_free((void *)emg_40_emg_param_1_34);
      #line 5523 
      ldv_free((void *)emg_40_emg_param_3_35);
      #line 5525 
      break;
      #line 5527 
      default: 
               #line 5527 
      ;
      #line 5527 
      __VERIFIER_assume(0);
    }
    #line 5530 
    if (emg_repeat_cnt_call_40 > 0) {
      #line 5531 
      emg_repeat_cnt_call_40 --;
      #line 5533 
      goto emg_call_40;
    }
    else 
         #line 5535 
         __VERIFIER_assume(0);
  }
  else {
    #line 5541 
    if (emg_40_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 5542 
      (*(emg_40_container->release))(emg_40_resource_1,emg_40_resource_0);
    #line 5546 
    if (emg_repeat_cnt_main_40_1 > 0) {
      #line 5547 
      emg_repeat_cnt_main_40_1 --;
      #line 5549 
      goto emg_main_40;
    }
    else 
         #line 5551 
         __VERIFIER_assume(0);
  }
  #line 5557 
  return (void *)0;
  #line 5560 
  emg_main_40: 
               #line 5560 
  ;
  #line 5561 
  if (ldv_undef_int() != 0) {
    #line 5563 
    emg_40_ret = simple_open(emg_40_resource_1,emg_40_resource_0);
    #line 5568 
    emg_40_ret = ldv_filter_err_code(emg_40_ret);
    #line 5571 
    if (ldv_undef_int() != 0) {
      #line 5573 
      __VERIFIER_assume(emg_40_ret == 0);
      #line 5577 
      goto emg_call_40;
    }
    else {
      #line 5582 
      __VERIFIER_assume(emg_40_ret != 0);
      #line 5585 
      if (emg_repeat_cnt_main_40_0 > 0) {
        #line 5586 
        emg_repeat_cnt_main_40_0 --;
        #line 5588 
        goto emg_main_40;
      }
      else 
           #line 5590 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 5597 
       ldv_free((void *)emg_40_resource_0);
  #line 5605 
  return (void *)0;
}

#line 5610  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_lbs_debug_fops(void *arg0)
{
  #line 5613 
  struct file_operations *emg_41_container;
  #line 5614 
  long long emg_41_emg_param_1_0;
  #line 5615 
  long long emg_41_emg_param_1_10;
  #line 5616 
  long long emg_41_emg_param_1_12;
  #line 5617 
  long long emg_41_emg_param_1_14;
  #line 5618 
  long long emg_41_emg_param_1_16;
  #line 5619 
  long long emg_41_emg_param_1_18;
  #line 5620 
  long long emg_41_emg_param_1_2;
  #line 5621 
  long long emg_41_emg_param_1_20;
  #line 5622 
  long long emg_41_emg_param_1_22;
  #line 5623 
  long long emg_41_emg_param_1_24;
  #line 5624 
  long long emg_41_emg_param_1_26;
  #line 5625 
  long long emg_41_emg_param_1_28;
  #line 5626 
  long long emg_41_emg_param_1_30;
  #line 5627 
  char *emg_41_emg_param_1_32;
  #line 5628 
  char *emg_41_emg_param_1_34;
  #line 5629 
  long long emg_41_emg_param_1_4;
  #line 5630 
  long long emg_41_emg_param_1_6;
  #line 5631 
  long long emg_41_emg_param_1_8;
  #line 5632 
  int emg_41_emg_param_2_1;
  #line 5633 
  int emg_41_emg_param_2_11;
  #line 5634 
  int emg_41_emg_param_2_13;
  #line 5635 
  int emg_41_emg_param_2_15;
  #line 5636 
  int emg_41_emg_param_2_17;
  #line 5637 
  int emg_41_emg_param_2_19;
  #line 5638 
  int emg_41_emg_param_2_21;
  #line 5639 
  int emg_41_emg_param_2_23;
  #line 5640 
  int emg_41_emg_param_2_25;
  #line 5641 
  int emg_41_emg_param_2_27;
  #line 5642 
  int emg_41_emg_param_2_29;
  #line 5643 
  int emg_41_emg_param_2_3;
  #line 5644 
  int emg_41_emg_param_2_31;
  #line 5645 
  int emg_41_emg_param_2_5;
  #line 5646 
  int emg_41_emg_param_2_7;
  #line 5647 
  int emg_41_emg_param_2_9;
  #line 5648 
  long long *emg_41_emg_param_3_33;
  #line 5649 
  long long *emg_41_emg_param_3_35;
  #line 5650 
  struct file *emg_41_resource_0;
  #line 5651 
  struct inode *emg_41_resource_1;
  #line 5652 
  int emg_41_ret;
  #line 5653 
  unsigned long emg_41_size_cnt;
  #line 5654 
  int emg_repeat_cnt_main_41_0 = 1;
  #line 5655 
  int emg_repeat_cnt_main_41_1 = 1;
  #line 5656 
  int emg_repeat_cnt_call_41 = 1;
  #line 5658 
  struct emg_struct_character_driver_scenario_11_27 *data = (struct emg_struct_character_driver_scenario_11_27 *)arg0;
  #line 5662 
  emg_41_ret = ldv_undef_int();
  #line 5663 
  emg_41_container = emg_alias_lbs_debug_fops;
  #line 5664 
  emg_41_ret = ldv_undef_int();
  #line 5666 
  __VERIFIER_assume(data->arg0 == emg_alias_lbs_debug_fops);
  #line 5668 
  if (data != (struct emg_struct_character_driver_scenario_11_27 *)0) {
    #line 5669 
    emg_41_container = data->arg0;
    #line 5670 
    ldv_free((void *)data);
  }
  #line 5675 
  emg_41_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 5676 
  emg_41_size_cnt = (unsigned long)ldv_undef_int();
  #line 5680 
  goto emg_main_41;
  #line 5684 
  return (void *)0;
  #line 5687 
  emg_call_41: 
               #line 5687 
  ;
  #line 5688 
  if (ldv_undef_int() != 0) {
    #line 5689 
    switch (ldv_undef_int()) {
      #line 5690 
      case 0: 
              #line 5690 
      ;
      #line 5692 
      emg_41_emg_param_1_32 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5692 
      emg_41_emg_param_1_32 = emg_41_emg_param_1_32;
      #line 5693 
      emg_41_emg_param_3_33 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5693 
      emg_41_emg_param_3_33 = emg_41_emg_param_3_33;
      #line 5697 
      emg_wrapper_lbs_debugfs_read(emg_41_resource_0,emg_41_emg_param_1_32,emg_41_size_cnt,emg_41_emg_param_3_33);
      #line 5701 
      ldv_free((void *)emg_41_emg_param_1_32);
      #line 5702 
      ldv_free((void *)emg_41_emg_param_3_33);
      #line 5704 
      break;
      #line 5706 
      case 1: 
              #line 5706 
      ;
      #line 5708 
      default_llseek(emg_41_resource_0,emg_41_emg_param_1_30,emg_41_emg_param_2_31);
      #line 5710 
      break;
      #line 5712 
      case 2: 
              #line 5712 
      ;
      #line 5714 
      generic_file_llseek(emg_41_resource_0,emg_41_emg_param_1_28,emg_41_emg_param_2_29);
      #line 5716 
      break;
      #line 5718 
      case 3: 
              #line 5718 
      ;
      #line 5720 
      generic_file_llseek(emg_41_resource_0,emg_41_emg_param_1_26,emg_41_emg_param_2_27);
      #line 5722 
      break;
      #line 5724 
      case 4: 
              #line 5724 
      ;
      #line 5726 
      generic_file_llseek(emg_41_resource_0,emg_41_emg_param_1_24,emg_41_emg_param_2_25);
      #line 5728 
      break;
      #line 5730 
      case 5: 
              #line 5730 
      ;
      #line 5732 
      generic_file_llseek(emg_41_resource_0,emg_41_emg_param_1_22,emg_41_emg_param_2_23);
      #line 5734 
      break;
      #line 5736 
      case 6: 
              #line 5736 
      ;
      #line 5738 
      generic_file_llseek(emg_41_resource_0,emg_41_emg_param_1_20,emg_41_emg_param_2_21);
      #line 5740 
      break;
      #line 5742 
      case 7: 
              #line 5742 
      ;
      #line 5744 
      generic_file_llseek(emg_41_resource_0,emg_41_emg_param_1_18,emg_41_emg_param_2_19);
      #line 5746 
      break;
      #line 5748 
      case 8: 
              #line 5748 
      ;
      #line 5750 
      generic_file_llseek(emg_41_resource_0,emg_41_emg_param_1_16,emg_41_emg_param_2_17);
      #line 5752 
      break;
      #line 5754 
      case 9: 
              #line 5754 
      ;
      #line 5756 
      generic_file_llseek(emg_41_resource_0,emg_41_emg_param_1_14,emg_41_emg_param_2_15);
      #line 5758 
      break;
      #line 5760 
      case 10: 
               #line 5760 
      ;
      #line 5762 
      generic_file_llseek(emg_41_resource_0,emg_41_emg_param_1_12,emg_41_emg_param_2_13);
      #line 5764 
      break;
      #line 5766 
      case 11: 
               #line 5766 
      ;
      #line 5768 
      generic_file_llseek(emg_41_resource_0,emg_41_emg_param_1_10,emg_41_emg_param_2_11);
      #line 5770 
      break;
      #line 5772 
      case 12: 
               #line 5772 
      ;
      #line 5774 
      generic_file_llseek(emg_41_resource_0,emg_41_emg_param_1_8,emg_41_emg_param_2_9);
      #line 5776 
      break;
      #line 5778 
      case 13: 
               #line 5778 
      ;
      #line 5780 
      generic_file_llseek(emg_41_resource_0,emg_41_emg_param_1_6,emg_41_emg_param_2_7);
      #line 5782 
      break;
      #line 5784 
      case 14: 
               #line 5784 
      ;
      #line 5786 
      generic_file_llseek(emg_41_resource_0,emg_41_emg_param_1_4,emg_41_emg_param_2_5);
      #line 5788 
      break;
      #line 5790 
      case 15: 
               #line 5790 
      ;
      #line 5792 
      generic_file_llseek(emg_41_resource_0,emg_41_emg_param_1_2,emg_41_emg_param_2_3);
      #line 5794 
      break;
      #line 5796 
      case 16: 
               #line 5796 
      ;
      #line 5798 
      generic_file_llseek(emg_41_resource_0,emg_41_emg_param_1_0,emg_41_emg_param_2_1);
      #line 5800 
      break;
      #line 5802 
      case 17: 
               #line 5802 
      ;
      #line 5809 
      __VERIFIER_assume(emg_41_size_cnt <= 2147479552UL);
      #line 5810 
      emg_41_emg_param_1_34 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5810 
      emg_41_emg_param_1_34 = emg_41_emg_param_1_34;
      #line 5811 
      emg_41_emg_param_3_35 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5811 
      emg_41_emg_param_3_35 = emg_41_emg_param_3_35;
      #line 5815 
      emg_wrapper_lbs_debugfs_write(emg_41_resource_0,emg_41_emg_param_1_34,emg_41_size_cnt,emg_41_emg_param_3_35);
      #line 5819 
      ldv_free((void *)emg_41_emg_param_1_34);
      #line 5820 
      ldv_free((void *)emg_41_emg_param_3_35);
      #line 5822 
      break;
      #line 5824 
      default: 
               #line 5824 
      ;
      #line 5824 
      __VERIFIER_assume(0);
    }
    #line 5827 
    if (emg_repeat_cnt_call_41 > 0) {
      #line 5828 
      emg_repeat_cnt_call_41 --;
      #line 5830 
      goto emg_call_41;
    }
    else 
         #line 5832 
         __VERIFIER_assume(0);
  }
  else {
    #line 5838 
    if (emg_41_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 5839 
      (*(emg_41_container->release))(emg_41_resource_1,emg_41_resource_0);
    #line 5843 
    if (emg_repeat_cnt_main_41_1 > 0) {
      #line 5844 
      emg_repeat_cnt_main_41_1 --;
      #line 5846 
      goto emg_main_41;
    }
    else 
         #line 5848 
         __VERIFIER_assume(0);
  }
  #line 5854 
  return (void *)0;
  #line 5857 
  emg_main_41: 
               #line 5857 
  ;
  #line 5858 
  if (ldv_undef_int() != 0) {
    #line 5860 
    emg_41_ret = simple_open(emg_41_resource_1,emg_41_resource_0);
    #line 5865 
    emg_41_ret = ldv_filter_err_code(emg_41_ret);
    #line 5868 
    if (ldv_undef_int() != 0) {
      #line 5870 
      __VERIFIER_assume(emg_41_ret == 0);
      #line 5874 
      goto emg_call_41;
    }
    else {
      #line 5879 
      __VERIFIER_assume(emg_41_ret != 0);
      #line 5882 
      if (emg_repeat_cnt_main_41_0 > 0) {
        #line 5883 
        emg_repeat_cnt_main_41_0 --;
        #line 5885 
        goto emg_main_41;
      }
      else 
           #line 5887 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 5894 
       ldv_free((void *)emg_41_resource_0);
  #line 5902 
  return (void *)0;
}

#line 5907  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_lbs_set_mac_address(void *arg0)
{
  #line 5910 
  struct net_device *emg_42_container;
  #line 5911 
  struct sk_buff *emg_42_emg_param_0_1;
  #line 5912 
  struct sk_buff *emg_42_emg_param_0_12;
  #line 5913 
  void *emg_42_emg_param_1_0;
  #line 5914 
  struct ethtool_wolinfo *emg_42_emg_param_1_10;
  #line 5915 
  void *emg_42_emg_param_1_11;
  #line 5916 
  struct ethtool_wolinfo *emg_42_emg_param_1_13;
  #line 5917 
  struct ethtool_drvinfo *emg_42_emg_param_1_2;
  #line 5918 
  struct ethtool_eeprom *emg_42_emg_param_1_3;
  #line 5919 
  struct ethtool_stats *emg_42_emg_param_1_5;
  #line 5920 
  int emg_42_emg_param_1_7;
  #line 5921 
  unsigned int emg_42_emg_param_1_8;
  #line 5922 
  unsigned char *emg_42_emg_param_2_4;
  #line 5923 
  unsigned long long *emg_42_emg_param_2_6;
  #line 5924 
  unsigned char *emg_42_emg_param_2_9;
  #line 5925 
  int emg_repeat_cnt_call_42 = 1;
  #line 5927 
  struct emg_struct_random_allocationless_scenario_lbs_set_mac_address_42 *data = (struct emg_struct_random_allocationless_scenario_lbs_set_mac_address_42 *)arg0;
  #line 5932 
  if (data != (struct emg_struct_random_allocationless_scenario_lbs_set_mac_address_42 *)0) {
    #line 5933 
    emg_42_container = data->arg0;
    #line 5934 
    ldv_free((void *)data);
  }
  #line 5939 
  goto emg_call_42;
  #line 5943 
  return (void *)0;
  #line 5946 
  emg_call_42: 
               #line 5946 
  ;
  #line 5947 
  switch (ldv_undef_int()) {
    #line 5948 
    case 0: 
            #line 5948 
    ;
    #line 5950 
    emg_42_emg_param_1_13 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 5950 
    emg_42_emg_param_1_13 = emg_42_emg_param_1_13;
    #line 5954 
    emg_wrapper_lbs_ethtool_set_wol(emg_42_container,emg_42_emg_param_1_13);
    #line 5958 
    ldv_free((void *)emg_42_emg_param_1_13);
    #line 5960 
    break;
    #line 5962 
    case 1: 
            #line 5962 
    ;
    #line 5964 
    eth_validate_addr(emg_42_container);
    #line 5966 
    break;
    #line 5968 
    case 2: 
            #line 5968 
    ;
    #line 5970 
    emg_42_emg_param_0_12 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 5970 
    emg_42_emg_param_0_12 = emg_42_emg_param_0_12;
    #line 5974 
    lbs_hard_start_xmit(emg_42_emg_param_0_12,emg_42_container);
    #line 5978 
    ldv_free((void *)emg_42_emg_param_0_12);
    #line 5980 
    break;
    #line 5982 
    case 3: 
            #line 5982 
    ;
    #line 5984 
    emg_wrapper_lbs_set_multicast_list(emg_42_container);
    #line 5986 
    break;
    #line 5988 
    case 4: 
            #line 5988 
    ;
    #line 5990 
    emg_42_emg_param_1_11 = ldv_xmalloc_unknown_size(0UL);
    #line 5990 
    emg_42_emg_param_1_11 = emg_42_emg_param_1_11;
    #line 5994 
    lbs_set_mac_address(emg_42_container,emg_42_emg_param_1_11);
    #line 5998 
    ldv_free(emg_42_emg_param_1_11);
    #line 6000 
    break;
    #line 6002 
    case 5: 
            #line 6002 
    ;
    #line 6004 
    emg_42_emg_param_1_10 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 6004 
    emg_42_emg_param_1_10 = emg_42_emg_param_1_10;
    #line 6008 
    emg_wrapper_lbs_ethtool_get_wol(emg_42_container,emg_42_emg_param_1_10);
    #line 6012 
    ldv_free((void *)emg_42_emg_param_1_10);
    #line 6014 
    break;
    #line 6016 
    case 6: 
            #line 6016 
    ;
    #line 6018 
    emg_42_emg_param_2_9 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 6018 
    emg_42_emg_param_2_9 = emg_42_emg_param_2_9;
    #line 6022 
    lbs_mesh_ethtool_get_strings(emg_42_container,emg_42_emg_param_1_8,emg_42_emg_param_2_9);
    #line 6026 
    ldv_free((void *)emg_42_emg_param_2_9);
    #line 6028 
    break;
    #line 6030 
    case 7: 
            #line 6030 
    ;
    #line 6032 
    lbs_mesh_ethtool_get_sset_count(emg_42_container,emg_42_emg_param_1_7);
    #line 6034 
    break;
    #line 6036 
    case 8: 
            #line 6036 
    ;
    #line 6038 
    emg_42_emg_param_1_5 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 6038 
    emg_42_emg_param_1_5 = emg_42_emg_param_1_5;
    #line 6039 
    emg_42_emg_param_2_6 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 6039 
    emg_42_emg_param_2_6 = emg_42_emg_param_2_6;
    #line 6043 
    lbs_mesh_ethtool_get_stats(emg_42_container,emg_42_emg_param_1_5,emg_42_emg_param_2_6);
    #line 6047 
    ldv_free((void *)emg_42_emg_param_1_5);
    #line 6048 
    ldv_free((void *)emg_42_emg_param_2_6);
    #line 6050 
    break;
    #line 6052 
    case 9: 
            #line 6052 
    ;
    #line 6054 
    emg_wrapper_lbs_ethtool_get_eeprom_len(emg_42_container);
    #line 6056 
    break;
    #line 6058 
    case 10: 
             #line 6058 
    ;
    #line 6060 
    emg_42_emg_param_1_3 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 6060 
    emg_42_emg_param_1_3 = emg_42_emg_param_1_3;
    #line 6061 
    emg_42_emg_param_2_4 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 6061 
    emg_42_emg_param_2_4 = emg_42_emg_param_2_4;
    #line 6065 
    emg_wrapper_lbs_ethtool_get_eeprom(emg_42_container,emg_42_emg_param_1_3,emg_42_emg_param_2_4);
    #line 6069 
    ldv_free((void *)emg_42_emg_param_1_3);
    #line 6070 
    ldv_free((void *)emg_42_emg_param_2_4);
    #line 6072 
    break;
    #line 6074 
    case 11: 
             #line 6074 
    ;
    #line 6076 
    emg_42_emg_param_1_2 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 6076 
    emg_42_emg_param_1_2 = emg_42_emg_param_1_2;
    #line 6080 
    emg_wrapper_lbs_ethtool_get_drvinfo(emg_42_container,emg_42_emg_param_1_2);
    #line 6084 
    ldv_free((void *)emg_42_emg_param_1_2);
    #line 6086 
    break;
    #line 6088 
    case 12: 
             #line 6088 
    ;
    #line 6090 
    emg_42_emg_param_0_1 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 6090 
    emg_42_emg_param_0_1 = emg_42_emg_param_0_1;
    #line 6094 
    lbs_hard_start_xmit(emg_42_emg_param_0_1,emg_42_container);
    #line 6098 
    ldv_free((void *)emg_42_emg_param_0_1);
    #line 6100 
    break;
    #line 6102 
    case 13: 
             #line 6102 
    ;
    #line 6104 
    emg_wrapper_lbs_set_multicast_list(emg_42_container);
    #line 6106 
    break;
    #line 6108 
    case 14: 
             #line 6108 
    ;
    #line 6110 
    emg_42_emg_param_1_0 = ldv_xmalloc_unknown_size(0UL);
    #line 6110 
    emg_42_emg_param_1_0 = emg_42_emg_param_1_0;
    #line 6114 
    lbs_set_mac_address(emg_42_container,emg_42_emg_param_1_0);
    #line 6118 
    ldv_free(emg_42_emg_param_1_0);
    #line 6121 
    if (emg_repeat_cnt_call_42 > 0) {
      #line 6122 
      emg_repeat_cnt_call_42 --;
      #line 6124 
      goto emg_call_42;
    }
    else 
         #line 6126 
         __VERIFIER_assume(0);
    #line 6130 
    break;
    #line 6132 
    case 15: 
             #line 6132 
    ;
    #line 6136 
    break;
    #line 6138 
    default: 
             #line 6138 
    ;
    #line 6138 
    __VERIFIER_assume(0);
  }
  #line 6141 
  return (void *)0;
}

#line 6146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_26(void *arg0)
{
  #line 6149 
  struct timer_list *emg_43_container;
  #line 6150 
  unsigned long emg_43_emg_param_0_0;
  #line 6152 
  struct emg_struct_timer_scenario_26_43 *data = (struct emg_struct_timer_scenario_26_43 *)arg0;
  #line 6157 
  if (data != (struct emg_struct_timer_scenario_26_43 *)0) {
    #line 6158 
    emg_43_container = data->arg0;
    #line 6159 
    ldv_free((void *)data);
  }
  #line 6165 
  ldv_switch_to_interrupt_context();
  #line 6169 
  if (emg_43_container->function != (void (*)(struct timer_list *))0) 
    #line 6170 
    (*(emg_43_container->function))((struct timer_list *)emg_43_emg_param_0_0);
  #line 6176 
  ldv_switch_to_process_context();
  #line 6183 
  return (void *)0;
}

#line 6188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_netdev_mqs(int arg0, char *arg1, unsigned char arg2, void (*arg3)(struct net_device *), unsigned int arg4, unsigned int arg5)
{
  #line 6191 
  struct net_device *emg_2_netdev;
  #line 6192 
  void (*emg_2_setup)(struct net_device *);
  #line 6194 
  emg_2_setup = & emg_wrapper_ether_setup;
  #line 6195 
  if (ldv_undef_int() != 0) {
    #line 6197 
    emg_2_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 6198 
    emg_2_setup = arg3;
    #line 6202 
    emg_wrapper_ether_setup(emg_2_netdev);
    #line 6206 
    return emg_2_netdev;
  }
  else 
       #line 6210 
       return (struct net_device *)0;
}

#line 6218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1)
{
  #line 6221 
  struct dentry *emg_3_dentry;
  #line 6222 
  struct inode *emg_3_inode;
  #line 6224 
  if (ldv_undef_int() != 0) {
    #line 6226 
    emg_3_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 6227 
    emg_3_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 6228 
    emg_3_inode->i_mode = (unsigned short)16877U;
    #line 6229 
    emg_3_dentry->d_parent = arg1;
    #line 6230 
    emg_3_dentry->d_inode = emg_3_inode;
    #line 6231 
    return emg_3_dentry;
  }
  else {
    #line 6235 
    return (struct dentry *)ERR_PTR_2(-19L);
  }
}

#line 6243  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  #line 6246 
  struct dentry *emg_4_dentry;
  #line 6247 
  struct file_operations *emg_4_file_operations;
  #line 6248 
  struct inode *emg_4_inode;
  #line 6250 
  emg_4_file_operations = emg_alias_lbs_debug_fops;
  #line 6251 
  if (ldv_undef_int() != 0) {
    #line 6253 
    emg_4_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 6254 
    emg_4_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 6255 
    emg_4_inode->i_mode = arg1;
    #line 6256 
    emg_4_dentry->d_parent = arg2;
    #line 6257 
    emg_4_inode->i_private = arg3;
    #line 6258 
    emg_4_file_operations = arg4;
    #line 6259 
    emg_4_dentry->d_inode = emg_4_inode;
    #line 6260 
    ldv_save_allocated_memory_to_list((void *)emg_4_dentry);
    #line 6264 
    emg_dispatch_register_4(emg_4_file_operations);
    #line 6268 
    return emg_4_dentry;
  }
  else {
    #line 6272 
    return (struct dentry *)ERR_PTR_2(-19L);
  }
}

#line 6280  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void emg_debugfs_remove(struct dentry *arg0)
{
  #line 6283 
  struct dentry *emg_5_dentry;
  #line 6284 
  struct file_operations *emg_5_file_operations;
  #line 6285 
  struct inode *emg_5_inode;
  #line 6287 
  emg_5_file_operations = emg_alias_lbs_debug_fops;
  #line 6289 
  emg_5_dentry = arg0;
  #line 6292 
  if (ldv_undef_int() != 0) {
    #line 6294 
    int tmp_0;
    #line 6294 
    if (IS_ERR_OR_NULL((void *)emg_5_dentry)) 
                                              #line 6294 
                                              tmp_0 = 0; else 
                                                              #line 6294 
                                                              tmp_0 = 1;
    #line 6294 
    __VERIFIER_assume(tmp_0);
    #line 6295 
    emg_5_inode = emg_5_dentry->d_inode;
    #line 6296 
    ldv_free((void *)emg_5_inode);
    #line 6297 
    ldv_free((void *)emg_5_dentry);
    #line 6301 
    emg_dispatch_deregister_5(emg_5_file_operations);
  }
  else {
    #line 6305 
    __VERIFIER_assume((int)IS_ERR_OR_NULL((void *)emg_5_dentry));
  }
  #line 6309 
  return;
}

#line 6314  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer(struct timer_list *arg0)
{
  #line 6317 
  struct timer_list *emg_6_timer_list;
  #line 6320 
  emg_6_timer_list = arg0;
  #line 6324 
  emg_dispatch_instance_deregister_6(emg_6_timer_list);
  #line 6325 
  ;
  #line 6325 
  return 0;
}

#line 6331  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 6334 
  struct timer_list *emg_7_timer_list;
  #line 6337 
  emg_7_timer_list = arg0;
  #line 6341 
  emg_dispatch_instance_deregister_7(emg_7_timer_list);
  #line 6342 
  ;
  #line 6342 
  return 0;
}

#line 6348  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
int emg_device_create_file(struct device *arg0, struct device_attribute *arg1)
{
  #line 6351 
  struct device_attribute *emg_8_devattr;
  #line 6352 
  struct device *emg_8_device;
  #line 6354 
  if (ldv_undef_int() != 0) {
    #line 6356 
    emg_8_device = arg0;
    #line 6357 
    emg_8_devattr = arg1;
    #line 6361 
    emg_dispatch_register_8(emg_8_device,emg_8_devattr);
    #line 6365 
    return 0;
  }
  else {
    #line 6369 
    return ldv_undef_int_negative();
  }
}

#line 6377  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void emg_device_remove_file(struct device *arg0, struct device_attribute *arg1)
{
  #line 6380 
  struct device_attribute *emg_9_devattr;
  #line 6381 
  struct device *emg_9_device;
  #line 6384 
  emg_9_device = arg0;
  #line 6385 
  emg_9_devattr = arg1;
  #line 6389 
  emg_dispatch_deregister_9(emg_9_device,emg_9_devattr);
  #line 6392 
  return;
}

#line 6397  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 6400 
  struct net_device *emg_10_netdev;
  #line 6403 
  emg_10_netdev = arg0;
  #line 6404 
  ldv_free((void *)emg_10_netdev);
  #line 6407 
  return;
}

#line 6412  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
struct task_struct *emg_kthread_create_on_node(int (*arg0)(void *), void *arg1, int arg2, char *arg3 , ...)
{
  #line 6415 
  void *emg_11_data;
  #line 6416 
  void *emg_11_ptr;
  #line 6417 
  int (*emg_11_threadfn)(void *);
  #line 6419 
  emg_11_threadfn = & emg_wrapper_lbs_thread;
  #line 6421 
  emg_11_data = arg1;
  #line 6422 
  emg_11_threadfn = arg0;
  #line 6426 
  emg_wrapper_lbs_thread(emg_11_data);
  #line 6430 
  emg_11_ptr = ldv_undef_ptr();
  #line 6431 
  __VERIFIER_assume((int)ldv_is_err(emg_11_ptr));
  #line 6432 
  return (struct task_struct *)emg_11_ptr;
}

#line 6439  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 6442 
  struct timer_list *emg_12_timer_list;
  #line 6444 
  if (ldv_undef_int() != 0) {
    #line 6446 
    emg_12_timer_list = arg0;
    #line 6450 
    emg_dispatch_instance_register_12(emg_12_timer_list);
    #line 6454 
    return 1;
  }
  else 
       #line 6458 
       return 0;
}

#line 6466  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2)
{
  #line 6469 
  struct delayed_work *emg_13_delayed_work;
  #line 6470 
  struct work_struct *emg_13_emg_param_0_0;
  #line 6472 
  if (ldv_undef_int() != 0) {
    #line 6474 
    emg_13_delayed_work = arg1;
    #line 6478 
    emg_13_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 6478 
    emg_13_emg_param_0_0 = emg_13_emg_param_0_0;
    #line 6482 
    if (emg_13_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 6483 
      (*(emg_13_delayed_work->work.func))(emg_13_emg_param_0_0);
    #line 6488 
    ldv_free((void *)emg_13_emg_param_0_0);
    #line 6492 
    return (_Bool)1;
  }
  else 
       #line 6496 
       return (_Bool)0;
}

#line 6504  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 6507 
  struct net_device *emg_14_netdev;
  #line 6508 
  int emg_14_ret;
  #line 6511 
  emg_14_ret = ldv_undef_int();
  #line 6512 
  emg_14_ret = ldv_undef_int();
  #line 6513 
  if (ldv_undef_int() != 0) {
    #line 6515 
    emg_14_netdev = arg0;
    #line 6519 
    emg_14_ret = emg_wrapper_lbs_dev_open(emg_14_netdev);
    #line 6522 
    if (ldv_undef_int() != 0) {
      #line 6524 
      __VERIFIER_assume(emg_14_ret == 0);
      #line 6528 
      emg_dispatch_register_14(emg_14_netdev);
      #line 6532 
      return 0;
    }
    else {
      #line 6536 
      __VERIFIER_assume(emg_14_ret != 0);
      #line 6537 
      ldv_failed_register_netdev();
      #line 6538 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 6543 
    ldv_failed_register_netdev();
    #line 6544 
    return ldv_undef_int_negative();
  }
}

#line 6552  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 6555 
  struct work_struct *emg_15_work_struct;
  #line 6557 
  if (ldv_undef_int() != 0) {
    #line 6559 
    emg_15_work_struct = arg0;
    #line 6563 
    if (emg_15_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 6564 
      (*(emg_15_work_struct->func))(emg_15_work_struct);
    #line 6569 
    return (_Bool)1;
  }
  else 
       #line 6573 
       return (_Bool)0;
}

#line 6581  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 6584 
  struct net_device *emg_16_netdev;
  #line 6587 
  emg_16_netdev = arg0;
  #line 6591 
  emg_wrapper_lbs_eth_stop(emg_16_netdev);
  #line 6595 
  emg_dispatch_deregister_16(emg_16_netdev);
  #line 6598 
  return;
}

#line 6603  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 6606 
  int emg_1_ret;
  #line 6609 
  emg_1_ret = emg_lbs_init_module();
  #line 6610 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 6613 
  if (ldv_undef_int() != 0) {
    #line 6615 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 6619 
    emg_lbs_exit_module();
  }
  else 
       #line 6623 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 6627 
  return (void *)0;
}

#line 6632  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/marvell/libertas/libertas.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 6634 
  ldv_initialize();
  #line 6636 
  emg_entry_point_insmod((void *)0);
  #line 6638 
  return 0;
}

