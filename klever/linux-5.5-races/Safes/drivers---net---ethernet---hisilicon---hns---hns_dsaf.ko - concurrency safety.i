/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_rcb.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 40 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_114 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_114 seqlock_t;
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_nodemask_t_115 {
   unsigned long bits[16U] ;
};
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_nodemask_t_115 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_126 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_127 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_125 {
   struct __anonstruct_126 __anonCompField___anonunion_125_28 ;
   struct __anonstruct_127 __anonCompField___anonunion_125_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_125 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_128 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_128 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_130 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_131 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct list_head slab_list ;
   struct __anonstruct_134 __anonCompField___anonunion_133_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_136 __anonCompField___anonunion_135_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   union __anonunion_133 __anonCompField___anonstruct_132_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_135 __anonCompField___anonstruct_132_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_140 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_140 __anonCompField___anonstruct_139_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_31 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_32 ;
   struct __anonstruct_132 __anonCompField___anonunion_129_37 ;
   struct __anonstruct_137 __anonCompField___anonunion_129_38 ;
   struct __anonstruct_138 __anonCompField___anonunion_129_39 ;
   struct __anonstruct_139 __anonCompField___anonunion_129_41 ;
   struct __anonstruct_141 __anonCompField___anonunion_129_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_129 __anonCompField_page_43 ;
   union __anonunion_142 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_143 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_143 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_144 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_144 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/apic.h"
struct irq_data;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/arch_topology.h"
struct device_node;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_248 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_248 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_249 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_249 kgid_t;
#line 140 
struct dentry;
#line 141 
struct iattr;
#line 142 
struct super_block;
#line 144 
struct fs_context;
#line 146 
struct kernfs_open_node;
#line 147 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_250 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_250 __anonCompField_kernfs_node_49 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 51 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_291 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_291 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_292 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_293 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_294 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_295 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_298 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_299 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_297 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_298 _addr_bnd ;
   struct __anonstruct__addr_pkey_299 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_296 {
   void *_addr ;
   union __anonunion_297 __anonCompField___anonstruct__sigfault_296_50 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_300 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_301 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_292 _kill ;
   struct __anonstruct__timer_293 _timer ;
   struct __anonstruct__rt_294 _rt ;
   struct __anonstruct__sigchld_295 _sigchld ;
   struct __anonstruct__sigfault_296 _sigfault ;
   struct __anonstruct__sigpoll_300 _sigpoll ;
   struct __anonstruct__sigsys_301 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_306 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_306 __anonCompField_kernel_siginfo_53 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_311 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_311 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_313 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_313 __anonCompField_task_struct_55 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct pdev_archdata {
   };
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct irq_domain;
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_321 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_320 {
   struct __anonstruct_321 __anonCompField___anonunion_320_56 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_320 __anonCompField_ctl_table_header_57 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_326 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_326 __anonCompField_kernel_param_58 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct exception_table_entry;
#line 45 
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103 
struct percpu_ref;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_410 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_412 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_411 {
   unsigned long nr_segs ;
   struct __anonstruct_412 __anonCompField___anonunion_411_60 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_410 __anonCompField_iov_iter_59 ;
   union __anonunion_411 __anonCompField_iov_iter_61 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 
struct kiocb;
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_415 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_415 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_416 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_416 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_417 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_417 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_418 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_418 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_419 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_419 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_420 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_420 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_421 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_421 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_422 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_422 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_423 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_424 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_423 ifr_ifrn ;
   union __anonunion_ifr_ifru_424 ifr_ifru ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_439 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_438 {
   struct __anonstruct_439 __anonCompField___anonunion_438_64 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_438 __anonCompField_lockref_65 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_441 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_440 {
   struct __anonstruct_441 __anonCompField___anonunion_440_66 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_440 __anonCompField_qstr_67 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_442 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_443 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_442 __anonCompField_dentry_68 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_443 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_451 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_451 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_452 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_453 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_452 __anonCompField_io_cq_69 ;
   union __anonunion_453 __anonCompField_io_cq_70 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bdi_writeback;
#line 288 
struct export_operations;
#line 290 
struct kstatfs;
#line 291 
struct swap_info_struct;
#line 292 
struct fscrypt_info;
#line 293 
struct fscrypt_operations;
#line 294 
struct fsverity_info;
#line 295 
struct fsverity_operations;
#line 296 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_454 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_454 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_455 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_455 __anonCompField_kqid_71 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
struct writeback_control;
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_460 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_461 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_462 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_463 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_460 __anonCompField_inode_72 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_461 __anonCompField_inode_73 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_462 __anonCompField_inode_74 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_463 __anonCompField_inode_75 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_464 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_464 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_466 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_465 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_466 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_465 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqnr.h"
struct irq_desc;
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct sk_buff;
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_510 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_510 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_511 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_511 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_533 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_532 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_533 __anonCompField___anonstruct_532_89 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_531 {
   struct __anonstruct_532 __anonCompField___anonunion_531_90 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_534 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_535 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_537 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_536 {
   struct __anonstruct_537 __anonCompField___anonunion_536_94 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_539 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_538 {
   __wsum csum ;
   struct __anonstruct_539 __anonCompField___anonunion_538_96 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_540 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_541 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_542 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_531 __anonCompField_sk_buff_91 ;
   union __anonunion_534 __anonCompField_sk_buff_92 ;
   union __anonunion_535 __anonCompField_sk_buff_93 ;
   char cb[48U] ;
   union __anonunion_536 __anonCompField_sk_buff_95 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_538 __anonCompField_sk_buff_97 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_540 __anonCompField_sk_buff_98 ;
   __u32 secmark ;
   union __anonunion_541 __anonCompField_sk_buff_99 ;
   union __anonunion_542 __anonCompField_sk_buff_100 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_568 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_568 __anonCompField_ethtool_rxnfc_102 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_571 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_571 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 422 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_572 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_572 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_573 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_573 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_574 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_574 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_575 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_575 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_577 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_577 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_590 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_589 {
   struct __anonstruct_590 __anonCompField___anonunion_589_103 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_589 __anonCompField_keyring_index_key_104 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_591 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_592 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_594 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_593 {
   struct keyring_index_key index_key ;
   struct __anonstruct_594 __anonCompField___anonunion_593_107 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_596 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_595 {
   union key_payload payload ;
   struct __anonstruct_596 __anonCompField___anonunion_595_109 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_591 __anonCompField_key_105 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_592 __anonCompField_key_106 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_593 __anonCompField_key_108 ;
   union __anonunion_595 __anonCompField_key_110 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_599 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_599 __anonCompField_cred_111 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_600 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_600 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_602 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_601 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_602 __anonCompField___anonunion_601_112 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_601 __anonCompField_uid_gid_map_113 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 139 
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int , void *) ;
   void *dev_id ;
   void *percpu_dev_id ;
   struct irqaction *next ;
   irqreturn_t (*thread_fn)(int , void *) ;
   struct task_struct *thread ;
   struct irqaction *secondary ;
   unsigned int irq ;
   unsigned int flags ;
   unsigned long thread_flags ;
   unsigned long thread_mask ;
   char *name ;
   struct proc_dir_entry *dir ;
} __attribute__((__aligned__(4096)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irq_affinity_notify {
   unsigned int irq ;
   struct kref kref ;
   struct work_struct work ;
   void (*notify)(struct irq_affinity_notify *, cpumask_t *) ;
   void (*release)(struct kref *) ;
};
#line 472 
enum irqchip_irq_state {
    IRQCHIP_STATE_PENDING = 0,
    IRQCHIP_STATE_ACTIVE = 1,
    IRQCHIP_STATE_MASKED = 2,
    IRQCHIP_STATE_LINE_LEVEL = 3
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_604 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_606 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_605 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_606 __anonCompField___anonstruct_605_116 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_607 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_608 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_609 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_610 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_612 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_611 {
   union __anonunion_612 __anonCompField___anonstruct_611_121 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_613 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_614 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_615 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_616 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_617 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_604 __anonCompField_bpf_attr_115 ;
   struct __anonstruct_605 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_607 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_608 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_609 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_test_610 test ;
   struct __anonstruct_611 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_info_613 info ;
   struct __anonstruct_query_614 query ;
   struct __anonstruct_raw_tracepoint_615 raw_tracepoint ;
   struct __anonstruct_616 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_task_fd_query_617 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/file.h"
struct bpf_prog_aux;
#line 96 
struct bpf_map;
#line 97 
struct btf;
#line 98 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_644 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_644 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_646 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_645 {
   struct __anonstruct_tail_call_646 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_645 __anonCompField_bpf_jit_poke_descriptor_148 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_647 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_647 __anonCompField_bpf_prog_aux_149 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_649 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_649 __anonCompField_bpf_cgroup_storage_151 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_674 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_674 __anonCompField_netlink_callback_154 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_679 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_680 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_681 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_682 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_678 {
   struct __anonstruct_679 __anonCompField___anonunion_678_156 ;
   struct __anonstruct_680 __anonCompField___anonunion_678_157 ;
   struct __anonstruct_681 __anonCompField___anonunion_678_158 ;
   struct __anonstruct_xsk_682 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_678 __anonCompField_netdev_bpf_159 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14745 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14746 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_683 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_684 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_683 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14745 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14746 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_684 __anonCompField_net_device_160 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cacheflush.h"
struct mfd_cell;
#line 12 
struct platform_device_id;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_device {
   char *name ;
   int id ;
   bool id_auto ;
   struct device dev ;
   u64 dma_mask ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id *id_entry ;
   char *driver_override ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
typedef unsigned long kernel_ulong_t;
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irq_regs.h"
struct msi_msg;
#line 63 
struct msi_desc;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_common_data {
   unsigned int state_use_accessors ;
   unsigned int node ;
   void *handler_data ;
   struct msi_desc *msi_desc ;
   cpumask_var_t affinity ;
   cpumask_var_t effective_affinity ;
};
#line 173 
struct irq_chip;
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_data {
   u32 mask ;
   unsigned int irq ;
   unsigned long hwirq ;
   struct irq_common_data *common ;
   struct irq_chip *chip ;
   struct irq_domain *domain ;
   struct irq_data *parent_data ;
   void *chip_data ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip {
   struct device *parent_device ;
   char *name ;
   unsigned int (*irq_startup)(struct irq_data *) ;
   void (*irq_shutdown)(struct irq_data *) ;
   void (*irq_enable)(struct irq_data *) ;
   void (*irq_disable)(struct irq_data *) ;
   void (*irq_ack)(struct irq_data *) ;
   void (*irq_mask)(struct irq_data *) ;
   void (*irq_mask_ack)(struct irq_data *) ;
   void (*irq_unmask)(struct irq_data *) ;
   void (*irq_eoi)(struct irq_data *) ;
   int (*irq_set_affinity)(struct irq_data *, struct cpumask *, bool ) ;
   int (*irq_retrigger)(struct irq_data *) ;
   int (*irq_set_type)(struct irq_data *, unsigned int ) ;
   int (*irq_set_wake)(struct irq_data *, unsigned int ) ;
   void (*irq_bus_lock)(struct irq_data *) ;
   void (*irq_bus_sync_unlock)(struct irq_data *) ;
   void (*irq_cpu_online)(struct irq_data *) ;
   void (*irq_cpu_offline)(struct irq_data *) ;
   void (*irq_suspend)(struct irq_data *) ;
   void (*irq_resume)(struct irq_data *) ;
   void (*irq_pm_shutdown)(struct irq_data *) ;
   void (*irq_calc_mask)(struct irq_data *) ;
   void (*irq_print_chip)(struct irq_data *, struct seq_file *) ;
   int (*irq_request_resources)(struct irq_data *) ;
   void (*irq_release_resources)(struct irq_data *) ;
   void (*irq_compose_msi_msg)(struct irq_data *, struct msi_msg *) ;
   void (*irq_write_msi_msg)(struct irq_data *, struct msi_msg *) ;
   int (*irq_get_irqchip_state)(struct irq_data *, enum irqchip_irq_state , bool *) ;
   int (*irq_set_irqchip_state)(struct irq_data *, enum irqchip_irq_state , bool ) ;
   int (*irq_set_vcpu_affinity)(struct irq_data *, void *) ;
   void (*ipi_send_single)(struct irq_data *, unsigned int ) ;
   void (*ipi_send_mask)(struct irq_data *, struct cpumask *) ;
   int (*irq_nmi_setup)(struct irq_data *) ;
   void (*irq_nmi_teardown)(struct irq_data *) ;
   unsigned long flags ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdesc.h"
struct irq_desc {
   struct irq_common_data irq_common_data ;
   struct irq_data irq_data ;
   unsigned int *kstat_irqs ;
   void (*handle_irq)(struct irq_desc *) ;
   struct irqaction *action ;
   unsigned int status_use_accessors ;
   unsigned int core_internal_state__do_not_mess_with_it ;
   unsigned int depth ;
   unsigned int wake_depth ;
   unsigned int tot_count ;
   unsigned int irq_count ;
   unsigned long last_unhandled ;
   unsigned int irqs_unhandled ;
   atomic_t threads_handled ;
   int threads_handled_last ;
   raw_spinlock_t lock ;
   struct cpumask *percpu_enabled ;
   struct cpumask *percpu_affinity ;
   struct cpumask *affinity_hint ;
   struct irq_affinity_notify *affinity_notify ;
   cpumask_var_t pending_mask ;
   unsigned long threads_oneshot ;
   atomic_t threads_active ;
   wait_queue_head_t wait_for_threads ;
   unsigned int nr_actions ;
   unsigned int no_suspend_depth ;
   unsigned int cond_suspend_depth ;
   unsigned int force_resume_depth ;
   struct proc_dir_entry *dir ;
   struct dentry *debugfs_file ;
   char *dev_name ;
   struct callback_head rcu ;
   struct kobject kobj ;
   struct mutex request_mutex ;
   int parent_irq ;
   struct module *owner ;
   char *name ;
} __attribute__((__aligned__(4096)));
#line 930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip_regs {
   unsigned long enable ;
   unsigned long disable ;
   unsigned long mask ;
   unsigned long ack ;
   unsigned long eoi ;
   unsigned long type ;
   unsigned long polarity ;
};
#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip_type {
   struct irq_chip chip ;
   struct irq_chip_regs regs ;
   void (*handler)(struct irq_desc *) ;
   u32 type ;
   u32 mask_cache_priv ;
   u32 *mask_cache ;
};
#line 995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip_generic {
   raw_spinlock_t lock ;
   void *reg_base ;
   u32 (*reg_readl)(void *) ;
   void (*reg_writel)(u32 , void *) ;
   void (*suspend)(struct irq_chip_generic *) ;
   void (*resume)(struct irq_chip_generic *) ;
   unsigned int irq_base ;
   unsigned int irq_cnt ;
   u32 mask_cache ;
   u32 type_cache ;
   u32 polarity_cache ;
   u32 wake_enabled ;
   u32 wake_active ;
   unsigned int num_ct ;
   void *private ;
   unsigned long installed ;
   unsigned long unused ;
   struct irq_domain *domain ;
   struct list_head list ;
   struct irq_chip_type chip_types[0U] ;
};
#line 1017 
enum irq_gc_flags {
    IRQ_GC_INIT_MASK_CACHE = 1,
    IRQ_GC_INIT_NESTED_LOCK = 2,
    IRQ_GC_MASK_CACHE_PER_TYPE = 4,
    IRQ_GC_NO_MASK = 8,
    IRQ_GC_BE_IO = 16
};
#line 1045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_domain_chip_generic {
   unsigned int irqs_per_chip ;
   unsigned int num_chips ;
   unsigned int irq_flags_to_clear ;
   unsigned int irq_flags_to_set ;
   enum irq_gc_flags gc_flags ;
   struct irq_chip_generic *gc[0U] ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mdio.h"
struct gpio_desc;
#line 327 
struct mii_bus;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct reset_control;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_device {
   struct device dev ;
   struct mii_bus *bus ;
   char modalias[32U] ;
   int (*bus_match)(struct device *, struct device_driver *) ;
   void (*device_free)(struct mdio_device *) ;
   void (*device_remove)(struct mdio_device *) ;
   int addr ;
   int flags ;
   struct gpio_desc *reset_gpio ;
   struct reset_control *reset_ctrl ;
   unsigned int reset_assert_delay ;
   unsigned int reset_deassert_delay ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_driver_common {
   struct device_driver driver ;
   int flags ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
enum ldv_17256 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_INTERNAL = 1,
    PHY_INTERFACE_MODE_MII = 2,
    PHY_INTERFACE_MODE_GMII = 3,
    PHY_INTERFACE_MODE_SGMII = 4,
    PHY_INTERFACE_MODE_TBI = 5,
    PHY_INTERFACE_MODE_REVMII = 6,
    PHY_INTERFACE_MODE_RMII = 7,
    PHY_INTERFACE_MODE_RGMII = 8,
    PHY_INTERFACE_MODE_RGMII_ID = 9,
    PHY_INTERFACE_MODE_RGMII_RXID = 10,
    PHY_INTERFACE_MODE_RGMII_TXID = 11,
    PHY_INTERFACE_MODE_RTBI = 12,
    PHY_INTERFACE_MODE_SMII = 13,
    PHY_INTERFACE_MODE_XGMII = 14,
    PHY_INTERFACE_MODE_MOCA = 15,
    PHY_INTERFACE_MODE_QSGMII = 16,
    PHY_INTERFACE_MODE_TRGMII = 17,
    PHY_INTERFACE_MODE_1000BASEX = 18,
    PHY_INTERFACE_MODE_2500BASEX = 19,
    PHY_INTERFACE_MODE_RXAUI = 20,
    PHY_INTERFACE_MODE_XAUI = 21,
    PHY_INTERFACE_MODE_10GKR = 22,
    PHY_INTERFACE_MODE_USXGMII = 23,
    PHY_INTERFACE_MODE_MAX = 24
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
typedef enum ldv_17256 phy_interface_t;
#line 186 
struct phylink;
#line 188 
enum ldv_17271 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct mii_bus {
   struct module *owner ;
   char *name ;
   char id[61U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_17271 state ;
   struct device dev ;
   struct mdio_device *mdio_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int irq[32U] ;
   int reset_delay_us ;
   struct gpio_desc *reset_gpiod ;
};
#line 278 
enum phy_state {
    PHY_DOWN = 0,
    PHY_READY = 1,
    PHY_HALTED = 2,
    PHY_UP = 3,
    PHY_RUNNING = 4,
    PHY_NOLINK = 5
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};
#line 363 
struct phy_driver;
#line 363 
struct phy_led_trigger;
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_device {
   struct mdio_device mdio ;
   struct phy_driver *drv ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   unsigned int is_c45 : 1 ;
   unsigned int is_internal : 1 ;
   unsigned int is_pseudo_fixed_link : 1 ;
   unsigned int is_gigabit_capable : 1 ;
   unsigned int has_fixups : 1 ;
   unsigned int suspended : 1 ;
   unsigned int sysfs_links : 1 ;
   unsigned int loopback_enabled : 1 ;
   unsigned int autoneg : 1 ;
   unsigned int link : 1 ;
   unsigned int autoneg_complete : 1 ;
   unsigned int interrupts : 1 ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
   unsigned long adv_old[2U] ;
   u32 eee_broken_modes ;
   struct phy_led_trigger *phy_led_triggers ;
   unsigned int phy_num_led_triggers ;
   struct phy_led_trigger *last_triggered ;
   struct phy_led_trigger *led_link_trigger ;
   int irq ;
   void *priv ;
   struct delayed_work state_queue ;
   struct mutex lock ;
   bool sfp_bus_attached ;
   struct sfp_bus *sfp_bus ;
   struct phylink *phylink ;
   struct net_device *attached_dev ;
   u8 mdix ;
   u8 mdix_ctrl ;
   void (*phy_link_change)(struct phy_device *, bool , bool ) ;
   void (*adjust_link)(struct net_device *) ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_driver {
   struct mdio_driver_common mdiodrv ;
   u32 phy_id ;
   char *name ;
   u32 phy_id_mask ;
   unsigned long *features ;
   u32 flags ;
   void *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*get_features)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   int (*handle_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd)(struct phy_device *, int , u16 ) ;
   int (*write_mmd)(struct phy_device *, int , u16 , u16 ) ;
   int (*read_page)(struct phy_device *) ;
   int (*write_page)(struct phy_device *, int ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_sset_count)(struct phy_device *) ;
   void (*get_strings)(struct phy_device *, u8 *) ;
   void (*get_stats)(struct phy_device *, struct ethtool_stats *, u64 *) ;
   int (*get_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_loopback)(struct phy_device *, bool ) ;
};
#line 1313 
enum hnae_led_state {
    HNAE_LED_INACTIVE = 0,
    HNAE_LED_ACTIVE = 1,
    HNAE_LED_ON = 2,
    HNAE_LED_OFF = 3
};
#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
union __anonunion_717 {
   __le16 asid_bufnum_pid ;
   __le16 asid ;
};
#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
struct __anonstruct_719 {
   __u8 bn_pid ;
   __u8 ra_ri_cs_fe_vld ;
   __u8 ip_offset ;
   __u8 tse_vlan_snap_v6_sctp_nth ;
};
#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
union __anonunion_718 {
   __le32 flag_ipoffset ;
   struct __anonstruct_719 __anonCompField___anonunion_718_171 ;
};
#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
struct __anonstruct_tx_716 {
   union __anonunion_717 __anonCompField___anonstruct_tx_716_170 ;
   __le16 send_size ;
   union __anonunion_718 __anonCompField___anonstruct_tx_716_172 ;
   __le16 mss ;
   __u8 l4_len ;
   __u8 reserved1 ;
   __le16 paylen ;
   __u8 vmid ;
   __u8 qid ;
   __le32 reserved2[2U] ;
};
#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
struct __anonstruct_722 {
   __le16 asid ;
   __le16 vlan_cfi_pri ;
};
#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
union __anonunion_721 {
   __le32 vlan_pri_asid ;
   struct __anonstruct_722 __anonCompField___anonunion_721_173 ;
};
#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
struct __anonstruct_rx_720 {
   __le32 ipoff_bnum_pid_flag ;
   __le16 pkt_len ;
   __le16 size ;
   union __anonunion_721 __anonCompField___anonstruct_rx_720_174 ;
   __le32 rss_hash ;
   __le32 reserved_1[2U] ;
};
#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
union __anonunion_715 {
   struct __anonstruct_tx_716 tx ;
   struct __anonstruct_rx_720 rx ;
};
#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
struct hnae_desc {
   __le64 addr ;
   union __anonunion_715 __anonCompField_hnae_desc_175 ;
} __attribute__((__packed__));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
struct hnae_desc_cb {
   dma_addr_t dma ;
   void *buf ;
   void *priv ;
   u32 page_offset ;
   u32 length ;
   u16 reuse_flag ;
   u16 type ;
};
#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
struct __anonstruct_724 {
   u64 tx_pkts ;
   u64 tx_bytes ;
   u64 tx_err_cnt ;
   u64 restart_queue ;
   u64 tx_busy ;
};
#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
struct __anonstruct_725 {
   u64 rx_pkts ;
   u64 rx_bytes ;
   u64 rx_err_cnt ;
   u64 reuse_pg_cnt ;
   u64 err_pkt_len ;
   u64 non_vld_descs ;
   u64 err_bd_num ;
   u64 l2_err ;
   u64 l3l4_csum_err ;
};
#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
union __anonunion_723 {
   struct __anonstruct_724 __anonCompField___anonunion_723_176 ;
   struct __anonstruct_725 __anonCompField___anonunion_723_177 ;
};
#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
struct ring_stats {
   u64 io_err_cnt ;
   u64 sw_err_cnt ;
   u64 seg_pkt_cnt ;
   union __anonunion_723 __anonCompField_ring_stats_178 ;
};
#line 263 
struct hnae_queue;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
struct hnae_ring {
   u8 *io_base ;
   struct hnae_desc *desc ;
   struct hnae_desc_cb *desc_cb ;
   struct hnae_queue *q ;
   int irq ;
   char ring_name[20U] ;
   struct ring_stats stats ;
   dma_addr_t desc_dma_addr ;
   u32 buf_size ;
   u16 desc_num ;
   u16 max_desc_num_per_pkt ;
   u16 max_raw_data_sz_per_desc ;
   u16 max_pkt_size ;
   int next_to_use ;
   int next_to_clean ;
   int flags ;
   int irq_init_flag ;
   u64 coal_last_rx_bytes ;
   unsigned long coal_last_jiffies ;
   u32 coal_param ;
   u32 coal_rx_rate ;
};
#line 337 
struct hnae_handle;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
struct hnae_buf_ops {
   int (*alloc_buffer)(struct hnae_ring *, struct hnae_desc_cb *) ;
   void (*free_buffer)(struct hnae_ring *, struct hnae_desc_cb *) ;
   int (*map_buffer)(struct hnae_ring *, struct hnae_desc_cb *) ;
   void (*unmap_buffer)(struct hnae_ring *, struct hnae_desc_cb *) ;
};
#line 352 
struct hnae_ae_dev;
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
struct hnae_queue {
   u8 *io_base ;
   phys_addr_t phy_base ;
   struct hnae_ae_dev *dev ;
   struct hnae_ring rx_ring ;
   struct hnae_ring tx_ring ;
   struct hnae_handle *handle ;
};
#line 360 
enum hnae_loop {
    MAC_INTERNALLOOP_MAC = 0,
    MAC_INTERNALLOOP_SERDES = 1,
    MAC_INTERNALLOOP_PHY = 2,
    MAC_LOOP_PHY_NONE = 3,
    MAC_LOOP_NONE = 4
};
#line 368 
enum hnae_port_type {
    HNAE_PORT_SERVICE = 0,
    HNAE_PORT_DEBUG = 1
};
#line 373 
enum hnae_media_type {
    HNAE_MEDIA_TYPE_UNKNOWN = 0,
    HNAE_MEDIA_TYPE_FIBER = 1,
    HNAE_MEDIA_TYPE_COPPER = 2,
    HNAE_MEDIA_TYPE_BACKPLANE = 3
};
#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
struct hnae_ae_ops {
   struct hnae_handle *(*get_handle)(struct hnae_ae_dev *, u32 ) ;
   void (*put_handle)(struct hnae_handle *) ;
   void (*init_queue)(struct hnae_queue *) ;
   void (*fini_queue)(struct hnae_queue *) ;
   int (*start)(struct hnae_handle *) ;
   void (*stop)(struct hnae_handle *) ;
   void (*reset)(struct hnae_handle *) ;
   int (*set_opts)(struct hnae_handle *, int , void *) ;
   int (*get_opts)(struct hnae_handle *, int , void **) ;
   int (*get_status)(struct hnae_handle *) ;
   int (*get_info)(struct hnae_handle *, u8 *, u16 *, u8 *) ;
   void (*toggle_ring_irq)(struct hnae_ring *, u32 ) ;
   void (*adjust_link)(struct hnae_handle *, int , int ) ;
   bool (*need_adjust_link)(struct hnae_handle *, int , int ) ;
   int (*set_loopback)(struct hnae_handle *, enum hnae_loop , int ) ;
   void (*get_ring_bdnum_limit)(struct hnae_queue *, u32 *) ;
   void (*get_pauseparam)(struct hnae_handle *, u32 *, u32 *, u32 *) ;
   int (*set_autoneg)(struct hnae_handle *, u8 ) ;
   int (*get_autoneg)(struct hnae_handle *) ;
   int (*set_pauseparam)(struct hnae_handle *, u32 , u32 , u32 ) ;
   void (*get_coalesce_usecs)(struct hnae_handle *, u32 *, u32 *) ;
   void (*get_max_coalesced_frames)(struct hnae_handle *, u32 *, u32 *) ;
   int (*set_coalesce_usecs)(struct hnae_handle *, u32 ) ;
   int (*set_coalesce_frames)(struct hnae_handle *, u32 , u32 ) ;
   void (*get_coalesce_range)(struct hnae_handle *, u32 *, u32 *, u32 *, u32 *, u32 *, u32 *, u32 *, u32 *) ;
   void (*set_promisc_mode)(struct hnae_handle *, u32 ) ;
   int (*get_mac_addr)(struct hnae_handle *, void **) ;
   int (*set_mac_addr)(struct hnae_handle *, void *) ;
   int (*add_uc_addr)(struct hnae_handle *, unsigned char *) ;
   int (*rm_uc_addr)(struct hnae_handle *, unsigned char *) ;
   int (*clr_mc_addr)(struct hnae_handle *) ;
   int (*set_mc_addr)(struct hnae_handle *, void *) ;
   int (*set_mtu)(struct hnae_handle *, int ) ;
   void (*set_tso_stats)(struct hnae_handle *, int ) ;
   void (*update_stats)(struct hnae_handle *, struct net_device_stats *) ;
   void (*get_stats)(struct hnae_handle *, u64 *) ;
   void (*get_strings)(struct hnae_handle *, u32 , u8 *) ;
   int (*get_sset_count)(struct hnae_handle *, int ) ;
   void (*update_led_status)(struct hnae_handle *) ;
   int (*set_led_id)(struct hnae_handle *, enum hnae_led_state ) ;
   void (*get_regs)(struct hnae_handle *, void *) ;
   int (*get_regs_len)(struct hnae_handle *) ;
   u32 (*get_rss_key_size)(struct hnae_handle *) ;
   u32 (*get_rss_indir_size)(struct hnae_handle *) ;
   int (*get_rss)(struct hnae_handle *, u32 *, u8 *, u8 *) ;
   int (*set_rss)(struct hnae_handle *, u32 *, u8 *, u8 ) ;
};
#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
struct hnae_ae_dev {
   struct device cls_dev ;
   struct device *dev ;
   struct hnae_ae_ops *ops ;
   struct list_head node ;
   struct module *owner ;
   int id ;
   char name[16U] ;
   struct list_head handle_list ;
   spinlock_t lock ;
};
#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
struct hnae_handle {
   struct device *owner_dev ;
   struct hnae_ae_dev *dev ;
   struct phy_device *phy_dev ;
   phy_interface_t phy_if ;
   u32 if_support ;
   int q_num ;
   int vf_id ;
   unsigned long coal_last_jiffies ;
   u32 coal_param ;
   u32 coal_ring_idx ;
   u32 eport_id ;
   u32 dport_id ;
   bool coal_adapt_en ;
   enum hnae_port_type port_type ;
   enum hnae_media_type media_type ;
   struct list_head node ;
   struct hnae_buf_ops *bops ;
   struct hnae_queue **qs ;
};
#line 702 
struct regmap;
#line 747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct dsaf_device;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.h"
struct mac_priv {
   void *mac ;
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.h"
struct mac_entry_idx {
   u8 addr[6U] ;
   u16 vlan_id : 12 ;
   u16 valid : 1 ;
   u16 qos : 3 ;
};
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.h"
struct mac_hw_stats {
   u64 rx_good_pkts ;
   u64 rx_good_bytes ;
   u64 rx_total_pkts ;
   u64 rx_total_bytes ;
   u64 rx_bad_bytes ;
   u64 rx_uc_pkts ;
   u64 rx_mc_pkts ;
   u64 rx_bc_pkts ;
   u64 rx_fragment_err ;
   u64 rx_undersize ;
   u64 rx_under_min ;
   u64 rx_minto64 ;
   u64 rx_64bytes ;
   u64 rx_65to127 ;
   u64 rx_128to255 ;
   u64 rx_256to511 ;
   u64 rx_512to1023 ;
   u64 rx_1024to1518 ;
   u64 rx_1519tomax ;
   u64 rx_1519tomax_good ;
   u64 rx_oversize ;
   u64 rx_jabber_err ;
   u64 rx_fcs_err ;
   u64 rx_vlan_pkts ;
   u64 rx_data_err ;
   u64 rx_align_err ;
   u64 rx_long_err ;
   u64 rx_pfc_tc0 ;
   u64 rx_pfc_tc1 ;
   u64 rx_pfc_tc2 ;
   u64 rx_pfc_tc3 ;
   u64 rx_pfc_tc4 ;
   u64 rx_pfc_tc5 ;
   u64 rx_pfc_tc6 ;
   u64 rx_pfc_tc7 ;
   u64 rx_unknown_ctrl ;
   u64 rx_filter_pkts ;
   u64 rx_filter_bytes ;
   u64 rx_fifo_overrun_err ;
   u64 rx_len_err ;
   u64 rx_comma_err ;
   u64 rx_symbol_err ;
   u64 tx_good_to_sw ;
   u64 tx_bad_to_sw ;
   u64 rx_1731_pkts ;
   u64 tx_good_bytes ;
   u64 tx_good_pkts ;
   u64 tx_total_bytes ;
   u64 tx_total_pkts ;
   u64 tx_bad_bytes ;
   u64 tx_bad_pkts ;
   u64 tx_uc_pkts ;
   u64 tx_mc_pkts ;
   u64 tx_bc_pkts ;
   u64 tx_undersize ;
   u64 tx_fragment_err ;
   u64 tx_under_min_pkts ;
   u64 tx_64bytes ;
   u64 tx_65to127 ;
   u64 tx_128to255 ;
   u64 tx_256to511 ;
   u64 tx_512to1023 ;
   u64 tx_1024to1518 ;
   u64 tx_1519tomax ;
   u64 tx_1519tomax_good ;
   u64 tx_oversize ;
   u64 tx_jabber_err ;
   u64 tx_underrun_err ;
   u64 tx_vlan ;
   u64 tx_crc_err ;
   u64 tx_pfc_tc0 ;
   u64 tx_pfc_tc1 ;
   u64 tx_pfc_tc2 ;
   u64 tx_pfc_tc3 ;
   u64 tx_pfc_tc4 ;
   u64 tx_pfc_tc5 ;
   u64 tx_pfc_tc6 ;
   u64 tx_pfc_tc7 ;
   u64 tx_ctrl ;
   u64 tx_1731_pkts ;
   u64 tx_1588_pkts ;
   u64 rx_good_from_sw ;
   u64 rx_bad_from_sw ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.h"
struct hns_mac_cb {
   struct device *dev ;
   struct dsaf_device *dsaf_dev ;
   struct mac_priv priv ;
   struct fwnode_handle *fw_port ;
   u8 *vaddr ;
   u8 *sys_ctl_vaddr ;
   u8 *serdes_vaddr ;
   struct regmap *serdes_ctrl ;
   struct regmap *cpld_ctrl ;
   char mc_mask[6U] ;
   u32 cpld_ctrl_reg ;
   u32 port_rst_off ;
   u32 port_mode_off ;
   struct mac_entry_idx addr_entry_idx[128U] ;
   u8 sfp_prsnt ;
   u8 cpld_led_value ;
   u8 mac_id ;
   u8 link ;
   u8 half_duplex ;
   u16 speed ;
   u16 max_speed ;
   u16 max_frm ;
   u16 tx_pause_frm_time ;
   u32 if_support ;
   u64 txpkt_for_led ;
   u64 rxpkt_for_led ;
   enum hnae_port_type mac_type ;
   enum hnae_media_type media_type ;
   phy_interface_t phy_if ;
   enum hnae_loop loop_mode ;
   struct phy_device *phy_dev ;
   struct mac_hw_stats hw_stats ;
};
#line 493 
enum hal_dsaf_mode {
    HRD_DSAF_NO_DSAF_MODE = 0,
    HRD_DSAF_MODE = 1
};
#line 498 
enum hal_dsaf_tc_mode {
    HRD_DSAF_4TC_MODE = 0,
    HRD_DSAF_8TC_MODE = 1
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
enum dsaf_mode {
    DSAF_MODE_INVALID = 0,
    DSAF_MODE_ENABLE_FIX = 1,
    DSAF_MODE_ENABLE_0VM = 2,
    DSAF_MODE_ENABLE_8VM = 3,
    DSAF_MODE_ENABLE_16VM = 4,
    DSAF_MODE_ENABLE_32VM = 5,
    DSAF_MODE_ENABLE_128VM = 6,
    DSAF_MODE_ENABLE = 7,
    DSAF_MODE_DISABLE_SP = 8,
    DSAF_MODE_DISABLE_FIX = 9,
    DSAF_MODE_DISABLE_2PORT_8VM = 10,
    DSAF_MODE_DISABLE_2PORT_16VM = 11,
    DSAF_MODE_DISABLE_2PORT_64VM = 12,
    DSAF_MODE_DISABLE_6PORT_0VM = 13,
    DSAF_MODE_DISABLE_6PORT_2VM = 14,
    DSAF_MODE_DISABLE_6PORT_4VM = 15,
    DSAF_MODE_DISABLE_6PORT_16VM = 16,
    DSAF_MODE_MAX = 17
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct dsaf_hw_stats {
   u64 pad_drop ;
   u64 man_pkts ;
   u64 rx_pkts ;
   u64 rx_pkt_id ;
   u64 rx_pause_frame ;
   u64 release_buf_num ;
   u64 sbm_drop ;
   u64 crc_false ;
   u64 bp_drop ;
   u64 rslt_drop ;
   u64 local_addr_false ;
   u64 vlan_drop ;
   u64 stp_drop ;
   u64 rx_pfc[8U] ;
   u64 tx_pfc[8U] ;
   u64 tx_pkts ;
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct hnae_vf_cb {
   u8 port_index ;
   struct hns_mac_cb *mac_cb ;
   struct dsaf_device *dsaf_dev ;
   struct hnae_handle ae_handle ;
};
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct dsaf_int_xge_src {
   u32 xid_xge_ecc_err_int_src ;
   u32 xid_xge_fsm_timout_int_src ;
   u32 sbm_xge_lnk_fsm_timout_int_src ;
   u32 sbm_xge_lnk_ecc_2bit_int_src ;
   u32 sbm_xge_mib_req_failed_int_src ;
   u32 sbm_xge_mib_req_fsm_timout_int_src ;
   u32 sbm_xge_mib_rels_fsm_timout_int_src ;
   u32 sbm_xge_sram_ecc_2bit_int_src ;
   u32 sbm_xge_mib_buf_sum_err_int_src ;
   u32 sbm_xge_mib_req_extra_int_src ;
   u32 sbm_xge_mib_rels_extra_int_src ;
   u32 voq_xge_start_to_over_0_int_src ;
   u32 voq_xge_start_to_over_1_int_src ;
   u32 voq_xge_ecc_err_int_src ;
};
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct dsaf_int_ppe_src {
   u32 xid_ppe_fsm_timout_int_src ;
   u32 sbm_ppe_lnk_fsm_timout_int_src ;
   u32 sbm_ppe_lnk_ecc_2bit_int_src ;
   u32 sbm_ppe_mib_req_failed_int_src ;
   u32 sbm_ppe_mib_req_fsm_timout_int_src ;
   u32 sbm_ppe_mib_rels_fsm_timout_int_src ;
   u32 sbm_ppe_sram_ecc_2bit_int_src ;
   u32 sbm_ppe_mib_buf_sum_err_int_src ;
   u32 sbm_ppe_mib_req_extra_int_src ;
   u32 sbm_ppe_mib_rels_extra_int_src ;
   u32 voq_ppe_start_to_over_0_int_src ;
   u32 voq_ppe_ecc_err_int_src ;
   u32 xod_ppe_fifo_rd_empty_int_src ;
   u32 xod_ppe_fifo_wr_full_int_src ;
};
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct dsaf_int_rocee_src {
   u32 xid_rocee_fsm_timout_int_src ;
   u32 sbm_rocee_lnk_fsm_timout_int_src ;
   u32 sbm_rocee_lnk_ecc_2bit_int_src ;
   u32 sbm_rocee_mib_req_failed_int_src ;
   u32 sbm_rocee_mib_req_fsm_timout_int_src ;
   u32 sbm_rocee_mib_rels_fsm_timout_int_src ;
   u32 sbm_rocee_sram_ecc_2bit_int_src ;
   u32 sbm_rocee_mib_buf_sum_err_int_src ;
   u32 sbm_rocee_mib_req_extra_int_src ;
   u32 sbm_rocee_mib_rels_extra_int_src ;
   u32 voq_rocee_start_to_over_0_int_src ;
   u32 voq_rocee_ecc_err_int_src ;
};
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct dsaf_int_tbl_src {
   u32 tbl_da0_mis_src ;
   u32 tbl_da1_mis_src ;
   u32 tbl_da2_mis_src ;
   u32 tbl_da3_mis_src ;
   u32 tbl_da4_mis_src ;
   u32 tbl_da5_mis_src ;
   u32 tbl_da6_mis_src ;
   u32 tbl_da7_mis_src ;
   u32 tbl_sa_mis_src ;
   u32 tbl_old_sech_end_src ;
   u32 lram_ecc_err1_src ;
   u32 lram_ecc_err2_src ;
   u32 tram_ecc_err1_src ;
   u32 tram_ecc_err2_src ;
   u32 tbl_ucast_bcast_xge0_src ;
   u32 tbl_ucast_bcast_xge1_src ;
   u32 tbl_ucast_bcast_xge2_src ;
   u32 tbl_ucast_bcast_xge3_src ;
   u32 tbl_ucast_bcast_xge4_src ;
   u32 tbl_ucast_bcast_xge5_src ;
   u32 tbl_ucast_bcast_ppe_src ;
   u32 tbl_ucast_bcast_rocee_src ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct dsaf_int_stat {
   struct dsaf_int_xge_src dsaf_int_xge_stat[6U] ;
   struct dsaf_int_ppe_src dsaf_int_ppe_stat[6U] ;
   struct dsaf_int_rocee_src dsaf_int_rocee_stat[6U] ;
   struct dsaf_int_tbl_src dsaf_int_tbl_stat[1U] ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct dsaf_misc_op {
   void (*cpld_set_led)(struct hns_mac_cb *, int , u16 , int ) ;
   void (*cpld_reset_led)(struct hns_mac_cb *) ;
   int (*cpld_set_led_id)(struct hns_mac_cb *, enum hnae_led_state ) ;
   void (*dsaf_reset)(struct dsaf_device *, bool ) ;
   void (*xge_srst)(struct dsaf_device *, u32 , bool ) ;
   void (*ge_srst)(struct dsaf_device *, u32 , bool ) ;
   void (*ppe_srst)(struct dsaf_device *, u32 , bool ) ;
   void (*ppe_comm_srst)(struct dsaf_device *, bool ) ;
   void (*hns_dsaf_srst_chns)(struct dsaf_device *, u32 , bool ) ;
   void (*hns_dsaf_roce_srst)(struct dsaf_device *, bool ) ;
   phy_interface_t (*get_phy_if)(struct hns_mac_cb *) ;
   int (*get_sfp_prsnt)(struct hns_mac_cb *, int *) ;
   int (*cfg_serdes_loopback)(struct hns_mac_cb *, bool ) ;
};
#line 321 
struct ppe_common_cb;
#line 321 
struct rcb_common_cb;
#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct dsaf_device {
   struct device *dev ;
   struct hnae_ae_dev ae_dev ;
   u8 *sc_base ;
   u8 *sds_base ;
   u8 *ppe_base ;
   u8 *io_base ;
   struct regmap *sub_ctrl ;
   phys_addr_t ppe_paddr ;
   u32 desc_num ;
   u32 buf_size ;
   u32 reset_offset ;
   int buf_size_type ;
   enum dsaf_mode dsaf_mode ;
   enum hal_dsaf_mode dsaf_en ;
   enum hal_dsaf_tc_mode dsaf_tc_mode ;
   u32 dsaf_ver ;
   u16 tcam_max_num ;
   struct ppe_common_cb *ppe_common[1U] ;
   struct rcb_common_cb *rcb_common[1U] ;
   struct hns_mac_cb *mac_cb[6U] ;
   struct dsaf_misc_op *misc_op ;
   struct dsaf_hw_stats hw_stats[18U] ;
   struct dsaf_int_stat int_stat ;
   spinlock_t tcam_lock ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
struct hns_ring_hw_stats {
   u64 tx_pkts ;
   u64 ppe_tx_ok_pkts ;
   u64 ppe_tx_drop_pkts ;
   u64 rx_pkts ;
   u64 ppe_rx_ok_pkts ;
   u64 ppe_rx_drop_pkts ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
struct ring_pair_cb {
   struct rcb_common_cb *rcb_common ;
   struct device *dev ;
   struct hnae_queue q ;
   u16 index ;
   u16 buf_size ;
   int virq[2U] ;
   u8 port_id_in_comm ;
   u8 used_by_vf ;
   struct hns_ring_hw_stats hw_stats ;
};
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
struct rcb_common_cb {
   u8 *io_base ;
   phys_addr_t phy_base ;
   struct dsaf_device *dsaf_dev ;
   u16 max_vfn ;
   u16 max_q_per_vf ;
   u8 comm_index ;
   u32 ring_num ;
   u32 desc_num ;
   struct ring_pair_cb ring_pair_cb[0U] ;
};
#line 183 
enum ppe_common_mode {
    PPE_COMMON_MODE_DEBUG = 0,
    PPE_COMMON_MODE_SERVICE = 1,
    PPE_COMMON_MODE_MAX = 2
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.h"
struct hns_ppe_hw_stats {
   u64 rx_pkts_from_sw ;
   u64 rx_pkts ;
   u64 rx_drop_no_bd ;
   u64 rx_alloc_buf_fail ;
   u64 rx_alloc_buf_wait ;
   u64 rx_drop_no_buf ;
   u64 rx_err_fifo_full ;
   u64 tx_bd_form_rcb ;
   u64 tx_pkts_from_rcb ;
   u64 tx_pkts ;
   u64 tx_err_fifo_empty ;
   u64 tx_err_checksum ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.h"
struct hns_ppe_cb {
   struct device *dev ;
   struct hns_ppe_cb *next ;
   struct ppe_common_cb *ppe_common_cb ;
   struct hns_ppe_hw_stats hw_stats ;
   u8 index ;
   u8 *io_base ;
   int virq ;
   u32 rss_indir_table[256U] ;
   u32 rss_key[10U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.h"
struct ppe_common_cb {
   struct device *dev ;
   struct dsaf_device *dsaf_dev ;
   u8 *io_base ;
   enum ppe_common_mode ppe_mode ;
   u8 comm_index ;
   u32 ppe_num ;
   struct hns_ppe_cb ppe_cb[0U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.h"
enum mac_commom_mode {
    MAC_COMM_MODE_NONE = 0,
    MAC_COMM_MODE_RX = 1,
    MAC_COMM_MODE_TX = 2,
    MAC_COMM_MODE_RX_AND_TX = 3
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_1473 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_1473 key ;
} __attribute__((__aligned__(8)));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct __anonstruct_guid_t_1895 {
   __u8 b[16U] ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
typedef struct __anonstruct_guid_t_1895 guid_t;
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct acpi_device;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
typedef u64 acpi_io_address;
#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
typedef void *acpi_handle;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
typedef u32 acpi_object_type;
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
struct __anonstruct_integer_2168 {
   acpi_object_type type ;
   u64 value ;
};
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
struct __anonstruct_string_2169 {
   acpi_object_type type ;
   u32 length ;
   char *pointer ;
};
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
struct __anonstruct_buffer_2170 {
   acpi_object_type type ;
   u32 length ;
   u8 *pointer ;
};
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
struct __anonstruct_package_2171 {
   acpi_object_type type ;
   u32 count ;
   union acpi_object *elements ;
};
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
struct __anonstruct_reference_2172 {
   acpi_object_type type ;
   acpi_object_type actual_type ;
   acpi_handle handle ;
};
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
struct __anonstruct_processor_2173 {
   acpi_object_type type ;
   u32 proc_id ;
   acpi_io_address pblk_address ;
   u32 pblk_length ;
};
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
struct __anonstruct_power_resource_2174 {
   acpi_object_type type ;
   u32 system_level ;
   u32 resource_order ;
};
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
union acpi_object {
   acpi_object_type type ;
   struct __anonstruct_integer_2168 integer ;
   struct __anonstruct_string_2169 string ;
   struct __anonstruct_buffer_2170 buffer ;
   struct __anonstruct_package_2171 package ;
   struct __anonstruct_reference_2172 reference ;
   struct __anonstruct_processor_2173 processor ;
   struct __anonstruct_power_resource_2174 power_resource ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_driver;
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_hotplug_profile {
   struct kobject kobj ;
   int (*scan_dependent)(struct acpi_device *) ;
   void (*notify_online)(struct acpi_device *) ;
   bool enabled : 1 ;
   bool demand_offline : 1 ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_scan_handler {
   struct acpi_device_id *ids ;
   struct list_head list_node ;
   bool (*match)(char *, struct acpi_device_id **) ;
   int (*attach)(struct acpi_device *, struct acpi_device_id *) ;
   void (*detach)(struct acpi_device *) ;
   void (*bind)(struct device *) ;
   void (*unbind)(struct device *) ;
   struct acpi_hotplug_profile hotplug ;
};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_hotplug_context {
   struct acpi_device *self ;
   int (*notify)(struct acpi_device *, u32 ) ;
   void (*uevent)(struct acpi_device *, u32 ) ;
   void (*fixup)(struct acpi_device *) ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_ops {
   int (*add)(struct acpi_device *) ;
   int (*remove)(struct acpi_device *) ;
   void (*notify)(struct acpi_device *, u32 ) ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_driver {
   char name[80U] ;
   char class[80U] ;
   struct acpi_device_id *ids ;
   unsigned int flags ;
   struct acpi_device_ops ops ;
   struct device_driver drv ;
   struct module *owner ;
};
#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_status {
   u32 present : 1 ;
   u32 enabled : 1 ;
   u32 show_in_ui : 1 ;
   u32 functional : 1 ;
   u32 battery_present : 1 ;
   u32 reserved : 27 ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_flags {
   u32 dynamic_status : 1 ;
   u32 removable : 1 ;
   u32 ejectable : 1 ;
   u32 power_manageable : 1 ;
   u32 match_driver : 1 ;
   u32 initialized : 1 ;
   u32 visited : 1 ;
   u32 hotplug_notify : 1 ;
   u32 is_dock_station : 1 ;
   u32 of_compatible_ok : 1 ;
   u32 coherent_dma : 1 ;
   u32 cca_seen : 1 ;
   u32 enumeration_by_parent : 1 ;
   u32 reserved : 19 ;
};
#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_dir {
   struct proc_dir_entry *entry ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
typedef char acpi_bus_id[8U];
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
typedef u64 acpi_bus_address;
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
typedef char acpi_device_name[40U];
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
typedef char acpi_device_class[20U];
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_pnp_type {
   u32 hardware_id : 1 ;
   u32 bus_address : 1 ;
   u32 platform_id : 1 ;
   u32 reserved : 29 ;
};
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_pnp {
   acpi_bus_id bus_id ;
   struct acpi_pnp_type type ;
   acpi_bus_address bus_address ;
   char *unique_id ;
   struct list_head ids ;
   acpi_device_name device_name ;
   acpi_device_class device_class ;
   union acpi_object *str_obj ;
};
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_power_flags {
   u32 explicit_get : 1 ;
   u32 power_resources : 1 ;
   u32 inrush_current : 1 ;
   u32 power_removed : 1 ;
   u32 ignore_parent : 1 ;
   u32 dsw_present : 1 ;
   u32 reserved : 26 ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct __anonstruct_flags_2175 {
   u8 valid : 1 ;
   u8 explicit_set : 1 ;
   u8 reserved : 6 ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_power_state {
   struct __anonstruct_flags_2175 flags ;
   int power ;
   int latency ;
   struct list_head resources ;
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_power {
   int state ;
   struct acpi_device_power_flags flags ;
   struct acpi_device_power_state states[5U] ;
};
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_perf_flags {
   u8 reserved : 8 ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct __anonstruct_flags_2176 {
   u8 valid : 1 ;
   u8 reserved : 7 ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_perf_state {
   struct __anonstruct_flags_2176 flags ;
   u8 power ;
   u8 performance ;
   int latency ;
};
#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_perf {
   int state ;
   struct acpi_device_perf_flags flags ;
   int state_count ;
   struct acpi_device_perf_state *states ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_wakeup_flags {
   u8 valid : 1 ;
   u8 notifier_present : 1 ;
};
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_wakeup_context {
   void (*func)(struct acpi_device_wakeup_context *) ;
   struct device *dev ;
};
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_wakeup {
   acpi_handle gpe_device ;
   u64 gpe_number ;
   u64 sleep_state ;
   struct list_head resources ;
   struct acpi_device_wakeup_flags flags ;
   struct acpi_device_wakeup_context context ;
   struct wakeup_source *ws ;
   int prepare_count ;
   int enable_count ;
};
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_data {
   union acpi_object *pointer ;
   struct list_head properties ;
   union acpi_object *of_compatible ;
   struct list_head subnodes ;
};
#line 346 
struct acpi_gpio_mapping;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device {
   int device_type ;
   acpi_handle handle ;
   struct fwnode_handle fwnode ;
   struct acpi_device *parent ;
   struct list_head children ;
   struct list_head node ;
   struct list_head wakeup_list ;
   struct list_head del_list ;
   struct acpi_device_status status ;
   struct acpi_device_flags flags ;
   struct acpi_device_pnp pnp ;
   struct acpi_device_power power ;
   struct acpi_device_wakeup wakeup ;
   struct acpi_device_perf performance ;
   struct acpi_device_dir dir ;
   struct acpi_device_data data ;
   struct acpi_scan_handler *handler ;
   struct acpi_hotplug_context *hp ;
   struct acpi_driver *driver ;
   struct acpi_gpio_mapping *driver_gpios ;
   void *driver_data ;
   struct device dev ;
   unsigned int physical_node_count ;
   unsigned int dep_unmet ;
   struct list_head physical_node_list ;
   struct mutex physical_node_lock ;
   void (*remove)(struct acpi_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
enum ppe_qid_mode {
    PPE_QID_MODE0 = 0,
    PPE_QID_MODE1 = 1,
    PPE_QID_MODE2 = 2,
    PPE_QID_MODE3 = 3,
    PPE_QID_MODE4 = 4,
    PPE_QID_MODE5 = 5,
    PPE_QID_MODE6 = 6,
    PPE_QID_MODE7 = 7,
    PPE_QID_MODE8 = 8,
    PPE_QID_MODE9 = 9,
    PPE_QID_MODE10 = 10,
    PPE_QID_MODE11 = 11
};
#line 178 
enum ppe_port_mode {
    PPE_MODE_GE = 0,
    PPE_MODE_XGE = 1
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_driver {
   int (*probe)(struct platform_device *) ;
   int (*remove)(struct platform_device *) ;
   void (*shutdown)(struct platform_device *) ;
   int (*suspend)(struct platform_device *, pm_message_t ) ;
   int (*resume)(struct platform_device *) ;
   struct device_driver driver ;
   struct platform_device_id *id_table ;
   bool prevent_deferred_probe ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct dsaf_tbl_tcam_data {
   u32 tbl_tcam_data_high ;
   u32 tbl_tcam_data_low ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct dsaf_tbl_tcam_mcast_cfg {
   u8 tbl_mcast_old_en ;
   u8 tbl_mcast_item_vld ;
   u32 tbl_mcast_port_msk[5U] ;
};
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct dsaf_tbl_tcam_ucast_cfg {
   u32 tbl_ucast_old_en ;
   u32 tbl_ucast_item_vld ;
   u32 tbl_ucast_mac_discard ;
   u32 tbl_ucast_dvc ;
   u32 tbl_ucast_out_port ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct dsaf_tbl_line_cfg {
   u32 tbl_line_mac_discard ;
   u32 tbl_line_dvc ;
   u32 tbl_line_out_port ;
};
#line 113 
enum dsaf_port_rate_mode {
    DSAF_PORT_RATE_1000 = 0,
    DSAF_PORT_RATE_2500 = 1,
    DSAF_PORT_RATE_10000 = 2
};
#line 119 
enum dsaf_stp_port_type {
    DSAF_STP_PORT_TYPE_DISCARD = 0,
    DSAF_STP_PORT_TYPE_BLOCK = 1,
    DSAF_STP_PORT_TYPE_LISTEN = 2,
    DSAF_STP_PORT_TYPE_LEARN = 3,
    DSAF_STP_PORT_TYPE_FORWARD = 4
};
#line 127 
enum dsaf_sw_port_type {
    DSAF_SW_PORT_TYPE_NON_VLAN = 0,
    DSAF_SW_PORT_TYPE_ACCESS = 1,
    DSAF_SW_PORT_TYPE_TRUNK = 2
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct dsaf_drv_mac_single_dest_entry {
   u8 addr[6U] ;
   u16 in_vlan_id ;
   u8 in_port_num ;
   u8 port_num ;
   u8 rsv[6U] ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct __anonstruct_bits_3654 {
   u8 mac_3 ;
   u8 mac_2 ;
   u8 mac_1 ;
   u8 mac_0 ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
union __anonunion_high_3653 {
   struct __anonstruct_bits_3654 bits ;
   u32 val ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct __anonstruct_bits_3656 {
   u16 port_vlan ;
   u8 mac_5 ;
   u8 mac_4 ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
union __anonunion_low_3655 {
   struct __anonstruct_bits_3656 bits ;
   u32 val ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct dsaf_drv_tbl_tcam_key {
   union __anonunion_high_3653 high ;
   union __anonunion_low_3655 low ;
};
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct dsaf_drv_soft_mac_tbl {
   struct dsaf_drv_tbl_tcam_key tcam_key ;
   u16 index ;
};
#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
struct dsaf_drv_priv {
   struct dsaf_drv_soft_mac_tbl *soft_mac_tbl ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct of_phandle_args {
   struct device_node *np ;
   int args_count ;
   uint32_t args[16U] ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.h"
enum mac_speed {
    MAC_SPEED_10 = 10,
    MAC_SPEED_100 = 100,
    MAC_SPEED_1000 = 1000,
    MAC_SPEED_10000 = 10000
};
#line 79 
enum mac_mode {
    MAC_MODE_INVALID = 0,
    MAC_MODE_MII_10 = 65546,
    MAC_MODE_MII_100 = 65636,
    MAC_MODE_RMII_10 = 131082,
    MAC_MODE_RMII_100 = 131172,
    MAC_MODE_SMII_10 = 196618,
    MAC_MODE_SMII_100 = 196708,
    MAC_MODE_GMII_1000 = 263144,
    MAC_MODE_RGMII_10 = 327690,
    MAC_MODE_RGMII_100 = 327780,
    MAC_MODE_RGMII_1000 = 328680,
    MAC_MODE_TBI_1000 = 394216,
    MAC_MODE_RTBI_1000 = 459752,
    MAC_MODE_SGMII_10 = 524298,
    MAC_MODE_SGMII_100 = 524388,
    MAC_MODE_SGMII_1000 = 525288,
    MAC_MODE_XGMII_10000 = 599824,
    MAC_MODE_QSGMII_1000 = 656360
};
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.h"
struct mac_params {
   char addr[6U] ;
   u8 *vaddr ;
   struct device *dev ;
   u8 mac_id ;
   enum mac_mode mac_mode ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.h"
struct mac_info {
   u16 speed ;
   u8 duplex ;
   u8 auto_neg ;
   enum hnae_loop loop_mode ;
   u8 tx_pause_en ;
   u8 tx_pause_time ;
   u8 rx_pause_en ;
   u8 pad_and_crc_en ;
   u8 promiscuous_en ;
   u8 port_en ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.h"
struct mac_driver {
   void (*mac_init)(void *) ;
   void (*mac_free)(void *) ;
   void (*mac_enable)(void *, enum mac_commom_mode ) ;
   void (*mac_disable)(void *, enum mac_commom_mode ) ;
   void (*set_mac_addr)(void *, char *) ;
   int (*adjust_link)(void *, enum mac_speed , u32 ) ;
   bool (*need_adjust_link)(void *, enum mac_speed , int ) ;
   void (*set_an_mode)(void *, u8 ) ;
   int (*config_loopback)(void *, enum hnae_loop , u8 ) ;
   void (*config_max_frame_length)(void *, u16 ) ;
   void (*config_pad_and_crc)(void *, u8 ) ;
   void (*config_half_duplex)(void *, u8 ) ;
   void (*set_tx_auto_pause_frames)(void *, u16 ) ;
   void (*set_rx_ignore_pause_frames)(void *, u32 ) ;
   void (*set_promiscuous)(void *, u8 ) ;
   void (*mac_pausefrm_cfg)(void *, u32 , u32 ) ;
   void (*autoneg_stat)(void *, u32 *) ;
   int (*set_pause_enable)(void *, u32 , u32 ) ;
   void (*get_pause_enable)(void *, u32 *, u32 *) ;
   void (*get_link_status)(void *, u32 *) ;
   void (*get_regs)(void *, void *) ;
   int (*get_regs_count)(void) ;
   void (*get_strings)(u32 , u8 *) ;
   int (*get_sset_count)(int ) ;
   void (*get_ethtool_stats)(void *, u64 *) ;
   void (*get_info)(void *, struct mac_info *) ;
   void (*update_stats)(void *) ;
   int (*wait_fifo_clean)(void *) ;
   enum mac_mode mac_mode ;
   u8 mac_id ;
   struct hns_mac_cb *mac_cb ;
   u8 *io_base ;
   unsigned int mac_en_flg ;
   unsigned int virt_dev_num ;
   struct device *dev ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
struct __anonstruct_media_type_defs_4385 {
   enum hnae_media_type value ;
   char *name ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.h"
struct mac_stats_string {
   char desc[32U] ;
   unsigned long offset ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
enum hns_port_mode {
    GMAC_10M_MII = 0,
    GMAC_100M_MII = 1,
    GMAC_1000M_GMII = 2,
    GMAC_10M_RGMII = 3,
    GMAC_100M_RGMII = 4,
    GMAC_1000M_RGMII = 5,
    GMAC_10M_SGMII = 6,
    GMAC_100M_SGMII = 7,
    GMAC_1000M_SGMII = 8,
    GMAC_10000M_SGMII = 9
};
#line 480 
enum hns_gmac_duplex_mdoe {
    GMAC_HALF_DUPLEX_MODE = 0,
    GMAC_FULL_DUPLEX_MODE = 1
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.h"
struct hns_gmac_port_mode_cfg {
   enum hns_port_mode port_mode ;
   u32 max_frm_size ;
   u32 short_runts_thr ;
   u32 pad_enable ;
   u32 crc_add ;
   u32 an_enable ;
   u32 runt_pkt_en ;
   u32 strip_pad_en ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_7627 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_7627 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_7628 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_7628 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_7644 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_7644 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_7648 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_7648 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_7649 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_7650 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_7649 __anonCompField_media_link_90 ;
   union __anonunion_7650 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_7652 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_7651 {
   struct __anonstruct_dev_7652 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_7651 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_7666 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_7667 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_7665 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_7666 i2c ;
   struct __anonstruct_custom_7667 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_7665 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_8568 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_8568 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 11  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_platform_instance_g_dsaf_driver_4 {
   struct platform_driver *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 27 
void *ldv_devm_kzalloc(size_t size, gfp_t flags);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 257 
extern int ( /* missing proto */ __builtin_mul_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 297 
#line 297 
extern int ( /* missing proto */ __builtin_add_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t __ab_c_size(size_t a, size_t b, size_t c)
{
  #line 295 
  size_t __a;
  #line 295 
  size_t __b;
  #line 295 
  size_t *__d;
  #line 297 
  size_t __a_0;
  #line 297 
  size_t __b_0;
  #line 297 
  size_t *__d_0;
  #line 293 
  size_t bytes;
  {
    #line 295 
    __a = a;
    #line 295 
    __b = b;
    #line 295 
    __d = & bytes;
    #line 295 
    int tmp = & __a == __d;
    }
  #line 295 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 296 
                                                return 18446744073709551615UL;
  {
    #line 297 
    __a_0 = bytes;
    #line 297 
    __b_0 = c;
    #line 297 
    __d_0 = & bytes;
    #line 297 
    int tmp_3 = & __a_0 == __d_0;
    }
  #line 297 
  if (__builtin_add_overflow(__a_0,__b_0,__d_0) != 0) 
                                                      #line 298 
                                                      return 18446744073709551615UL;
  #line 300 
  return bytes;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_rcb.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags);
#line 1712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 61 
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 66 
int platform_get_irq(struct platform_device *, unsigned int);
#line 1017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_reg.h"
__inline static void dsaf_write_reg(u8 *base, u32 reg, u32 value)
{
  #line 1019 
  writel(value,(void *)(base + (unsigned long)reg));
  #line 1020 
  return;
}

#line 1025  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_reg.h"
__inline static u32 dsaf_read_reg(u8 *base, u32 reg)
{
  #line 1027 
  return readl((void *)(base + (unsigned long)reg));
}

#line 1052  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_reg.h"
__inline static void dsaf_set_reg_field(u8 *base, u32 reg, u32 mask, u32 shift, u32 val)
{
  #line 1055 
  u32 origin = dsaf_read_reg(base,reg);
  #line 1057 
  origin = ~ mask & origin;
  #line 1057 
  origin = ((val << shift) & mask) | origin;
  #line 1058 
  dsaf_write_reg(base,reg,origin);
  #line 1059 
  return;
}

#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
__inline static struct hnae_vf_cb *hns_ae_get_vf_cb(struct hnae_handle *handle)
{
  #line 425 
  void *__mptr;
  #line 425 
  __mptr = (void *)handle;
  #line 425 
  return ((struct hnae_vf_cb *)(__mptr + 18446744073709551592U));
}

#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_buf_size2type(u32 buf_size);
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_common_get_cfg(struct dsaf_device *dsaf_dev, int comm_index);
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_common_free_cfg(struct dsaf_device *dsaf_dev, u32 comm_index);
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_common_init_hw(struct rcb_common_cb *rcb_common);
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_start(struct hnae_queue *q, u32 val);
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_get_cfg(struct rcb_common_cb *rcb_common);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 699  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_get_queue_mode(enum dsaf_mode dsaf_mode, u16 *max_vfn, u16 *max_q_per_vf);
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_common_init_commit_hw(struct rcb_common_cb *rcb_common);
#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_ring_enable_hw(struct hnae_queue *q, u32 val);
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_int_clr_hw(struct hnae_queue *q, u32 flag);
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_int_ctrl_hw(struct hnae_queue *q, u32 flag, u32 mask);
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcbv2_int_ctrl_hw(struct hnae_queue *q, u32 flag, u32 mask);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcbv2_int_clr_hw(struct hnae_queue *q, u32 flag);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_init_hw(struct ring_pair_cb *ring);
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_reset_ring_hw(struct hnae_queue *q);
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_wait_fbd_clean(struct hnae_queue **qs, int q_num, u32 flag);
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_wait_tx_ring_clean(struct hnae_queue *qs);
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
u32 hns_rcb_get_rx_coalesced_frames(struct rcb_common_cb *rcb_common, u32 port_idx);
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
u32 hns_rcb_get_tx_coalesced_frames(struct rcb_common_cb *rcb_common, u32 port_idx);
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
u32 hns_rcb_get_coalesce_usecs(struct rcb_common_cb *rcb_common, u32 port_idx);
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_set_coalesce_usecs(struct rcb_common_cb *rcb_common, u32 port_idx, u32 timeout);
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_set_rx_coalesced_frames(struct rcb_common_cb *rcb_common, u32 port_idx, u32 coalesced_frames);
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 640  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_set_tx_coalesced_frames(struct rcb_common_cb *rcb_common, u32 port_idx, u32 coalesced_frames);
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_update_stats(struct hnae_queue *queue);
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 850  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_get_stats(struct hnae_queue *queue, u64 *data);
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_get_common_regs(struct rcb_common_cb *rcb_com, void *data);
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_get_ring_sset_count(int stringset);
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_get_common_regs_count(void);
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_get_ring_regs_count(void);
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 1069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_get_ring_regs(struct hnae_queue *queue, void *data);
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_get_strings(int stringset, u8 *data, int index);
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_set_rx_ring_bs(struct hnae_queue *q, u32 buf_size);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.h"
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_set_tx_ring_bs(struct hnae_queue *q, u32 buf_size);
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_wait_fbd_clean(struct hnae_queue **qs, int q_num, u32 flag)
{
  #line 42 
  int i;
  #line 42 
  int wait_cnt;
  #line 43 
  u32 fbd_num;
  #line 45 
  i = 0;
  #line 45 
  wait_cnt = i;
  #line 45 
  while (i < q_num) {
    #line 46 
    usleep_range(200UL,300UL);
    #line 47 
    fbd_num = 0U;
    #line 48 
    if ((flag & 1U) != 0U) {
      #line 50 
      fbd_num = dsaf_read_reg((*(qs + (unsigned long)i))->io_base,96U) + fbd_num;
    }
    #line 51 
    if ((flag & 2U) != 0U) {
      #line 53 
      fbd_num = dsaf_read_reg((*(qs + (unsigned long)i))->io_base,32U) + fbd_num;
    }
    #line 54 
    if (fbd_num == 0U) 
                       #line 55 
                       i ++;
    #line 56 
    if (wait_cnt > 9999) 
                         #line 57 
                         break;
    #line 45 
    wait_cnt ++;
  }
  #line 60 
  if (i < q_num) 
                 #line 61 
                 _dev_err(((*(qs + (unsigned long)i))->handle)->owner_dev,(char *)"queue(%d) wait fbd(%d) clean fail!!\n",i,fbd_num);
  #line 62 
  return;
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_wait_tx_ring_clean(struct hnae_queue *qs)
{
  #line 67 
  u32 head;
  #line 67 
  u32 tail;
  #line 68 
  int wait_cnt;
  #line 70 
  tail = dsaf_read_reg(qs->tx_ring.io_base,24U);
  #line 71 
  wait_cnt = 0;
  #line 72 
  while (1) {
    #line 72 
    int tmp;
    #line 72 
    tmp = wait_cnt;
    #line 72 
    wait_cnt ++;
    #line 72 
    ;
    #line 72 
    if (! (tmp <= 9999)) 
                         #line 72 
                         break;
    #line 73 
    head = dsaf_read_reg(qs->tx_ring.io_base,28U);
    #line 74 
    if (tail == head) 
                      #line 75 
                      break;
    #line 77 
    usleep_range(100UL,200UL);
  }
  #line 80 
  if (wait_cnt > 9999) {
    #line 81 
    _dev_err((qs->dev)->dev,(char *)"rcb wait timeout, head not equal to tail.\n");
    #line 82 
    return -16;
  }
  #line 85 
  return 0;
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_reset_ring_hw(struct hnae_queue *q)
{
  #line 94 
  u32 wait_cnt;
  #line 96 
  u32 could_ret;
  #line 98 
  u32 tx_fbd_num;
  #line 95 
  u32 try_cnt = 0U;
  #line 100 
  while (1) {
    #line 100 
    u32 tmp;
    #line 100 
    tmp = try_cnt;
    #line 100 
    try_cnt ++;
    #line 100 
    ;
    #line 100 
    if (! (tmp <= 9U)) 
                       #line 100 
                       break;
    #line 101 
    usleep_range(100UL,200UL);
    #line 102 
    tx_fbd_num = dsaf_read_reg(q->io_base,96U);
    #line 103 
    if (tx_fbd_num != 0U) 
                          #line 104 
                          continue;
    #line 106 
    dsaf_write_reg(q->io_base,124U,0U);
    #line 108 
    dsaf_write_reg(q->io_base,148U,1U);
    #line 110 
    msleep(20U);
    #line 111 
    could_ret = dsaf_read_reg(q->io_base,152U);
    #line 113 
    wait_cnt = 0U;
    #line 114 
    while (could_ret == 0U && wait_cnt <= 29U) {
      #line 115 
      dsaf_write_reg(q->io_base,148U,0U);
      #line 117 
      dsaf_write_reg(q->io_base,148U,1U);
      #line 119 
      msleep(20U);
      #line 120 
      could_ret = dsaf_read_reg(q->io_base,152U);
      #line 122 
      wait_cnt ++;
    }
    #line 125 
    dsaf_write_reg(q->io_base,148U,0U);
    #line 127 
    if (could_ret != 0U) 
                         #line 128 
                         break;
  }
  #line 131 
  if (try_cnt > 9U) {
    #line 132 
    ;
    #line 132 
    _dev_err((q->dev)->dev,(char *)"port%d reset ring fail\n",(int)hns_ae_get_vf_cb(q->handle)->port_index);
  }
  #line 133 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_int_ctrl_hw(struct hnae_queue *q, u32 flag, u32 mask)
{
  #line 144 
  u32 int_mask_en = (unsigned int)(mask != 0U);
  #line 146 
  if ((flag & 1U) != 0U) {
    #line 147 
    dsaf_write_reg(q->io_base,172U,int_mask_en);
    #line 148 
    dsaf_write_reg(q->io_base,196U,int_mask_en);
  }
  #line 152 
  if ((flag & 2U) != 0U) {
    #line 153 
    dsaf_write_reg(q->io_base,160U,int_mask_en);
    #line 154 
    dsaf_write_reg(q->io_base,184U,int_mask_en);
  }
  #line 156 
  return;
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_int_clr_hw(struct hnae_queue *q, u32 flag)
{
  #line 161 
  if ((flag & 1U) != 0U) {
    #line 162 
    dsaf_write_reg(q->io_base,176U,1U);
    #line 163 
    dsaf_write_reg(q->io_base,200U,1U);
  }
  #line 166 
  if ((flag & 2U) != 0U) {
    #line 167 
    dsaf_write_reg(q->io_base,164U,1U);
    #line 168 
    dsaf_write_reg(q->io_base,188U,1U);
  }
  #line 170 
  return;
}

#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcbv2_int_ctrl_hw(struct hnae_queue *q, u32 flag, u32 mask)
{
  #line 174 
  u32 int_mask_en = (unsigned int)(mask != 0U);
  #line 176 
  if ((flag & 1U) != 0U) 
                         #line 177 
                         dsaf_write_reg(q->io_base,172U,int_mask_en);
  #line 179 
  if ((flag & 2U) != 0U) 
                         #line 180 
                         dsaf_write_reg(q->io_base,160U,int_mask_en);
  #line 181 
  return;
}

#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcbv2_int_clr_hw(struct hnae_queue *q, u32 flag)
{
  #line 185 
  if ((flag & 1U) != 0U) 
                         #line 186 
                         dsaf_write_reg(q->io_base,180U,1U);
  #line 188 
  if ((flag & 2U) != 0U) 
                         #line 189 
                         dsaf_write_reg(q->io_base,168U,1U);
  #line 190 
  return;
}

#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_ring_enable_hw(struct hnae_queue *q, u32 val)
{
  #line 198 
  dsaf_write_reg(q->io_base,124U,(unsigned int)(val != 0U));
  #line 199 
  return;
}

#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_start(struct hnae_queue *q, u32 val)
{
  #line 203 
  hns_rcb_ring_enable_hw(q,val);
  #line 204 
  return;
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_common_init_commit_hw(struct rcb_common_cb *rcb_common)
{
  #line 212 
  ldv_inline_asm();
  #line 213 
  dsaf_write_reg(rcb_common->io_base,12U,1U);
  #line 214 
  ldv_inline_asm();
  #line 215 
  return;
}

#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_set_tx_ring_bs(struct hnae_queue *q, u32 buf_size)
{
  #line 223 
  u32 bd_size_type = (unsigned int)hns_rcb_buf_size2type(buf_size);
  #line 225 
  dsaf_write_reg(q->io_base,76U,bd_size_type);
  #line 226 
  return;
}

#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_set_rx_ring_bs(struct hnae_queue *q, u32 buf_size)
{
  #line 235 
  u32 bd_size_type = (unsigned int)hns_rcb_buf_size2type(buf_size);
  #line 237 
  dsaf_write_reg(q->io_base,12U,bd_size_type);
  #line 238 
  return;
}

#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
static void hns_rcb_ring_init(struct ring_pair_cb *ring_pair, int ring_type)
{
  #line 249 
  struct hnae_ring *tmp;
  #line 248 
  struct hnae_queue *q = & ring_pair->q;
  #line 249 
  if (ring_type == 1) 
                      #line 249 
                      tmp = & q->rx_ring; else 
                                               #line 249 
                                               tmp = & q->tx_ring;
  #line 249 
  struct hnae_ring *ring = tmp;
  #line 251 
  dma_addr_t dma = ring->desc_dma_addr;
  #line 253 
  if (ring_type == 1) {
    #line 254 
    dsaf_write_reg(q->io_base,0U,(unsigned int)dma);
    #line 256 
    dsaf_write_reg(q->io_base,4U,(unsigned int)(dma >> 32));
    #line 259 
    hns_rcb_set_rx_ring_bs(q,ring->buf_size);
    #line 261 
    dsaf_write_reg(q->io_base,8U,(unsigned int)ring_pair->port_id_in_comm);
    #line 263 
    dsaf_write_reg(q->io_base,16U,(unsigned int)ring_pair->port_id_in_comm);
  }
  else {
    #line 266 
    dsaf_write_reg(q->io_base,64U,(unsigned int)dma);
    #line 268 
    dsaf_write_reg(q->io_base,68U,(unsigned int)(dma >> 32));
    #line 271 
    hns_rcb_set_tx_ring_bs(q,ring->buf_size);
    #line 273 
    dsaf_write_reg(q->io_base,72U,(unsigned int)ring_pair->port_id_in_comm);
    #line 275 
    dsaf_write_reg(q->io_base,80U,(unsigned int)((int)ring_pair->port_id_in_comm + 8));
  }
  #line 277 
  return;
}

#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_init_hw(struct ring_pair_cb *ring)
{
  #line 286 
  hns_rcb_ring_init(ring,1);
  #line 287 
  hns_rcb_ring_init(ring,0);
  #line 288 
  return;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
static void hns_rcb_set_port_desc_cnt(struct rcb_common_cb *rcb_common, u32 port_idx, u32 desc_cnt)
{
  #line 299 
  dsaf_write_reg(rcb_common->io_base,(port_idx + 9216U) * 4U,desc_cnt);
  #line 300 
  return;
}

#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
static void hns_rcb_set_port_timeout(struct rcb_common_cb *rcb_common, u32 port_idx, u32 timeout)
{
  #line 306 
  if ((rcb_common->dsaf_dev)->dsaf_ver == 3552816U) 
                                                    #line 307 
                                                    dsaf_write_reg(rcb_common->io_base,37632U,timeout * 350U);
  else 
    #line 309 
    if ((rcb_common->dsaf_dev)->dsaf_mode != (unsigned int)DSAF_MODE_DISABLE_SP) {
      #line 310 
      if (timeout > 20U) 
                         #line 311 
                         dsaf_write_reg(rcb_common->io_base,(port_idx + 9472U) * 4U,20U); else 
                                                                    #line 315 
                                                                    dsaf_write_reg(rcb_common->io_base,(port_idx + 9472U) * 4U,timeout);
      #line 319 
      dsaf_write_reg(rcb_common->io_base,(port_idx + 9484U) * 4U,timeout);
    }
    else 
         #line 323 
         dsaf_write_reg(rcb_common->io_base,(port_idx + 9484U) * 4U,timeout);
  #line 324 
  return;
}

#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
static int hns_rcb_common_get_port_num(struct rcb_common_cb *rcb_common)
{
  #line 331 
  if ((rcb_common->dsaf_dev)->dsaf_mode != (unsigned int)DSAF_MODE_DISABLE_SP) 
    #line 332 
    return 6; else 
                   #line 334 
                   return 1;
}

#line 338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
static void hns_rcb_comm_exc_irq_en(struct rcb_common_cb *rcb_common, int en)
{
  #line 342 
  unsigned int tmp;
  #line 341 
  u32 clr_vlue = 4294967295U;
  #line 342 
  if (en != 0) 
               #line 342 
               tmp = 0U; else 
                              #line 342 
                              tmp = 4294967295U;
  #line 342 
  u32 msk_vlue = tmp;
  #line 345 
  dsaf_write_reg(rcb_common->io_base,1032U,clr_vlue);
  #line 347 
  dsaf_write_reg(rcb_common->io_base,1140U,clr_vlue);
  #line 349 
  dsaf_write_reg(rcb_common->io_base,1152U,clr_vlue);
  #line 351 
  dsaf_write_reg(rcb_common->io_base,936U,clr_vlue);
  #line 352 
  dsaf_write_reg(rcb_common->io_base,1180U,clr_vlue);
  #line 355 
  dsaf_write_reg(rcb_common->io_base,1024U,msk_vlue);
  #line 357 
  dsaf_write_reg(rcb_common->io_base,1136U,msk_vlue);
  #line 360 
  dsaf_write_reg(rcb_common->io_base,1148U,msk_vlue | 2U);
  #line 362 
  dsaf_write_reg(rcb_common->io_base,928U,msk_vlue);
  #line 363 
  dsaf_write_reg(rcb_common->io_base,1176U,msk_vlue);
  #line 364 
  return;
}

#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_common_init_hw(struct rcb_common_cb *rcb_common)
{
  #line 373 
  u32 reg_val;
  #line 374 
  int i;
  #line 375 
  int port_num = hns_rcb_common_get_port_num(rcb_common);
  #line 377 
  hns_rcb_comm_exc_irq_en(rcb_common,0);
  #line 379 
  reg_val = dsaf_read_reg(rcb_common->io_base,16U);
  #line 380 
  if ((reg_val & 1U) == 0U) {
    #line 381 
    _dev_err((rcb_common->dsaf_dev)->dev,(char *)"RCB_COM_CFG_INIT_FLAG_REG reg = 0x%x\n",reg_val);
    #line 383 
    return -16;
  }
  #line 386 
  i = 0;
  #line 386 
  while (i < port_num) {
    #line 387 
    hns_rcb_set_port_desc_cnt(rcb_common,(unsigned int)i,rcb_common->desc_num);
    #line 388 
    hns_rcb_set_rx_coalesced_frames(rcb_common,(unsigned int)i,50U);
    #line 390 
    if ((rcb_common->dsaf_dev)->dsaf_ver != 3552816U && (rcb_common->dsaf_dev)->dsaf_mode != (unsigned int)DSAF_MODE_DISABLE_SP) 
      #line 392 
      hns_rcb_set_tx_coalesced_frames(rcb_common,(unsigned int)i,1U);
    #line 394 
    hns_rcb_set_port_timeout(rcb_common,(unsigned int)i,30U);
    #line 386 
    i ++;
  }
  #line 398 
  dsaf_write_reg(rcb_common->io_base,0U,1U);
  #line 401 
  if ((rcb_common->dsaf_dev)->dsaf_ver == 3552816U) {
    #line 402 
    dsaf_write_reg(rcb_common->io_base,56U,0U);
    #line 403 
    dsaf_write_reg(rcb_common->io_base,60U,1U);
  }
  else {
    #line 405 
    dsaf_set_reg_field(rcb_common->io_base,48U,2U,1U,0U);
    #line 407 
    dsaf_set_reg_field(rcb_common->io_base,48U,1U,0U,1U);
    #line 409 
    dsaf_set_reg_field(rcb_common->io_base,80U,1U,0U,1U);
  }
  #line 413 
  return 0;
}

#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_buf_size2type(u32 buf_size)
{
  #line 418 
  int bd_size_type;
  #line 420 
  switch (buf_size) {
    #line 421 
    case (u32)512: 
                   #line 421 
    ;
    #line 422 
    bd_size_type = 0;
    #line 423 
    break;
    #line 424 
    case (u32)1024: 
                    #line 424 
    ;
    #line 425 
    bd_size_type = 1;
    #line 426 
    break;
    #line 427 
    case (u32)2048: 
                    #line 427 
    ;
    #line 428 
    bd_size_type = 2;
    #line 429 
    break;
    #line 430 
    case (u32)4096: 
                    #line 430 
    ;
    #line 431 
    bd_size_type = 3;
    #line 432 
    break;
    #line 433 
    default: 
             #line 433 
    ;
    #line 434 
    bd_size_type = -22;
  }
  #line 437 
  return bd_size_type;
}

#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
static void hns_rcb_ring_get_cfg(struct hnae_queue *q, int ring_type)
{
  #line 448 
  void *__mptr;
  #line 442 
  struct hnae_ring *ring;
  #line 443 
  struct rcb_common_cb *rcb_common;
  #line 444 
  struct ring_pair_cb *ring_pair_cb;
  #line 445 
  u16 desc_num;
  #line 445 
  u16 mdnum_ppkt;
  #line 446 
  bool irq_idx;
  #line 446 
  bool is_ver1;
  #line 448 
  __mptr = (void *)q;
  #line 448 
  ring_pair_cb = ((struct ring_pair_cb *)(__mptr + 18446744073709547520U));
  #line 449 
  is_ver1 = (_Bool)(((ring_pair_cb->rcb_common)->dsaf_dev)->dsaf_ver == 3552816U);
  #line 450 
  if (ring_type == 1) {
    #line 451 
    ring = & q->rx_ring;
    #line 452 
    ring->io_base = ring_pair_cb->q.io_base;
    #line 453 
    irq_idx = (_Bool)1;
    #line 454 
    mdnum_ppkt = (unsigned short)3U;
  }
  else {
    #line 456 
    ring = & q->tx_ring;
    #line 457 
    ring->io_base = ring_pair_cb->q.io_base + 64U;
    #line 459 
    irq_idx = (_Bool)0;
    #line 460 
    if ((int)is_ver1 != 0) 
                           #line 460 
                           mdnum_ppkt = (unsigned short)3U; else 
                                                                 #line 460 
                                                                 mdnum_ppkt = (unsigned short)8U;
  }
  #line 464 
  rcb_common = ring_pair_cb->rcb_common;
  #line 465 
  desc_num = (unsigned short)(rcb_common->dsaf_dev)->desc_num;
  #line 467 
  ring->desc = (struct hnae_desc *)0;
  #line 468 
  ring->desc_cb = (struct hnae_desc_cb *)0;
  #line 470 
  ring->irq = ring_pair_cb->virq[(int)irq_idx];
  #line 471 
  ring->desc_dma_addr = 0ULL;
  #line 473 
  ring->buf_size = 2048U;
  #line 474 
  ring->desc_num = desc_num;
  #line 475 
  ring->max_desc_num_per_pkt = mdnum_ppkt;
  #line 476 
  ring->max_raw_data_sz_per_desc = (unsigned short)9600U;
  #line 477 
  ring->max_pkt_size = (unsigned short)9600U;
  #line 478 
  ring->next_to_use = 0;
  #line 479 
  ring->next_to_clean = 0;
  #line 480 
  return;
}

#line 482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
static void hns_rcb_ring_pair_get_cfg(struct ring_pair_cb *ring_pair_cb)
{
  #line 484 
  ring_pair_cb->q.handle = (struct hnae_handle *)0;
  #line 486 
  hns_rcb_ring_get_cfg(& ring_pair_cb->q,1);
  #line 487 
  hns_rcb_ring_get_cfg(& ring_pair_cb->q,0);
  #line 488 
  return;
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
static int hns_rcb_get_port_in_comm(struct rcb_common_cb *rcb_common, int ring_idx)
{
  #line 493 
  return ring_idx / ((int)rcb_common->max_q_per_vf * (int)rcb_common->max_vfn);
}

#line 498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
static int hns_rcb_get_base_irq_idx(struct rcb_common_cb *rcb_common)
{
  #line 500 
  bool is_ver1 = (_Bool)((rcb_common->dsaf_dev)->dsaf_ver == 3552816U);
  #line 502 
  if ((rcb_common->dsaf_dev)->dsaf_mode != (unsigned int)DSAF_MODE_DISABLE_SP) {
    #line 503 
    int tmp;
    #line 503 
    if ((int)is_ver1 != 0) 
                           #line 503 
                           tmp = 59; else 
                                          #line 503 
                                          tmp = 25;
    #line 503 
    return tmp;
  }
  else 
       #line 505 
       return 0;
}

#line 514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_get_cfg(struct rcb_common_cb *rcb_common)
{
  #line 521 
  void *__mptr;
  #line 516 
  struct ring_pair_cb *ring_pair_cb;
  #line 517 
  u32 i;
  #line 518 
  u32 ring_num = rcb_common->ring_num;
  #line 519 
  int base_irq_idx = hns_rcb_get_base_irq_idx(rcb_common);
  #line 521 
  __mptr = (void *)(rcb_common->dsaf_dev)->dev;
  #line 520 
  struct platform_device *pdev = ((struct platform_device *)(__mptr + 18446744073709551600U));
  #line 522 
  bool is_ver1 = (_Bool)((rcb_common->dsaf_dev)->dsaf_ver == 3552816U);
  #line 524 
  i = 0U;
  #line 524 
  while (i < ring_num) {
    {
      #line 525 
      ring_pair_cb = & rcb_common->ring_pair_cb[i];
      #line 526 
      ring_pair_cb->rcb_common = rcb_common;
      #line 527 
      ring_pair_cb->dev = (rcb_common->dsaf_dev)->dev;
      #line 528 
      ring_pair_cb->index = (unsigned short)i;
      #line 529 
      ring_pair_cb->q.io_base = rcb_common->io_base + ((unsigned long)(i * 65536U) + (unsigned long)65536U);
      #line 531 
      ring_pair_cb->port_id_in_comm = (unsigned char)hns_rcb_get_port_in_comm(rcb_common,(int)i);
      #line 533 
      if ((int)is_ver1 != 0) 
                             #line 534 
                             ring_pair_cb->virq[0] = platform_get_irq(pdev,i * 2U + (unsigned int)base_irq_idx); else 
                                                                    #line 534 
                                                                    ring_pair_cb->virq[0] = platform_get_irq(pdev,(i * 3U + (unsigned int)base_irq_idx) + 1U);
      #line 536 
      if ((int)is_ver1 != 0) 
                             #line 537 
                             ring_pair_cb->virq[1] = platform_get_irq(pdev,(i * 2U + (unsigned int)base_irq_idx) + 1U); else 
                                                                    #line 537 
                                                                    ring_pair_cb->virq[1] = platform_get_irq(pdev,i * 3U + (unsigned int)base_irq_idx);
      #line 539 
      if (ring_pair_cb->virq[0] == -517 || ring_pair_cb->virq[1] == -517) 
        #line 541 
        return -517;
      #line 543 
      ring_pair_cb->q.phy_base = (rcb_common->phy_base + (unsigned long long)(i * 65536U)) + 65536ULL;
      #line 545 
      hns_rcb_ring_pair_get_cfg(ring_pair_cb);
    }
    #line 524 
    i ++;
  }
  #line 548 
  return 0;
}

#line 558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
u32 hns_rcb_get_rx_coalesced_frames(struct rcb_common_cb *rcb_common, u32 port_idx)
{
  #line 561 
  return dsaf_read_reg(rcb_common->io_base,(port_idx + 9236U) * 4U);
}

#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
u32 hns_rcb_get_tx_coalesced_frames(struct rcb_common_cb *rcb_common, u32 port_idx)
{
  #line 574 
  u64 reg;
  #line 576 
  reg = (unsigned long long)((port_idx + 9244U) * 4U);
  #line 577 
  return dsaf_read_reg(rcb_common->io_base,(unsigned int)reg);
}

#line 587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
u32 hns_rcb_get_coalesce_usecs(struct rcb_common_cb *rcb_common, u32 port_idx)
{
  #line 590 
  if ((rcb_common->dsaf_dev)->dsaf_ver == 3552816U) {
    #line 591 
    return dsaf_read_reg(rcb_common->io_base,37632U) / 350U;
  }
  else {
    #line 594 
    return dsaf_read_reg(rcb_common->io_base,(port_idx + 9484U) * 4U);
  }
}

#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_set_coalesce_usecs(struct rcb_common_cb *rcb_common, u32 port_idx, u32 timeout)
{
  #line 610 
  u32 old_timeout = hns_rcb_get_coalesce_usecs(rcb_common,port_idx);
  #line 612 
  if (timeout == old_timeout) 
                              #line 613 
                              return 0;
  #line 615 
  if ((rcb_common->dsaf_dev)->dsaf_ver == 3552816U) 
    #line 616 
    if ((rcb_common->dsaf_dev)->dsaf_mode != (unsigned int)DSAF_MODE_DISABLE_SP) {
      #line 617 
      _dev_err((rcb_common->dsaf_dev)->dev,(char *)"error: not support coalesce_usecs setting!\n");
      #line 619 
      return -22;
    }
  #line 622 
  if (timeout + 4294967295U > 1022U) {
    #line 623 
    _dev_err((rcb_common->dsaf_dev)->dev,(char *)"error: coalesce_usecs setting supports 1~1023us\n");
    #line 625 
    return -22;
  }
  #line 627 
  hns_rcb_set_port_timeout(rcb_common,port_idx,timeout);
  #line 628 
  return 0;
}

#line 640  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_set_tx_coalesced_frames(struct rcb_common_cb *rcb_common, u32 port_idx, u32 coalesced_frames)
{
  #line 645 
  u64 reg;
  #line 643 
  u32 old_waterline = hns_rcb_get_tx_coalesced_frames(rcb_common,port_idx);
  #line 647 
  if (coalesced_frames == old_waterline) 
                                         #line 648 
                                         return 0;
  #line 650 
  if (coalesced_frames != 1U) {
    #line 651 
    _dev_err((rcb_common->dsaf_dev)->dev,(char *)"error: not support tx coalesce_frames setting!\n");
    #line 653 
    return -22;
  }
  #line 656 
  reg = (unsigned long long)((port_idx + 9244U) * 4U);
  #line 657 
  dsaf_write_reg(rcb_common->io_base,(unsigned int)reg,coalesced_frames);
  #line 658 
  return 0;
}

#line 670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_set_rx_coalesced_frames(struct rcb_common_cb *rcb_common, u32 port_idx, u32 coalesced_frames)
{
  #line 673 
  u32 old_waterline = hns_rcb_get_rx_coalesced_frames(rcb_common,port_idx);
  #line 676 
  if (coalesced_frames == old_waterline) 
                                         #line 677 
                                         return 0;
  #line 679 
  if (rcb_common->desc_num <= coalesced_frames || coalesced_frames + 4294967295U > 1022U) {
    #line 682 
    _dev_err((rcb_common->dsaf_dev)->dev,(char *)"error: not support coalesce_frames setting!\n");
    #line 684 
    return -22;
  }
  #line 687 
  dsaf_write_reg(rcb_common->io_base,(port_idx + 9236U) * 4U,coalesced_frames);
  #line 689 
  return 0;
}

#line 699  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_get_queue_mode(enum dsaf_mode dsaf_mode, u16 *max_vfn, u16 *max_q_per_vf)
{
  #line 702 
  switch ((unsigned int)dsaf_mode) {
    #line 703 
    case (unsigned int)13: 
                           #line 703 
    ;
    #line 704 
    *max_vfn = (unsigned short)1U;
    #line 705 
    *max_q_per_vf = (unsigned short)16U;
    #line 706 
    break;
    #line 707 
    case (unsigned int)9: 
                          #line 707 
    ;
    #line 708 
    case (unsigned int)8: 
                          #line 708 
    ;
    #line 709 
    *max_vfn = (unsigned short)1U;
    #line 710 
    *max_q_per_vf = (unsigned short)1U;
    #line 711 
    break;
    #line 712 
    case (unsigned int)12: 
                           #line 712 
    ;
    #line 713 
    *max_vfn = (unsigned short)64U;
    #line 714 
    *max_q_per_vf = (unsigned short)1U;
    #line 715 
    break;
    #line 716 
    case (unsigned int)16: 
                           #line 716 
    ;
    #line 717 
    *max_vfn = (unsigned short)16U;
    #line 718 
    *max_q_per_vf = (unsigned short)1U;
    #line 719 
    break;
    #line 720 
    default: 
             #line 720 
    ;
    #line 721 
    *max_vfn = (unsigned short)1U;
    #line 722 
    *max_q_per_vf = (unsigned short)16U;
    #line 723 
    break;
  }
  #line 725 
  return;
}

#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
static int hns_rcb_get_ring_num(struct dsaf_device *dsaf_dev)
{
  #line 729 
  switch ((unsigned int)dsaf_dev->dsaf_mode) {
    #line 730 
    case (unsigned int)1: 
                          #line 730 
    ;
    #line 731 
    case (unsigned int)8: 
                          #line 731 
    ;
    #line 732 
    return 1;
    #line 734 
    case (unsigned int)9: 
                          #line 734 
    ;
    #line 735 
    return 6;
    #line 737 
    case (unsigned int)2: 
                          #line 737 
    ;
    #line 738 
    return 32;
    #line 740 
    case (unsigned int)13: 
                           #line 740 
    ;
    #line 741 
    case (unsigned int)4: 
                          #line 741 
    ;
    #line 742 
    case (unsigned int)14: 
                           #line 742 
    ;
    #line 743 
    case (unsigned int)16: 
                           #line 743 
    ;
    #line 744 
    case (unsigned int)15: 
                           #line 744 
    ;
    #line 745 
    case (unsigned int)3: 
                          #line 745 
    ;
    #line 746 
    return 96;
    #line 748 
    case (unsigned int)11: 
                           #line 748 
    ;
    #line 749 
    case (unsigned int)10: 
                           #line 749 
    ;
    #line 750 
    case (unsigned int)5: 
                          #line 750 
    ;
    #line 751 
    case (unsigned int)12: 
                           #line 751 
    ;
    #line 752 
    case (unsigned int)6: 
                          #line 752 
    ;
    #line 753 
    return 128;
    #line 755 
    default: 
             #line 755 
    ;
    #line 756 
    _dev_warn(dsaf_dev->dev,(char *)"get ring num fail,use default!dsaf_mode=%d\n",(unsigned int)dsaf_dev->dsaf_mode);
    #line 759 
    return 128;
  }
}

#line 763  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
static u8 *hns_rcb_common_get_vaddr(struct rcb_common_cb *rcb_common)
{
  #line 765 
  struct dsaf_device *dsaf_dev = rcb_common->dsaf_dev;
  #line 767 
  return dsaf_dev->ppe_base + 524288U;
}

#line 770  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
static phys_addr_t hns_rcb_common_get_paddr(struct rcb_common_cb *rcb_common)
{
  #line 772 
  struct dsaf_device *dsaf_dev = rcb_common->dsaf_dev;
  #line 774 
  return dsaf_dev->ppe_paddr + 524288ULL;
}

#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_common_get_cfg(struct dsaf_device *dsaf_dev, int comm_index)
{
  #line 780 
  struct rcb_common_cb *rcb_common;
  #line 782 
  u16 max_vfn;
  #line 783 
  u16 max_q_per_vf;
  #line 781 
  enum dsaf_mode dsaf_mode = dsaf_dev->dsaf_mode;
  #line 784 
  int ring_num = hns_rcb_get_ring_num(dsaf_dev);
  #line 787 
  ;
  #line 786 
  rcb_common = (struct rcb_common_cb *)cif_devm_kzalloc(dsaf_dev->dev,
                         __ab_c_size((unsigned long)ring_num,20480UL,4096UL),
                         3264U);
  #line 790 
  if (rcb_common == (struct rcb_common_cb *)0) {
    #line 791 
    _dev_err(dsaf_dev->dev,(char *)"rcb common devm_kzalloc fail!\n");
    #line 792 
    return -12;
  }
  #line 794 
  rcb_common->comm_index = (unsigned char)comm_index;
  #line 795 
  rcb_common->ring_num = (unsigned int)ring_num;
  #line 796 
  rcb_common->dsaf_dev = dsaf_dev;
  #line 798 
  rcb_common->desc_num = dsaf_dev->desc_num;
  #line 800 
  hns_rcb_get_queue_mode(dsaf_mode,& max_vfn,& max_q_per_vf);
  #line 801 
  rcb_common->max_vfn = max_vfn;
  #line 802 
  rcb_common->max_q_per_vf = max_q_per_vf;
  #line 804 
  rcb_common->io_base = hns_rcb_common_get_vaddr(rcb_common);
  #line 805 
  rcb_common->phy_base = hns_rcb_common_get_paddr(rcb_common);
  #line 807 
  dsaf_dev->rcb_common[comm_index] = rcb_common;
  #line 808 
  return 0;
}

#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_common_free_cfg(struct dsaf_device *dsaf_dev, u32 comm_index)
{
  #line 814 
  dsaf_dev->rcb_common[comm_index] = (struct rcb_common_cb *)0;
  #line 815 
  return;
}

#line 817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_update_stats(struct hnae_queue *queue)
{
  #line 820 
  void *__mptr;
  #line 820 
  __mptr = (void *)queue;
  #line 819 
  struct ring_pair_cb *ring = ((struct ring_pair_cb *)(__mptr + 18446744073709547520U));
  #line 821 
  struct dsaf_device *dsaf_dev = (ring->rcb_common)->dsaf_dev;
  #line 822 
  struct ppe_common_cb *ppe_common = dsaf_dev->ppe_common[(int)(ring->rcb_common)->comm_index];
  #line 824 
  struct hns_ring_hw_stats *hw_stats = & ring->hw_stats;
  #line 827 
  hw_stats->rx_pkts += (unsigned long long)dsaf_read_reg(queue->io_base,44U);
  #line 828 
  dsaf_write_reg(queue->io_base,44U,1U);
  #line 831 
  hw_stats->ppe_rx_ok_pkts += (unsigned long long)dsaf_read_reg(ppe_common->io_base,
                      (unsigned int)(((int)ring->index + 384) * 4));
  #line 833 
  hw_stats->ppe_rx_drop_pkts += (unsigned long long)dsaf_read_reg(ppe_common->io_base,
                      (unsigned int)(((int)ring->index + 192) * 4));
  #line 836 
  hw_stats->tx_pkts += (unsigned long long)dsaf_read_reg(queue->io_base,108U);
  #line 837 
  dsaf_write_reg(queue->io_base,108U,1U);
  #line 840 
  hw_stats->ppe_tx_ok_pkts += (unsigned long long)dsaf_read_reg(ppe_common->io_base,
                      (unsigned int)(((int)ring->index + 768) * 4));
  #line 842 
  hw_stats->ppe_tx_drop_pkts += (unsigned long long)dsaf_read_reg(ppe_common->io_base,
                      (unsigned int)(((int)ring->index + 576) * 4));
  #line 842 
  return;
}

#line 850  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_get_stats(struct hnae_queue *queue, u64 *data)
{
  #line 854 
  void *__mptr;
  #line 852 
  u64 *regs_buff = data;
  #line 854 
  __mptr = (void *)queue;
  #line 853 
  struct ring_pair_cb *ring = ((struct ring_pair_cb *)(__mptr + 18446744073709547520U));
  #line 855 
  struct hns_ring_hw_stats *hw_stats = & ring->hw_stats;
  #line 857 
  *regs_buff = hw_stats->tx_pkts;
  #line 858 
  *(regs_buff + 1U) = hw_stats->ppe_tx_ok_pkts;
  #line 859 
  *(regs_buff + 2U) = hw_stats->ppe_tx_drop_pkts;
  #line 860 
  *(regs_buff + 3U) = (unsigned long long)dsaf_read_reg(queue->io_base,96U);
  #line 863 
  *(regs_buff + 4U) = queue->tx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_176.tx_pkts;
  #line 864 
  *(regs_buff + 5U) = queue->tx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_176.tx_bytes;
  #line 865 
  *(regs_buff + 6U) = queue->tx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_176.tx_err_cnt;
  #line 866 
  *(regs_buff + 7U) = queue->tx_ring.stats.io_err_cnt;
  #line 867 
  *(regs_buff + 8U) = queue->tx_ring.stats.sw_err_cnt;
  #line 868 
  *(regs_buff + 9U) = queue->tx_ring.stats.seg_pkt_cnt;
  #line 869 
  *(regs_buff + 10U) = queue->tx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_176.restart_queue;
  #line 870 
  *(regs_buff + 11U) = queue->tx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_176.tx_busy;
  #line 872 
  *(regs_buff + 12U) = hw_stats->rx_pkts;
  #line 873 
  *(regs_buff + 13U) = hw_stats->ppe_rx_ok_pkts;
  #line 874 
  *(regs_buff + 14U) = hw_stats->ppe_rx_drop_pkts;
  #line 875 
  *(regs_buff + 15U) = (unsigned long long)dsaf_read_reg(queue->io_base,32U);
  #line 878 
  *(regs_buff + 16U) = queue->rx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_177.rx_pkts;
  #line 879 
  *(regs_buff + 17U) = queue->rx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_177.rx_bytes;
  #line 880 
  *(regs_buff + 18U) = queue->rx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_177.rx_err_cnt;
  #line 881 
  *(regs_buff + 19U) = queue->rx_ring.stats.io_err_cnt;
  #line 882 
  *(regs_buff + 20U) = queue->rx_ring.stats.sw_err_cnt;
  #line 883 
  *(regs_buff + 21U) = queue->rx_ring.stats.seg_pkt_cnt;
  #line 884 
  *(regs_buff + 22U) = queue->rx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_177.reuse_pg_cnt;
  #line 885 
  *(regs_buff + 23U) = queue->rx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_177.err_pkt_len;
  #line 886 
  *(regs_buff + 24U) = queue->rx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_177.non_vld_descs;
  #line 887 
  *(regs_buff + 25U) = queue->rx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_177.err_bd_num;
  #line 888 
  *(regs_buff + 26U) = queue->rx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_177.l2_err;
  #line 889 
  *(regs_buff + 27U) = queue->rx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_177.l3l4_csum_err;
  #line 890 
  return;
}

#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_get_ring_sset_count(int stringset)
{
  #line 899 
  if (stringset == 1) 
                      #line 900 
                      return 28;
  #line 902 
  return 0;
}

#line 909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_get_common_regs_count(void)
{
  #line 911 
  return 80;
}

#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
int hns_rcb_get_ring_regs_count(void)
{
  #line 920 
  return 40;
}

#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_get_strings(int stringset, u8 *data, int index)
{
  #line 931 
  char *buff = (char *)data;
  #line 933 
  if (stringset != 1) 
                      #line 934 
                      return;
  #line 936 
  snprintf(buff,32UL,(char *)"tx_ring%d_rcb_pkt_num",index);
  #line 937 
  buff += 32U;
  #line 938 
  snprintf(buff,32UL,(char *)"tx_ring%d_ppe_tx_pkt_num",index);
  #line 939 
  buff += 32U;
  #line 940 
  snprintf(buff,32UL,(char *)"tx_ring%d_ppe_drop_pkt_num",index);
  #line 941 
  buff += 32U;
  #line 942 
  snprintf(buff,32UL,(char *)"tx_ring%d_fbd_num",index);
  #line 943 
  buff += 32U;
  #line 945 
  snprintf(buff,32UL,(char *)"tx_ring%d_pkt_num",index);
  #line 946 
  buff += 32U;
  #line 947 
  snprintf(buff,32UL,(char *)"tx_ring%d_bytes",index);
  #line 948 
  buff += 32U;
  #line 949 
  snprintf(buff,32UL,(char *)"tx_ring%d_err_cnt",index);
  #line 950 
  buff += 32U;
  #line 951 
  snprintf(buff,32UL,(char *)"tx_ring%d_io_err",index);
  #line 952 
  buff += 32U;
  #line 953 
  snprintf(buff,32UL,(char *)"tx_ring%d_sw_err",index);
  #line 954 
  buff += 32U;
  #line 955 
  snprintf(buff,32UL,(char *)"tx_ring%d_seg_pkt",index);
  #line 956 
  buff += 32U;
  #line 957 
  snprintf(buff,32UL,(char *)"tx_ring%d_restart_queue",index);
  #line 958 
  buff += 32U;
  #line 959 
  snprintf(buff,32UL,(char *)"tx_ring%d_tx_busy",index);
  #line 960 
  buff += 32U;
  #line 962 
  snprintf(buff,32UL,(char *)"rx_ring%d_rcb_pkt_num",index);
  #line 963 
  buff += 32U;
  #line 964 
  snprintf(buff,32UL,(char *)"rx_ring%d_ppe_pkt_num",index);
  #line 965 
  buff += 32U;
  #line 966 
  snprintf(buff,32UL,(char *)"rx_ring%d_ppe_drop_pkt_num",index);
  #line 967 
  buff += 32U;
  #line 968 
  snprintf(buff,32UL,(char *)"rx_ring%d_fbd_num",index);
  #line 969 
  buff += 32U;
  #line 971 
  snprintf(buff,32UL,(char *)"rx_ring%d_pkt_num",index);
  #line 972 
  buff += 32U;
  #line 973 
  snprintf(buff,32UL,(char *)"rx_ring%d_bytes",index);
  #line 974 
  buff += 32U;
  #line 975 
  snprintf(buff,32UL,(char *)"rx_ring%d_err_cnt",index);
  #line 976 
  buff += 32U;
  #line 977 
  snprintf(buff,32UL,(char *)"rx_ring%d_io_err",index);
  #line 978 
  buff += 32U;
  #line 979 
  snprintf(buff,32UL,(char *)"rx_ring%d_sw_err",index);
  #line 980 
  buff += 32U;
  #line 981 
  snprintf(buff,32UL,(char *)"rx_ring%d_seg_pkt",index);
  #line 982 
  buff += 32U;
  #line 983 
  snprintf(buff,32UL,(char *)"rx_ring%d_reuse_pg",index);
  #line 984 
  buff += 32U;
  #line 985 
  snprintf(buff,32UL,(char *)"rx_ring%d_len_err",index);
  #line 986 
  buff += 32U;
  #line 987 
  snprintf(buff,32UL,(char *)"rx_ring%d_non_vld_desc_err",index);
  #line 988 
  buff += 32U;
  #line 989 
  snprintf(buff,32UL,(char *)"rx_ring%d_bd_num_err",index);
  #line 990 
  buff += 32U;
  #line 991 
  snprintf(buff,32UL,(char *)"rx_ring%d_l2_err",index);
  #line 992 
  buff += 32U;
  #line 993 
  snprintf(buff,32UL,(char *)"rx_ring%d_l3l4csum_err",index);
  #line 994 
  return;
}

#line 996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_get_common_regs(struct rcb_common_cb *rcb_com, void *data)
{
  #line 1001 
  u32 reg_tmp;
  #line 1002 
  u32 reg_num_tmp;
  #line 998 
  u32 *regs = (u32 *)data;
  #line 999 
  bool is_ver1 = (_Bool)((rcb_com->dsaf_dev)->dsaf_ver == 3552816U);
  #line 1000 
  bool is_dbg = (_Bool)((rcb_com->dsaf_dev)->dsaf_mode == (unsigned int)DSAF_MODE_DISABLE_SP);
  #line 1003 
  u32 i = 0U;
  #line 1006 
  *regs = dsaf_read_reg(rcb_com->io_base,0U);
  #line 1007 
  *(regs + 1U) = dsaf_read_reg(rcb_com->io_base,12U);
  #line 1008 
  *(regs + 2U) = dsaf_read_reg(rcb_com->io_base,16U);
  #line 1010 
  *(regs + 3U) = dsaf_read_reg(rcb_com->io_base,48U);
  #line 1011 
  *(regs + 4U) = dsaf_read_reg(rcb_com->io_base,52U);
  #line 1012 
  *(regs + 5U) = dsaf_read_reg(rcb_com->io_base,56U);
  #line 1013 
  *(regs + 6U) = dsaf_read_reg(rcb_com->io_base,60U);
  #line 1014 
  *(regs + 7U) = dsaf_read_reg(rcb_com->io_base,64U);
  #line 1015 
  *(regs + 8U) = dsaf_read_reg(rcb_com->io_base,68U);
  #line 1017 
  *(regs + 9U) = dsaf_read_reg(rcb_com->io_base,928U);
  #line 1018 
  *(regs + 10U) = dsaf_read_reg(rcb_com->io_base,936U);
  #line 1019 
  *(regs + 11U) = dsaf_read_reg(rcb_com->io_base,1024U);
  #line 1020 
  *(regs + 12U) = dsaf_read_reg(rcb_com->io_base,1032U);
  #line 1021 
  *(regs + 13U) = dsaf_read_reg(rcb_com->io_base,1040U);
  #line 1022 
  *(regs + 14U) = dsaf_read_reg(rcb_com->io_base,1052U);
  #line 1023 
  *(regs + 15U) = dsaf_read_reg(rcb_com->io_base,1056U);
  #line 1024 
  *(regs + 16U) = dsaf_read_reg(rcb_com->io_base,1060U);
  #line 1025 
  *(regs + 17U) = dsaf_read_reg(rcb_com->io_base,1064U);
  #line 1026 
  *(regs + 18U) = dsaf_read_reg(rcb_com->io_base,1068U);
  #line 1027 
  *(regs + 19U) = dsaf_read_reg(rcb_com->io_base,1072U);
  #line 1028 
  *(regs + 20U) = dsaf_read_reg(rcb_com->io_base,1076U);
  #line 1029 
  *(regs + 21U) = dsaf_read_reg(rcb_com->io_base,1080U);
  #line 1030 
  *(regs + 22U) = dsaf_read_reg(rcb_com->io_base,1084U);
  #line 1031 
  *(regs + 23U) = dsaf_read_reg(rcb_com->io_base,1088U);
  #line 1032 
  *(regs + 24U) = dsaf_read_reg(rcb_com->io_base,1104U);
  #line 1033 
  *(regs + 25U) = dsaf_read_reg(rcb_com->io_base,1116U);
  #line 1034 
  *(regs + 26U) = dsaf_read_reg(rcb_com->io_base,1120U);
  #line 1035 
  *(regs + 27U) = dsaf_read_reg(rcb_com->io_base,1124U);
  #line 1037 
  *(regs + 28U) = dsaf_read_reg(rcb_com->io_base,1136U);
  #line 1038 
  *(regs + 29U) = dsaf_read_reg(rcb_com->io_base,1140U);
  #line 1039 
  *(regs + 30U) = dsaf_read_reg(rcb_com->io_base,1144U);
  #line 1040 
  *(regs + 31U) = dsaf_read_reg(rcb_com->io_base,1148U);
  #line 1041 
  *(regs + 32U) = dsaf_read_reg(rcb_com->io_base,1152U);
  #line 1042 
  *(regs + 33U) = dsaf_read_reg(rcb_com->io_base,1168U);
  #line 1043 
  *(regs + 34U) = dsaf_read_reg(rcb_com->io_base,1172U);
  #line 1044 
  *(regs + 35U) = dsaf_read_reg(rcb_com->io_base,1176U);
  #line 1045 
  *(regs + 36U) = dsaf_read_reg(rcb_com->io_base,1180U);
  #line 1046 
  *(regs + 37U) = dsaf_read_reg(rcb_com->io_base,1184U);
  #line 1049 
  i = 0U;
  #line 1049 
  while (i <= 15U) {
    #line 1051 
    *(regs + (unsigned long)(i + 38U)) = dsaf_read_reg(rcb_com->io_base,(i + 9216U) * 4U);
    #line 1053 
    *(regs + (unsigned long)(i + 54U)) = dsaf_read_reg(rcb_com->io_base,(i + 9236U) * 4U);
    #line 1049 
    i ++;
  }
  #line 1056 
  if ((int)is_ver1 != 0) 
                         #line 1056 
                         reg_tmp = 37632U; else 
                                                #line 1056 
                                                reg_tmp = 37936U;
  #line 1057 
  if ((int)is_ver1 != 0 || (int)is_dbg != 0) 
                                             #line 1057 
                                             reg_num_tmp = 1U; else 
                                                                    #line 1057 
                                                                    reg_num_tmp = 6U;
  #line 1058 
  i = 0U;
  #line 1058 
  while (i < reg_num_tmp) {
    #line 1059 
    *(regs + (unsigned long)(i + 70U)) = dsaf_read_reg(rcb_com->io_base,reg_tmp);
    #line 1058 
    i ++;
  }
  #line 1061 
  *(regs + 76U) = dsaf_read_reg(rcb_com->io_base,37636U);
  #line 1062 
  *(regs + 77U) = dsaf_read_reg(rcb_com->io_base,37640U);
  #line 1065 
  i = 78U;
  #line 1065 
  while (i <= 79U) {
    #line 1066 
    *(regs + (unsigned long)i) = 3435973836U;
    #line 1065 
    i ++;
  }
  #line 1067 
  return;
}

#line 1069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_rcb.c"
void hns_rcb_get_ring_regs(struct hnae_queue *queue, void *data)
{
  #line 1073 
  void *__mptr;
  #line 1071 
  u32 *regs = (u32 *)data;
  #line 1073 
  __mptr = (void *)queue;
  #line 1072 
  struct ring_pair_cb *ring_pair = ((struct ring_pair_cb *)(__mptr + 18446744073709547520U));
  #line 1074 
  u32 i = 0U;
  #line 1077 
  *regs = dsaf_read_reg(queue->io_base,0U);
  #line 1078 
  *(regs + 1U) = dsaf_read_reg(queue->io_base,4U);
  #line 1079 
  *(regs + 2U) = dsaf_read_reg(queue->io_base,8U);
  #line 1080 
  *(regs + 3U) = dsaf_read_reg(queue->io_base,12U);
  #line 1081 
  *(regs + 4U) = dsaf_read_reg(queue->io_base,16U);
  #line 1082 
  *(regs + 5U) = dsaf_read_reg(queue->io_base,24U);
  #line 1083 
  *(regs + 6U) = dsaf_read_reg(queue->io_base,28U);
  #line 1084 
  *(regs + 7U) = dsaf_read_reg(queue->io_base,32U);
  #line 1085 
  *(regs + 8U) = dsaf_read_reg(queue->io_base,44U);
  #line 1087 
  *(regs + 9U) = dsaf_read_reg(queue->io_base,64U);
  #line 1088 
  *(regs + 10U) = dsaf_read_reg(queue->io_base,68U);
  #line 1089 
  *(regs + 11U) = dsaf_read_reg(queue->io_base,72U);
  #line 1090 
  *(regs + 12U) = dsaf_read_reg(queue->io_base,76U);
  #line 1091 
  *(regs + 13U) = dsaf_read_reg(queue->io_base,80U);
  #line 1092 
  *(regs + 15U) = dsaf_read_reg(queue->io_base,88U);
  #line 1093 
  *(regs + 16U) = dsaf_read_reg(queue->io_base,92U);
  #line 1094 
  *(regs + 17U) = dsaf_read_reg(queue->io_base,96U);
  #line 1095 
  *(regs + 18U) = dsaf_read_reg(queue->io_base,100U);
  #line 1096 
  *(regs + 19U) = dsaf_read_reg(queue->io_base,108U);
  #line 1098 
  *(regs + 20U) = dsaf_read_reg(queue->io_base,124U);
  #line 1099 
  *(regs + 21U) = dsaf_read_reg(queue->io_base,128U);
  #line 1100 
  *(regs + 22U) = dsaf_read_reg(queue->io_base,140U);
  #line 1101 
  *(regs + 23U) = dsaf_read_reg(queue->io_base,144U);
  #line 1102 
  *(regs + 24U) = dsaf_read_reg(queue->io_base,148U);
  #line 1103 
  *(regs + 25U) = dsaf_read_reg(queue->io_base,152U);
  #line 1104 
  *(regs + 26U) = dsaf_read_reg(queue->io_base,156U);
  #line 1106 
  *(regs + 27U) = dsaf_read_reg(queue->io_base,160U);
  #line 1107 
  *(regs + 28U) = dsaf_read_reg(queue->io_base,164U);
  #line 1108 
  *(regs + 29U) = dsaf_read_reg(queue->io_base,172U);
  #line 1109 
  *(regs + 30U) = dsaf_read_reg(queue->io_base,176U);
  #line 1110 
  *(regs + 31U) = dsaf_read_reg(queue->io_base,184U);
  #line 1111 
  *(regs + 32U) = dsaf_read_reg(queue->io_base,188U);
  #line 1112 
  *(regs + 33U) = dsaf_read_reg(queue->io_base,196U);
  #line 1113 
  *(regs + 34U) = dsaf_read_reg(queue->io_base,200U);
  #line 1116 
  i = 35U;
  #line 1116 
  while (i <= 39U) {
    #line 1117 
    *(regs + (unsigned long)i) = (unsigned int)ring_pair->index + 3435973632U;
    #line 1116 
    i ++;
  }
  #line 1118 
  return;
}

#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_rcb.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags)
{
  #line 679 
  return ldv_devm_kzalloc(size,flags);
}

#line 11  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_ae_adapt.i.aux"
#line 11 
int ldv_atomic_add_return(int i, atomic_t *v);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_ae_adapt.i.aux"
static int atomic_add_return(int i, atomic_t *v);
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
__inline static int atomic_inc_return(atomic_t *v)
{
  #line 284 
  return atomic_add_return(1,v);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_ae_adapt.i.aux"
static void *ERR_PTR(long error);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25 
void *ldv_err_ptr(long error);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 668 
#line 411  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_ae_adapt.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hnae.h"
#line 578 
int hnae_ae_register(struct hnae_ae_dev *, struct module *);
#line 579 
#line 579 
void hnae_ae_unregister(struct hnae_ae_dev *);
#line 438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
#line 1000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
int hns_dsaf_ae_init(struct dsaf_device *dsaf_dev);
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
#line 1024  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
void hns_dsaf_ae_uninit(struct dsaf_device *dsaf_dev);
#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
#line 441 
void hns_dsaf_update_stats(struct dsaf_device *dsaf_dev, u32 node_num);
#line 443 
#line 443 
int hns_dsaf_get_sset_count(struct dsaf_device *dsaf_dev, int stringset);
#line 444 
#line 444 
void hns_dsaf_get_stats(struct dsaf_device *ddev, u64 *data, int port);
#line 445 
#line 445 
void hns_dsaf_get_strings(int stringset, u8 *data, int port, struct dsaf_device *dsaf_dev);
#line 448 
#line 448 
void hns_dsaf_get_regs(struct dsaf_device *ddev, u32 port, void *data);
#line 449 
#line 449 
int hns_dsaf_get_regs_count(void);
#line 450 
#line 450 
void hns_dsaf_set_promisc_mode(struct dsaf_device *dsaf_dev, u32 en);
#line 454 
#line 454 
void hns_dsaf_get_rx_mac_pause_en(struct dsaf_device *dsaf_dev, int mac_id, u32 *en);
#line 456 
#line 456 
int hns_dsaf_set_rx_mac_pause_en(struct dsaf_device *dsaf_dev, int mac_id, u32 en);
#line 464 
#line 464 
int hns_dsaf_wait_pkt_clean(struct dsaf_device *dsaf_dev, int port);
#line 430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.h"
#line 430 
bool hns_mac_need_adjust_link(struct hns_mac_cb *mac_cb, int speed, int duplex);
#line 431 
#line 431 
void hns_mac_get_link_status(struct hns_mac_cb *mac_cb, u32 *link_status);
#line 432 
#line 432 
int hns_mac_change_vf_addr(struct hns_mac_cb *mac_cb, u32 vmid, char *addr);
#line 433 
#line 433 
int hns_mac_set_multi(struct hns_mac_cb *mac_cb, u32 port_num, char *addr, bool enable);
#line 435 
#line 435 
int hns_mac_vm_config_bc_en(struct hns_mac_cb *mac_cb, u32 vmid, bool enable);
#line 436 
#line 436 
void hns_mac_start(struct hns_mac_cb *mac_cb);
#line 437 
#line 437 
void hns_mac_stop(struct hns_mac_cb *mac_cb);
#line 439 
#line 439 
void hns_mac_adjust_link(struct hns_mac_cb *mac_cb, int speed, int duplex);
#line 440 
#line 440 
void hns_mac_reset(struct hns_mac_cb *mac_cb);
#line 441 
#line 441 
void hns_mac_get_autoneg(struct hns_mac_cb *mac_cb, u32 *auto_neg);
#line 442 
#line 442 
void hns_mac_get_pauseparam(struct hns_mac_cb *mac_cb, u32 *rx_en, u32 *tx_en);
#line 443 
#line 443 
int hns_mac_set_autoneg(struct hns_mac_cb *mac_cb, u8 enable);
#line 444 
#line 444 
int hns_mac_set_pauseparam(struct hns_mac_cb *mac_cb, u32 rx_en, u32 tx_en);
#line 445 
#line 445 
int hns_mac_set_mtu(struct hns_mac_cb *mac_cb, u32 new_mtu, u32 buf_size);
#line 446 
#line 446 
int hns_mac_get_port_info(struct hns_mac_cb *mac_cb, u8 *auto_neg, u16 *speed, u8 *duplex);
#line 448 
#line 448 
int hns_mac_config_mac_loopback(struct hns_mac_cb *mac_cb, enum hnae_loop loop, int en);
#line 450 
#line 450 
void hns_mac_update_stats(struct hns_mac_cb *mac_cb);
#line 451 
#line 451 
void hns_mac_get_stats(struct hns_mac_cb *mac_cb, u64 *data);
#line 452 
#line 452 
void hns_mac_get_strings(struct hns_mac_cb *mac_cb, int stringset, u8 *data);
#line 453 
#line 453 
int hns_mac_get_sset_count(struct hns_mac_cb *mac_cb, int stringset);
#line 454 
#line 454 
void hns_mac_get_regs(struct hns_mac_cb *mac_cb, void *data);
#line 455 
#line 455 
int hns_mac_get_regs_count(struct hns_mac_cb *mac_cb);
#line 456 
#line 456 
void hns_set_led_opt(struct hns_mac_cb *mac_cb);
#line 457 
#line 457 
int hns_cpld_led_set_id(struct hns_mac_cb *mac_cb, enum hnae_led_state status);
#line 459 
#line 459 
void hns_mac_set_promisc(struct hns_mac_cb *mac_cb, u8 en);
#line 460 
#line 460 
int hns_mac_get_inner_port_num(struct hns_mac_cb *mac_cb, u8 vmid, u8 *port_num);
#line 462 
#line 462 
int hns_mac_add_uc_addr(struct hns_mac_cb *mac_cb, u8 vf_id, unsigned char *addr);
#line 464 
#line 464 
int hns_mac_rm_uc_addr(struct hns_mac_cb *mac_cb, u8 vf_id, unsigned char *addr);
#line 466 
#line 466 
int hns_mac_clr_multicast(struct hns_mac_cb *mac_cb, int vfn);
#line 467 
#line 467 
void hns_mac_enable(struct hns_mac_cb *mac_cb, enum mac_commom_mode mode);
#line 468 
#line 468 
void hns_mac_disable(struct hns_mac_cb *mac_cb, enum mac_commom_mode mode);
#line 469 
#line 469 
int hns_mac_wait_fifo_clean(struct hns_mac_cb *mac_cb);
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.h"
#line 99 
int hns_ppe_wait_tx_fifo_clean(struct hns_ppe_cb *ppe_cb);
#line 104 
#line 104 
void hns_ppe_reset_common(struct dsaf_device *dsaf_dev, u8 ppe_common_index);
#line 106 
#line 106 
void hns_ppe_update_stats(struct hns_ppe_cb *ppe_cb);
#line 108 
#line 108 
int hns_ppe_get_sset_count(int stringset);
#line 109 
#line 109 
int hns_ppe_get_regs_count(void);
#line 110 
#line 110 
void hns_ppe_get_regs(struct hns_ppe_cb *ppe_cb, void *data);
#line 112 
#line 112 
void hns_ppe_get_strings(struct hns_ppe_cb *ppe_cb, int stringset, u8 *data);
#line 113 
#line 113 
void hns_ppe_get_stats(struct hns_ppe_cb *ppe_cb, u64 *data);
#line 114 
#line 114 
void hns_ppe_set_tso_enable(struct hns_ppe_cb *ppe_cb, u32 value);
#line 115 
#line 115 
void hns_ppe_set_rss_key(struct hns_ppe_cb *ppe_cb, u32 *rss_key);
#line 117 
#line 117 
void hns_ppe_set_indir_table(struct hns_ppe_cb *ppe_cb, u32 *rss_tab);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static struct hns_mac_cb *hns_get_mac_cb(struct hnae_handle *handle)
{
  #line 20 
  struct hnae_vf_cb *vf_cb = hns_ae_get_vf_cb(handle);
  #line 22 
  return vf_cb->mac_cb;
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static struct dsaf_device *hns_ae_get_dsaf_dev(struct hnae_ae_dev *dev)
{
  #line 27 
  void *__mptr;
  #line 27 
  __mptr = (void *)dev;
  #line 27 
  return ((struct dsaf_device *)(__mptr + 18446744073709551608U));
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static struct hns_ppe_cb *hns_get_ppe_cb(struct hnae_handle *handle)
{
  #line 32 
  int ppe_index;
  #line 33 
  struct ppe_common_cb *ppe_comm;
  #line 34 
  struct hnae_vf_cb *vf_cb = hns_ae_get_vf_cb(handle);
  #line 36 
  ppe_comm = (vf_cb->dsaf_dev)->ppe_common[0];
  #line 37 
  ppe_index = (int)vf_cb->port_index;
  #line 39 
  return & ppe_comm->ppe_cb[ppe_index];
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_get_q_num_per_vf(struct dsaf_device *dsaf_dev, int port)
{
  #line 45 
  return (int)(dsaf_dev->rcb_common[0])->max_q_per_vf;
}

#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_get_vf_num_per_port(struct dsaf_device *dsaf_dev, int port)
{
  #line 51 
  return (int)(dsaf_dev->rcb_common[0])->max_vfn;
}

#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static struct ring_pair_cb *hns_ae_get_base_ring_pair(struct dsaf_device *dsaf_dev, int port)
{
  #line 57 
  struct rcb_common_cb *rcb_comm = dsaf_dev->rcb_common[0];
  #line 58 
  int q_num = (int)rcb_comm->max_q_per_vf;
  #line 59 
  int vf_num = (int)rcb_comm->max_vfn;
  #line 61 
  return & rcb_comm->ring_pair_cb[(port * q_num) * vf_num];
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static struct ring_pair_cb *hns_ae_get_ring_pair(struct hnae_queue *q)
{
  #line 66 
  void *__mptr;
  #line 66 
  __mptr = (void *)q;
  #line 66 
  return ((struct ring_pair_cb *)(__mptr + 18446744073709547520U));
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static struct hnae_handle *hns_ae_get_handle(struct hnae_ae_dev *dev, u32 port_id)
{
  #line 72 
  int vfnum_per_port;
  #line 73 
  int qnum_per_vf;
  #line 74 
  int i;
  #line 75 
  struct dsaf_device *dsaf_dev;
  #line 76 
  struct hnae_handle *ae_handle;
  #line 77 
  struct ring_pair_cb *ring_pair_cb;
  #line 78 
  struct hnae_vf_cb *vf_cb;
  #line 80 
  dsaf_dev = hns_ae_get_dsaf_dev(dev);
  #line 82 
  ring_pair_cb = hns_ae_get_base_ring_pair(dsaf_dev,(int)port_id);
  #line 83 
  vfnum_per_port = hns_ae_get_vf_num_per_port(dsaf_dev,(int)port_id);
  #line 84 
  qnum_per_vf = hns_ae_get_q_num_per_vf(dsaf_dev,(int)port_id);
  #line 86 
  vf_cb = (struct hnae_vf_cb *)kzalloc(((unsigned long)qnum_per_vf + 17UL) * 8UL,3264U);
  #line 88 
  if ((long)(vf_cb == (struct hnae_vf_cb *)0) != 0L) {
    #line 89 
    _dev_err(dsaf_dev->dev,(char *)"malloc vf_cb fail!\n");
    #line 90 
    ae_handle = (struct hnae_handle *)ERR_PTR(-12L);
    #line 91 
    goto handle_err;
  }
  #line 93 
  ae_handle = & vf_cb->ae_handle;
  #line 95 
  ae_handle->owner_dev = dsaf_dev->dev;
  #line 96 
  ae_handle->dev = dev;
  #line 97 
  ae_handle->q_num = qnum_per_vf;
  #line 98 
  ae_handle->coal_param = 30U;
  #line 101 
  ae_handle->vf_id = 0;
  #line 101 
  while (ae_handle->vf_id < vfnum_per_port) {
    #line 103 
    if ((unsigned int)ring_pair_cb->used_by_vf == 0U) 
                                                      #line 104 
                                                      break;
    #line 105 
    ring_pair_cb += (unsigned long)qnum_per_vf;
    #line 102 
    (ae_handle->vf_id) ++;
  }
  #line 107 
  if (ae_handle->vf_id >= vfnum_per_port) {
    #line 108 
    _dev_err(dsaf_dev->dev,(char *)"malloc queue fail!\n");
    #line 109 
    ae_handle = (struct hnae_handle *)ERR_PTR(-22L);
    #line 110 
    goto vf_id_err;
  }
  #line 113 
  ae_handle->qs = (struct hnae_queue **)(& ae_handle->qs + 1U);
  #line 114 
  i = 0;
  #line 114 
  while (i < qnum_per_vf) {
    #line 115 
    *(ae_handle->qs + (unsigned long)i) = & ring_pair_cb->q;
    #line 116 
    (*(ae_handle->qs + (unsigned long)i))->rx_ring.q = *(ae_handle->qs + (unsigned long)i);
    #line 117 
    (*(ae_handle->qs + (unsigned long)i))->tx_ring.q = *(ae_handle->qs + (unsigned long)i);
    #line 119 
    ring_pair_cb->used_by_vf = (unsigned char)1U;
    #line 120 
    ring_pair_cb ++;
    #line 114 
    i ++;
  }
  #line 123 
  vf_cb->dsaf_dev = dsaf_dev;
  #line 124 
  vf_cb->port_index = (unsigned char)port_id;
  #line 125 
  vf_cb->mac_cb = dsaf_dev->mac_cb[port_id];
  #line 127 
  ae_handle->phy_if = (vf_cb->mac_cb)->phy_if;
  #line 128 
  ae_handle->phy_dev = (vf_cb->mac_cb)->phy_dev;
  #line 129 
  ae_handle->if_support = (vf_cb->mac_cb)->if_support;
  #line 130 
  ae_handle->port_type = (vf_cb->mac_cb)->mac_type;
  #line 131 
  ae_handle->media_type = (vf_cb->mac_cb)->media_type;
  #line 132 
  ae_handle->dport_id = port_id;
  #line 134 
  return ae_handle;
  #line 135 
  vf_id_err: 
             #line 135 
  ;
  #line 136 
  kfree((void *)vf_cb);
  #line 137 
  handle_err: 
              #line 137 
  ;
  #line 138 
  return ae_handle;
}

#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_put_handle(struct hnae_handle *handle)
{
  #line 144 
  int i;
  #line 143 
  struct hnae_vf_cb *vf_cb = hns_ae_get_vf_cb(handle);
  #line 146 
  i = 0;
  #line 146 
  while (handle->q_num > i) {
    #line 147 
    hns_ae_get_ring_pair(*(handle->qs + (unsigned long)i))->used_by_vf = (unsigned char)0U;
    #line 146 
    i ++;
  }
  #line 149 
  kfree((void *)vf_cb);
  #line 150 
  return;
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_wait_flow_down(struct hnae_handle *handle)
{
  #line 154 
  struct dsaf_device *dsaf_dev;
  #line 155 
  struct hns_ppe_cb *ppe_cb;
  #line 156 
  struct hnae_vf_cb *vf_cb;
  #line 157 
  int ret;
  #line 158 
  int i;
  #line 160 
  i = 0;
  #line 160 
  while (handle->q_num > i) {
    #line 161 
    ret = hns_rcb_wait_tx_ring_clean(*(handle->qs + (unsigned long)i));
    #line 162 
    if (ret != 0) 
                  #line 163 
                  return ret;
    #line 160 
    i ++;
  }
  #line 166 
  ppe_cb = hns_get_ppe_cb(handle);
  #line 167 
  ret = hns_ppe_wait_tx_fifo_clean(ppe_cb);
  #line 168 
  if (ret != 0) 
                #line 169 
                return ret;
  #line 171 
  dsaf_dev = hns_ae_get_dsaf_dev(handle->dev);
  #line 172 
  if (dsaf_dev == (struct dsaf_device *)0) 
                                           #line 173 
                                           return -22;
  #line 174 
  ret = hns_dsaf_wait_pkt_clean(dsaf_dev,(int)handle->dport_id);
  #line 175 
  if (ret != 0) 
                #line 176 
                return ret;
  #line 178 
  vf_cb = hns_ae_get_vf_cb(handle);
  #line 179 
  ret = hns_mac_wait_fifo_clean(vf_cb->mac_cb);
  #line 180 
  if (ret != 0) 
                #line 181 
                return ret;
  {
    #line 183 
    unsigned long __ms = 10UL;
    #line 183 
    while (1) {
      #line 183 
      unsigned long tmp;
      #line 183 
      tmp = __ms;
      #line 183 
      __ms --;
      #line 183 
      ;
      #line 183 
      if (! (tmp != 0UL)) 
                          #line 183 
                          break;
      #line 183 
      __const_udelay(4295000UL);
    }
  }
  #line 184 
  return 0;
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_ring_enable_all(struct hnae_handle *handle, int val)
{
  #line 190 
  int i;
  #line 189 
  int q_num = handle->q_num;
  #line 192 
  i = 0;
  #line 192 
  while (i < q_num) {
    #line 193 
    hns_rcb_ring_enable_hw(*(handle->qs + (unsigned long)i),(unsigned int)val);
    #line 192 
    i ++;
  }
  #line 194 
  return;
}

#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_init_queue(struct hnae_queue *q)
{
  #line 199 
  void *__mptr;
  #line 199 
  __mptr = (void *)q;
  #line 198 
  struct ring_pair_cb *ring = ((struct ring_pair_cb *)(__mptr + 18446744073709547520U));
  #line 201 
  hns_rcb_init_hw(ring);
  #line 202 
  return;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_fini_queue(struct hnae_queue *q)
{
  #line 206 
  struct hnae_vf_cb *vf_cb = hns_ae_get_vf_cb(q->handle);
  #line 208 
  if ((vf_cb->mac_cb)->mac_type == (unsigned int)HNAE_PORT_SERVICE) 
                                                                    #line 209 
                                                                    hns_rcb_reset_ring_hw(q);
  #line 210 
  return;
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_set_mac_address(struct hnae_handle *handle, void *p)
{
  #line 214 
  int ret;
  #line 215 
  struct hns_mac_cb *mac_cb = hns_get_mac_cb(handle);
  #line 217 
  if (p == (void *)0) 
                      #line 217 
                      goto _LOR;
  else {
    #line 217 
    if (! is_valid_ether_addr((u8 *)p)) {
      #line 217 
      _LOR: {
              #line 218 
              _dev_err(handle->owner_dev,(char *)"is not valid ether addr !\n");
              #line 219 
              return -99;
            }
    }
  }
  #line 222 
  ret = hns_mac_change_vf_addr(mac_cb,(unsigned int)handle->vf_id,(char *)p);
  #line 223 
  if (ret != 0) {
    #line 224 
    _dev_err(handle->owner_dev,(char *)"set_mac_address fail, ret=%d!\n",ret);
    #line 226 
    return ret;
  }
  #line 229 
  return 0;
}

#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_add_uc_address(struct hnae_handle *handle, unsigned char *addr)
{
  #line 235 
  struct hns_mac_cb *mac_cb = hns_get_mac_cb(handle);
  #line 237 
  if (mac_cb->mac_type != (unsigned int)HNAE_PORT_SERVICE) 
                                                           #line 238 
                                                           return -28;
  #line 240 
  return hns_mac_add_uc_addr(mac_cb,
                            (unsigned char)((int)((unsigned char)handle->vf_id)),
                            addr);
}

#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_rm_uc_address(struct hnae_handle *handle, unsigned char *addr)
{
  #line 246 
  struct hns_mac_cb *mac_cb = hns_get_mac_cb(handle);
  #line 248 
  if (mac_cb->mac_type != (unsigned int)HNAE_PORT_SERVICE) 
                                                           #line 249 
                                                           return -28;
  #line 251 
  return hns_mac_rm_uc_addr(mac_cb,
                           (unsigned char)((int)((unsigned char)handle->vf_id)),
                           addr);
}

#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_set_multicast_one(struct hnae_handle *handle, void *addr)
{
  #line 256 
  int ret;
  #line 259 
  u8 port_num;
  #line 257 
  char *mac_addr = (char *)addr;
  #line 258 
  struct hns_mac_cb *mac_cb = hns_get_mac_cb(handle);
  #line 263 
  if (mac_cb->mac_type != (unsigned int)HNAE_PORT_SERVICE) 
                                                           #line 264 
                                                           return 0;
  #line 266 
  ret = hns_mac_set_multi(mac_cb,(unsigned int)mac_cb->mac_id,mac_addr,(_Bool)1);
  #line 267 
  if (ret != 0) {
    #line 268 
    _dev_err(handle->owner_dev,(char *)"mac add mul_mac:%pM port%d  fail, ret = %#x!\n",mac_addr,(int)mac_cb->mac_id,ret);
    #line 271 
    return ret;
  }
  #line 274 
  ret = hns_mac_get_inner_port_num(mac_cb,(unsigned char)((int)((unsigned char)handle->vf_id)),& port_num);
  #line 275 
  if (ret != 0) 
                #line 276 
                return ret;
  #line 278 
  ret = hns_mac_set_multi(mac_cb,(unsigned int)port_num,mac_addr,(_Bool)1);
  #line 279 
  if (ret != 0) 
                #line 280 
                _dev_err(handle->owner_dev,(char *)"mac add mul_mac:%pM port%d  fail, ret = %#x!\n",mac_addr,127,ret);
  #line 284 
  return ret;
}

#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_clr_multicast(struct hnae_handle *handle)
{
  #line 289 
  struct hns_mac_cb *mac_cb = hns_get_mac_cb(handle);
  #line 291 
  if (mac_cb->mac_type != (unsigned int)HNAE_PORT_SERVICE) 
                                                           #line 292 
                                                           return 0;
  #line 294 
  return hns_mac_clr_multicast(mac_cb,handle->vf_id);
}

#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_set_mtu(struct hnae_handle *handle, int new_mtu)
{
  #line 300 
  struct hnae_queue *q;
  #line 301 
  u32 rx_buf_size;
  #line 302 
  int i;
  #line 302 
  int ret;
  #line 299 
  struct hns_mac_cb *mac_cb = hns_get_mac_cb(handle);
  #line 305 
  if ((mac_cb->dsaf_dev)->dsaf_ver != 3552816U) 
    #line 306 
    if (new_mtu <= 6000) 
                         #line 307 
                         rx_buf_size = 2048U; else 
                                                   #line 309 
                                                   rx_buf_size = 4096U;
  else 
       #line 311 
       rx_buf_size = (mac_cb->dsaf_dev)->buf_size;
  #line 314 
  ret = hns_mac_set_mtu(mac_cb,(unsigned int)new_mtu,rx_buf_size);
  #line 316 
  if (ret == 0) {
    #line 318 
    i = 0;
    #line 318 
    while (handle->q_num > i) {
      #line 319 
      q = *(handle->qs + (unsigned long)i);
      #line 320 
      q->rx_ring.buf_size = rx_buf_size;
      #line 321 
      hns_rcb_set_rx_ring_bs(q,rx_buf_size);
      #line 318 
      i ++;
    }
  }
  #line 325 
  return ret;
}

#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_set_tso_stats(struct hnae_handle *handle, int enable)
{
  #line 330 
  struct hns_ppe_cb *ppe_cb = hns_get_ppe_cb(handle);
  #line 332 
  hns_ppe_set_tso_enable(ppe_cb,(unsigned int)enable);
  #line 333 
  return;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_start(struct hnae_handle *handle)
{
  #line 337 
  int ret;
  #line 338 
  int k;
  #line 339 
  struct hns_mac_cb *mac_cb = hns_get_mac_cb(handle);
  #line 341 
  ret = hns_mac_vm_config_bc_en(mac_cb,0U,(_Bool)1);
  #line 342 
  if (ret != 0) 
                #line 343 
                return ret;
  #line 345 
  k = 0;
  #line 345 
  while (handle->q_num > k) {
    #line 346 
    if ((mac_cb->dsaf_dev)->dsaf_ver == 3552816U) 
                                                  #line 347 
                                                  hns_rcb_int_clr_hw(*(handle->qs + (unsigned long)k),3U); else 
                                                                    #line 350 
                                                                    hns_rcbv2_int_clr_hw(*(handle->qs + (unsigned long)k),3U);
    #line 345 
    k ++;
  }
  #line 353 
  hns_ae_ring_enable_all(handle,1);
  #line 354 
  msleep(100U);
  #line 356 
  hns_mac_start(mac_cb);
  #line 358 
  return 0;
}

#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_stop(struct hnae_handle *handle)
{
  #line 363 
  struct hns_mac_cb *mac_cb = hns_get_mac_cb(handle);
  #line 366 
  hns_rcb_wait_fbd_clean(handle->qs,handle->q_num,1U);
  #line 368 
  msleep(20U);
  #line 370 
  hns_mac_stop(mac_cb);
  #line 372 
  usleep_range(10000UL,20000UL);
  #line 374 
  hns_ae_ring_enable_all(handle,0);
  #line 377 
  hns_rcb_wait_fbd_clean(handle->qs,handle->q_num,2U);
  #line 379 
  hns_mac_vm_config_bc_en(mac_cb,0U,(_Bool)0);
  #line 380 
  return;
}

#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_reset(struct hnae_handle *handle)
{
  #line 384 
  struct hnae_vf_cb *vf_cb = hns_ae_get_vf_cb(handle);
  #line 386 
  if ((vf_cb->mac_cb)->mac_type == (unsigned int)HNAE_PORT_DEBUG) {
    #line 387 
    hns_mac_reset(vf_cb->mac_cb);
    #line 388 
    hns_ppe_reset_common(vf_cb->dsaf_dev,(unsigned char)0);
  }
  #line 390 
  return;
}

#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_toggle_ring_irq(struct hnae_ring *ring, u32 mask)
{
  #line 394 
  u32 flag;
  #line 396 
  if ((ring->flags & 1) != 0) 
                              #line 397 
                              flag = 1U; else 
                                              #line 399 
                                              flag = 2U;
  #line 401 
  hns_rcb_int_ctrl_hw(ring->q,flag,mask);
  #line 402 
  return;
}

#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_aev2_toggle_ring_irq(struct hnae_ring *ring, u32 mask)
{
  #line 406 
  u32 flag;
  #line 408 
  if ((ring->flags & 1) != 0) 
                              #line 409 
                              flag = 1U; else 
                                              #line 411 
                                              flag = 2U;
  #line 413 
  hns_rcbv2_int_ctrl_hw(ring->q,flag,mask);
  #line 414 
  return;
}

#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_get_link_status(struct hnae_handle *handle)
{
  #line 418 
  u32 link_status;
  #line 419 
  struct hns_mac_cb *mac_cb = hns_get_mac_cb(handle);
  #line 421 
  hns_mac_get_link_status(mac_cb,& link_status);
  #line 423 
  return link_status != 0U;
}

#line 426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_get_mac_info(struct hnae_handle *handle, u8 *auto_neg, u16 *speed, u8 *duplex)
{
  #line 429 
  struct hns_mac_cb *mac_cb = hns_get_mac_cb(handle);
  #line 431 
  return hns_mac_get_port_info(mac_cb,auto_neg,speed,duplex);
}

#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static bool hns_ae_need_adjust_link(struct hnae_handle *handle, int speed, int duplex)
{
  #line 437 
  struct hns_mac_cb *mac_cb = hns_get_mac_cb(handle);
  #line 439 
  return hns_mac_need_adjust_link(mac_cb,speed,duplex);
}

#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_adjust_link(struct hnae_handle *handle, int speed, int duplex)
{
  #line 445 
  struct hns_mac_cb *mac_cb = hns_get_mac_cb(handle);
  #line 447 
  switch ((mac_cb->dsaf_dev)->dsaf_ver) {
    #line 448 
    case (u32)3552816: 
                       #line 448 
    ;
    #line 449 
    hns_mac_adjust_link(mac_cb,speed,duplex);
    #line 450 
    break;
    #line 452 
    case (u32)825635120: 
                         #line 452 
    ;
    #line 454 
    hns_mac_disable(mac_cb,(enum mac_commom_mode)MAC_COMM_MODE_RX);
    #line 455 
    if (hns_ae_wait_flow_down(handle) != 0) {
      #line 456 
      hns_mac_enable(mac_cb,(enum mac_commom_mode)MAC_COMM_MODE_RX);
      #line 457 
      break;
    }
    #line 460 
    hns_mac_adjust_link(mac_cb,speed,duplex);
    #line 461 
    hns_mac_enable(mac_cb,(enum mac_commom_mode)MAC_COMM_MODE_RX);
    #line 462 
    break;
    #line 464 
    default: 
             #line 464 
    ;
    #line 465 
    break;
  }
  #line 468 
  return;
}

#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_get_ring_bdnum_limit(struct hnae_queue *queue, u32 *uplimit)
{
  #line 474 
  *uplimit = 1024U;
  #line 475 
  return;
}

#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_get_pauseparam(struct hnae_handle *handle, u32 *auto_neg, u32 *rx_en, u32 *tx_en)
{
  #line 480 
  struct hns_mac_cb *mac_cb = hns_get_mac_cb(handle);
  #line 481 
  struct dsaf_device *dsaf_dev = mac_cb->dsaf_dev;
  #line 483 
  hns_mac_get_autoneg(mac_cb,auto_neg);
  #line 485 
  hns_mac_get_pauseparam(mac_cb,rx_en,tx_en);
  #line 488 
  if (handle->port_type == (unsigned int)HNAE_PORT_SERVICE) 
                                                            #line 489 
                                                            hns_dsaf_get_rx_mac_pause_en(dsaf_dev,(int)mac_cb->mac_id,rx_en);
  #line 490 
  return;
}

#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_set_autoneg(struct hnae_handle *handle, u8 enable)
{
  #line 496 
  ;
  #line 496 
  return hns_mac_set_autoneg(hns_get_mac_cb(handle),
                            (unsigned char)((int)enable));
}

#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_set_promisc_mode(struct hnae_handle *handle, u32 en)
{
  #line 501 
  struct hns_mac_cb *mac_cb = hns_get_mac_cb(handle);
  #line 503 
  ;
  #line 503 
  hns_dsaf_set_promisc_mode(hns_ae_get_dsaf_dev(handle->dev),en);
  #line 504 
  hns_mac_set_promisc(mac_cb,(unsigned char)(en != 0U));
  #line 505 
  return;
}

#line 507  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_get_autoneg(struct hnae_handle *handle)
{
  #line 509 
  u32 auto_neg;
  #line 513 
  hns_mac_get_autoneg(hns_get_mac_cb(handle),& auto_neg);
  #line 515 
  return (int)auto_neg;
}

#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_set_pauseparam(struct hnae_handle *handle, u32 autoneg, u32 rx_en, u32 tx_en)
{
  #line 523 
  int ret;
  #line 521 
  struct hns_mac_cb *mac_cb = hns_get_mac_cb(handle);
  #line 522 
  struct dsaf_device *dsaf_dev = mac_cb->dsaf_dev;
  #line 525 
  ret = hns_mac_set_autoneg(mac_cb,(unsigned char)((int)((unsigned char)autoneg)));
  #line 526 
  if (ret != 0) 
                #line 527 
                return ret;
  #line 530 
  if (handle->port_type == (unsigned int)HNAE_PORT_SERVICE) {
    #line 531 
    ret = hns_dsaf_set_rx_mac_pause_en(dsaf_dev,(int)mac_cb->mac_id,rx_en);
    #line 533 
    if (ret != 0) 
                  #line 534 
                  return ret;
    #line 535 
    rx_en = 0U;
  }
  #line 537 
  return hns_mac_set_pauseparam(mac_cb,rx_en,tx_en);
}

#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_get_coalesce_usecs(struct hnae_handle *handle, u32 *tx_usecs, u32 *rx_usecs)
{
  #line 544 
  void *__mptr;
  #line 544 
  __mptr = (void *)*(handle->qs);
  #line 543 
  struct ring_pair_cb *ring_pair = ((struct ring_pair_cb *)(__mptr + 18446744073709547520U));
  #line 546 
  *tx_usecs = hns_rcb_get_coalesce_usecs(ring_pair->rcb_common,(unsigned int)ring_pair->port_id_in_comm);
  #line 548 
  *rx_usecs = hns_rcb_get_coalesce_usecs(ring_pair->rcb_common,(unsigned int)ring_pair->port_id_in_comm);
  #line 550 
  return;
}

#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_get_max_coalesced_frames(struct hnae_handle *handle, u32 *tx_frames, u32 *rx_frames)
{
  #line 556 
  void *__mptr;
  #line 556 
  __mptr = (void *)*(handle->qs);
  #line 555 
  struct ring_pair_cb *ring_pair = ((struct ring_pair_cb *)(__mptr + 18446744073709547520U));
  #line 557 
  struct dsaf_device *dsaf_dev = hns_ae_get_dsaf_dev(handle->dev);
  #line 559 
  if (dsaf_dev->dsaf_ver == 3552816U || handle->port_type == (unsigned int)HNAE_PORT_DEBUG) 
    #line 561 
    *tx_frames = hns_rcb_get_rx_coalesced_frames(ring_pair->rcb_common,(unsigned int)ring_pair->port_id_in_comm); else 
                                                                    #line 564 
                                                                    *tx_frames = hns_rcb_get_tx_coalesced_frames(ring_pair->rcb_common,(unsigned int)ring_pair->port_id_in_comm);
  #line 566 
  *rx_frames = hns_rcb_get_rx_coalesced_frames(ring_pair->rcb_common,(unsigned int)ring_pair->port_id_in_comm);
  #line 568 
  return;
}

#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_set_coalesce_usecs(struct hnae_handle *handle, u32 timeout)
{
  #line 574 
  void *__mptr;
  #line 574 
  __mptr = (void *)*(handle->qs);
  #line 573 
  struct ring_pair_cb *ring_pair = ((struct ring_pair_cb *)(__mptr + 18446744073709547520U));
  #line 576 
  return hns_rcb_set_coalesce_usecs(ring_pair->rcb_common,
                                   (unsigned int)ring_pair->port_id_in_comm,
                                   timeout);
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_set_coalesce_frames(struct hnae_handle *handle, u32 tx_frames, u32 rx_frames)
{
  #line 585 
  void *__mptr;
  #line 583 
  int ret;
  #line 585 
  __mptr = (void *)*(handle->qs);
  #line 584 
  struct ring_pair_cb *ring_pair = ((struct ring_pair_cb *)(__mptr + 18446744073709547520U));
  #line 586 
  struct dsaf_device *dsaf_dev = hns_ae_get_dsaf_dev(handle->dev);
  #line 588 
  if (dsaf_dev->dsaf_ver == 3552816U || handle->port_type == (unsigned int)HNAE_PORT_DEBUG) {
    #line 590 
    if (tx_frames != rx_frames) 
                                #line 591 
                                return -22;
    #line 592 
    return hns_rcb_set_rx_coalesced_frames(ring_pair->rcb_common,
                                        (unsigned int)ring_pair->port_id_in_comm,
                                        rx_frames);
  }
  else {
    #line 596 
    if (tx_frames != 1U) 
                         #line 597 
                         return -22;
    #line 598 
    ret = hns_rcb_set_tx_coalesced_frames(ring_pair->rcb_common,(unsigned int)ring_pair->port_id_in_comm,tx_frames);
    #line 601 
    if (ret != 0) 
                  #line 602 
                  return ret;
    #line 604 
    return hns_rcb_set_rx_coalesced_frames(ring_pair->rcb_common,
                                        (unsigned int)ring_pair->port_id_in_comm,
                                        rx_frames);
  }
}

#line 610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_get_coalesce_range(struct hnae_handle *handle, u32 *tx_frames_low, u32 *rx_frames_low, u32 *tx_frames_high, u32 *rx_frames_high, u32 *tx_usecs_low, u32 *rx_usecs_low, u32 *tx_usecs_high, u32 *rx_usecs_high)
{
  #line 616 
  struct dsaf_device *dsaf_dev;
  #line 620 
  dsaf_dev = hns_ae_get_dsaf_dev(handle->dev);
  #line 622 
  *tx_frames_low = 1U;
  #line 623 
  *rx_frames_low = 1U;
  #line 625 
  if (dsaf_dev->dsaf_ver == 3552816U || handle->port_type == (unsigned int)HNAE_PORT_DEBUG) 
    #line 627 
    if (1023U < dsaf_dev->desc_num + 4294967295U) 
                                                  #line 627 
                                                  *tx_frames_high = 1023U; else 
                                                                    #line 627 
                                                                    *tx_frames_high = dsaf_dev->desc_num + 4294967295U;
  else 
       #line 631 
       *tx_frames_high = 1U;
  #line 633 
  if (1023U < dsaf_dev->desc_num + 4294967295U) 
                                                #line 633 
                                                *rx_frames_high = 1023U; else 
                                                                    #line 633 
                                                                    *rx_frames_high = dsaf_dev->desc_num + 4294967295U;
  #line 635 
  *tx_usecs_low = 1U;
  #line 636 
  *rx_usecs_low = 1U;
  #line 637 
  *tx_usecs_high = 1023U;
  #line 638 
  *rx_usecs_high = 1023U;
  #line 639 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_update_stats(struct hnae_handle *handle, struct net_device_stats *net_stats)
{
  #line 644 
  int port;
  #line 645 
  int idx;
  #line 646 
  struct dsaf_device *dsaf_dev;
  #line 647 
  struct hns_mac_cb *mac_cb;
  #line 648 
  struct hns_ppe_cb *ppe_cb;
  #line 649 
  struct hnae_queue *queue;
  #line 650 
  struct hnae_vf_cb *vf_cb = hns_ae_get_vf_cb(handle);
  #line 651 
  u64 tx_bytes = 0ULL;
  #line 651 
  u64 rx_bytes = 0ULL;
  #line 651 
  u64 tx_packets = 0ULL;
  #line 651 
  u64 rx_packets = 0ULL;
  #line 652 
  u64 rx_errors = 0ULL;
  #line 652 
  u64 tx_errors = 0ULL;
  #line 652 
  u64 tx_dropped = 0ULL;
  #line 653 
  u64 rx_missed_errors = 0ULL;
  #line 655 
  dsaf_dev = hns_ae_get_dsaf_dev(handle->dev);
  #line 656 
  if (dsaf_dev == (struct dsaf_device *)0) 
                                           #line 657 
                                           return;
  #line 658 
  port = (int)vf_cb->port_index;
  #line 659 
  ppe_cb = hns_get_ppe_cb(handle);
  #line 660 
  mac_cb = hns_get_mac_cb(handle);
  #line 662 
  idx = 0;
  #line 662 
  while (handle->q_num > idx) {
    #line 663 
    queue = *(handle->qs + (unsigned long)idx);
    #line 664 
    hns_rcb_update_stats(queue);
    #line 666 
    tx_bytes = queue->tx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_176.tx_bytes + tx_bytes;
    #line 667 
    tx_packets = queue->tx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_176.tx_pkts + tx_packets;
    #line 668 
    rx_bytes = queue->rx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_177.rx_bytes + rx_bytes;
    #line 669 
    rx_packets = queue->rx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_177.rx_pkts + rx_packets;
    #line 671 
    rx_errors = ((queue->rx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_177.err_pkt_len + queue->rx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_177.l2_err) + queue->rx_ring.stats.__anonCompField_ring_stats_178.__anonCompField___anonunion_723_177.l3l4_csum_err) + rx_errors;
    #line 662 
    idx ++;
  }
  #line 676 
  hns_ppe_update_stats(ppe_cb);
  #line 677 
  rx_missed_errors = ppe_cb->hw_stats.rx_drop_no_buf;
  #line 678 
  tx_errors = (ppe_cb->hw_stats.tx_err_checksum + ppe_cb->hw_stats.tx_err_fifo_empty) + tx_errors;
  #line 681 
  if (mac_cb->mac_type == (unsigned int)HNAE_PORT_SERVICE) {
    #line 682 
    hns_dsaf_update_stats(dsaf_dev,(unsigned int)port);
    #line 684 
    rx_missed_errors = dsaf_dev->hw_stats[port].bp_drop + rx_missed_errors;
    #line 685 
    rx_missed_errors = dsaf_dev->hw_stats[port].pad_drop + rx_missed_errors;
    #line 686 
    rx_missed_errors = dsaf_dev->hw_stats[port].crc_false + rx_missed_errors;
    #line 689 
    port += 6;
    #line 690 
    hns_dsaf_update_stats(dsaf_dev,(unsigned int)port);
    #line 691 
    tx_dropped = dsaf_dev->hw_stats[port].bp_drop + tx_dropped;
    #line 692 
    tx_dropped = dsaf_dev->hw_stats[port].pad_drop + tx_dropped;
    #line 693 
    tx_dropped = dsaf_dev->hw_stats[port].crc_false + tx_dropped;
    #line 694 
    tx_dropped = dsaf_dev->hw_stats[port].rslt_drop + tx_dropped;
    #line 695 
    tx_dropped = dsaf_dev->hw_stats[port].vlan_drop + tx_dropped;
    #line 696 
    tx_dropped = dsaf_dev->hw_stats[port].stp_drop + tx_dropped;
  }
  #line 699 
  hns_mac_update_stats(mac_cb);
  #line 700 
  rx_errors = mac_cb->hw_stats.rx_fifo_overrun_err + rx_errors;
  #line 702 
  tx_errors = ((((mac_cb->hw_stats.tx_bad_pkts + mac_cb->hw_stats.tx_fragment_err) + mac_cb->hw_stats.tx_jabber_err) + mac_cb->hw_stats.tx_underrun_err) + mac_cb->hw_stats.tx_crc_err) + tx_errors;
  #line 708 
  net_stats->tx_bytes = (unsigned long)tx_bytes;
  #line 709 
  net_stats->tx_packets = (unsigned long)tx_packets;
  #line 710 
  net_stats->rx_bytes = (unsigned long)rx_bytes;
  #line 711 
  net_stats->rx_dropped = 0UL;
  #line 712 
  net_stats->rx_packets = (unsigned long)rx_packets;
  #line 713 
  net_stats->rx_errors = (unsigned long)rx_errors;
  #line 714 
  net_stats->tx_errors = (unsigned long)tx_errors;
  #line 715 
  net_stats->tx_dropped = (unsigned long)tx_dropped;
  #line 716 
  net_stats->rx_missed_errors = (unsigned long)rx_missed_errors;
  #line 717 
  net_stats->rx_crc_errors = (unsigned long)mac_cb->hw_stats.rx_fcs_err;
  #line 718 
  net_stats->rx_frame_errors = (unsigned long)mac_cb->hw_stats.rx_align_err;
  #line 719 
  net_stats->rx_fifo_errors = (unsigned long)mac_cb->hw_stats.rx_fifo_overrun_err;
  #line 720 
  net_stats->rx_length_errors = (unsigned long)mac_cb->hw_stats.rx_len_err;
  #line 721 
  net_stats->multicast = (unsigned long)mac_cb->hw_stats.rx_mc_pkts;
  #line 722 
  return;
}

#line 724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_get_stats(struct hnae_handle *handle, u64 *data)
{
  #line 726 
  int idx;
  #line 727 
  struct hns_mac_cb *mac_cb;
  #line 728 
  struct hns_ppe_cb *ppe_cb;
  #line 730 
  struct hnae_vf_cb *vf_cb;
  #line 729 
  u64 *p = data;
  #line 732 
  if (handle == (struct hnae_handle *)0 || data == (u64 *)0ULL) {
    #line 733 
    printk((char *)"\001");
    #line 734 
    return;
  }
  #line 737 
  vf_cb = hns_ae_get_vf_cb(handle);
  #line 738 
  mac_cb = hns_get_mac_cb(handle);
  #line 739 
  ppe_cb = hns_get_ppe_cb(handle);
  #line 741 
  idx = 0;
  #line 741 
  while (handle->q_num > idx) {
    {
      #line 742 
      hns_rcb_get_stats(*(handle->qs + (unsigned long)idx),p);
      #line 743 
      p += (unsigned long)hns_rcb_get_ring_sset_count(1);
    }
    #line 741 
    idx ++;
  }
  #line 746 
  hns_ppe_get_stats(ppe_cb,p);
  #line 747 
  p += (unsigned long)hns_ppe_get_sset_count(1);
  #line 749 
  hns_mac_get_stats(mac_cb,p);
  #line 750 
  p += (unsigned long)hns_mac_get_sset_count(mac_cb,1);
  #line 752 
  if (mac_cb->mac_type == (unsigned int)HNAE_PORT_SERVICE) 
                                                           #line 753 
                                                           hns_dsaf_get_stats(vf_cb->dsaf_dev,p,(int)vf_cb->port_index);
  #line 754 
  return;
}

#line 756  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_get_strings(struct hnae_handle *handle, u32 stringset, u8 *data)
{
  #line 759 
  int port;
  #line 760 
  int idx;
  #line 761 
  struct hns_mac_cb *mac_cb;
  #line 762 
  struct hns_ppe_cb *ppe_cb;
  #line 765 
  struct hnae_vf_cb *vf_cb;
  #line 763 
  struct dsaf_device *dsaf_dev = hns_ae_get_dsaf_dev(handle->dev);
  #line 764 
  u8 *p = data;
  #line 769 
  vf_cb = hns_ae_get_vf_cb(handle);
  #line 770 
  port = (int)vf_cb->port_index;
  #line 771 
  mac_cb = hns_get_mac_cb(handle);
  #line 772 
  ppe_cb = hns_get_ppe_cb(handle);
  #line 774 
  idx = 0;
  #line 774 
  while (handle->q_num > idx) {
    {
      #line 775 
      hns_rcb_get_strings((int)stringset,p,idx);
      #line 776 
      p += (unsigned long)(hns_rcb_get_ring_sset_count((int)stringset) * 32);
    }
    #line 774 
    idx ++;
  }
  #line 779 
  hns_ppe_get_strings(ppe_cb,(int)stringset,p);
  #line 780 
  p += (unsigned long)(hns_ppe_get_sset_count((int)stringset) * 32);
  #line 782 
  hns_mac_get_strings(mac_cb,(int)stringset,p);
  #line 783 
  p += (unsigned long)(hns_mac_get_sset_count(mac_cb,(int)stringset) * 32);
  #line 785 
  if (mac_cb->mac_type == (unsigned int)HNAE_PORT_SERVICE) 
                                                           #line 786 
                                                           hns_dsaf_get_strings((int)stringset,p,port,dsaf_dev);
  #line 787 
  return;
}

#line 789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_get_sset_count(struct hnae_handle *handle, int stringset)
{
  #line 792 
  struct hns_mac_cb *mac_cb;
  #line 791 
  u32 sset_count = 0U;
  #line 793 
  struct dsaf_device *dsaf_dev = hns_ae_get_dsaf_dev(handle->dev);
  #line 797 
  mac_cb = hns_get_mac_cb(handle);
  #line 799 
  sset_count = (unsigned int)(hns_rcb_get_ring_sset_count(stringset) * handle->q_num) + sset_count;
  #line 800 
  sset_count = (unsigned int)hns_ppe_get_sset_count(stringset) + sset_count;
  #line 801 
  sset_count = (unsigned int)hns_mac_get_sset_count(mac_cb,stringset) + sset_count;
  #line 803 
  if (mac_cb->mac_type == (unsigned int)HNAE_PORT_SERVICE) {
    #line 804 
    sset_count = (unsigned int)hns_dsaf_get_sset_count(dsaf_dev,stringset) + sset_count;
  }
  #line 806 
  return (int)sset_count;
}

#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_config_loopback(struct hnae_handle *handle, enum hnae_loop loop, int en)
{
  #line 812 
  int ret;
  #line 813 
  struct hnae_vf_cb *vf_cb = hns_ae_get_vf_cb(handle);
  #line 814 
  struct hns_mac_cb *mac_cb = hns_get_mac_cb(handle);
  #line 815 
  struct dsaf_device *dsaf_dev = mac_cb->dsaf_dev;
  #line 817 
  switch ((unsigned int)loop) {
    #line 818 
    case (unsigned int)2: 
                          #line 818 
    ;
    #line 819 
    ret = 0;
    #line 820 
    break;
    #line 821 
    case (unsigned int)1: 
                          #line 821 
    ;
    #line 822 
    ret = (*((dsaf_dev->misc_op)->cfg_serdes_loopback))(vf_cb->mac_cb,(_Bool)(en != 0));
    #line 824 
    break;
    #line 825 
    case (unsigned int)0: 
                          #line 825 
    ;
    #line 826 
    ret = hns_mac_config_mac_loopback(vf_cb->mac_cb,loop,en);
    #line 827 
    break;
    #line 828 
    default: 
             #line 828 
    ;
    #line 829 
    ret = -22;
  }
  #line 832 
  return ret;
}

#line 835  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_update_led_status(struct hnae_handle *handle)
{
  #line 837 
  struct hns_mac_cb *mac_cb;
  #line 840 
  mac_cb = hns_get_mac_cb(handle);
  #line 841 
  if (mac_cb->media_type != (unsigned int)HNAE_MEDIA_TYPE_FIBER) 
                                                                 #line 842 
                                                                 return;
  #line 844 
  hns_set_led_opt(mac_cb);
  #line 845 
  return;
}

#line 847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_cpld_set_led_id(struct hnae_handle *handle, enum hnae_led_state status)
{
  #line 850 
  struct hns_mac_cb *mac_cb;
  #line 854 
  mac_cb = hns_get_mac_cb(handle);
  #line 856 
  return hns_cpld_led_set_id(mac_cb,status);
}

#line 859  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static void hns_ae_get_regs(struct hnae_handle *handle, void *data)
{
  #line 862 
  int i;
  #line 861 
  u32 *p = (u32 *)data;
  #line 863 
  struct hnae_vf_cb *vf_cb = hns_ae_get_vf_cb(handle);
  #line 864 
  struct hns_ppe_cb *ppe_cb = hns_get_ppe_cb(handle);
  #line 866 
  hns_ppe_get_regs(ppe_cb,(void *)p);
  #line 867 
  p += (unsigned long)hns_ppe_get_regs_count();
  #line 869 
  hns_rcb_get_common_regs((vf_cb->dsaf_dev)->rcb_common[0],(void *)p);
  #line 870 
  p += (unsigned long)hns_rcb_get_common_regs_count();
  #line 872 
  i = 0;
  #line 872 
  while (handle->q_num > i) {
    {
      #line 873 
      hns_rcb_get_ring_regs(*(handle->qs + (unsigned long)i),(void *)p);
      #line 874 
      p += (unsigned long)hns_rcb_get_ring_regs_count();
    }
    #line 872 
    i ++;
  }
  #line 877 
  hns_mac_get_regs(vf_cb->mac_cb,(void *)p);
  #line 878 
  p += (unsigned long)hns_mac_get_regs_count(vf_cb->mac_cb);
  #line 880 
  if ((vf_cb->mac_cb)->mac_type == (unsigned int)HNAE_PORT_SERVICE) 
                                                                    #line 881 
                                                                    hns_dsaf_get_regs(vf_cb->dsaf_dev,(unsigned int)vf_cb->port_index,(void *)p);
  #line 882 
  return;
}

#line 884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_get_regs_len(struct hnae_handle *handle)
{
  #line 886 
  u32 total_num;
  #line 887 
  struct hnae_vf_cb *vf_cb = hns_ae_get_vf_cb(handle);
  #line 889 
  total_num = (unsigned int)hns_ppe_get_regs_count();
  #line 890 
  total_num = (unsigned int)hns_rcb_get_common_regs_count() + total_num;
  #line 891 
  total_num = (unsigned int)(hns_rcb_get_ring_regs_count() * handle->q_num) + total_num;
  #line 892 
  total_num = (unsigned int)hns_mac_get_regs_count(vf_cb->mac_cb) + total_num;
  #line 894 
  if ((vf_cb->mac_cb)->mac_type == (unsigned int)HNAE_PORT_SERVICE) {
    #line 895 
    total_num = (unsigned int)hns_dsaf_get_regs_count() + total_num;
  }
  #line 897 
  return (int)total_num;
}

#line 900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static u32 hns_ae_get_rss_key_size(struct hnae_handle *handle)
{
  #line 902 
  return 40U;
}

#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static u32 hns_ae_get_rss_indir_size(struct hnae_handle *handle)
{
  #line 907 
  return 256U;
}

#line 910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_get_rss(struct hnae_handle *handle, u32 *indir, u8 *key, u8 *hfunc)
{
  #line 913 
  struct hns_ppe_cb *ppe_cb = hns_get_ppe_cb(handle);
  #line 916 
  if (hfunc != (u8 *)0U) 
                         #line 917 
                         *hfunc = (unsigned char)1U;
  #line 920 
  if (key != (u8 *)0U) 
                       #line 921 
                       memcpy((void *)key,(void *)(& ppe_cb->rss_key),40UL);
  #line 924 
  if (indir != (u32 *)0U) 
                          #line 925 
                          memcpy((void *)indir,(void *)(& ppe_cb->rss_indir_table),1024UL);
  #line 928 
  return 0;
}

#line 931  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static int hns_ae_set_rss(struct hnae_handle *handle, u32 *indir, u8 *key, u8 hfunc)
{
  #line 934 
  struct hns_ppe_cb *ppe_cb = hns_get_ppe_cb(handle);
  #line 937 
  if (key != (u8 *)0U) {
    #line 938 
    memcpy((void *)(& ppe_cb->rss_key),(void *)key,40UL);
    #line 939 
    hns_ppe_set_rss_key(ppe_cb,(u32 *)(& ppe_cb->rss_key));
  }
  #line 942 
  if (indir != (u32 *)0U) {
    #line 944 
    memcpy((void *)(& ppe_cb->rss_indir_table),(void *)indir,1024UL);
    #line 948 
    hns_ppe_set_indir_table(ppe_cb,(u32 *)(& ppe_cb->rss_indir_table));
  }
  #line 951 
  return 0;
}

#line 954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
static struct hnae_ae_ops hns_dsaf_ops = {.get_handle = & hns_ae_get_handle, .put_handle = & hns_ae_put_handle, .init_queue = & hns_ae_init_queue, .fini_queue = & hns_ae_fini_queue, .start = & hns_ae_start, .stop = & hns_ae_stop, .reset = & hns_ae_reset, .get_status = & hns_ae_get_link_status, .get_info = & hns_ae_get_mac_info, .toggle_ring_irq = & hns_ae_toggle_ring_irq, .adjust_link = & hns_ae_adjust_link, .need_adjust_link = & hns_ae_need_adjust_link, .set_loopback = & hns_ae_config_loopback, .get_ring_bdnum_limit = & hns_ae_get_ring_bdnum_limit, .get_pauseparam = & hns_ae_get_pauseparam, .set_autoneg = & hns_ae_set_autoneg, .get_autoneg = & hns_ae_get_autoneg, .set_pauseparam = & hns_ae_set_pauseparam, .get_coalesce_usecs = & hns_ae_get_coalesce_usecs, .get_max_coalesced_frames = & hns_ae_get_max_coalesced_frames, .set_coalesce_usecs = & hns_ae_set_coalesce_usecs, .set_coalesce_frames = & hns_ae_set_coalesce_frames, .get_coalesce_range = & hns_ae_get_coalesce_range, .set_promisc_mode = & hns_ae_set_promisc_mode, .set_mac_addr = & hns_ae_set_mac_address, .add_uc_addr = & hns_ae_add_uc_address, .rm_uc_addr = & hns_ae_rm_uc_address, .clr_mc_addr = & hns_ae_clr_multicast, .set_mc_addr = & hns_ae_set_multicast_one, .set_mtu = & hns_ae_set_mtu, .set_tso_stats = & hns_ae_set_tso_stats, .update_stats = & hns_ae_update_stats, .get_stats = & hns_ae_get_stats, .get_strings = & hns_ae_get_strings, .get_sset_count = & hns_ae_get_sset_count, .update_led_status = & hns_ae_update_led_status, .set_led_id = & hns_ae_cpld_set_led_id, .get_regs = & hns_ae_get_regs, .get_regs_len = & hns_ae_get_regs_len, .get_rss_key_size = & hns_ae_get_rss_key_size, .get_rss_indir_size = & hns_ae_get_rss_indir_size, .get_rss = & hns_ae_get_rss, .set_rss = & hns_ae_set_rss};
#line 1000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
int hns_dsaf_ae_init(struct dsaf_device *dsaf_dev)
{
  #line 1002 
  struct hnae_ae_dev *ae_dev = & dsaf_dev->ae_dev;
  #line 1003 
  atomic_t id = {.counter = -1};
  #line 1005 
  switch (dsaf_dev->dsaf_ver) {
    #line 1006 
    case (u32)3552816: 
                       #line 1006 
    ;
    #line 1007 
    hns_dsaf_ops.toggle_ring_irq = & hns_ae_toggle_ring_irq;
    #line 1008 
    break;
    #line 1009 
    case (u32)825635120: 
                         #line 1009 
    ;
    #line 1010 
    hns_dsaf_ops.toggle_ring_irq = & hns_aev2_toggle_ring_irq;
    #line 1011 
    break;
    #line 1012 
    default: 
             #line 1012 
    ;
    #line 1013 
    break;
  }
  #line 1016 
  ;
  #line 1016 
  snprintf((char *)(& ae_dev->name),16UL,(char *)"%s%d",(char *)"dsaf",atomic_inc_return(& id));
  #line 1018 
  ae_dev->ops = & hns_dsaf_ops;
  #line 1019 
  ae_dev->dev = dsaf_dev->dev;
  #line 1021 
  return hnae_ae_register(ae_dev,& __this_module);
}

#line 1024  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_ae_adapt.c"
void hns_dsaf_ae_uninit(struct dsaf_device *dsaf_dev)
{
  #line 1026 
  hnae_ae_unregister(& dsaf_dev->ae_dev);
  #line 1027 
  return;
}

#line 160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_ae_adapt.i.aux"
static int atomic_add_return(int i, atomic_t *v)
{
  #line 163 
  return ldv_atomic_add_return(i,v);
}

#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_ae_adapt.i.aux"
static void *ERR_PTR(long error)
{
  #line 198 
  return ldv_err_ptr(error);
}

#line 411  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_ae_adapt.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 414 
  return ldv_kzalloc(size,flags);
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 64 
void __dynamic_dev_dbg(struct _ddebug *, struct device *, char * , ...);
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 177 
int device_match_fwnode(struct device *, void *);
#line 184 
#line 184 
struct device *bus_find_device(struct bus_type *, struct device *, void *, int (*)(struct device *, void *));
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static struct device *bus_find_device_by_fwnode(struct bus_type *bus, struct fwnode_handle *fwnode)
{
  #line 222 
  return bus_find_device(bus,(struct device *)0,(void *)fwnode,
                      & device_match_fwnode);
}

#line 937 
#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_misc.i.aux"
static void *cif_devm_kzalloc_0(struct device *dev, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 952 
void devm_kfree(struct device *, void *);
#line 1516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static struct device_node *dev_of_node(struct device *dev)
{
  #line 1518 
  if (dev == (struct device *)0) 
                                 #line 1519 
                                 return (struct device_node *)0;
  #line 1520 
  return dev->of_node;
}

#line 1009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/regmap.h"
#line 1009 
int regmap_write(struct regmap *, unsigned int, unsigned int);
#line 1024 
#line 1024 
int regmap_read(struct regmap *, unsigned int, unsigned int *);
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/platform/aclinuxex.h"
__inline static void acpi_os_free(void *memory)
{
  #line 62 
  kfree(memory);
  #line 63 
  return;
}

#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
#line 52 
union acpi_object *acpi_evaluate_dsm(acpi_handle, guid_t *, u64, u64, union acpi_object *);
#line 396 
#line 396 
bool is_acpi_device_node(struct fwnode_handle *);
#line 397 
#line 397 
bool is_acpi_data_node(struct fwnode_handle *);
#line 399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
__inline static bool is_acpi_node(struct fwnode_handle *fwnode)
{
  #line 401 
  int tmp_1;
  #line 401 
  if ((int)is_acpi_device_node(fwnode) != 0) 
                                             #line 401 
                                             tmp_1 = 1;
  else {
    #line 401 
    if ((int)is_acpi_data_node(fwnode) != 0) 
                                             #line 401 
                                             tmp_1 = 1; else 
                                                             #line 401 
                                                             tmp_1 = 0;
  }
  #line 401 
  return (_Bool)(tmp_1 != 0);
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/acpi.h"
__inline static acpi_handle acpi_device_handle(struct acpi_device *adev)
{
  #line 40 
  acpi_handle tmp;
  #line 40 
  if (adev != (struct acpi_device *)0) 
                                       #line 40 
                                       tmp = adev->handle; else 
                                                                #line 40 
                                                                tmp = (void *)0;
  #line 40 
  return tmp;
}

#line 1030  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_reg.h"
__inline static void dsaf_write_syscon(struct regmap *base, u32 reg, u32 value)
{
  #line 1032 
  regmap_write(base,reg,value);
  #line 1033 
  return;
}

#line 1035  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_reg.h"
__inline static int dsaf_read_syscon(struct regmap *base, u32 reg, u32 *val)
{
  #line 1037 
  return regmap_read(base,reg,val);
}

#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 49 
extern struct bus_type platform_bus_type;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.h"
#line 707  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
struct dsaf_misc_op *hns_misc_op_get(struct dsaf_device *dsaf_dev);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.h"
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
struct platform_device *hns_dsaf_find_platform_device(struct fwnode_handle *fwnode);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static guid_t hns_dsaf_acpi_dsm_guid = {.b = {(unsigned char)26U, (unsigned char)170U, (unsigned char)133U, (unsigned char)26U, (unsigned char)147U, (unsigned char)226U, (unsigned char)94U, (unsigned char)65U, (unsigned char)142U, (unsigned char)40U, (unsigned char)141U, (unsigned char)105U, (unsigned char)10U, (unsigned char)15U, (unsigned char)130U, (unsigned char)10U}};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void dsaf_write_sub(struct dsaf_device *dsaf_dev, u32 reg, u32 val)
{
  #line 35 
  if (dsaf_dev->sub_ctrl != (struct regmap *)0) 
                                                #line 36 
                                                dsaf_write_syscon(dsaf_dev->sub_ctrl,reg,val); else 
                                                                    #line 38 
                                                                    dsaf_write_reg(dsaf_dev->sc_base,reg,val);
  #line 39 
  return;
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static u32 dsaf_read_sub(struct dsaf_device *dsaf_dev, u32 reg)
{
  #line 44 
  int err;
  #line 43 
  u32 ret = 0U;
  #line 46 
  if (dsaf_dev->sub_ctrl != (struct regmap *)0) {
    #line 47 
    err = dsaf_read_syscon(dsaf_dev->sub_ctrl,reg,& ret);
    #line 48 
    if (err != 0) 
                  #line 49 
                  _dev_err(dsaf_dev->dev,(char *)"dsaf_read_syscon error %d!\n",err);
  }
  else 
       #line 52 
       ret = dsaf_read_reg(dsaf_dev->sc_base,reg);
  #line 55 
  return ret;
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void hns_dsaf_acpi_ledctrl_by_port(struct hns_mac_cb *mac_cb, u8 op_type, u32 link, u32 port, u32 act)
{
  #line 75 
  void *__mptr;
  #line 75 
  struct acpi_device *tmp_1;
  #line 61 
  union acpi_object *obj;
  #line 62 
  union acpi_object obj_args[3U];
  #line 62 
  union acpi_object argv4;
  #line 64 
  obj_args[0].integer.type = 1U;
  #line 65 
  obj_args[0].integer.value = (unsigned long long)link;
  #line 66 
  obj_args[1].integer.type = 1U;
  #line 67 
  obj_args[1].integer.value = (unsigned long long)port;
  #line 68 
  obj_args[2].integer.type = 1U;
  #line 69 
  obj_args[2].integer.value = (unsigned long long)act;
  #line 71 
  argv4.type = 4U;
  #line 72 
  argv4.package.count = 3U;
  #line 73 
  argv4.package.elements = (union acpi_object *)(& obj_args);
  #line 75 
  ;
  {
    #line 75 
    struct fwnode_handle *__to_acpi_device_node_fwnode = (mac_cb->dev)->fwnode;
    #line 75 
    if ((int)is_acpi_device_node(__to_acpi_device_node_fwnode) != 0) {
      #line 75 
      __mptr = (void *)__to_acpi_device_node_fwnode;
      #line 75 
      tmp_1 = ((struct acpi_device *)(__mptr + 18446744073709551600U));
    }
    else 
         #line 75 
         tmp_1 = (struct acpi_device *)0;
    }
  #line 75 
  obj = acpi_evaluate_dsm(acpi_device_handle(tmp_1),& hns_dsaf_acpi_dsm_guid,0ULL,(unsigned long long)op_type,& argv4);
  #line 77 
  if (obj == (union acpi_object *)0) {
    #line 78 
    _dev_warn(mac_cb->dev,(char *)"ledctrl fail, link:%d port:%d act:%d!\n",link,port,act);
    #line 80 
    return;
  }
  #line 83 
  acpi_os_free((void *)obj);
  #line 84 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void hns_dsaf_acpi_locate_ledctrl_by_port(struct hns_mac_cb *mac_cb, u8 op_type, u32 locate, u32 port)
{
  #line 102 
  void *__mptr;
  #line 102 
  struct acpi_device *tmp_1;
  #line 90 
  union acpi_object obj_args[2U];
  #line 90 
  union acpi_object argv4;
  #line 91 
  union acpi_object *obj;
  #line 93 
  obj_args[0].integer.type = 1U;
  #line 94 
  obj_args[0].integer.value = (unsigned long long)locate;
  #line 95 
  obj_args[1].integer.type = 1U;
  #line 96 
  obj_args[1].integer.value = (unsigned long long)port;
  #line 98 
  argv4.type = 4U;
  #line 99 
  argv4.package.count = 2U;
  #line 100 
  argv4.package.elements = (union acpi_object *)(& obj_args);
  #line 102 
  ;
  {
    #line 102 
    struct fwnode_handle *__to_acpi_device_node_fwnode = (mac_cb->dev)->fwnode;
    #line 102 
    if ((int)is_acpi_device_node(__to_acpi_device_node_fwnode) != 0) {
      #line 102 
      __mptr = (void *)__to_acpi_device_node_fwnode;
      #line 102 
      tmp_1 = ((struct acpi_device *)(__mptr + 18446744073709551600U));
    }
    else 
         #line 102 
         tmp_1 = (struct acpi_device *)0;
    }
  #line 102 
  obj = acpi_evaluate_dsm(acpi_device_handle(tmp_1),& hns_dsaf_acpi_dsm_guid,0ULL,(unsigned long long)op_type,& argv4);
  #line 104 
  if (obj == (union acpi_object *)0) {
    #line 105 
    _dev_err(mac_cb->dev,(char *)"ledctrl fail, locate:%d port:%d!\n",locate,port);
    #line 107 
    return;
  }
  #line 110 
  acpi_os_free((void *)obj);
  #line 111 
  return;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void hns_cpld_set_led(struct hns_mac_cb *mac_cb, int link_status, u16 speed, int data)
{
  #line 117 
  u8 value;
  #line 116 
  int speed_reg = 0;
  #line 119 
  if (mac_cb == (struct hns_mac_cb *)0) {
    #line 120 
    printk((char *)"\001");
    #line 121 
    return;
  }
  #line 123 
  if (mac_cb->cpld_ctrl == (struct regmap *)0) {
    #line 124 
    _dev_err(mac_cb->dev,(char *)"mac_id=%d, cpld syscon is null !\n",(int)mac_cb->mac_id);
    #line 126 
    return;
  }
  #line 129 
  if ((unsigned int)speed == 10000U) 
                                     #line 130 
                                     speed_reg = 1;
  #line 132 
  value = mac_cb->cpld_led_value;
  #line 134 
  if (link_status != 0) {
    #line 135 
    value = (unsigned char)((unsigned int)value & 251U);
    #line 135 
    value = (unsigned char)(((unsigned int)((int)((unsigned char)link_status) << 2U) & 4U) | (unsigned int)value);
    #line 136 
    value = (unsigned char)((unsigned int)value & 252U);
    #line 136 
    value = (unsigned char)((speed_reg & 3) | (int)value);
    #line 138 
    value = (unsigned char)((unsigned int)value & 239U);
    #line 138 
    value = (unsigned char)(((unsigned int)((int)((unsigned char)data) << 4U) & 16U) | (unsigned int)value);
    #line 140 
    if ((int)mac_cb->cpld_led_value != (int)value) {
      #line 141 
      dsaf_write_syscon(mac_cb->cpld_ctrl,mac_cb->cpld_ctrl_reg,(unsigned int)value);
      #line 143 
      mac_cb->cpld_led_value = value;
    }
  }
  else {
    #line 146 
    value = (unsigned char)((unsigned int)mac_cb->cpld_led_value & 32U);
    #line 147 
    dsaf_write_syscon(mac_cb->cpld_ctrl,mac_cb->cpld_ctrl_reg,(unsigned int)value);
    #line 149 
    mac_cb->cpld_led_value = value;
  }
  #line 151 
  return;
}

#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void hns_cpld_set_led_acpi(struct hns_mac_cb *mac_cb, int link_status, u16 speed, int data)
{
  #line 156 
  if (mac_cb == (struct hns_mac_cb *)0) {
    #line 157 
    printk((char *)"\001");
    #line 158 
    return;
  }
  #line 161 
  hns_dsaf_acpi_ledctrl_by_port(mac_cb,(unsigned char)3,(unsigned int)link_status,(unsigned int)mac_cb->mac_id,(unsigned int)data);
  #line 163 
  return;
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void cpld_led_reset(struct hns_mac_cb *mac_cb)
{
  #line 167 
  if (mac_cb == (struct hns_mac_cb *)0 || mac_cb->cpld_ctrl == (struct regmap *)0) 
    #line 168 
    return;
  #line 170 
  dsaf_write_syscon(mac_cb->cpld_ctrl,mac_cb->cpld_ctrl_reg,0U);
  #line 172 
  mac_cb->cpld_led_value = (unsigned char)0U;
  #line 173 
  return;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void cpld_led_reset_acpi(struct hns_mac_cb *mac_cb)
{
  #line 177 
  if (mac_cb == (struct hns_mac_cb *)0) {
    #line 178 
    printk((char *)"\001");
    #line 179 
    return;
  }
  #line 182 
  if (mac_cb->media_type != (unsigned int)HNAE_MEDIA_TYPE_FIBER) 
                                                                 #line 183 
                                                                 return;
  #line 185 
  hns_dsaf_acpi_ledctrl_by_port(mac_cb,(unsigned char)3,0U,(unsigned int)mac_cb->mac_id,0U);
  #line 187 
  return;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static int cpld_set_led_id(struct hns_mac_cb *mac_cb, enum hnae_led_state status)
{
  #line 193 
  int ret;
  #line 192 
  u32 val = 0U;
  #line 195 
  if (mac_cb->cpld_ctrl == (struct regmap *)0) 
                                               #line 196 
                                               return 0;
  #line 198 
  switch ((unsigned int)status) {
    #line 199 
    case (unsigned int)1: 
                          #line 199 
    ;
    #line 200 
    ret = dsaf_read_syscon(mac_cb->cpld_ctrl,mac_cb->cpld_ctrl_reg,& val);
    #line 202 
    if (ret != 0) 
                  #line 203 
                  return ret;
    #line 205 
    val &= 4294967263U;
    #line 205 
    val |= 32U;
    #line 206 
    dsaf_write_syscon(mac_cb->cpld_ctrl,mac_cb->cpld_ctrl_reg,val);
    #line 208 
    mac_cb->cpld_led_value = (unsigned char)val;
    #line 209 
    break;
    #line 210 
    case (unsigned int)0: 
                          #line 210 
    ;
    #line 211 
    mac_cb->cpld_led_value = (unsigned char)((unsigned int)mac_cb->cpld_led_value & 223U);
    #line 211 
    mac_cb->cpld_led_value = mac_cb->cpld_led_value;
    #line 213 
    dsaf_write_syscon(mac_cb->cpld_ctrl,mac_cb->cpld_ctrl_reg,(unsigned int)mac_cb->cpld_led_value);
    #line 215 
    break;
    #line 216 
    default: 
             #line 216 
    ;
    #line 217 
    _dev_err(mac_cb->dev,(char *)"invalid led state: %d!",(unsigned int)status);
    #line 218 
    return -22;
  }
  #line 221 
  return 0;
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static int cpld_set_led_id_acpi(struct hns_mac_cb *mac_cb, enum hnae_led_state status)
{
  #line 227 
  switch ((unsigned int)status) {
    #line 228 
    case (unsigned int)1: 
                          #line 228 
    ;
    #line 229 
    hns_dsaf_acpi_locate_ledctrl_by_port(mac_cb,(unsigned char)6,1U,(unsigned int)mac_cb->mac_id);
    #line 233 
    break;
    #line 234 
    case (unsigned int)0: 
                          #line 234 
    ;
    #line 235 
    hns_dsaf_acpi_locate_ledctrl_by_port(mac_cb,(unsigned char)6,0U,(unsigned int)mac_cb->mac_id);
    #line 239 
    break;
    #line 240 
    default: 
             #line 240 
    ;
    #line 241 
    _dev_err(mac_cb->dev,(char *)"invalid led state: %d!",(unsigned int)status);
    #line 242 
    return -22;
  }
  #line 245 
  return 0;
}

#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void hns_dsaf_acpi_srst_by_port(struct dsaf_device *dsaf_dev, u8 op_type, u32 port_type, u32 port, u32 val)
{
  #line 267 
  void *__mptr;
  #line 267 
  struct acpi_device *tmp_1;
  #line 253 
  union acpi_object *obj;
  #line 254 
  union acpi_object obj_args[3U];
  #line 254 
  union acpi_object argv4;
  #line 256 
  obj_args[0].integer.type = 1U;
  #line 257 
  obj_args[0].integer.value = (unsigned long long)port_type;
  #line 258 
  obj_args[1].integer.type = 1U;
  #line 259 
  obj_args[1].integer.value = (unsigned long long)port;
  #line 260 
  obj_args[2].integer.type = 1U;
  #line 261 
  obj_args[2].integer.value = (unsigned long long)val;
  #line 263 
  argv4.type = 4U;
  #line 264 
  argv4.package.count = 3U;
  #line 265 
  argv4.package.elements = (union acpi_object *)(& obj_args);
  #line 267 
  ;
  {
    #line 267 
    struct fwnode_handle *__to_acpi_device_node_fwnode = (dsaf_dev->dev)->fwnode;
    #line 267 
    if ((int)is_acpi_device_node(__to_acpi_device_node_fwnode) != 0) {
      #line 267 
      __mptr = (void *)__to_acpi_device_node_fwnode;
      #line 267 
      tmp_1 = ((struct acpi_device *)(__mptr + 18446744073709551600U));
    }
    else 
         #line 267 
         tmp_1 = (struct acpi_device *)0;
    }
  #line 267 
  obj = acpi_evaluate_dsm(acpi_device_handle(tmp_1),& hns_dsaf_acpi_dsm_guid,0ULL,(unsigned long long)op_type,& argv4);
  #line 269 
  if (obj == (union acpi_object *)0) {
    #line 270 
    _dev_warn(dsaf_dev->dev,(char *)"reset port_type%d port%d fail!",port_type,port);
    #line 272 
    return;
  }
  #line 275 
  acpi_os_free((void *)obj);
  #line 276 
  return;
}

#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void hns_dsaf_rst(struct dsaf_device *dsaf_dev, bool dereset)
{
  #line 280 
  u32 xbar_reg_addr;
  #line 281 
  u32 nt_reg_addr;
  #line 283 
  if (! dereset) {
    #line 284 
    xbar_reg_addr = 2560U;
    #line 285 
    nt_reg_addr = 2568U;
  }
  else {
    #line 287 
    xbar_reg_addr = 2564U;
    #line 288 
    nt_reg_addr = 2572U;
  }
  #line 291 
  dsaf_write_sub(dsaf_dev,xbar_reg_addr,1U);
  #line 292 
  dsaf_write_sub(dsaf_dev,nt_reg_addr,1U);
  #line 293 
  return;
}

#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void hns_dsaf_rst_acpi(struct dsaf_device *dsaf_dev, bool dereset)
{
  #line 297 
  hns_dsaf_acpi_srst_by_port(dsaf_dev,(unsigned char)1,1U,0U,(unsigned int)dereset);
  #line 298 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void hns_dsaf_xge_srst_by_port(struct dsaf_device *dsaf_dev, u32 port, bool dereset)
{
  #line 306 
  u32 reg_addr;
  #line 305 
  u32 reg_val = 0U;
  #line 308 
  if (port > 5U) 
                 #line 309 
                 return;
  #line 311 
  reg_val |= 1U;
  #line 312 
  reg_val = (unsigned int)(34087042 << (dsaf_dev->mac_cb[port])->port_rst_off) | reg_val;
  #line 314 
  if (! dereset) 
                 #line 315 
                 reg_addr = 2576U; else 
                                        #line 317 
                                        reg_addr = 2580U;
  #line 319 
  dsaf_write_sub(dsaf_dev,reg_addr,reg_val);
  #line 320 
  return;
}

#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void hns_dsaf_xge_srst_by_port_acpi(struct dsaf_device *dsaf_dev, u32 port, bool dereset)
{
  #line 325 
  hns_dsaf_acpi_srst_by_port(dsaf_dev,(unsigned char)1,4U,port,(unsigned int)dereset);
  #line 326 
  return;
}

#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void hns_dsaf_srst_chns(struct dsaf_device *dsaf_dev, u32 msk, bool dereset)
{
  #line 342 
  u32 reg_addr;
  #line 344 
  if (! dereset) 
                 #line 345 
                 reg_addr = 2728U; else 
                                        #line 347 
                                        reg_addr = 2732U;
  #line 349 
  dsaf_write_sub(dsaf_dev,reg_addr,msk);
  #line 350 
  return;
}

#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void hns_dsaf_srst_chns_acpi(struct dsaf_device *dsaf_dev, u32 msk, bool dereset)
{
  #line 365 
  hns_dsaf_acpi_srst_by_port(dsaf_dev,(unsigned char)1,6U,msk,(unsigned int)dereset);
  #line 366 
  return;
}

#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void hns_dsaf_roce_srst(struct dsaf_device *dsaf_dev, bool dereset)
{
  #line 372 
  if (! dereset) 
                 #line 373 
                 dsaf_write_sub(dsaf_dev,2640U,1U);
  else {
    #line 375 
    dsaf_write_sub(dsaf_dev,812U,1U);
    #line 377 
    dsaf_write_sub(dsaf_dev,2644U,1U);
    #line 379 
    msleep(20U);
    #line 380 
    dsaf_write_sub(dsaf_dev,808U,1U);
  }
  #line 382 
  return;
}

#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void hns_dsaf_roce_srst_acpi(struct dsaf_device *dsaf_dev, bool dereset)
{
  #line 386 
  hns_dsaf_acpi_srst_by_port(dsaf_dev,(unsigned char)1,7U,0U,(unsigned int)dereset);
  #line 387 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void hns_dsaf_ge_srst_by_port(struct dsaf_device *dsaf_dev, u32 port, bool dereset)
{
  #line 393 
  u32 reg_val_1;
  #line 394 
  u32 reg_val_2;
  #line 395 
  u32 port_rst_off;
  #line 397 
  if (port > 7U) 
                 #line 398 
                 return;
  #line 400 
  if (dsaf_dev->dsaf_mode != (unsigned int)DSAF_MODE_DISABLE_SP) {
    #line 401 
    reg_val_1 = (unsigned int)(1 << port);
    #line 402 
    port_rst_off = (dsaf_dev->mac_cb[port])->port_rst_off;
    #line 404 
    if (dsaf_dev->dsaf_ver == 3552816U) 
                                        #line 404 
                                        reg_val_2 = 17043521U; else 
                                                                    #line 404 
                                                                    reg_val_2 = 34087042U;
    #line 406 
    reg_val_2 <<= port_rst_off;
    #line 408 
    if (! dereset) {
      #line 409 
      dsaf_write_sub(dsaf_dev,2592U,reg_val_1);
      #line 412 
      dsaf_write_sub(dsaf_dev,2584U,reg_val_2);
    }
    else {
      #line 415 
      dsaf_write_sub(dsaf_dev,2588U,reg_val_2);
      #line 418 
      dsaf_write_sub(dsaf_dev,2596U,reg_val_1);
    }
  }
  else {
    #line 422 
    reg_val_1 = 87360U;
    #line 423 
    if (dsaf_dev->dsaf_ver == 3552816U) 
                                        #line 423 
                                        reg_val_2 = 256U; else 
                                                               #line 423 
                                                               reg_val_2 = 64U;
    #line 425 
    reg_val_1 <<= dsaf_dev->reset_offset;
    #line 426 
    reg_val_2 <<= dsaf_dev->reset_offset;
    #line 428 
    if (! dereset) {
      #line 429 
      dsaf_write_sub(dsaf_dev,2592U,reg_val_1);
      #line 432 
      dsaf_write_sub(dsaf_dev,2632U,reg_val_2);
    }
    else {
      #line 435 
      dsaf_write_sub(dsaf_dev,2596U,reg_val_1);
      #line 438 
      dsaf_write_sub(dsaf_dev,2636U,reg_val_2);
    }
  }
  #line 441 
  return;
}

#line 444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void hns_dsaf_ge_srst_by_port_acpi(struct dsaf_device *dsaf_dev, u32 port, bool dereset)
{
  #line 447 
  hns_dsaf_acpi_srst_by_port(dsaf_dev,(unsigned char)1,5U,port,(unsigned int)dereset);
  #line 448 
  return;
}

#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void hns_ppe_srst_by_port(struct dsaf_device *dsaf_dev, u32 port, bool dereset)
{
  #line 455 
  u32 reg_addr;
  #line 454 
  u32 reg_val = 0U;
  #line 457 
  reg_val = (unsigned int)(1 << (dsaf_dev->mac_cb[port])->port_rst_off) | reg_val;
  #line 459 
  if (! dereset) 
                 #line 460 
                 reg_addr = 2632U; else 
                                        #line 462 
                                        reg_addr = 2636U;
  #line 464 
  dsaf_write_sub(dsaf_dev,reg_addr,reg_val);
  #line 465 
  return;
}

#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void hns_ppe_srst_by_port_acpi(struct dsaf_device *dsaf_dev, u32 port, bool dereset)
{
  #line 470 
  hns_dsaf_acpi_srst_by_port(dsaf_dev,(unsigned char)1,2U,port,(unsigned int)dereset);
  #line 471 
  return;
}

#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static void hns_ppe_com_srst(struct dsaf_device *dsaf_dev, bool dereset)
{
  #line 476 
  u32 reg_val;
  #line 477 
  u32 reg_addr;
  #line 479 
  if (dev_of_node(dsaf_dev->dev) == (struct device_node *)0) 
                                                             #line 480 
                                                             return;
  #line 482 
  if (dsaf_dev->dsaf_mode != (unsigned int)DSAF_MODE_DISABLE_SP) {
    #line 483 
    reg_val = 1U;
    #line 484 
    if (! dereset) 
                   #line 485 
                   reg_addr = 2696U; else 
                                          #line 487 
                                          reg_addr = 2700U;
  }
  else {
    #line 490 
    reg_val = (unsigned int)(256 << dsaf_dev->reset_offset);
    #line 492 
    if (! dereset) 
                   #line 493 
                   reg_addr = 2632U; else 
                                          #line 495 
                                          reg_addr = 2636U;
  }
  #line 498 
  dsaf_write_sub(dsaf_dev,reg_addr,reg_val);
  #line 499 
  return;
}

#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static phy_interface_t hns_mac_get_phy_if(struct hns_mac_cb *mac_cb)
{
  #line 508 
  u32 mode;
  #line 509 
  u32 reg;
  #line 512 
  phy_interface_t phy_if;
  #line 510 
  bool is_ver1 = (_Bool)((mac_cb->dsaf_dev)->dsaf_ver == 3552816U);
  #line 511 
  int mac_id = (int)mac_cb->mac_id;
  #line 514 
  if ((int)is_ver1 != 0) {
    #line 515 
    if ((mac_cb->dsaf_dev)->dsaf_mode == (unsigned int)DSAF_MODE_DISABLE_SP) 
      #line 516 
      return PHY_INTERFACE_MODE_SGMII;
    #line 518 
    if ((unsigned int)mac_id <= 3U) 
                                    #line 519 
                                    reg = 400U; else 
                                                     #line 521 
                                                     reg = 384U;
  }
  else 
    #line 523 
    if ((mac_cb->dsaf_dev)->dsaf_mode != (unsigned int)DSAF_MODE_DISABLE_SP && mac_id <= 3) 
      #line 524 
      reg = 404U; else 
                       #line 526 
                       reg = 388U;
  #line 529 
  mode = dsaf_read_sub(mac_cb->dsaf_dev,reg);
  #line 530 
  if (((unsigned long long)mode & (1ULL << mac_cb->port_mode_off)) >> mac_cb->port_mode_off != 0ULL) 
    #line 531 
    phy_if = PHY_INTERFACE_MODE_XGMII; else 
                                            #line 533 
                                            phy_if = PHY_INTERFACE_MODE_SGMII;
  #line 535 
  return phy_if;
}

#line 538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static phy_interface_t hns_mac_get_phy_if_acpi(struct hns_mac_cb *mac_cb)
{
  #line 551 
  void *__mptr;
  #line 551 
  struct acpi_device *tmp_1;
  #line 541 
  union acpi_object *obj;
  #line 542 
  union acpi_object obj_args;
  #line 542 
  union acpi_object argv4;
  #line 540 
  phy_interface_t phy_if = PHY_INTERFACE_MODE_NA;
  #line 544 
  obj_args.integer.type = 1U;
  #line 545 
  obj_args.integer.value = (unsigned long long)mac_cb->mac_id;
  #line 549 
  argv4.type = 4U;
  #line 547 
  argv4.package.count = 1U;
  #line 548 
  argv4.package.elements = & obj_args;
  {
    #line 551 
    struct fwnode_handle *__to_acpi_device_node_fwnode = (mac_cb->dev)->fwnode;
    #line 551 
    if ((int)is_acpi_device_node(__to_acpi_device_node_fwnode) != 0) {
      #line 551 
      __mptr = (void *)__to_acpi_device_node_fwnode;
      #line 551 
      tmp_1 = ((struct acpi_device *)(__mptr + 18446744073709551600U));
    }
    else 
         #line 551 
         tmp_1 = (struct acpi_device *)0;
    }
  #line 551 
  obj = acpi_evaluate_dsm(acpi_device_handle(tmp_1),& hns_dsaf_acpi_dsm_guid,0ULL,4ULL,& argv4);
  #line 555 
  if (obj == (union acpi_object *)0 || obj->type != 1U) 
                                                        #line 556 
                                                        return phy_if;
  #line 558 
  if (obj->integer.value != 0ULL) 
                                  #line 558 
                                  phy_if = PHY_INTERFACE_MODE_XGMII; else 
                                                                    #line 558 
                                                                    phy_if = PHY_INTERFACE_MODE_SGMII;
  {
    #line 561 
    bool branch;
    #line 561 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"hns_dsaf", .function = (char *)"hns_mac_get_phy_if_acpi", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c", .format = (char *)"mac_id=%d, phy_if=%d\n", .lineno = (unsigned int)561U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 561 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 561 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 561 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug442,mac_cb->dev,(char *)"mac_id=%d, phy_if=%d\n",(int)mac_cb->mac_id,(unsigned int)phy_if);
  }
  #line 563 
  acpi_os_free((void *)obj);
  #line 565 
  return phy_if;
}

#line 568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static int hns_mac_get_sfp_prsnt(struct hns_mac_cb *mac_cb, int *sfp_prsnt)
{
  #line 571 
  int ret;
  #line 570 
  u32 val = 0U;
  #line 573 
  if (mac_cb->cpld_ctrl == (struct regmap *)0) 
                                               #line 574 
                                               return -19;
  #line 576 
  ret = dsaf_read_syscon(mac_cb->cpld_ctrl,mac_cb->cpld_ctrl_reg + 2U,& val);
  #line 579 
  if (ret != 0) 
                #line 580 
                return ret;
  #line 582 
  *sfp_prsnt = val == 0U;
  #line 583 
  return 0;
}

#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static int hns_mac_get_sfp_prsnt_acpi(struct hns_mac_cb *mac_cb, int *sfp_prsnt)
{
  #line 598 
  void *__mptr;
  #line 598 
  struct acpi_device *tmp_1;
  #line 588 
  union acpi_object *obj;
  #line 589 
  union acpi_object obj_args;
  #line 589 
  union acpi_object argv4;
  #line 591 
  obj_args.integer.type = 1U;
  #line 592 
  obj_args.integer.value = (unsigned long long)mac_cb->mac_id;
  #line 596 
  argv4.type = 4U;
  #line 594 
  argv4.package.count = 1U;
  #line 595 
  argv4.package.elements = & obj_args;
  {
    #line 598 
    struct fwnode_handle *__to_acpi_device_node_fwnode = (mac_cb->dev)->fwnode;
    #line 598 
    if ((int)is_acpi_device_node(__to_acpi_device_node_fwnode) != 0) {
      #line 598 
      __mptr = (void *)__to_acpi_device_node_fwnode;
      #line 598 
      tmp_1 = ((struct acpi_device *)(__mptr + 18446744073709551600U));
    }
    else 
         #line 598 
         tmp_1 = (struct acpi_device *)0;
    }
  #line 598 
  obj = acpi_evaluate_dsm(acpi_device_handle(tmp_1),& hns_dsaf_acpi_dsm_guid,0ULL,5ULL,& argv4);
  #line 602 
  if (obj == (union acpi_object *)0 || obj->type != 1U) 
                                                        #line 603 
                                                        return -19;
  #line 605 
  *sfp_prsnt = (int)obj->integer.value;
  #line 607 
  acpi_os_free((void *)obj);
  #line 609 
  return 0;
}

#line 617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static int hns_mac_config_sds_loopback(struct hns_mac_cb *mac_cb, bool en)
{
  #line 619 
  u8 lane_id[8U] = {(unsigned char)0U, (unsigned char)1U, (unsigned char)2U, (unsigned char)3U, (unsigned char)2U, (unsigned char)3U, (unsigned char)0U, (unsigned char)1U};
  #line 630 
  u64 reg_offset = (unsigned long long)(((int)lane_id[(int)mac_cb->mac_id] * 512 + 16512) * 2);
  #line 632 
  int sfp_prsnt = 0;
  #line 633 
  int ret = hns_mac_get_sfp_prsnt(mac_cb,& sfp_prsnt);
  #line 635 
  if (mac_cb->phy_dev == (struct phy_device *)0) 
    #line 636 
    if (ret != 0) 
                  #line 637 
                  printk((char *)"\001");
    else 
      #line 639 
      if (sfp_prsnt == 0) 
                          #line 640 
                          printk((char *)"\001");
  #line 643 
  if (mac_cb->serdes_ctrl != (struct regmap *)0) {
    #line 644 
    u32 origin = 0U;
    #line 646 
    if ((mac_cb->dsaf_dev)->dsaf_ver != 3552816U) 
      #line 652 
      if ((mac_cb->dsaf_dev)->dsaf_mode != (unsigned int)DSAF_MODE_DISABLE_SP && (unsigned int)mac_cb->mac_id <= 3U) 
        #line 654 
        dsaf_write_syscon(mac_cb->serdes_ctrl,262152U,0U); else 
                                                                #line 657 
                                                                dsaf_write_syscon(mac_cb->serdes_ctrl,262152U,3U);
    #line 661 
    ret = dsaf_read_syscon(mac_cb->serdes_ctrl,(unsigned int)reg_offset,& origin);
    #line 663 
    if (ret != 0) 
                  #line 664 
                  return ret;
    #line 666 
    origin &= 4294966271U;
    #line 666 
    origin = ((unsigned int)((int)en << 10) & 1024U) | origin;
    #line 667 
    dsaf_write_syscon(mac_cb->serdes_ctrl,(unsigned int)reg_offset,origin);
  }
  else {
    #line 669 
    unsigned int tmp_0;
    #line 669 
    if ((unsigned int)mac_cb->mac_id <= 3U) 
                                            #line 669 
                                            tmp_0 = 2621440U; else 
                                                                   #line 669 
                                                                   tmp_0 = 2097152U;
    #line 669 
    u8 *base_addr = mac_cb->serdes_vaddr + tmp_0;
    #line 671 
    dsaf_set_reg_field(base_addr,(unsigned int)reg_offset,1024U,10U,(unsigned int)en);
  }
  #line 674 
  return 0;
}

#line 678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
static int hns_mac_config_sds_loopback_acpi(struct hns_mac_cb *mac_cb, bool en)
{
  #line 692 
  void *__mptr;
  #line 692 
  struct acpi_device *tmp_1;
  #line 680 
  union acpi_object *obj;
  #line 681 
  union acpi_object obj_args[3U];
  #line 681 
  union acpi_object argv4;
  #line 683 
  obj_args[0].integer.type = 1U;
  #line 684 
  obj_args[0].integer.value = (unsigned long long)mac_cb->mac_id;
  #line 685 
  obj_args[1].integer.type = 1U;
  #line 686 
  obj_args[1].integer.value = (unsigned long long)((int)en != 0);
  #line 688 
  argv4.type = 4U;
  #line 689 
  argv4.package.count = 2U;
  #line 690 
  argv4.package.elements = (union acpi_object *)(& obj_args);
  {
    #line 692 
    struct fwnode_handle *__to_acpi_device_node_fwnode = ((mac_cb->dsaf_dev)->dev)->fwnode;
    #line 692 
    if ((int)is_acpi_device_node(__to_acpi_device_node_fwnode) != 0) {
      #line 692 
      __mptr = (void *)__to_acpi_device_node_fwnode;
      #line 692 
      tmp_1 = ((struct acpi_device *)(__mptr + 18446744073709551600U));
    }
    else 
         #line 692 
         tmp_1 = (struct acpi_device *)0;
    }
  #line 692 
  obj = acpi_evaluate_dsm(acpi_device_handle(tmp_1),& hns_dsaf_acpi_dsm_guid,0ULL,2ULL,& argv4);
  #line 695 
  if (obj == (union acpi_object *)0) {
    #line 696 
    _dev_warn((mac_cb->dsaf_dev)->dev,(char *)"set port%d serdes lp fail!",(int)mac_cb->mac_id);
    #line 699 
    return -524;
  }
  #line 702 
  acpi_os_free((void *)obj);
  #line 704 
  return 0;
}

#line 707  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
struct dsaf_misc_op *hns_misc_op_get(struct dsaf_device *dsaf_dev)
{
  #line 709 
  struct dsaf_misc_op *misc_op;
  #line 711 
  misc_op = (struct dsaf_misc_op *)cif_devm_kzalloc_0(dsaf_dev->dev,104UL,3264U);
  #line 712 
  if (misc_op == (struct dsaf_misc_op *)0) 
                                           #line 713 
                                           return (struct dsaf_misc_op *)0;
  #line 715 
  if (dev_of_node(dsaf_dev->dev) != (struct device_node *)0) {
    #line 716 
    misc_op->cpld_set_led = & hns_cpld_set_led;
    #line 717 
    misc_op->cpld_reset_led = & cpld_led_reset;
    #line 718 
    misc_op->cpld_set_led_id = & cpld_set_led_id;
    #line 720 
    misc_op->dsaf_reset = & hns_dsaf_rst;
    #line 721 
    misc_op->xge_srst = & hns_dsaf_xge_srst_by_port;
    #line 722 
    misc_op->ge_srst = & hns_dsaf_ge_srst_by_port;
    #line 723 
    misc_op->ppe_srst = & hns_ppe_srst_by_port;
    #line 724 
    misc_op->ppe_comm_srst = & hns_ppe_com_srst;
    #line 725 
    misc_op->hns_dsaf_srst_chns = & hns_dsaf_srst_chns;
    #line 726 
    misc_op->hns_dsaf_roce_srst = & hns_dsaf_roce_srst;
    #line 728 
    misc_op->get_phy_if = & hns_mac_get_phy_if;
    #line 729 
    misc_op->get_sfp_prsnt = & hns_mac_get_sfp_prsnt;
    #line 731 
    misc_op->cfg_serdes_loopback = & hns_mac_config_sds_loopback;
  }
  else {
    #line 732 
    if ((int)is_acpi_node((dsaf_dev->dev)->fwnode) != 0) {
      #line 733 
      misc_op->cpld_set_led = & hns_cpld_set_led_acpi;
      #line 734 
      misc_op->cpld_reset_led = & cpld_led_reset_acpi;
      #line 735 
      misc_op->cpld_set_led_id = & cpld_set_led_id_acpi;
      #line 737 
      misc_op->dsaf_reset = & hns_dsaf_rst_acpi;
      #line 738 
      misc_op->xge_srst = & hns_dsaf_xge_srst_by_port_acpi;
      #line 739 
      misc_op->ge_srst = & hns_dsaf_ge_srst_by_port_acpi;
      #line 740 
      misc_op->ppe_srst = & hns_ppe_srst_by_port_acpi;
      #line 741 
      misc_op->ppe_comm_srst = & hns_ppe_com_srst;
      #line 742 
      misc_op->hns_dsaf_srst_chns = & hns_dsaf_srst_chns_acpi;
      #line 743 
      misc_op->hns_dsaf_roce_srst = & hns_dsaf_roce_srst_acpi;
      #line 745 
      misc_op->get_phy_if = & hns_mac_get_phy_if_acpi;
      #line 746 
      misc_op->get_sfp_prsnt = & hns_mac_get_sfp_prsnt_acpi;
      #line 748 
      misc_op->cfg_serdes_loopback = & hns_mac_config_sds_loopback_acpi;
    }
    else {
      #line 750 
      devm_kfree(dsaf_dev->dev,(void *)misc_op);
      #line 751 
      misc_op = (struct dsaf_misc_op *)0;
    }
  }
  #line 754 
  return misc_op;
}

#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_misc.c"
struct platform_device *hns_dsaf_find_platform_device(struct fwnode_handle *fwnode)
{
  #line 763 
  void *__mptr;
  #line 760 
  struct device *dev;
  #line 763 
  struct platform_device *tmp_0;
  #line 762 
  dev = bus_find_device_by_fwnode(& platform_bus_type,fwnode);
  #line 763 
  if (dev != (struct device *)0) {
    #line 763 
    __mptr = (void *)dev;
    #line 763 
    tmp_0 = ((struct platform_device *)(__mptr + 18446744073709551600U));
  }
  else 
       #line 763 
       tmp_0 = (struct platform_device *)0;
  #line 763 
  return tmp_0;
}

#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_misc.i.aux"
static void *cif_devm_kzalloc_0(struct device *dev, size_t size, gfp_t flags)
{
  #line 679 
  return ldv_devm_kzalloc(size,flags);
}

#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 18 
void *memset(void *, int, size_t);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t __ab_c_size_0(size_t a, size_t b, size_t c)
{
  #line 297 
  size_t *__d_0;
  #line 295 
  size_t __a;
  #line 295 
  size_t __b;
  #line 295 
  size_t *__d;
  #line 297 
  size_t __a_0;
  #line 297 
  size_t __b_0;
  #line 293 
  size_t bytes;
  {
    #line 295 
    __a = a;
    #line 295 
    __b = b;
    #line 295 
    __d = & bytes;
    #line 295 
    int tmp = & __a == __d;
    }
  #line 295 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 296 
                                                return 18446744073709551615UL;
  {
    #line 297 
    __a_0 = bytes;
    #line 297 
    __b_0 = c;
    #line 297 
    __d_0 = & bytes;
    #line 297 
    int tmp_3 = & __a_0 == __d_0;
    }
  #line 297 
  if (__builtin_add_overflow(__a_0,__b_0,__d_0) != 0) 
                                                      #line 298 
                                                      return 18446744073709551615UL;
  #line 300 
  return bytes;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_ppe.i.aux"
static void *cif_devm_kzalloc_1(struct device *dev, size_t size, gfp_t flags);
#line 4371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4371 
void netdev_rss_key_fill(void *, size_t);
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.h"
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
int hns_ppe_init(struct dsaf_device *dsaf_dev);
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.h"
#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
void hns_ppe_uninit(struct dsaf_device *dsaf_dev);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
void hns_ppe_set_tso_enable(struct hns_ppe_cb *ppe_cb, u32 value)
{
  #line 20 
  dsaf_set_reg_field(ppe_cb->io_base,160U,1U,0U,(unsigned int)(value != 0U));
  #line 21 
  return;
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
void hns_ppe_set_rss_key(struct hns_ppe_cb *ppe_cb, u32 *rss_key)
{
  #line 26 
  u32 key_item;
  #line 28 
  key_item = 0U;
  #line 28 
  while (key_item <= 9U) {
    #line 29 
    dsaf_write_reg(ppe_cb->io_base,(key_item + 576U) * 4U,*(rss_key + (unsigned long)key_item));
    #line 28 
    key_item ++;
  }
  #line 30 
  return;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
void hns_ppe_set_indir_table(struct hns_ppe_cb *ppe_cb, u32 *rss_tab)
{
  #line 36 
  int i;
  #line 37 
  int reg_value;
  #line 39 
  i = 0;
  #line 39 
  while (i <= 63) {
    {
      #line 40 
      reg_value = (int)dsaf_read_reg(ppe_cb->io_base,(unsigned int)((i + 512) * 4));
      #line 43 
      reg_value &= -32;
      #line 43 
      reg_value = (int)((*(rss_tab + (unsigned long)(i * 4)) & 31U) | (unsigned int)reg_value);
      #line 46 
      reg_value &= -7937;
      #line 46 
      reg_value = (int)(((*(rss_tab + ((unsigned long)(i * 4) + (unsigned long)1U)) << 8) & 7936U) | (unsigned int)reg_value);
      #line 49 
      reg_value &= -2031617;
      #line 49 
      reg_value = (int)(((*(rss_tab + ((unsigned long)(i * 4) + (unsigned long)2U)) << 16) & 2031616U) | (unsigned int)reg_value);
      #line 52 
      reg_value &= -520093697;
      #line 52 
      reg_value = (int)(((*(rss_tab + ((unsigned long)(i * 4) + (unsigned long)3U)) << 24) & 520093696U) | (unsigned int)reg_value);
      #line 55 
      dsaf_write_reg(ppe_cb->io_base,(unsigned int)((i + 512) * 4),(unsigned int)reg_value);
    }
    #line 39 
    i ++;
  }
  #line 57 
  return;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
static u8 *hns_ppe_common_get_ioaddr(struct ppe_common_cb *ppe_common)
{
  #line 63 
  return (ppe_common->dsaf_dev)->ppe_base + 458752U;
}

#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
static int hns_ppe_common_get_cfg(struct dsaf_device *dsaf_dev, int comm_index)
{
  #line 74 
  struct ppe_common_cb *ppe_common;
  #line 75 
  int ppe_num;
  #line 77 
  if (dsaf_dev->dsaf_mode != (unsigned int)DSAF_MODE_DISABLE_SP) 
                                                                 #line 78 
                                                                 ppe_num = 6; else 
                                                                    #line 80 
                                                                    ppe_num = 1;
  #line 82 
  ;
  #line 82 
  ppe_common = (struct ppe_common_cb *)cif_devm_kzalloc_1(dsaf_dev->dev,
                           __ab_c_size_0((unsigned long)ppe_num,1208UL,40UL),
                           3264U);
  #line 85 
  if (ppe_common == (struct ppe_common_cb *)0) 
                                               #line 86 
                                               return -12;
  #line 88 
  ppe_common->ppe_num = (unsigned int)ppe_num;
  #line 89 
  ppe_common->dsaf_dev = dsaf_dev;
  #line 90 
  ppe_common->comm_index = (unsigned char)comm_index;
  #line 91 
  if (dsaf_dev->dsaf_mode != (unsigned int)DSAF_MODE_DISABLE_SP) 
                                                                 #line 92 
                                                                 ppe_common->ppe_mode = PPE_COMMON_MODE_SERVICE; else 
                                                                    #line 94 
                                                                    ppe_common->ppe_mode = PPE_COMMON_MODE_DEBUG;
  #line 95 
  ppe_common->dev = dsaf_dev->dev;
  #line 97 
  ppe_common->io_base = hns_ppe_common_get_ioaddr(ppe_common);
  #line 99 
  dsaf_dev->ppe_common[comm_index] = ppe_common;
  #line 101 
  return 0;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
static void hns_ppe_common_free_cfg(struct dsaf_device *dsaf_dev, u32 comm_index)
{
  #line 107 
  dsaf_dev->ppe_common[comm_index] = (struct ppe_common_cb *)0;
  #line 108 
  return;
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
static u8 *hns_ppe_get_iobase(struct ppe_common_cb *ppe_common, int ppe_idx)
{
  #line 113 
  return (ppe_common->dsaf_dev)->ppe_base + (unsigned long)(ppe_idx * 65536);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
static void hns_ppe_get_cfg(struct ppe_common_cb *ppe_common)
{
  #line 118 
  u32 i;
  #line 119 
  struct hns_ppe_cb *ppe_cb;
  #line 120 
  u32 ppe_num = ppe_common->ppe_num;
  #line 122 
  i = 0U;
  #line 122 
  while (i < ppe_num) {
    #line 123 
    ppe_cb = & ppe_common->ppe_cb[i];
    #line 124 
    ppe_cb->dev = ppe_common->dev;
    #line 125 
    ppe_cb->next = (struct hns_ppe_cb *)0;
    #line 126 
    ppe_cb->ppe_common_cb = ppe_common;
    #line 127 
    ppe_cb->index = (unsigned char)i;
    #line 128 
    ppe_cb->io_base = hns_ppe_get_iobase(ppe_common,(int)i);
    #line 129 
    ppe_cb->virq = 0;
    #line 122 
    i ++;
  }
  #line 131 
  return;
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
static void hns_ppe_cnt_clr_ce(struct hns_ppe_cb *ppe_cb)
{
  #line 135 
  dsaf_set_reg_field(ppe_cb->io_base,768U,1U,0U,1U);
  #line 136 
  return;
}

#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
static void hns_ppe_set_vlan_strip(struct hns_ppe_cb *ppe_cb, int en)
{
  #line 141 
  dsaf_write_reg(ppe_cb->io_base,172U,(unsigned int)en);
  #line 142 
  return;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
static void hns_ppe_checksum_hw(struct hns_ppe_cb *ppe_cb, u32 value)
{
  #line 151 
  dsaf_set_reg_field(ppe_cb->io_base,152U,268435455U,0U,value);
  #line 152 
  return;
}

#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
static void hns_ppe_set_qid_mode(struct ppe_common_cb *ppe_common, enum ppe_qid_mode qid_mdoe)
{
  #line 158 
  dsaf_set_reg_field(ppe_common->io_base,0U,1792U,8U,(unsigned int)qid_mdoe);
  #line 159 
  return;
}

#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
static void hns_ppe_set_qid(struct ppe_common_cb *ppe_common, u32 qid)
{
  #line 170 
  u32 qid_mod = dsaf_read_reg(ppe_common->io_base,0U);
  #line 172 
  if ((qid_mod & 255U) == 0U) {
    #line 174 
    qid_mod &= 4294967040U;
    #line 174 
    qid_mod = (qid & 255U) | qid_mod;
    #line 176 
    dsaf_write_reg(ppe_common->io_base,0U,qid_mod);
  }
  #line 178 
  return;
}

#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
static void hns_ppe_set_port_mode(struct hns_ppe_cb *ppe_cb, enum ppe_port_mode mode)
{
  #line 188 
  dsaf_write_reg(ppe_cb->io_base,128U,(unsigned int)mode);
  #line 189 
  return;
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
static int hns_ppe_common_init_hw(struct ppe_common_cb *ppe_common)
{
  #line 199 
  enum ppe_qid_mode qid_mode;
  #line 200 
  struct dsaf_device *dsaf_dev = ppe_common->dsaf_dev;
  #line 201 
  enum dsaf_mode dsaf_mode = dsaf_dev->dsaf_mode;
  #line 203 
  (*((dsaf_dev->misc_op)->ppe_comm_srst))(dsaf_dev,(_Bool)0);
  #line 204 
  msleep(100U);
  #line 205 
  (*((dsaf_dev->misc_op)->ppe_comm_srst))(dsaf_dev,(_Bool)1);
  #line 206 
  msleep(100U);
  #line 208 
  if (ppe_common->ppe_mode == (unsigned int)PPE_COMMON_MODE_SERVICE) {
    #line 209 
    switch ((unsigned int)dsaf_mode) {
      #line 210 
      case (unsigned int)1: 
                            #line 210 
      ;
      #line 211 
      case (unsigned int)9: 
                            #line 211 
      ;
      #line 212 
      qid_mode = PPE_QID_MODE0;
      #line 213 
      hns_ppe_set_qid(ppe_common,0U);
      #line 214 
      break;
      #line 215 
      case (unsigned int)2: 
                            #line 215 
      ;
      #line 216 
      case (unsigned int)12: 
                             #line 216 
      ;
      #line 217 
      qid_mode = PPE_QID_MODE3;
      #line 218 
      break;
      #line 219 
      case (unsigned int)3: 
                            #line 219 
      ;
      #line 220 
      case (unsigned int)11: 
                             #line 220 
      ;
      #line 221 
      qid_mode = PPE_QID_MODE4;
      #line 222 
      break;
      #line 223 
      case (unsigned int)4: 
                            #line 223 
      ;
      #line 224 
      case (unsigned int)13: 
                             #line 224 
      ;
      #line 225 
      qid_mode = PPE_QID_MODE5;
      #line 226 
      break;
      #line 227 
      case (unsigned int)5: 
                            #line 227 
      ;
      #line 228 
      case (unsigned int)16: 
                             #line 228 
      ;
      #line 229 
      qid_mode = PPE_QID_MODE2;
      #line 230 
      break;
      #line 231 
      case (unsigned int)6: 
                            #line 231 
      ;
      #line 232 
      case (unsigned int)15: 
                             #line 232 
      ;
      #line 233 
      qid_mode = PPE_QID_MODE1;
      #line 234 
      break;
      #line 235 
      case (unsigned int)10: 
                             #line 235 
      ;
      #line 236 
      qid_mode = PPE_QID_MODE7;
      #line 237 
      break;
      #line 238 
      case (unsigned int)14: 
                             #line 238 
      ;
      #line 239 
      qid_mode = PPE_QID_MODE6;
      #line 240 
      break;
      #line 241 
      default: 
               #line 241 
      ;
      #line 242 
      _dev_err(ppe_common->dev,(char *)"get ppe queue mode failed! dsaf_mode=%d\n",(unsigned int)dsaf_mode);
      #line 245 
      return -22;
    }
    #line 247 
    hns_ppe_set_qid_mode(ppe_common,qid_mode);
  }
  #line 250 
  dsaf_set_reg_field(ppe_common->io_base,4384U,1U,0U,1U);
  #line 253 
  return 0;
}

#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
static void hns_ppe_exc_irq_en(struct hns_ppe_cb *ppe_cb, int en)
{
  #line 260 
  unsigned int tmp;
  #line 259 
  u32 clr_vlue = 4294967295U;
  #line 260 
  if (en != 0) 
               #line 260 
               tmp = 4294967295U; else 
                                       #line 260 
                                       tmp = 0U;
  #line 260 
  u32 msk_vlue = tmp;
  #line 261 
  u32 vld_msk = 0U;
  #line 264 
  vld_msk &= 4294967294U;
  #line 264 
  vld_msk |= 1U;
  #line 265 
  vld_msk &= 4294967293U;
  #line 265 
  vld_msk |= 2U;
  #line 266 
  vld_msk &= 4294967167U;
  #line 266 
  vld_msk |= 128U;
  #line 269 
  dsaf_write_reg(ppe_cb->io_base,260U,clr_vlue);
  #line 272 
  dsaf_write_reg(ppe_cb->io_base,256U,msk_vlue & vld_msk);
  #line 273 
  return;
}

#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
int hns_ppe_wait_tx_fifo_clean(struct hns_ppe_cb *ppe_cb)
{
  #line 277 
  int wait_cnt;
  #line 278 
  u32 val;
  #line 280 
  wait_cnt = 0;
  #line 281 
  while (1) {
    #line 281 
    int tmp_0;
    #line 281 
    tmp_0 = wait_cnt;
    #line 281 
    wait_cnt ++;
    #line 281 
    ;
    #line 281 
    if (! (tmp_0 <= 9999)) 
                           #line 281 
                           break;
    {
      #line 282 
      val = dsaf_read_reg(ppe_cb->io_base,804U) & 1023U;
      #line 283 
      if (val == 0U) 
                     #line 284 
                     break;
      #line 286 
      usleep_range(100UL,200UL);
    }
  }
  #line 289 
  if (wait_cnt > 9999) {
    #line 290 
    _dev_err(ppe_cb->dev,(char *)"hns ppe tx fifo clean wait timeout, still has %u pkt.\n",val);
    #line 292 
    return -16;
  }
  #line 295 
  return 0;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
static void hns_ppe_init_hw(struct hns_ppe_cb *ppe_cb)
{
  #line 307 
  int i;
  #line 304 
  struct ppe_common_cb *ppe_common_cb = ppe_cb->ppe_common_cb;
  #line 305 
  u32 port = (unsigned int)ppe_cb->index;
  #line 306 
  struct dsaf_device *dsaf_dev = ppe_common_cb->dsaf_dev;
  #line 310 
  netdev_rss_key_fill((void *)(& ppe_cb->rss_key),40UL);
  #line 312 
  (*((dsaf_dev->misc_op)->ppe_srst))(dsaf_dev,port,(_Bool)0);
  {
    #line 313 
    unsigned long __ms = 10UL;
    #line 313 
    while (1) {
      #line 313 
      unsigned long tmp;
      #line 313 
      tmp = __ms;
      #line 313 
      __ms --;
      #line 313 
      ;
      #line 313 
      if (! (tmp != 0UL)) 
                          #line 313 
                          break;
      #line 313 
      __const_udelay(4295000UL);
    }
  }
  #line 314 
  (*((dsaf_dev->misc_op)->ppe_srst))(dsaf_dev,port,(_Bool)1);
  #line 317 
  hns_ppe_exc_irq_en(ppe_cb,0);
  #line 319 
  if (ppe_common_cb->ppe_mode == (unsigned int)PPE_COMMON_MODE_DEBUG) {
    #line 320 
    hns_ppe_set_port_mode(ppe_cb,(enum ppe_port_mode)PPE_MODE_GE);
    #line 321 
    dsaf_write_reg(ppe_cb->io_base,16U,0U);
  }
  else 
       #line 323 
       hns_ppe_set_port_mode(ppe_cb,(enum ppe_port_mode)PPE_MODE_XGE);
  #line 326 
  hns_ppe_checksum_hw(ppe_cb,4294967295U);
  #line 327 
  hns_ppe_cnt_clr_ce(ppe_cb);
  #line 329 
  if (dsaf_dev->dsaf_ver != 3552816U) {
    #line 330 
    hns_ppe_set_vlan_strip(ppe_cb,0);
    #line 332 
    dsaf_write_reg(ppe_cb->io_base,132U,2432U);
    #line 336 
    hns_ppe_set_rss_key(ppe_cb,(u32 *)(& ppe_cb->rss_key));
    #line 339 
    i = 0;
    #line 339 
    while (i <= 255) {
      #line 340 
      ppe_cb->rss_indir_table[i] = (unsigned int)i;
      #line 339 
      i ++;
    }
    #line 341 
    hns_ppe_set_indir_table(ppe_cb,(u32 *)(& ppe_cb->rss_indir_table));
  }
  #line 343 
  return;
}

#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
static void hns_ppe_uninit_hw(struct hns_ppe_cb *ppe_cb)
{
  #line 351 
  u32 port;
  #line 353 
  if (ppe_cb->ppe_common_cb != (struct ppe_common_cb *)0) {
    #line 354 
    struct dsaf_device *dsaf_dev = (ppe_cb->ppe_common_cb)->dsaf_dev;
    #line 356 
    port = (unsigned int)ppe_cb->index;
    #line 357 
    (*((dsaf_dev->misc_op)->ppe_srst))(dsaf_dev,port,(_Bool)0);
  }
  #line 359 
  return;
}

#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
static void hns_ppe_uninit_ex(struct ppe_common_cb *ppe_common)
{
  #line 363 
  u32 i;
  #line 365 
  i = 0U;
  #line 365 
  while (ppe_common->ppe_num > i) {
    #line 366 
    if ((ppe_common->dsaf_dev)->mac_cb[i] != (struct hns_mac_cb *)0) 
      #line 367 
      hns_ppe_uninit_hw(& ppe_common->ppe_cb[i]);
    #line 368 
    memset((void *)(& ppe_common->ppe_cb[i]),0,1208UL);
    #line 365 
    i ++;
  }
  #line 370 
  return;
}

#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
void hns_ppe_uninit(struct dsaf_device *dsaf_dev)
{
  #line 374 
  u32 i;
  #line 376 
  i = 0U;
  #line 376 
  while (i == 0U) {
    #line 377 
    if (dsaf_dev->ppe_common[i] != (struct ppe_common_cb *)0) 
                                                              #line 378 
                                                              hns_ppe_uninit_ex(dsaf_dev->ppe_common[i]);
    #line 379 
    hns_rcb_common_free_cfg(dsaf_dev,i);
    #line 380 
    hns_ppe_common_free_cfg(dsaf_dev,i);
    #line 376 
    i ++;
  }
  #line 382 
  return;
}

#line 389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
void hns_ppe_reset_common(struct dsaf_device *dsaf_dev, u8 ppe_common_index)
{
  #line 391 
  u32 i;
  #line 392 
  int ret;
  #line 393 
  struct ppe_common_cb *ppe_common;
  #line 395 
  ppe_common = dsaf_dev->ppe_common[(int)ppe_common_index];
  #line 396 
  ret = hns_ppe_common_init_hw(ppe_common);
  #line 397 
  if (ret != 0) 
                #line 398 
                return;
  #line 400 
  i = 0U;
  #line 400 
  while (ppe_common->ppe_num > i) {
    #line 402 
    if (dsaf_dev->mac_cb[i] != (struct hns_mac_cb *)0) 
                                                       #line 403 
                                                       hns_ppe_init_hw(& ppe_common->ppe_cb[i]);
    #line 400 
    i ++;
  }
  #line 406 
  ret = hns_rcb_common_init_hw(dsaf_dev->rcb_common[(int)ppe_common_index]);
  #line 407 
  if (ret != 0) 
                #line 408 
                return;
  #line 410 
  hns_rcb_common_init_commit_hw(dsaf_dev->rcb_common[(int)ppe_common_index]);
  #line 411 
  return;
}

#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
void hns_ppe_update_stats(struct hns_ppe_cb *ppe_cb)
{
  #line 415 
  struct hns_ppe_hw_stats *hw_stats = & ppe_cb->hw_stats;
  #line 418 
  hw_stats->rx_pkts_from_sw += (unsigned long long)dsaf_read_reg(ppe_cb->io_base,512U);
  #line 420 
  hw_stats->rx_pkts += (unsigned long long)dsaf_read_reg(ppe_cb->io_base,516U);
  #line 422 
  hw_stats->rx_drop_no_bd += (unsigned long long)dsaf_read_reg(ppe_cb->io_base,520U);
  #line 424 
  hw_stats->rx_alloc_buf_fail += (unsigned long long)dsaf_read_reg(ppe_cb->io_base,544U);
  #line 426 
  hw_stats->rx_alloc_buf_wait += (unsigned long long)dsaf_read_reg(ppe_cb->io_base,548U);
  #line 428 
  hw_stats->rx_drop_no_buf += (unsigned long long)dsaf_read_reg(ppe_cb->io_base,552U);
  #line 430 
  hw_stats->rx_err_fifo_full += (unsigned long long)dsaf_read_reg(ppe_cb->io_base,556U);
  #line 433 
  hw_stats->tx_bd_form_rcb += (unsigned long long)dsaf_read_reg(ppe_cb->io_base,524U);
  #line 435 
  hw_stats->tx_pkts_from_rcb += (unsigned long long)dsaf_read_reg(ppe_cb->io_base,528U);
  #line 437 
  hw_stats->tx_pkts += (unsigned long long)dsaf_read_reg(ppe_cb->io_base,532U);
  #line 439 
  hw_stats->tx_err_fifo_empty += (unsigned long long)dsaf_read_reg(ppe_cb->io_base,536U);
  #line 441 
  hw_stats->tx_err_checksum += (unsigned long long)dsaf_read_reg(ppe_cb->io_base,540U);
  #line 442 
  return;
}

#line 444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
int hns_ppe_get_sset_count(int stringset)
{
  #line 446 
  if (stringset == 1) 
                      #line 447 
                      return 12;
  #line 448 
  return 0;
}

#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
int hns_ppe_get_regs_count(void)
{
  #line 453 
  return 576;
}

#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
void hns_ppe_get_strings(struct hns_ppe_cb *ppe_cb, int stringset, u8 *data)
{
  #line 464 
  char *buff = (char *)data;
  #line 465 
  int index = (int)ppe_cb->index;
  #line 467 
  snprintf(buff,32UL,(char *)"ppe%d_rx_sw_pkt",index);
  #line 468 
  buff += 32U;
  #line 469 
  snprintf(buff,32UL,(char *)"ppe%d_rx_pkt_ok",index);
  #line 470 
  buff += 32U;
  #line 471 
  snprintf(buff,32UL,(char *)"ppe%d_rx_drop_pkt_no_bd",index);
  #line 472 
  buff += 32U;
  #line 473 
  snprintf(buff,32UL,(char *)"ppe%d_rx_alloc_buf_fail",index);
  #line 474 
  buff += 32U;
  #line 475 
  snprintf(buff,32UL,(char *)"ppe%d_rx_alloc_buf_wait",index);
  #line 476 
  buff += 32U;
  #line 477 
  snprintf(buff,32UL,(char *)"ppe%d_rx_pkt_drop_no_buf",index);
  #line 478 
  buff += 32U;
  #line 479 
  snprintf(buff,32UL,(char *)"ppe%d_rx_pkt_err_fifo_full",index);
  #line 480 
  buff += 32U;
  #line 482 
  snprintf(buff,32UL,(char *)"ppe%d_tx_bd",index);
  #line 483 
  buff += 32U;
  #line 484 
  snprintf(buff,32UL,(char *)"ppe%d_tx_pkt",index);
  #line 485 
  buff += 32U;
  #line 486 
  snprintf(buff,32UL,(char *)"ppe%d_tx_pkt_ok",index);
  #line 487 
  buff += 32U;
  #line 488 
  snprintf(buff,32UL,(char *)"ppe%d_tx_pkt_err_fifo_empty",index);
  #line 489 
  buff += 32U;
  #line 490 
  snprintf(buff,32UL,(char *)"ppe%d_tx_pkt_err_csum_fail",index);
  #line 491 
  return;
}

#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
void hns_ppe_get_stats(struct hns_ppe_cb *ppe_cb, u64 *data)
{
  #line 495 
  u64 *regs_buff = data;
  #line 496 
  struct hns_ppe_hw_stats *hw_stats = & ppe_cb->hw_stats;
  #line 498 
  *regs_buff = hw_stats->rx_pkts_from_sw;
  #line 499 
  *(regs_buff + 1U) = hw_stats->rx_pkts;
  #line 500 
  *(regs_buff + 2U) = hw_stats->rx_drop_no_bd;
  #line 501 
  *(regs_buff + 3U) = hw_stats->rx_alloc_buf_fail;
  #line 502 
  *(regs_buff + 4U) = hw_stats->rx_alloc_buf_wait;
  #line 503 
  *(regs_buff + 5U) = hw_stats->rx_drop_no_buf;
  #line 504 
  *(regs_buff + 6U) = hw_stats->rx_err_fifo_full;
  #line 506 
  *(regs_buff + 7U) = hw_stats->tx_bd_form_rcb;
  #line 507 
  *(regs_buff + 8U) = hw_stats->tx_pkts_from_rcb;
  #line 508 
  *(regs_buff + 9U) = hw_stats->tx_pkts;
  #line 509 
  *(regs_buff + 10U) = hw_stats->tx_err_fifo_empty;
  #line 510 
  *(regs_buff + 11U) = hw_stats->tx_err_checksum;
  #line 511 
  return;
}

#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
int hns_ppe_init(struct dsaf_device *dsaf_dev)
{
  #line 520 
  int ret;
  #line 521 
  int i;
  #line 523 
  i = 0;
  #line 523 
  while (i <= 0) {
    #line 524 
    ret = hns_ppe_common_get_cfg(dsaf_dev,i);
    #line 525 
    if (ret != 0) 
                  #line 526 
                  goto get_cfg_fail;
    #line 528 
    ret = hns_rcb_common_get_cfg(dsaf_dev,i);
    #line 529 
    if (ret != 0) 
                  #line 530 
                  goto get_cfg_fail;
    #line 532 
    hns_ppe_get_cfg(dsaf_dev->ppe_common[i]);
    #line 534 
    ret = hns_rcb_get_cfg(dsaf_dev->rcb_common[i]);
    #line 535 
    if (ret != 0) 
                  #line 536 
                  goto get_cfg_fail;
    #line 523 
    i ++;
  }
  #line 539 
  i = 0;
  #line 539 
  while (i <= 0) {
    #line 540 
    hns_ppe_reset_common(dsaf_dev,(unsigned char)((int)((unsigned char)i)));
    #line 539 
    i ++;
  }
  #line 542 
  return 0;
  #line 544 
  get_cfg_fail: 
                #line 544 
  ;
  #line 545 
  i = 0;
  #line 545 
  while (i <= 0) {
    #line 546 
    hns_rcb_common_free_cfg(dsaf_dev,(unsigned int)i);
    #line 547 
    hns_ppe_common_free_cfg(dsaf_dev,(unsigned int)i);
    #line 545 
    i ++;
  }
  #line 550 
  return ret;
}

#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_ppe.c"
void hns_ppe_get_regs(struct hns_ppe_cb *ppe_cb, void *data)
{
  #line 557 
  u32 i;
  #line 558 
  u32 offset;
  #line 555 
  struct ppe_common_cb *ppe_common = ppe_cb->ppe_common_cb;
  #line 556 
  u32 *regs = (u32 *)data;
  #line 561 
  *regs = dsaf_read_reg(ppe_common->io_base,0U);
  #line 562 
  *(regs + 1U) = dsaf_read_reg(ppe_common->io_base,272U);
  #line 563 
  *(regs + 2U) = dsaf_read_reg(ppe_common->io_base,276U);
  #line 564 
  *(regs + 3U) = dsaf_read_reg(ppe_common->io_base,280U);
  #line 565 
  *(regs + 4U) = dsaf_read_reg(ppe_common->io_base,4384U);
  #line 567 
  i = 0U;
  #line 567 
  while (i <= 128U) {
    #line 568 
    offset = (i + 192U) * 4U;
    #line 569 
    *(regs + (unsigned long)(i + 5U)) = dsaf_read_reg(ppe_common->io_base,offset);
    #line 570 
    offset = (i + 384U) * 4U;
    #line 572 
    *(regs + (unsigned long)(i + 134U)) = dsaf_read_reg(ppe_common->io_base,offset);
    #line 573 
    offset = (i + 576U) * 4U;
    #line 575 
    *(regs + (unsigned long)(i + 263U)) = dsaf_read_reg(ppe_common->io_base,offset);
    #line 576 
    offset = (i + 768U) * 4U;
    #line 578 
    *(regs + (unsigned long)(i + 392U)) = dsaf_read_reg(ppe_common->io_base,offset);
    #line 567 
    i ++;
  }
  #line 582 
  i = 521U;
  #line 582 
  while (i <= 523U) {
    #line 583 
    *(regs + (unsigned long)i) = 4008636142U;
    #line 582 
    i ++;
  }
  #line 586 
  *(regs + 525U) = dsaf_read_reg(ppe_cb->io_base,0U);
  #line 587 
  *(regs + 526U) = dsaf_read_reg(ppe_cb->io_base,4U);
  #line 588 
  *(regs + 527U) = dsaf_read_reg(ppe_cb->io_base,8U);
  #line 589 
  *(regs + 528U) = dsaf_read_reg(ppe_cb->io_base,12U);
  #line 590 
  *(regs + 529U) = dsaf_read_reg(ppe_cb->io_base,16U);
  #line 591 
  *(regs + 530U) = dsaf_read_reg(ppe_cb->io_base,64U);
  #line 592 
  *(regs + 531U) = dsaf_read_reg(ppe_cb->io_base,72U);
  #line 593 
  *(regs + 532U) = dsaf_read_reg(ppe_cb->io_base,76U);
  #line 595 
  *(regs + 533U) = dsaf_read_reg(ppe_cb->io_base,128U);
  #line 596 
  *(regs + 534U) = dsaf_read_reg(ppe_cb->io_base,132U);
  #line 597 
  *(regs + 535U) = dsaf_read_reg(ppe_cb->io_base,136U);
  #line 598 
  *(regs + 536U) = dsaf_read_reg(ppe_cb->io_base,140U);
  #line 599 
  *(regs + 537U) = dsaf_read_reg(ppe_cb->io_base,144U);
  #line 600 
  *(regs + 538U) = dsaf_read_reg(ppe_cb->io_base,148U);
  #line 601 
  *(regs + 539U) = dsaf_read_reg(ppe_cb->io_base,152U);
  #line 603 
  *(regs + 540U) = dsaf_read_reg(ppe_cb->io_base,256U);
  #line 604 
  *(regs + 541U) = dsaf_read_reg(ppe_cb->io_base,260U);
  #line 605 
  *(regs + 542U) = dsaf_read_reg(ppe_cb->io_base,264U);
  #line 606 
  *(regs + 543U) = dsaf_read_reg(ppe_cb->io_base,320U);
  #line 608 
  *(regs + 544U) = dsaf_read_reg(ppe_cb->io_base,324U);
  #line 609 
  *(regs + 545U) = dsaf_read_reg(ppe_cb->io_base,328U);
  #line 612 
  *(regs + 546U) = dsaf_read_reg(ppe_cb->io_base,512U);
  #line 613 
  *(regs + 547U) = dsaf_read_reg(ppe_cb->io_base,516U);
  #line 614 
  *(regs + 548U) = dsaf_read_reg(ppe_cb->io_base,520U);
  #line 615 
  *(regs + 549U) = dsaf_read_reg(ppe_cb->io_base,524U);
  #line 616 
  *(regs + 550U) = dsaf_read_reg(ppe_cb->io_base,528U);
  #line 617 
  *(regs + 551U) = dsaf_read_reg(ppe_cb->io_base,532U);
  #line 618 
  *(regs + 552U) = dsaf_read_reg(ppe_cb->io_base,536U);
  #line 619 
  *(regs + 553U) = dsaf_read_reg(ppe_cb->io_base,540U);
  #line 620 
  *(regs + 554U) = dsaf_read_reg(ppe_cb->io_base,544U);
  #line 621 
  *(regs + 555U) = dsaf_read_reg(ppe_cb->io_base,548U);
  #line 622 
  *(regs + 556U) = dsaf_read_reg(ppe_cb->io_base,552U);
  #line 623 
  *(regs + 557U) = dsaf_read_reg(ppe_cb->io_base,556U);
  #line 625 
  *(regs + 558U) = dsaf_read_reg(ppe_cb->io_base,768U);
  #line 626 
  *(regs + 559U) = dsaf_read_reg(ppe_cb->io_base,772U);
  #line 627 
  *(regs + 560U) = dsaf_read_reg(ppe_cb->io_base,776U);
  #line 628 
  *(regs + 561U) = dsaf_read_reg(ppe_cb->io_base,780U);
  #line 629 
  *(regs + 562U) = dsaf_read_reg(ppe_cb->io_base,784U);
  #line 630 
  *(regs + 563U) = dsaf_read_reg(ppe_cb->io_base,788U);
  #line 631 
  *(regs + 564U) = dsaf_read_reg(ppe_cb->io_base,792U);
  #line 632 
  *(regs + 565U) = dsaf_read_reg(ppe_cb->io_base,796U);
  #line 633 
  *(regs + 566U) = dsaf_read_reg(ppe_cb->io_base,800U);
  #line 634 
  *(regs + 567U) = dsaf_read_reg(ppe_cb->io_base,804U);
  #line 635 
  *(regs + 568U) = dsaf_read_reg(ppe_cb->io_base,808U);
  #line 636 
  *(regs + 569U) = dsaf_read_reg(ppe_cb->io_base,812U);
  #line 637 
  *(regs + 570U) = dsaf_read_reg(ppe_cb->io_base,816U);
  #line 638 
  *(regs + 571U) = dsaf_read_reg(ppe_cb->io_base,820U);
  #line 641 
  i = 572U;
  #line 641 
  while (i <= 575U) {
    #line 642 
    *(regs + (unsigned long)i) = 4008636142U;
    #line 641 
    i ++;
  }
  #line 643 
  return;
}

#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_ppe.i.aux"
static void *cif_devm_kzalloc_1(struct device *dev, size_t size, gfp_t flags)
{
  #line 679 
  return ldv_devm_kzalloc(size,flags);
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 61 
int memcmp(void *, void *, size_t);
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 390  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static int cif_strcmp(char *cs, char *ct);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static void *ERR_PTR_0(long error);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 232  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static bool IS_ERR(void *ptr);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 239  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static bool IS_ERR_OR_NULL(void *ptr);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 699  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static void cif_spin_lock_bh_tcam_lock_of_dsaf_device(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 708  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static void cif_spin_unlock_bh_tcam_lock_of_dsaf_device(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 24 
#line 24 
bool ldv_is_err_or_null(void *ptr);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 26 
int ldv_strcmp(char *cs, char *ct);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 22 
void *ldv_vzalloc(unsigned long size);
#line 23 
#line 23 
void ldv_vfree(void *addr);
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t array_size(size_t a, size_t b)
{
  #line 257 
  size_t __a;
  #line 257 
  size_t __b;
  #line 257 
  size_t *__d;
  #line 255 
  size_t bytes;
  {
    #line 257 
    __a = a;
    #line 257 
    __b = b;
    #line 257 
    __d = & bytes;
    #line 257 
    int tmp = & __a == __d;
    }
  #line 257 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 258 
                                                return 18446744073709551615UL;
  #line 260 
  return bytes;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 717  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static void *cif_vzalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 724  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static void cif_vfree(void *addr);
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
#line 40 
int device_property_read_u32_array(struct device *, char *, u32 *, size_t);
#line 46 
#line 46 
int device_property_read_string(struct device *, char *, char **);
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
__inline static int device_property_read_u32(struct device *dev, char *propname, u32 *val)
{
  #line 143 
  return device_property_read_u32_array(dev,propname,val,1UL);
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
#line 105 
extern struct fwnode_operations of_fwnode_ops;
#line 122 
#line 122 
void of_node_put(struct device_node *);
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
__inline static bool is_of_node(struct fwnode_handle *fwnode)
{
  #line 157 
  int tmp_0;
  #line 157 
  if (IS_ERR_OR_NULL((void *)fwnode)) 
                                      #line 157 
                                      tmp_0 = 0;
  else 
    #line 157 
    if (fwnode->ops == & of_fwnode_ops) 
                                        #line 157 
                                        tmp_0 = 1; else 
                                                        #line 157 
                                                        tmp_0 = 0;
  #line 157 
  return (_Bool)(tmp_0 != 0);
}

#line 343 
#line 343 
int of_device_is_compatible(struct device_node *, char *);
#line 364 
#line 364 
struct device_node *of_parse_phandle(struct device_node *, char *, int);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 731  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static void *cif_devm_kzalloc_2(struct device *dev, size_t size, gfp_t flags);
#line 963  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 963 
void *devm_ioremap_resource(struct device *, struct resource *);
#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1663 
#line 1663 
void put_device(struct device *);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
#line 78 
bool acpi_dev_found(char *);
#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  #line 671 
  int rc = dma_set_mask(dev,mask);
  #line 672 
  if (rc == 0) 
               #line 673 
               dma_set_coherent_mask(dev,mask);
  #line 674 
  return rc;
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mfd/syscon.h"
#line 21 
struct regmap *syscon_node_to_regmap(struct device_node *);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 52 
struct resource *platform_get_resource(struct platform_device *, unsigned int, unsigned int);
#line 69 
#line 69 
struct resource *platform_get_resource_byname(struct platform_device *, unsigned int, char *);
#line 217 
#line 738  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static int cif___platform_driver_register(struct platform_driver *ldv_func_arg1, struct module *ldv_func_arg2);
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 746  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static void cif_platform_driver_unregister(struct platform_driver *ldv_func_arg1);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_platform.h"
#line 56 
struct platform_device *of_find_device_by_node(struct device_node *);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 *addr)
{
  #line 166 
  return (_Bool)((unsigned int)(((int)*((u16 *)addr) & (int)*((u16 *)(addr + 2U))) & (int)*((u16 *)(addr + 4U))) == 65535U);
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 1072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_reg.h"
__inline static u32 dsaf_get_reg_field(u8 *base, u32 reg, u32 mask, u32 shift)
{
  #line 1075 
  u32 origin;
  #line 1077 
  origin = dsaf_read_reg(base,reg);
  #line 1078 
  return (origin & mask) >> shift;
}

#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
__inline static void *hns_dsaf_dev_priv(struct dsaf_device *dsaf_dev)
{
  #line 355 
  return (void *)((u8 *)dsaf_dev + 7328UL);
}

#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
__inline static void hns_dsaf_tbl_tcam_addr_cfg(struct dsaf_device *dsaf_dev, u32 tab_tcam_addr)
{
  #line 398 
  dsaf_set_reg_field(dsaf_dev->io_base,20492U,511U,0U,tab_tcam_addr);
  #line 399 
  return;
}

#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
__inline static void hns_dsaf_tbl_tcam_load_pul(struct dsaf_device *dsaf_dev)
{
  #line 405 
  u32 o_tbl_pul;
  #line 407 
  o_tbl_pul = dsaf_read_reg(dsaf_dev->io_base,20640U);
  #line 408 
  o_tbl_pul &= 4294967263U;
  #line 408 
  o_tbl_pul |= 32U;
  #line 409 
  dsaf_write_reg(dsaf_dev->io_base,20640U,o_tbl_pul);
  #line 410 
  o_tbl_pul &= 4294967263U;
  #line 410 
  o_tbl_pul = o_tbl_pul;
  #line 411 
  dsaf_write_reg(dsaf_dev->io_base,20640U,o_tbl_pul);
  #line 412 
  return;
}

#line 414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
__inline static void hns_dsaf_tbl_line_addr_cfg(struct dsaf_device *dsaf_dev, u32 tab_line_addr)
{
  #line 417 
  dsaf_set_reg_field(dsaf_dev->io_base,20496U,32767U,0U,tab_line_addr);
  #line 418 
  return;
}

#line 428 
#line 1608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
int hns_dsaf_set_mac_uc_entry(struct dsaf_device *dsaf_dev, struct dsaf_drv_mac_single_dest_entry *mac_entry);
#line 430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
#line 1747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
int hns_dsaf_add_mac_mc_port(struct dsaf_device *dsaf_dev, struct dsaf_drv_mac_single_dest_entry *mac_entry);
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
#line 1857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
int hns_dsaf_del_mac_entry(struct dsaf_device *dsaf_dev, u16 vlan_id, u8 in_port_num, u8 *addr);
#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
#line 1906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
int hns_dsaf_del_mac_mc_port(struct dsaf_device *dsaf_dev, struct dsaf_drv_mac_single_dest_entry *mac_entry);
#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
#line 2170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
void hns_dsaf_fix_mac_mode(struct hns_mac_cb *mac_cb);
#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
#line 2905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
void hns_dsaf_set_promisc_tcam(struct dsaf_device *dsaf_dev, u32 port, bool enable);
#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
#line 1674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
int hns_dsaf_rm_mac_addr(struct dsaf_device *dsaf_dev, struct dsaf_drv_mac_single_dest_entry *mac_entry);
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
#line 2014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
int hns_dsaf_clr_mac_mc_port(struct dsaf_device *dsaf_dev, u8 mac_id, u8 port_num);
#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.h"
#line 3044  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
int hns_dsaf_roce_reset(struct fwnode_handle *dsaf_fwnode, bool dereset);
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.h"
#line 428 
int hns_mac_init(struct dsaf_device *dsaf_dev);
#line 438 
#line 438 
void hns_mac_uninit(struct dsaf_device *dsaf_dev);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static char *g_dsaf_mode_match[17U] = {[8] = (char *)"single-port", [12] = (char *)"2port-64vf", (char *)"6port-16rss", [16] = (char *)"6port-16vf"};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static struct acpi_device_id hns_dsaf_acpi_match[3U] = {{.id = {(unsigned char)'H', (unsigned char)'I', (unsigned char)'S', (unsigned char)'I', (unsigned char)'0', (unsigned char)'0', (unsigned char)'B', (unsigned char)'1'}}, {.id = {(unsigned char)'H', (unsigned char)'I', (unsigned char)'S', (unsigned char)'I', (unsigned char)'0', (unsigned char)'0', (unsigned char)'B', (unsigned char)'2'}}};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
struct acpi_device_id __mod_acpi__hns_dsaf_acpi_match_device_table[3U];
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static int hns_dsaf_get_cfg(struct dsaf_device *dsaf_dev)
{
  #line 52 
  void *__mptr;
  #line 43 
  int ret;
  #line 43 
  int i;
  #line 44 
  u32 desc_num;
  #line 45 
  u32 buf_size;
  #line 48 
  char *mode_str;
  #line 49 
  struct regmap *syscon;
  #line 50 
  struct resource *res;
  #line 51 
  struct device_node *np_temp;
  #line 46 
  u32 reset_offset = 0U;
  #line 47 
  u32 res_idx = 0U;
  #line 51 
  struct device_node *np = (dsaf_dev->dev)->of_node;
  #line 52 
  __mptr = (void *)dsaf_dev->dev;
  #line 52 
  struct platform_device *pdev = ((struct platform_device *)(__mptr + 18446744073709551600U));
  #line 54 
  if (dev_of_node(dsaf_dev->dev) != (struct device_node *)0) {
    #line 55 
    if (of_device_is_compatible(np,(char *)"hisilicon,hns-dsaf-v1") != 0) 
      #line 56 
      dsaf_dev->dsaf_ver = 3552816U; else 
                                          #line 58 
                                          dsaf_dev->dsaf_ver = 825635120U;
  }
  else {
    #line 59 
    if ((int)is_acpi_node((dsaf_dev->dev)->fwnode) != 0) {
      #line 60 
      if ((int)acpi_dev_found((char *)(& hns_dsaf_acpi_match[0].id)) != 0) 
        #line 61 
        dsaf_dev->dsaf_ver = 3552816U;
      else {
        #line 62 
        if ((int)acpi_dev_found((char *)(& hns_dsaf_acpi_match[1].id)) != 0) 
          #line 63 
          dsaf_dev->dsaf_ver = 825635120U; else 
                                                #line 65 
                                                return -6;
      }
    }
    else {
      #line 67 
      _dev_err(dsaf_dev->dev,(char *)"cannot get cfg data from of or acpi\n");
      #line 68 
      return -6;
    }
  }
  #line 71 
  ret = device_property_read_string(dsaf_dev->dev,(char *)"mode",& mode_str);
  #line 72 
  if (ret != 0) {
    #line 73 
    _dev_err(dsaf_dev->dev,(char *)"get dsaf mode fail, ret=%d!\n",ret);
    #line 74 
    return ret;
  }
  #line 76 
  i = 0;
  #line 76 
  while (i <= 16) {
    #line 77 
    if (g_dsaf_mode_match[i] != (char *)0) {
      #line 77 
      if (cif_strcmp(mode_str,g_dsaf_mode_match[i]) == 0) 
                                                          #line 79 
                                                          break;
    }
    #line 76 
    i ++;
  }
  #line 81 
  if ((i > 16 || i == 0) || i == 7) {
    #line 83 
    _dev_err(dsaf_dev->dev,(char *)"%s prs mode str fail!\n",(char *)(& dsaf_dev->ae_dev.name));
    #line 85 
    return -22;
  }
  #line 87 
  dsaf_dev->dsaf_mode = (enum dsaf_mode)i;
  #line 89 
  if (dsaf_dev->dsaf_mode > (unsigned int)DSAF_MODE_ENABLE) 
                                                            #line 90 
                                                            dsaf_dev->dsaf_en = HRD_DSAF_NO_DSAF_MODE; else 
                                                                    #line 92 
                                                                    dsaf_dev->dsaf_en = HRD_DSAF_MODE;
  #line 94 
  if ((i == 4 || i == 10) || i == 14) 
                                      #line 97 
                                      dsaf_dev->dsaf_tc_mode = HRD_DSAF_8TC_MODE; else 
                                                                    #line 99 
                                                                    dsaf_dev->dsaf_tc_mode = HRD_DSAF_4TC_MODE;
  #line 101 
  if (dev_of_node(dsaf_dev->dev) != (struct device_node *)0) {
    #line 102 
    np_temp = of_parse_phandle(np,(char *)"subctrl-syscon",0);
    #line 103 
    syscon = syscon_node_to_regmap(np_temp);
    #line 104 
    of_node_put(np_temp);
    #line 105 
    if ((int)IS_ERR_OR_NULL((void *)syscon) != 0) {
      #line 106 
      u32 tmp_6;
      #line 118 
      u32 tmp_10;
      #line 106 
      tmp_6 = res_idx;
      #line 106 
      res_idx ++;
      #line 106 
      ;
      #line 106 
      ;
      #line 106 
      res = platform_get_resource(pdev,512U,tmp_6);
      #line 108 
      if (res == (struct resource *)0) {
        #line 109 
        _dev_err(dsaf_dev->dev,(char *)"subctrl info is needed!\n");
        #line 110 
        return -12;
      }
      #line 113 
      dsaf_dev->sc_base = (u8 *)devm_ioremap_resource(& pdev->dev,res);
      #line 115 
      if ((int)IS_ERR((void *)dsaf_dev->sc_base) != 0) {
        #line 116 
        return (int)PTR_ERR((void *)dsaf_dev->sc_base);
      }
      #line 118 
      tmp_10 = res_idx;
      #line 118 
      res_idx ++;
      #line 118 
      ;
      #line 118 
      ;
      #line 118 
      res = platform_get_resource(pdev,512U,tmp_10);
      #line 120 
      if (res == (struct resource *)0) {
        #line 121 
        _dev_err(dsaf_dev->dev,(char *)"serdes-ctrl info is needed!\n");
        #line 122 
        return -12;
      }
      #line 125 
      dsaf_dev->sds_base = (u8 *)devm_ioremap_resource(& pdev->dev,res);
      #line 127 
      if ((int)IS_ERR((void *)dsaf_dev->sds_base) != 0) {
        #line 128 
        return (int)PTR_ERR((void *)dsaf_dev->sds_base);
      }
    }
    else 
         #line 130 
         dsaf_dev->sub_ctrl = syscon;
  }
  #line 134 
  res = platform_get_resource_byname(pdev,512U,(char *)"ppe-base");
  #line 135 
  if (res == (struct resource *)0) {
    #line 136 
    u32 tmp_16;
    #line 136 
    tmp_16 = res_idx;
    #line 136 
    res_idx ++;
    #line 136 
    ;
    #line 136 
    ;
    #line 136 
    res = platform_get_resource(pdev,512U,tmp_16);
    #line 137 
    if (res == (struct resource *)0) {
      #line 138 
      _dev_err(dsaf_dev->dev,(char *)"ppe-base info is needed!\n");
      #line 139 
      return -12;
    }
  }
  #line 142 
  dsaf_dev->ppe_base = (u8 *)devm_ioremap_resource(& pdev->dev,res);
  #line 143 
  if ((int)IS_ERR((void *)dsaf_dev->ppe_base) != 0) {
    #line 144 
    return (int)PTR_ERR((void *)dsaf_dev->ppe_base);
  }
  #line 145 
  dsaf_dev->ppe_paddr = res->start;
  #line 147 
  if (dsaf_dev->dsaf_mode != (unsigned int)DSAF_MODE_DISABLE_SP) {
    #line 148 
    res = platform_get_resource_byname(pdev,512U,(char *)"dsaf-base");
    #line 150 
    if (res == (struct resource *)0) {
      #line 151 
      res = platform_get_resource(pdev,512U,res_idx);
      #line 153 
      if (res == (struct resource *)0) {
        #line 154 
        _dev_err(dsaf_dev->dev,(char *)"dsaf-base info is needed!\n");
        #line 156 
        return -12;
      }
    }
    #line 159 
    dsaf_dev->io_base = (u8 *)devm_ioremap_resource(& pdev->dev,res);
    #line 160 
    if ((int)IS_ERR((void *)dsaf_dev->io_base) != 0) {
      #line 161 
      return (int)PTR_ERR((void *)dsaf_dev->io_base);
    }
  }
  #line 164 
  ret = device_property_read_u32(dsaf_dev->dev,(char *)"desc-num",& desc_num);
  #line 165 
  if ((ret < 0 || desc_num <= 15U) || desc_num > 1024U) {
    #line 167 
    _dev_err(dsaf_dev->dev,(char *)"get desc-num(%d) fail, ret=%d!\n",desc_num,ret);
    #line 169 
    return -22;
  }
  #line 171 
  dsaf_dev->desc_num = desc_num;
  #line 173 
  ret = device_property_read_u32(dsaf_dev->dev,(char *)"reset-field-offset",& reset_offset);
  #line 175 
  if (ret < 0) {
    #line 176 
    bool branch;
    #line 176 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"hns_dsaf", .function = (char *)"hns_dsaf_get_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c", .format = (char *)"get reset-field-offset fail, ret=%d!\r\n", .lineno = (unsigned int)176U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 176 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 176 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 176 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug442,dsaf_dev->dev,(char *)"get reset-field-offset fail, ret=%d!\r\n",ret);
  }
  #line 179 
  dsaf_dev->reset_offset = reset_offset;
  #line 181 
  ret = device_property_read_u32(dsaf_dev->dev,(char *)"buf-size",& buf_size);
  #line 182 
  if (ret < 0) {
    #line 183 
    _dev_err(dsaf_dev->dev,(char *)"get buf-size fail, ret=%d!\r\n",ret);
    #line 185 
    return ret;
  }
  #line 187 
  dsaf_dev->buf_size = buf_size;
  #line 189 
  dsaf_dev->buf_size_type = hns_rcb_buf_size2type(buf_size);
  #line 190 
  if (dsaf_dev->buf_size_type < 0) {
    #line 191 
    _dev_err(dsaf_dev->dev,(char *)"buf_size(%d) is wrong!\n",buf_size);
    #line 193 
    return -22;
  }
  #line 196 
  dsaf_dev->misc_op = hns_misc_op_get(dsaf_dev);
  #line 197 
  if (dsaf_dev->misc_op == (struct dsaf_misc_op *)0) 
                                                     #line 198 
                                                     return -12;
  #line 200 
  if (dma_set_mask_and_coherent(dsaf_dev->dev,18446744073709551615ULL) == 0) {
    #line 201 
    bool branch_0;
    #line 201 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"hns_dsaf", .function = (char *)"hns_dsaf_get_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c", .format = (char *)"set mask to 64bit\n", .lineno = (unsigned int)201U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 201 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 201 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 201 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug443,dsaf_dev->dev,(char *)"set mask to 64bit\n");
  }
  else 
       #line 203 
       _dev_err(dsaf_dev->dev,(char *)"set mask to 64bit fail!\n");
  #line 205 
  return 0;
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_sbm_link_sram_init_en(struct dsaf_device *dsaf_dev)
{
  #line 214 
  dsaf_set_reg_field(dsaf_dev->io_base,4U,8U,3U,1U);
  #line 215 
  return;
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_reg_cnt_clr_ce(struct dsaf_device *dsaf_dev, u32 reg_cnt_clr_ce)
{
  #line 225 
  dsaf_set_reg_field(dsaf_dev->io_base,44U,1U,0U,reg_cnt_clr_ce);
  #line 226 
  return;
}

#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_ppe_qid_cfg(struct dsaf_device *dsaf_dev, u32 qid_cfg)
{
  #line 237 
  u32 i;
  #line 239 
  i = 0U;
  #line 239 
  while (i <= 5U) {
    #line 240 
    dsaf_set_reg_field(dsaf_dev->io_base,(i + 192U) * 4U,255U,0U,qid_cfg);
    #line 239 
    i ++;
  }
  #line 241 
  return;
}

#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_mix_def_qid_cfg(struct dsaf_device *dsaf_dev)
{
  #line 249 
  u16 max_q_per_vf;
  #line 249 
  u16 max_vfn;
  #line 250 
  u32 q_id;
  #line 250 
  u32 q_num_per_port;
  #line 251 
  u32 i;
  #line 253 
  hns_rcb_get_queue_mode(dsaf_dev->dsaf_mode,& max_vfn,& max_q_per_vf);
  #line 254 
  q_num_per_port = (unsigned int)((int)max_vfn * (int)max_q_per_vf);
  #line 256 
  i = 0U;
  #line 256 
  q_id = 0U;
  #line 256 
  while (i <= 5U) {
    #line 257 
    dsaf_set_reg_field(dsaf_dev->io_base,(i + 216U) * 4U,255U,0U,q_id);
    #line 260 
    q_id += q_num_per_port;
    #line 256 
    i ++;
  }
  #line 262 
  return;
}

#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_inner_qid_cfg(struct dsaf_device *dsaf_dev)
{
  #line 266 
  u16 max_q_per_vf;
  #line 266 
  u16 max_vfn;
  #line 267 
  u32 q_id;
  #line 267 
  u32 q_num_per_port;
  #line 268 
  u32 mac_id;
  #line 270 
  if (dsaf_dev->dsaf_ver == 3552816U) 
                                      #line 271 
                                      return;
  #line 273 
  hns_rcb_get_queue_mode(dsaf_dev->dsaf_mode,& max_vfn,& max_q_per_vf);
  #line 274 
  q_num_per_port = (unsigned int)((int)max_vfn * (int)max_q_per_vf);
  #line 276 
  mac_id = 0U;
  #line 276 
  q_id = 0U;
  #line 276 
  while (mac_id <= 5U) {
    #line 277 
    dsaf_set_reg_field(dsaf_dev->io_base,(mac_id + 136U) * 4U,255U,0U,q_id);
    #line 282 
    q_id += q_num_per_port;
    #line 276 
    mac_id ++;
  }
  #line 284 
  return;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_sw_port_type_cfg(struct dsaf_device *dsaf_dev, enum dsaf_sw_port_type port_type)
{
  #line 294 
  u32 i;
  #line 296 
  i = 0U;
  #line 296 
  while (i <= 7U) {
    #line 297 
    dsaf_set_reg_field(dsaf_dev->io_base,(i + 200U) * 4U,3U,0U,(unsigned int)port_type);
    #line 296 
    i ++;
  }
  #line 298 
  return;
}

#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_stp_port_type_cfg(struct dsaf_device *dsaf_dev, enum dsaf_stp_port_type port_type)
{
  #line 312 
  u32 i;
  #line 314 
  i = 0U;
  #line 314 
  while (i <= 5U) {
    #line 315 
    dsaf_set_reg_field(dsaf_dev->io_base,(i + 208U) * 4U,7U,0U,(unsigned int)port_type);
    #line 314 
    i ++;
  }
  #line 316 
  return;
}

#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_sbm_cfg(struct dsaf_device *dsaf_dev)
{
  #line 330 
  u32 o_sbm_cfg;
  #line 331 
  u32 i;
  #line 333 
  i = 0U;
  #line 333 
  while (1) {
    #line 333 
    unsigned int tmp;
    #line 333 
    if (dsaf_dev->dsaf_ver == 3552816U) 
                                        #line 333 
                                        tmp = 18U; else 
                                                        #line 333 
                                                        tmp = 8U;
    #line 333 
    ;
    #line 333 
    if (! (tmp > i)) 
                     #line 333 
                     break;
    #line 334 
    o_sbm_cfg = dsaf_read_reg(dsaf_dev->io_base,(i + 64U) * 128U);
    #line 336 
    o_sbm_cfg &= 4294967293U;
    #line 336 
    o_sbm_cfg |= 2U;
    #line 337 
    o_sbm_cfg &= 4294967294U;
    #line 337 
    o_sbm_cfg = o_sbm_cfg;
    #line 338 
    dsaf_write_reg(dsaf_dev->io_base,(i + 64U) * 128U,o_sbm_cfg);
    #line 333 
    i ++;
  }
  #line 340 
  return;
}

#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static int hns_dsaf_sbm_cfg_mib_en(struct dsaf_device *dsaf_dev)
{
  #line 349 
  u32 sbm_cfg_mib_en;
  #line 350 
  u32 i;
  #line 351 
  u32 reg;
  #line 352 
  u32 read_cnt;
  #line 355 
  i = 0U;
  #line 355 
  while (1) {
    #line 355 
    unsigned int tmp;
    #line 355 
    if (dsaf_dev->dsaf_ver == 3552816U) 
                                        #line 355 
                                        tmp = 18U; else 
                                                        #line 355 
                                                        tmp = 8U;
    #line 355 
    ;
    #line 355 
    if (! (tmp > i)) 
                     #line 355 
                     break;
    #line 356 
    reg = (i + 64U) * 128U;
    #line 357 
    dsaf_set_reg_field(dsaf_dev->io_base,reg,4U,2U,0U);
    #line 355 
    i ++;
  }
  #line 360 
  i = 0U;
  #line 360 
  while (1) {
    #line 360 
    unsigned int tmp_0;
    #line 360 
    if (dsaf_dev->dsaf_ver == 3552816U) 
                                        #line 360 
                                        tmp_0 = 18U; else 
                                                          #line 360 
                                                          tmp_0 = 8U;
    #line 360 
    ;
    #line 360 
    if (! (tmp_0 > i)) 
                       #line 360 
                       break;
    #line 361 
    reg = (i + 64U) * 128U;
    #line 362 
    dsaf_set_reg_field(dsaf_dev->io_base,reg,4U,2U,1U);
    #line 360 
    i ++;
  }
  #line 366 
  i = 0U;
  #line 366 
  while (1) {
    #line 366 
    unsigned int tmp_1;
    #line 366 
    if (dsaf_dev->dsaf_ver == 3552816U) 
                                        #line 366 
                                        tmp_1 = 18U; else 
                                                          #line 366 
                                                          tmp_1 = 8U;
    #line 366 
    ;
    #line 366 
    if (! (tmp_1 > i)) 
                       #line 366 
                       break;
    #line 367 
    read_cnt = 0U;
    #line 368 
    reg = (i + 64U) * 128U;
    #line 369 
    while (1) {
      #line 370 
      __const_udelay(4295UL);
      #line 371 
      sbm_cfg_mib_en = dsaf_get_reg_field(dsaf_dev->io_base,reg,4U,2U);
      #line 373 
      read_cnt ++;
      #line 374 
      if (! (sbm_cfg_mib_en == 0U && read_cnt <= 29U)) 
                                                       #line 369 
                                                       break;
    }
    #line 377 
    if (sbm_cfg_mib_en == 0U) {
      #line 378 
      _dev_err(dsaf_dev->dev,(char *)"sbm_cfg_mib_en fail,%s,sbm_num=%d\n",(char *)(& dsaf_dev->ae_dev.name),i);
      #line 381 
      return -19;
    }
    #line 366 
    i ++;
  }
  #line 385 
  return 0;
}

#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_sbm_bp_wl_cfg(struct dsaf_device *dsaf_dev)
{
  #line 394 
  u32 o_sbm_bp_cfg;
  #line 395 
  u32 reg;
  #line 396 
  u32 i;
  #line 399 
  i = 0U;
  #line 399 
  while (i <= 5U) {
    #line 400 
    reg = i * 128U + 8196U;
    #line 401 
    o_sbm_bp_cfg = dsaf_read_reg(dsaf_dev->io_base,reg);
    #line 402 
    o_sbm_bp_cfg &= 2148532223U;
    #line 402 
    o_sbm_bp_cfg |= 536870912U;
    #line 404 
    o_sbm_bp_cfg &= 4293919743U;
    #line 404 
    o_sbm_bp_cfg = o_sbm_bp_cfg;
    #line 406 
    o_sbm_bp_cfg &= 4294966272U;
    #line 406 
    o_sbm_bp_cfg = o_sbm_bp_cfg;
    #line 408 
    dsaf_write_reg(dsaf_dev->io_base,reg,o_sbm_bp_cfg);
    #line 410 
    reg = i * 128U + 8200U;
    #line 411 
    o_sbm_bp_cfg = dsaf_read_reg(dsaf_dev->io_base,reg);
    #line 412 
    o_sbm_bp_cfg &= 4294966272U;
    #line 412 
    o_sbm_bp_cfg = o_sbm_bp_cfg;
    #line 414 
    o_sbm_bp_cfg &= 4293919743U;
    #line 414 
    o_sbm_bp_cfg = o_sbm_bp_cfg;
    #line 416 
    dsaf_write_reg(dsaf_dev->io_base,reg,o_sbm_bp_cfg);
    #line 418 
    reg = i * 128U + 8204U;
    #line 419 
    o_sbm_bp_cfg = dsaf_read_reg(dsaf_dev->io_base,reg);
    #line 420 
    o_sbm_bp_cfg &= 4294966272U;
    #line 420 
    o_sbm_bp_cfg |= 104U;
    #line 422 
    o_sbm_bp_cfg &= 4293919743U;
    #line 422 
    o_sbm_bp_cfg |= 131072U;
    #line 424 
    dsaf_write_reg(dsaf_dev->io_base,reg,o_sbm_bp_cfg);
    #line 426 
    reg = i * 128U + 8296U;
    #line 427 
    o_sbm_bp_cfg = dsaf_read_reg(dsaf_dev->io_base,reg);
    #line 428 
    o_sbm_bp_cfg &= 4294966272U;
    #line 428 
    o_sbm_bp_cfg |= 110U;
    #line 431 
    o_sbm_bp_cfg &= 4293919743U;
    #line 431 
    o_sbm_bp_cfg |= 163840U;
    #line 434 
    dsaf_write_reg(dsaf_dev->io_base,reg,o_sbm_bp_cfg);
    #line 437 
    reg = i * 128U + 8300U;
    #line 438 
    o_sbm_bp_cfg = dsaf_read_reg(dsaf_dev->io_base,reg);
    #line 439 
    o_sbm_bp_cfg &= 4294966272U;
    #line 439 
    o_sbm_bp_cfg |= 128U;
    #line 442 
    o_sbm_bp_cfg &= 4293919743U;
    #line 442 
    o_sbm_bp_cfg |= 196608U;
    #line 445 
    dsaf_write_reg(dsaf_dev->io_base,reg,o_sbm_bp_cfg);
    #line 399 
    i ++;
  }
  #line 449 
  i = 0U;
  #line 449 
  while (i <= 5U) {
    #line 450 
    reg = i * 128U + 8972U;
    #line 451 
    o_sbm_bp_cfg = dsaf_read_reg(dsaf_dev->io_base,reg);
    #line 452 
    o_sbm_bp_cfg &= 4294966272U;
    #line 452 
    o_sbm_bp_cfg |= 10U;
    #line 454 
    o_sbm_bp_cfg &= 4293919743U;
    #line 454 
    o_sbm_bp_cfg |= 12288U;
    #line 456 
    dsaf_write_reg(dsaf_dev->io_base,reg,o_sbm_bp_cfg);
    #line 449 
    i ++;
  }
  #line 460 
  i = 0U;
  #line 460 
  while (i <= 5U) {
    #line 461 
    reg = i * 128U + 9740U;
    #line 462 
    o_sbm_bp_cfg = dsaf_read_reg(dsaf_dev->io_base,reg);
    #line 463 
    o_sbm_bp_cfg &= 4294966272U;
    #line 463 
    o_sbm_bp_cfg |= 2U;
    #line 465 
    o_sbm_bp_cfg &= 4293919743U;
    #line 465 
    o_sbm_bp_cfg |= 4096U;
    #line 467 
    dsaf_write_reg(dsaf_dev->io_base,reg,o_sbm_bp_cfg);
    #line 460 
    i ++;
  }
  #line 469 
  return;
}

#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsafv2_sbm_bp_wl_cfg(struct dsaf_device *dsaf_dev)
{
  #line 473 
  u32 o_sbm_bp_cfg;
  #line 474 
  u32 reg;
  #line 475 
  u32 i;
  #line 478 
  i = 0U;
  #line 478 
  while (i <= 5U) {
    #line 479 
    reg = i * 128U + 8196U;
    #line 480 
    o_sbm_bp_cfg = dsaf_read_reg(dsaf_dev->io_base,reg);
    #line 481 
    o_sbm_bp_cfg &= 4026793983U;
    #line 481 
    o_sbm_bp_cfg |= 67108864U;
    #line 483 
    o_sbm_bp_cfg &= 4294705663U;
    #line 483 
    o_sbm_bp_cfg = o_sbm_bp_cfg;
    #line 485 
    o_sbm_bp_cfg &= 4294966784U;
    #line 485 
    o_sbm_bp_cfg = o_sbm_bp_cfg;
    #line 487 
    dsaf_write_reg(dsaf_dev->io_base,reg,o_sbm_bp_cfg);
    #line 489 
    reg = i * 128U + 8200U;
    #line 490 
    o_sbm_bp_cfg = dsaf_read_reg(dsaf_dev->io_base,reg);
    #line 491 
    o_sbm_bp_cfg &= 4294966784U;
    #line 491 
    o_sbm_bp_cfg = o_sbm_bp_cfg;
    #line 493 
    o_sbm_bp_cfg &= 4294705663U;
    #line 493 
    o_sbm_bp_cfg = o_sbm_bp_cfg;
    #line 495 
    dsaf_write_reg(dsaf_dev->io_base,reg,o_sbm_bp_cfg);
    #line 497 
    reg = i * 128U + 8204U;
    #line 498 
    o_sbm_bp_cfg = dsaf_read_reg(dsaf_dev->io_base,reg);
    #line 499 
    o_sbm_bp_cfg &= 4294966784U;
    #line 499 
    o_sbm_bp_cfg |= 104U;
    #line 501 
    o_sbm_bp_cfg &= 4294705663U;
    #line 501 
    o_sbm_bp_cfg |= 65536U;
    #line 503 
    dsaf_write_reg(dsaf_dev->io_base,reg,o_sbm_bp_cfg);
    #line 505 
    reg = i * 128U + 8296U;
    #line 506 
    o_sbm_bp_cfg = dsaf_read_reg(dsaf_dev->io_base,reg);
    #line 507 
    o_sbm_bp_cfg &= 4294966784U;
    #line 507 
    o_sbm_bp_cfg |= 55U;
    #line 510 
    o_sbm_bp_cfg &= 4294705663U;
    #line 510 
    o_sbm_bp_cfg |= 56320U;
    #line 513 
    dsaf_write_reg(dsaf_dev->io_base,reg,o_sbm_bp_cfg);
    #line 516 
    reg = i * 128U + 8300U;
    #line 517 
    o_sbm_bp_cfg = dsaf_read_reg(dsaf_dev->io_base,reg);
    #line 518 
    o_sbm_bp_cfg &= 4294966784U;
    #line 518 
    o_sbm_bp_cfg |= 128U;
    #line 521 
    o_sbm_bp_cfg &= 4294705663U;
    #line 521 
    o_sbm_bp_cfg |= 98304U;
    #line 524 
    dsaf_write_reg(dsaf_dev->io_base,reg,o_sbm_bp_cfg);
    #line 478 
    i ++;
  }
  #line 528 
  i = 0U;
  #line 528 
  while (i == 0U) {
    #line 529 
    reg = i * 128U + 8972U;
    #line 530 
    o_sbm_bp_cfg = dsaf_read_reg(dsaf_dev->io_base,reg);
    #line 531 
    o_sbm_bp_cfg &= 4294967232U;
    #line 531 
    o_sbm_bp_cfg |= 2U;
    #line 534 
    o_sbm_bp_cfg &= 4294963263U;
    #line 534 
    o_sbm_bp_cfg |= 192U;
    #line 537 
    o_sbm_bp_cfg &= 4294709247U;
    #line 537 
    o_sbm_bp_cfg |= 212992U;
    #line 540 
    dsaf_write_reg(dsaf_dev->io_base,reg,o_sbm_bp_cfg);
    #line 528 
    i ++;
  }
  #line 544 
  i = 0U;
  #line 544 
  while (i == 0U) {
    #line 545 
    reg = i * 128U + 9100U;
    #line 546 
    o_sbm_bp_cfg = dsaf_read_reg(dsaf_dev->io_base,reg);
    #line 547 
    o_sbm_bp_cfg &= 4294967040U;
    #line 547 
    o_sbm_bp_cfg |= 2U;
    #line 550 
    o_sbm_bp_cfg &= 4294902015U;
    #line 550 
    o_sbm_bp_cfg |= 1024U;
    #line 553 
    dsaf_write_reg(dsaf_dev->io_base,reg,o_sbm_bp_cfg);
    #line 544 
    i ++;
  }
  #line 555 
  return;
}

#line 561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_voq_bp_all_thrd_cfg(struct dsaf_device *dsaf_dev)
{
  #line 563 
  u32 voq_bp_all_thrd;
  #line 564 
  u32 i;
  #line 566 
  i = 0U;
  #line 566 
  while (i <= 17U) {
    #line 567 
    voq_bp_all_thrd = dsaf_read_reg(dsaf_dev->io_base,i * 64U + 16436U);
    #line 569 
    if (i <= 5U) {
      #line 570 
      voq_bp_all_thrd &= 4294966272U;
      #line 570 
      voq_bp_all_thrd |= 930U;
      #line 573 
      voq_bp_all_thrd &= 4293919743U;
      #line 573 
      voq_bp_all_thrd |= 972800U;
    }
    else {
      #line 577 
      voq_bp_all_thrd &= 4294966272U;
      #line 577 
      voq_bp_all_thrd |= 220U;
      #line 580 
      voq_bp_all_thrd &= 4293919743U;
      #line 580 
      voq_bp_all_thrd |= 235520U;
    }
    #line 584 
    dsaf_write_reg(dsaf_dev->io_base,i * 64U + 16436U,voq_bp_all_thrd);
    #line 566 
    i ++;
  }
  #line 586 
  return;
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tbl_tcam_match_cfg(struct dsaf_device *dsaf_dev, struct dsaf_tbl_tcam_data *ptbl_tcam_data)
{
  #line 594 
  dsaf_write_reg(dsaf_dev->io_base,20788U,ptbl_tcam_data->tbl_tcam_data_low);
  #line 596 
  dsaf_write_reg(dsaf_dev->io_base,20784U,ptbl_tcam_data->tbl_tcam_data_high);
  #line 597 
  return;
}

#line 605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tbl_tcam_data_cfg(struct dsaf_device *dsaf_dev, struct dsaf_tbl_tcam_data *ptbl_tcam_data)
{
  #line 609 
  dsaf_write_reg(dsaf_dev->io_base,20504U,ptbl_tcam_data->tbl_tcam_data_low);
  #line 611 
  dsaf_write_reg(dsaf_dev->io_base,20500U,ptbl_tcam_data->tbl_tcam_data_high);
  #line 612 
  return;
}

#line 620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tbl_tcam_mcast_cfg(struct dsaf_device *dsaf_dev, struct dsaf_tbl_tcam_mcast_cfg *mcast)
{
  #line 624 
  u32 mcast_cfg4;
  #line 626 
  mcast_cfg4 = dsaf_read_reg(dsaf_dev->io_base,20508U);
  #line 627 
  mcast_cfg4 &= 4294967167U;
  #line 627 
  mcast_cfg4 = ((unsigned int)((int)mcast->tbl_mcast_item_vld << 7) & 255U) | mcast_cfg4;
  #line 629 
  mcast_cfg4 &= 4294967039U;
  #line 629 
  mcast_cfg4 = ((unsigned int)((int)mcast->tbl_mcast_old_en << 8) & 256U) | mcast_cfg4;
  #line 631 
  mcast_cfg4 &= 4294967168U;
  #line 631 
  mcast_cfg4 = (mcast->tbl_mcast_port_msk[4] & 127U) | mcast_cfg4;
  #line 634 
  dsaf_write_reg(dsaf_dev->io_base,20508U,mcast_cfg4);
  #line 636 
  dsaf_write_reg(dsaf_dev->io_base,20512U,mcast->tbl_mcast_port_msk[3]);
  #line 639 
  dsaf_write_reg(dsaf_dev->io_base,20516U,mcast->tbl_mcast_port_msk[2]);
  #line 642 
  dsaf_write_reg(dsaf_dev->io_base,20520U,mcast->tbl_mcast_port_msk[1]);
  #line 645 
  dsaf_write_reg(dsaf_dev->io_base,20524U,mcast->tbl_mcast_port_msk[0]);
  #line 646 
  return;
}

#line 654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tbl_tcam_ucast_cfg(struct dsaf_device *dsaf_dev, struct dsaf_tbl_tcam_ucast_cfg *tbl_tcam_ucast)
{
  #line 658 
  u32 ucast_cfg1;
  #line 660 
  ucast_cfg1 = dsaf_read_reg(dsaf_dev->io_base,20528U);
  #line 661 
  ucast_cfg1 &= 4294966783U;
  #line 661 
  ucast_cfg1 = ((tbl_tcam_ucast->tbl_ucast_mac_discard << 9) & 512U) | ucast_cfg1;
  #line 663 
  ucast_cfg1 &= 4294966271U;
  #line 663 
  ucast_cfg1 = ((tbl_tcam_ucast->tbl_ucast_item_vld << 10) & 1024U) | ucast_cfg1;
  #line 665 
  ucast_cfg1 &= 4294965247U;
  #line 665 
  ucast_cfg1 = ((tbl_tcam_ucast->tbl_ucast_old_en << 11) & 2048U) | ucast_cfg1;
  #line 667 
  ucast_cfg1 &= 4294967039U;
  #line 667 
  ucast_cfg1 = ((tbl_tcam_ucast->tbl_ucast_dvc << 8) & 256U) | ucast_cfg1;
  #line 669 
  ucast_cfg1 &= 4294967040U;
  #line 669 
  ucast_cfg1 = (tbl_tcam_ucast->tbl_ucast_out_port & 255U) | ucast_cfg1;
  #line 672 
  dsaf_write_reg(dsaf_dev->io_base,20528U,ucast_cfg1);
  #line 673 
  return;
}

#line 680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tbl_line_cfg(struct dsaf_device *dsaf_dev, struct dsaf_tbl_line_cfg *tbl_lin)
{
  #line 683 
  u32 tbl_line;
  #line 685 
  tbl_line = dsaf_read_reg(dsaf_dev->io_base,20532U);
  #line 686 
  tbl_line &= 4294966783U;
  #line 686 
  tbl_line = ((tbl_lin->tbl_line_mac_discard << 9) & 512U) | tbl_line;
  #line 688 
  tbl_line &= 4294967039U;
  #line 688 
  tbl_line = ((tbl_lin->tbl_line_dvc << 8) & 256U) | tbl_line;
  #line 690 
  tbl_line &= 4294967040U;
  #line 690 
  tbl_line = (tbl_lin->tbl_line_out_port & 255U) | tbl_line;
  #line 693 
  dsaf_write_reg(dsaf_dev->io_base,20532U,tbl_line);
  #line 694 
  return;
}

#line 700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tbl_tcam_mcast_pul(struct dsaf_device *dsaf_dev)
{
  #line 702 
  u32 o_tbl_pul;
  #line 704 
  o_tbl_pul = dsaf_read_reg(dsaf_dev->io_base,20640U);
  #line 705 
  o_tbl_pul &= 4294967293U;
  #line 705 
  o_tbl_pul |= 2U;
  #line 706 
  dsaf_write_reg(dsaf_dev->io_base,20640U,o_tbl_pul);
  #line 707 
  o_tbl_pul &= 4294967293U;
  #line 707 
  o_tbl_pul = o_tbl_pul;
  #line 708 
  dsaf_write_reg(dsaf_dev->io_base,20640U,o_tbl_pul);
  #line 709 
  return;
}

#line 715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tbl_line_pul(struct dsaf_device *dsaf_dev)
{
  #line 717 
  u32 tbl_pul;
  #line 719 
  tbl_pul = dsaf_read_reg(dsaf_dev->io_base,20640U);
  #line 720 
  tbl_pul &= 4294967279U;
  #line 720 
  tbl_pul |= 16U;
  #line 721 
  dsaf_write_reg(dsaf_dev->io_base,20640U,tbl_pul);
  #line 722 
  tbl_pul &= 4294967279U;
  #line 722 
  tbl_pul = tbl_pul;
  #line 723 
  dsaf_write_reg(dsaf_dev->io_base,20640U,tbl_pul);
  #line 724 
  return;
}

#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tbl_tcam_data_mcast_pul(struct dsaf_device *dsaf_dev)
{
  #line 733 
  u32 o_tbl_pul;
  #line 735 
  o_tbl_pul = dsaf_read_reg(dsaf_dev->io_base,20640U);
  #line 736 
  o_tbl_pul &= 4294967291U;
  #line 736 
  o_tbl_pul |= 4U;
  #line 737 
  o_tbl_pul &= 4294967293U;
  #line 737 
  o_tbl_pul |= 2U;
  #line 738 
  dsaf_write_reg(dsaf_dev->io_base,20640U,o_tbl_pul);
  #line 739 
  o_tbl_pul &= 4294967291U;
  #line 739 
  o_tbl_pul = o_tbl_pul;
  #line 740 
  o_tbl_pul &= 4294967293U;
  #line 740 
  o_tbl_pul = o_tbl_pul;
  #line 741 
  dsaf_write_reg(dsaf_dev->io_base,20640U,o_tbl_pul);
  #line 742 
  return;
}

#line 748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tbl_tcam_data_ucast_pul(struct dsaf_device *dsaf_dev)
{
  #line 751 
  u32 o_tbl_pul;
  #line 753 
  o_tbl_pul = dsaf_read_reg(dsaf_dev->io_base,20640U);
  #line 754 
  o_tbl_pul &= 4294967291U;
  #line 754 
  o_tbl_pul |= 4U;
  #line 755 
  o_tbl_pul &= 4294967287U;
  #line 755 
  o_tbl_pul |= 8U;
  #line 756 
  dsaf_write_reg(dsaf_dev->io_base,20640U,o_tbl_pul);
  #line 757 
  o_tbl_pul &= 4294967291U;
  #line 757 
  o_tbl_pul = o_tbl_pul;
  #line 758 
  o_tbl_pul &= 4294967287U;
  #line 758 
  o_tbl_pul = o_tbl_pul;
  #line 759 
  dsaf_write_reg(dsaf_dev->io_base,20640U,o_tbl_pul);
  #line 760 
  return;
}

#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
void hns_dsaf_set_promisc_mode(struct dsaf_device *dsaf_dev, u32 en)
{
  #line 764 
  if (dsaf_dev->dsaf_ver == 3552816U && dsaf_dev->dsaf_mode != (unsigned int)DSAF_MODE_DISABLE_SP) 
    #line 765 
    dsaf_set_reg_field(dsaf_dev->io_base,4U,16U,4U,(unsigned int)(en != 0U));
  #line 766 
  return;
}

#line 774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tbl_stat_en(struct dsaf_device *dsaf_dev)
{
  #line 776 
  u32 o_tbl_ctrl;
  #line 778 
  o_tbl_ctrl = dsaf_read_reg(dsaf_dev->io_base,20652U);
  #line 779 
  o_tbl_ctrl &= 4294967294U;
  #line 779 
  o_tbl_ctrl |= 1U;
  #line 780 
  o_tbl_ctrl &= 4294967293U;
  #line 780 
  o_tbl_ctrl |= 2U;
  #line 781 
  o_tbl_ctrl &= 4294967291U;
  #line 781 
  o_tbl_ctrl |= 4U;
  #line 782 
  o_tbl_ctrl &= 4294967287U;
  #line 782 
  o_tbl_ctrl |= 8U;
  #line 783 
  dsaf_write_reg(dsaf_dev->io_base,20652U,o_tbl_ctrl);
  #line 784 
  return;
}

#line 790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_rocee_bp_en(struct dsaf_device *dsaf_dev)
{
  #line 792 
  if (dsaf_dev->dsaf_ver == 3552816U) 
                                      #line 793 
                                      dsaf_set_reg_field(dsaf_dev->io_base,24768U,1U,0U,1U);
  #line 794 
  return;
}

#line 798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_int_xge_msk_set(struct dsaf_device *dsaf_dev, u32 chnn_num, u32 mask_set)
{
  #line 801 
  dsaf_write_reg(dsaf_dev->io_base,(chnn_num + 64U) * 4U,mask_set);
  #line 802 
  return;
}

#line 805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_int_ppe_msk_set(struct dsaf_device *dsaf_dev, u32 chnn_num, u32 msk_set)
{
  #line 808 
  dsaf_write_reg(dsaf_dev->io_base,(chnn_num + 72U) * 4U,msk_set);
  #line 809 
  return;
}

#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_int_rocee_msk_set(struct dsaf_device *dsaf_dev, u32 chnn, u32 msk_set)
{
  #line 815 
  dsaf_write_reg(dsaf_dev->io_base,(chnn + 80U) * 4U,msk_set);
  #line 816 
  return;
}

#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_int_tbl_msk_set(struct dsaf_device *dsaf_dev, u32 msk_set)
{
  #line 822 
  dsaf_write_reg(dsaf_dev->io_base,20484U,msk_set);
  #line 823 
  return;
}

#line 826  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_int_xge_src_clr(struct dsaf_device *dsaf_dev, u32 chnn_num, u32 int_src)
{
  #line 829 
  dsaf_write_reg(dsaf_dev->io_base,(chnn_num + 88U) * 4U,int_src);
  #line 830 
  return;
}

#line 833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_int_ppe_src_clr(struct dsaf_device *dsaf_dev, u32 chnn, u32 int_src)
{
  #line 836 
  dsaf_write_reg(dsaf_dev->io_base,(chnn + 96U) * 4U,int_src);
  #line 837 
  return;
}

#line 840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_int_rocee_src_clr(struct dsaf_device *dsaf_dev, u32 chnn, u32 int_src)
{
  #line 843 
  dsaf_write_reg(dsaf_dev->io_base,(chnn + 104U) * 4U,int_src);
  #line 844 
  return;
}

#line 847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_int_tbl_src_clr(struct dsaf_device *dsaf_dev, u32 int_src)
{
  #line 850 
  dsaf_write_reg(dsaf_dev->io_base,20488U,int_src);
  #line 851 
  return;
}

#line 859  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_single_line_tbl_cfg(struct dsaf_device *dsaf_dev, u32 address, struct dsaf_tbl_line_cfg *ptbl_line)
{
  #line 863 
  cif_spin_lock_bh_tcam_lock_of_dsaf_device(& dsaf_dev->tcam_lock);
  #line 866 
  hns_dsaf_tbl_line_addr_cfg(dsaf_dev,address);
  #line 869 
  hns_dsaf_tbl_line_cfg(dsaf_dev,ptbl_line);
  #line 872 
  hns_dsaf_tbl_line_pul(dsaf_dev);
  #line 874 
  cif_spin_unlock_bh_tcam_lock_of_dsaf_device(& dsaf_dev->tcam_lock);
  #line 875 
  return;
}

#line 883  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tcam_uc_cfg(struct dsaf_device *dsaf_dev, u32 address, struct dsaf_tbl_tcam_data *ptbl_tcam_data, struct dsaf_tbl_tcam_ucast_cfg *ptbl_tcam_ucast)
{
  #line 888 
  cif_spin_lock_bh_tcam_lock_of_dsaf_device(& dsaf_dev->tcam_lock);
  #line 891 
  hns_dsaf_tbl_tcam_addr_cfg(dsaf_dev,address);
  #line 893 
  hns_dsaf_tbl_tcam_data_cfg(dsaf_dev,ptbl_tcam_data);
  #line 895 
  hns_dsaf_tbl_tcam_ucast_cfg(dsaf_dev,ptbl_tcam_ucast);
  #line 897 
  hns_dsaf_tbl_tcam_data_ucast_pul(dsaf_dev);
  #line 899 
  cif_spin_unlock_bh_tcam_lock_of_dsaf_device(& dsaf_dev->tcam_lock);
  #line 900 
  return;
}

#line 909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tcam_mc_cfg(struct dsaf_device *dsaf_dev, u32 address, struct dsaf_tbl_tcam_data *ptbl_tcam_data, struct dsaf_tbl_tcam_data *ptbl_tcam_mask, struct dsaf_tbl_tcam_mcast_cfg *ptbl_tcam_mcast)
{
  #line 915 
  cif_spin_lock_bh_tcam_lock_of_dsaf_device(& dsaf_dev->tcam_lock);
  #line 918 
  hns_dsaf_tbl_tcam_addr_cfg(dsaf_dev,address);
  #line 920 
  hns_dsaf_tbl_tcam_data_cfg(dsaf_dev,ptbl_tcam_data);
  #line 922 
  hns_dsaf_tbl_tcam_mcast_cfg(dsaf_dev,ptbl_tcam_mcast);
  #line 924 
  if (ptbl_tcam_mask != (struct dsaf_tbl_tcam_data *)0) 
                                                        #line 925 
                                                        hns_dsaf_tbl_tcam_match_cfg(dsaf_dev,ptbl_tcam_mask);
  #line 928 
  hns_dsaf_tbl_tcam_data_mcast_pul(dsaf_dev);
  #line 930 
  cif_spin_unlock_bh_tcam_lock_of_dsaf_device(& dsaf_dev->tcam_lock);
  #line 931 
  return;
}

#line 939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tcam_uc_cfg_vague(struct dsaf_device *dsaf_dev, u32 address, struct dsaf_tbl_tcam_data *tcam_data, struct dsaf_tbl_tcam_data *tcam_mask, struct dsaf_tbl_tcam_ucast_cfg *tcam_uc)
{
  #line 945 
  cif_spin_lock_bh_tcam_lock_of_dsaf_device(& dsaf_dev->tcam_lock);
  #line 946 
  hns_dsaf_tbl_tcam_addr_cfg(dsaf_dev,address);
  #line 947 
  hns_dsaf_tbl_tcam_data_cfg(dsaf_dev,tcam_data);
  #line 948 
  hns_dsaf_tbl_tcam_ucast_cfg(dsaf_dev,tcam_uc);
  #line 949 
  hns_dsaf_tbl_tcam_match_cfg(dsaf_dev,tcam_mask);
  #line 950 
  hns_dsaf_tbl_tcam_data_ucast_pul(dsaf_dev);
  #line 953 
  tcam_mask->tbl_tcam_data_high = 4294967295U;
  #line 954 
  tcam_mask->tbl_tcam_data_low = 4294967295U;
  #line 955 
  hns_dsaf_tbl_tcam_match_cfg(dsaf_dev,tcam_mask);
  #line 957 
  cif_spin_unlock_bh_tcam_lock_of_dsaf_device(& dsaf_dev->tcam_lock);
  #line 958 
  return;
}

#line 968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tcam_mc_cfg_vague(struct dsaf_device *dsaf_dev, u32 address, struct dsaf_tbl_tcam_data *tcam_data, struct dsaf_tbl_tcam_data *tcam_mask, struct dsaf_tbl_tcam_mcast_cfg *tcam_mc)
{
  #line 974 
  cif_spin_lock_bh_tcam_lock_of_dsaf_device(& dsaf_dev->tcam_lock);
  #line 975 
  hns_dsaf_tbl_tcam_addr_cfg(dsaf_dev,address);
  #line 976 
  hns_dsaf_tbl_tcam_data_cfg(dsaf_dev,tcam_data);
  #line 977 
  hns_dsaf_tbl_tcam_mcast_cfg(dsaf_dev,tcam_mc);
  #line 978 
  hns_dsaf_tbl_tcam_match_cfg(dsaf_dev,tcam_mask);
  #line 979 
  hns_dsaf_tbl_tcam_data_mcast_pul(dsaf_dev);
  #line 982 
  tcam_mask->tbl_tcam_data_high = 4294967295U;
  #line 983 
  tcam_mask->tbl_tcam_data_low = 4294967295U;
  #line 984 
  hns_dsaf_tbl_tcam_match_cfg(dsaf_dev,tcam_mask);
  #line 986 
  cif_spin_unlock_bh_tcam_lock_of_dsaf_device(& dsaf_dev->tcam_lock);
  #line 987 
  return;
}

#line 994  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tcam_mc_invld(struct dsaf_device *dsaf_dev, u32 address)
{
  #line 996 
  cif_spin_lock_bh_tcam_lock_of_dsaf_device(& dsaf_dev->tcam_lock);
  #line 999 
  hns_dsaf_tbl_tcam_addr_cfg(dsaf_dev,address);
  #line 1002 
  dsaf_write_reg(dsaf_dev->io_base,20524U,0U);
  #line 1003 
  dsaf_write_reg(dsaf_dev->io_base,20520U,0U);
  #line 1004 
  dsaf_write_reg(dsaf_dev->io_base,20516U,0U);
  #line 1005 
  dsaf_write_reg(dsaf_dev->io_base,20512U,0U);
  #line 1006 
  dsaf_write_reg(dsaf_dev->io_base,20508U,0U);
  #line 1009 
  hns_dsaf_tbl_tcam_mcast_pul(dsaf_dev);
  #line 1011 
  cif_spin_unlock_bh_tcam_lock_of_dsaf_device(& dsaf_dev->tcam_lock);
  #line 1012 
  return;
}

#line 1015  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tcam_addr_get(struct dsaf_drv_tbl_tcam_key *mac_key, u8 *addr)
{
  #line 1017 
  *addr = mac_key->high.bits.mac_0;
  #line 1018 
  *(addr + 1U) = mac_key->high.bits.mac_1;
  #line 1019 
  *(addr + 2U) = mac_key->high.bits.mac_2;
  #line 1020 
  *(addr + 3U) = mac_key->high.bits.mac_3;
  #line 1021 
  *(addr + 4U) = mac_key->low.bits.mac_4;
  #line 1022 
  *(addr + 5U) = mac_key->low.bits.mac_5;
  #line 1023 
  return;
}

#line 1032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tcam_uc_get(struct dsaf_device *dsaf_dev, u32 address, struct dsaf_tbl_tcam_data *ptbl_tcam_data, struct dsaf_tbl_tcam_ucast_cfg *ptbl_tcam_ucast)
{
  #line 1037 
  u32 tcam_read_data0;
  #line 1038 
  u32 tcam_read_data4;
  #line 1040 
  cif_spin_lock_bh_tcam_lock_of_dsaf_device(& dsaf_dev->tcam_lock);
  #line 1043 
  hns_dsaf_tbl_tcam_addr_cfg(dsaf_dev,address);
  #line 1046 
  hns_dsaf_tbl_tcam_load_pul(dsaf_dev);
  #line 1050 
  ptbl_tcam_data->tbl_tcam_data_high = dsaf_read_reg(dsaf_dev->io_base,20536U);
  #line 1052 
  ptbl_tcam_data->tbl_tcam_data_low = dsaf_read_reg(dsaf_dev->io_base,20540U);
  #line 1055 
  tcam_read_data0 = dsaf_read_reg(dsaf_dev->io_base,20560U);
  #line 1057 
  tcam_read_data4 = dsaf_read_reg(dsaf_dev->io_base,20544U);
  #line 1061 
  ptbl_tcam_ucast->tbl_ucast_item_vld = (unsigned int)((unsigned long long)tcam_read_data4 >> 7) & 1U;
  #line 1064 
  ptbl_tcam_ucast->tbl_ucast_old_en = (unsigned int)((unsigned long long)tcam_read_data4 >> 8) & 1U;
  #line 1066 
  ptbl_tcam_ucast->tbl_ucast_mac_discard = (unsigned int)((unsigned long long)tcam_read_data0 >> 9) & 1U;
  #line 1069 
  ptbl_tcam_ucast->tbl_ucast_out_port = tcam_read_data0 & 255U;
  #line 1073 
  ptbl_tcam_ucast->tbl_ucast_dvc = (unsigned int)((unsigned long long)tcam_read_data0 >> 8) & 1U;
  #line 1075 
  cif_spin_unlock_bh_tcam_lock_of_dsaf_device(& dsaf_dev->tcam_lock);
  #line 1076 
  return;
}

#line 1085  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tcam_mc_get(struct dsaf_device *dsaf_dev, u32 address, struct dsaf_tbl_tcam_data *ptbl_tcam_data, struct dsaf_tbl_tcam_mcast_cfg *ptbl_tcam_mcast)
{
  #line 1090 
  u32 data_tmp;
  #line 1092 
  cif_spin_lock_bh_tcam_lock_of_dsaf_device(& dsaf_dev->tcam_lock);
  #line 1095 
  hns_dsaf_tbl_tcam_addr_cfg(dsaf_dev,address);
  #line 1098 
  hns_dsaf_tbl_tcam_load_pul(dsaf_dev);
  #line 1101 
  ptbl_tcam_data->tbl_tcam_data_high = dsaf_read_reg(dsaf_dev->io_base,20536U);
  #line 1103 
  ptbl_tcam_data->tbl_tcam_data_low = dsaf_read_reg(dsaf_dev->io_base,20540U);
  #line 1107 
  ptbl_tcam_mcast->tbl_mcast_port_msk[0] = dsaf_read_reg(dsaf_dev->io_base,20560U);
  #line 1109 
  ptbl_tcam_mcast->tbl_mcast_port_msk[1] = dsaf_read_reg(dsaf_dev->io_base,20556U);
  #line 1111 
  ptbl_tcam_mcast->tbl_mcast_port_msk[2] = dsaf_read_reg(dsaf_dev->io_base,20552U);
  #line 1113 
  ptbl_tcam_mcast->tbl_mcast_port_msk[3] = dsaf_read_reg(dsaf_dev->io_base,20548U);
  #line 1116 
  data_tmp = dsaf_read_reg(dsaf_dev->io_base,20544U);
  #line 1117 
  ptbl_tcam_mcast->tbl_mcast_item_vld = (unsigned char)((unsigned int)((unsigned char)((unsigned long long)data_tmp >> 7)) & 1U);
  #line 1119 
  ptbl_tcam_mcast->tbl_mcast_old_en = (unsigned char)((unsigned int)((unsigned char)((unsigned long long)data_tmp >> 8)) & 1U);
  #line 1121 
  ptbl_tcam_mcast->tbl_mcast_port_msk[4] = data_tmp & 127U;
  #line 1125 
  cif_spin_unlock_bh_tcam_lock_of_dsaf_device(& dsaf_dev->tcam_lock);
  #line 1126 
  return;
}

#line 1132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tbl_line_init(struct dsaf_device *dsaf_dev)
{
  #line 1134 
  u32 i;
  #line 1136 
  struct dsaf_tbl_line_cfg tbl_line[1U] = {{.tbl_line_mac_discard = 1U, .tbl_line_dvc = 0U, .tbl_line_out_port = 0U}};
  #line 1138 
  i = 0U;
  #line 1138 
  while (i <= 28671U) {
    #line 1139 
    hns_dsaf_single_line_tbl_cfg(dsaf_dev,i,(struct dsaf_tbl_line_cfg *)(& tbl_line));
    #line 1138 
    i ++;
  }
  #line 1140 
  return;
}

#line 1146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tbl_tcam_init(struct dsaf_device *dsaf_dev)
{
  #line 1148 
  u32 i;
  #line 1149 
  struct dsaf_tbl_tcam_data tcam_data[1U] = {{.tbl_tcam_data_high = 0U, .tbl_tcam_data_low = 0U}};
  #line 1150 
  struct dsaf_tbl_tcam_ucast_cfg tcam_ucast[1U] = {{.tbl_ucast_old_en = 0U, .tbl_ucast_item_vld = 0U, .tbl_ucast_mac_discard = 0U, .tbl_ucast_dvc = 0U, .tbl_ucast_out_port = 0U}};
  #line 1153 
  i = 0U;
  #line 1153 
  while (i <= 511U) {
    #line 1154 
    hns_dsaf_tcam_uc_cfg(dsaf_dev,i,(struct dsaf_tbl_tcam_data *)(& tcam_data),(struct dsaf_tbl_tcam_ucast_cfg *)(& tcam_ucast));
    #line 1153 
    i ++;
  }
  #line 1155 
  return;
}

#line 1161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_pfc_en_cfg(struct dsaf_device *dsaf_dev, int mac_id, int tc_en)
{
  #line 1164 
  dsaf_write_reg(dsaf_dev->io_base,(unsigned int)((mac_id + 20) * 4),(unsigned int)tc_en);
  #line 1165 
  return;
}

#line 1167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_set_pfc_pause(struct dsaf_device *dsaf_dev, int mac_id, int tx_en, int rx_en)
{
  #line 1170 
  if (dsaf_dev->dsaf_ver == 3552816U) {
    #line 1171 
    if (tx_en == 0 || rx_en == 0) 
                                  #line 1172 
                                  _dev_err(dsaf_dev->dev,(char *)"dsaf v1 can not close pfc!\n");
    #line 1174 
    return;
  }
  #line 1177 
  dsaf_set_reg_field(dsaf_dev->io_base,(unsigned int)((mac_id + 144) * 4),2U,1U,(unsigned int)(rx_en != 0));
  #line 1179 
  dsaf_set_reg_field(dsaf_dev->io_base,(unsigned int)((mac_id + 144) * 4),1U,0U,(unsigned int)(tx_en != 0));
  #line 1180 
  return;
}

#line 1183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
int hns_dsaf_set_rx_mac_pause_en(struct dsaf_device *dsaf_dev, int mac_id, u32 en)
{
  #line 1186 
  if (dsaf_dev->dsaf_ver == 3552816U) 
    #line 1187 
    if (en == 0U) {
      #line 1188 
      _dev_err(dsaf_dev->dev,(char *)"dsafv1 can\'t close rx_pause!\n");
      #line 1189 
      return -22;
    }
  #line 1193 
  dsaf_set_reg_field(dsaf_dev->io_base,(unsigned int)((mac_id + 144) * 4),4U,2U,(unsigned int)(en != 0U));
  #line 1196 
  return 0;
}

#line 1199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
void hns_dsaf_get_rx_mac_pause_en(struct dsaf_device *dsaf_dev, int mac_id, u32 *en)
{
  #line 1202 
  if (dsaf_dev->dsaf_ver == 3552816U) 
                                      #line 1203 
                                      *en = 1U; else 
                                                     #line 1205 
                                                     *en = dsaf_get_reg_field(dsaf_dev->io_base,(unsigned int)((mac_id + 144) * 4),4U,2U);
  #line 1206 
  return;
}

#line 1215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_comm_init(struct dsaf_device *dsaf_dev)
{
  #line 1217 
  u32 i;
  #line 1218 
  u32 o_dsaf_cfg;
  #line 1219 
  bool is_ver1 = (_Bool)(dsaf_dev->dsaf_ver == 3552816U);
  #line 1221 
  o_dsaf_cfg = dsaf_read_reg(dsaf_dev->io_base,4U);
  #line 1222 
  o_dsaf_cfg &= 4294967294U;
  #line 1222 
  o_dsaf_cfg = ((unsigned int)dsaf_dev->dsaf_en & 1U) | o_dsaf_cfg;
  #line 1223 
  o_dsaf_cfg &= 4294967293U;
  #line 1223 
  o_dsaf_cfg = (((unsigned int)dsaf_dev->dsaf_tc_mode << 1) & 2U) | o_dsaf_cfg;
  #line 1224 
  o_dsaf_cfg &= 4294967291U;
  #line 1224 
  o_dsaf_cfg = o_dsaf_cfg;
  #line 1225 
  o_dsaf_cfg &= 4294967279U;
  #line 1225 
  o_dsaf_cfg = o_dsaf_cfg;
  #line 1226 
  o_dsaf_cfg &= 4294967231U;
  #line 1226 
  o_dsaf_cfg = o_dsaf_cfg;
  #line 1227 
  dsaf_write_reg(dsaf_dev->io_base,4U,o_dsaf_cfg);
  #line 1229 
  hns_dsaf_reg_cnt_clr_ce(dsaf_dev,1U);
  #line 1230 
  hns_dsaf_stp_port_type_cfg(dsaf_dev,(enum dsaf_stp_port_type)DSAF_STP_PORT_TYPE_FORWARD);
  #line 1233 
  hns_dsaf_ppe_qid_cfg(dsaf_dev,22U);
  #line 1236 
  hns_dsaf_mix_def_qid_cfg(dsaf_dev);
  #line 1239 
  hns_dsaf_inner_qid_cfg(dsaf_dev);
  #line 1242 
  hns_dsaf_sw_port_type_cfg(dsaf_dev,(enum dsaf_sw_port_type)DSAF_SW_PORT_TYPE_NON_VLAN);
  #line 1245 
  i = 0U;
  #line 1245 
  while (i <= 5U) {
    #line 1246 
    hns_dsaf_pfc_en_cfg(dsaf_dev,(int)i,0);
    #line 1247 
    hns_dsaf_set_pfc_pause(dsaf_dev,(int)i,(int)is_ver1,(int)is_ver1);
    #line 1245 
    i ++;
  }
  #line 1251 
  i = 0U;
  #line 1251 
  while (i <= 5U) {
    #line 1252 
    hns_dsaf_int_xge_src_clr(dsaf_dev,i,4294967295U);
    #line 1253 
    hns_dsaf_int_ppe_src_clr(dsaf_dev,i,4294967295U);
    #line 1254 
    hns_dsaf_int_rocee_src_clr(dsaf_dev,i,4294967295U);
    #line 1256 
    hns_dsaf_int_xge_msk_set(dsaf_dev,i,4294967295U);
    #line 1257 
    hns_dsaf_int_ppe_msk_set(dsaf_dev,i,4294967295U);
    #line 1258 
    hns_dsaf_int_rocee_msk_set(dsaf_dev,i,4294967295U);
    #line 1251 
    i ++;
  }
  #line 1260 
  hns_dsaf_int_tbl_src_clr(dsaf_dev,4294967295U);
  #line 1261 
  hns_dsaf_int_tbl_msk_set(dsaf_dev,4294967295U);
  #line 1262 
  return;
}

#line 1268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_inode_init(struct dsaf_device *dsaf_dev)
{
  #line 1270 
  u32 reg;
  #line 1271 
  u32 tc_cfg;
  #line 1272 
  u32 i;
  #line 1274 
  if (dsaf_dev->dsaf_tc_mode == (unsigned int)HRD_DSAF_4TC_MODE) 
                                                                 #line 1275 
                                                                 tc_cfg = 409503368U; else 
                                                                    #line 1277 
                                                                    tc_cfg = 419088008U;
  #line 1279 
  if (dsaf_dev->dsaf_ver == 3552816U) {
    #line 1280 
    i = 0U;
    #line 1280 
    while (i <= 17U) {
      #line 1281 
      reg = i * 128U + 4120U;
      #line 1282 
      dsaf_set_reg_field(dsaf_dev->io_base,reg,7U,0U,i % 6U);
      #line 1280 
      i ++;
    }
  }
  else {
    #line 1288 
    i = 0U;
    #line 1288 
    while (i <= 2U) {
      #line 1289 
      reg = i * 128U + 4120U;
      #line 1290 
      dsaf_set_reg_field(dsaf_dev->io_base,reg,7U,0U,0U);
      #line 1293 
      dsaf_set_reg_field(dsaf_dev->io_base,reg,56U,3U,1U);
      #line 1296 
      dsaf_set_reg_field(dsaf_dev->io_base,reg,448U,6U,2U);
      #line 1299 
      dsaf_set_reg_field(dsaf_dev->io_base,reg,3584U,9U,3U);
      #line 1302 
      dsaf_set_reg_field(dsaf_dev->io_base,reg,28672U,12U,4U);
      #line 1305 
      dsaf_set_reg_field(dsaf_dev->io_base,reg,229376U,15U,5U);
      #line 1288 
      i ++;
    }
  }
  #line 1310 
  i = 0U;
  #line 1310 
  while (i <= 17U) {
    #line 1311 
    reg = i * 128U + 4124U;
    #line 1312 
    dsaf_write_reg(dsaf_dev->io_base,reg,tc_cfg);
    #line 1310 
    i ++;
  }
  #line 1314 
  return;
}

#line 1320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static int hns_dsaf_sbm_init(struct dsaf_device *dsaf_dev)
{
  #line 1322 
  u32 flag;
  #line 1323 
  u32 finish_msk;
  #line 1325 
  int ret;
  #line 1324 
  u32 cnt = 0U;
  #line 1327 
  if (dsaf_dev->dsaf_ver == 3552816U) {
    #line 1328 
    hns_dsaf_sbm_bp_wl_cfg(dsaf_dev);
    #line 1329 
    finish_msk = 255U;
  }
  else {
    #line 1331 
    hns_dsafv2_sbm_bp_wl_cfg(dsaf_dev);
    #line 1332 
    finish_msk = 1023U;
  }
  #line 1336 
  hns_dsaf_sbm_cfg(dsaf_dev);
  #line 1339 
  ret = hns_dsaf_sbm_cfg_mib_en(dsaf_dev);
  #line 1340 
  if (ret != 0) {
    #line 1341 
    _dev_err(dsaf_dev->dev,(char *)"hns_dsaf_sbm_cfg_mib_en fail,%s, ret=%d\n",(char *)(& dsaf_dev->ae_dev.name),ret);
    #line 1344 
    return ret;
  }
  #line 1348 
  hns_dsaf_sbm_link_sram_init_en(dsaf_dev);
  #line 1350 
  while (1) {
    #line 1351 
    usleep_range(200UL,210UL);
    #line 1352 
    flag = dsaf_get_reg_field(dsaf_dev->io_base,0U,finish_msk,0U);
    #line 1354 
    cnt ++;
    #line 1355 
    if (! (flag != finish_msk && cnt <= 29U)) 
                                              #line 1350 
                                              break;
  }
  #line 1358 
  if (flag != finish_msk) {
    #line 1359 
    _dev_err(dsaf_dev->dev,(char *)"hns_dsaf_sbm_init fail %s, flag=%d, cnt=%d\n",(char *)(& dsaf_dev->ae_dev.name),flag,cnt);
    #line 1362 
    return -19;
  }
  #line 1365 
  hns_dsaf_rocee_bp_en(dsaf_dev);
  #line 1367 
  return 0;
}

#line 1374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_tbl_init(struct dsaf_device *dsaf_dev)
{
  #line 1376 
  hns_dsaf_tbl_stat_en(dsaf_dev);
  #line 1378 
  hns_dsaf_tbl_tcam_init(dsaf_dev);
  #line 1379 
  hns_dsaf_tbl_line_init(dsaf_dev);
  #line 1380 
  return;
}

#line 1386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_voq_init(struct dsaf_device *dsaf_dev)
{
  #line 1388 
  hns_dsaf_voq_bp_all_thrd_cfg(dsaf_dev);
  #line 1389 
  return;
}

#line 1395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static int hns_dsaf_init_hw(struct dsaf_device *dsaf_dev)
{
  #line 1397 
  int ret;
  {
    #line 1399 
    bool branch;
    #line 1399 
    struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"hns_dsaf", .function = (char *)"hns_dsaf_init_hw", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c", .format = (char *)"hns_dsaf_init_hw begin %s !\n", .lineno = (unsigned int)1399U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1399 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
    #line 1399 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1399 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug444,dsaf_dev->dev,(char *)"hns_dsaf_init_hw begin %s !\n",(char *)(& dsaf_dev->ae_dev.name));
  }
  #line 1402 
  (*((dsaf_dev->misc_op)->dsaf_reset))(dsaf_dev,(_Bool)0);
  {
    #line 1403 
    unsigned long __ms = 10UL;
    #line 1403 
    while (1) {
      #line 1403 
      unsigned long tmp_0;
      #line 1403 
      tmp_0 = __ms;
      #line 1403 
      __ms --;
      #line 1403 
      ;
      #line 1403 
      if (! (tmp_0 != 0UL)) 
                            #line 1403 
                            break;
      #line 1403 
      __const_udelay(4295000UL);
    }
  }
  #line 1404 
  (*((dsaf_dev->misc_op)->dsaf_reset))(dsaf_dev,(_Bool)1);
  #line 1406 
  hns_dsaf_comm_init(dsaf_dev);
  #line 1409 
  hns_dsaf_inode_init(dsaf_dev);
  #line 1412 
  ret = hns_dsaf_sbm_init(dsaf_dev);
  #line 1413 
  if (ret != 0) 
                #line 1414 
                return ret;
  #line 1417 
  hns_dsaf_tbl_init(dsaf_dev);
  #line 1420 
  hns_dsaf_voq_init(dsaf_dev);
  #line 1422 
  return 0;
}

#line 1429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_remove_hw(struct dsaf_device *dsaf_dev)
{
  #line 1432 
  (*((dsaf_dev->misc_op)->dsaf_reset))(dsaf_dev,(_Bool)0);
  #line 1433 
  return;
}

#line 1440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static int hns_dsaf_init(struct dsaf_device *dsaf_dev)
{
  #line 1444 
  u32 i;
  #line 1445 
  int ret;
  #line 1443 
  struct dsaf_drv_priv *priv = hns_dsaf_dev_priv(dsaf_dev);
  #line 1447 
  if (dsaf_dev->dsaf_mode == (unsigned int)DSAF_MODE_DISABLE_SP) 
                                                                 #line 1448 
                                                                 return 0;
  #line 1450 
  if (dsaf_dev->dsaf_ver == 3552816U) 
                                      #line 1451 
                                      dsaf_dev->tcam_max_num = (unsigned short)512U; else 
                                                                    #line 1453 
                                                                    dsaf_dev->tcam_max_num = (unsigned short)506U;
  #line 1456 
  spinlock_check(& dsaf_dev->tcam_lock);
  {
    #line 1456 
    struct lock_class_key __key;
    #line 1456 
    __raw_spin_lock_init(& dsaf_dev->tcam_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&dsaf_dev->tcam_lock)->rlock",& __key);
  }
  #line 1457 
  ret = hns_dsaf_init_hw(dsaf_dev);
  #line 1458 
  if (ret != 0) 
                #line 1459 
                return ret;
  #line 1462 
  priv->soft_mac_tbl = (struct dsaf_drv_soft_mac_tbl *)cif_vzalloc(array_size(512UL,12UL));
  #line 1464 
  if (priv->soft_mac_tbl == (struct dsaf_drv_soft_mac_tbl *)0) {
    #line 1465 
    ret = -12;
    #line 1466 
    goto remove_hw;
  }
  #line 1470 
  i = 0U;
  #line 1470 
  while (i <= 511U) {
    #line 1471 
    (priv->soft_mac_tbl + (unsigned long)i)->index = (unsigned short)65535U;
    #line 1470 
    i ++;
  }
  #line 1473 
  return 0;
  #line 1475 
  remove_hw: 
             #line 1475 
  ;
  #line 1476 
  hns_dsaf_remove_hw(dsaf_dev);
  #line 1477 
  return ret;
}

#line 1484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_free(struct dsaf_device *dsaf_dev)
{
  #line 1487 
  struct dsaf_drv_priv *priv = hns_dsaf_dev_priv(dsaf_dev);
  #line 1489 
  hns_dsaf_remove_hw(dsaf_dev);
  #line 1492 
  cif_vfree((void *)priv->soft_mac_tbl);
  #line 1493 
  priv->soft_mac_tbl = (struct dsaf_drv_soft_mac_tbl *)0;
  #line 1494 
  return;
}

#line 1501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static u16 hns_dsaf_find_soft_mac_entry(struct dsaf_device *dsaf_dev, struct dsaf_drv_tbl_tcam_key *mac_key)
{
  #line 1507 
  struct dsaf_drv_soft_mac_tbl *soft_mac_entry;
  #line 1508 
  u32 i;
  #line 1506 
  struct dsaf_drv_priv *priv = hns_dsaf_dev_priv(dsaf_dev);
  #line 1510 
  soft_mac_entry = priv->soft_mac_tbl;
  #line 1511 
  i = 0U;
  #line 1511 
  while ((unsigned int)dsaf_dev->tcam_max_num > i) {
    #line 1513 
    if (((unsigned int)soft_mac_entry->index != 65535U && soft_mac_entry->tcam_key.high.val == mac_key->high.val) && soft_mac_entry->tcam_key.low.val == mac_key->low.val) 
      #line 1517 
      return soft_mac_entry->index;
    #line 1519 
    soft_mac_entry ++;
    #line 1511 
    i ++;
  }
  #line 1521 
  return (unsigned short)65535U;
}

#line 1528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static u16 hns_dsaf_find_empty_mac_entry(struct dsaf_device *dsaf_dev)
{
  #line 1532 
  struct dsaf_drv_soft_mac_tbl *soft_mac_entry;
  #line 1533 
  u32 i;
  #line 1531 
  struct dsaf_drv_priv *priv = hns_dsaf_dev_priv(dsaf_dev);
  #line 1535 
  soft_mac_entry = priv->soft_mac_tbl;
  #line 1536 
  i = 0U;
  #line 1536 
  while ((unsigned int)dsaf_dev->tcam_max_num > i) {
    #line 1538 
    if ((unsigned int)soft_mac_entry->index == 65535U) 
                                                       #line 1540 
                                                       return (unsigned short)i;
    #line 1542 
    soft_mac_entry ++;
    #line 1536 
    i ++;
  }
  #line 1544 
  return (unsigned short)65535U;
}

#line 1552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static u16 hns_dsaf_find_empty_mac_entry_reverse(struct dsaf_device *dsaf_dev)
{
  #line 1555 
  struct dsaf_drv_soft_mac_tbl *soft_mac_entry;
  #line 1556 
  int i;
  #line 1554 
  struct dsaf_drv_priv *priv = hns_dsaf_dev_priv(dsaf_dev);
  #line 1558 
  soft_mac_entry = priv->soft_mac_tbl + 511U;
  #line 1559 
  i = 511;
  #line 1559 
  while (i > 0) {
    #line 1561 
    if ((unsigned int)soft_mac_entry->index == 65535U) 
                                                       #line 1562 
                                                       return (unsigned short)i;
    #line 1563 
    soft_mac_entry --;
    #line 1559 
    i --;
  }
  #line 1565 
  return (unsigned short)65535U;
}

#line 1576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_set_mac_key(struct dsaf_device *dsaf_dev, struct dsaf_drv_tbl_tcam_key *mac_key, u16 vlan_id, u8 in_port_num, u8 *addr)
{
  #line 1581 
  u8 port;
  #line 1583 
  if (dsaf_dev->dsaf_mode <= (unsigned int)DSAF_MODE_ENABLE) 
                                                             #line 1585 
                                                             port = (unsigned char)0U; else 
                                                                    #line 1588 
                                                                    port = in_port_num;
  #line 1590 
  mac_key->high.bits.mac_0 = *addr;
  #line 1591 
  mac_key->high.bits.mac_1 = *(addr + 1U);
  #line 1592 
  mac_key->high.bits.mac_2 = *(addr + 2U);
  #line 1593 
  mac_key->high.bits.mac_3 = *(addr + 3U);
  #line 1594 
  mac_key->low.bits.mac_4 = *(addr + 4U);
  #line 1595 
  mac_key->low.bits.mac_5 = *(addr + 5U);
  #line 1596 
  mac_key->low.bits.port_vlan = (unsigned short)0U;
  #line 1597 
  mac_key->low.bits.port_vlan = (unsigned short)((unsigned int)mac_key->low.bits.port_vlan & 15U);
  #line 1597 
  mac_key->low.bits.port_vlan = (unsigned short)((int)mac_key->low.bits.port_vlan | ((int)vlan_id << 4U));
  #line 1599 
  mac_key->low.bits.port_vlan = (unsigned short)((unsigned int)mac_key->low.bits.port_vlan & 65520U);
  #line 1599 
  mac_key->low.bits.port_vlan = (unsigned short)((unsigned int)mac_key->low.bits.port_vlan | ((unsigned int)((unsigned short)port) & 15U));
  #line 1601 
  return;
}

#line 1608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
int hns_dsaf_set_mac_uc_entry(struct dsaf_device *dsaf_dev, struct dsaf_drv_mac_single_dest_entry *mac_entry)
{
  #line 1613 
  struct dsaf_drv_tbl_tcam_key mac_key;
  #line 1614 
  struct dsaf_tbl_tcam_ucast_cfg mac_data;
  #line 1618 
  struct dsaf_tbl_tcam_data tcam_data;
  #line 1612 
  u16 entry_index = (unsigned short)65535U;
  #line 1616 
  struct dsaf_drv_priv *priv = hns_dsaf_dev_priv(dsaf_dev);
  #line 1617 
  struct dsaf_drv_soft_mac_tbl *soft_mac_entry = priv->soft_mac_tbl;
  #line 1621 
  if (((((((unsigned int)*((u8 *)(& mac_entry->addr)) == 0U && (unsigned int)*((u8 *)(& mac_entry->addr) + 1U) == 0U) && (unsigned int)*((u8 *)(& mac_entry->addr) + 2U) == 0U) && (unsigned int)*((u8 *)(& mac_entry->addr) + 3U) == 0U) && (unsigned int)*((u8 *)(& mac_entry->addr) + 4U) == 0U) && (unsigned int)*((u8 *)(& mac_entry->addr) + 5U) == 0U || (((((unsigned int)*((u8 *)(& mac_entry->addr)) == 255U && (unsigned int)*((u8 *)(& mac_entry->addr) + 1U) == 255U) && (unsigned int)*((u8 *)(& mac_entry->addr) + 2U) == 255U) && (unsigned int)*((u8 *)(& mac_entry->addr) + 3U) == 255U) && (unsigned int)*((u8 *)(& mac_entry->addr) + 4U) == 255U) && (unsigned int)*((u8 *)(& mac_entry->addr) + 5U) == 255U) || (int)*((u8 *)(& mac_entry->addr)) & 1) {
    #line 1624 
    _dev_err(dsaf_dev->dev,(char *)"set_uc %s Mac %pM err!\n",(char *)(& dsaf_dev->ae_dev.name),(u8 *)(& mac_entry->addr));
    #line 1626 
    return -22;
  }
  #line 1630 
  hns_dsaf_set_mac_key(dsaf_dev,& mac_key,(unsigned short)((int)mac_entry->in_vlan_id),(unsigned char)((int)mac_entry->in_port_num),(u8 *)(& mac_entry->addr));
  #line 1634 
  entry_index = hns_dsaf_find_soft_mac_entry(dsaf_dev,& mac_key);
  #line 1635 
  if ((unsigned int)entry_index == 65535U) {
    #line 1637 
    entry_index = hns_dsaf_find_empty_mac_entry(dsaf_dev);
    #line 1638 
    if ((unsigned int)entry_index == 65535U) {
      #line 1640 
      _dev_err(dsaf_dev->dev,(char *)"set_uc_entry failed, %s Mac key(%#x:%#x)\n",(char *)(& dsaf_dev->ae_dev.name),mac_key.high.val,mac_key.low.val);
      #line 1644 
      return -22;
    }
  }
  {
    #line 1648 
    bool branch;
    #line 1648 
    struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"hns_dsaf", .function = (char *)"hns_dsaf_set_mac_uc_entry", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c", .format = (char *)"set_uc_entry, %s Mac key(%#x:%#x) entry_index%d\n", .lineno = (unsigned int)1648U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1648 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
    #line 1648 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1648 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug445,dsaf_dev->dev,(char *)"set_uc_entry, %s Mac key(%#x:%#x) entry_index%d\n",(char *)(& dsaf_dev->ae_dev.name),mac_key.high.val,mac_key.low.val,(int)entry_index);
  }
  #line 1654 
  mac_data.tbl_ucast_item_vld = 1U;
  #line 1655 
  mac_data.tbl_ucast_mac_discard = 0U;
  #line 1656 
  mac_data.tbl_ucast_old_en = 0U;
  #line 1658 
  mac_data.tbl_ucast_dvc = 0U;
  #line 1659 
  mac_data.tbl_ucast_out_port = (unsigned int)mac_entry->port_num;
  #line 1660 
  tcam_data.tbl_tcam_data_high = mac_key.high.val;
  #line 1661 
  tcam_data.tbl_tcam_data_low = mac_key.low.val;
  #line 1663 
  hns_dsaf_tcam_uc_cfg(dsaf_dev,(unsigned int)entry_index,& tcam_data,& mac_data);
  #line 1666 
  soft_mac_entry += (unsigned long)entry_index;
  #line 1667 
  soft_mac_entry->index = entry_index;
  #line 1668 
  soft_mac_entry->tcam_key.high.val = mac_key.high.val;
  #line 1669 
  soft_mac_entry->tcam_key.low.val = mac_key.low.val;
  #line 1671 
  return 0;
}

#line 1674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
int hns_dsaf_rm_mac_addr(struct dsaf_device *dsaf_dev, struct dsaf_drv_mac_single_dest_entry *mac_entry)
{
  #line 1679 
  struct dsaf_tbl_tcam_ucast_cfg mac_data;
  #line 1680 
  struct dsaf_drv_tbl_tcam_key mac_key;
  #line 1678 
  u16 entry_index = (unsigned short)65535U;
  #line 1683 
  if (! is_valid_ether_addr((u8 *)(& mac_entry->addr))) {
    #line 1684 
    _dev_err(dsaf_dev->dev,(char *)"rm_uc_addr %s Mac %pM err!\n",(char *)(& dsaf_dev->ae_dev.name),(u8 *)(& mac_entry->addr));
    #line 1686 
    return -22;
  }
  #line 1690 
  hns_dsaf_set_mac_key(dsaf_dev,& mac_key,(unsigned short)((int)mac_entry->in_vlan_id),(unsigned char)((int)mac_entry->in_port_num),(u8 *)(& mac_entry->addr));
  #line 1693 
  entry_index = hns_dsaf_find_soft_mac_entry(dsaf_dev,& mac_key);
  #line 1694 
  if ((unsigned int)entry_index == 65535U) {
    #line 1696 
    _dev_info(dsaf_dev->dev,(char *)"rm_uc_addr no tcam, %s Mac key(%#x:%#x)\n",(char *)(& dsaf_dev->ae_dev.name),mac_key.high.val,mac_key.low.val);
    #line 1700 
    return 0;
  }
  {
    #line 1703 
    bool branch;
    #line 1703 
    struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"hns_dsaf", .function = (char *)"hns_dsaf_rm_mac_addr", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c", .format = (char *)"rm_uc_addr, %s Mac key(%#x:%#x) entry_index%d\n", .lineno = (unsigned int)1703U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1703 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
    #line 1703 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1703 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug446,dsaf_dev->dev,(char *)"rm_uc_addr, %s Mac key(%#x:%#x) entry_index%d\n",(char *)(& dsaf_dev->ae_dev.name),mac_key.high.val,mac_key.low.val,(int)entry_index);
  }
  #line 1708 
  hns_dsaf_tcam_uc_get(dsaf_dev,(unsigned int)entry_index,(struct dsaf_tbl_tcam_data *)(& mac_key),& mac_data);
  #line 1714 
  if ((unsigned int)mac_entry->port_num != mac_data.tbl_ucast_out_port) 
    #line 1715 
    return -14;
  #line 1717 
  return hns_dsaf_del_mac_entry(dsaf_dev,
                               (unsigned short)((int)mac_entry->in_vlan_id),
                               (unsigned char)((int)mac_entry->in_port_num),
                               (u8 *)(& mac_entry->addr));
}

#line 1723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_setup_mc_mask(struct dsaf_device *dsaf_dev, u8 port_num, u8 *mask, u8 *addr)
{
  #line 1726 
  if ((((((unsigned int)*addr == 255U && (unsigned int)*(addr + 1U) == 255U) && (unsigned int)*(addr + 2U) == 255U) && (unsigned int)*(addr + 3U) == 255U) && (unsigned int)*(addr + 4U) == 255U) && (unsigned int)*(addr + 5U) == 255U) 
    #line 1727 
    memset((void *)mask,255,6UL); else 
                                       #line 1729 
                                       memcpy((void *)mask,(void *)(& (dsaf_dev->mac_cb[(int)port_num])->mc_mask),6UL);
  #line 1730 
  return;
}

#line 1732  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_mc_mask_bit_clear(char *dst, char *src)
{
  #line 1734 
  u16 *a = (u16 *)dst;
  #line 1735 
  u16 *b = (u16 *)src;
  #line 1737 
  *a = (unsigned short)((int)*a & (int)*b);
  #line 1738 
  *(a + 1U) = (unsigned short)((int)*(a + 1U) & (int)*(b + 1U));
  #line 1739 
  *(a + 2U) = (unsigned short)((int)*(a + 2U) & (int)*(b + 2U));
  #line 1740 
  return;
}

#line 1747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
int hns_dsaf_add_mac_mc_port(struct dsaf_device *dsaf_dev, struct dsaf_drv_mac_single_dest_entry *mac_entry)
{
  #line 1751 
  struct dsaf_drv_tbl_tcam_key mac_key;
  #line 1752 
  struct dsaf_drv_tbl_tcam_key mask_key;
  #line 1754 
  struct dsaf_tbl_tcam_mcast_cfg mac_data;
  #line 1757 
  struct dsaf_tbl_tcam_data tcam_data;
  #line 1758 
  u8 mc_addr[6U];
  #line 1759 
  int mskid;
  #line 1750 
  u16 entry_index = (unsigned short)65535U;
  #line 1753 
  struct dsaf_tbl_tcam_data *pmask_key = (struct dsaf_tbl_tcam_data *)0;
  #line 1755 
  struct dsaf_drv_priv *priv = hns_dsaf_dev_priv(dsaf_dev);
  #line 1756 
  struct dsaf_drv_soft_mac_tbl *soft_mac_entry = priv->soft_mac_tbl;
  #line 1762 
  if ((((((unsigned int)*((u8 *)(& mac_entry->addr)) == 0U && (unsigned int)*((u8 *)(& mac_entry->addr) + 1U) == 0U) && (unsigned int)*((u8 *)(& mac_entry->addr) + 2U) == 0U) && (unsigned int)*((u8 *)(& mac_entry->addr) + 3U) == 0U) && (unsigned int)*((u8 *)(& mac_entry->addr) + 4U) == 0U) && (unsigned int)*((u8 *)(& mac_entry->addr) + 5U) == 0U) {
    #line 1763 
    _dev_err(dsaf_dev->dev,(char *)"set_entry failed,addr %pM!\n",(u8 *)(& mac_entry->addr));
    #line 1765 
    return -22;
  }
  #line 1768 
  ether_addr_copy((u8 *)(& mc_addr),(u8 *)(& mac_entry->addr));
  #line 1769 
  if (dsaf_dev->dsaf_ver != 3552816U) {
    #line 1770 
    u8 mc_mask[6U];
    #line 1773 
    hns_dsaf_setup_mc_mask(dsaf_dev,(unsigned char)((int)mac_entry->in_port_num),(u8 *)(& mc_mask),(u8 *)(& mac_entry->addr));
    #line 1775 
    hns_dsaf_mc_mask_bit_clear((char *)(& mc_addr),(char *)(& mc_mask));
    #line 1778 
    hns_dsaf_set_mac_key(dsaf_dev,& mask_key,(unsigned short)0,(unsigned char)255,(u8 *)(& mc_mask));
    #line 1783 
    pmask_key = (struct dsaf_tbl_tcam_data *)(& mask_key);
  }
  #line 1787 
  hns_dsaf_set_mac_key(dsaf_dev,& mac_key,(unsigned short)((int)mac_entry->in_vlan_id),(unsigned char)((int)mac_entry->in_port_num),(u8 *)(& mc_addr));
  #line 1791 
  memset((void *)(& mac_data),0,24UL);
  #line 1794 
  entry_index = hns_dsaf_find_soft_mac_entry(dsaf_dev,& mac_key);
  #line 1795 
  if ((unsigned int)entry_index == 65535U) {
    #line 1797 
    entry_index = hns_dsaf_find_empty_mac_entry(dsaf_dev);
    #line 1798 
    if ((unsigned int)entry_index == 65535U) {
      #line 1800 
      _dev_err(dsaf_dev->dev,(char *)"set_uc_entry failed, %s Mac key(%#x:%#x)\n",(char *)(& dsaf_dev->ae_dev.name),mac_key.high.val,mac_key.low.val);
      #line 1804 
      return -22;
    }
  }
  else 
       #line 1808 
       hns_dsaf_tcam_mc_get(dsaf_dev,(unsigned int)entry_index,& tcam_data,& mac_data);
  #line 1813 
  if ((unsigned int)mac_entry->port_num <= 5U) 
                                               #line 1814 
                                               mskid = (int)mac_entry->port_num;
  else 
    #line 1815 
    if ((unsigned int)mac_entry->port_num > 126U) 
                                                  #line 1816 
                                                  mskid = (int)mac_entry->port_num + -121;
    else {
      #line 1819 
      _dev_err(dsaf_dev->dev,(char *)"%s,pnum(%d)error,key(%#x:%#x)\n",(char *)(& dsaf_dev->ae_dev.name),(int)mac_entry->port_num,mac_key.high.val,mac_key.low.val);
      #line 1823 
      return -22;
    }
  #line 1825 
  mac_data.tbl_mcast_port_msk[mskid / 32] &= ~ ((unsigned int)(1ULL << (mskid & 31)));
  #line 1825 
  mac_data.tbl_mcast_port_msk[mskid / 32] |= (unsigned int)(1 << (mskid & 31)) & (unsigned int)(1ULL << (mskid & 31));
  #line 1826 
  mac_data.tbl_mcast_old_en = (unsigned char)0U;
  #line 1827 
  mac_data.tbl_mcast_item_vld = (unsigned char)1U;
  {
    #line 1829 
    bool branch;
    #line 1829 
    struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"hns_dsaf", .function = (char *)"hns_dsaf_add_mac_mc_port", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c", .format = (char *)"set_uc_entry, %s Mac key(%#x:%#x) entry_index%d\n", .lineno = (unsigned int)1829U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1829 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
    #line 1829 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1829 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug447,dsaf_dev->dev,(char *)"set_uc_entry, %s Mac key(%#x:%#x) entry_index%d\n",(char *)(& dsaf_dev->ae_dev.name),mac_key.high.val,mac_key.low.val,(int)entry_index);
  }
  #line 1834 
  tcam_data.tbl_tcam_data_high = mac_key.high.val;
  #line 1835 
  tcam_data.tbl_tcam_data_low = mac_key.low.val;
  #line 1838 
  hns_dsaf_tcam_mc_cfg(dsaf_dev,(unsigned int)entry_index,& tcam_data,pmask_key,& mac_data);
  #line 1842 
  soft_mac_entry += (unsigned long)entry_index;
  #line 1843 
  soft_mac_entry->index = entry_index;
  #line 1844 
  soft_mac_entry->tcam_key.high.val = mac_key.high.val;
  #line 1845 
  soft_mac_entry->tcam_key.low.val = mac_key.low.val;
  #line 1847 
  return 0;
}

#line 1857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
int hns_dsaf_del_mac_entry(struct dsaf_device *dsaf_dev, u16 vlan_id, u8 in_port_num, u8 *addr)
{
  #line 1861 
  struct dsaf_drv_tbl_tcam_key mac_key;
  #line 1860 
  u16 entry_index = (unsigned short)65535U;
  #line 1863 
  struct dsaf_drv_priv *priv = hns_dsaf_dev_priv(dsaf_dev);
  #line 1864 
  struct dsaf_drv_soft_mac_tbl *soft_mac_entry = priv->soft_mac_tbl;
  #line 1867 
  if ((((((unsigned int)*addr == 0U && (unsigned int)*(addr + 1U) == 0U) && (unsigned int)*(addr + 2U) == 0U) && (unsigned int)*(addr + 3U) == 0U) && (unsigned int)*(addr + 4U) == 0U) && (unsigned int)*(addr + 5U) == 0U || (((((unsigned int)*addr == 255U && (unsigned int)*(addr + 1U) == 255U) && (unsigned int)*(addr + 2U) == 255U) && (unsigned int)*(addr + 3U) == 255U) && (unsigned int)*(addr + 4U) == 255U) && (unsigned int)*(addr + 5U) == 255U) {
    #line 1868 
    _dev_err(dsaf_dev->dev,(char *)"del_entry failed,addr %pM!\n",addr);
    #line 1870 
    return -22;
  }
  #line 1874 
  hns_dsaf_set_mac_key(dsaf_dev,& mac_key,(unsigned short)((int)vlan_id),(unsigned char)((int)in_port_num),addr);
  #line 1877 
  entry_index = hns_dsaf_find_soft_mac_entry(dsaf_dev,& mac_key);
  #line 1878 
  if ((unsigned int)entry_index == 65535U) {
    #line 1880 
    _dev_err(dsaf_dev->dev,(char *)"del_mac_entry failed, %s Mac key(%#x:%#x)\n",(char *)(& dsaf_dev->ae_dev.name),mac_key.high.val,mac_key.low.val);
    #line 1884 
    return -22;
  }
  {
    #line 1886 
    bool branch;
    #line 1886 
    struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"hns_dsaf", .function = (char *)"hns_dsaf_del_mac_entry", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c", .format = (char *)"del_mac_entry, %s Mac key(%#x:%#x) entry_index%d\n", .lineno = (unsigned int)1886U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1886 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
    #line 1886 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1886 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug448,dsaf_dev->dev,(char *)"del_mac_entry, %s Mac key(%#x:%#x) entry_index%d\n",(char *)(& dsaf_dev->ae_dev.name),mac_key.high.val,mac_key.low.val,(int)entry_index);
  }
  #line 1892 
  hns_dsaf_tcam_mc_invld(dsaf_dev,(unsigned int)entry_index);
  #line 1895 
  soft_mac_entry += (unsigned long)entry_index;
  #line 1896 
  soft_mac_entry->index = (unsigned short)65535U;
  #line 1898 
  return 0;
}

#line 1906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
int hns_dsaf_del_mac_mc_port(struct dsaf_device *dsaf_dev, struct dsaf_drv_mac_single_dest_entry *mac_entry)
{
  #line 1910 
  struct dsaf_drv_tbl_tcam_key mac_key;
  #line 1913 
  u16 vlan_id;
  #line 1914 
  u8 in_port_num;
  #line 1915 
  struct dsaf_tbl_tcam_mcast_cfg mac_data;
  #line 1916 
  struct dsaf_tbl_tcam_data tcam_data;
  #line 1917 
  int mskid;
  #line 1919 
  struct dsaf_drv_tbl_tcam_key mask_key;
  #line 1921 
  u8 mc_addr[6U];
  #line 1909 
  u16 entry_index = (unsigned short)65535U;
  #line 1911 
  struct dsaf_drv_priv *priv = hns_dsaf_dev_priv(dsaf_dev);
  #line 1912 
  struct dsaf_drv_soft_mac_tbl *soft_mac_entry = priv->soft_mac_tbl;
  #line 1918 
  u8 empty_msk[20U] = {(unsigned char)0U};
  #line 1920 
  struct dsaf_tbl_tcam_data *pmask_key = (struct dsaf_tbl_tcam_data *)0;
  #line 1923 
  if (mac_entry == (struct dsaf_drv_mac_single_dest_entry *)0) {
    #line 1924 
    _dev_err(dsaf_dev->dev,(char *)"hns_dsaf_del_mac_mc_port mac_entry is NULL\n");
    #line 1926 
    return -22;
  }
  #line 1930 
  if ((((((unsigned int)*((u8 *)(& mac_entry->addr)) == 0U && (unsigned int)*((u8 *)(& mac_entry->addr) + 1U) == 0U) && (unsigned int)*((u8 *)(& mac_entry->addr) + 2U) == 0U) && (unsigned int)*((u8 *)(& mac_entry->addr) + 3U) == 0U) && (unsigned int)*((u8 *)(& mac_entry->addr) + 4U) == 0U) && (unsigned int)*((u8 *)(& mac_entry->addr) + 5U) == 0U) {
    #line 1931 
    _dev_err(dsaf_dev->dev,(char *)"del_port failed, addr %pM!\n",(u8 *)(& mac_entry->addr));
    #line 1933 
    return -22;
  }
  #line 1937 
  ether_addr_copy((u8 *)(& mc_addr),(u8 *)(& mac_entry->addr));
  #line 1939 
  if (dsaf_dev->dsaf_ver != 3552816U) {
    #line 1940 
    u8 mc_mask[6U];
    #line 1943 
    hns_dsaf_setup_mc_mask(dsaf_dev,(unsigned char)((int)mac_entry->in_port_num),(u8 *)(& mc_mask),(u8 *)(& mac_entry->addr));
    #line 1945 
    hns_dsaf_mc_mask_bit_clear((char *)(& mc_addr),(char *)(& mc_mask));
    #line 1948 
    hns_dsaf_set_mac_key(dsaf_dev,& mask_key,(unsigned short)0,(unsigned char)255,(u8 *)(& mc_mask));
    #line 1950 
    pmask_key = (struct dsaf_tbl_tcam_data *)(& mask_key);
  }
  #line 1954 
  vlan_id = mac_entry->in_vlan_id;
  #line 1955 
  in_port_num = mac_entry->in_port_num;
  #line 1958 
  hns_dsaf_set_mac_key(dsaf_dev,& mac_key,(unsigned short)((int)vlan_id),(unsigned char)((int)in_port_num),(u8 *)(& mc_addr));
  #line 1961 
  entry_index = hns_dsaf_find_soft_mac_entry(dsaf_dev,& mac_key);
  #line 1962 
  if ((unsigned int)entry_index == 65535U) {
    #line 1964 
    _dev_err(dsaf_dev->dev,(char *)"find_soft_mac_entry failed, %s Mac key(%#x:%#x)\n",(char *)(& dsaf_dev->ae_dev.name),mac_key.high.val,mac_key.low.val);
    #line 1968 
    return -22;
  }
  {
    #line 1971 
    bool branch;
    #line 1971 
    struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"hns_dsaf", .function = (char *)"hns_dsaf_del_mac_mc_port", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c", .format = (char *)"del_mac_mc_port, %s key(%#x:%#x) index%d\n", .lineno = (unsigned int)1971U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1971 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
    #line 1971 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1971 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug449,dsaf_dev->dev,(char *)"del_mac_mc_port, %s key(%#x:%#x) index%d\n",(char *)(& dsaf_dev->ae_dev.name),mac_key.high.val,mac_key.low.val,(int)entry_index);
  }
  #line 1977 
  hns_dsaf_tcam_mc_get(dsaf_dev,(unsigned int)entry_index,& tcam_data,& mac_data);
  #line 1980 
  if ((unsigned int)mac_entry->port_num <= 5U) 
                                               #line 1981 
                                               mskid = (int)mac_entry->port_num;
  else 
    #line 1982 
    if ((unsigned int)mac_entry->port_num > 126U) 
                                                  #line 1983 
                                                  mskid = (int)mac_entry->port_num + -121;
    else {
      #line 1986 
      _dev_err(dsaf_dev->dev,(char *)"%s,pnum(%d)error,key(%#x:%#x)\n",(char *)(& dsaf_dev->ae_dev.name),(int)mac_entry->port_num,mac_key.high.val,mac_key.low.val);
      #line 1990 
      return -22;
    }
  #line 1992 
  mac_data.tbl_mcast_port_msk[mskid / 32] &= ~ ((unsigned int)(1ULL << (mskid & 31)));
  #line 1992 
  mac_data.tbl_mcast_port_msk[mskid / 32] = mac_data.tbl_mcast_port_msk[mskid / 32];
  #line 1995 
  if (memcmp((void *)(& mac_data.tbl_mcast_port_msk),(void *)(& empty_msk),
               20UL) == 0) {
    #line 1997 
    hns_dsaf_tcam_mc_invld(dsaf_dev,(unsigned int)entry_index);
    #line 2000 
    soft_mac_entry += (unsigned long)entry_index;
    #line 2001 
    soft_mac_entry->index = (unsigned short)65535U;
  }
  else {
    #line 2003 
    tcam_data.tbl_tcam_data_high = mac_key.high.val;
    #line 2004 
    tcam_data.tbl_tcam_data_low = mac_key.low.val;
    #line 2006 
    hns_dsaf_tcam_mc_cfg(dsaf_dev,(unsigned int)entry_index,& tcam_data,pmask_key,& mac_data);
  }
  #line 2011 
  return 0;
}

#line 2014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
int hns_dsaf_clr_mac_mc_port(struct dsaf_device *dsaf_dev, u8 mac_id, u8 port_num)
{
  #line 2018 
  struct dsaf_drv_soft_mac_tbl *soft_mac_entry;
  #line 2019 
  struct dsaf_tbl_tcam_mcast_cfg mac_data;
  #line 2020 
  int i;
  #line 2017 
  struct dsaf_drv_priv *priv = hns_dsaf_dev_priv(dsaf_dev);
  #line 2020 
  int ret = 0;
  #line 2022 
  if (dsaf_dev->dsaf_mode == (unsigned int)DSAF_MODE_DISABLE_SP) 
                                                                 #line 2023 
                                                                 return 0;
  #line 2025 
  i = 0;
  #line 2025 
  while (i <= 505) {
    {
      #line 2026 
      u8 addr[6U];
      #line 2027 
      u8 port;
      #line 2029 
      soft_mac_entry = priv->soft_mac_tbl + (unsigned long)i;
      #line 2031 
      hns_dsaf_tcam_addr_get(& soft_mac_entry->tcam_key,(u8 *)(& addr));
      #line 2032 
      port = (unsigned char)((unsigned int)((unsigned char)soft_mac_entry->tcam_key.low.bits.port_vlan) & 15U);
      #line 2037 
      if ((unsigned int)soft_mac_entry->index != 65535U && (int)port == (int)mac_id) {
        #line 2038 
        if ((int)is_multicast_ether_addr((u8 *)(& addr)) != 0) {
          #line 2040 
          if (! is_broadcast_ether_addr((u8 *)(& addr))) {
            #line 2042 
            struct dsaf_drv_mac_single_dest_entry mac_entry;
            #line 2041 
            u32 empty_msk[5U] = {0U};
            #line 2047 
            ether_addr_copy((u8 *)(& mac_entry.addr),(u8 *)(& addr));
            #line 2048 
            mac_entry.in_vlan_id = (unsigned short)((int)soft_mac_entry->tcam_key.low.bits.port_vlan >> 4);
            #line 2052 
            mac_entry.in_port_num = mac_id;
            #line 2053 
            mac_entry.port_num = port_num;
            #line 2054 
            if (hns_dsaf_del_mac_mc_port(dsaf_dev,& mac_entry) != 0) {
              #line 2055 
              ret = -22;
              #line 2056 
              goto __Cont;
            }
            #line 2062 
            hns_dsaf_tcam_mc_get(dsaf_dev,(unsigned int)i,(struct dsaf_tbl_tcam_data *)(& soft_mac_entry->tcam_key),& mac_data);
            #line 2066 
            mac_data.tbl_mcast_port_msk[(int)((unsigned int)mac_id / 32U)] &= ~ ((unsigned int)(1ULL << ((int)mac_id & 31)));
            #line 2066 
            mac_data.tbl_mcast_port_msk[(int)((unsigned int)mac_id / 32U)] = mac_data.tbl_mcast_port_msk[(int)((unsigned int)mac_id / 32U)];
            #line 2068 
            if (memcmp((void *)(& mac_data.tbl_mcast_port_msk),(void *)(& empty_msk),
               20UL) == 0) {
              #line 2070 
              mac_entry.port_num = mac_id;
              #line 2071 
              if (hns_dsaf_del_mac_mc_port(dsaf_dev,& mac_entry) != 0) {
                #line 2073 
                ret = -22;
                #line 2074 
                goto __Cont;
              }
            }
          }
        }
      }
    }
    #line 2025 
    __Cont: 
            #line 2025 
    i ++;
  }
  #line 2080 
  return ret;
}

#line 2083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static struct dsaf_device *hns_dsaf_alloc_dev(struct device *dev, size_t sizeof_priv)
{
  #line 2086 
  struct dsaf_device *dsaf_dev;
  #line 2088 
  dsaf_dev = (struct dsaf_device *)cif_devm_kzalloc_2(dev,sizeof_priv + 7328UL,3264U);
  #line 2090 
  if ((long)(dsaf_dev == (struct dsaf_device *)0) != 0L) 
                                                         #line 2091 
                                                         dsaf_dev = (struct dsaf_device *)ERR_PTR_0(-12L);
  else {
    #line 2093 
    dsaf_dev->dev = dev;
    #line 2094 
    dev_set_drvdata(dev,(void *)dsaf_dev);
  }
  #line 2097 
  return dsaf_dev;
}

#line 2104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_free_dev(struct dsaf_device *dsaf_dev)
{
  #line 2106 
  dev_set_drvdata(dsaf_dev->dev,(void *)0);
  #line 2107 
  return;
}

#line 2115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_pfc_unit_cnt(struct dsaf_device *dsaf_dev, int mac_id, enum dsaf_port_rate_mode rate)
{
  #line 2118 
  u32 unit_cnt;
  #line 2120 
  switch ((unsigned int)rate) {
    #line 2121 
    case (unsigned int)2: 
                          #line 2121 
    ;
    #line 2122 
    unit_cnt = 41U;
    #line 2123 
    break;
    #line 2124 
    case (unsigned int)0: 
                          #line 2124 
    ;
    #line 2125 
    unit_cnt = 410U;
    #line 2126 
    break;
    #line 2127 
    case (unsigned int)1: 
                          #line 2127 
    ;
    #line 2128 
    unit_cnt = 410U;
    #line 2129 
    break;
    #line 2130 
    default: 
             #line 2130 
    ;
    #line 2131 
    unit_cnt = 41U;
  }
  #line 2134 
  dsaf_set_reg_field(dsaf_dev->io_base,(unsigned int)((unsigned long long)mac_id + 28ULL) * 4U,511U,0U,unit_cnt);
  #line 2135 
  return;
}

#line 2146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void hns_dsaf_port_work_rate_cfg(struct dsaf_device *dsaf_dev, int mac_id, enum dsaf_port_rate_mode rate_mode)
{
  #line 2149 
  u32 port_work_mode;
  #line 2151 
  port_work_mode = dsaf_read_reg(dsaf_dev->io_base,(unsigned int)((unsigned long long)mac_id + 6160ULL) * 4U);
  #line 2154 
  if (rate_mode == (unsigned int)DSAF_PORT_RATE_10000) {
    #line 2155 
    port_work_mode &= 4294967294U;
    #line 2155 
    port_work_mode |= 1U;
  }
  else {
    #line 2157 
    port_work_mode &= 4294967294U;
    #line 2157 
    port_work_mode = port_work_mode;
  }
  #line 2159 
  dsaf_write_reg(dsaf_dev->io_base,(unsigned int)((unsigned long long)mac_id + 6160ULL) * 4U,port_work_mode);
  #line 2163 
  hns_dsaf_pfc_unit_cnt(dsaf_dev,mac_id,rate_mode);
  #line 2164 
  return;
}

#line 2170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
void hns_dsaf_fix_mac_mode(struct hns_mac_cb *mac_cb)
{
  #line 2172 
  enum dsaf_port_rate_mode mode;
  #line 2173 
  struct dsaf_device *dsaf_dev = mac_cb->dsaf_dev;
  #line 2174 
  int mac_id = (int)mac_cb->mac_id;
  #line 2176 
  if (mac_cb->mac_type != (unsigned int)HNAE_PORT_SERVICE) 
                                                           #line 2177 
                                                           return;
  #line 2178 
  if (mac_cb->phy_if == (unsigned int)PHY_INTERFACE_MODE_XGMII) 
                                                                #line 2179 
                                                                mode = DSAF_PORT_RATE_10000; else 
                                                                    #line 2181 
                                                                    mode = DSAF_PORT_RATE_1000;
  #line 2183 
  hns_dsaf_port_work_rate_cfg(dsaf_dev,mac_id,mode);
  #line 2184 
  return;
}

#line 2186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static u32 hns_dsaf_get_inode_prio_reg(int index)
{
  #line 2188 
  int base_index;
  #line 2188 
  int offset;
  #line 2189 
  u32 base_addr = 7168U;
  #line 2191 
  base_index = (index + 1) / 3;
  #line 2192 
  offset = (index + 1) % 3;
  #line 2194 
  return ((unsigned int)(base_index * 256) + (unsigned int)(offset * 80)) + base_addr;
}

#line 2198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
void hns_dsaf_update_stats(struct dsaf_device *dsaf_dev, u32 node_num)
{
  #line 2203 
  int i;
  #line 2204 
  u32 reg_tmp;
  #line 2200 
  struct dsaf_hw_stats *hw_stats = & dsaf_dev->hw_stats[node_num];
  #line 2202 
  bool is_ver1 = (_Bool)(dsaf_dev->dsaf_ver == 3552816U);
  #line 2207 
  hw_stats->pad_drop += (unsigned long long)dsaf_read_reg(dsaf_dev->io_base,node_num * 128U + 4136U);
  #line 2209 
  hw_stats->man_pkts += (unsigned long long)dsaf_read_reg(dsaf_dev->io_base,node_num * 128U + 4140U);
  #line 2211 
  hw_stats->rx_pkts += (unsigned long long)dsaf_read_reg(dsaf_dev->io_base,node_num * 128U + 4144U);
  #line 2213 
  hw_stats->rx_pkt_id += (unsigned long long)dsaf_read_reg(dsaf_dev->io_base,node_num * 128U + 4152U);
  #line 2215 
  if ((int)is_ver1 != 0) 
                         #line 2215 
                         reg_tmp = 4156U; else 
                                               #line 2215 
                                               reg_tmp = 4132U;
  #line 2218 
  hw_stats->rx_pause_frame += (unsigned long long)dsaf_read_reg(dsaf_dev->io_base,node_num * 128U + reg_tmp);
  #line 2221 
  hw_stats->release_buf_num += (unsigned long long)dsaf_read_reg(dsaf_dev->io_base,node_num * 128U + 4172U);
  #line 2223 
  hw_stats->sbm_drop += (unsigned long long)dsaf_read_reg(dsaf_dev->io_base,node_num * 128U + 4176U);
  #line 2225 
  hw_stats->crc_false += (unsigned long long)dsaf_read_reg(dsaf_dev->io_base,node_num * 128U + 4180U);
  #line 2227 
  hw_stats->bp_drop += (unsigned long long)dsaf_read_reg(dsaf_dev->io_base,node_num * 128U + 4184U);
  #line 2229 
  hw_stats->rslt_drop += (unsigned long long)dsaf_read_reg(dsaf_dev->io_base,node_num * 128U + 4188U);
  #line 2231 
  hw_stats->local_addr_false += (unsigned long long)dsaf_read_reg(dsaf_dev->io_base,node_num * 128U + 4192U);
  #line 2234 
  hw_stats->vlan_drop += (unsigned long long)dsaf_read_reg(dsaf_dev->io_base,(node_num + 1664U) * 4U);
  #line 2236 
  hw_stats->stp_drop += (unsigned long long)dsaf_read_reg(dsaf_dev->io_base,(node_num + 1684U) * 4U);
  #line 2239 
  if (node_num <= 5U && ! is_ver1) {
    #line 2240 
    i = 0;
    #line 2240 
    while (i <= 7) {
      {
        #line 2241 
        reg_tmp = hns_dsaf_get_inode_prio_reg(i);
        #line 2243 
        hw_stats->rx_pfc[i] += (unsigned long long)dsaf_read_reg(dsaf_dev->io_base,node_num * 4U + reg_tmp);
        #line 2247 
        hw_stats->tx_pfc[i] += (unsigned long long)dsaf_read_reg(dsaf_dev->io_base,
                       (unsigned int)((i + 3712) * 4) + node_num * 240U);
      }
      #line 2240 
      i ++;
    }
  }
  #line 2251 
  hw_stats->tx_pkts += (unsigned long long)dsaf_read_reg(dsaf_dev->io_base,node_num * 144U + 12336U);
  #line 2251 
  return;
}

#line 2259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
void hns_dsaf_get_regs(struct dsaf_device *ddev, u32 port, void *data)
{
  #line 2262 
  u32 j;
  #line 2264 
  u32 reg_tmp;
  #line 2261 
  u32 i = 0U;
  #line 2263 
  u32 *p = (u32 *)data;
  #line 2265 
  bool is_ver1 = (_Bool)(ddev->dsaf_ver == 3552816U);
  #line 2268 
  *p = dsaf_read_reg(ddev->io_base,0U);
  #line 2269 
  *(p + 1U) = dsaf_read_reg(ddev->io_base,4U);
  #line 2270 
  *(p + 2U) = dsaf_read_reg(ddev->io_base,8U);
  #line 2271 
  *(p + 3U) = dsaf_read_reg(ddev->io_base,28U);
  #line 2272 
  *(p + 4U) = dsaf_read_reg(ddev->io_base,32U);
  #line 2273 
  *(p + 5U) = dsaf_read_reg(ddev->io_base,44U);
  #line 2274 
  *(p + 6U) = dsaf_read_reg(ddev->io_base,48U);
  #line 2275 
  *(p + 7U) = dsaf_read_reg(ddev->io_base,52U);
  #line 2276 
  *(p + 8U) = dsaf_read_reg(ddev->io_base,56U);
  #line 2278 
  *(p + 9U) = dsaf_read_reg(ddev->io_base,(port + 20U) * 4U);
  #line 2279 
  *(p + 10U) = dsaf_read_reg(ddev->io_base,(port + 28U) * 4U);
  #line 2280 
  *(p + 11U) = dsaf_read_reg(ddev->io_base,(port + 64U) * 4U);
  #line 2281 
  *(p + 12U) = dsaf_read_reg(ddev->io_base,(port + 88U) * 4U);
  #line 2282 
  *(p + 13U) = dsaf_read_reg(ddev->io_base,(port + 112U) * 4U);
  #line 2283 
  *(p + 14U) = dsaf_read_reg(ddev->io_base,(port + 64U) * 4U);
  #line 2284 
  *(p + 15U) = dsaf_read_reg(ddev->io_base,(port + 72U) * 4U);
  #line 2285 
  *(p + 16U) = dsaf_read_reg(ddev->io_base,(port + 80U) * 4U);
  #line 2286 
  *(p + 17U) = dsaf_read_reg(ddev->io_base,(port + 88U) * 4U);
  #line 2287 
  *(p + 18U) = dsaf_read_reg(ddev->io_base,(port + 96U) * 4U);
  #line 2288 
  *(p + 19U) = dsaf_read_reg(ddev->io_base,(port + 104U) * 4U);
  #line 2289 
  *(p + 20U) = dsaf_read_reg(ddev->io_base,(port + 112U) * 4U);
  #line 2290 
  *(p + 21U) = dsaf_read_reg(ddev->io_base,(port + 120U) * 4U);
  #line 2291 
  *(p + 22U) = dsaf_read_reg(ddev->io_base,(port + 128U) * 4U);
  #line 2292 
  *(p + 23U) = dsaf_read_reg(ddev->io_base,(port + 192U) * 4U);
  #line 2294 
  i = 0U;
  #line 2294 
  while (i <= 7U) {
    #line 2295 
    *(p + (unsigned long)(i + 24U)) = dsaf_read_reg(ddev->io_base,(i + 200U) * 4U);
    #line 2294 
    i ++;
  }
  #line 2298 
  *(p + 32U) = dsaf_read_reg(ddev->io_base,(port + 216U) * 4U);
  #line 2300 
  i = 0U;
  #line 2300 
  while (i <= 7U) {
    #line 2301 
    *(p + (unsigned long)(i + 33U)) = dsaf_read_reg(ddev->io_base,(i + 224U) * 4U);
    #line 2300 
    i ++;
  }
  #line 2304 
  i = 0U;
  #line 2304 
  while (i <= 128U) {
    #line 2305 
    *(p + (unsigned long)(i + 41U)) = dsaf_read_reg(ddev->io_base,(i + 256U) * 4U);
    #line 2304 
    i ++;
  }
  #line 2309 
  *(p + 170U) = dsaf_read_reg(ddev->io_base,4096U);
  #line 2311 
  *(p + 171U) = dsaf_read_reg(ddev->io_base,port * 128U + 4108U);
  #line 2314 
  i = 0U;
  #line 2314 
  while (i <= 2U) {
    #line 2315 
    j = i * 6U + port;
    #line 2316 
    *(p + (unsigned long)(i + 172U)) = dsaf_read_reg(ddev->io_base,j * 128U + 4120U);
    #line 2318 
    *(p + (unsigned long)(i + 175U)) = dsaf_read_reg(ddev->io_base,j * 128U + 4124U);
    #line 2320 
    *(p + (unsigned long)(i + 178U)) = dsaf_read_reg(ddev->io_base,j * 128U + 4128U);
    #line 2322 
    *(p + (unsigned long)(i + 181U)) = dsaf_read_reg(ddev->io_base,j * 128U + 4136U);
    #line 2324 
    *(p + (unsigned long)(i + 184U)) = dsaf_read_reg(ddev->io_base,j * 128U + 4140U);
    #line 2326 
    *(p + (unsigned long)(i + 187U)) = dsaf_read_reg(ddev->io_base,j * 128U + 4144U);
    #line 2328 
    *(p + (unsigned long)(i + 190U)) = dsaf_read_reg(ddev->io_base,j * 128U + 4152U);
    #line 2330 
    if ((int)is_ver1 != 0) 
                           #line 2330 
                           reg_tmp = 4156U; else 
                                                 #line 2330 
                                                 reg_tmp = 4132U;
    #line 2332 
    *(p + (unsigned long)(i + 193U)) = dsaf_read_reg(ddev->io_base,j * 128U + reg_tmp);
    #line 2333 
    *(p + (unsigned long)(i + 196U)) = dsaf_read_reg(ddev->io_base,j * 128U + 4172U);
    #line 2335 
    *(p + (unsigned long)(i + 199U)) = dsaf_read_reg(ddev->io_base,j * 128U + 4176U);
    #line 2337 
    *(p + (unsigned long)(i + 202U)) = dsaf_read_reg(ddev->io_base,j * 128U + 4180U);
    #line 2339 
    *(p + (unsigned long)(i + 205U)) = dsaf_read_reg(ddev->io_base,j * 128U + 4184U);
    #line 2341 
    *(p + (unsigned long)(i + 208U)) = dsaf_read_reg(ddev->io_base,j * 128U + 4188U);
    #line 2343 
    *(p + (unsigned long)(i + 211U)) = dsaf_read_reg(ddev->io_base,j * 128U + 4192U);
    #line 2345 
    *(p + (unsigned long)(i + 214U)) = dsaf_read_reg(ddev->io_base,j * 128U + 4200U);
    #line 2347 
    *(p + (unsigned long)(i + 217U)) = dsaf_read_reg(ddev->io_base,(j + 1600U) * 4U);
    #line 2349 
    *(p + (unsigned long)(i + 220U)) = dsaf_read_reg(ddev->io_base,(j + 1620U) * 4U);
    #line 2351 
    *(p + (unsigned long)(i + 223U)) = dsaf_read_reg(ddev->io_base,(j + 1664U) * 4U);
    #line 2353 
    *(p + (unsigned long)(i + 226U)) = dsaf_read_reg(ddev->io_base,(j + 1684U) * 4U);
    #line 2314 
    i ++;
  }
  #line 2357 
  *(p + 229U) = dsaf_read_reg(ddev->io_base,(port + 1728U) * 4U);
  #line 2359 
  i = 0U;
  #line 2359 
  while (i <= 2U) {
    #line 2360 
    j = i * 6U + port;
    #line 2361 
    *(p + (unsigned long)(i + 230U)) = dsaf_read_reg(ddev->io_base,(j + 1748U) * 4U);
    #line 2359 
    i ++;
  }
  #line 2365 
  *(p + 233U) = dsaf_read_reg(ddev->io_base,port * 128U + 4156U);
  #line 2369 
  i = 0U;
  #line 2369 
  while (1) {
    #line 2369 
    unsigned int tmp;
    #line 2369 
    if (ddev->dsaf_ver == 3552816U) 
                                    #line 2369 
                                    tmp = 3U; else 
                                                   #line 2369 
                                                   tmp = 1U;
    #line 2369 
    ;
    #line 2369 
    if (! (tmp > i)) 
                     #line 2369 
                     break;
    #line 2370 
    j = i * 6U + port;
    #line 2371 
    *(p + (unsigned long)(i + 234U)) = dsaf_read_reg(ddev->io_base,(j + 64U) * 128U);
    #line 2373 
    *(p + (unsigned long)(i + 237U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8196U);
    #line 2375 
    *(p + (unsigned long)(i + 240U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8200U);
    #line 2377 
    *(p + (unsigned long)(i + 243U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8204U);
    #line 2379 
    *(p + (unsigned long)(i + 246U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8208U);
    #line 2381 
    *(p + (unsigned long)(i + 249U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8212U);
    #line 2383 
    *(p + (unsigned long)(i + 252U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8216U);
    #line 2385 
    *(p + (unsigned long)(i + 255U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8220U);
    #line 2387 
    *(p + (unsigned long)(i + 258U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8224U);
    #line 2389 
    *(p + (unsigned long)(i + 261U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8228U);
    #line 2391 
    *(p + (unsigned long)(i + 264U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8232U);
    #line 2393 
    *(p + (unsigned long)(i + 267U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8236U);
    #line 2395 
    *(p + (unsigned long)(i + 270U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8240U);
    #line 2397 
    *(p + (unsigned long)(i + 273U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8244U);
    #line 2399 
    *(p + (unsigned long)(i + 276U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8248U);
    #line 2401 
    *(p + (unsigned long)(i + 279U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8252U);
    #line 2403 
    *(p + (unsigned long)(i + 282U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8256U);
    #line 2405 
    *(p + (unsigned long)(i + 285U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8260U);
    #line 2407 
    *(p + (unsigned long)(i + 288U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8264U);
    #line 2409 
    *(p + (unsigned long)(i + 291U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8268U);
    #line 2411 
    *(p + (unsigned long)(i + 294U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8272U);
    #line 2413 
    *(p + (unsigned long)(i + 297U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8276U);
    #line 2415 
    *(p + (unsigned long)(i + 300U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8280U);
    #line 2417 
    *(p + (unsigned long)(i + 303U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8284U);
    #line 2419 
    *(p + (unsigned long)(i + 306U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8288U);
    #line 2421 
    *(p + (unsigned long)(i + 309U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8296U);
    #line 2423 
    *(p + (unsigned long)(i + 312U)) = dsaf_read_reg(ddev->io_base,j * 128U + 8300U);
    #line 2369 
    i ++;
  }
  #line 2428 
  i = 0U;
  #line 2428 
  while (i <= 7U) {
    #line 2429 
    *(p + (unsigned long)(i + 315U)) = dsaf_read_reg(ddev->io_base,i * 144U + 12288U);
    #line 2431 
    *(p + (unsigned long)(i + 323U)) = dsaf_read_reg(ddev->io_base,i * 144U + 12292U);
    #line 2433 
    *(p + (unsigned long)(i + 331U)) = dsaf_read_reg(ddev->io_base,i * 144U + 12296U);
    #line 2435 
    *(p + (unsigned long)(i + 339U)) = dsaf_read_reg(ddev->io_base,i * 144U + 12300U);
    #line 2437 
    *(p + (unsigned long)(i + 347U)) = dsaf_read_reg(ddev->io_base,i * 144U + 12304U);
    #line 2439 
    *(p + (unsigned long)(i + 355U)) = dsaf_read_reg(ddev->io_base,i * 144U + 12308U);
    #line 2428 
    i ++;
  }
  #line 2443 
  *(p + 363U) = dsaf_read_reg(ddev->io_base,port * 144U + 12312U);
  #line 2444 
  *(p + 364U) = dsaf_read_reg(ddev->io_base,port * 144U + 12316U);
  #line 2445 
  *(p + 365U) = dsaf_read_reg(ddev->io_base,port * 144U + 12320U);
  #line 2447 
  i = 0U;
  #line 2447 
  while (i <= 2U) {
    #line 2448 
    j = i * 6U + port;
    #line 2449 
    *(p + (unsigned long)(i + 366U)) = dsaf_read_reg(ddev->io_base,j * 144U + 12324U);
    #line 2451 
    *(p + (unsigned long)(i + 369U)) = dsaf_read_reg(ddev->io_base,j * 144U + 12328U);
    #line 2453 
    *(p + (unsigned long)(i + 372U)) = dsaf_read_reg(ddev->io_base,j * 144U + 12332U);
    #line 2455 
    *(p + (unsigned long)(i + 375U)) = dsaf_read_reg(ddev->io_base,j * 144U + 12336U);
    #line 2457 
    *(p + (unsigned long)(i + 378U)) = dsaf_read_reg(ddev->io_base,j * 144U + 12340U);
    #line 2459 
    *(p + (unsigned long)(i + 381U)) = dsaf_read_reg(ddev->io_base,j * 144U + 12344U);
    #line 2461 
    *(p + (unsigned long)(i + 384U)) = dsaf_read_reg(ddev->io_base,j * 144U + 12348U);
    #line 2463 
    *(p + (unsigned long)(i + 387U)) = dsaf_read_reg(ddev->io_base,j * 144U + 12352U);
    #line 2465 
    *(p + (unsigned long)(i + 390U)) = dsaf_read_reg(ddev->io_base,j * 144U + 12356U);
    #line 2467 
    *(p + (unsigned long)(i + 393U)) = dsaf_read_reg(ddev->io_base,j * 144U + 12360U);
    #line 2447 
    i ++;
  }
  #line 2471 
  *(p + 396U) = dsaf_read_reg(ddev->io_base,port * 144U + 12364U);
  #line 2473 
  *(p + 397U) = dsaf_read_reg(ddev->io_base,port * 144U + 12368U);
  #line 2475 
  *(p + 398U) = dsaf_read_reg(ddev->io_base,port * 144U + 12372U);
  #line 2477 
  *(p + 399U) = dsaf_read_reg(ddev->io_base,port * 144U + 12376U);
  #line 2479 
  *(p + 400U) = dsaf_read_reg(ddev->io_base,port * 144U + 12380U);
  #line 2481 
  *(p + 401U) = dsaf_read_reg(ddev->io_base,port * 144U + 12384U);
  #line 2483 
  *(p + 402U) = dsaf_read_reg(ddev->io_base,port * 144U + 12388U);
  #line 2485 
  *(p + 403U) = dsaf_read_reg(ddev->io_base,port * 144U + 12392U);
  #line 2487 
  *(p + 404U) = dsaf_read_reg(ddev->io_base,port * 144U + 12396U);
  #line 2489 
  *(p + 405U) = dsaf_read_reg(ddev->io_base,port * 144U + 12400U);
  #line 2491 
  *(p + 406U) = dsaf_read_reg(ddev->io_base,port * 144U + 12404U);
  #line 2493 
  *(p + 407U) = dsaf_read_reg(ddev->io_base,port * 144U + 12408U);
  #line 2495 
  *(p + 408U) = dsaf_read_reg(ddev->io_base,port * 144U + 12412U);
  #line 2499 
  i = 0U;
  #line 2499 
  while (i <= 2U) {
    #line 2500 
    j = (i * 6U + port) * 144U;
    #line 2501 
    *(p + (unsigned long)(i + 409U)) = dsaf_read_reg(ddev->io_base,j + 16388U);
    #line 2503 
    *(p + (unsigned long)(i + 412U)) = dsaf_read_reg(ddev->io_base,j + 16392U);
    #line 2505 
    *(p + (unsigned long)(i + 415U)) = dsaf_read_reg(ddev->io_base,j + 16396U);
    #line 2506 
    *(p + (unsigned long)(i + 418U)) = dsaf_read_reg(ddev->io_base,j + 16400U);
    #line 2508 
    *(p + (unsigned long)(i + 421U)) = dsaf_read_reg(ddev->io_base,j + 16404U);
    #line 2510 
    *(p + (unsigned long)(i + 424U)) = dsaf_read_reg(ddev->io_base,j + 16408U);
    #line 2511 
    *(p + (unsigned long)(i + 427U)) = dsaf_read_reg(ddev->io_base,j + 16412U);
    #line 2512 
    *(p + (unsigned long)(i + 430U)) = dsaf_read_reg(ddev->io_base,j + 16420U);
    #line 2514 
    *(p + (unsigned long)(i + 433U)) = dsaf_read_reg(ddev->io_base,j + 16424U);
    #line 2516 
    *(p + (unsigned long)(i + 436U)) = dsaf_read_reg(ddev->io_base,j + 16428U);
    #line 2518 
    *(p + (unsigned long)(i + 439U)) = dsaf_read_reg(ddev->io_base,j + 16432U);
    #line 2520 
    *(p + (unsigned long)(i + 442U)) = dsaf_read_reg(ddev->io_base,j + 16436U);
    #line 2499 
    i ++;
  }
  #line 2525 
  *(p + 445U) = dsaf_read_reg(ddev->io_base,20480U);
  #line 2526 
  *(p + 446U) = dsaf_read_reg(ddev->io_base,20484U);
  #line 2527 
  *(p + 447U) = dsaf_read_reg(ddev->io_base,20488U);
  #line 2528 
  *(p + 448U) = dsaf_read_reg(ddev->io_base,20736U);
  #line 2529 
  *(p + 449U) = dsaf_read_reg(ddev->io_base,20492U);
  #line 2530 
  *(p + 450U) = dsaf_read_reg(ddev->io_base,20496U);
  #line 2531 
  *(p + 451U) = dsaf_read_reg(ddev->io_base,20500U);
  #line 2532 
  *(p + 452U) = dsaf_read_reg(ddev->io_base,20504U);
  #line 2533 
  *(p + 453U) = dsaf_read_reg(ddev->io_base,20508U);
  #line 2534 
  *(p + 454U) = dsaf_read_reg(ddev->io_base,20512U);
  #line 2535 
  *(p + 455U) = dsaf_read_reg(ddev->io_base,20516U);
  #line 2536 
  *(p + 456U) = dsaf_read_reg(ddev->io_base,20520U);
  #line 2537 
  *(p + 457U) = dsaf_read_reg(ddev->io_base,20524U);
  #line 2538 
  *(p + 458U) = dsaf_read_reg(ddev->io_base,20528U);
  #line 2539 
  *(p + 459U) = dsaf_read_reg(ddev->io_base,20532U);
  #line 2540 
  *(p + 460U) = dsaf_read_reg(ddev->io_base,20536U);
  #line 2541 
  *(p + 461U) = dsaf_read_reg(ddev->io_base,20540U);
  #line 2542 
  *(p + 462U) = dsaf_read_reg(ddev->io_base,20544U);
  #line 2543 
  *(p + 463U) = dsaf_read_reg(ddev->io_base,20548U);
  #line 2544 
  *(p + 464U) = dsaf_read_reg(ddev->io_base,20552U);
  #line 2545 
  *(p + 465U) = dsaf_read_reg(ddev->io_base,20556U);
  #line 2546 
  *(p + 466U) = dsaf_read_reg(ddev->io_base,20560U);
  #line 2547 
  *(p + 467U) = dsaf_read_reg(ddev->io_base,20564U);
  #line 2549 
  i = 0U;
  #line 2549 
  while (i <= 7U) {
    #line 2550 
    j = i * 8U;
    #line 2551 
    *(p + (unsigned long)((i + 234U) * 2U)) = dsaf_read_reg(ddev->io_base,j + 20568U);
    #line 2553 
    *(p + (unsigned long)(i * 2U + 469U)) = dsaf_read_reg(ddev->io_base,j + 20572U);
    #line 2549 
    i ++;
  }
  #line 2557 
  *(p + 484U) = dsaf_read_reg(ddev->io_base,20740U);
  #line 2558 
  *(p + 485U) = dsaf_read_reg(ddev->io_base,20632U);
  #line 2559 
  *(p + 486U) = dsaf_read_reg(ddev->io_base,20636U);
  #line 2560 
  *(p + 487U) = dsaf_read_reg(ddev->io_base,20640U);
  #line 2561 
  *(p + 488U) = dsaf_read_reg(ddev->io_base,20644U);
  #line 2562 
  *(p + 489U) = dsaf_read_reg(ddev->io_base,20648U);
  #line 2563 
  *(p + 490U) = dsaf_read_reg(ddev->io_base,20652U);
  #line 2564 
  *(p + 491U) = dsaf_read_reg(ddev->io_base,20656U);
  #line 2565 
  *(p + 492U) = dsaf_read_reg(ddev->io_base,20744U);
  #line 2566 
  *(p + 493U) = dsaf_read_reg(ddev->io_base,20672U);
  #line 2567 
  *(p + 494U) = dsaf_read_reg(ddev->io_base,20704U);
  #line 2568 
  *(p + 495U) = dsaf_read_reg(ddev->io_base,20748U);
  #line 2571 
  *(p + 496U) = dsaf_read_reg(ddev->io_base,(port + 6144U) * 4U);
  #line 2572 
  *(p + 497U) = dsaf_read_reg(ddev->io_base,(port + 6152U) * 4U);
  #line 2573 
  *(p + 498U) = dsaf_read_reg(ddev->io_base,(port + 6160U) * 4U);
  #line 2574 
  *(p + 499U) = dsaf_read_reg(ddev->io_base,(port + 6176U) * 4U);
  #line 2576 
  *(p + 500U) = dsaf_read_reg(ddev->io_base,(port + 6184U) * 4U);
  #line 2577 
  *(p + 501U) = dsaf_read_reg(ddev->io_base,(port + 6192U) * 4U);
  #line 2579 
  if (! is_ver1) 
                 #line 2580 
                 *(p + 502U) = dsaf_read_reg(ddev->io_base,(port + 144U) * 4U);
  #line 2583 
  i = 503U;
  #line 2583 
  while (i <= 503U) {
    #line 2584 
    *(p + (unsigned long)i) = 3722304989U;
    #line 2583 
    i ++;
  }
  #line 2585 
  return;
}

#line 2587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static char *hns_dsaf_get_node_stats_strings(char *data, int node, struct dsaf_device *dsaf_dev)
{
  #line 2591 
  int i;
  #line 2590 
  char *buff = data;
  #line 2592 
  bool is_ver1 = (_Bool)(dsaf_dev->dsaf_ver == 3552816U);
  #line 2594 
  snprintf(buff,32UL,(char *)"innod%d_pad_drop_pkts",node);
  #line 2595 
  buff += 32U;
  #line 2596 
  snprintf(buff,32UL,(char *)"innod%d_manage_pkts",node);
  #line 2597 
  buff += 32U;
  #line 2598 
  snprintf(buff,32UL,(char *)"innod%d_rx_pkts",node);
  #line 2599 
  buff += 32U;
  #line 2600 
  snprintf(buff,32UL,(char *)"innod%d_rx_pkt_id",node);
  #line 2601 
  buff += 32U;
  #line 2602 
  snprintf(buff,32UL,(char *)"innod%d_rx_pause_frame",node);
  #line 2603 
  buff += 32U;
  #line 2604 
  snprintf(buff,32UL,(char *)"innod%d_release_buf_num",node);
  #line 2605 
  buff += 32U;
  #line 2606 
  snprintf(buff,32UL,(char *)"innod%d_sbm_drop_pkts",node);
  #line 2607 
  buff += 32U;
  #line 2608 
  snprintf(buff,32UL,(char *)"innod%d_crc_false_pkts",node);
  #line 2609 
  buff += 32U;
  #line 2610 
  snprintf(buff,32UL,(char *)"innod%d_bp_drop_pkts",node);
  #line 2611 
  buff += 32U;
  #line 2612 
  snprintf(buff,32UL,(char *)"innod%d_lookup_rslt_drop_pkts",node);
  #line 2613 
  buff += 32U;
  #line 2614 
  snprintf(buff,32UL,(char *)"innod%d_local_rslt_fail_pkts",node);
  #line 2615 
  buff += 32U;
  #line 2616 
  snprintf(buff,32UL,(char *)"innod%d_vlan_drop_pkts",node);
  #line 2617 
  buff += 32U;
  #line 2618 
  snprintf(buff,32UL,(char *)"innod%d_stp_drop_pkts",node);
  #line 2619 
  buff += 32U;
  #line 2620 
  if (node <= 5 && ! is_ver1) {
    #line 2621 
    i = 0;
    #line 2621 
    while (i <= 7) {
      #line 2622 
      snprintf(buff,32UL,(char *)"inod%d_pfc_prio%d_pkts",node,i);
      #line 2625 
      snprintf(buff + 256U,32UL,(char *)"onod%d_pfc_prio%d_pkts",node,i);
      #line 2628 
      buff += 32U;
      #line 2621 
      i ++;
    }
    #line 2630 
    buff += 256U;
  }
  #line 2632 
  snprintf(buff,32UL,(char *)"onnod%d_tx_pkts",node);
  #line 2633 
  buff += 32U;
  #line 2635 
  return buff;
}

#line 2638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static u64 *hns_dsaf_get_node_stats(struct dsaf_device *ddev, u64 *data, int node_num)
{
  #line 2642 
  int i;
  #line 2641 
  u64 *p = data;
  #line 2643 
  struct dsaf_hw_stats *hw_stats = & ddev->hw_stats[node_num];
  #line 2644 
  bool is_ver1 = (_Bool)(ddev->dsaf_ver == 3552816U);
  #line 2646 
  *p = hw_stats->pad_drop;
  #line 2647 
  *(p + 1U) = hw_stats->man_pkts;
  #line 2648 
  *(p + 2U) = hw_stats->rx_pkts;
  #line 2649 
  *(p + 3U) = hw_stats->rx_pkt_id;
  #line 2650 
  *(p + 4U) = hw_stats->rx_pause_frame;
  #line 2651 
  *(p + 5U) = hw_stats->release_buf_num;
  #line 2652 
  *(p + 6U) = hw_stats->sbm_drop;
  #line 2653 
  *(p + 7U) = hw_stats->crc_false;
  #line 2654 
  *(p + 8U) = hw_stats->bp_drop;
  #line 2655 
  *(p + 9U) = hw_stats->rslt_drop;
  #line 2656 
  *(p + 10U) = hw_stats->local_addr_false;
  #line 2657 
  *(p + 11U) = hw_stats->vlan_drop;
  #line 2658 
  *(p + 12U) = hw_stats->stp_drop;
  #line 2659 
  if (node_num <= 5 && ! is_ver1) {
    #line 2660 
    i = 0;
    #line 2660 
    while (i <= 7) {
      #line 2661 
      *(p + (unsigned long)(i + 13)) = hw_stats->rx_pfc[i];
      #line 2662 
      *(p + ((unsigned long)(i + 13) + (unsigned long)8U)) = hw_stats->tx_pfc[i];
      #line 2660 
      i ++;
    }
    #line 2664 
    *(p + 29U) = hw_stats->tx_pkts;
    #line 2665 
    return p + 30U;
  }
  #line 2668 
  *(p + 13U) = hw_stats->tx_pkts;
  #line 2669 
  return p + 14U;
}

#line 2678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
void hns_dsaf_get_stats(struct dsaf_device *ddev, u64 *data, int port)
{
  #line 2680 
  u64 *p = data;
  #line 2681 
  int node_num = port;
  #line 2684 
  p = hns_dsaf_get_node_stats(ddev,p,node_num);
  #line 2687 
  node_num = port + 6;
  #line 2688 
  hns_dsaf_get_node_stats(ddev,p,node_num);
  #line 2689 
  return;
}

#line 2696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
int hns_dsaf_get_sset_count(struct dsaf_device *dsaf_dev, int stringset)
{
  #line 2698 
  bool is_ver1 = (_Bool)(dsaf_dev->dsaf_ver == 3552816U);
  #line 2700 
  if (stringset == 1) 
    #line 2701 
    if ((int)is_ver1 != 0) 
                           #line 2702 
                           return 28; else 
                                           #line 2704 
                                           return 44;
  #line 2706 
  return 0;
}

#line 2715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
void hns_dsaf_get_strings(int stringset, u8 *data, int port, struct dsaf_device *dsaf_dev)
{
  #line 2718 
  char *buff = (char *)data;
  #line 2719 
  int node = port;
  #line 2721 
  if (stringset != 1) 
                      #line 2722 
                      return;
  #line 2725 
  buff = hns_dsaf_get_node_stats_strings(buff,node,dsaf_dev);
  #line 2728 
  node = port + 6;
  #line 2729 
  hns_dsaf_get_node_stats_strings(buff,node,dsaf_dev);
  #line 2730 
  return;
}

#line 2736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
int hns_dsaf_get_regs_count(void)
{
  #line 2738 
  return 504;
}

#line 2741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static int hns_dsaf_get_port_id(u8 port)
{
  #line 2743 
  if ((unsigned int)port <= 5U) 
                                #line 2744 
                                return (int)port;
  #line 2746 
  if ((unsigned int)port > 126U) 
                                 #line 2747 
                                 return (int)port + -121;
  #line 2749 
  return -22;
}

#line 2752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void set_promisc_tcam_enable(struct dsaf_device *dsaf_dev, u32 port)
{
  #line 2760 
  struct dsaf_drv_mac_single_dest_entry mask_entry;
  #line 2761 
  struct dsaf_drv_tbl_tcam_key temp_key;
  #line 2761 
  struct dsaf_drv_tbl_tcam_key mask_key;
  #line 2762 
  struct dsaf_drv_soft_mac_tbl *soft_mac_entry;
  #line 2764 
  struct dsaf_drv_tbl_tcam_key mac_key;
  #line 2765 
  struct hns_mac_cb *mac_cb;
  #line 2767 
  u8 port_num;
  #line 2768 
  int mskid;
  #line 2754 
  struct dsaf_tbl_tcam_ucast_cfg tbl_tcam_ucast = {.tbl_ucast_old_en = 0U, .tbl_ucast_item_vld = 1U, .tbl_ucast_mac_discard = 0U, .tbl_ucast_dvc = 0U, .tbl_ucast_out_port = 128U};
  #line 2755 
  struct dsaf_tbl_tcam_data tbl_tcam_data_mc = {.tbl_tcam_data_high = 16777216U, .tbl_tcam_data_low = port};
  #line 2756 
  struct dsaf_tbl_tcam_data tbl_tcam_mask_uc = {.tbl_tcam_data_high = 16777216U, .tbl_tcam_data_low = 15U};
  #line 2757 
  struct dsaf_tbl_tcam_mcast_cfg tbl_tcam_mcast = {.tbl_mcast_old_en = (unsigned char)0U, .tbl_mcast_item_vld = (unsigned char)0U, .tbl_mcast_port_msk = {0U}};
  #line 2758 
  struct dsaf_drv_priv *priv = hns_dsaf_dev_priv(dsaf_dev);
  #line 2759 
  struct dsaf_tbl_tcam_data tbl_tcam_data_uc = {.tbl_tcam_data_high = 0U, .tbl_tcam_data_low = port};
  #line 2763 
  u16 entry_index = (unsigned short)65535U;
  #line 2766 
  u8 addr[6U] = {(unsigned char)0U};
  #line 2771 
  hns_dsaf_set_mac_key(dsaf_dev,& mac_key,(unsigned short)0,(unsigned char)((int)((unsigned char)port)),(u8 *)(& addr));
  #line 2772 
  entry_index = hns_dsaf_find_soft_mac_entry(dsaf_dev,& mac_key);
  #line 2773 
  if ((unsigned int)entry_index != 65535U) 
                                           #line 2774 
                                           return;
  #line 2778 
  entry_index = hns_dsaf_find_empty_mac_entry_reverse(dsaf_dev);
  #line 2779 
  if ((unsigned int)entry_index == 65535U) {
    #line 2780 
    _dev_err(dsaf_dev->dev,(char *)"enable uc promisc failed (port:%#x)\n",port);
    #line 2783 
    return;
  }
  #line 2786 
  mac_cb = dsaf_dev->mac_cb[port];
  #line 2787 
  hns_mac_get_inner_port_num(mac_cb,(unsigned char)0,& port_num);
  #line 2788 
  tbl_tcam_ucast.tbl_ucast_out_port = (unsigned int)port_num;
  #line 2791 
  hns_dsaf_tcam_uc_cfg_vague(dsaf_dev,(unsigned int)entry_index,& tbl_tcam_data_uc,& tbl_tcam_mask_uc,& tbl_tcam_ucast);
  #line 2795 
  soft_mac_entry = priv->soft_mac_tbl;
  #line 2796 
  soft_mac_entry += (unsigned long)entry_index;
  #line 2797 
  soft_mac_entry->index = entry_index;
  #line 2798 
  soft_mac_entry->tcam_key.high.val = mac_key.high.val;
  #line 2799 
  soft_mac_entry->tcam_key.low.val = mac_key.low.val;
  #line 2801 
  soft_mac_entry = priv->soft_mac_tbl;
  #line 2804 
  entry_index = hns_dsaf_find_empty_mac_entry_reverse(dsaf_dev);
  #line 2805 
  if ((unsigned int)entry_index == 65535U) {
    #line 2806 
    _dev_err(dsaf_dev->dev,(char *)"enable mc promisc failed (port:%#x)\n",port);
    #line 2809 
    return;
  }
  #line 2812 
  memset((void *)(& mask_entry),0,16UL);
  #line 2813 
  memset((void *)(& mask_key),0,8UL);
  #line 2814 
  memset((void *)(& temp_key),0,8UL);
  #line 2815 
  mask_entry.addr[0] = (unsigned char)1U;
  #line 2816 
  hns_dsaf_set_mac_key(dsaf_dev,& mask_key,(unsigned short)((int)mask_entry.in_vlan_id),(unsigned char)15,(u8 *)(& mask_entry.addr));
  #line 2818 
  tbl_tcam_mcast.tbl_mcast_item_vld = (unsigned char)1U;
  #line 2819 
  tbl_tcam_mcast.tbl_mcast_old_en = (unsigned char)0U;
  #line 2822 
  mskid = hns_dsaf_get_port_id((unsigned char)((int)((unsigned char)port)));
  #line 2823 
  if (mskid == -22) {
    #line 2824 
    _dev_err(dsaf_dev->dev,(char *)"%s,pnum(%d)error,key(%#x:%#x)\n",(char *)(& dsaf_dev->ae_dev.name),port,mask_key.high.val,mask_key.low.val);
    #line 2827 
    return;
  }
  #line 2829 
  tbl_tcam_mcast.tbl_mcast_port_msk[mskid / 32] &= ~ ((unsigned int)(1ULL << (mskid & 31)));
  #line 2829 
  tbl_tcam_mcast.tbl_mcast_port_msk[mskid / 32] |= (unsigned int)(1 << (mskid & 31)) & (unsigned int)(1ULL << (mskid & 31));
  #line 2833 
  mskid = hns_dsaf_get_port_id((unsigned char)((int)port_num));
  #line 2834 
  if (mskid == -22) {
    #line 2835 
    _dev_err(dsaf_dev->dev,(char *)"%s, pool bit map pnum(%d)error,key(%#x:%#x)\n",(char *)(& dsaf_dev->ae_dev.name),(int)port_num,mask_key.high.val,mask_key.low.val);
    #line 2839 
    return;
  }
  #line 2841 
  tbl_tcam_mcast.tbl_mcast_port_msk[mskid / 32] &= ~ ((unsigned int)(1ULL << (mskid & 31)));
  #line 2841 
  tbl_tcam_mcast.tbl_mcast_port_msk[mskid / 32] |= (unsigned int)(1 << (mskid & 31)) & (unsigned int)(1ULL << (mskid & 31));
  #line 2844 
  memcpy((void *)(& temp_key),(void *)(& mask_key),8UL);
  #line 2845 
  hns_dsaf_tcam_mc_cfg_vague(dsaf_dev,(unsigned int)entry_index,& tbl_tcam_data_mc,(struct dsaf_tbl_tcam_data *)(& mask_key),& tbl_tcam_mcast);
  #line 2850 
  soft_mac_entry += (unsigned long)entry_index;
  #line 2851 
  soft_mac_entry->index = entry_index;
  #line 2852 
  soft_mac_entry->tcam_key.high.val = temp_key.high.val;
  #line 2853 
  soft_mac_entry->tcam_key.low.val = temp_key.low.val;
  #line 2854 
  return;
}

#line 2856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void set_promisc_tcam_disable(struct dsaf_device *dsaf_dev, u32 port)
{
  #line 2864 
  struct dsaf_drv_soft_mac_tbl *soft_mac_entry;
  #line 2866 
  struct dsaf_drv_tbl_tcam_key mac_key;
  #line 2858 
  struct dsaf_tbl_tcam_data tbl_tcam_data_mc = {.tbl_tcam_data_high = 16777216U, .tbl_tcam_data_low = port};
  #line 2859 
  struct dsaf_tbl_tcam_ucast_cfg tbl_tcam_ucast = {.tbl_ucast_old_en = 0U, .tbl_ucast_item_vld = 0U, .tbl_ucast_mac_discard = 0U, .tbl_ucast_dvc = 0U, .tbl_ucast_out_port = 0U};
  #line 2860 
  struct dsaf_tbl_tcam_mcast_cfg tbl_tcam_mcast = {.tbl_mcast_old_en = (unsigned char)0U, .tbl_mcast_item_vld = (unsigned char)0U, .tbl_mcast_port_msk = {0U}};
  #line 2861 
  struct dsaf_drv_priv *priv = hns_dsaf_dev_priv(dsaf_dev);
  #line 2862 
  struct dsaf_tbl_tcam_data tbl_tcam_data_uc = {.tbl_tcam_data_high = 0U, .tbl_tcam_data_low = 0U};
  #line 2863 
  struct dsaf_tbl_tcam_data tbl_tcam_mask = {.tbl_tcam_data_high = 0U, .tbl_tcam_data_low = 0U};
  #line 2865 
  u16 entry_index = (unsigned short)65535U;
  #line 2867 
  u8 addr[6U] = {(unsigned char)0U};
  #line 2871 
  hns_dsaf_set_mac_key(dsaf_dev,& mac_key,(unsigned short)0,(unsigned char)((int)((unsigned char)port)),(u8 *)(& addr));
  #line 2872 
  entry_index = hns_dsaf_find_soft_mac_entry(dsaf_dev,& mac_key);
  #line 2874 
  if ((unsigned int)entry_index == 65535U) 
                                           #line 2875 
                                           return;
  #line 2878 
  hns_dsaf_tcam_uc_cfg_vague(dsaf_dev,(unsigned int)entry_index,& tbl_tcam_data_uc,& tbl_tcam_mask,& tbl_tcam_ucast);
  #line 2881 
  soft_mac_entry = priv->soft_mac_tbl;
  #line 2882 
  soft_mac_entry += (unsigned long)entry_index;
  #line 2883 
  soft_mac_entry->index = (unsigned short)65535U;
  #line 2885 
  soft_mac_entry = priv->soft_mac_tbl;
  #line 2888 
  addr[0] = (unsigned char)1U;
  #line 2889 
  memset((void *)(& mac_key),0,8UL);
  #line 2890 
  hns_dsaf_set_mac_key(dsaf_dev,& mac_key,(unsigned short)0,(unsigned char)((int)((unsigned char)port)),(u8 *)(& addr));
  #line 2891 
  entry_index = hns_dsaf_find_soft_mac_entry(dsaf_dev,& mac_key);
  #line 2893 
  if ((unsigned int)entry_index == 65535U) 
                                           #line 2894 
                                           return;
  #line 2897 
  hns_dsaf_tcam_mc_cfg_vague(dsaf_dev,(unsigned int)entry_index,& tbl_tcam_data_mc,& tbl_tcam_mask,& tbl_tcam_mcast);
  #line 2900 
  soft_mac_entry += (unsigned long)entry_index;
  #line 2901 
  soft_mac_entry->index = (unsigned short)65535U;
  #line 2902 
  return;
}

#line 2905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
void hns_dsaf_set_promisc_tcam(struct dsaf_device *dsaf_dev, u32 port, bool enable)
{
  #line 2908 
  if ((int)enable != 0) 
                        #line 2909 
                        set_promisc_tcam_enable(dsaf_dev,port); else 
                                                                  #line 2911 
                                                                  set_promisc_tcam_disable(dsaf_dev,port);
  #line 2912 
  return;
}

#line 2914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
int hns_dsaf_wait_pkt_clean(struct dsaf_device *dsaf_dev, int port)
{
  #line 2916 
  u32 val;
  #line 2916 
  u32 val_tmp;
  #line 2917 
  int wait_cnt;
  #line 2919 
  if (port > 5) 
                #line 2920 
                return 0;
  #line 2922 
  wait_cnt = 0;
  #line 2923 
  while (1) {
    #line 2923 
    int tmp;
    #line 2923 
    tmp = wait_cnt;
    #line 2923 
    wait_cnt ++;
    #line 2923 
    ;
    #line 2923 
    if (! (tmp <= 9999)) 
                         #line 2923 
                         break;
    #line 2924 
    val = dsaf_read_reg(dsaf_dev->io_base,(unsigned int)((port + 6) * 64 + 16396));
    #line 2926 
    val_tmp = dsaf_read_reg(dsaf_dev->io_base,(unsigned int)((port + 6) * 64 + 16400));
    #line 2928 
    if (val == val_tmp) 
                        #line 2929 
                        break;
    #line 2931 
    usleep_range(100UL,200UL);
  }
  #line 2934 
  if (wait_cnt > 9999) {
    #line 2935 
    _dev_err(dsaf_dev->dev,(char *)"hns dsaf clean wait timeout(%u - %u).\n",val,val_tmp);
    #line 2937 
    return -16;
  }
  #line 2940 
  return 0;
}

#line 2948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static int hns_dsaf_probe(struct platform_device *pdev)
{
  #line 2950 
  struct dsaf_device *dsaf_dev;
  #line 2951 
  int ret;
  #line 2953 
  dsaf_dev = hns_dsaf_alloc_dev(& pdev->dev,8UL);
  #line 2954 
  if ((int)IS_ERR((void *)dsaf_dev) != 0) {
    #line 2955 
    ret = (int)PTR_ERR((void *)dsaf_dev);
    #line 2956 
    _dev_err(& pdev->dev,(char *)"dsaf_probe dsaf_alloc_dev failed, ret = %#x!\n",ret);
    #line 2958 
    return ret;
  }
  #line 2961 
  ret = hns_dsaf_get_cfg(dsaf_dev);
  #line 2962 
  if (ret != 0) 
                #line 2963 
                goto free_dev;
  #line 2965 
  ret = hns_dsaf_init(dsaf_dev);
  #line 2966 
  if (ret != 0) 
                #line 2967 
                goto free_dev;
  #line 2969 
  ret = hns_mac_init(dsaf_dev);
  #line 2970 
  if (ret != 0) 
                #line 2971 
                goto uninit_dsaf;
  #line 2973 
  ret = hns_ppe_init(dsaf_dev);
  #line 2974 
  if (ret != 0) 
                #line 2975 
                goto uninit_mac;
  #line 2977 
  ret = hns_dsaf_ae_init(dsaf_dev);
  #line 2978 
  if (ret != 0) 
                #line 2979 
                goto uninit_ppe;
  #line 2981 
  return 0;
  #line 2983 
  uninit_ppe: 
              #line 2983 
  ;
  #line 2984 
  hns_ppe_uninit(dsaf_dev);
  #line 2986 
  uninit_mac: 
              #line 2986 
  ;
  #line 2987 
  hns_mac_uninit(dsaf_dev);
  #line 2989 
  uninit_dsaf: 
               #line 2989 
  ;
  #line 2990 
  hns_dsaf_free(dsaf_dev);
  #line 2992 
  free_dev: 
            #line 2992 
  ;
  #line 2993 
  hns_dsaf_free_dev(dsaf_dev);
  #line 2995 
  return ret;
}

#line 3002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static int hns_dsaf_remove(struct platform_device *pdev)
{
  #line 3004 
  struct dsaf_device *dsaf_dev = dev_get_drvdata(& pdev->dev);
  #line 3006 
  hns_dsaf_ae_uninit(dsaf_dev);
  #line 3008 
  hns_ppe_uninit(dsaf_dev);
  #line 3010 
  hns_mac_uninit(dsaf_dev);
  #line 3012 
  hns_dsaf_free(dsaf_dev);
  #line 3014 
  hns_dsaf_free_dev(dsaf_dev);
  #line 3016 
  return 0;
}

#line 3019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static struct of_device_id g_dsaf_match[3U] = {{.compatible = {(char)'h', (char)'i', (char)'s', (char)'i', (char)'l', (char)'i', (char)'c', (char)'o', (char)'n', (char)',', (char)'h', (char)'n', (char)'s', (char)'-', (char)'d', (char)'s', (char)'a', (char)'f', (char)'-', (char)'v', (char)'1'}}, {.compatible = {(char)'h', (char)'i', (char)'s', (char)'i', (char)'l', (char)'i', (char)'c', (char)'o', (char)'n', (char)',', (char)'h', (char)'n', (char)'s', (char)'-', (char)'d', (char)'s', (char)'a', (char)'f', (char)'-', (char)'v', (char)'2'}}};
#line 3024  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
struct of_device_id __mod_of__g_dsaf_match_device_table[3U];
#line 3026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static struct platform_driver g_dsaf_driver = {.probe = & hns_dsaf_probe, .remove = & hns_dsaf_remove, .driver = {.name = (char *)"hns_dsaf", .of_match_table = (struct of_device_id *)(& g_dsaf_match), .acpi_match_table = (struct acpi_device_id *)(& hns_dsaf_acpi_match)}};
#line 3036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static int g_dsaf_driver_init(void)
{
  #line 3036 
  return cif___platform_driver_register(& g_dsaf_driver,& __this_module);
}

#line 3036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
static void g_dsaf_driver_exit(void)
{
  #line 3036 
  cif_platform_driver_unregister(& g_dsaf_driver);
  #line 3037 
  return;
}

#line 3044  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c"
int hns_dsaf_roce_reset(struct fwnode_handle *dsaf_fwnode, bool dereset)
{
  #line 3046 
  struct dsaf_device *dsaf_dev;
  #line 3047 
  struct platform_device *pdev;
  #line 3048 
  u32 mp;
  #line 3049 
  u32 sl;
  #line 3050 
  u32 credit;
  #line 3051 
  int i;
  #line 3052 
  u32 port_map[8U][3U] = {{0U, 0U, 0U}, {1U, 0U, 0U}, {2U, 1U, 0U}, {3U, 1U, 0U}, {4U, 2U, 1U}, {4U, 2U, 1U}, {5U, 3U, 1U}, {5U, 3U, 1U}};
  #line 3062 
  u32 sl_map[8U][3U] = {{0U, 0U, 0U}, {0U, 1U, 1U}, {0U, 0U, 2U}, {0U, 1U, 3U}, {0U, 0U, 0U}, {1U, 1U, 1U}, {0U, 0U, 2U}, {1U, 1U, 3U}};
  #line 3074 
  if ((int)is_of_node(dsaf_fwnode) != 0) {
    #line 3075 
    void *__mptr;
    #line 3075 
    struct device_node *tmp_1;
    {
      #line 3075 
      struct fwnode_handle *__to_of_node_fwnode = dsaf_fwnode;
      #line 3075 
      if ((int)is_of_node(__to_of_node_fwnode) != 0) {
        #line 3075 
        __mptr = (void *)__to_of_node_fwnode;
        #line 3075 
        tmp_1 = ((struct device_node *)(__mptr + 18446744073709551592U));
      }
      else 
           #line 3075 
           tmp_1 = (struct device_node *)0;
      }
    #line 3075 
    pdev = of_find_device_by_node(tmp_1);
  }
  else {
    #line 3076 
    if ((int)is_acpi_device_node(dsaf_fwnode) != 0) 
                                                    #line 3077 
                                                    pdev = hns_dsaf_find_platform_device(dsaf_fwnode);
    else {
      #line 3079 
      printk((char *)"\001");
      #line 3080 
      return -22;
    }
  }
  #line 3084 
  if (pdev == (struct platform_device *)0) {
    #line 3085 
    printk((char *)"\001");
    #line 3086 
    return -19;
  }
  #line 3090 
  dsaf_dev = (struct dsaf_device *)dev_get_drvdata(& pdev->dev);
  #line 3091 
  if (dsaf_dev == (struct dsaf_device *)0) {
    #line 3092 
    _dev_err(& pdev->dev,(char *)"dsaf_dev is NULL\n");
    #line 3093 
    put_device(& pdev->dev);
    #line 3094 
    return -19;
  }
  #line 3098 
  if (dsaf_dev->dsaf_ver == 3552816U) {
    #line 3099 
    _dev_err(dsaf_dev->dev,(char *)"%s v1 chip doesn\'t support RoCE!\n",(char *)(& dsaf_dev->ae_dev.name));
    #line 3101 
    put_device(& pdev->dev);
    #line 3102 
    return -19;
  }
  #line 3106 
  if (! dereset) {
    #line 3108 
    (*((dsaf_dev->misc_op)->hns_dsaf_srst_chns))(dsaf_dev,258048U,(_Bool)0);
    #line 3110 
    (*((dsaf_dev->misc_op)->hns_dsaf_roce_srst))(dsaf_dev,(_Bool)0);
  }
  else {
    #line 3113 
    mp = dsaf_read_reg(dsaf_dev->io_base,672U);
    #line 3114 
    i = 0;
    #line 3114 
    while (i <= 7) {
      #line 3115 
      mp = (unsigned int)(~ (7 << i * 3)) & mp;
      #line 3115 
      mp = ((port_map[i][0] << i * 3) & (unsigned int)(7 << i * 3)) | mp;
      #line 3114 
      i ++;
    }
    #line 3117 
    mp = (unsigned int)(~ (3 << i * 3)) & mp;
    #line 3117 
    mp = mp;
    #line 3118 
    dsaf_write_reg(dsaf_dev->io_base,672U,mp);
    #line 3120 
    sl = dsaf_read_reg(dsaf_dev->io_base,676U);
    #line 3121 
    i = 0;
    #line 3121 
    while (i <= 7) {
      #line 3122 
      sl = (unsigned int)(~ (3 << i * 2)) & sl;
      #line 3122 
      sl = ((sl_map[i][0] << i * 2) & (unsigned int)(3 << i * 2)) | sl;
      #line 3121 
      i ++;
    }
    #line 3124 
    dsaf_write_reg(dsaf_dev->io_base,676U,sl);
    #line 3127 
    (*((dsaf_dev->misc_op)->hns_dsaf_srst_chns))(dsaf_dev,258048U,(_Bool)1);
    #line 3129 
    msleep(20U);
    #line 3130 
    (*((dsaf_dev->misc_op)->hns_dsaf_roce_srst))(dsaf_dev,(_Bool)1);
    #line 3133 
    credit = dsaf_read_reg(dsaf_dev->io_base,9088U);
    #line 3134 
    credit &= 4294967291U;
    #line 3134 
    credit = credit;
    #line 3135 
    dsaf_write_reg(dsaf_dev->io_base,9088U,credit);
    #line 3137 
    credit &= 4294967291U;
    #line 3137 
    credit |= 4U;
    #line 3138 
    dsaf_write_reg(dsaf_dev->io_base,9088U,credit);
  }
  #line 3141 
  put_device(& pdev->dev);
  #line 3143 
  return 0;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
struct platform_driver *emg_alias_g_dsaf_driver = & g_dsaf_driver;
#line 96 
#line 96 
int emg___platform_driver_register(struct platform_driver *arg0, struct module *arg1);
#line 97 
#line 97 
void emg_platform_driver_unregister(struct platform_driver *arg0);
#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
int emg_wrapper_hns_dsaf_probe(struct platform_device *arg0)
{
  #line 102 
  return hns_dsaf_probe(arg0);
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
int emg_wrapper_hns_dsaf_remove(struct platform_device *arg0)
{
  #line 107 
  return hns_dsaf_remove(arg0);
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
void emg_g_dsaf_driver_exit(void)
{
  #line 112 
  g_dsaf_driver_exit();
  #line 113 
  return;
}

#line 115  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
int emg_g_dsaf_driver_init(void)
{
  #line 116 
  return g_dsaf_driver_init();
}

#line 218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static void *ERR_PTR_0(long error)
{
  #line 221 
  return ldv_err_ptr(error);
}

#line 225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 228 
  return ldv_ptr_err(ptr);
}

#line 232  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 235 
  return ldv_is_err(ptr);
}

#line 239  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static bool IS_ERR_OR_NULL(void *ptr)
{
  #line 242 
  return ldv_is_err_or_null(ptr);
}

#line 390  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static int cif_strcmp(char *cs, char *ct)
{
  #line 393 
  return ldv_strcmp(cs,ct);
}

#line 699  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static void cif_spin_lock_bh_tcam_lock_of_dsaf_device(spinlock_t *lock)
{
  #line 702 
  ldv_spin_model_lock((char *)"tcam_lock_of_dsaf_device");
  #line 704 
  spin_lock_bh(lock);
  #line 705 
  return;
}

#line 708  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static void cif_spin_unlock_bh_tcam_lock_of_dsaf_device(spinlock_t *lock)
{
  #line 711 
  ldv_spin_model_unlock((char *)"tcam_lock_of_dsaf_device");
  #line 713 
  spin_unlock_bh(lock);
  #line 714 
  return;
}

#line 717  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static void *cif_vzalloc(unsigned long size)
{
  #line 720 
  return ldv_vzalloc(size);
}

#line 724  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static void cif_vfree(void *addr)
{
  #line 727 
  ldv_vfree(addr);
  #line 728 
  return;
}

#line 731  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static void *cif_devm_kzalloc_2(struct device *dev, size_t size, gfp_t flags)
{
  #line 734 
  return ldv_devm_kzalloc(size,flags);
}

#line 738  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static int cif___platform_driver_register(struct platform_driver *ldv_func_arg1, struct module *ldv_func_arg2)
{
  #line 742 
  return emg___platform_driver_register(ldv_func_arg1,ldv_func_arg2);
}

#line 746  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_main.i.aux"
static void cif_platform_driver_unregister(struct platform_driver *ldv_func_arg1)
{
  #line 750 
  emg_platform_driver_unregister(ldv_func_arg1);
  #line 751 
  return;
}

#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 367  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_mac.i.aux"
static int cif_strcmp_0(char *cs, char *ct);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_mac.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 209  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_mac.i.aux"
static bool IS_ERR_0(void *ptr);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_mac.i.aux"
static bool IS_ERR_OR_NULL_0(void *ptr);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 27 
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
#line 54 
int fwnode_property_read_u8_array(struct fwnode_handle *, char *, u8 *, size_t);
#line 60 
#line 60 
int fwnode_property_read_u32_array(struct fwnode_handle *, char *, u32 *, size_t);
#line 69 
#line 69 
int fwnode_property_read_string(struct fwnode_handle *, char *, char **);
#line 103 
#line 103 
struct fwnode_handle *device_get_next_child_node(struct device *, struct fwnode_handle *);
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
__inline static int fwnode_property_read_u32(struct fwnode_handle *fwnode, char *propname, u32 *val)
{
  #line 193 
  return fwnode_property_read_u32_array(fwnode,propname,val,1UL);
}

#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
__inline static bool is_of_node_0(struct fwnode_handle *fwnode)
{
  #line 157 
  int tmp_0;
  #line 157 
  if (IS_ERR_OR_NULL_0((void *)fwnode)) 
                                        #line 157 
                                        tmp_0 = 0;
  else 
    #line 157 
    if (fwnode->ops == & of_fwnode_ops) 
                                        #line 157 
                                        tmp_0 = 1; else 
                                                        #line 157 
                                                        tmp_0 = 0;
  #line 157 
  return (_Bool)(tmp_0 != 0);
}

#line 373 
#line 373 
int of_parse_phandle_with_fixed_args(struct device_node *, char *, int, int, struct of_phandle_args *);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_mac.i.aux"
static void *cif_devm_kzalloc_3(struct device *dev, size_t size, gfp_t flags);
#line 1036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/acpi.h"
#line 1036 
int __acpi_node_get_property_reference(struct fwnode_handle *, char *, size_t, size_t, struct fwnode_reference_args *);
#line 1040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/acpi.h"
__inline static int acpi_node_get_property_reference(struct fwnode_handle *fwnode, char *name, size_t index, struct fwnode_reference_args *args)
{
  #line 1045 
  return __acpi_node_get_property_reference(fwnode,name,index,8UL,args);
}

#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static char *phy_modes(phy_interface_t interface)
{
  #line 133 
  switch ((unsigned int)interface) {
    #line 134 
    case (unsigned int)0: 
                          #line 134 
    ;
    #line 135 
    return (char *)"";
    #line 136 
    case (unsigned int)1: 
                          #line 136 
    ;
    #line 137 
    return (char *)"internal";
    #line 138 
    case (unsigned int)2: 
                          #line 138 
    ;
    #line 139 
    return (char *)"mii";
    #line 140 
    case (unsigned int)3: 
                          #line 140 
    ;
    #line 141 
    return (char *)"gmii";
    #line 142 
    case (unsigned int)4: 
                          #line 142 
    ;
    #line 143 
    return (char *)"sgmii";
    #line 144 
    case (unsigned int)5: 
                          #line 144 
    ;
    #line 145 
    return (char *)"tbi";
    #line 146 
    case (unsigned int)6: 
                          #line 146 
    ;
    #line 147 
    return (char *)"rev-mii";
    #line 148 
    case (unsigned int)7: 
                          #line 148 
    ;
    #line 149 
    return (char *)"rmii";
    #line 150 
    case (unsigned int)8: 
                          #line 150 
    ;
    #line 151 
    return (char *)"rgmii";
    #line 152 
    case (unsigned int)9: 
                          #line 152 
    ;
    #line 153 
    return (char *)"rgmii-id";
    #line 154 
    case (unsigned int)10: 
                           #line 154 
    ;
    #line 155 
    return (char *)"rgmii-rxid";
    #line 156 
    case (unsigned int)11: 
                           #line 156 
    ;
    #line 157 
    return (char *)"rgmii-txid";
    #line 158 
    case (unsigned int)12: 
                           #line 158 
    ;
    #line 159 
    return (char *)"rtbi";
    #line 160 
    case (unsigned int)13: 
                           #line 160 
    ;
    #line 161 
    return (char *)"smii";
    #line 162 
    case (unsigned int)14: 
                           #line 162 
    ;
    #line 163 
    return (char *)"xgmii";
    #line 164 
    case (unsigned int)15: 
                           #line 164 
    ;
    #line 165 
    return (char *)"moca";
    #line 166 
    case (unsigned int)16: 
                           #line 166 
    ;
    #line 167 
    return (char *)"qsgmii";
    #line 168 
    case (unsigned int)17: 
                           #line 168 
    ;
    #line 169 
    return (char *)"trgmii";
    #line 170 
    case (unsigned int)18: 
                           #line 170 
    ;
    #line 171 
    return (char *)"1000base-x";
    #line 172 
    case (unsigned int)19: 
                           #line 172 
    ;
    #line 173 
    return (char *)"2500base-x";
    #line 174 
    case (unsigned int)20: 
                           #line 174 
    ;
    #line 175 
    return (char *)"rxaui";
    #line 176 
    case (unsigned int)21: 
                           #line 176 
    ;
    #line 177 
    return (char *)"xaui";
    #line 178 
    case (unsigned int)22: 
                           #line 178 
    ;
    #line 179 
    return (char *)"10gbase-kr";
    #line 180 
    case (unsigned int)23: 
                           #line 180 
    ;
    #line 181 
    return (char *)"usxgmii";
    #line 182 
    default: 
             #line 182 
    ;
    #line 183 
    return (char *)"unknown";
  }
}

#line 1007 
#line 1007 
struct phy_device *get_phy_device(struct mii_bus *, int, bool);
#line 1008 
#line 1008 
int phy_device_register(struct phy_device *);
#line 1009 
#line 1009 
void phy_device_free(struct phy_device *);
#line 1024 
#line 1024 
void phy_device_remove(struct phy_device *);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_mdio.h"
#line 17 
struct phy_device *of_phy_find_device(struct device_node *);
#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
__inline static void *platform_get_drvdata(struct platform_device *pdev)
{
  #line 229 
  return dev_get_drvdata(& pdev->dev);
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_broadcast_addr(u8 *addr)
{
  #line 240 
  memset((void *)addr,255,6UL);
  #line 241 
  return;
}

#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.h"
__inline static struct mac_driver *hns_mac_get_drv(struct hns_mac_cb *mac_cb)
{
  #line 420 
  return (struct mac_driver *)mac_cb->priv.mac;
}

#line 423 
#line 423 
void *hns_gmac_config(struct hns_mac_cb *mac_cb, struct mac_params *mac_param);
#line 425 
#line 425 
void *hns_xgmac_config(struct hns_mac_cb *mac_cb, struct mac_params *mac_param);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
static u16 mac_phy_to_speed[15U] = {[2] = (unsigned short)100U, (unsigned short)1000U, (unsigned short)1000U, (unsigned short)1000U, [7] = (unsigned short)100U, (unsigned short)1000U, (unsigned short)1000U, (unsigned short)1000U, (unsigned short)1000U, (unsigned short)1000U, [14] = (unsigned short)10000U};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
static enum mac_mode g_mac_mode_100[8U] = {[2] = MAC_MODE_MII_100, [7] = MAC_MODE_RMII_100};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
static enum mac_mode g_mac_mode_1000[13U] = {[3] = MAC_MODE_GMII_1000, MAC_MODE_SGMII_1000, MAC_MODE_TBI_1000, [8] = MAC_MODE_RGMII_1000, MAC_MODE_RGMII_1000, MAC_MODE_RGMII_1000, MAC_MODE_RGMII_1000, MAC_MODE_RTBI_1000};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
static enum mac_mode hns_get_enet_interface(struct hns_mac_cb *mac_cb)
{
  #line 57 
  switch ((int)mac_cb->max_speed) {
    #line 58 
    case 100: 
              #line 58 
    ;
    #line 59 
    return g_mac_mode_100[(unsigned int)mac_cb->phy_if];
    #line 60 
    case 1000: 
               #line 60 
    ;
    #line 61 
    return g_mac_mode_1000[(unsigned int)mac_cb->phy_if];
    #line 62 
    case 10000: 
                #line 62 
    ;
    #line 63 
    return MAC_MODE_XGMII_10000;
    #line 64 
    default: 
             #line 64 
    ;
    #line 65 
    return MAC_MODE_MII_100;
  }
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
void hns_mac_get_link_status(struct hns_mac_cb *mac_cb, u32 *link_status)
{
  #line 71 
  struct mac_driver *mac_ctrl_drv;
  #line 72 
  int ret;
  #line 72 
  int sfp_prsnt;
  #line 74 
  mac_ctrl_drv = hns_mac_get_drv(mac_cb);
  #line 76 
  if (mac_ctrl_drv->get_link_status != (void (*)(void *, u32 *))0) 
                                                                   #line 77 
                                                                   (*(mac_ctrl_drv->get_link_status))((void *)mac_ctrl_drv,link_status); else 
                                                                    #line 79 
                                                                    *link_status = 0U;
  #line 81 
  if (mac_cb->media_type == (unsigned int)HNAE_MEDIA_TYPE_FIBER) {
    #line 82 
    ret = (*(((mac_cb->dsaf_dev)->misc_op)->get_sfp_prsnt))(mac_cb,& sfp_prsnt);
    #line 84 
    if (ret == 0) 
                  #line 85 
                  *link_status = (unsigned int)((*link_status != 0U && sfp_prsnt != 0) != 0);
  }
  #line 88 
  mac_cb->link = (unsigned char)*link_status;
  #line 89 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
int hns_mac_get_port_info(struct hns_mac_cb *mac_cb, u8 *auto_neg, u16 *speed, u8 *duplex)
{
  #line 94 
  struct mac_driver *mac_ctrl_drv;
  #line 95 
  struct mac_info info;
  #line 97 
  mac_ctrl_drv = hns_mac_get_drv(mac_cb);
  #line 99 
  if (mac_ctrl_drv->get_info == (void (*)(void *, struct mac_info *))0) 
    #line 100 
    return -19;
  #line 102 
  (*(mac_ctrl_drv->get_info))((void *)mac_ctrl_drv,& info);
  #line 103 
  if (auto_neg != (u8 *)0U) 
                            #line 104 
                            *auto_neg = info.auto_neg;
  #line 105 
  if (speed != (u16 *)0U) 
                          #line 106 
                          *speed = info.speed;
  #line 107 
  if (duplex != (u8 *)0U) 
                          #line 108 
                          *duplex = info.duplex;
  #line 110 
  return 0;
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
bool hns_mac_need_adjust_link(struct hns_mac_cb *mac_cb, int speed, int duplex)
{
  #line 122 
  struct mac_driver *mac_ctrl_drv;
  #line 124 
  mac_ctrl_drv = (struct mac_driver *)mac_cb->priv.mac;
  #line 126 
  if (mac_ctrl_drv->need_adjust_link != (bool (*)(void *, enum mac_speed , int ))0) {
    #line 127 
    return (*(mac_ctrl_drv->need_adjust_link))((void *)mac_ctrl_drv,
                                          (enum mac_speed)speed,duplex);
  }
  else 
       #line 130 
       return (_Bool)1;
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
void hns_mac_adjust_link(struct hns_mac_cb *mac_cb, int speed, int duplex)
{
  #line 135 
  int ret;
  #line 136 
  struct mac_driver *mac_ctrl_drv;
  #line 138 
  mac_ctrl_drv = (struct mac_driver *)mac_cb->priv.mac;
  #line 140 
  mac_cb->speed = (unsigned short)speed;
  #line 141 
  mac_cb->half_duplex = (unsigned char)(duplex == 0);
  #line 143 
  if (mac_ctrl_drv->adjust_link != (int (*)(void *, enum mac_speed , u32 ))0) {
    #line 144 
    ret = (*(mac_ctrl_drv->adjust_link))((void *)mac_ctrl_drv,(enum mac_speed)speed,(unsigned int)duplex);
    #line 146 
    if (ret != 0) {
      #line 147 
      _dev_err(mac_cb->dev,(char *)"adjust_link failed, %s mac%d ret = %#x!\n",(char *)(& (mac_cb->dsaf_dev)->ae_dev.name),(int)mac_cb->mac_id,ret);
      #line 151 
      return;
    }
  }
  #line 154 
  return;
}

#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
int hns_mac_get_inner_port_num(struct hns_mac_cb *mac_cb, u8 vmid, u8 *port_num)
{
  #line 165 
  int q_num_per_vf;
  #line 165 
  int vf_num_per_port;
  #line 166 
  int vm_queue_id;
  #line 167 
  u8 tmp_port;
  #line 169 
  if ((mac_cb->dsaf_dev)->dsaf_mode <= (unsigned int)DSAF_MODE_ENABLE) {
    #line 170 
    if ((unsigned int)mac_cb->mac_id != 6U) {
      #line 171 
      _dev_err(mac_cb->dev,(char *)"input invalid, %s mac%d vmid%d !\n",(char *)(& (mac_cb->dsaf_dev)->ae_dev.name),(int)mac_cb->mac_id,(int)vmid);
      #line 175 
      return -22;
    }
  }
  else 
    #line 177 
    if ((mac_cb->dsaf_dev)->dsaf_mode <= (unsigned int)DSAF_MODE_DISABLE_6PORT_16VM) {
      #line 178 
      if ((unsigned int)mac_cb->mac_id > 5U) {
        #line 179 
        _dev_err(mac_cb->dev,(char *)"input invalid, %s mac%d vmid%d!\n",(char *)(& (mac_cb->dsaf_dev)->ae_dev.name),(int)mac_cb->mac_id,(int)vmid);
        #line 183 
        return -22;
      }
    }
    else {
      #line 186 
      _dev_err(mac_cb->dev,(char *)"dsaf mode invalid, %s mac%d!\n",(char *)(& (mac_cb->dsaf_dev)->ae_dev.name),(int)mac_cb->mac_id);
      #line 188 
      return -22;
    }
  #line 191 
  if ((int)((unsigned short)vmid) >= (int)((mac_cb->dsaf_dev)->rcb_common[0])->max_vfn) {
    #line 192 
    _dev_err(mac_cb->dev,(char *)"input invalid, %s mac%d vmid%d !\n",(char *)(& (mac_cb->dsaf_dev)->ae_dev.name),(int)mac_cb->mac_id,(int)vmid);
    #line 194 
    return -22;
  }
  #line 197 
  q_num_per_vf = (int)((mac_cb->dsaf_dev)->rcb_common[0])->max_q_per_vf;
  #line 198 
  vf_num_per_port = (int)((mac_cb->dsaf_dev)->rcb_common[0])->max_vfn;
  #line 200 
  vm_queue_id = (int)vmid * q_num_per_vf + (vf_num_per_port * q_num_per_vf) * (int)mac_cb->mac_id;
  #line 203 
  switch ((unsigned int)(mac_cb->dsaf_dev)->dsaf_mode) {
    #line 204 
    case (unsigned int)1: 
                          #line 204 
    ;
    #line 205 
    tmp_port = (unsigned char)0U;
    #line 206 
    break;
    #line 207 
    case (unsigned int)9: 
                          #line 207 
    ;
    #line 208 
    tmp_port = (unsigned char)0U;
    #line 209 
    break;
    #line 210 
    case (unsigned int)2: 
                          #line 210 
    ;
    #line 211 
    case (unsigned int)3: 
                          #line 211 
    ;
    #line 212 
    case (unsigned int)4: 
                          #line 212 
    ;
    #line 213 
    case (unsigned int)5: 
                          #line 213 
    ;
    #line 214 
    case (unsigned int)6: 
                          #line 214 
    ;
    #line 215 
    case (unsigned int)10: 
                           #line 215 
    ;
    #line 216 
    case (unsigned int)11: 
                           #line 216 
    ;
    #line 217 
    case (unsigned int)12: 
                           #line 217 
    ;
    #line 218 
    case (unsigned int)13: 
                           #line 218 
    ;
    #line 219 
    case (unsigned int)14: 
                           #line 219 
    ;
    #line 220 
    case (unsigned int)15: 
                           #line 220 
    ;
    #line 221 
    case (unsigned int)16: 
                           #line 221 
    ;
    #line 222 
    tmp_port = (unsigned char)vm_queue_id;
    #line 223 
    break;
    #line 224 
    default: 
             #line 224 
    ;
    #line 225 
    _dev_err(mac_cb->dev,(char *)"dsaf mode invalid, %s mac%d!\n",(char *)(& (mac_cb->dsaf_dev)->ae_dev.name),(int)mac_cb->mac_id);
    #line 227 
    return -22;
  }
  #line 229 
  tmp_port = (unsigned char)((unsigned int)tmp_port + 127U);
  #line 231 
  *port_num = tmp_port;
  #line 233 
  return 0;
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
int hns_mac_change_vf_addr(struct hns_mac_cb *mac_cb, u32 vmid, char *addr)
{
  #line 245 
  int ret;
  #line 248 
  struct dsaf_drv_mac_single_dest_entry mac_entry;
  #line 249 
  struct mac_entry_idx *old_entry;
  #line 246 
  struct mac_driver *mac_ctrl_drv = hns_mac_get_drv(mac_cb);
  #line 247 
  struct dsaf_device *dsaf_dev = mac_cb->dsaf_dev;
  #line 251 
  old_entry = & mac_cb->addr_entry_idx[vmid];
  #line 252 
  if (dsaf_dev->dsaf_mode != (unsigned int)DSAF_MODE_DISABLE_SP) {
    #line 253 
    memcpy((void *)(& mac_entry.addr),(void *)addr,6UL);
    #line 254 
    mac_entry.in_vlan_id = (unsigned short)old_entry->vlan_id;
    #line 255 
    mac_entry.in_port_num = mac_cb->mac_id;
    #line 256 
    ret = hns_mac_get_inner_port_num(mac_cb,(unsigned char)((int)((unsigned char)vmid)),& mac_entry.port_num);
    #line 258 
    if (ret != 0) 
                  #line 259 
                  return ret;
    #line 261 
    if ((unsigned int)old_entry->valid != 0U) {
      #line 261 
      if (memcmp((void *)(& old_entry->addr),(void *)addr,6UL) != 0) {
        #line 264 
        ret = hns_dsaf_del_mac_entry(dsaf_dev,(unsigned short)((int)old_entry->vlan_id),(unsigned char)((int)mac_cb->mac_id),(u8 *)(& old_entry->addr));
        #line 268 
        if (ret != 0) 
                      #line 269 
                      return ret;
      }
    }
    #line 272 
    ret = hns_dsaf_set_mac_uc_entry(dsaf_dev,& mac_entry);
    #line 273 
    if (ret != 0) 
                  #line 274 
                  return ret;
  }
  #line 277 
  if (mac_ctrl_drv->set_mac_addr != (void (*)(void *, char *))0 && vmid == 0U) 
    #line 278 
    (*(mac_ctrl_drv->set_mac_addr))(mac_cb->priv.mac,addr);
  #line 280 
  memcpy((void *)(& old_entry->addr),(void *)addr,6UL);
  #line 281 
  old_entry->valid = (unsigned short)1U;
  #line 282 
  return 0;
}

#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
int hns_mac_add_uc_addr(struct hns_mac_cb *mac_cb, u8 vf_id, unsigned char *addr)
{
  #line 289 
  struct dsaf_drv_mac_single_dest_entry mac_entry;
  #line 290 
  int ret;
  #line 288 
  struct dsaf_device *dsaf_dev = mac_cb->dsaf_dev;
  #line 292 
  if (dsaf_dev->dsaf_mode == (unsigned int)DSAF_MODE_DISABLE_SP) 
                                                                 #line 293 
                                                                 return -28;
  #line 295 
  memset((void *)(& mac_entry),0,16UL);
  #line 296 
  memcpy((void *)(& mac_entry.addr),(void *)addr,6UL);
  #line 297 
  mac_entry.in_port_num = mac_cb->mac_id;
  #line 298 
  ret = hns_mac_get_inner_port_num(mac_cb,(unsigned char)((int)vf_id),& mac_entry.port_num);
  #line 299 
  if (ret != 0) 
                #line 300 
                return ret;
  #line 302 
  return hns_dsaf_set_mac_uc_entry(dsaf_dev,& mac_entry);
}

#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
int hns_mac_rm_uc_addr(struct hns_mac_cb *mac_cb, u8 vf_id, unsigned char *addr)
{
  #line 309 
  struct dsaf_drv_mac_single_dest_entry mac_entry;
  #line 310 
  int ret;
  #line 308 
  struct dsaf_device *dsaf_dev = mac_cb->dsaf_dev;
  #line 312 
  if (dsaf_dev->dsaf_mode == (unsigned int)DSAF_MODE_DISABLE_SP) 
                                                                 #line 313 
                                                                 return -28;
  #line 315 
  memset((void *)(& mac_entry),0,16UL);
  #line 316 
  memcpy((void *)(& mac_entry.addr),(void *)addr,6UL);
  #line 317 
  mac_entry.in_port_num = mac_cb->mac_id;
  #line 318 
  ret = hns_mac_get_inner_port_num(mac_cb,(unsigned char)((int)vf_id),& mac_entry.port_num);
  #line 319 
  if (ret != 0) 
                #line 320 
                return ret;
  #line 322 
  return hns_dsaf_rm_mac_addr(dsaf_dev,& mac_entry);
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
int hns_mac_set_multi(struct hns_mac_cb *mac_cb, u32 port_num, char *addr, bool enable)
{
  #line 328 
  int ret;
  #line 330 
  struct dsaf_drv_mac_single_dest_entry mac_entry;
  #line 329 
  struct dsaf_device *dsaf_dev = mac_cb->dsaf_dev;
  #line 332 
  if (dsaf_dev->dsaf_mode != (unsigned int)DSAF_MODE_DISABLE_SP && addr != (char *)0) {
    #line 333 
    memcpy((void *)(& mac_entry.addr),(void *)addr,6UL);
    #line 334 
    mac_entry.in_vlan_id = (unsigned short)0U;
    #line 335 
    mac_entry.in_port_num = mac_cb->mac_id;
    #line 336 
    mac_entry.port_num = (unsigned char)port_num;
    #line 338 
    if (! enable) 
                  #line 339 
                  ret = hns_dsaf_del_mac_mc_port(dsaf_dev,& mac_entry); else 
                                                                    #line 341 
                                                                    ret = hns_dsaf_add_mac_mc_port(dsaf_dev,& mac_entry);
    #line 342 
    if (ret != 0) {
      #line 343 
      _dev_err(dsaf_dev->dev,(char *)"set mac mc port failed, %s mac%d ret = %#x!\n",(char *)(& (mac_cb->dsaf_dev)->ae_dev.name),(int)mac_cb->mac_id,ret);
      #line 347 
      return ret;
    }
  }
  #line 351 
  return 0;
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
int hns_mac_clr_multicast(struct hns_mac_cb *mac_cb, int vfn)
{
  #line 357 
  u8 port_num;
  #line 356 
  struct dsaf_device *dsaf_dev = mac_cb->dsaf_dev;
  #line 358 
  int ret = hns_mac_get_inner_port_num(mac_cb,(unsigned char)((int)((unsigned char)vfn)),& port_num);
  #line 360 
  if (ret != 0) 
                #line 361 
                return ret;
  #line 363 
  return hns_dsaf_clr_mac_mc_port(dsaf_dev,
                                 (unsigned char)((int)mac_cb->mac_id),
                                 (unsigned char)((int)port_num));
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
static void hns_mac_param_get(struct mac_params *param, struct hns_mac_cb *mac_cb)
{
  #line 369 
  param->vaddr = mac_cb->vaddr;
  #line 370 
  param->mac_mode = hns_get_enet_interface(mac_cb);
  #line 371 
  ether_addr_copy((u8 *)(& param->addr),(u8 *)(& mac_cb->addr_entry_idx[0].addr));
  #line 372 
  param->mac_id = mac_cb->mac_id;
  #line 373 
  param->dev = mac_cb->dev;
  #line 374 
  return;
}

#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
static int hns_mac_port_config_bc_en(struct hns_mac_cb *mac_cb, u32 port_num, u16 vlan_id, bool enable)
{
  #line 386 
  int ret;
  #line 388 
  struct dsaf_drv_mac_single_dest_entry mac_entry;
  #line 387 
  struct dsaf_device *dsaf_dev = mac_cb->dsaf_dev;
  #line 391 
  if (mac_cb->mac_type == (unsigned int)HNAE_PORT_DEBUG) 
                                                         #line 392 
                                                         return 0;
  #line 394 
  if (dsaf_dev->dsaf_mode != (unsigned int)DSAF_MODE_DISABLE_SP) {
    #line 395 
    eth_broadcast_addr((u8 *)(& mac_entry.addr));
    #line 396 
    mac_entry.in_vlan_id = vlan_id;
    #line 397 
    mac_entry.in_port_num = mac_cb->mac_id;
    #line 398 
    mac_entry.port_num = (unsigned char)port_num;
    #line 400 
    if (! enable) 
                  #line 401 
                  ret = hns_dsaf_del_mac_mc_port(dsaf_dev,& mac_entry); else 
                                                                    #line 403 
                                                                    ret = hns_dsaf_add_mac_mc_port(dsaf_dev,& mac_entry);
    #line 404 
    return ret;
  }
  #line 407 
  return 0;
}

#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
int hns_mac_vm_config_bc_en(struct hns_mac_cb *mac_cb, u32 vmid, bool enable)
{
  #line 419 
  int ret;
  #line 421 
  u8 port_num;
  #line 422 
  struct mac_entry_idx *uc_mac_entry;
  #line 423 
  struct dsaf_drv_mac_single_dest_entry mac_entry;
  #line 420 
  struct dsaf_device *dsaf_dev = mac_cb->dsaf_dev;
  #line 425 
  if (mac_cb->mac_type == (unsigned int)HNAE_PORT_DEBUG) 
                                                         #line 426 
                                                         return 0;
  #line 428 
  uc_mac_entry = & mac_cb->addr_entry_idx[vmid];
  #line 430 
  if (dsaf_dev->dsaf_mode != (unsigned int)DSAF_MODE_DISABLE_SP) {
    #line 431 
    eth_broadcast_addr((u8 *)(& mac_entry.addr));
    #line 432 
    mac_entry.in_vlan_id = (unsigned short)uc_mac_entry->vlan_id;
    #line 433 
    mac_entry.in_port_num = mac_cb->mac_id;
    #line 434 
    ret = hns_mac_get_inner_port_num(mac_cb,(unsigned char)((int)((unsigned char)vmid)),& port_num);
    #line 435 
    if (ret != 0) 
                  #line 436 
                  return ret;
    #line 437 
    mac_entry.port_num = port_num;
    #line 439 
    if (! enable) 
                  #line 440 
                  ret = hns_dsaf_del_mac_mc_port(dsaf_dev,& mac_entry); else 
                                                                    #line 442 
                                                                    ret = hns_dsaf_add_mac_mc_port(dsaf_dev,& mac_entry);
    #line 443 
    return ret;
  }
  #line 446 
  return 0;
}

#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
int hns_mac_wait_fifo_clean(struct hns_mac_cb *mac_cb)
{
  #line 451 
  struct mac_driver *drv = hns_mac_get_drv(mac_cb);
  #line 453 
  if (drv->wait_fifo_clean != (int (*)(void *))0) {
    #line 454 
    return (*(drv->wait_fifo_clean))((void *)drv);
  }
  #line 456 
  return 0;
}

#line 459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
void hns_mac_reset(struct hns_mac_cb *mac_cb)
{
  #line 461 
  struct mac_driver *drv = hns_mac_get_drv(mac_cb);
  #line 462 
  bool is_ver1 = (_Bool)((mac_cb->dsaf_dev)->dsaf_ver == 3552816U);
  #line 464 
  (*(drv->mac_init))((void *)drv);
  #line 466 
  if (drv->config_max_frame_length != (void (*)(void *, u16 ))0) 
                                                                 #line 467 
                                                                 (*(drv->config_max_frame_length))((void *)drv,(unsigned short)((int)mac_cb->max_frm));
  #line 469 
  if (drv->set_tx_auto_pause_frames != (void (*)(void *, u16 ))0) 
                                                                  #line 470 
                                                                  (*(drv->set_tx_auto_pause_frames))((void *)drv,(unsigned short)((int)mac_cb->tx_pause_frm_time));
  #line 472 
  if (drv->set_an_mode != (void (*)(void *, u8 ))0) 
                                                    #line 473 
                                                    (*(drv->set_an_mode))((void *)drv,(unsigned char)1);
  #line 475 
  if (drv->mac_pausefrm_cfg != (void (*)(void *, u32 , u32 ))0) 
    #line 476 
    if (mac_cb->mac_type == (unsigned int)HNAE_PORT_DEBUG) 
                                                           #line 477 
                                                           (*(drv->mac_pausefrm_cfg))((void *)drv,(unsigned int)(! is_ver1),(unsigned int)(! is_ver1)); else 
                                                                    #line 479 
                                                                    (*(drv->mac_pausefrm_cfg))((void *)drv,0U,1U);
  #line 480 
  return;
}

#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
int hns_mac_set_mtu(struct hns_mac_cb *mac_cb, u32 new_mtu, u32 buf_size)
{
  #line 485 
  struct mac_driver *drv = hns_mac_get_drv(mac_cb);
  #line 486 
  u32 new_frm = new_mtu + 22U;
  #line 488 
  if (buf_size * 3U < new_frm) 
                               #line 489 
                               return -22;
  #line 491 
  if (drv->config_max_frame_length == (void (*)(void *, u16 ))0) 
                                                                 #line 492 
                                                                 return -10;
  #line 495 
  if (new_frm <= 1521U) 
                        #line 496 
                        new_frm = 1522U;
  #line 498 
  (*(drv->config_max_frame_length))((void *)drv,(unsigned short)((int)((unsigned short)new_frm)));
  #line 500 
  mac_cb->max_frm = (unsigned short)new_frm;
  #line 502 
  return 0;
}

#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
void hns_mac_start(struct hns_mac_cb *mac_cb)
{
  #line 507 
  struct mac_driver *mac_drv = hns_mac_get_drv(mac_cb);
  #line 510 
  if (mac_drv->mac_en_flg == 182059816U) {
    #line 512 
    (mac_drv->virt_dev_num) ++;
    #line 513 
    return;
  }
  #line 516 
  if (mac_drv->mac_enable != (void (*)(void *, enum mac_commom_mode ))0) {
    #line 517 
    (*(mac_drv->mac_enable))(mac_cb->priv.mac,(enum mac_commom_mode)MAC_COMM_MODE_RX_AND_TX);
    #line 518 
    mac_drv->mac_en_flg = 182059816U;
  }
  #line 520 
  return;
}

#line 522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
void hns_mac_stop(struct hns_mac_cb *mac_cb)
{
  #line 524 
  struct mac_driver *mac_ctrl_drv = hns_mac_get_drv(mac_cb);
  #line 527 
  if (mac_ctrl_drv->virt_dev_num != 0U) {
    #line 528 
    mac_ctrl_drv->virt_dev_num += 4294967295U;
    #line 529 
    if (mac_ctrl_drv->virt_dev_num != 0U) 
                                          #line 530 
                                          return;
  }
  #line 533 
  if (mac_ctrl_drv->mac_disable != (void (*)(void *, enum mac_commom_mode ))0) 
    #line 534 
    (*(mac_ctrl_drv->mac_disable))(mac_cb->priv.mac,(enum mac_commom_mode)MAC_COMM_MODE_RX_AND_TX);
  #line 537 
  mac_ctrl_drv->mac_en_flg = 0U;
  #line 538 
  mac_cb->link = (unsigned char)0U;
  #line 539 
  (*(((mac_cb->dsaf_dev)->misc_op)->cpld_reset_led))(mac_cb);
  #line 540 
  return;
}

#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
void hns_mac_get_autoneg(struct hns_mac_cb *mac_cb, u32 *auto_neg)
{
  #line 550 
  struct mac_driver *mac_ctrl_drv = hns_mac_get_drv(mac_cb);
  #line 552 
  if (mac_ctrl_drv->autoneg_stat != (void (*)(void *, u32 *))0) 
                                                                #line 553 
                                                                (*(mac_ctrl_drv->autoneg_stat))((void *)mac_ctrl_drv,auto_neg); else 
                                                                    #line 555 
                                                                    *auto_neg = 0U;
  #line 556 
  return;
}

#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
void hns_mac_get_pauseparam(struct hns_mac_cb *mac_cb, u32 *rx_en, u32 *tx_en)
{
  #line 567 
  struct mac_driver *mac_ctrl_drv = hns_mac_get_drv(mac_cb);
  #line 569 
  if (mac_ctrl_drv->get_pause_enable != (void (*)(void *, u32 *, u32 *))0) 
    #line 570 
    (*(mac_ctrl_drv->get_pause_enable))((void *)mac_ctrl_drv,rx_en,tx_en);
  else {
    #line 572 
    *rx_en = 0U;
    #line 573 
    *tx_en = 0U;
  }
  #line 575 
  return;
}

#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
int hns_mac_set_autoneg(struct hns_mac_cb *mac_cb, u8 enable)
{
  #line 585 
  struct mac_driver *mac_ctrl_drv = hns_mac_get_drv(mac_cb);
  #line 587 
  if (mac_cb->phy_if == (unsigned int)PHY_INTERFACE_MODE_XGMII && (unsigned int)enable != 0U) {
    #line 588 
    _dev_err(mac_cb->dev,(char *)"enabling autoneg is not allowed!\n");
    #line 589 
    return -524;
  }
  #line 592 
  if (mac_ctrl_drv->set_an_mode != (void (*)(void *, u8 ))0) 
                                                             #line 593 
                                                             (*(mac_ctrl_drv->set_an_mode))((void *)mac_ctrl_drv,(unsigned char)((int)enable));
  #line 595 
  return 0;
}

#line 605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
int hns_mac_set_pauseparam(struct hns_mac_cb *mac_cb, u32 rx_en, u32 tx_en)
{
  #line 607 
  struct mac_driver *mac_ctrl_drv = hns_mac_get_drv(mac_cb);
  #line 608 
  bool is_ver1 = (_Bool)((mac_cb->dsaf_dev)->dsaf_ver == 3552816U);
  #line 610 
  if (mac_cb->mac_type == (unsigned int)HNAE_PORT_DEBUG) 
    #line 611 
    if ((int)is_ver1 != 0 && (tx_en != 0U || rx_en != 0U)) {
      #line 612 
      _dev_err(mac_cb->dev,(char *)"macv1 can\'t enable tx/rx_pause!\n");
      #line 613 
      return -22;
    }
  #line 617 
  if (mac_ctrl_drv->mac_pausefrm_cfg != (void (*)(void *, u32 , u32 ))0) 
    #line 618 
    (*(mac_ctrl_drv->mac_pausefrm_cfg))((void *)mac_ctrl_drv,rx_en,tx_en);
  #line 620 
  return 0;
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
static int hns_mac_init_ex(struct hns_mac_cb *mac_cb)
{
  #line 630 
  int ret;
  #line 631 
  struct mac_params param;
  #line 632 
  struct mac_driver *drv;
  #line 634 
  hns_dsaf_fix_mac_mode(mac_cb);
  #line 636 
  memset((void *)(& param),0,32UL);
  #line 637 
  hns_mac_param_get(& param,mac_cb);
  #line 639 
  if (((unsigned int)param.mac_mode & 65535U) <= 9999U) 
                                                        #line 640 
                                                        drv = (struct mac_driver *)hns_gmac_config(mac_cb,& param); else 
                                                                    #line 642 
                                                                    drv = (struct mac_driver *)hns_xgmac_config(mac_cb,& param);
  #line 644 
  if (drv == (struct mac_driver *)0) 
                                     #line 645 
                                     return -12;
  #line 647 
  mac_cb->priv.mac = (void *)drv;
  #line 648 
  hns_mac_reset(mac_cb);
  #line 650 
  hns_mac_adjust_link(mac_cb,(int)mac_cb->speed,(unsigned int)mac_cb->half_duplex == 0U);
  #line 652 
  ret = hns_mac_port_config_bc_en(mac_cb,(unsigned int)mac_cb->mac_id,(unsigned short)0,(_Bool)1);
  #line 653 
  if (ret != 0) 
                #line 654 
                goto free_mac_drv;
  #line 656 
  return 0;
  #line 658 
  free_mac_drv: 
                #line 658 
  ;
  #line 659 
  (*(drv->mac_free))(mac_cb->priv.mac);
  #line 660 
  mac_cb->priv.mac = (void *)0;
  #line 662 
  return ret;
}

#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
static int hns_mac_phy_parse_addr(struct device *dev, struct fwnode_handle *fwnode)
{
  #line 668 
  u32 addr;
  #line 669 
  int ret;
  #line 671 
  ret = fwnode_property_read_u32(fwnode,(char *)"phy-addr",& addr);
  #line 672 
  if (ret != 0) {
    #line 673 
    _dev_err(dev,(char *)"has invalid PHY address ret:%d\n",ret);
    #line 674 
    return ret;
  }
  #line 677 
  if (addr > 31U) {
    #line 678 
    _dev_err(dev,(char *)"PHY address %i is too large\n",addr);
    #line 679 
    return -22;
  }
  #line 682 
  return (int)addr;
}

#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
static int hns_mac_register_phydev(struct mii_bus *mdio, struct hns_mac_cb *mac_cb, u32 addr)
{
  #line 689 
  struct phy_device *phy;
  #line 690 
  char *phy_type;
  #line 691 
  bool is_c45;
  #line 692 
  int rc;
  #line 694 
  rc = fwnode_property_read_string(mac_cb->fw_port,(char *)"phy-mode",& phy_type);
  #line 696 
  if (rc < 0) 
              #line 697 
              return rc;
  #line 699 
  ;
  #line 699 
  if (cif_strcmp_0(phy_type,
                     phy_modes((enum ldv_17256)PHY_INTERFACE_MODE_XGMII)) == 0) 
    #line 700 
    is_c45 = (_Bool)1;
  else {
    #line 701 
    ;
    #line 701 
    if (cif_strcmp_0(phy_type,
                     phy_modes((enum ldv_17256)PHY_INTERFACE_MODE_SGMII)) == 0) 
      #line 702 
      is_c45 = (_Bool)0; else 
                              #line 704 
                              return -61;
  }
  #line 706 
  phy = get_phy_device(mdio,(int)addr,(_Bool)((bool)((int)is_c45) != 0));
  #line 707 
  if (phy == (struct phy_device *)0) 
                                     #line 708 
                                     return -5;
  else {
    #line 707 
    if ((int)IS_ERR_0((void *)phy) != 0) 
                                         #line 708 
                                         return -5;
  }
  #line 710 
  phy->irq = mdio->irq[addr];
  #line 715 
  rc = phy_device_register(phy);
  #line 716 
  if (rc != 0) {
    #line 717 
    phy_device_free(phy);
    #line 718 
    _dev_err(& mdio->dev,(char *)"registered phy fail at address %i\n",addr);
    #line 720 
    return -19;
  }
  #line 723 
  mac_cb->phy_dev = phy;
  {
    #line 725 
    bool branch;
    #line 725 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"hns_dsaf", .function = (char *)"hns_mac_register_phydev", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c", .format = (char *)"registered phy at address %i\n", .lineno = (unsigned int)725U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 725 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 725 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 725 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug442,& mdio->dev,(char *)"registered phy at address %i\n",addr);
  }
  #line 727 
  return 0;
}

#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
static int hns_mac_register_phy(struct hns_mac_cb *mac_cb)
{
  #line 739 
  void *__mptr;
  #line 739 
  struct acpi_device *tmp_1;
  #line 732 
  struct fwnode_reference_args args;
  #line 733 
  struct platform_device *pdev;
  #line 734 
  struct mii_bus *mii_bus;
  #line 735 
  int rc;
  #line 736 
  int addr;
  {
    #line 739 
    struct fwnode_handle *__to_acpi_device_node_fwnode = mac_cb->fw_port;
    #line 739 
    if ((int)is_acpi_device_node(__to_acpi_device_node_fwnode) != 0) {
      #line 739 
      __mptr = (void *)__to_acpi_device_node_fwnode;
      #line 739 
      tmp_1 = ((struct acpi_device *)(__mptr + 18446744073709551600U));
    }
    else 
         #line 739 
         tmp_1 = (struct acpi_device *)0;
    }
  #line 739 
  if (tmp_1 == (struct acpi_device *)0) 
                                        #line 740 
                                        return -19;
  #line 742 
  rc = acpi_node_get_property_reference(mac_cb->fw_port,(char *)"mdio-node",0UL,& args);
  #line 744 
  if (rc != 0) 
               #line 745 
               return rc;
  #line 746 
  if (! is_acpi_device_node(args.fwnode)) 
                                          #line 747 
                                          return -22;
  #line 749 
  addr = hns_mac_phy_parse_addr(mac_cb->dev,mac_cb->fw_port);
  #line 750 
  if (addr < 0) 
                #line 751 
                return addr;
  #line 754 
  pdev = hns_dsaf_find_platform_device(args.fwnode);
  #line 755 
  if (pdev == (struct platform_device *)0) {
    #line 756 
    _dev_err(mac_cb->dev,(char *)"mac%d mdio pdev is NULL\n",(int)mac_cb->mac_id);
    #line 758 
    return -22;
  }
  #line 761 
  mii_bus = (struct mii_bus *)platform_get_drvdata(pdev);
  #line 762 
  if (mii_bus == (struct mii_bus *)0) {
    #line 763 
    _dev_err(mac_cb->dev,(char *)"mac%d mdio is NULL, dsaf will probe again later\n",(int)mac_cb->mac_id);
    #line 766 
    return -517;
  }
  #line 769 
  rc = hns_mac_register_phydev(mii_bus,mac_cb,(unsigned int)addr);
  #line 770 
  if (rc == 0) {
    #line 771 
    bool branch;
    #line 771 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"hns_dsaf", .function = (char *)"hns_mac_register_phy", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c", .format = (char *)"mac%d register phy addr:%d\n", .lineno = (unsigned int)771U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 771 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 771 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 771 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug443,mac_cb->dev,(char *)"mac%d register phy addr:%d\n",(int)mac_cb->mac_id,addr);
  }
  #line 774 
  return rc;
}

#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
static void hns_mac_remove_phydev(struct hns_mac_cb *mac_cb)
{
  #line 779 
  void *__mptr;
  #line 779 
  struct acpi_device *tmp_1;
  {
    #line 779 
    struct fwnode_handle *__to_acpi_device_node_fwnode = mac_cb->fw_port;
    #line 779 
    if ((int)is_acpi_device_node(__to_acpi_device_node_fwnode) != 0) {
      #line 779 
      __mptr = (void *)__to_acpi_device_node_fwnode;
      #line 779 
      tmp_1 = ((struct acpi_device *)(__mptr + 18446744073709551600U));
    }
    else 
         #line 779 
         tmp_1 = (struct acpi_device *)0;
    }
  #line 779 
  if (tmp_1 == (struct acpi_device *)0) 
                                        #line 780 
                                        return;
  else 
    #line 779 
    if (mac_cb->phy_dev == (struct phy_device *)0) 
                                                   #line 780 
                                                   return;
  #line 782 
  phy_device_remove(mac_cb->phy_dev);
  #line 783 
  phy_device_free(mac_cb->phy_dev);
  #line 785 
  mac_cb->phy_dev = (struct phy_device *)0;
  #line 786 
  return;
}

#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
static struct __anonstruct_media_type_defs_4385 media_type_defs[4U] = {{.name = (char *)"unknown"}, {.value = HNAE_MEDIA_TYPE_FIBER, .name = (char *)"fiber"}, {.value = HNAE_MEDIA_TYPE_COPPER, .name = (char *)"copper"}, {.value = HNAE_MEDIA_TYPE_BACKPLANE, .name = (char *)"backplane"}};
#line 806  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
static int hns_mac_get_info(struct hns_mac_cb *mac_cb)
{
  #line 808 
  struct device_node *np;
  #line 809 
  struct regmap *syscon;
  #line 810 
  struct of_phandle_args cpld_args;
  #line 811 
  char *media_type;
  #line 812 
  u32 i;
  #line 813 
  u32 ret;
  #line 815 
  mac_cb->link = (unsigned char)0U;
  #line 816 
  mac_cb->half_duplex = (unsigned char)0U;
  #line 817 
  mac_cb->media_type = HNAE_MEDIA_TYPE_UNKNOWN;
  #line 818 
  mac_cb->speed = mac_phy_to_speed[(unsigned int)mac_cb->phy_if];
  #line 819 
  mac_cb->max_speed = mac_cb->speed;
  #line 821 
  if (mac_cb->phy_if == (unsigned int)PHY_INTERFACE_MODE_SGMII) {
    #line 822 
    mac_cb->if_support = 79U;
    #line 823 
    mac_cb->if_support |= 32U;
  }
  else 
    #line 824 
    if (mac_cb->phy_if == (unsigned int)PHY_INTERFACE_MODE_XGMII) {
      #line 825 
      mac_cb->if_support = 1048576U;
      #line 826 
      mac_cb->if_support |= 524288U;
    }
  #line 829 
  mac_cb->max_frm = (unsigned short)1522U;
  #line 830 
  mac_cb->tx_pause_frm_time = (unsigned short)65535U;
  #line 831 
  mac_cb->port_rst_off = (unsigned int)mac_cb->mac_id;
  #line 832 
  mac_cb->port_mode_off = 0U;
  #line 837 
  if (mac_cb->fw_port == (struct fwnode_handle *)0) {
    #line 838 
    np = of_parse_phandle((mac_cb->dev)->of_node,(char *)"phy-handle",(int)mac_cb->mac_id);
    #line 840 
    mac_cb->phy_dev = of_phy_find_device(np);
    #line 841 
    if (mac_cb->phy_dev != (struct phy_device *)0) {
      #line 845 
      put_device(& (mac_cb->phy_dev)->mdio.dev);
      {
        #line 847 
        bool branch;
        #line 847 
        struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"hns_dsaf", .function = (char *)"hns_mac_get_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c", .format = (char *)"mac%d phy_node: %pOFn\n", .lineno = (unsigned int)847U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 847 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
        #line 847 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 847 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug444,mac_cb->dev,(char *)"mac%d phy_node: %pOFn\n",(int)mac_cb->mac_id,np);
      }
    }
    #line 850 
    of_node_put(np);
    #line 852 
    return 0;
  }
  #line 855 
  if ((int)is_of_node_0(mac_cb->fw_port) != 0) {
    #line 870 
    void *__mptr_0;
    #line 857 
    void *__mptr;
    #line 870 
    struct device_node *tmp_7;
    #line 899 
    void *__mptr_1;
    #line 857 
    struct device_node *tmp_2;
    #line 899 
    struct device_node *tmp_16;
    {
      #line 857 
      struct fwnode_handle *__to_of_node_fwnode = mac_cb->fw_port;
      #line 857 
      if ((int)is_of_node_0(__to_of_node_fwnode) != 0) {
        #line 857 
        __mptr = (void *)__to_of_node_fwnode;
        #line 857 
        tmp_2 = ((struct device_node *)(__mptr + 18446744073709551592U));
      }
      else 
           #line 857 
           tmp_2 = (struct device_node *)0;
      }
    #line 857 
    np = of_parse_phandle(tmp_2,(char *)"phy-handle",0);
    #line 859 
    mac_cb->phy_dev = of_phy_find_device(np);
    #line 860 
    if (mac_cb->phy_dev != (struct phy_device *)0) {
      #line 864 
      put_device(& (mac_cb->phy_dev)->mdio.dev);
      {
        #line 865 
        bool branch_0;
        #line 865 
        struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"hns_dsaf", .function = (char *)"hns_mac_get_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c", .format = (char *)"mac%d phy_node: %pOFn\n", .lineno = (unsigned int)865U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 865 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
        #line 865 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 865 
                                                      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug445,mac_cb->dev,(char *)"mac%d phy_node: %pOFn\n",(int)mac_cb->mac_id,np);
      }
    }
    #line 868 
    of_node_put(np);
    {
      #line 870 
      struct fwnode_handle *__to_of_node_fwnode_0 = mac_cb->fw_port;
      #line 870 
      if ((int)is_of_node_0(__to_of_node_fwnode_0) != 0) {
        #line 870 
        __mptr_0 = (void *)__to_of_node_fwnode_0;
        #line 870 
        tmp_7 = ((struct device_node *)(__mptr_0 + 18446744073709551592U));
      }
      else 
           #line 870 
           tmp_7 = (struct device_node *)0;
      }
    #line 870 
    np = of_parse_phandle(tmp_7,(char *)"serdes-syscon",0);
    #line 872 
    syscon = syscon_node_to_regmap(np);
    #line 873 
    of_node_put(np);
    #line 874 
    if ((int)IS_ERR_OR_NULL_0((void *)syscon) != 0) {
      #line 875 
      _dev_err(mac_cb->dev,(char *)"serdes-syscon is needed!\n");
      #line 876 
      return -22;
    }
    #line 878 
    mac_cb->serdes_ctrl = syscon;
    #line 880 
    ret = (unsigned int)fwnode_property_read_u32(mac_cb->fw_port,(char *)"port-rst-offset",
                                  & mac_cb->port_rst_off);
    #line 883 
    if (ret != 0U) {
      #line 884 
      bool branch_1;
      #line 884 
      struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"hns_dsaf", .function = (char *)"hns_mac_get_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c", .format = (char *)"mac%d port-rst-offset not found, use default value.\n", .lineno = (unsigned int)884U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 884 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
      #line 884 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 884 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug446,mac_cb->dev,(char *)"mac%d port-rst-offset not found, use default value.\n",(int)mac_cb->mac_id);
    }
    #line 889 
    ret = (unsigned int)fwnode_property_read_u32(mac_cb->fw_port,(char *)"port-mode-offset",
                                  & mac_cb->port_mode_off);
    #line 892 
    if (ret != 0U) {
      #line 893 
      bool branch_2;
      #line 893 
      struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"hns_dsaf", .function = (char *)"hns_mac_get_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c", .format = (char *)"mac%d port-mode-offset not found, use default value.\n", .lineno = (unsigned int)893U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 893 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
      #line 893 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 893 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug447,mac_cb->dev,(char *)"mac%d port-mode-offset not found, use default value.\n",(int)mac_cb->mac_id);
    }
    {
      #line 899 
      struct fwnode_handle *__to_of_node_fwnode_1 = mac_cb->fw_port;
      #line 899 
      if ((int)is_of_node_0(__to_of_node_fwnode_1) != 0) {
        #line 899 
        __mptr_1 = (void *)__to_of_node_fwnode_1;
        #line 899 
        tmp_16 = ((struct device_node *)(__mptr_1 + 18446744073709551592U));
      }
      else 
           #line 899 
           tmp_16 = (struct device_node *)0;
      }
    #line 898 
    ret = (unsigned int)of_parse_phandle_with_fixed_args(tmp_16,(char *)"cpld-syscon",1,0,
                                          & cpld_args);
    #line 901 
    if (ret != 0U) {
      {
        #line 902 
        bool branch_3;
        #line 902 
        struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"hns_dsaf", .function = (char *)"hns_mac_get_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c", .format = (char *)"mac%d no cpld-syscon found.\n", .lineno = (unsigned int)902U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 902 
        branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
        #line 902 
        if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                      #line 902 
                                                      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug448,mac_cb->dev,(char *)"mac%d no cpld-syscon found.\n",(int)mac_cb->mac_id);
      }
      #line 904 
      mac_cb->cpld_ctrl = (struct regmap *)0;
    }
    else {
      #line 906 
      syscon = syscon_node_to_regmap(cpld_args.np);
      #line 907 
      if ((int)IS_ERR_OR_NULL_0((void *)syscon) != 0) {
        {
          #line 908 
          bool branch_4;
          #line 908 
          struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"hns_dsaf", .function = (char *)"hns_mac_get_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c", .format = (char *)"no cpld-syscon found!\n", .lineno = (unsigned int)908U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 908 
          branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
          #line 908 
          if ((long)((long)((int)branch_4 != 0)) != 0L) 
                                                        #line 908 
                                                        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug449,mac_cb->dev,(char *)"no cpld-syscon found!\n");
        }
        #line 909 
        mac_cb->cpld_ctrl = (struct regmap *)0;
      }
      else {
        #line 911 
        mac_cb->cpld_ctrl = syscon;
        #line 912 
        mac_cb->cpld_ctrl_reg = cpld_args.args[0];
      }
    }
  }
  else {
    #line 915 
    if ((int)is_acpi_node(mac_cb->fw_port) != 0) {
      #line 916 
      ret = (unsigned int)hns_mac_register_phy(mac_cb);
      #line 923 
      if (ret == 4294966779U) 
                              #line 924 
                              return (int)ret;
    }
    else 
         #line 926 
         _dev_err(mac_cb->dev,(char *)"mac%d cannot find phy node\n",(int)mac_cb->mac_id);
  }
  #line 930 
  if (fwnode_property_read_string(mac_cb->fw_port,(char *)"media-type",
                                     & media_type) == 0) {
    #line 932 
    i = 0U;
    #line 932 
    while (i <= 3U) {
      #line 933 
      if (cif_strncmp(media_type_defs[i].name,media_type,16UL) == 0) {
        #line 935 
        mac_cb->media_type = media_type_defs[i].value;
        #line 936 
        break;
      }
      #line 932 
      i ++;
    }
  }
  #line 941 
  if (fwnode_property_read_u8_array(mac_cb->fw_port,(char *)"mc-mac-mask",
                                       (u8 *)(& mac_cb->mc_mask),6UL) != 0) {
    #line 943 
    _dev_warn(mac_cb->dev,(char *)"no mc-mac-mask property, set to default value.\n");
    #line 945 
    eth_broadcast_addr((u8 *)(& mac_cb->mc_mask));
  }
  #line 948 
  return 0;
}

#line 956  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
static int hns_mac_get_mode(phy_interface_t phy_if)
{
  #line 958 
  switch ((unsigned int)phy_if) {
    #line 959 
    case (unsigned int)4: 
                          #line 959 
    ;
    #line 960 
    return 0;
    #line 961 
    case (unsigned int)14: 
                           #line 961 
    ;
    #line 962 
    return 1;
    #line 963 
    default: 
             #line 963 
    ;
    #line 964 
    return -22;
  }
}

#line 969  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
static u8 *hns_mac_get_vaddr(struct dsaf_device *dsaf_dev, struct hns_mac_cb *mac_cb, u32 mac_mode_idx)
{
  #line 972 
  u8 *base = dsaf_dev->io_base;
  #line 973 
  int mac_id = (int)mac_cb->mac_id;
  #line 975 
  if (mac_cb->mac_type == (unsigned int)HNAE_PORT_SERVICE) 
                                                           #line 976 
                                                           return base + (((unsigned long)(mac_id * 16384) + (unsigned long)(- (mac_mode_idx * 131072U))) + (unsigned long)262144U); else 
                                                                    #line 979 
                                                                    return dsaf_dev->ppe_base + 4096U;
}

#line 989  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
static int hns_mac_get_cfg(struct dsaf_device *dsaf_dev, struct hns_mac_cb *mac_cb)
{
  #line 991 
  int ret;
  #line 992 
  u32 mac_mode_idx;
  #line 994 
  mac_cb->dsaf_dev = dsaf_dev;
  #line 995 
  mac_cb->dev = dsaf_dev->dev;
  #line 997 
  mac_cb->sys_ctl_vaddr = dsaf_dev->sc_base;
  #line 998 
  mac_cb->serdes_vaddr = dsaf_dev->sds_base;
  #line 1000 
  mac_cb->sfp_prsnt = (unsigned char)0U;
  #line 1001 
  mac_cb->txpkt_for_led = 0ULL;
  #line 1002 
  mac_cb->rxpkt_for_led = 0ULL;
  #line 1004 
  if (dsaf_dev->dsaf_mode != (unsigned int)DSAF_MODE_DISABLE_SP) 
                                                                 #line 1005 
                                                                 mac_cb->mac_type = HNAE_PORT_SERVICE; else 
                                                                    #line 1007 
                                                                    mac_cb->mac_type = HNAE_PORT_DEBUG;
  #line 1009 
  mac_cb->phy_if = (*((dsaf_dev->misc_op)->get_phy_if))(mac_cb);
  #line 1011 
  ret = hns_mac_get_mode(mac_cb->phy_if);
  #line 1012 
  if (ret < 0) {
    #line 1013 
    _dev_err(dsaf_dev->dev,(char *)"hns_mac_get_mode failed, mac%d ret = %#x!\n",(int)mac_cb->mac_id,ret);
    #line 1016 
    return ret;
  }
  #line 1018 
  mac_mode_idx = (unsigned int)ret;
  #line 1020 
  ret = hns_mac_get_info(mac_cb);
  #line 1021 
  if (ret != 0) 
                #line 1022 
                return ret;
  #line 1024 
  (*(((mac_cb->dsaf_dev)->misc_op)->cpld_reset_led))(mac_cb);
  #line 1025 
  mac_cb->vaddr = hns_mac_get_vaddr(dsaf_dev,mac_cb,mac_mode_idx);
  #line 1027 
  return 0;
}

#line 1030  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
static int hns_mac_get_max_port_num(struct dsaf_device *dsaf_dev)
{
  #line 1032 
  if (dsaf_dev->dsaf_mode == (unsigned int)DSAF_MODE_DISABLE_SP) 
                                                                 #line 1033 
                                                                 return 1; else 
                                                                    #line 1035 
                                                                    return 6;
}

#line 1038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
void hns_mac_enable(struct hns_mac_cb *mac_cb, enum mac_commom_mode mode)
{
  #line 1040 
  struct mac_driver *mac_ctrl_drv = hns_mac_get_drv(mac_cb);
  #line 1042 
  (*(mac_ctrl_drv->mac_enable))(mac_cb->priv.mac,mode);
  #line 1043 
  return;
}

#line 1045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
void hns_mac_disable(struct hns_mac_cb *mac_cb, enum mac_commom_mode mode)
{
  #line 1047 
  struct mac_driver *mac_ctrl_drv = hns_mac_get_drv(mac_cb);
  #line 1049 
  (*(mac_ctrl_drv->mac_disable))(mac_cb->priv.mac,mode);
  #line 1050 
  return;
}

#line 1057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
int hns_mac_init(struct dsaf_device *dsaf_dev)
{
  #line 1060 
  int ret;
  #line 1061 
  u32 port_id;
  #line 1063 
  struct hns_mac_cb *mac_cb;
  #line 1064 
  struct fwnode_handle *child;
  #line 1059 
  bool found = (_Bool)0;
  #line 1062 
  int max_port_num = hns_mac_get_max_port_num(dsaf_dev);
  #line 1066 
  child = device_get_next_child_node(dsaf_dev->dev,(struct fwnode_handle *)0);
  #line 1066 
  while (child != (struct fwnode_handle *)0) {
    #line 1067 
    ret = fwnode_property_read_u32(child,(char *)"reg",& port_id);
    #line 1068 
    if (ret != 0) {
      #line 1069 
      _dev_err(dsaf_dev->dev,(char *)"get reg fail, ret=%d!\n",ret);
      #line 1071 
      return ret;
    }
    #line 1073 
    if (port_id >= (unsigned int)max_port_num) {
      #line 1074 
      _dev_err(dsaf_dev->dev,(char *)"reg(%u) out of range!\n",port_id);
      #line 1076 
      return -22;
    }
    #line 1078 
    mac_cb = (struct hns_mac_cb *)cif_devm_kzalloc_3(dsaf_dev->dev,1840UL,3264U);
    #line 1080 
    if (mac_cb == (struct hns_mac_cb *)0) 
                                          #line 1081 
                                          return -12;
    #line 1082 
    mac_cb->fw_port = child;
    #line 1083 
    mac_cb->mac_id = (unsigned char)port_id;
    #line 1084 
    dsaf_dev->mac_cb[port_id] = mac_cb;
    #line 1085 
    found = (_Bool)1;
    #line 1066 
    child = device_get_next_child_node(dsaf_dev->dev,child);
  }
  #line 1091 
  if (! found) {
    #line 1092 
    port_id = 0U;
    #line 1092 
    while (port_id < (unsigned int)max_port_num) {
      #line 1093 
      mac_cb = (struct hns_mac_cb *)cif_devm_kzalloc_3(dsaf_dev->dev,1840UL,3264U);
      #line 1095 
      if (mac_cb == (struct hns_mac_cb *)0) 
                                            #line 1096 
                                            return -12;
      #line 1098 
      mac_cb->mac_id = (unsigned char)port_id;
      #line 1099 
      dsaf_dev->mac_cb[port_id] = mac_cb;
      #line 1092 
      port_id ++;
    }
  }
  #line 1104 
  port_id = 0U;
  #line 1104 
  while (port_id < (unsigned int)max_port_num) {
    #line 1105 
    mac_cb = dsaf_dev->mac_cb[port_id];
    #line 1106 
    if (mac_cb == (struct hns_mac_cb *)0) 
                                          #line 1107 
                                          goto __Cont;
    #line 1109 
    ret = hns_mac_get_cfg(dsaf_dev,mac_cb);
    #line 1110 
    if (ret != 0) 
                  #line 1111 
                  return ret;
    #line 1113 
    ret = hns_mac_init_ex(mac_cb);
    #line 1114 
    if (ret != 0) 
                  #line 1115 
                  return ret;
    #line 1104 
    __Cont: 
            #line 1104 
    port_id ++;
  }
  #line 1118 
  return 0;
}

#line 1121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
void hns_mac_uninit(struct dsaf_device *dsaf_dev)
{
  #line 1123 
  int i;
  #line 1124 
  int max_port_num = hns_mac_get_max_port_num(dsaf_dev);
  #line 1126 
  i = 0;
  #line 1126 
  while (i < max_port_num) {
    #line 1127 
    if (dsaf_dev->mac_cb[i] == (struct hns_mac_cb *)0) 
                                                       #line 1128 
                                                       goto __Cont;
    #line 1130 
    (*((dsaf_dev->misc_op)->cpld_reset_led))(dsaf_dev->mac_cb[i]);
    #line 1131 
    hns_mac_remove_phydev(dsaf_dev->mac_cb[i]);
    #line 1132 
    dsaf_dev->mac_cb[i] = (struct hns_mac_cb *)0;
    #line 1126 
    __Cont: 
            #line 1126 
    i ++;
  }
  #line 1134 
  return;
}

#line 1136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
int hns_mac_config_mac_loopback(struct hns_mac_cb *mac_cb, enum hnae_loop loop, int en)
{
  #line 1139 
  int ret;
  #line 1140 
  struct mac_driver *drv = hns_mac_get_drv(mac_cb);
  #line 1142 
  if (drv->config_loopback != (int (*)(void *, enum hnae_loop , u8 ))0) 
    #line 1143 
    ret = (*(drv->config_loopback))((void *)drv,loop,(unsigned char)((int)((unsigned char)en))); else 
                                                                    #line 1145 
                                                                    ret = -524;
  #line 1147 
  return ret;
}

#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
void hns_mac_update_stats(struct hns_mac_cb *mac_cb)
{
  #line 1152 
  struct mac_driver *mac_ctrl_drv = hns_mac_get_drv(mac_cb);
  #line 1154 
  (*(mac_ctrl_drv->update_stats))((void *)mac_ctrl_drv);
  #line 1155 
  return;
}

#line 1157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
void hns_mac_get_stats(struct hns_mac_cb *mac_cb, u64 *data)
{
  #line 1159 
  struct mac_driver *mac_ctrl_drv = hns_mac_get_drv(mac_cb);
  #line 1161 
  (*(mac_ctrl_drv->get_ethtool_stats))((void *)mac_ctrl_drv,data);
  #line 1162 
  return;
}

#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
void hns_mac_get_strings(struct hns_mac_cb *mac_cb, int stringset, u8 *data)
{
  #line 1167 
  struct mac_driver *mac_ctrl_drv = hns_mac_get_drv(mac_cb);
  #line 1169 
  (*(mac_ctrl_drv->get_strings))((unsigned int)stringset,data);
  #line 1170 
  return;
}

#line 1172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
int hns_mac_get_sset_count(struct hns_mac_cb *mac_cb, int stringset)
{
  #line 1174 
  struct mac_driver *mac_ctrl_drv = hns_mac_get_drv(mac_cb);
  #line 1176 
  return (*(mac_ctrl_drv->get_sset_count))(stringset);
}

#line 1179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
void hns_mac_set_promisc(struct hns_mac_cb *mac_cb, u8 en)
{
  #line 1181 
  struct mac_driver *mac_ctrl_drv = hns_mac_get_drv(mac_cb);
  #line 1183 
  hns_dsaf_set_promisc_tcam(mac_cb->dsaf_dev,(unsigned int)mac_cb->mac_id,(_Bool)((unsigned int)en != 0U));
  #line 1185 
  if (mac_ctrl_drv->set_promiscuous != (void (*)(void *, u8 ))0) 
                                                                 #line 1186 
                                                                 (*(mac_ctrl_drv->set_promiscuous))((void *)mac_ctrl_drv,(unsigned char)((int)en));
  #line 1187 
  return;
}

#line 1189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
int hns_mac_get_regs_count(struct hns_mac_cb *mac_cb)
{
  #line 1191 
  struct mac_driver *mac_ctrl_drv = hns_mac_get_drv(mac_cb);
  #line 1193 
  return (*(mac_ctrl_drv->get_regs_count))();
}

#line 1196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
void hns_mac_get_regs(struct hns_mac_cb *mac_cb, void *data)
{
  #line 1198 
  struct mac_driver *mac_ctrl_drv = hns_mac_get_drv(mac_cb);
  #line 1200 
  (*(mac_ctrl_drv->get_regs))((void *)mac_ctrl_drv,data);
  #line 1201 
  return;
}

#line 1203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
void hns_set_led_opt(struct hns_mac_cb *mac_cb)
{
  #line 1206 
  int txpkts;
  #line 1206 
  int rxpkts;
  #line 1205 
  int nic_data = 0;
  #line 1208 
  txpkts = (int)(mac_cb->txpkt_for_led - mac_cb->hw_stats.tx_good_pkts);
  #line 1209 
  rxpkts = (int)(mac_cb->rxpkt_for_led - mac_cb->hw_stats.rx_good_pkts);
  #line 1210 
  if (txpkts != 0 || rxpkts != 0) 
                                  #line 1211 
                                  nic_data = 1; else 
                                                     #line 1213 
                                                     nic_data = 0;
  #line 1214 
  mac_cb->txpkt_for_led = mac_cb->hw_stats.tx_good_pkts;
  #line 1215 
  mac_cb->rxpkt_for_led = mac_cb->hw_stats.rx_good_pkts;
  #line 1216 
  (*(((mac_cb->dsaf_dev)->misc_op)->cpld_set_led))(mac_cb,(int)mac_cb->link,(unsigned short)((int)mac_cb->speed),nic_data);
  #line 1218 
  return;
}

#line 1220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_mac.c"
int hns_cpld_led_set_id(struct hns_mac_cb *mac_cb, enum hnae_led_state status)
{
  #line 1223 
  if (mac_cb == (struct hns_mac_cb *)0) 
                                        #line 1224 
                                        return 0;
  #line 1226 
  return (*(((mac_cb->dsaf_dev)->misc_op)->cpld_set_led_id))(mac_cb,status);
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_mac.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 135 
  return ldv_strncmp(cs,ct,count);
}

#line 209  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_mac.i.aux"
static bool IS_ERR_0(void *ptr)
{
  #line 212 
  return ldv_is_err(ptr);
}

#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_mac.i.aux"
static bool IS_ERR_OR_NULL_0(void *ptr)
{
  #line 219 
  return ldv_is_err_or_null(ptr);
}

#line 367  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_mac.i.aux"
static int cif_strcmp_0(char *cs, char *ct)
{
  #line 370 
  return ldv_strcmp(cs,ct);
}

#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_mac.i.aux"
static void *cif_devm_kzalloc_3(struct device *dev, size_t size, gfp_t flags)
{
  #line 679 
  return ldv_devm_kzalloc(size,flags);
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static u64 readq(void *addr)
{
  #line 95 
  u64 ret;
  #line 96 
  ldv_inline_asm();
  #line 95 
  return ret;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 672  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_xgmac.i.aux"
static void *cif_devm_kzalloc_4(struct device *dev, size_t size, gfp_t flags);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static struct mac_stats_string g_xgmac_stats_string[68U] = {{.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'m', (char)'i', (char)'n', (char)'t', (char)'o', (char)'6', (char)'4'}, .offset = 440UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'m', (char)'i', (char)'n', (char)'t', (char)'o', (char)'6', (char)'4'}, .offset = 432UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'m', (char)'i', (char)'n', (char)'t', (char)'o', (char)'6', (char)'4'}, .offset = 448UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'6', (char)'4'}, .offset = 456UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'6', (char)'5', (char)'t', (char)'o', (char)'1', (char)'2', (char)'7'}, .offset = 464UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'1', (char)'2', (char)'8', (char)'t', (char)'o', (char)'2', (char)'5', (char)'5'}, .offset = 472UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'2', (char)'5', (char)'6', (char)'t', (char)'o', (char)'5', (char)'1', (char)'1'}, .offset = 480UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'5', (char)'1', (char)'2', (char)'t', (char)'o', (char)'1', (char)'0', (char)'2', (char)'3'}, .offset = 488UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'t', (char)'o', (char)'1', (char)'5', (char)'1', (char)'8'}, .offset = 496UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'t', (char)'o', (char)'m', (char)'a', (char)'x'}, .offset = 504UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'t', (char)'o', (char)'m', (char)'a', (char)'x'}, .offset = 512UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'u', (char)'n', (char)'t', (char)'r', (char)'a', (char)'l', (char)'m', (char)'a', (char)'x'}, .offset = 520UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'u', (char)'n', (char)'t', (char)'r', (char)'a', (char)'l', (char)'m', (char)'a', (char)'x'}, .offset = 528UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'a', (char)'l', (char)'l'}, .offset = 368UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'a', (char)'l', (char)'l'}, .offset = 360UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t'}, .offset = 384UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'b', (char)'y', (char)'t'}, .offset = 376UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'u', (char)'c', (char)'_', (char)'p', (char)'k', (char)'t'}, .offset = 408UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'c', (char)'_', (char)'p', (char)'k', (char)'t'}, .offset = 416UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'c', (char)'_', (char)'p', (char)'k', (char)'t'}, .offset = 424UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 560UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'e', (char)'r', (char)'_', (char)'1', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'r'}, .offset = 568UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'e', (char)'r', (char)'_', (char)'2', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'r'}, .offset = 576UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'e', (char)'r', (char)'_', (char)'3', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'r'}, .offset = 584UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'e', (char)'r', (char)'_', (char)'4', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'r'}, .offset = 592UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'e', (char)'r', (char)'_', (char)'5', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'r'}, .offset = 600UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'e', (char)'r', (char)'_', (char)'6', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'r'}, .offset = 608UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'e', (char)'r', (char)'_', (char)'7', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'r'}, .offset = 616UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'c', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e'}, .offset = 624UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'1', (char)'7', (char)'3', (char)'1', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, .offset = 632UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'1', (char)'5', (char)'8', (char)'8', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, .offset = 640UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'f', (char)'r', (char)'o', (char)'m', (char)'_', (char)'d', (char)'s', (char)'a', (char)'f'}, .offset = 648UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'f', (char)'r', (char)'o', (char)'m', (char)'_', (char)'d', (char)'s', (char)'a', (char)'f'}, .offset = 656UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'6', (char)'4', (char)'t', (char)'o', (char)'m', (char)'a', (char)'x'}, .offset = 400UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'m', (char)'i', (char)'n', (char)'t', (char)'o', (char)'6', (char)'4'}, .offset = 64UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'m', (char)'i', (char)'n', (char)'t', (char)'o', (char)'6', (char)'4'}, .offset = 72UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'m', (char)'i', (char)'n', (char)'t', (char)'o', (char)'6', (char)'4'}, .offset = 80UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'6', (char)'4'}, .offset = 96UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'6', (char)'5', (char)'t', (char)'o', (char)'1', (char)'2', (char)'7'}, .offset = 104UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'1', (char)'2', (char)'8', (char)'t', (char)'o', (char)'2', (char)'5', (char)'5'}, .offset = 112UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'2', (char)'5', (char)'6', (char)'t', (char)'o', (char)'5', (char)'1', (char)'1'}, .offset = 120UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'5', (char)'1', (char)'2', (char)'t', (char)'o', (char)'1', (char)'0', (char)'2', (char)'3'}, .offset = 128UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'t', (char)'o', (char)'1', (char)'5', (char)'1', (char)'8'}, .offset = 136UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'t', (char)'o', (char)'m', (char)'a', (char)'x'}, .offset = 144UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'t', (char)'o', (char)'m', (char)'a', (char)'x'}, .offset = 152UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'u', (char)'n', (char)'t', (char)'r', (char)'a', (char)'m', (char)'a', (char)'x'}, .offset = 160UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'u', (char)'n', (char)'t', (char)'r', (char)'a', (char)'m', (char)'a', (char)'x'}, .offset = 168UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t'}}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'b', (char)'y', (char)'t'}, .offset = 8UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t'}, .offset = 16UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t'}, .offset = 24UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'u', (char)'c', (char)'_', (char)'p', (char)'k', (char)'t'}, .offset = 40UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'c', (char)'_', (char)'p', (char)'k', (char)'t'}, .offset = 48UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'c', (char)'_', (char)'p', (char)'k', (char)'t'}, .offset = 56UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'n', (char)'u', (char)'m'}, .offset = 216UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'e', (char)'r', (char)'_', (char)'1', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e'}, .offset = 224UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'e', (char)'r', (char)'_', (char)'2', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e'}, .offset = 232UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'e', (char)'r', (char)'_', (char)'3', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e'}, .offset = 240UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'e', (char)'r', (char)'_', (char)'4', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e'}, .offset = 248UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'e', (char)'r', (char)'_', (char)'5', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e'}, .offset = 256UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'e', (char)'r', (char)'_', (char)'6', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e'}, .offset = 264UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'e', (char)'r', (char)'_', (char)'7', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e'}, .offset = 272UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l'}, .offset = 280UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'t', (char)'o', (char)'d', (char)'s', (char)'a', (char)'f'}, .offset = 336UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'t', (char)'o', (char)'d', (char)'s', (char)'a', (char)'f'}, .offset = 344UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'1', (char)'7', (char)'3', (char)'1', (char)'_', (char)'p', (char)'k', (char)'t'}, .offset = 352UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'s', (char)'y', (char)'m', (char)'b', (char)'o', (char)'l', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'p', (char)'k', (char)'t'}, .offset = 328UL}, {.desc = {(char)'x', (char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'c', (char)'s', (char)'_', (char)'p', (char)'k', (char)'t'}, .offset = 176UL}};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_tx_enable(struct mac_driver *drv, u32 value)
{
  #line 93 
  dsaf_set_reg_field(drv->io_base,256U,1U,0U,(unsigned int)(value != 0U));
  #line 94 
  return;
}

#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_rx_enable(struct mac_driver *drv, u32 value)
{
  #line 103 
  dsaf_set_reg_field(drv->io_base,256U,2U,1U,(unsigned int)(value != 0U));
  #line 104 
  return;
}

#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_lf_rf_insert(struct mac_driver *mac_drv, u32 mode)
{
  #line 113 
  dsaf_set_reg_field(mac_drv->io_base,420U,12U,2U,mode);
  #line 114 
  return;
}

#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_lf_rf_control_init(struct mac_driver *mac_drv)
{
  #line 123 
  u32 val = 0U;
  #line 125 
  val &= 4294967294U;
  #line 125 
  val = val;
  #line 126 
  val &= 4294967293U;
  #line 126 
  val |= 2U;
  #line 127 
  val &= 4294967283U;
  #line 127 
  val = val;
  #line 128 
  dsaf_write_reg(mac_drv->io_base,420U,val);
  #line 129 
  return;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_enable(void *mac_drv, enum mac_commom_mode mode)
{
  #line 138 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 140 
  hns_xgmac_lf_rf_insert(drv,0U);
  #line 143 
  if (mode == (unsigned int)MAC_COMM_MODE_TX) 
                                              #line 144 
                                              hns_xgmac_tx_enable(drv,1U);
  else 
    #line 145 
    if (mode == (unsigned int)MAC_COMM_MODE_RX) 
                                                #line 146 
                                                hns_xgmac_rx_enable(drv,1U);
    else 
      #line 147 
      if (mode == (unsigned int)MAC_COMM_MODE_RX_AND_TX) {
        #line 148 
        hns_xgmac_tx_enable(drv,1U);
        #line 149 
        hns_xgmac_rx_enable(drv,1U);
      }
      else 
           #line 151 
           _dev_err(drv->dev,(char *)"error mac mode:%d\n",(unsigned int)mode);
  #line 152 
  return;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_disable(void *mac_drv, enum mac_commom_mode mode)
{
  #line 162 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 164 
  if (mode == (unsigned int)MAC_COMM_MODE_TX) 
                                              #line 165 
                                              hns_xgmac_tx_enable(drv,0U);
  else 
    #line 166 
    if (mode == (unsigned int)MAC_COMM_MODE_RX) 
                                                #line 167 
                                                hns_xgmac_rx_enable(drv,0U);
    else 
      #line 168 
      if (mode == (unsigned int)MAC_COMM_MODE_RX_AND_TX) {
        #line 169 
        hns_xgmac_tx_enable(drv,0U);
        #line 170 
        hns_xgmac_rx_enable(drv,0U);
      }
  #line 172 
  hns_xgmac_lf_rf_insert(drv,2U);
  #line 173 
  return;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_pma_fec_enable(struct mac_driver *drv, u32 tx_value, u32 rx_value)
{
  #line 185 
  u32 origin = dsaf_read_reg(drv->io_base,1860U);
  #line 187 
  origin &= 4294967294U;
  #line 187 
  origin = (unsigned int)(tx_value != 0U) | origin;
  {
    #line 188 
    unsigned int tmp_0;
    #line 188 
    origin &= 4294967293U;
    #line 188 
    if (rx_value != 0U) 
                        #line 188 
                        tmp_0 = 2U; else 
                                         #line 188 
                                         tmp_0 = 0U;
    #line 188 
    origin = tmp_0 | origin;
  }
  #line 189 
  dsaf_write_reg(drv->io_base,1860U,origin);
  #line 190 
  return;
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_exc_irq_en(struct mac_driver *drv, u32 en)
{
  #line 196 
  unsigned int tmp;
  #line 195 
  u32 clr_vlue = 4294967295U;
  #line 196 
  if (en != 0U) 
                #line 196 
                tmp = 4294967295U; else 
                                        #line 196 
                                        tmp = 0U;
  #line 196 
  u32 msk_vlue = tmp;
  #line 198 
  dsaf_write_reg(drv->io_base,0U,clr_vlue);
  #line 199 
  dsaf_write_reg(drv->io_base,4U,msk_vlue);
  #line 200 
  return;
}

#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_init(void *mac_drv)
{
  #line 208 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 210 
  struct dsaf_device *dsaf_dev = dev_get_drvdata(drv->dev);
  #line 211 
  u32 port = (unsigned int)drv->mac_id;
  #line 213 
  (*((dsaf_dev->misc_op)->xge_srst))(dsaf_dev,port,(_Bool)0);
  #line 214 
  msleep(100U);
  #line 215 
  (*((dsaf_dev->misc_op)->xge_srst))(dsaf_dev,port,(_Bool)1);
  #line 217 
  msleep(100U);
  #line 218 
  hns_xgmac_lf_rf_control_init(drv);
  #line 219 
  hns_xgmac_exc_irq_en(drv,0U);
  #line 221 
  hns_xgmac_pma_fec_enable(drv,0U,0U);
  #line 223 
  hns_xgmac_disable(mac_drv,(enum mac_commom_mode)MAC_COMM_MODE_RX_AND_TX);
  #line 224 
  return;
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_config_pad_and_crc(void *mac_drv, u8 newval)
{
  #line 233 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 234 
  u32 origin = dsaf_read_reg(drv->io_base,260U);
  {
    #line 236 
    unsigned int tmp_0;
    #line 236 
    origin &= 4294967293U;
    #line 236 
    if ((unsigned int)newval != 0U) 
                                    #line 236 
                                    tmp_0 = 2U; else 
                                                     #line 236 
                                                     tmp_0 = 0U;
    #line 236 
    origin = tmp_0 | origin;
  }
  #line 237 
  origin &= 4294967294U;
  #line 237 
  origin = (unsigned int)((unsigned int)newval != 0U) | origin;
  {
    #line 238 
    unsigned int tmp_1;
    #line 238 
    origin &= 4294901759U;
    #line 238 
    if ((unsigned int)newval != 0U) 
                                    #line 238 
                                    tmp_1 = 65536U; else 
                                                         #line 238 
                                                         tmp_1 = 0U;
    #line 238 
    origin = tmp_1 | origin;
  }
  #line 239 
  dsaf_write_reg(drv->io_base,260U,origin);
  #line 240 
  return;
}

#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_pausefrm_cfg(void *mac_drv, u32 rx_en, u32 tx_en)
{
  #line 249 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 250 
  u32 origin = dsaf_read_reg(drv->io_base,352U);
  #line 252 
  origin &= 4294967294U;
  #line 252 
  origin = (unsigned int)(tx_en != 0U) | origin;
  {
    #line 253 
    unsigned int tmp_0;
    #line 253 
    origin &= 4294967293U;
    #line 253 
    if (rx_en != 0U) 
                     #line 253 
                     tmp_0 = 2U; else 
                                      #line 253 
                                      tmp_0 = 0U;
    #line 253 
    origin = tmp_0 | origin;
  }
  #line 254 
  dsaf_write_reg(drv->io_base,352U,origin);
  #line 255 
  return;
}

#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_set_pausefrm_mac_addr(void *mac_drv, char *mac_addr)
{
  #line 259 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 261 
  u32 high_val = (unsigned int)((int)*(mac_addr + 1U) | ((int)*mac_addr << 8));
  #line 262 
  u32 low_val = (unsigned int)((((int)*(mac_addr + 5U) | ((int)*(mac_addr + 4U) << 8)) | ((int)*(mac_addr + 3U) << 16)) | ((int)*(mac_addr + 2U) << 24));
  #line 264 
  dsaf_write_reg(drv->io_base,368U,low_val);
  #line 265 
  dsaf_write_reg(drv->io_base,364U,high_val);
  #line 266 
  return;
}

#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_set_rx_ignore_pause_frames(void *mac_drv, u32 enable)
{
  #line 275 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 277 
  dsaf_set_reg_field(drv->io_base,352U,2U,1U,(unsigned int)(enable != 0U));
  #line 278 
  return;
}

#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_set_tx_auto_pause_frames(void *mac_drv, u16 enable)
{
  #line 288 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 290 
  dsaf_set_reg_field(drv->io_base,352U,1U,0U,(unsigned int)((unsigned int)enable != 0U));
  #line 294 
  if ((unsigned int)enable != 0U) 
                                  #line 295 
                                  dsaf_write_reg(drv->io_base,356U,(unsigned int)enable);
  #line 296 
  return;
}

#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_config_max_frame_length(void *mac_drv, u16 newval)
{
  #line 305 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 307 
  dsaf_write_reg(drv->io_base,316U,(unsigned int)newval);
  #line 308 
  return;
}

#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_update_stats(void *mac_drv)
{
  #line 312 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 313 
  struct mac_hw_stats *hw_stats = & (drv->mac_cb)->hw_stats;
  #line 317 
  hw_stats->tx_fragment_err = readq((void *)(drv->io_base + 3072U));
  #line 319 
  hw_stats->tx_undersize = readq((void *)(drv->io_base + 3080U));
  #line 321 
  hw_stats->tx_under_min_pkts = readq((void *)(drv->io_base + 3088U));
  #line 322 
  hw_stats->tx_64bytes = readq((void *)(drv->io_base + 3096U));
  #line 324 
  hw_stats->tx_65to127 = readq((void *)(drv->io_base + 3104U));
  #line 326 
  hw_stats->tx_128to255 = readq((void *)(drv->io_base + 3112U));
  #line 328 
  hw_stats->tx_256to511 = readq((void *)(drv->io_base + 3120U));
  #line 330 
  hw_stats->tx_512to1023 = readq((void *)(drv->io_base + 3128U));
  #line 332 
  hw_stats->tx_1024to1518 = readq((void *)(drv->io_base + 3136U));
  #line 334 
  hw_stats->tx_1519tomax = readq((void *)(drv->io_base + 3144U));
  #line 336 
  hw_stats->tx_1519tomax_good = readq((void *)(drv->io_base + 3152U));
  #line 337 
  hw_stats->tx_oversize = readq((void *)(drv->io_base + 3160U));
  #line 338 
  hw_stats->tx_jabber_err = readq((void *)(drv->io_base + 3168U));
  #line 339 
  hw_stats->tx_good_pkts = readq((void *)(drv->io_base + 3176U));
  #line 340 
  hw_stats->tx_good_bytes = readq((void *)(drv->io_base + 3184U));
  #line 341 
  hw_stats->tx_total_pkts = readq((void *)(drv->io_base + 3192U));
  #line 343 
  hw_stats->tx_total_bytes = readq((void *)(drv->io_base + 3200U));
  #line 344 
  hw_stats->tx_uc_pkts = readq((void *)(drv->io_base + 3208U));
  #line 345 
  hw_stats->tx_mc_pkts = readq((void *)(drv->io_base + 3216U));
  #line 346 
  hw_stats->tx_bc_pkts = readq((void *)(drv->io_base + 3224U));
  #line 347 
  hw_stats->tx_pfc_tc0 = readq((void *)(drv->io_base + 3232U));
  #line 348 
  hw_stats->tx_pfc_tc1 = readq((void *)(drv->io_base + 3240U));
  #line 349 
  hw_stats->tx_pfc_tc2 = readq((void *)(drv->io_base + 3248U));
  #line 350 
  hw_stats->tx_pfc_tc3 = readq((void *)(drv->io_base + 3256U));
  #line 351 
  hw_stats->tx_pfc_tc4 = readq((void *)(drv->io_base + 3264U));
  #line 352 
  hw_stats->tx_pfc_tc5 = readq((void *)(drv->io_base + 3272U));
  #line 353 
  hw_stats->tx_pfc_tc6 = readq((void *)(drv->io_base + 3280U));
  #line 354 
  hw_stats->tx_pfc_tc7 = readq((void *)(drv->io_base + 3288U));
  #line 355 
  hw_stats->tx_ctrl = readq((void *)(drv->io_base + 3296U));
  #line 356 
  hw_stats->tx_1731_pkts = readq((void *)(drv->io_base + 3304U));
  #line 357 
  hw_stats->tx_1588_pkts = readq((void *)(drv->io_base + 3312U));
  #line 359 
  hw_stats->rx_good_from_sw = readq((void *)(drv->io_base + 3320U));
  #line 361 
  hw_stats->rx_bad_from_sw = readq((void *)(drv->io_base + 3328U));
  #line 362 
  hw_stats->tx_bad_pkts = readq((void *)(drv->io_base + 3336U));
  #line 366 
  hw_stats->rx_fragment_err = readq((void *)(drv->io_base + 3344U));
  #line 368 
  hw_stats->rx_undersize = readq((void *)(drv->io_base + 3352U));
  #line 370 
  hw_stats->rx_under_min = readq((void *)(drv->io_base + 3360U));
  #line 371 
  hw_stats->rx_64bytes = readq((void *)(drv->io_base + 3368U));
  #line 373 
  hw_stats->rx_65to127 = readq((void *)(drv->io_base + 3376U));
  #line 375 
  hw_stats->rx_128to255 = readq((void *)(drv->io_base + 3384U));
  #line 377 
  hw_stats->rx_256to511 = readq((void *)(drv->io_base + 3392U));
  #line 379 
  hw_stats->rx_512to1023 = readq((void *)(drv->io_base + 3400U));
  #line 381 
  hw_stats->rx_1024to1518 = readq((void *)(drv->io_base + 3408U));
  #line 383 
  hw_stats->rx_1519tomax = readq((void *)(drv->io_base + 3416U));
  #line 385 
  hw_stats->rx_1519tomax_good = readq((void *)(drv->io_base + 3424U));
  #line 386 
  hw_stats->rx_oversize = readq((void *)(drv->io_base + 3432U));
  #line 387 
  hw_stats->rx_jabber_err = readq((void *)(drv->io_base + 3440U));
  #line 388 
  hw_stats->rx_good_pkts = readq((void *)(drv->io_base + 3448U));
  #line 389 
  hw_stats->rx_good_bytes = readq((void *)(drv->io_base + 3456U));
  #line 390 
  hw_stats->rx_total_pkts = readq((void *)(drv->io_base + 3464U));
  #line 392 
  hw_stats->rx_total_bytes = readq((void *)(drv->io_base + 3472U));
  #line 393 
  hw_stats->rx_uc_pkts = readq((void *)(drv->io_base + 3480U));
  #line 394 
  hw_stats->rx_mc_pkts = readq((void *)(drv->io_base + 3488U));
  #line 395 
  hw_stats->rx_bc_pkts = readq((void *)(drv->io_base + 3496U));
  #line 396 
  hw_stats->rx_pfc_tc0 = readq((void *)(drv->io_base + 3504U));
  #line 397 
  hw_stats->rx_pfc_tc1 = readq((void *)(drv->io_base + 3512U));
  #line 398 
  hw_stats->rx_pfc_tc2 = readq((void *)(drv->io_base + 3520U));
  #line 399 
  hw_stats->rx_pfc_tc3 = readq((void *)(drv->io_base + 3528U));
  #line 400 
  hw_stats->rx_pfc_tc4 = readq((void *)(drv->io_base + 3536U));
  #line 401 
  hw_stats->rx_pfc_tc5 = readq((void *)(drv->io_base + 3544U));
  #line 402 
  hw_stats->rx_pfc_tc6 = readq((void *)(drv->io_base + 3552U));
  #line 403 
  hw_stats->rx_pfc_tc7 = readq((void *)(drv->io_base + 3560U));
  #line 406 
  hw_stats->rx_unknown_ctrl = readq((void *)(drv->io_base + 3568U));
  #line 408 
  hw_stats->tx_good_to_sw = readq((void *)(drv->io_base + 3576U));
  #line 410 
  hw_stats->tx_bad_to_sw = readq((void *)(drv->io_base + 3584U));
  #line 411 
  hw_stats->rx_1731_pkts = readq((void *)(drv->io_base + 3592U));
  #line 413 
  hw_stats->rx_symbol_err = readq((void *)(drv->io_base + 3600U));
  #line 414 
  hw_stats->rx_fcs_err = readq((void *)(drv->io_base + 3608U));
  #line 415 
  return;
}

#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_free(void *mac_drv)
{
  #line 423 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 425 
  struct dsaf_device *dsaf_dev = dev_get_drvdata(drv->dev);
  #line 427 
  u32 mac_id = (unsigned int)drv->mac_id;
  #line 429 
  (*((dsaf_dev->misc_op)->xge_srst))(dsaf_dev,mac_id,(_Bool)0);
  #line 430 
  return;
}

#line 437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_get_info(void *mac_drv, struct mac_info *mac_info)
{
  #line 440 
  u32 pause_time;
  #line 440 
  u32 pause_ctrl;
  #line 440 
  u32 port_mode;
  #line 440 
  u32 ctrl_val;
  #line 439 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 442 
  ctrl_val = dsaf_read_reg(drv->io_base,260U);
  #line 443 
  mac_info->pad_and_crc_en = (unsigned char)((unsigned int)((unsigned char)((unsigned long long)ctrl_val >> 1)) & 1U);
  #line 444 
  mac_info->auto_neg = (unsigned char)0U;
  #line 446 
  pause_time = dsaf_read_reg(drv->io_base,356U);
  #line 447 
  mac_info->tx_pause_time = (unsigned char)pause_time;
  #line 449 
  port_mode = dsaf_read_reg(drv->io_base,64U);
  #line 450 
  mac_info->port_en = (unsigned char)(((port_mode & 3U) != 0U && ((port_mode >> 4) & 3U) != 0U) != 0);
  #line 454 
  mac_info->duplex = (unsigned char)1U;
  #line 455 
  mac_info->speed = (unsigned short)10000U;
  #line 457 
  pause_ctrl = dsaf_read_reg(drv->io_base,352U);
  #line 458 
  mac_info->rx_pause_en = (unsigned char)((unsigned int)((unsigned char)((unsigned long long)pause_ctrl >> 1)) & 1U);
  #line 459 
  mac_info->tx_pause_en = (unsigned char)((unsigned int)((unsigned char)pause_ctrl) & 1U);
  #line 460 
  return;
}

#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_get_pausefrm_cfg(void *mac_drv, u32 *rx_en, u32 *tx_en)
{
  #line 471 
  u32 pause_ctrl;
  #line 470 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 473 
  pause_ctrl = dsaf_read_reg(drv->io_base,352U);
  #line 474 
  *rx_en = (unsigned int)((unsigned long long)pause_ctrl >> 1) & 1U;
  #line 475 
  *tx_en = pause_ctrl & 1U;
  #line 476 
  return;
}

#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_get_link_status(void *mac_drv, u32 *link_stat)
{
  #line 485 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 487 
  *link_stat = dsaf_read_reg(drv->io_base,84U);
  #line 488 
  return;
}

#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_get_regs(void *mac_drv, void *data)
{
  #line 501 
  u64 qtmp;
  #line 498 
  u32 i = 0U;
  #line 499 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 500 
  u32 *regs = (u32 *)data;
  #line 504 
  *regs = dsaf_read_reg(drv->io_base,0U);
  #line 505 
  *(regs + 1U) = dsaf_read_reg(drv->io_base,4U);
  #line 506 
  *(regs + 2U) = dsaf_read_reg(drv->io_base,8U);
  #line 507 
  *(regs + 3U) = dsaf_read_reg(drv->io_base,12U);
  #line 508 
  *(regs + 4U) = dsaf_read_reg(drv->io_base,16U);
  #line 509 
  *(regs + 5U) = dsaf_read_reg(drv->io_base,20U);
  #line 510 
  *(regs + 6U) = dsaf_read_reg(drv->io_base,64U);
  #line 511 
  *(regs + 7U) = dsaf_read_reg(drv->io_base,68U);
  #line 512 
  *(regs + 8U) = dsaf_read_reg(drv->io_base,72U);
  #line 513 
  *(regs + 9U) = dsaf_read_reg(drv->io_base,80U);
  #line 514 
  *(regs + 10U) = dsaf_read_reg(drv->io_base,84U);
  #line 516 
  *(regs + 11U) = dsaf_read_reg(drv->io_base,192U);
  #line 517 
  *(regs + 12U) = dsaf_read_reg(drv->io_base,196U);
  #line 518 
  *(regs + 13U) = dsaf_read_reg(drv->io_base,256U);
  #line 519 
  *(regs + 14U) = dsaf_read_reg(drv->io_base,260U);
  #line 520 
  *(regs + 15U) = dsaf_read_reg(drv->io_base,288U);
  #line 521 
  *(regs + 16U) = dsaf_read_reg(drv->io_base,292U);
  #line 522 
  *(regs + 17U) = dsaf_read_reg(drv->io_base,296U);
  #line 523 
  *(regs + 18U) = dsaf_read_reg(drv->io_base,300U);
  #line 524 
  *(regs + 19U) = dsaf_read_reg(drv->io_base,304U);
  #line 525 
  *(regs + 20U) = dsaf_read_reg(drv->io_base,308U);
  #line 526 
  *(regs + 21U) = dsaf_read_reg(drv->io_base,312U);
  #line 527 
  *(regs + 22U) = dsaf_read_reg(drv->io_base,316U);
  #line 528 
  *(regs + 23U) = dsaf_read_reg(drv->io_base,352U);
  #line 529 
  *(regs + 24U) = dsaf_read_reg(drv->io_base,356U);
  #line 530 
  *(regs + 25U) = dsaf_read_reg(drv->io_base,360U);
  #line 531 
  *(regs + 26U) = dsaf_read_reg(drv->io_base,364U);
  #line 532 
  *(regs + 27U) = dsaf_read_reg(drv->io_base,368U);
  #line 533 
  *(regs + 28U) = dsaf_read_reg(drv->io_base,372U);
  #line 534 
  *(regs + 29U) = dsaf_read_reg(drv->io_base,376U);
  #line 535 
  *(regs + 30U) = dsaf_read_reg(drv->io_base,380U);
  #line 536 
  *(regs + 31U) = dsaf_read_reg(drv->io_base,384U);
  #line 537 
  *(regs + 32U) = dsaf_read_reg(drv->io_base,388U);
  #line 538 
  *(regs + 33U) = dsaf_read_reg(drv->io_base,392U);
  #line 539 
  *(regs + 34U) = dsaf_read_reg(drv->io_base,396U);
  #line 540 
  *(regs + 35U) = dsaf_read_reg(drv->io_base,400U);
  #line 542 
  *(regs + 36U) = dsaf_read_reg(drv->io_base,404U);
  #line 543 
  *(regs + 37U) = dsaf_read_reg(drv->io_base,408U);
  #line 544 
  *(regs + 38U) = dsaf_read_reg(drv->io_base,412U);
  #line 545 
  *(regs + 39U) = dsaf_read_reg(drv->io_base,416U);
  #line 546 
  *(regs + 40U) = dsaf_read_reg(drv->io_base,420U);
  #line 547 
  *(regs + 41U) = dsaf_read_reg(drv->io_base,424U);
  #line 548 
  *(regs + 42U) = dsaf_read_reg(drv->io_base,448U);
  #line 549 
  *(regs + 43U) = dsaf_read_reg(drv->io_base,452U);
  #line 550 
  *(regs + 44U) = dsaf_read_reg(drv->io_base,456U);
  #line 551 
  *(regs + 45U) = dsaf_read_reg(drv->io_base,460U);
  #line 552 
  *(regs + 46U) = dsaf_read_reg(drv->io_base,464U);
  #line 553 
  *(regs + 47U) = dsaf_read_reg(drv->io_base,468U);
  #line 554 
  *(regs + 48U) = dsaf_read_reg(drv->io_base,472U);
  #line 555 
  *(regs + 49U) = dsaf_read_reg(drv->io_base,476U);
  #line 556 
  *(regs + 50U) = dsaf_read_reg(drv->io_base,480U);
  #line 558 
  *(regs + 51U) = dsaf_read_reg(drv->io_base,816U);
  #line 559 
  *(regs + 52U) = dsaf_read_reg(drv->io_base,1028U);
  #line 560 
  *(regs + 53U) = dsaf_read_reg(drv->io_base,1040U);
  #line 561 
  *(regs + 54U) = dsaf_read_reg(drv->io_base,1044U);
  #line 562 
  *(regs + 55U) = dsaf_read_reg(drv->io_base,1056U);
  #line 563 
  *(regs + 56U) = dsaf_read_reg(drv->io_base,1060U);
  #line 564 
  *(regs + 57U) = dsaf_read_reg(drv->io_base,1064U);
  #line 565 
  *(regs + 58U) = dsaf_read_reg(drv->io_base,1068U);
  #line 566 
  *(regs + 59U) = dsaf_read_reg(drv->io_base,1072U);
  #line 567 
  *(regs + 60U) = dsaf_read_reg(drv->io_base,1076U);
  #line 568 
  *(regs + 61U) = dsaf_read_reg(drv->io_base,1216U);
  #line 569 
  *(regs + 62U) = dsaf_read_reg(drv->io_base,1220U);
  #line 570 
  *(regs + 63U) = dsaf_read_reg(drv->io_base,1224U);
  #line 571 
  *(regs + 64U) = dsaf_read_reg(drv->io_base,1228U);
  #line 573 
  *(regs + 65U) = dsaf_read_reg(drv->io_base,1792U);
  #line 574 
  *(regs + 66U) = dsaf_read_reg(drv->io_base,1796U);
  #line 575 
  *(regs + 67U) = dsaf_read_reg(drv->io_base,1800U);
  #line 576 
  *(regs + 68U) = dsaf_read_reg(drv->io_base,1804U);
  #line 577 
  *(regs + 69U) = dsaf_read_reg(drv->io_base,1856U);
  #line 578 
  *(regs + 70U) = dsaf_read_reg(drv->io_base,1860U);
  #line 579 
  *(regs + 71U) = dsaf_read_reg(drv->io_base,1872U);
  #line 580 
  *(regs + 72U) = dsaf_read_reg(drv->io_base,1888U);
  #line 589 
  qtmp = readq((void *)(drv->io_base + 3072U));
  #line 590 
  *(regs + 73U) = (unsigned int)qtmp;
  #line 590 
  *(regs + 74U) = (unsigned int)(qtmp >> 32);
  #line 591 
  qtmp = readq((void *)(drv->io_base + 3080U));
  #line 592 
  *(regs + 75U) = (unsigned int)qtmp;
  #line 592 
  *(regs + 76U) = (unsigned int)(qtmp >> 32);
  #line 593 
  qtmp = readq((void *)(drv->io_base + 3088U));
  #line 594 
  *(regs + 77U) = (unsigned int)qtmp;
  #line 594 
  *(regs + 78U) = (unsigned int)(qtmp >> 32);
  #line 595 
  qtmp = readq((void *)(drv->io_base + 3096U));
  #line 596 
  *(regs + 79U) = (unsigned int)qtmp;
  #line 596 
  *(regs + 80U) = (unsigned int)(qtmp >> 32);
  #line 597 
  qtmp = readq((void *)(drv->io_base + 3104U));
  #line 598 
  *(regs + 81U) = (unsigned int)qtmp;
  #line 598 
  *(regs + 82U) = (unsigned int)(qtmp >> 32);
  #line 599 
  qtmp = readq((void *)(drv->io_base + 3112U));
  #line 600 
  *(regs + 83U) = (unsigned int)qtmp;
  #line 600 
  *(regs + 84U) = (unsigned int)(qtmp >> 32);
  #line 601 
  qtmp = readq((void *)(drv->io_base + 3120U));
  #line 602 
  *(regs + 85U) = (unsigned int)qtmp;
  #line 602 
  *(regs + 86U) = (unsigned int)(qtmp >> 32);
  #line 603 
  qtmp = readq((void *)(drv->io_base + 3128U));
  #line 604 
  *(regs + 87U) = (unsigned int)qtmp;
  #line 604 
  *(regs + 88U) = (unsigned int)(qtmp >> 32);
  #line 605 
  qtmp = readq((void *)(drv->io_base + 3136U));
  #line 606 
  *(regs + 89U) = (unsigned int)qtmp;
  #line 606 
  *(regs + 90U) = (unsigned int)(qtmp >> 32);
  #line 607 
  qtmp = readq((void *)(drv->io_base + 3144U));
  #line 608 
  *(regs + 91U) = (unsigned int)qtmp;
  #line 608 
  *(regs + 92U) = (unsigned int)(qtmp >> 32);
  #line 609 
  qtmp = readq((void *)(drv->io_base + 3152U));
  #line 610 
  *(regs + 93U) = (unsigned int)qtmp;
  #line 610 
  *(regs + 94U) = (unsigned int)(qtmp >> 32);
  #line 611 
  qtmp = readq((void *)(drv->io_base + 3160U));
  #line 612 
  *(regs + 95U) = (unsigned int)qtmp;
  #line 612 
  *(regs + 96U) = (unsigned int)(qtmp >> 32);
  #line 613 
  qtmp = readq((void *)(drv->io_base + 3168U));
  #line 614 
  *(regs + 97U) = (unsigned int)qtmp;
  #line 614 
  *(regs + 98U) = (unsigned int)(qtmp >> 32);
  #line 615 
  qtmp = readq((void *)(drv->io_base + 3176U));
  #line 616 
  *(regs + 99U) = (unsigned int)qtmp;
  #line 616 
  *(regs + 100U) = (unsigned int)(qtmp >> 32);
  #line 617 
  qtmp = readq((void *)(drv->io_base + 3184U));
  #line 618 
  *(regs + 101U) = (unsigned int)qtmp;
  #line 618 
  *(regs + 102U) = (unsigned int)(qtmp >> 32);
  #line 619 
  qtmp = readq((void *)(drv->io_base + 3192U));
  #line 620 
  *(regs + 103U) = (unsigned int)qtmp;
  #line 620 
  *(regs + 104U) = (unsigned int)(qtmp >> 32);
  #line 621 
  qtmp = readq((void *)(drv->io_base + 3200U));
  #line 622 
  *(regs + 105U) = (unsigned int)qtmp;
  #line 622 
  *(regs + 106U) = (unsigned int)(qtmp >> 32);
  #line 623 
  qtmp = readq((void *)(drv->io_base + 3208U));
  #line 624 
  *(regs + 107U) = (unsigned int)qtmp;
  #line 624 
  *(regs + 108U) = (unsigned int)(qtmp >> 32);
  #line 625 
  qtmp = readq((void *)(drv->io_base + 3216U));
  #line 626 
  *(regs + 109U) = (unsigned int)qtmp;
  #line 626 
  *(regs + 110U) = (unsigned int)(qtmp >> 32);
  #line 627 
  qtmp = readq((void *)(drv->io_base + 3224U));
  #line 628 
  *(regs + 111U) = (unsigned int)qtmp;
  #line 628 
  *(regs + 112U) = (unsigned int)(qtmp >> 32);
  #line 629 
  qtmp = readq((void *)(drv->io_base + 3232U));
  #line 630 
  *(regs + 113U) = (unsigned int)qtmp;
  #line 630 
  *(regs + 114U) = (unsigned int)(qtmp >> 32);
  #line 631 
  qtmp = readq((void *)(drv->io_base + 3240U));
  #line 632 
  *(regs + 115U) = (unsigned int)qtmp;
  #line 632 
  *(regs + 116U) = (unsigned int)(qtmp >> 32);
  #line 633 
  qtmp = readq((void *)(drv->io_base + 3248U));
  #line 634 
  *(regs + 117U) = (unsigned int)qtmp;
  #line 634 
  *(regs + 118U) = (unsigned int)(qtmp >> 32);
  #line 635 
  qtmp = readq((void *)(drv->io_base + 3256U));
  #line 636 
  *(regs + 119U) = (unsigned int)qtmp;
  #line 636 
  *(regs + 120U) = (unsigned int)(qtmp >> 32);
  #line 637 
  qtmp = readq((void *)(drv->io_base + 3264U));
  #line 638 
  *(regs + 121U) = (unsigned int)qtmp;
  #line 638 
  *(regs + 122U) = (unsigned int)(qtmp >> 32);
  #line 639 
  qtmp = readq((void *)(drv->io_base + 3272U));
  #line 640 
  *(regs + 123U) = (unsigned int)qtmp;
  #line 640 
  *(regs + 124U) = (unsigned int)(qtmp >> 32);
  #line 641 
  qtmp = readq((void *)(drv->io_base + 3280U));
  #line 642 
  *(regs + 125U) = (unsigned int)qtmp;
  #line 642 
  *(regs + 126U) = (unsigned int)(qtmp >> 32);
  #line 643 
  qtmp = readq((void *)(drv->io_base + 3288U));
  #line 644 
  *(regs + 127U) = (unsigned int)qtmp;
  #line 644 
  *(regs + 128U) = (unsigned int)(qtmp >> 32);
  #line 645 
  qtmp = readq((void *)(drv->io_base + 3296U));
  #line 646 
  *(regs + 129U) = (unsigned int)qtmp;
  #line 646 
  *(regs + 130U) = (unsigned int)(qtmp >> 32);
  #line 647 
  qtmp = readq((void *)(drv->io_base + 3304U));
  #line 648 
  *(regs + 131U) = (unsigned int)qtmp;
  #line 648 
  *(regs + 132U) = (unsigned int)(qtmp >> 32);
  #line 649 
  qtmp = readq((void *)(drv->io_base + 3312U));
  #line 650 
  *(regs + 133U) = (unsigned int)qtmp;
  #line 650 
  *(regs + 134U) = (unsigned int)(qtmp >> 32);
  #line 651 
  qtmp = readq((void *)(drv->io_base + 3320U));
  #line 652 
  *(regs + 135U) = (unsigned int)qtmp;
  #line 652 
  *(regs + 136U) = (unsigned int)(qtmp >> 32);
  #line 653 
  qtmp = readq((void *)(drv->io_base + 3328U));
  #line 654 
  *(regs + 137U) = (unsigned int)qtmp;
  #line 654 
  *(regs + 138U) = (unsigned int)(qtmp >> 32);
  #line 655 
  qtmp = readq((void *)(drv->io_base + 3336U));
  #line 656 
  *(regs + 139U) = (unsigned int)qtmp;
  #line 656 
  *(regs + 140U) = (unsigned int)(qtmp >> 32);
  #line 659 
  qtmp = readq((void *)(drv->io_base + 3344U));
  #line 660 
  *(regs + 141U) = (unsigned int)qtmp;
  #line 660 
  *(regs + 142U) = (unsigned int)(qtmp >> 32);
  #line 661 
  qtmp = readq((void *)(drv->io_base + 3352U));
  #line 662 
  *(regs + 143U) = (unsigned int)qtmp;
  #line 662 
  *(regs + 144U) = (unsigned int)(qtmp >> 32);
  #line 663 
  qtmp = readq((void *)(drv->io_base + 3360U));
  #line 664 
  *(regs + 145U) = (unsigned int)qtmp;
  #line 664 
  *(regs + 146U) = (unsigned int)(qtmp >> 32);
  #line 665 
  qtmp = readq((void *)(drv->io_base + 3368U));
  #line 666 
  *(regs + 147U) = (unsigned int)qtmp;
  #line 666 
  *(regs + 148U) = (unsigned int)(qtmp >> 32);
  #line 667 
  qtmp = readq((void *)(drv->io_base + 3376U));
  #line 668 
  *(regs + 149U) = (unsigned int)qtmp;
  #line 668 
  *(regs + 150U) = (unsigned int)(qtmp >> 32);
  #line 669 
  qtmp = readq((void *)(drv->io_base + 3384U));
  #line 670 
  *(regs + 151U) = (unsigned int)qtmp;
  #line 670 
  *(regs + 152U) = (unsigned int)(qtmp >> 32);
  #line 671 
  qtmp = readq((void *)(drv->io_base + 3392U));
  #line 672 
  *(regs + 153U) = (unsigned int)qtmp;
  #line 672 
  *(regs + 154U) = (unsigned int)(qtmp >> 32);
  #line 673 
  qtmp = readq((void *)(drv->io_base + 3400U));
  #line 674 
  *(regs + 155U) = (unsigned int)qtmp;
  #line 674 
  *(regs + 156U) = (unsigned int)(qtmp >> 32);
  #line 675 
  qtmp = readq((void *)(drv->io_base + 3408U));
  #line 676 
  *(regs + 157U) = (unsigned int)qtmp;
  #line 676 
  *(regs + 158U) = (unsigned int)(qtmp >> 32);
  #line 677 
  qtmp = readq((void *)(drv->io_base + 3416U));
  #line 678 
  *(regs + 159U) = (unsigned int)qtmp;
  #line 678 
  *(regs + 160U) = (unsigned int)(qtmp >> 32);
  #line 679 
  qtmp = readq((void *)(drv->io_base + 3424U));
  #line 680 
  *(regs + 161U) = (unsigned int)qtmp;
  #line 680 
  *(regs + 162U) = (unsigned int)(qtmp >> 32);
  #line 681 
  qtmp = readq((void *)(drv->io_base + 3432U));
  #line 682 
  *(regs + 163U) = (unsigned int)qtmp;
  #line 682 
  *(regs + 164U) = (unsigned int)(qtmp >> 32);
  #line 683 
  qtmp = readq((void *)(drv->io_base + 3440U));
  #line 684 
  *(regs + 165U) = (unsigned int)qtmp;
  #line 684 
  *(regs + 166U) = (unsigned int)(qtmp >> 32);
  #line 685 
  qtmp = readq((void *)(drv->io_base + 3448U));
  #line 686 
  *(regs + 167U) = (unsigned int)qtmp;
  #line 686 
  *(regs + 168U) = (unsigned int)(qtmp >> 32);
  #line 687 
  qtmp = readq((void *)(drv->io_base + 3456U));
  #line 688 
  *(regs + 169U) = (unsigned int)qtmp;
  #line 688 
  *(regs + 170U) = (unsigned int)(qtmp >> 32);
  #line 689 
  qtmp = readq((void *)(drv->io_base + 3464U));
  #line 690 
  *(regs + 171U) = (unsigned int)qtmp;
  #line 690 
  *(regs + 172U) = (unsigned int)(qtmp >> 32);
  #line 691 
  qtmp = readq((void *)(drv->io_base + 3472U));
  #line 692 
  *(regs + 173U) = (unsigned int)qtmp;
  #line 692 
  *(regs + 174U) = (unsigned int)(qtmp >> 32);
  #line 693 
  qtmp = readq((void *)(drv->io_base + 3480U));
  #line 694 
  *(regs + 175U) = (unsigned int)qtmp;
  #line 694 
  *(regs + 176U) = (unsigned int)(qtmp >> 32);
  #line 695 
  qtmp = readq((void *)(drv->io_base + 3488U));
  #line 696 
  *(regs + 177U) = (unsigned int)qtmp;
  #line 696 
  *(regs + 178U) = (unsigned int)(qtmp >> 32);
  #line 697 
  qtmp = readq((void *)(drv->io_base + 3496U));
  #line 698 
  *(regs + 179U) = (unsigned int)qtmp;
  #line 698 
  *(regs + 180U) = (unsigned int)(qtmp >> 32);
  #line 699 
  qtmp = readq((void *)(drv->io_base + 3504U));
  #line 700 
  *(regs + 181U) = (unsigned int)qtmp;
  #line 700 
  *(regs + 182U) = (unsigned int)(qtmp >> 32);
  #line 701 
  qtmp = readq((void *)(drv->io_base + 3512U));
  #line 702 
  *(regs + 183U) = (unsigned int)qtmp;
  #line 702 
  *(regs + 184U) = (unsigned int)(qtmp >> 32);
  #line 703 
  qtmp = readq((void *)(drv->io_base + 3520U));
  #line 704 
  *(regs + 185U) = (unsigned int)qtmp;
  #line 704 
  *(regs + 186U) = (unsigned int)(qtmp >> 32);
  #line 705 
  qtmp = readq((void *)(drv->io_base + 3528U));
  #line 706 
  *(regs + 187U) = (unsigned int)qtmp;
  #line 706 
  *(regs + 188U) = (unsigned int)(qtmp >> 32);
  #line 707 
  qtmp = readq((void *)(drv->io_base + 3536U));
  #line 708 
  *(regs + 189U) = (unsigned int)qtmp;
  #line 708 
  *(regs + 190U) = (unsigned int)(qtmp >> 32);
  #line 709 
  qtmp = readq((void *)(drv->io_base + 3544U));
  #line 710 
  *(regs + 191U) = (unsigned int)qtmp;
  #line 710 
  *(regs + 192U) = (unsigned int)(qtmp >> 32);
  #line 711 
  qtmp = readq((void *)(drv->io_base + 3552U));
  #line 712 
  *(regs + 193U) = (unsigned int)qtmp;
  #line 712 
  *(regs + 194U) = (unsigned int)(qtmp >> 32);
  #line 713 
  qtmp = readq((void *)(drv->io_base + 3560U));
  #line 714 
  *(regs + 195U) = (unsigned int)qtmp;
  #line 714 
  *(regs + 196U) = (unsigned int)(qtmp >> 32);
  #line 716 
  qtmp = readq((void *)(drv->io_base + 3568U));
  #line 717 
  *(regs + 197U) = (unsigned int)qtmp;
  #line 717 
  *(regs + 198U) = (unsigned int)(qtmp >> 32);
  #line 718 
  qtmp = readq((void *)(drv->io_base + 3576U));
  #line 719 
  *(regs + 199U) = (unsigned int)qtmp;
  #line 719 
  *(regs + 200U) = (unsigned int)(qtmp >> 32);
  #line 720 
  qtmp = readq((void *)(drv->io_base + 3584U));
  #line 721 
  *(regs + 201U) = (unsigned int)qtmp;
  #line 721 
  *(regs + 202U) = (unsigned int)(qtmp >> 32);
  #line 722 
  qtmp = readq((void *)(drv->io_base + 3592U));
  #line 723 
  *(regs + 203U) = (unsigned int)qtmp;
  #line 723 
  *(regs + 204U) = (unsigned int)(qtmp >> 32);
  #line 724 
  qtmp = readq((void *)(drv->io_base + 3600U));
  #line 725 
  *(regs + 205U) = (unsigned int)qtmp;
  #line 725 
  *(regs + 206U) = (unsigned int)(qtmp >> 32);
  #line 726 
  qtmp = readq((void *)(drv->io_base + 3608U));
  #line 727 
  *(regs + 207U) = (unsigned int)qtmp;
  #line 727 
  *(regs + 208U) = (unsigned int)(qtmp >> 32);
  #line 730 
  i = 208U;
  #line 730 
  while (i <= 213U) {
    #line 731 
    *(regs + (unsigned long)i) = 2863311530U;
    #line 730 
    i ++;
  }
  #line 732 
  return;
}

#line 739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_get_stats(void *mac_drv, u64 *data)
{
  #line 741 
  u32 i;
  #line 742 
  u64 *buf = data;
  #line 743 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 744 
  struct mac_hw_stats *hw_stats = (struct mac_hw_stats *)0;
  #line 746 
  hw_stats = & (drv->mac_cb)->hw_stats;
  #line 748 
  i = 0U;
  #line 748 
  while (i <= 67U) {
    #line 749 
    *(buf + (unsigned long)i) = *((u64 *)((u8 *)hw_stats + g_xgmac_stats_string[i].offset));
    #line 748 
    i ++;
  }
  #line 750 
  return;
}

#line 759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static void hns_xgmac_get_strings(u32 stringset, u8 *data)
{
  #line 762 
  u32 i;
  #line 761 
  char *buff = (char *)data;
  #line 764 
  if (stringset != 1U) 
                       #line 765 
                       return;
  #line 767 
  i = 0U;
  #line 767 
  while (i <= 67U) {
    #line 768 
    snprintf(buff,32UL,(char *)(& g_xgmac_stats_string[i].desc));
    #line 769 
    buff += 32U;
    #line 767 
    i ++;
  }
  #line 771 
  return;
}

#line 778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static int hns_xgmac_get_sset_count(int stringset)
{
  #line 780 
  if ((unsigned int)stringset + 4294967295U <= 1U) 
                                                   #line 781 
                                                   return 68;
  #line 783 
  return 0;
}

#line 790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
static int hns_xgmac_get_regs_count(void)
{
  #line 792 
  return 214;
}

#line 795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_xgmac.c"
void *hns_xgmac_config(struct hns_mac_cb *mac_cb, struct mac_params *mac_param)
{
  #line 797 
  struct mac_driver *mac_drv;
  #line 799 
  mac_drv = (struct mac_driver *)cif_devm_kzalloc_4(mac_cb->dev,264UL,3264U);
  #line 800 
  if (mac_drv == (struct mac_driver *)0) 
                                         #line 801 
                                         return (void *)0;
  #line 803 
  mac_drv->mac_init = & hns_xgmac_init;
  #line 804 
  mac_drv->mac_enable = & hns_xgmac_enable;
  #line 805 
  mac_drv->mac_disable = & hns_xgmac_disable;
  #line 807 
  mac_drv->mac_id = mac_param->mac_id;
  #line 808 
  mac_drv->mac_mode = mac_param->mac_mode;
  #line 809 
  mac_drv->io_base = mac_param->vaddr;
  #line 810 
  mac_drv->dev = mac_param->dev;
  #line 811 
  mac_drv->mac_cb = mac_cb;
  #line 813 
  mac_drv->set_mac_addr = & hns_xgmac_set_pausefrm_mac_addr;
  #line 814 
  mac_drv->set_an_mode = (void (*)(void *, u8 ))0;
  #line 815 
  mac_drv->config_loopback = (int (*)(void *, enum hnae_loop , u8 ))0;
  #line 816 
  mac_drv->config_pad_and_crc = & hns_xgmac_config_pad_and_crc;
  #line 817 
  mac_drv->config_half_duplex = (void (*)(void *, u8 ))0;
  #line 818 
  mac_drv->set_rx_ignore_pause_frames = & hns_xgmac_set_rx_ignore_pause_frames;
  #line 820 
  mac_drv->mac_free = & hns_xgmac_free;
  #line 821 
  mac_drv->adjust_link = (int (*)(void *, enum mac_speed , u32 ))0;
  #line 822 
  mac_drv->set_tx_auto_pause_frames = & hns_xgmac_set_tx_auto_pause_frames;
  #line 823 
  mac_drv->config_max_frame_length = & hns_xgmac_config_max_frame_length;
  #line 824 
  mac_drv->mac_pausefrm_cfg = & hns_xgmac_pausefrm_cfg;
  #line 825 
  mac_drv->autoneg_stat = (void (*)(void *, u32 *))0;
  #line 826 
  mac_drv->get_info = & hns_xgmac_get_info;
  #line 827 
  mac_drv->get_pause_enable = & hns_xgmac_get_pausefrm_cfg;
  #line 828 
  mac_drv->get_link_status = & hns_xgmac_get_link_status;
  #line 829 
  mac_drv->get_regs = & hns_xgmac_get_regs;
  #line 830 
  mac_drv->get_ethtool_stats = & hns_xgmac_get_stats;
  #line 831 
  mac_drv->get_sset_count = & hns_xgmac_get_sset_count;
  #line 832 
  mac_drv->get_regs_count = & hns_xgmac_get_regs_count;
  #line 833 
  mac_drv->get_strings = & hns_xgmac_get_strings;
  #line 834 
  mac_drv->update_stats = & hns_xgmac_update_stats;
  #line 836 
  return (void *)mac_drv;
}

#line 672  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_xgmac.i.aux"
static void *cif_devm_kzalloc_4(struct device *dev, size_t size, gfp_t flags)
{
  #line 675 
  return ldv_devm_kzalloc(size,flags);
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 672  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_gmac.i.aux"
static void *cif_devm_kzalloc_5(struct device *dev, size_t size, gfp_t flags);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static struct mac_stats_string g_gmac_stats_string[45U] = {{.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'o', (char)'k'}, .offset = 8UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'b', (char)'a', (char)'d'}, .offset = 32UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'u', (char)'c', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, .offset = 40UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'c', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, .offset = 48UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'c', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, .offset = 56UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'6', (char)'4', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .offset = 96UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'6', (char)'5', (char)'t', (char)'o', (char)'1', (char)'2', (char)'7'}, .offset = 104UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'1', (char)'2', (char)'8', (char)'t', (char)'o', (char)'2', (char)'5', (char)'5'}, .offset = 112UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'2', (char)'5', (char)'6', (char)'t', (char)'o', (char)'5', (char)'1', (char)'1'}, .offset = 120UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'5', (char)'1', (char)'2', (char)'t', (char)'o', (char)'1', (char)'0', (char)'2', (char)'3'}, .offset = 128UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'t', (char)'o', (char)'1', (char)'5', (char)'1', (char)'8'}, .offset = 136UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'t', (char)'o', (char)'m', (char)'a', (char)'x'}, .offset = 144UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'c', (char)'s', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .offset = 176UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'t', (char)'a', (char)'g', (char)'g', (char)'e', (char)'d'}, .offset = 184UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'d', (char)'a', (char)'t', (char)'a', (char)'_', (char)'e', (char)'r', (char)'r'}, .offset = 192UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .offset = 200UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .offset = 160UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .offset = 168UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'m', (char)'a', (char)'c', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l'}, .offset = 216UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'k', (char)'n', (char)'o', (char)'w', (char)'n', (char)'_', (char)'m', (char)'a', (char)'c', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l'}, .offset = 280UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'v', (char)'e', (char)'r', (char)'y', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g', (char)'_', (char)'e', (char)'r', (char)'r'}, .offset = 208UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'r', (char)'u', (char)'n', (char)'t', (char)'_', (char)'e', (char)'r', (char)'r'}, .offset = 88UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'s', (char)'h', (char)'o', (char)'r', (char)'t', (char)'_', (char)'e', (char)'r', (char)'r'}, .offset = 80UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'l', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t'}, .offset = 288UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'f', (char)'i', (char)'l', (char)'t'}, .offset = 296UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n', (char)'_', (char)'c', (char)'n', (char)'t'}, .offset = 304UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r'}, .offset = 312UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'_', (char)'c', (char)'o', (char)'m', (char)'m', (char)'a'}, .offset = 320UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'o', (char)'k'}, .offset = 360UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'b', (char)'a', (char)'d'}, .offset = 392UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'u', (char)'c', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, .offset = 408UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'c', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, .offset = 416UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'c', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, .offset = 424UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'6', (char)'4', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .offset = 456UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'6', (char)'5', (char)'t', (char)'o', (char)'1', (char)'2', (char)'7'}, .offset = 464UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'1', (char)'2', (char)'8', (char)'t', (char)'o', (char)'2', (char)'5', (char)'5'}, .offset = 472UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'2', (char)'5', (char)'6', (char)'t', (char)'o', (char)'5', (char)'1', (char)'1'}, .offset = 480UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'5', (char)'1', (char)'2', (char)'t', (char)'o', (char)'1', (char)'0', (char)'2', (char)'3'}, .offset = 488UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'t', (char)'o', (char)'1', (char)'5', (char)'1', (char)'8'}, .offset = 496UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'t', (char)'o', (char)'m', (char)'a', (char)'x'}, .offset = 504UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'e', (char)'x', (char)'c', (char)'e', (char)'s', (char)'s', (char)'i', (char)'v', (char)'e', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p'}, .offset = 528UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}, .offset = 536UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'t', (char)'a', (char)'g', (char)'g', (char)'e', (char)'d'}, .offset = 544UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, .offset = 552UL}, {.desc = {(char)'g', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 560UL}};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_enable(void *mac_drv, enum mac_commom_mode mode)
{
  #line 63 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 66 
  if ((unsigned int)mode + 4294967294U <= 1U) 
                                              #line 67 
                                              dsaf_set_reg_field(drv->io_base,68U,4U,2U,1U);
  #line 69 
  if (mode == (unsigned int)MAC_COMM_MODE_RX || mode == (unsigned int)MAC_COMM_MODE_RX_AND_TX) {
    #line 71 
    dsaf_set_reg_field(drv->io_base,484U,1U,0U,0U);
    #line 72 
    dsaf_set_reg_field(drv->io_base,68U,2U,1U,1U);
  }
  #line 74 
  return;
}

#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_disable(void *mac_drv, enum mac_commom_mode mode)
{
  #line 78 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 81 
  if ((unsigned int)mode + 4294967294U <= 1U) 
                                              #line 82 
                                              dsaf_set_reg_field(drv->io_base,68U,4U,2U,0U);
  #line 84 
  if (mode == (unsigned int)MAC_COMM_MODE_RX || mode == (unsigned int)MAC_COMM_MODE_RX_AND_TX) {
    #line 86 
    dsaf_set_reg_field(drv->io_base,484U,1U,0U,1U);
    #line 87 
    dsaf_set_reg_field(drv->io_base,68U,2U,1U,0U);
  }
  #line 89 
  return;
}

#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_get_en(void *mac_drv, u32 *rx, u32 *tx)
{
  #line 99 
  u32 porten;
  #line 98 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 101 
  porten = dsaf_read_reg(drv->io_base,68U);
  #line 102 
  *tx = (unsigned int)((unsigned long long)porten >> 2) & 1U;
  #line 103 
  *rx = (unsigned int)((unsigned long long)porten >> 1) & 1U;
  #line 104 
  return;
}

#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_free(void *mac_drv)
{
  #line 108 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 110 
  struct dsaf_device *dsaf_dev = dev_get_drvdata(drv->dev);
  #line 112 
  u32 mac_id = (unsigned int)drv->mac_id;
  #line 114 
  (*((dsaf_dev->misc_op)->ge_srst))(dsaf_dev,mac_id,(_Bool)0);
  #line 115 
  return;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_set_tx_auto_pause_frames(void *mac_drv, u16 newval)
{
  #line 119 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 121 
  dsaf_set_reg_field(drv->io_base,28U,65535U,0U,(unsigned int)newval);
  #line 122 
  return;
}

#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_get_tx_auto_pause_frames(void *mac_drv, u16 *newval)
{
  #line 127 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 129 
  *newval = (unsigned short)dsaf_get_reg_field(drv->io_base,28U,65535U,0U);
  #line 130 
  return;
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_set_rx_auto_pause_frames(void *mac_drv, u32 newval)
{
  #line 135 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 137 
  dsaf_set_reg_field(drv->io_base,72U,1U,0U,(unsigned int)(newval != 0U));
  #line 138 
  return;
}

#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_config_max_frame_length(void *mac_drv, u16 newval)
{
  #line 143 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 145 
  dsaf_set_reg_field(drv->io_base,60U,65535U,0U,(unsigned int)newval);
  #line 148 
  dsaf_set_reg_field(drv->io_base,368U,65535U,0U,(unsigned int)newval);
  #line 149 
  return;
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_config_pad_and_crc(void *mac_drv, u8 newval)
{
  #line 154 
  u32 tx_ctrl;
  #line 155 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 157 
  tx_ctrl = dsaf_read_reg(drv->io_base,96U);
  {
    #line 158 
    unsigned int tmp;
    #line 158 
    tx_ctrl &= 4294967167U;
    #line 158 
    if ((unsigned int)newval != 0U) 
                                    #line 158 
                                    tmp = 128U; else 
                                                     #line 158 
                                                     tmp = 0U;
    #line 158 
    tx_ctrl = tmp | tx_ctrl;
  }
  {
    #line 159 
    unsigned int tmp_0;
    #line 159 
    tx_ctrl &= 4294967231U;
    #line 159 
    if ((unsigned int)newval != 0U) 
                                    #line 159 
                                    tmp_0 = 64U; else 
                                                      #line 159 
                                                      tmp_0 = 0U;
    #line 159 
    tx_ctrl = tmp_0 | tx_ctrl;
  }
  #line 160 
  dsaf_write_reg(drv->io_base,96U,tx_ctrl);
  #line 161 
  return;
}

#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_config_an_mode(void *mac_drv, u8 newval)
{
  #line 165 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 167 
  dsaf_set_reg_field(drv->io_base,96U,32U,5U,(unsigned int)((unsigned int)newval != 0U));
  #line 168 
  return;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_tx_loop_pkt_dis(void *mac_drv)
{
  #line 173 
  u32 tx_loop_pkt_pri;
  #line 174 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 176 
  tx_loop_pkt_pri = dsaf_read_reg(drv->io_base,888U);
  #line 177 
  tx_loop_pkt_pri &= 4294967293U;
  #line 177 
  tx_loop_pkt_pri |= 2U;
  #line 178 
  tx_loop_pkt_pri &= 4294967294U;
  #line 178 
  tx_loop_pkt_pri = tx_loop_pkt_pri;
  #line 179 
  dsaf_write_reg(drv->io_base,888U,tx_loop_pkt_pri);
  #line 180 
  return;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_set_duplex_type(void *mac_drv, u8 newval)
{
  #line 184 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 186 
  dsaf_set_reg_field(drv->io_base,8U,1U,0U,(unsigned int)((unsigned int)newval != 0U));
  #line 187 
  return;
}

#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_get_duplex_type(void *mac_drv, enum hns_gmac_duplex_mdoe *duplex_mode)
{
  #line 193 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 195 
  *duplex_mode = (enum hns_gmac_duplex_mdoe)dsaf_get_reg_field(drv->io_base,8U,1U,0U);
  #line 196 
  return;
}

#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_get_port_mode(void *mac_drv, enum hns_port_mode *port_mode)
{
  #line 201 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 203 
  *port_mode = (enum hns_port_mode)dsaf_get_reg_field(drv->io_base,64U,15U,0U);
  #line 204 
  return;
}

#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_port_mode_get(void *mac_drv, struct hns_gmac_port_mode_cfg *port_mode)
{
  #line 210 
  u32 tx_ctrl;
  #line 211 
  u32 recv_ctrl;
  #line 212 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 214 
  port_mode->port_mode = (enum hns_port_mode)dsaf_get_reg_field(drv->io_base,64U,15U,0U);
  #line 217 
  tx_ctrl = dsaf_read_reg(drv->io_base,96U);
  #line 218 
  recv_ctrl = dsaf_read_reg(drv->io_base,480U);
  #line 220 
  port_mode->max_frm_size = dsaf_get_reg_field(drv->io_base,60U,65535U,0U);
  #line 223 
  port_mode->short_runts_thr = dsaf_get_reg_field(drv->io_base,80U,31U,0U);
  #line 228 
  port_mode->pad_enable = (unsigned int)((unsigned long long)tx_ctrl >> 7) & 1U;
  #line 229 
  port_mode->crc_add = (unsigned int)((unsigned long long)tx_ctrl >> 6) & 1U;
  #line 230 
  port_mode->an_enable = (unsigned int)((unsigned long long)tx_ctrl >> 5) & 1U;
  #line 232 
  port_mode->runt_pkt_en = (unsigned int)((unsigned long long)recv_ctrl >> 4) & 1U;
  #line 234 
  port_mode->strip_pad_en = (unsigned int)((unsigned long long)recv_ctrl >> 3) & 1U;
  #line 236 
  return;
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_pause_frm_cfg(void *mac_drv, u32 rx_pause_en, u32 tx_pause_en)
{
  #line 241 
  u32 pause_en;
  #line 242 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 244 
  pause_en = dsaf_read_reg(drv->io_base,72U);
  #line 245 
  pause_en &= 4294967294U;
  #line 245 
  pause_en = (unsigned int)(rx_pause_en != 0U) | pause_en;
  {
    #line 246 
    unsigned int tmp;
    #line 246 
    pause_en &= 4294967293U;
    #line 246 
    if (tx_pause_en != 0U) 
                           #line 246 
                           tmp = 2U; else 
                                          #line 246 
                                          tmp = 0U;
    #line 246 
    pause_en = tmp | pause_en;
  }
  #line 247 
  dsaf_write_reg(drv->io_base,72U,pause_en);
  #line 248 
  return;
}

#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_get_pausefrm_cfg(void *mac_drv, u32 *rx_pause_en, u32 *tx_pause_en)
{
  #line 253 
  u32 pause_en;
  #line 254 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 256 
  pause_en = dsaf_read_reg(drv->io_base,72U);
  #line 258 
  *rx_pause_en = pause_en & 1U;
  #line 259 
  *tx_pause_en = (unsigned int)((unsigned long long)pause_en >> 1) & 1U;
  #line 260 
  return;
}

#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static bool hns_gmac_need_adjust_link(void *mac_drv, enum mac_speed speed, int duplex)
{
  #line 265 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 266 
  struct hns_mac_cb *mac_cb = drv->mac_cb;
  #line 268 
  return (_Bool)(((unsigned int)mac_cb->speed != (unsigned int)speed || (int)mac_cb->half_duplex == duplex) != 0);
}

#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static int hns_gmac_adjust_link(void *mac_drv, enum mac_speed speed, u32 full_duplex)
{
  #line 275 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 277 
  dsaf_set_reg_field(drv->io_base,8U,1U,0U,(unsigned int)(full_duplex != 0U));
  #line 280 
  switch ((unsigned int)speed) {
    #line 281 
    case (unsigned int)10: 
                           #line 281 
    ;
    #line 282 
    dsaf_set_reg_field(drv->io_base,64U,15U,0U,6U);
    #line 285 
    break;
    #line 286 
    case (unsigned int)100: 
                            #line 286 
    ;
    #line 287 
    dsaf_set_reg_field(drv->io_base,64U,15U,0U,7U);
    #line 290 
    break;
    #line 291 
    case (unsigned int)1000: 
                             #line 291 
    ;
    #line 292 
    dsaf_set_reg_field(drv->io_base,64U,15U,0U,8U);
    #line 295 
    break;
    #line 296 
    default: 
             #line 296 
    ;
    #line 297 
    _dev_err(drv->dev,(char *)"hns_gmac_adjust_link fail, speed%d mac%d\n",(unsigned int)speed,(int)drv->mac_id);
    #line 300 
    return -22;
  }
  #line 303 
  return 0;
}

#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_set_uc_match(void *mac_drv, u16 en)
{
  #line 308 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 310 
  dsaf_set_reg_field(drv->io_base,100U,1U,0U,(unsigned int)((unsigned int)en == 0U));
  #line 312 
  dsaf_set_reg_field(drv->io_base,532U,65536U,16U,(unsigned int)((unsigned int)en == 0U));
  #line 313 
  return;
}

#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_set_promisc(void *mac_drv, u8 en)
{
  #line 318 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 320 
  if ((drv->mac_cb)->mac_type == (unsigned int)HNAE_PORT_DEBUG) 
                                                                #line 321 
                                                                hns_gmac_set_uc_match(mac_drv,(unsigned short)((int)en));
  #line 322 
  return;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static int hns_gmac_wait_fifo_clean(void *mac_drv)
{
  #line 327 
  int wait_cnt;
  #line 328 
  u32 val;
  #line 326 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 330 
  wait_cnt = 0;
  #line 331 
  while (1) {
    #line 331 
    int tmp;
    #line 331 
    tmp = wait_cnt;
    #line 331 
    wait_cnt ++;
    #line 331 
    ;
    #line 331 
    if (! (tmp <= 9999)) 
                         #line 331 
                         break;
    #line 332 
    val = dsaf_read_reg(drv->io_base,0U);
    #line 334 
    if ((val & 63U) == 0U) 
                           #line 335 
                           break;
    #line 336 
    usleep_range(100UL,200UL);
  }
  #line 339 
  if (wait_cnt > 9999) {
    #line 340 
    _dev_err(drv->dev,(char *)"hns ge %d fifo was not idle.\n",(int)drv->mac_id);
    #line 342 
    return -16;
  }
  #line 345 
  return 0;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_init(void *mac_drv)
{
  #line 350 
  u32 port;
  #line 351 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 353 
  struct dsaf_device *dsaf_dev = dev_get_drvdata(drv->dev);
  #line 355 
  port = (unsigned int)drv->mac_id;
  #line 357 
  (*((dsaf_dev->misc_op)->ge_srst))(dsaf_dev,port,(_Bool)0);
  {
    #line 358 
    unsigned long __ms = 10UL;
    #line 358 
    while (1) {
      #line 358 
      unsigned long tmp_0;
      #line 358 
      tmp_0 = __ms;
      #line 358 
      __ms --;
      #line 358 
      ;
      #line 358 
      if (! (tmp_0 != 0UL)) 
                            #line 358 
                            break;
      #line 358 
      __const_udelay(4295000UL);
    }
  }
  #line 359 
  (*((dsaf_dev->misc_op)->ge_srst))(dsaf_dev,port,(_Bool)1);
  {
    #line 360 
    unsigned long __ms_0 = 10UL;
    #line 360 
    while (1) {
      #line 360 
      unsigned long tmp_1;
      #line 360 
      tmp_1 = __ms_0;
      #line 360 
      __ms_0 --;
      #line 360 
      ;
      #line 360 
      if (! (tmp_1 != 0UL)) 
                            #line 360 
                            break;
      #line 360 
      __const_udelay(4295000UL);
    }
  }
  #line 361 
  hns_gmac_disable(mac_drv,(enum mac_commom_mode)MAC_COMM_MODE_RX_AND_TX);
  #line 362 
  hns_gmac_tx_loop_pkt_dis(mac_drv);
  #line 363 
  if ((drv->mac_cb)->mac_type == (unsigned int)HNAE_PORT_DEBUG) 
                                                                #line 364 
                                                                hns_gmac_set_uc_match(mac_drv,(unsigned short)0);
  #line 366 
  hns_gmac_config_pad_and_crc(mac_drv,(unsigned char)1);
  #line 368 
  dsaf_set_reg_field(drv->io_base,436U,1U,0U,1U);
  #line 374 
  dsaf_set_reg_field(drv->io_base,16U,255U,0U,8U);
  #line 375 
  return;
}

#line 378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_update_stats(void *mac_drv)
{
  #line 380 
  struct mac_hw_stats *hw_stats = (struct mac_hw_stats *)0;
  #line 381 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 383 
  hw_stats = & (drv->mac_cb)->hw_stats;
  #line 387 
  hw_stats->rx_good_bytes += (unsigned long long)dsaf_read_reg(drv->io_base,128U);
  #line 389 
  hw_stats->rx_bad_bytes += (unsigned long long)dsaf_read_reg(drv->io_base,132U);
  #line 390 
  hw_stats->rx_uc_pkts += (unsigned long long)dsaf_read_reg(drv->io_base,136U);
  #line 391 
  hw_stats->rx_mc_pkts += (unsigned long long)dsaf_read_reg(drv->io_base,140U);
  #line 392 
  hw_stats->rx_bc_pkts += (unsigned long long)dsaf_read_reg(drv->io_base,144U);
  #line 394 
  hw_stats->rx_64bytes += (unsigned long long)dsaf_read_reg(drv->io_base,148U);
  #line 396 
  hw_stats->rx_65to127 += (unsigned long long)dsaf_read_reg(drv->io_base,152U);
  #line 398 
  hw_stats->rx_128to255 += (unsigned long long)dsaf_read_reg(drv->io_base,156U);
  #line 400 
  hw_stats->rx_256to511 += (unsigned long long)dsaf_read_reg(drv->io_base,160U);
  #line 402 
  hw_stats->rx_512to1023 += (unsigned long long)dsaf_read_reg(drv->io_base,164U);
  #line 404 
  hw_stats->rx_1024to1518 += (unsigned long long)dsaf_read_reg(drv->io_base,168U);
  #line 406 
  hw_stats->rx_1519tomax += (unsigned long long)dsaf_read_reg(drv->io_base,172U);
  #line 407 
  hw_stats->rx_fcs_err += (unsigned long long)dsaf_read_reg(drv->io_base,176U);
  #line 408 
  hw_stats->rx_vlan_pkts += (unsigned long long)dsaf_read_reg(drv->io_base,180U);
  #line 409 
  hw_stats->rx_data_err += (unsigned long long)dsaf_read_reg(drv->io_base,184U);
  #line 411 
  hw_stats->rx_align_err += (unsigned long long)dsaf_read_reg(drv->io_base,188U);
  #line 413 
  hw_stats->rx_oversize += (unsigned long long)dsaf_read_reg(drv->io_base,192U);
  #line 415 
  hw_stats->rx_jabber_err += (unsigned long long)dsaf_read_reg(drv->io_base,196U);
  #line 417 
  hw_stats->rx_pfc_tc0 += (unsigned long long)dsaf_read_reg(drv->io_base,200U);
  #line 419 
  hw_stats->rx_unknown_ctrl += (unsigned long long)dsaf_read_reg(drv->io_base,204U);
  #line 421 
  hw_stats->rx_long_err += (unsigned long long)dsaf_read_reg(drv->io_base,208U);
  #line 423 
  hw_stats->rx_minto64 += (unsigned long long)dsaf_read_reg(drv->io_base,212U);
  #line 425 
  hw_stats->rx_under_min += (unsigned long long)dsaf_read_reg(drv->io_base,216U);
  #line 427 
  hw_stats->rx_filter_pkts += (unsigned long long)dsaf_read_reg(drv->io_base,232U);
  #line 429 
  hw_stats->rx_filter_bytes += (unsigned long long)dsaf_read_reg(drv->io_base,236U);
  #line 431 
  hw_stats->rx_fifo_overrun_err += (unsigned long long)dsaf_read_reg(drv->io_base,492U);
  #line 433 
  hw_stats->rx_len_err += (unsigned long long)dsaf_read_reg(drv->io_base,500U);
  #line 435 
  hw_stats->rx_comma_err += (unsigned long long)dsaf_read_reg(drv->io_base,504U);
  #line 439 
  hw_stats->tx_good_bytes += (unsigned long long)dsaf_read_reg(drv->io_base,256U);
  #line 441 
  hw_stats->tx_bad_bytes += (unsigned long long)dsaf_read_reg(drv->io_base,260U);
  #line 442 
  hw_stats->tx_uc_pkts += (unsigned long long)dsaf_read_reg(drv->io_base,264U);
  #line 443 
  hw_stats->tx_mc_pkts += (unsigned long long)dsaf_read_reg(drv->io_base,268U);
  #line 444 
  hw_stats->tx_bc_pkts += (unsigned long long)dsaf_read_reg(drv->io_base,272U);
  #line 446 
  hw_stats->tx_64bytes += (unsigned long long)dsaf_read_reg(drv->io_base,276U);
  #line 448 
  hw_stats->tx_65to127 += (unsigned long long)dsaf_read_reg(drv->io_base,280U);
  #line 450 
  hw_stats->tx_128to255 += (unsigned long long)dsaf_read_reg(drv->io_base,284U);
  #line 452 
  hw_stats->tx_256to511 += (unsigned long long)dsaf_read_reg(drv->io_base,288U);
  #line 454 
  hw_stats->tx_512to1023 += (unsigned long long)dsaf_read_reg(drv->io_base,292U);
  #line 456 
  hw_stats->tx_1024to1518 += (unsigned long long)dsaf_read_reg(drv->io_base,296U);
  #line 458 
  hw_stats->tx_1519tomax += (unsigned long long)dsaf_read_reg(drv->io_base,300U);
  #line 460 
  hw_stats->tx_jabber_err += (unsigned long long)dsaf_read_reg(drv->io_base,332U);
  #line 462 
  hw_stats->tx_underrun_err += (unsigned long long)dsaf_read_reg(drv->io_base,336U);
  #line 463 
  hw_stats->tx_vlan += (unsigned long long)dsaf_read_reg(drv->io_base,340U);
  #line 464 
  hw_stats->tx_crc_err += (unsigned long long)dsaf_read_reg(drv->io_base,344U);
  #line 466 
  hw_stats->tx_pfc_tc0 += (unsigned long long)dsaf_read_reg(drv->io_base,348U);
  #line 467 
  return;
}

#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_set_mac_addr(void *mac_drv, char *mac_addr)
{
  #line 471 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 473 
  u32 high_val = (unsigned int)((int)*(mac_addr + 1U) | ((int)*mac_addr << 8));
  #line 475 
  u32 low_val = (unsigned int)((((int)*(mac_addr + 5U) | ((int)*(mac_addr + 4U) << 8)) | ((int)*(mac_addr + 3U) << 16)) | ((int)*(mac_addr + 2U) << 24));
  #line 478 
  u32 val = dsaf_read_reg(drv->io_base,532U);
  #line 479 
  u32 sta_addr_en = (unsigned int)((unsigned long long)val >> 16) & 1U;
  #line 481 
  dsaf_write_reg(drv->io_base,528U,low_val);
  #line 482 
  dsaf_write_reg(drv->io_base,532U,(sta_addr_en << 16) | high_val);
  #line 483 
  return;
}

#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static int hns_gmac_config_loopback(void *mac_drv, enum hnae_loop loop_mode, u8 enable)
{
  #line 489 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 491 
  switch ((unsigned int)loop_mode) {
    #line 492 
    case (unsigned int)0: 
                          #line 492 
    ;
    #line 493 
    dsaf_set_reg_field(drv->io_base,476U,4U,2U,(unsigned int)((unsigned int)enable != 0U));
    #line 495 
    break;
    #line 496 
    default: 
             #line 496 
    ;
    #line 497 
    _dev_err(drv->dev,(char *)"loop_mode error\n");
    #line 498 
    return -22;
  }
  #line 501 
  return 0;
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_get_info(void *mac_drv, struct mac_info *mac_info)
{
  #line 506 
  enum hns_gmac_duplex_mdoe duplex;
  #line 507 
  enum hns_port_mode speed;
  #line 508 
  u32 rx_pause;
  #line 509 
  u32 tx_pause;
  #line 510 
  u32 rx;
  #line 511 
  u32 tx;
  #line 512 
  u16 fc_tx_timer;
  #line 513 
  struct hns_gmac_port_mode_cfg port_mode = {.port_mode = GMAC_10M_MII, .max_frm_size = 0U, .short_runts_thr = 0U, .pad_enable = 0U, .crc_add = 0U, .an_enable = 0U, .runt_pkt_en = 0U, .strip_pad_en = 0U};
  #line 515 
  hns_gmac_port_mode_get(mac_drv,& port_mode);
  #line 516 
  mac_info->pad_and_crc_en = (unsigned char)((port_mode.crc_add != 0U && port_mode.pad_enable != 0U) != 0);
  #line 517 
  mac_info->auto_neg = (unsigned char)port_mode.an_enable;
  #line 519 
  hns_gmac_get_tx_auto_pause_frames(mac_drv,& fc_tx_timer);
  #line 520 
  mac_info->tx_pause_time = (unsigned char)fc_tx_timer;
  #line 522 
  hns_gmac_get_en(mac_drv,& rx,& tx);
  #line 523 
  mac_info->port_en = (unsigned char)((rx != 0U && tx != 0U) != 0);
  #line 525 
  hns_gmac_get_duplex_type(mac_drv,& duplex);
  #line 526 
  mac_info->duplex = (unsigned char)duplex;
  #line 528 
  hns_gmac_get_port_mode(mac_drv,& speed);
  #line 529 
  switch ((unsigned int)speed) {
    #line 530 
    case (unsigned int)6: 
                          #line 530 
    ;
    #line 531 
    mac_info->speed = (unsigned short)10U;
    #line 532 
    break;
    #line 533 
    case (unsigned int)7: 
                          #line 533 
    ;
    #line 534 
    mac_info->speed = (unsigned short)100U;
    #line 535 
    break;
    #line 536 
    case (unsigned int)8: 
                          #line 536 
    ;
    #line 537 
    mac_info->speed = (unsigned short)1000U;
    #line 538 
    break;
    #line 539 
    default: 
             #line 539 
    ;
    #line 540 
    mac_info->speed = (unsigned short)0U;
    #line 541 
    break;
  }
  #line 544 
  hns_gmac_get_pausefrm_cfg(mac_drv,& rx_pause,& tx_pause);
  #line 545 
  mac_info->rx_pause_en = (unsigned char)rx_pause;
  #line 546 
  mac_info->tx_pause_en = (unsigned char)tx_pause;
  #line 547 
  return;
}

#line 549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_autoneg_stat(void *mac_drv, u32 *enable)
{
  #line 551 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 553 
  *enable = dsaf_get_reg_field(drv->io_base,96U,32U,5U);
  #line 554 
  return;
}

#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_get_link_status(void *mac_drv, u32 *link_stat)
{
  #line 559 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 561 
  *link_stat = dsaf_get_reg_field(drv->io_base,88U,1048576U,20U);
  #line 562 
  return;
}

#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_get_regs(void *mac_drv, void *data)
{
  #line 568 
  int i;
  #line 567 
  u32 *regs = (u32 *)data;
  #line 569 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 572 
  *regs = dsaf_read_reg(drv->io_base,8U);
  #line 573 
  *(regs + 1U) = dsaf_read_reg(drv->io_base,12U);
  #line 574 
  *(regs + 2U) = dsaf_read_reg(drv->io_base,28U);
  #line 575 
  *(regs + 3U) = dsaf_read_reg(drv->io_base,32U);
  #line 576 
  *(regs + 4U) = dsaf_read_reg(drv->io_base,36U);
  #line 577 
  *(regs + 5U) = dsaf_read_reg(drv->io_base,48U);
  #line 578 
  *(regs + 6U) = dsaf_read_reg(drv->io_base,56U);
  #line 579 
  *(regs + 7U) = dsaf_read_reg(drv->io_base,60U);
  #line 580 
  *(regs + 8U) = dsaf_read_reg(drv->io_base,64U);
  #line 581 
  *(regs + 9U) = dsaf_read_reg(drv->io_base,68U);
  #line 582 
  *(regs + 10U) = dsaf_read_reg(drv->io_base,72U);
  #line 583 
  *(regs + 11U) = dsaf_read_reg(drv->io_base,80U);
  #line 584 
  *(regs + 12U) = dsaf_read_reg(drv->io_base,88U);
  #line 585 
  *(regs + 13U) = dsaf_read_reg(drv->io_base,92U);
  #line 586 
  *(regs + 14U) = dsaf_read_reg(drv->io_base,96U);
  #line 587 
  *(regs + 15U) = dsaf_read_reg(drv->io_base,100U);
  #line 588 
  *(regs + 16U) = dsaf_read_reg(drv->io_base,116U);
  #line 591 
  *(regs + 17U) = dsaf_read_reg(drv->io_base,128U);
  #line 592 
  *(regs + 18U) = dsaf_read_reg(drv->io_base,132U);
  #line 593 
  *(regs + 19U) = dsaf_read_reg(drv->io_base,136U);
  #line 594 
  *(regs + 20U) = dsaf_read_reg(drv->io_base,140U);
  #line 595 
  *(regs + 21U) = dsaf_read_reg(drv->io_base,144U);
  #line 596 
  *(regs + 22U) = dsaf_read_reg(drv->io_base,148U);
  #line 597 
  *(regs + 23U) = dsaf_read_reg(drv->io_base,152U);
  #line 598 
  *(regs + 24U) = dsaf_read_reg(drv->io_base,156U);
  #line 599 
  *(regs + 25U) = dsaf_read_reg(drv->io_base,160U);
  #line 600 
  *(regs + 26U) = dsaf_read_reg(drv->io_base,164U);
  #line 601 
  *(regs + 27U) = dsaf_read_reg(drv->io_base,168U);
  #line 602 
  *(regs + 28U) = dsaf_read_reg(drv->io_base,172U);
  #line 603 
  *(regs + 29U) = dsaf_read_reg(drv->io_base,176U);
  #line 604 
  *(regs + 30U) = dsaf_read_reg(drv->io_base,180U);
  #line 605 
  *(regs + 31U) = dsaf_read_reg(drv->io_base,184U);
  #line 606 
  *(regs + 32U) = dsaf_read_reg(drv->io_base,188U);
  #line 607 
  *(regs + 33U) = dsaf_read_reg(drv->io_base,192U);
  #line 608 
  *(regs + 34U) = dsaf_read_reg(drv->io_base,196U);
  #line 609 
  *(regs + 35U) = dsaf_read_reg(drv->io_base,200U);
  #line 610 
  *(regs + 36U) = dsaf_read_reg(drv->io_base,204U);
  #line 611 
  *(regs + 37U) = dsaf_read_reg(drv->io_base,208U);
  #line 612 
  *(regs + 38U) = dsaf_read_reg(drv->io_base,212U);
  #line 613 
  *(regs + 39U) = dsaf_read_reg(drv->io_base,216U);
  #line 614 
  *(regs + 40U) = dsaf_read_reg(drv->io_base,232U);
  #line 615 
  *(regs + 41U) = dsaf_read_reg(drv->io_base,236U);
  #line 618 
  *(regs + 42U) = dsaf_read_reg(drv->io_base,256U);
  #line 619 
  *(regs + 43U) = dsaf_read_reg(drv->io_base,260U);
  #line 620 
  *(regs + 44U) = dsaf_read_reg(drv->io_base,264U);
  #line 621 
  *(regs + 45U) = dsaf_read_reg(drv->io_base,268U);
  #line 622 
  *(regs + 46U) = dsaf_read_reg(drv->io_base,272U);
  #line 623 
  *(regs + 47U) = dsaf_read_reg(drv->io_base,276U);
  #line 624 
  *(regs + 48U) = dsaf_read_reg(drv->io_base,280U);
  #line 625 
  *(regs + 49U) = dsaf_read_reg(drv->io_base,284U);
  #line 626 
  *(regs + 50U) = dsaf_read_reg(drv->io_base,288U);
  #line 627 
  *(regs + 51U) = dsaf_read_reg(drv->io_base,292U);
  #line 628 
  *(regs + 52U) = dsaf_read_reg(drv->io_base,296U);
  #line 629 
  *(regs + 53U) = dsaf_read_reg(drv->io_base,300U);
  #line 630 
  *(regs + 54U) = dsaf_read_reg(drv->io_base,332U);
  #line 631 
  *(regs + 55U) = dsaf_read_reg(drv->io_base,336U);
  #line 632 
  *(regs + 56U) = dsaf_read_reg(drv->io_base,340U);
  #line 633 
  *(regs + 57U) = dsaf_read_reg(drv->io_base,344U);
  #line 634 
  *(regs + 58U) = dsaf_read_reg(drv->io_base,348U);
  #line 636 
  *(regs + 59U) = dsaf_read_reg(drv->io_base,368U);
  #line 637 
  *(regs + 60U) = dsaf_read_reg(drv->io_base,424U);
  #line 638 
  *(regs + 61U) = dsaf_read_reg(drv->io_base,432U);
  #line 639 
  *(regs + 62U) = dsaf_read_reg(drv->io_base,436U);
  #line 640 
  *(regs + 63U) = dsaf_read_reg(drv->io_base,460U);
  #line 641 
  *(regs + 64U) = dsaf_read_reg(drv->io_base,464U);
  #line 642 
  *(regs + 65U) = dsaf_read_reg(drv->io_base,476U);
  #line 643 
  *(regs + 66U) = dsaf_read_reg(drv->io_base,480U);
  #line 644 
  *(regs + 67U) = dsaf_read_reg(drv->io_base,488U);
  #line 645 
  *(regs + 68U) = dsaf_read_reg(drv->io_base,492U);
  #line 646 
  *(regs + 69U) = dsaf_read_reg(drv->io_base,500U);
  #line 647 
  *(regs + 70U) = dsaf_read_reg(drv->io_base,504U);
  #line 649 
  *(regs + 71U) = dsaf_read_reg(drv->io_base,512U);
  #line 650 
  *(regs + 72U) = dsaf_read_reg(drv->io_base,516U);
  #line 651 
  *(regs + 73U) = dsaf_read_reg(drv->io_base,520U);
  #line 652 
  *(regs + 74U) = dsaf_read_reg(drv->io_base,524U);
  #line 653 
  *(regs + 75U) = dsaf_read_reg(drv->io_base,528U);
  #line 654 
  *(regs + 76U) = dsaf_read_reg(drv->io_base,532U);
  #line 655 
  *(regs + 77U) = dsaf_read_reg(drv->io_base,536U);
  #line 656 
  *(regs + 78U) = dsaf_read_reg(drv->io_base,540U);
  #line 657 
  *(regs + 79U) = dsaf_read_reg(drv->io_base,544U);
  #line 658 
  *(regs + 80U) = dsaf_read_reg(drv->io_base,548U);
  #line 659 
  *(regs + 81U) = dsaf_read_reg(drv->io_base,552U);
  #line 660 
  *(regs + 82U) = dsaf_read_reg(drv->io_base,556U);
  #line 661 
  *(regs + 83U) = dsaf_read_reg(drv->io_base,560U);
  #line 662 
  *(regs + 84U) = dsaf_read_reg(drv->io_base,564U);
  #line 663 
  *(regs + 85U) = dsaf_read_reg(drv->io_base,568U);
  #line 664 
  *(regs + 86U) = dsaf_read_reg(drv->io_base,572U);
  #line 665 
  *(regs + 87U) = dsaf_read_reg(drv->io_base,576U);
  #line 666 
  *(regs + 88U) = dsaf_read_reg(drv->io_base,888U);
  #line 669 
  i = 89;
  #line 669 
  while (i <= 95) {
    #line 670 
    *(regs + (unsigned long)i) = 2863311530U;
    #line 669 
    i ++;
  }
  #line 671 
  return;
}

#line 673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_get_stats(void *mac_drv, u64 *data)
{
  #line 675 
  u32 i;
  #line 676 
  u64 *buf = data;
  #line 677 
  struct mac_driver *drv = (struct mac_driver *)mac_drv;
  #line 678 
  struct mac_hw_stats *hw_stats = (struct mac_hw_stats *)0;
  #line 680 
  hw_stats = & (drv->mac_cb)->hw_stats;
  #line 682 
  i = 0U;
  #line 682 
  while (i <= 44U) {
    #line 683 
    *(buf + (unsigned long)i) = *((u64 *)((u8 *)hw_stats + g_gmac_stats_string[i].offset));
    #line 682 
    i ++;
  }
  #line 684 
  return;
}

#line 688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static void hns_gmac_get_strings(u32 stringset, u8 *data)
{
  #line 691 
  u32 i;
  #line 690 
  char *buff = (char *)data;
  #line 693 
  if (stringset != 1U) 
                       #line 694 
                       return;
  #line 696 
  i = 0U;
  #line 696 
  while (i <= 44U) {
    #line 697 
    snprintf(buff,32UL,(char *)"%s",(char *)(& g_gmac_stats_string[i].desc));
    #line 699 
    buff += 32U;
    #line 696 
    i ++;
  }
  #line 701 
  return;
}

#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static int hns_gmac_get_sset_count(int stringset)
{
  #line 705 
  if (stringset == 1) 
                      #line 706 
                      return 45;
  #line 708 
  return 0;
}

#line 711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
static int hns_gmac_get_regs_count(void)
{
  #line 713 
  return 96;
}

#line 716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns/hns_dsaf_gmac.c"
void *hns_gmac_config(struct hns_mac_cb *mac_cb, struct mac_params *mac_param)
{
  #line 718 
  struct mac_driver *mac_drv;
  #line 720 
  mac_drv = (struct mac_driver *)cif_devm_kzalloc_5(mac_cb->dev,264UL,3264U);
  #line 721 
  if (mac_drv == (struct mac_driver *)0) 
                                         #line 722 
                                         return (void *)0;
  #line 724 
  mac_drv->mac_init = & hns_gmac_init;
  #line 725 
  mac_drv->mac_enable = & hns_gmac_enable;
  #line 726 
  mac_drv->mac_disable = & hns_gmac_disable;
  #line 727 
  mac_drv->mac_free = & hns_gmac_free;
  #line 728 
  mac_drv->adjust_link = & hns_gmac_adjust_link;
  #line 729 
  mac_drv->need_adjust_link = & hns_gmac_need_adjust_link;
  #line 730 
  mac_drv->set_tx_auto_pause_frames = & hns_gmac_set_tx_auto_pause_frames;
  #line 731 
  mac_drv->config_max_frame_length = & hns_gmac_config_max_frame_length;
  #line 732 
  mac_drv->mac_pausefrm_cfg = & hns_gmac_pause_frm_cfg;
  #line 734 
  mac_drv->mac_id = mac_param->mac_id;
  #line 735 
  mac_drv->mac_mode = mac_param->mac_mode;
  #line 736 
  mac_drv->io_base = mac_param->vaddr;
  #line 737 
  mac_drv->dev = mac_param->dev;
  #line 738 
  mac_drv->mac_cb = mac_cb;
  #line 740 
  mac_drv->set_mac_addr = & hns_gmac_set_mac_addr;
  #line 741 
  mac_drv->set_an_mode = & hns_gmac_config_an_mode;
  #line 742 
  mac_drv->config_loopback = & hns_gmac_config_loopback;
  #line 743 
  mac_drv->config_pad_and_crc = & hns_gmac_config_pad_and_crc;
  #line 744 
  mac_drv->config_half_duplex = & hns_gmac_set_duplex_type;
  #line 745 
  mac_drv->set_rx_ignore_pause_frames = & hns_gmac_set_rx_auto_pause_frames;
  #line 746 
  mac_drv->get_info = & hns_gmac_get_info;
  #line 747 
  mac_drv->autoneg_stat = & hns_gmac_autoneg_stat;
  #line 748 
  mac_drv->get_pause_enable = & hns_gmac_get_pausefrm_cfg;
  #line 749 
  mac_drv->get_link_status = & hns_gmac_get_link_status;
  #line 750 
  mac_drv->get_regs = & hns_gmac_get_regs;
  #line 751 
  mac_drv->get_regs_count = & hns_gmac_get_regs_count;
  #line 752 
  mac_drv->get_ethtool_stats = & hns_gmac_get_stats;
  #line 753 
  mac_drv->get_sset_count = & hns_gmac_get_sset_count;
  #line 754 
  mac_drv->get_strings = & hns_gmac_get_strings;
  #line 755 
  mac_drv->update_stats = & hns_gmac_update_stats;
  #line 756 
  mac_drv->set_promiscuous = & hns_gmac_set_promisc;
  #line 757 
  mac_drv->wait_fifo_clean = & hns_gmac_wait_fifo_clean;
  #line 759 
  return (void *)mac_drv;
}

#line 672  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/0/concurrency safety/weaver/hns_dsaf_gmac.i.aux"
static void *cif_devm_kzalloc_5(struct device *dev, size_t size, gfp_t flags)
{
  #line 675 
  return ldv_devm_kzalloc(size,flags);
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/emg/0/environment_model.c"
#line 49 
void emg_dispatch_deregister_3(struct platform_driver *arg0);
#line 27 
#line 38 
void emg_dispatch_register_2(struct platform_driver *arg0);
#line 28 
#line 282 
void *emg_entry_point_insmod(void *arg0);
#line 30 
#line 58 
void *emg_platform_platform_instance_g_dsaf_driver(void *arg0);
#line 31 
#line 311 
int main(void);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_4;
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct platform_driver *arg0)
{
  #line 39 
  int ret;
  #line 40 
  struct emg_struct_platform_instance_g_dsaf_driver_4 *cf_arg_4;
  #line 41 
  cf_arg_4 = (struct emg_struct_platform_instance_g_dsaf_driver_4 *)ldv_xmalloc(16UL);
  #line 42 
  cf_arg_4->arg0 = arg0;
  #line 43 
  ret = pthread_create(& emg_thread_4,(pthread_attr_t *)0,& emg_platform_platform_instance_g_dsaf_driver,(void *)cf_arg_4);
  #line 44 
  __VERIFIER_assume(ret == 0);
  #line 45 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_3(struct platform_driver *arg0)
{
  #line 50 
  int ret;
  #line 51 
  struct emg_struct_platform_instance_g_dsaf_driver_4 *cf_arg_4;
  #line 52 
  ret = pthread_join(emg_thread_4,(void **)0);
  #line 53 
  __VERIFIER_assume(ret == 0);
  #line 54 
  return;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_platform_platform_instance_g_dsaf_driver(void *arg0)
{
  #line 61 
  struct platform_driver *emg_4_container;
  #line 62 
  struct pm_message *emg_4_emg_param_1_0;
  #line 63 
  int emg_4_probed;
  #line 64 
  struct platform_device *emg_4_resource;
  #line 65 
  int emg_repeat_cnt_main_4_1 = 1;
  #line 66 
  int emg_repeat_cnt_main_4_0 = 1;
  #line 67 
  int emg_repeat_cnt_call_4 = 1;
  #line 69 
  struct emg_struct_platform_instance_g_dsaf_driver_4 *data = (struct emg_struct_platform_instance_g_dsaf_driver_4 *)arg0;
  #line 73 
  emg_4_probed = 1;
  #line 74 
  emg_4_container = emg_alias_g_dsaf_driver;
  #line 75 
  emg_4_probed = 1;
  #line 77 
  __VERIFIER_assume(data->arg0 == emg_alias_g_dsaf_driver);
  #line 79 
  if (data != (struct emg_struct_platform_instance_g_dsaf_driver_4 *)0) {
    #line 80 
    emg_4_container = data->arg0;
    #line 81 
    ldv_free((void *)data);
  }
  #line 86 
  emg_4_resource = (struct platform_device *)ldv_xmalloc(1632UL);
  #line 87 
  emg_4_resource->id_entry = emg_4_container->id_table;
  #line 88 
  emg_4_resource->dev.platform_data = ldv_xmalloc_unknown_size(0UL);
  #line 92 
  goto emg_main_4;
  #line 96 
  return (void *)0;
  #line 99 
  emg_call_4: 
              #line 99 
  ;
  #line 100 
  if (ldv_undef_int() != 0) {
    #line 101 
    switch (ldv_undef_int()) {
      #line 102 
      case 0: 
              #line 102 
      ;
      #line 104 
      emg_4_emg_param_1_0 = (struct pm_message *)ldv_xmalloc_unknown_size(0UL);
      #line 104 
      emg_4_emg_param_1_0 = emg_4_emg_param_1_0;
      #line 108 
      if (emg_4_container->suspend != (int (*)(struct platform_device *, pm_message_t ))0) 
        #line 109 
        (*(emg_4_container->suspend))(emg_4_resource,*emg_4_emg_param_1_0);
      #line 114 
      ldv_free((void *)emg_4_emg_param_1_0);
      #line 118 
      if (emg_4_container->resume != (int (*)(struct platform_device *))0) 
        #line 119 
        (*(emg_4_container->resume))(emg_4_resource);
      #line 122 
      break;
      #line 124 
      case 1: 
              #line 124 
      ;
      #line 132 
      break;
      #line 134 
      case 2: 
              #line 134 
      ;
      #line 137 
      break;
      #line 139 
      default: 
               #line 139 
      ;
      #line 139 
      __VERIFIER_assume(0);
    }
    #line 142 
    if (emg_repeat_cnt_call_4 > 0) {
      #line 143 
      emg_repeat_cnt_call_4 --;
      #line 145 
      goto emg_call_4;
    }
    else 
         #line 147 
         __VERIFIER_assume(0);
  }
  else {
    #line 153 
    if (emg_4_container->shutdown != (void (*)(struct platform_device *))0) 
      #line 154 
      (*(emg_4_container->shutdown))(emg_4_resource);
    #line 159 
    emg_wrapper_hns_dsaf_remove(emg_4_resource);
    #line 163 
    emg_4_probed = 1;
    #line 166 
    if (emg_repeat_cnt_main_4_1 > 0) {
      #line 167 
      emg_repeat_cnt_main_4_1 --;
      #line 169 
      goto emg_main_4;
    }
    else 
         #line 171 
         __VERIFIER_assume(0);
  }
  #line 177 
  return (void *)0;
  #line 180 
  emg_main_4: 
              #line 180 
  ;
  #line 181 
  if (ldv_undef_int() != 0) {
    #line 184 
    ldv_pre_probe();
    #line 188 
    emg_4_probed = emg_wrapper_hns_dsaf_probe(emg_4_resource);
    #line 193 
    emg_4_probed = ldv_post_probe(emg_4_probed);
    #line 196 
    if (ldv_undef_int() != 0) {
      #line 198 
      __VERIFIER_assume(emg_4_probed == 0);
      #line 202 
      goto emg_call_4;
    }
    else {
      #line 207 
      __VERIFIER_assume(emg_4_probed != 0);
      #line 210 
      if (emg_repeat_cnt_main_4_0 > 0) {
        #line 211 
        emg_repeat_cnt_main_4_0 --;
        #line 213 
        goto emg_main_4;
      }
      else 
           #line 215 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 222 
       ldv_free((void *)emg_4_resource);
  #line 230 
  return (void *)0;
}

#line 235  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/emg/0/environment_model.c"
int emg___platform_driver_register(struct platform_driver *arg0, struct module *arg1)
{
  #line 238 
  struct platform_driver *emg_2_platform_driver;
  #line 240 
  emg_2_platform_driver = emg_alias_g_dsaf_driver;
  #line 241 
  if (ldv_undef_int() != 0) {
    #line 243 
    emg_2_platform_driver = arg0;
    #line 247 
    emg_dispatch_register_2(emg_2_platform_driver);
    #line 251 
    return 0;
  }
  else {
    #line 255 
    return ldv_undef_int_negative();
  }
}

#line 263  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/emg/0/environment_model.c"
void emg_platform_driver_unregister(struct platform_driver *arg0)
{
  #line 266 
  struct platform_driver *emg_3_platform_driver;
  #line 268 
  emg_3_platform_driver = emg_alias_g_dsaf_driver;
  #line 270 
  emg_3_platform_driver = arg0;
  #line 274 
  emg_dispatch_deregister_3(emg_3_platform_driver);
  #line 277 
  return;
}

#line 282  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 285 
  int emg_1_ret;
  #line 288 
  emg_1_ret = emg_g_dsaf_driver_init();
  #line 289 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 292 
  if (ldv_undef_int() != 0) {
    #line 294 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 298 
    emg_g_dsaf_driver_exit();
  }
  else 
       #line 302 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 306 
  return (void *)0;
}

#line 311  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns/hns_dsaf.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 313 
  ldv_initialize();
  #line 315 
  emg_entry_point_insmod((void *)0);
  #line 317 
  return 0;
}

